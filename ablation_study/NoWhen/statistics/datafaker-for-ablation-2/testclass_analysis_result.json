[{"file_path": "src/test/java/net/datafaker/providers/base/HololiveTest.java", "testclass_name": "HololiveTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "HololiveTest", "description": "Tests for the Hololive provider in the BaseFaker class, specifically focusing on the talent method with different locales.", "class_members": {"variables": [{"name": "JA_FAKER", "type": "static final BaseFaker"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "talent_jaLocale", "primary_tested": ["Hololive.talent()"], "external_dependencies": {"modules": ["BaseFaker", "Hololive"], "class_members": [{"name": "JA_FAKER", "type": "variable"}]}, "category": "unit", "description": "Tests the talent method of the Hololive provider with the Japanese locale, ensuring the output matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/FamousLastWordsTest.java", "testclass_name": "FamousLastWordsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FamousLastWordsTest", "description": "Test suite for the FamousLastWords provider in the BaseFaker class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testLastWords", "primary_tested": ["FamousLastWords.lastWords()"], "external_dependencies": {"modules": ["BaseFaker", "FamousLastWords"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of last words using the FamousLastWords provider, ensuring the output matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BoolTest.java", "testclass_name": "BoolTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "BoolTest", "description": "Test suite for the Bool provider in the BaseFaker class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBool", "primary_tested": ["Bool.bool()"], "external_dependencies": {"modules": ["BaseFaker", "Bool"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the bool method of the Bool provider returns either true or false."}]}, {"file_path": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java", "testclass_name": "FakerConcurrencyModificationExceptionTest", "dependencies": ["package net.datafaker;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.Test;"], "name": "FakerConcurrencyModificationExceptionTest", "description": "Tests related to concurrency modification exceptions in the Faker class.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}]}, "fixtures": [], "test_cases": [{"name": "test1", "primary_tested": ["RandomService.nextLong()"], "external_dependencies": {"modules": ["BaseFaker", "RandomService"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the nextLong method of the RandomService within the BaseFaker."}, {"name": "test2", "primary_tested": ["RandomService.nextLong()"], "external_dependencies": {"modules": ["BaseFaker", "RandomService"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the nextLong method of the RandomService within the BaseFaker."}]}, {"file_path": "src/test/java/net/datafaker/Issue759Test.java", "testclass_name": "Issue759Test", "dependencies": ["package net.datafaker;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.concurrent.CountDownLatch;", "import static java.util.concurrent.TimeUnit.SECONDS;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Issue759Test", "description": "Test class for verifying the behavior of the Faker library in a multi-threaded environment.", "class_members": {"variables": [], "methods": [{"name": "fakeSomeData", "signature": "public static void fakeSomeData(Faker faker)"}], "nested_classes": [{"name": "WorkerThread", "description": "Internal worker thread class for multi-threaded testing"}]}, "fixtures": [], "test_cases": [{"name": "issue759Test", "primary_tested": ["WorkerThread.run()"], "associated_methods": ["Issue759Test.fakeSomeData(Faker)"], "external_dependencies": {"modules": ["Faker", "CountDownLatch", "Thread"], "class_members": [{"name": "WorkerThread", "type": "nested_class"}, {"name": "fakeSomeData", "type": "method"}], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the Faker library in a multi-threaded environment to ensure it behaves correctly under high concurrency."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/SuperheroTest.java", "testclass_name": "SuperheroTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "SuperheroTest", "description": "Unit tests for the Superhero provider in the BaseFaker class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testName", "primary_tested": ["Superhero.name()"], "external_dependencies": {"modules": ["BaseFaker", "Superhero"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the name generation functionality of the Superhero provider."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java", "testclass_name": "GreekPhilosopherTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "GreekPhilosopherTest", "description": "Tests for generating names and quotes of Greek philosophers using the BaseFaker class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testName", "primary_tested": ["GreekPhilosopher.name()"], "external_dependencies": {"modules": ["BaseFaker", "GreekPhilosopher"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Greek philosopher names to ensure they match the expected pattern."}, {"name": "testQuote", "primary_tested": ["GreekPhilosopher.quote()"], "external_dependencies": {"modules": ["BaseFaker", "GreekPhilosopher"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of quotes from Greek philosophers to ensure they match the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/LanguageCodeTest.java", "testclass_name": "LanguageCodeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "LanguageCodeTest", "description": "Tests for the LanguageCode class, specifically checking the length of the ISO 639 code.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "languageCodeISO639ShouldBe2LettersInLength", "primary_tested": ["LanguageCode.iso639()"], "external_dependencies": {"modules": ["LanguageCode", "BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the ISO 639 code generated by the LanguageCode class is 2 letters in length."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/ComputerTest.java", "testclass_name": "ComputerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "ComputerTest", "description": "Unit tests for the Computer class within the BaseFaker framework.", "class_members": {"variables": [{"name": "computer", "type": "Computer"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "test_cases": [{"name": "testOperatingSystem", "primary_tested": ["Computer.operatingSystem()"], "external_dependencies": {"modules": ["Computer"], "class_members": [{"name": "computer", "type": "variable"}]}, "category": "unit", "description": "Tests that the operating system generated by the Computer class is not empty."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/TireTest.java", "testclass_name": "TireTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "TireTest", "description": "Unit tests for Tire class methods.", "class_members": {"variables": [{"name": "CODE_PATTERN", "type": "static final String"}, {"name": "tire", "type": "Tire"}]}, "fixtures": [], "test_cases": [{"name": "testDefaultPrefixedCode", "primary_tested": ["Tire.code(boolean)"], "external_dependencies": {"modules": ["Tire"], "class_members": [{"name": "tire", "type": "variable"}, {"name": "CODE_PATTERN", "type": "variable"}]}, "category": "unit", "description": "Tests the code generation with default prefixes."}, {"name": "testMiscPrefixedCode", "primary_tested": ["Tire.code(String)"], "external_dependencies": {"modules": ["Tire"], "class_members": [{"name": "tire", "type": "variable"}, {"name": "CODE_PATTERN", "type": "variable"}]}, "category": "unit", "description": "Tests the code generation with a miscellaneous prefix."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/MusicTest.java", "testclass_name": "MusicTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "MusicTest", "description": "Unit tests for the Music class in the BaseFaker library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "key", "primary_tested": ["Music.key()"], "external_dependencies": {"modules": ["Music"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the key generation functionality of the Music class."}, {"name": "chord", "primary_tested": ["Music.chord()"], "external_dependencies": {"modules": ["Music"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chord generation functionality of the Music class."}, {"name": "genre", "primary_tested": ["Music.genre()"], "external_dependencies": {"modules": ["Music"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the genre generation functionality of the Music class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/ColorTest.java", "testclass_name": "ColorTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "ColorTest", "description": "Unit tests for the Color class, focusing on hex color generation.", "class_members": {"variables": [{"name": "color", "type": "Color"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "testHex", "primary_tested": ["Color.hex()"], "external_dependencies": {"modules": ["Color"], "class_members": [{"name": "color", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a hex color code with a hash sign."}, {"name": "testHexNoHashSign", "primary_tested": ["Color.hex(boolean)"], "external_dependencies": {"modules": ["Color"], "class_members": [{"name": "color", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a hex color code without a hash sign."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java", "testclass_name": "FinancialTermsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.EnumSource;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FinancialTermsTest", "description": "Tests for the FinancialTerms class, focusing on noun, verb, and adjective generation.", "class_members": {"variables": [{"name": "financialTerms", "type": "FinancialTerms"}]}, "fixtures": [], "test_cases": [{"name": "category", "primary_tested": ["FinancialTerms.noun(FinancialTerms.Category)", "FinancialTerms.verb(FinancialTerms.Category)", "FinancialTerms.adjective(FinancialTerms.Category)"], "external_dependencies": {"modules": ["FinancialTerms", "FinancialTerms.Category"], "class_members": [{"name": "financialTerms", "type": "variable"}]}, "category": "unit", "description": "Tests the noun, verb, and adjective generation for each category of FinancialTerms."}, {"name": "defaults", "primary_tested": ["FinancialTerms.noun()", "FinancialTerms.verb()", "FinancialTerms.adjective()"], "external_dependencies": {"modules": ["FinancialTerms"], "class_members": [{"name": "financialTerms", "type": "variable"}]}, "category": "unit", "description": "Tests the default noun, verb, and adjective generation without specifying a category."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BusinessTest.java", "testclass_name": "BusinessTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "BusinessTest", "description": "Unit tests for the Business class methods.", "class_members": {"variables": [{"name": "business", "type": "Business"}]}, "fixtures": [], "test_cases": [{"name": "creditCardNumber", "primary_tested": ["Business.creditCardNumber()"], "external_dependencies": {"modules": ["Business"], "class_members": [{"name": "business", "type": "variable"}]}, "category": "unit", "description": "Tests that the credit card number generated by the Business class is not empty."}, {"name": "creditCardExpiry", "primary_tested": ["Business.creditCardExpiry()"], "external_dependencies": {"modules": ["Business"], "class_members": [{"name": "business", "type": "variable"}]}, "category": "unit", "description": "Tests that the credit card expiry date generated by the Business class is not empty and matches the expected date format."}, {"name": "securityCode", "primary_tested": ["Business.securityCode()"], "external_dependencies": {"modules": ["Business"], "class_members": [{"name": "business", "type": "variable"}]}, "category": "unit", "description": "Tests that the security code generated by the Business class is not empty."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/AnimalTest.java", "testclass_name": "AnimalTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "AnimalTest", "description": "Tests for the Animal class methods in the BaseFaker library.", "class_members": {"variables": [{"name": "animal", "type": "Animal"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "scientificName", "primary_tested": ["Animal.scientificName()"], "external_dependencies": {"modules": ["Animal"], "class_members": [{"name": "animal", "type": "variable"}]}, "category": "unit", "description": "Tests the scientific name generation of the Animal class."}, {"name": "genus", "primary_tested": ["Animal.genus()"], "external_dependencies": {"modules": ["Animal"], "class_members": [{"name": "animal", "type": "variable"}]}, "category": "unit", "description": "Tests the genus name generation of the Animal class."}, {"name": "species", "primary_tested": ["Animal.species()"], "external_dependencies": {"modules": ["Animal"], "class_members": [{"name": "animal", "type": "variable"}]}, "category": "unit", "description": "Tests the species name generation of the Animal class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java", "testclass_name": "ObjectMethodsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static net.datafaker.providers.base.ObjectMethods.executeMethodByReturnType;", "import static net.datafaker.providers.base.ObjectMethods.getMethodByName;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "ObjectMethodsTest", "description": "Unit tests for methods in ObjectMethods class, focusing on retrieving and executing methods by name and return type.", "class_members": {"variables": [{"name": "person", "type": "Person"}, {"name": "personName", "type": "PersonName"}], "nested_classes": [{"name": "Person", "description": "Internal class representing a person with age and name methods."}, {"name": "Age", "description": "Internal class representing age with a value method."}, {"name": "PersonName", "description": "Internal class representing a person's name with firstName and lastName methods."}]}, "test_cases": [{"name": "methodByName", "primary_tested": ["ObjectMethods.getMethodByName(Object,String)"], "external_dependencies": {"modules": ["Person", "PersonName"], "class_members": [{"name": "person", "type": "variable"}, {"name": "personName", "type": "variable"}]}, "category": "unit", "description": "Tests the retrieval of methods by name from Person and PersonName classes."}, {"name": "methodByReturnType", "primary_tested": ["ObjectMethods.executeMethodByReturnType(Object,String)"], "external_dependencies": {"modules": ["Person", "PersonName", "Age"], "class_members": [{"name": "person", "type": "variable"}, {"name": "personName", "type": "variable"}]}, "category": "unit", "description": "Tests the execution of methods by return type from Person and PersonName classes."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CountryTest.java", "testclass_name": "CountryTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "CountryTest", "description": "Tests for the Country class in the BaseFaker provider.", "class_members": {"variables": [{"name": "country", "type": "Country"}]}, "test_cases": [{"name": "testFlag", "primary_tested": ["Country.flag()"], "external_dependencies": {"modules": ["Country"], "class_members": [{"name": "country", "type": "variable"}]}, "category": "unit", "description": "Tests the flag generation functionality of the Country class."}, {"name": "testCurrency", "primary_tested": ["Country.currency()"], "external_dependencies": {"modules": ["Country"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the currency generation functionality of the Country class."}, {"name": "testCurrencyCode", "primary_tested": ["Country.currencyCode()"], "external_dependencies": {"modules": ["Country"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the currency code generation functionality of the Country class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java", "testclass_name": "InternetPasswordTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Matcher;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "InternetPasswordTest", "description": "Unit tests for generating and validating internet passwords.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPassword1000", "primary_tested": ["Internet.password(int,int,boolean,boolean,boolean)"], "associated_methods": ["Pattern.compile(String)", "Matcher.find()"], "external_dependencies": {"modules": ["Pattern", "Matcher", "BaseFaker", "Internet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of 1000 passwords with special characters and digits."}, {"name": "passwordSpecial", "primary_tested": ["Internet.password(int,int,boolean,boolean,boolean)"], "associated_methods": ["Pattern.compile(String)", "Matcher.find()"], "external_dependencies": {"modules": ["Pattern", "Matcher", "BaseFaker", "Internet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of passwords with special characters."}, {"name": "passwordMix", "primary_tested": ["Internet.password(int,int,boolean,boolean,boolean)"], "associated_methods": ["Pattern.compile(String)", "Matcher.find()"], "external_dependencies": {"modules": ["Pattern", "Matcher", "BaseFaker", "Internet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of passwords with a mix of special characters and digits."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/MoneyTest.java", "testclass_name": "MoneyTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MoneyTest", "description": "Unit tests for the Money provider in the BaseFaker class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCurrency", "primary_tested": ["Money.currency()"], "external_dependencies": {"modules": ["BaseFaker", "Money"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the currency generation functionality of the Money provider."}, {"name": "testCurrencyCode", "primary_tested": ["Money.currencyCode()"], "external_dependencies": {"modules": ["BaseFaker", "Money"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the currency code generation functionality of the Money provider."}, {"name": "testNumericCode", "primary_tested": ["Money.currencyNumericCode()"], "external_dependencies": {"modules": ["BaseFaker", "Money"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the numeric code generation functionality of the Money provider."}, {"name": "testCurrencySymbol", "primary_tested": ["Money.currencySymbol()"], "external_dependencies": {"modules": ["BaseFaker", "Money"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the currency symbol generation functionality of the Money provider."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/EducatorTest.java", "testclass_name": "EducatorTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "EducatorTest", "description": "Unit tests for the Educator class in the BaseFaker library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUniversity", "primary_tested": ["Educator.university()"], "external_dependencies": {"modules": ["BaseFaker", "Educator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the university generation functionality of the Educator class."}, {"name": "testCourse", "primary_tested": ["Educator.course()"], "external_dependencies": {"modules": ["BaseFaker", "Educator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the course generation functionality of the Educator class."}, {"name": "testSubjectWithNumber", "primary_tested": ["Educator.subjectWithNumber()"], "external_dependencies": {"modules": ["BaseFaker", "Educator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subject with number generation functionality of the Educator class."}, {"name": "testSecondarySchool", "primary_tested": ["Educator.secondarySchool()"], "external_dependencies": {"modules": ["BaseFaker", "Educator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the secondary school generation functionality of the Educator class."}, {"name": "testCampus", "primary_tested": ["Educator.campus()"], "external_dependencies": {"modules": ["BaseFaker", "Educator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the campus generation functionality of the Educator class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CPFTest.java", "testclass_name": "CPFTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.regex.Pattern;", "import static net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil.isCPFValid;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CPFTest", "description": "Tests for validating and formatting CPF numbers.", "class_members": {"variables": [{"name": "CPF_EXPRESSION", "type": "static final Pattern"}]}, "fixtures": [], "test_cases": [{"name": "isValidCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil", "net.datafaker.providers.base.BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests if a generated valid CPF number is considered valid by the isCPFValid method."}, {"name": "isInvalidCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil", "net.datafaker.providers.base.BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests if a generated invalid CPF number is considered invalid by the isCPFValid method."}, {"name": "formattedCPF", "primary_tested": [], "associated_methods": ["BaseFaker.cpf().valid()", "BaseFaker.cpf().valid(boolean)", "BaseFaker.cpf().invalid()", "BaseFaker.cpf().invalid(boolean)"], "external_dependencies": {"modules": ["net.datafaker.providers.base.BaseFaker", "java.util.regex.Pattern"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "CPF_EXPRESSION", "type": "variable"}]}, "category": "unit", "description": "Tests if the generated CPF numbers are formatted correctly according to the CPF_EXPRESSION pattern."}]}, {"file_path": "src/test/java/net/datafaker/Issue1178Test.java", "testclass_name": "Issue1178Test", "dependencies": ["package net.datafaker;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Issue1178Test", "description": "Tests various expressions using different locales with the Faker library.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testExpressionEnglishFails", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker", "Locale"]}, "category": "unit", "description": "Tests the expression method with English locale to ensure it does not return a blank string."}, {"name": "testExpressionFails", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker"]}, "category": "unit", "description": "Tests the expression method with default locale to ensure it does not return a blank string."}, {"name": "testExpressionUsFails", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker", "Locale"]}, "category": "unit", "description": "Tests the expression method with US locale to ensure it does not return a blank string."}, {"name": "testExpressionAUWorks", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker", "Locale"]}, "category": "unit", "description": "Tests the expression method with Australian locale to ensure it does not return a blank string."}, {"name": "testExpressionNLWorks", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker", "Locale"]}, "category": "unit", "description": "Tests the expression method with Dutch locale to ensure it does not return a blank string."}, {"name": "testExpressionNLWithMiddleWorks", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker", "Locale"]}, "category": "unit", "description": "Tests the expression method with Dutch locale for name with middle to ensure it does not return a blank string."}, {"name": "testExpressionNLWithCity", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker"]}, "category": "unit", "description": "Tests the expression method for city with default locale to ensure it does not return a blank string."}, {"name": "testExpressionNLWithFullAddress", "primary_tested": ["Faker.expression(String)"], "external_dependencies": {"modules": ["Faker", "Locale"]}, "category": "unit", "description": "Tests the expression method with Dutch locale for full address to ensure it does not return a blank string."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/VerbTest.java", "testclass_name": "VerbTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "VerbTest", "description": "Tests for various verb forms generated by the Faker library.", "class_members": {"variables": [{"name": "WORDS", "type": "static final String"}]}, "test_cases": [{"name": "testBase", "primary_tested": ["Verb.base()"], "external_dependencies": {"modules": ["Verb"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the base form of verbs generated by the Faker library."}, {"name": "testPast", "primary_tested": ["Verb.past()"], "external_dependencies": {"modules": ["Verb"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the past form of verbs generated by the Faker library."}, {"name": "testPastParticiple", "primary_tested": ["Verb.pastParticiple()"], "external_dependencies": {"modules": ["Verb"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the past participle form of verbs generated by the Faker library."}, {"name": "testSimplePresent", "primary_tested": ["Verb.simplePresent()"], "external_dependencies": {"modules": ["Verb"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the simple present form of verbs generated by the Faker library."}, {"name": "testIngForm", "primary_tested": ["Verb.ingForm()"], "external_dependencies": {"modules": ["Verb"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the ing form of verbs generated by the Faker library."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "testclass_name": "BaseFakerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.TestInfo;", "import org.junit.jupiter.api.TestInstance;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.mockito.MockitoAnnotations;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import java.util.function.Supplier;", "import java.util.logging.Level;", "import java.util.logging.Logger;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "BaseFakerTest", "description": "Test suite for BaseFaker class, focusing on parameterized tests for provider lists and checking for duplications.", "class_members": {"variables": [{"name": "LOG", "type": "static final Logger"}, {"name": "faker", "type": "T"}], "methods": [{"name": "getFaker", "signature": "protected T getFaker()"}, {"name": "getBaseList", "signature": "protected List<String> getBaseList(String key)"}, {"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}], "nested_classes": [{"name": "TestSpec", "description": "Internal class to encapsulate test specifications for parameterized tests."}]}, "fixtures": ["resetMocks"], "test_cases": [{"name": "testProviderList", "primary_tested": ["BaseFaker.fakeValuesService().fetchObject(String,Context)"], "associated_methods": ["TestSpec.supplier.get()"], "external_dependencies": {"modules": ["Logger", "Pattern", "TestInfo"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "getBaseList", "type": "method"}], "project_specific_resources": ["Logger.log(Level,String)"]}, "category": "unit", "fixtures_used": ["resetMocks"], "description": "Tests the provider list functionality, ensuring items are not empty and match the specified regex if provided."}, {"name": "testNoDuplications", "primary_tested": ["BaseFaker.fakeValuesService().fetchObject(String,Context)"], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [{"name": "faker", "type": "variable"}, {"name": "getBaseList", "type": "method"}]}, "category": "unit", "fixtures_used": ["resetMocks"], "description": "Tests that there are no duplications in the provided list for a given key."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/RelationshipTest.java", "testclass_name": "RelationshipTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.service.FakeValuesService;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.List;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.mockito.ArgumentMatchers.any;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.reset;", "import static org.mockito.Mockito.spy;", "import static org.mockito.Mockito.when;"], "name": "RelationshipTest", "description": "Unit tests for the Relationship class, focusing on various relationship types and error handling.", "class_members": {"variables": [{"name": "mockFaker", "type": "BaseFaker"}, {"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "relationship", "type": "Relationship"}], "methods": [], "nested_classes": []}, "fixtures": ["beforeEach"], "test_cases": [{"name": "anyTest", "primary_tested": ["Relationship.any()"], "external_dependencies": {"modules": ["Relationship"], "class_members": [{"name": "relationship", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the any() method of Relationship returns a non-empty result."}, {"name": "anyWithIllegalArgumentExceptionThrown", "primary_tested": ["FakeValuesService.resolve(String,Object,Object)"], "associated_methods": ["BaseFaker.fakeValuesService()"], "external_dependencies": {"modules": ["BaseFaker", "FakeValuesService", "IllegalArgumentException"], "class_members": [{"name": "mockFaker", "type": "variable"}, {"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that an IllegalArgumentException is thrown and caught correctly when calling any() method of Relationship."}, {"name": "anyWithInvocationTargetExceptionThrown", "primary_tested": ["FakeValuesService.resolve(String,Object,Object)"], "associated_methods": ["BaseFaker.fakeValuesService()"], "external_dependencies": {"modules": ["BaseFaker", "FakeValuesService", "NullPointerException"], "class_members": [{"name": "mockFaker", "type": "variable"}, {"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that a NullPointerException is thrown and caught correctly when calling any() method of Relationship."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CompassTest.java", "testclass_name": "CompassTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.providers.base.Compass.CompassPoint;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.EnumSource;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CompassTest", "description": "Tests for the Compass class in the BaseFaker library, focusing on various compass direction methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "compassDirectionWordWithCompassPoint", "primary_tested": ["Compass.compassPoint(CompassPoint).word()"], "external_dependencies": {"modules": ["Compass", "CompassPoint"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the word method of the Compass class with a specific CompassPoint."}, {"name": "compassDirectionWordWithoutCompassPoint", "primary_tested": ["Compass.word()"], "external_dependencies": {"modules": ["Compass"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the word method of the Compass class without a specific CompassPoint."}, {"name": "compassDirectionAbbreviationWithCompassPoint", "primary_tested": ["Compass.compassPoint(CompassPoint).abbreviation()"], "external_dependencies": {"modules": ["Compass", "CompassPoint"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the abbreviation method of the Compass class with a specific CompassPoint."}, {"name": "compassDirectionAbbreviationWithoutCompassPoint", "primary_tested": ["Compass.abbreviation()"], "external_dependencies": {"modules": ["Compass"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the abbreviation method of the Compass class without a specific CompassPoint."}, {"name": "compassAzimuthWithCompassPoint", "primary_tested": ["Compass.compassPoint(CompassPoint).azimuth()"], "external_dependencies": {"modules": ["Compass", "CompassPoint"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the azimuth method of the Compass class with a specific CompassPoint."}, {"name": "compassAzimuthWithoutCompassPoint", "primary_tested": ["Compass.azimuth()"], "external_dependencies": {"modules": ["Compass"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the azimuth method of the Compass class without a specific CompassPoint."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/RestaurantTest.java", "testclass_name": "RestaurantTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "RestaurantTest", "description": "Tests for the Restaurant class in the BaseFaker provider.", "class_members": {"variables": [{"name": "restaurant", "type": "Restaurant"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "namePrefix", "primary_tested": ["Restaurant.namePrefix()"], "external_dependencies": {"modules": ["Restaurant"], "class_members": [{"name": "restaurant", "type": "variable"}]}, "category": "unit", "description": "Tests the namePrefix functionality of the Restaurant class, ensuring it does not contain specific characters and matches a specific pattern."}, {"name": "name", "primary_tested": ["Restaurant.name()"], "external_dependencies": {"modules": ["Restaurant"], "class_members": [{"name": "restaurant", "type": "variable"}]}, "category": "unit", "description": "Tests the name functionality of the Restaurant class, ensuring it does not contain specific characters and matches a specific pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/NationTest.java", "testclass_name": "NationTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "NationTest", "description": "Unit tests for the Nation class methods in the BaseFaker library.", "class_members": {"variables": [{"name": "nation", "type": "Nation"}]}, "fixtures": [], "test_cases": [{"name": "nationality", "primary_tested": ["Nation.nationality()"], "external_dependencies": {"modules": ["Nation"], "class_members": [{"name": "nation", "type": "variable"}]}, "category": "unit", "description": "Tests the nationality method of the Nation class to ensure it matches the expected pattern."}, {"name": "language", "primary_tested": ["Nation.language()"], "external_dependencies": {"modules": ["Nation"], "class_members": [{"name": "nation", "type": "variable"}]}, "category": "unit", "description": "Tests the language method of the Nation class to ensure it matches the expected pattern."}, {"name": "capitalCity", "primary_tested": ["Nation.capitalCity()"], "external_dependencies": {"modules": ["Nation"], "class_members": [{"name": "nation", "type": "variable"}]}, "category": "unit", "description": "Tests the capitalCity method of the Nation class to ensure it matches the expected pattern."}, {"name": "flag", "primary_tested": ["Nation.flag()"], "external_dependencies": {"modules": ["Nation"], "class_members": [{"name": "nation", "type": "variable"}]}, "category": "unit", "description": "Tests the flag method of the Nation class to ensure it matches the expected pattern and size."}, {"name": "isoLanguage", "primary_tested": ["Nation.isoLanguage()"], "external_dependencies": {"modules": ["Nation"], "class_members": [{"name": "nation", "type": "variable"}]}, "category": "unit", "description": "Tests the isoLanguage method of the Nation class to ensure it matches the expected pattern."}, {"name": "isoCountry", "primary_tested": ["Nation.isoCountry()"], "external_dependencies": {"modules": ["Nation"], "class_members": [{"name": "nation", "type": "variable"}]}, "category": "unit", "description": "Tests the isoCountry method of the Nation class to ensure it matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/TeamTest.java", "testclass_name": "TeamTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "TeamTest", "description": "Tests for the Team class within the BaseFaker provider.", "class_members": {"variables": [{"name": "team", "type": "Team"}]}, "fixtures": [], "test_cases": [{"name": "testName", "primary_tested": ["Team.name()"], "external_dependencies": {"modules": ["Team"], "class_members": [{"name": "team", "type": "variable"}]}, "category": "unit", "description": "Tests the name generation functionality of the Team class."}, {"name": "testState", "primary_tested": ["Team.state()"], "external_dependencies": {"modules": ["Team"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the state generation functionality of the Team class."}, {"name": "testStateWithZaLocale", "primary_tested": ["Team.state()"], "external_dependencies": {"modules": ["BaseFaker", "Team"], "class_members": [{"name": "zaFaker", "type": "variable"}]}, "category": "unit", "description": "Tests the state generation functionality of the Team class with a specific locale (en_ZA)."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BookTest.java", "testclass_name": "BookTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "BookTest", "description": "Unit tests for the Book class in the BaseFaker library.", "class_members": {"variables": [{"name": "book", "type": "Book"}]}, "test_cases": [{"name": "testAuthor", "primary_tested": ["Book.author()"], "external_dependencies": {"modules": ["Book"], "class_members": [{"name": "book", "type": "variable"}]}, "category": "unit", "description": "Tests the author generation functionality of the Book class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DrivingLicenseTest.java", "testclass_name": "DrivingLicenseTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.EnumSource;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "DrivingLicenseTest", "description": "Parameterized tests for driving license patterns across different states.", "class_members": {"variables": [{"name": "drivingLicense", "type": "DrivingLicense"}], "nested_classes": [{"name": "LicensePattern", "description": "Enum containing state abbreviations and corresponding license patterns."}]}, "test_cases": [{"name": "drivingLicense", "primary_tested": ["DrivingLicense.drivingLicense(String)"], "external_dependencies": {"modules": ["DrivingLicense", "Pattern"], "class_members": [{"name": "drivingLicense", "type": "variable"}]}, "category": "unit", "description": "Tests the driving license generation for various state patterns."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "testclass_name": "ScienceTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "ScienceTest", "description": "Unit tests for various science-related methods provided by the Science class.", "class_members": {"variables": [{"name": "science", "type": "Science"}]}, "fixtures": [], "test_cases": [{"name": "element", "primary_tested": ["Science.element()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of science elements."}, {"name": "elementSymbol", "primary_tested": ["Science.elementSymbol()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of science element symbols."}, {"name": "scientist", "primary_tested": ["Science.scientist()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of scientist names."}, {"name": "tool", "primary_tested": ["Science.tool()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of science tools."}, {"name": "quark", "primary_tested": ["Science.quark()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of science quarks."}, {"name": "leptons", "primary_tested": ["Science.leptons()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of science leptons."}, {"name": "bosons", "primary_tested": ["Science.bosons()"], "external_dependencies": {"modules": ["Science"], "class_members": [{"name": "science", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of science bosons."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "testclass_name": "CompanyTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;", "import java.util.regex.Pattern;"], "name": "CompanyTest", "description": "Unit tests for the Company class in the BaseFaker library, focusing on various company-related data generation methods.", "class_members": {"variables": [{"name": "URL_PATTERN", "type": "static final Pattern"}, {"name": "PHRASE_PATTERN", "type": "static final Pattern"}, {"name": "company", "type": "Company"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "testName", "primary_tested": ["Company.name()"], "external_dependencies": {"modules": ["Company"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of company names, ensuring they match the expected pattern."}, {"name": "testBuzzword", "primary_tested": ["Company.buzzword()"], "external_dependencies": {"modules": ["Company"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of company buzzwords, ensuring they match the expected pattern."}, {"name": "testCatchPhrase", "primary_tested": ["Company.catchPhrase()"], "external_dependencies": {"modules": ["Company"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of company catch phrases, ensuring they match the expected pattern."}, {"name": "testBs", "primary_tested": ["Company.bs()"], "external_dependencies": {"modules": ["Company"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of company BS phrases, ensuring they match the expected pattern."}, {"name": "testLogo", "primary_tested": ["Company.logo()"], "external_dependencies": {"modules": ["Company"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of company logos, ensuring they match the expected URL pattern."}, {"name": "testUrl", "primary_tested": ["Company.url()"], "external_dependencies": {"modules": ["Company"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of company URLs, ensuring they match the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "testclass_name": "MbtiTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.util.Strings.isNullOrEmpty;"], "name": "MbtiTest", "description": "Unit tests for the Mbti class, focusing on various methods like type, name, characteristic, personage, merit, and weakness.", "class_members": {"variables": [{"name": "mbti", "type": "Mbti"}]}, "test_cases": [{"name": "type", "primary_tested": ["Mbti.type()"], "external_dependencies": {"modules": ["Mbti"], "class_members": [{"name": "mbti", "type": "variable"}]}, "category": "unit", "description": "Tests the type method of Mbti to ensure it returns a non-empty string matching a specific pattern."}, {"name": "name", "primary_tested": ["Mbti.name()"], "external_dependencies": {"modules": ["Mbti"], "class_members": [{"name": "mbti", "type": "variable"}]}, "category": "unit", "description": "Tests the name method of Mbti to ensure it returns a non-empty string matching a specific pattern."}, {"name": "characteristic", "primary_tested": ["Mbti.characteristic()"], "external_dependencies": {"modules": ["Mbti"], "class_members": [{"name": "mbti", "type": "variable"}]}, "category": "unit", "description": "Tests the characteristic method of Mbti to ensure it returns a non-empty string."}, {"name": "personage", "primary_tested": ["Mbti.personage()"], "external_dependencies": {"modules": ["Mbti"], "class_members": [{"name": "mbti", "type": "variable"}]}, "category": "unit", "description": "Tests the personage method of Mbti to ensure it returns a non-empty string matching a specific pattern."}, {"name": "merit", "primary_tested": ["Mbti.merit()"], "external_dependencies": {"modules": ["Mbti"], "class_members": [{"name": "mbti", "type": "variable"}]}, "category": "unit", "description": "Tests the merit method of Mbti to ensure it returns a non-empty string."}, {"name": "weakness", "primary_tested": ["Mbti.weakness()"], "external_dependencies": {"modules": ["Mbti"], "class_members": [{"name": "mbti", "type": "variable"}]}, "category": "unit", "description": "Tests the weakness method of Mbti to ensure it returns a non-empty string."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/UniversityTest.java", "testclass_name": "UniversityTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "UniversityTest", "description": "Unit tests for the University class within the BaseFaker framework.", "class_members": {"variables": [{"name": "university", "type": "University"}]}, "fixtures": [], "test_cases": [{"name": "testName", "primary_tested": ["University.name()"], "external_dependencies": {"modules": ["University"], "class_members": [{"name": "university", "type": "variable"}]}, "category": "unit", "description": "Tests the name generation functionality of the University class, ensuring it matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/SpaceTest.java", "testclass_name": "SpaceTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "SpaceTest", "description": "Unit tests for various space-related data generation methods.", "class_members": {"variables": [{"name": "SPACE_REGEX", "type": "static final String"}], "methods": [{"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "distanceMeasurement", "primary_tested": ["Space.distanceMeasurement()"], "external_dependencies": {"modules": ["Space"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of distance measurements in space."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "testclass_name": "PhoneNumberValidityFinderTest", "dependencies": ["package net.datafaker.providers.base;", "import com.google.i18n.phonenumbers.NumberParseException;", "import com.google.i18n.phonenumbers.PhoneNumberUtil;", "import com.google.i18n.phonenumbers.Phonenumber;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.Locale;", "import java.util.stream.Stream;", "import static java.util.Locale.ROOT;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "PhoneNumberValidityFinderTest", "description": "Tests for validating phone numbers using the PhoneNumberUtil library.", "class_members": {"variables": [{"name": "COUNT", "type": "static final int"}, {"name": "util", "type": "PhoneNumberUtil"}], "methods": [{"name": "parse", "signature": "Phonenumber.PhoneNumber parse(String, String)"}, {"name": "allSupportedLocales", "signature": "Stream<Arguments> allSupportedLocales()"}, {"name": "createLocale", "signature": "Locale createLocale(String)"}]}, "fixtures": [], "test_cases": [{"name": "testAllCellPhoneForLocale", "primary_tested": ["PhoneNumberUtil.parse(String,String)", "PhoneNumberUtil.isValidNumber(Phonenumber.PhoneNumber)"], "external_dependencies": {"modules": ["BaseFaker", "PhoneNumberUtil", "Phonenumber.PhoneNumber", "Locale"], "class_members": [{"name": "util", "type": "variable"}]}, "category": "unit", "description": "Tests the generation and validation of phone numbers for a specific locale."}, {"name": "testValidNumber", "primary_tested": ["PhoneNumberUtil.parse(String,String)", "PhoneNumberUtil.isValidNumber(Phonenumber.PhoneNumber)"], "external_dependencies": {"modules": ["PhoneNumberUtil", "Phonenumber.PhoneNumber"], "class_members": [{"name": "util", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of a specific phone number for a given region."}, {"name": "testAllPhoneNumbers", "primary_tested": ["PhoneNumberUtil.parse(String,String)", "PhoneNumberUtil.isValidNumber(Phonenumber.PhoneNumber)"], "associated_methods": ["PhoneNumberValidityFinderTest.parse(String,String)"], "external_dependencies": {"modules": ["BaseFaker", "PhoneNumberUtil", "Phonenumber.PhoneNumber", "Locale"], "class_members": [{"name": "util", "type": "variable"}, {"name": "parse", "type": "method"}]}, "category": "unit", "description": "Tests the generation and validation of phone numbers for all supported locales."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "testclass_name": "CommerceTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.text.DecimalFormatSymbols;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CommerceTest", "description": "Unit tests for the Commerce class, focusing on various commerce-related functionalities.", "class_members": {"variables": [{"name": "decimalSeparator", "type": "char"}, {"name": "CAPITALIZED_WORD_REGEX", "type": "static final String"}, {"name": "PROMOTION_CODE_REGEX", "type": "static final String"}, {"name": "commerce", "type": "Commerce"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "testDepartment", "primary_tested": ["Commerce.department()"], "external_dependencies": {"modules": ["Commerce"], "class_members": [{"name": "commerce", "type": "variable"}]}, "category": "unit", "description": "Tests the department functionality of the Commerce class."}, {"name": "testProductName", "primary_tested": ["Commerce.productName()"], "external_dependencies": {"modules": ["Commerce"], "class_members": [{"name": "commerce", "type": "variable"}]}, "category": "unit", "description": "Tests the product name functionality of the Commerce class."}, {"name": "testPrice", "primary_tested": ["Commerce.price()"], "external_dependencies": {"modules": ["Commerce"], "class_members": [{"name": "commerce", "type": "variable"}, {"name": "decimalSeparator", "type": "variable"}]}, "category": "unit", "description": "Tests the price functionality of the Commerce class."}, {"name": "testPriceMinMax", "primary_tested": ["Commerce.price(int,int)"], "external_dependencies": {"modules": ["Commerce"], "class_members": [{"name": "commerce", "type": "variable"}, {"name": "decimalSeparator", "type": "variable"}]}, "category": "unit", "description": "Tests the price functionality of the Commerce class with specified min and max values."}, {"name": "testPromotionCode", "primary_tested": ["Commerce.promotionCode()"], "external_dependencies": {"modules": ["Commerce"], "class_members": [{"name": "commerce", "type": "variable"}, {"name": "PROMOTION_CODE_REGEX", "type": "variable"}]}, "category": "unit", "description": "Tests the promotion code functionality of the Commerce class."}, {"name": "testPromotionCodeDigits", "primary_tested": ["Commerce.promotionCode(int)"], "external_dependencies": {"modules": ["Commerce"], "class_members": [{"name": "commerce", "type": "variable"}, {"name": "PROMOTION_CODE_REGEX", "type": "variable"}]}, "category": "unit", "description": "Tests the promotion code functionality of the Commerce class with specified number of digits."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DurationTest.java", "testclass_name": "DurationTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.time.Duration;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "DurationTest", "description": "Unit tests for generating random durations within specified bounds.", "class_members": {"variables": [{"name": "maxSeconds", "type": "final long"}, {"name": "maxMins", "type": "final long"}, {"name": "maxHours", "type": "final long"}, {"name": "maxDays", "type": "final long"}]}, "fixtures": [], "test_cases": [{"name": "testDurationSeconds", "primary_tested": ["Duration.atMostSeconds(long)"], "external_dependencies": {"modules": ["Duration", "BaseFaker"], "class_members": [{"name": "maxSeconds", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a random duration in seconds within a specified upper bound."}, {"name": "testDurationMinutes", "primary_tested": ["Duration.atMostMinutes(long)"], "external_dependencies": {"modules": ["Duration", "BaseFaker"], "class_members": [{"name": "maxMins", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a random duration in minutes within a specified upper bound."}, {"name": "testDurationHours", "primary_tested": ["Duration.atMostHours(long)"], "external_dependencies": {"modules": ["Duration", "BaseFaker"], "class_members": [{"name": "maxHours", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a random duration in hours within a specified upper bound."}, {"name": "testDurationDays", "primary_tested": ["Duration.atMostDays(long)"], "external_dependencies": {"modules": ["Duration", "BaseFaker"], "class_members": [{"name": "maxDays", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a random duration in days within a specified upper bound."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "testclass_name": "RandomFakerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Random;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "RandomFakerTest", "description": "Tests for controlling randomness in BaseFaker methods.", "class_members": {"variables": [{"name": "CONSTANT_SEED_VALUE", "type": "static final int"}, {"name": "faker", "type": "BaseFaker"}, {"name": "random", "type": "Random"}], "methods": [{"name": "resetRandomSeed", "signature": "void resetRandomSeed()"}]}, "fixtures": ["before"], "test_cases": [{"name": "testNumerifyRandomnessCanBeControlled", "primary_tested": ["BaseFaker.numerify(String)"], "associated_methods": ["Random.setSeed(long)"], "external_dependencies": {"modules": ["BaseFaker", "Random"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "random", "type": "variable"}, {"name": "resetRandomSeed", "type": "method"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests that the randomness of numerify method can be controlled by setting a constant seed."}, {"name": "testLetterifyRandomnessCanBeControlled", "primary_tested": ["BaseFaker.letterify(String)"], "associated_methods": ["Random.setSeed(long)"], "external_dependencies": {"modules": ["BaseFaker", "Random"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "random", "type": "variable"}, {"name": "resetRandomSeed", "type": "method"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests that the randomness of letterify method can be controlled by setting a constant seed."}, {"name": "testNameRandomnessCanBeControlled", "primary_tested": ["Name.name()"], "associated_methods": ["Random.setSeed(long)"], "external_dependencies": {"modules": ["BaseFaker", "Random"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "random", "type": "variable"}, {"name": "resetRandomSeed", "type": "method"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests that the randomness of name generation can be controlled by setting a constant seed."}, {"name": "testEmailRandomnessCanBeControlled", "primary_tested": ["Internet.emailAddress()"], "associated_methods": ["Random.setSeed(long)"], "external_dependencies": {"modules": ["BaseFaker", "Random"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "random", "type": "variable"}, {"name": "resetRandomSeed", "type": "method"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests that the randomness of email generation can be controlled by setting a constant seed."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DomainTest.java", "testclass_name": "DomainTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;"], "name": "DomainTest", "description": "Unit tests for domain-related functionalities in the BaseFaker class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFirstLevelDomainNotNull", "primary_tested": ["Domain.firstLevelDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the first level domain is not null."}, {"name": "testFirstLevelDomain", "primary_tested": ["Domain.firstLevelDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the first level domain components are not empty."}, {"name": "testSecondLevelDomainNotNull", "primary_tested": ["Domain.secondLevelDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the second level domain is not null."}, {"name": "testSecondLevelDomain", "primary_tested": ["Domain.secondLevelDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the second level domain components are not empty."}, {"name": "testFullDomainNotNull", "primary_tested": ["Domain.fullDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the full domain is not null."}, {"name": "testFullDomain", "primary_tested": ["Domain.fullDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the full domain components are not empty."}, {"name": "testValidDomainNotNull", "primary_tested": ["Domain.validDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the valid domain is not null."}, {"name": "testValidDomain", "primary_tested": ["Domain.validDomain(String)"], "external_dependencies": {"modules": ["BaseFaker", "Domain"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the valid domain components are not empty."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "testclass_name": "LocalityTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.io.File;", "import java.util.List;", "import java.util.Random;", "import java.util.Set;", "import java.util.stream.Collectors;", "import java.util.stream.IntStream;", "import java.util.stream.Stream;", "import static java.util.Locale.ROOT;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "LocalityTest", "description": "Tests for the Locality class, focusing on locale-related functionalities.", "class_members": {"variables": [{"name": "f", "type": "BaseFaker"}, {"name": "locality", "type": "Locality"}], "methods": [{"name": "findAllSupportedLocales", "signature": "List<String> findAllSupportedLocales(File resourceDirectory)"}]}, "test_cases": [{"name": "allSupportedLocales", "primary_tested": ["Locality.allSupportedLocales()"], "associated_methods": ["LocalityTest.findAllSupportedLocales(File)"], "external_dependencies": {"modules": ["File", "Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the list of all supported locales is correctly loaded and matches the expected count and content."}, {"name": "displayName", "primary_tested": ["Locality.displayName()"], "external_dependencies": {"modules": ["Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the display name method returns a non-empty string."}, {"name": "localeStringRandom", "primary_tested": ["Locality.localeStringWithRandom(Random)"], "external_dependencies": {"modules": ["Locality", "Random"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the localeStringWithRandom method returns the same locale when using a pseudorandom number generator with a fixed seed."}, {"name": "localeStringWithRandom", "primary_tested": ["Locality.localeStringWithRandom(Random)"], "external_dependencies": {"modules": ["Locality", "Random"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the localeStringWithRandom method returns a locale that is within the set of all supported locales."}, {"name": "localeStringWithoutReplacement", "primary_tested": ["Locality.localeStringWithoutReplacement(Random)"], "external_dependencies": {"modules": ["Locality", "Random"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the localeStringWithoutReplacement method returns all supported locales without replacement."}, {"name": "localeString", "primary_tested": ["Locality.localeString()"], "external_dependencies": {"modules": ["Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the localeString method returns a locale that is within the set of all supported locales."}, {"name": "localeWithoutReplacement", "primary_tested": ["Locality.localeStringWithoutReplacement()"], "external_dependencies": {"modules": ["Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "description": "Tests that the localeStringWithoutReplacement method returns a non-null locale."}]}, {"file_path": "src/test/java/net/datafaker/providers/foods/TeaTest.java", "testclass_name": "TeaTest", "dependencies": ["package net.datafaker.providers.foods;", "import net.datafaker.providers.food.Tea;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "TeaTest", "description": "Unit tests for the Tea class in the net.datafaker.providers.food package.", "class_members": {"variables": [{"name": "tea", "type": "Tea"}], "methods": [{"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "testVariety", "primary_tested": ["Tea.variety()"], "external_dependencies": {"modules": ["Tea"], "class_members": [{"name": "tea", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the variety method of the Tea class to ensure it matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/foods/FoodTest.java", "testclass_name": "FoodTest", "dependencies": ["package net.datafaker.providers.foods;", "import net.datafaker.providers.food.Food;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FoodTest", "description": "Unit tests for the Food class methods.", "class_members": {"variables": [{"name": "food", "type": "Food"}], "methods": [{"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "measurement", "primary_tested": ["Food.measurement()"], "external_dependencies": {"modules": ["Food"], "class_members": [{"name": "food", "type": "variable"}]}, "category": "unit", "description": "Tests the measurement functionality of the Food class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/WeatherTest.java", "testclass_name": "WeatherTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "WeatherTest", "description": "Unit tests for Weather class methods related to temperature conversion and description.", "class_members": {"variables": [{"name": "weather", "type": "Weather"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "test_cases": [{"name": "temperatureCelsius", "primary_tested": ["Weather.temperatureCelsius()"], "external_dependencies": {"modules": ["Weather"], "class_members": [{"name": "weather", "type": "variable"}]}, "category": "unit", "description": "Tests the temperatureCelsius method to ensure it returns a value matching the expected pattern."}, {"name": "temperatureFahrenheit", "primary_tested": ["Weather.temperatureFahrenheit()"], "external_dependencies": {"modules": ["Weather"], "class_members": [{"name": "weather", "type": "variable"}]}, "category": "unit", "description": "Tests the temperatureFahrenheit method to ensure it returns a value matching the expected pattern."}, {"name": "temperatureCelsiusInRange", "primary_tested": ["Weather.temperatureCelsius(int,int)"], "external_dependencies": {"modules": ["Weather"], "class_members": [{"name": "weather", "type": "variable"}]}, "category": "unit", "description": "Tests the temperatureCelsius method with a range to ensure it returns values within the specified range."}, {"name": "temperatureFahrenheitInRange", "primary_tested": ["Weather.temperatureFahrenheit(int,int)"], "external_dependencies": {"modules": ["Weather"], "class_members": [{"name": "weather", "type": "variable"}]}, "category": "unit", "description": "Tests the temperatureFahrenheit method with a range to ensure it returns values within the specified range."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "testclass_name": "CNPJTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static java.lang.Integer.parseInt;", "import static net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil.isCNPJValid;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CNPJTest", "description": "Tests for CNPJ generation and validation in the BaseFaker class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "isValidCNPJ", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "external_dependencies": {"modules": ["CNPJ", "BaseFaker"], "class_members": [], "project_specific_resources": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests if a generated valid CNPJ is indeed valid."}, {"name": "isInvalidCNPJ", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "external_dependencies": {"modules": ["CNPJ", "BaseFaker"], "class_members": [], "project_specific_resources": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests if a generated invalid CNPJ is indeed invalid."}, {"name": "valid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001", "primary_tested": ["CNPJ.valid(boolean,boolean)"], "associated_methods": ["CNPJ.valid(boolean,boolean)", "CNPJ.valid(boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "external_dependencies": {"modules": ["CNPJ", "BaseFaker"], "class_members": [], "project_specific_resources": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests if a valid CNPJ with multi-branch set to true generates a branch number greater than 0001."}, {"name": "invalid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001", "primary_tested": ["CNPJ.invalid(boolean,boolean)"], "associated_methods": ["CNPJ.invalid(boolean,boolean)", "CNPJ.invalid(boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "external_dependencies": {"modules": ["CNPJ", "BaseFaker"], "class_members": [], "project_specific_resources": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests if an invalid CNPJ with multi-branch set to true generates a branch number greater than 0001."}, {"name": "bug", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": ["IdNumberGeneratorPtBrUtil.isCNPJValid(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests a specific CNPJ for validity, possibly related to a bug."}, {"name": "formattedCNPJ", "primary_tested": ["CNPJ.valid()", "CNPJ.valid(boolean)", "CNPJ.invalid()", "CNPJ.invalid(boolean)"], "associated_methods": ["Pattern.compile(String)"], "external_dependencies": {"modules": ["CNPJ", "BaseFaker", "Pattern"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the generated CNPJ is in the correct format."}]}, {"file_path": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java", "testclass_name": "HebrewFoodTest", "dependencies": ["package net.datafaker.providers.foods;", "import net.datafaker.providers.food.Food;", "import net.datafaker.providers.food.FoodFaker;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "HebrewFoodTest", "description": "Test suite for Hebrew food-related functionalities using FoodFaker.", "class_members": {"variables": [{"name": "food", "type": "Food"}], "methods": [{"name": "getFaker", "signature": "protected FoodFaker getFaker()"}, {"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}]}, "fixtures": ["before"], "test_cases": [{"name": "measurement", "primary_tested": ["Food.measurement()"], "external_dependencies": {"modules": ["Food"], "class_members": [{"name": "food", "type": "variable"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests the measurement functionality of the Food class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/AppTest.java", "testclass_name": "AppTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "AppTest", "description": "Unit tests for the App class, focusing on version and author methods.", "class_members": {"variables": [{"name": "app", "type": "App"}]}, "fixtures": [], "test_cases": [{"name": "testVersion", "primary_tested": ["App.version()"], "external_dependencies": {"modules": ["App"], "class_members": [{"name": "app", "type": "variable"}]}, "category": "unit", "description": "Tests the version method of the App class to ensure it matches the expected pattern."}, {"name": "testAuthor", "primary_tested": ["App.author()"], "external_dependencies": {"modules": ["App"], "class_members": [{"name": "app", "type": "variable"}]}, "category": "unit", "description": "Tests the author method of the App class to ensure it matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java", "testclass_name": "MinecraftTest", "dependencies": ["package net.datafaker.providers.videogame;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MinecraftTest", "description": "Unit tests for Minecraft-related data generation using the VideoGameFaker.", "class_members": {"variables": [{"name": "minecraft", "type": "Minecraft"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "test_cases": [{"name": "testTileItemName", "primary_tested": ["Minecraft.tileItemName()"], "external_dependencies": {"modules": ["Minecraft"], "class_members": [{"name": "minecraft", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of tile item names in Minecraft, ensuring they match the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java", "testclass_name": "CoffeeTest", "dependencies": ["package net.datafaker.providers.foods;", "import net.datafaker.providers.food.Coffee;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CoffeeTest", "description": "Unit tests for Coffee-related functionalities provided by the FoodFaker library.", "class_members": {"variables": [{"name": "coffee", "type": "Coffee"}], "methods": [{"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}]}, "test_cases": [{"name": "notes", "primary_tested": ["Coffee.notes()"], "external_dependencies": {"modules": ["Coffee"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the notes method of Coffee returns a non-empty string."}, {"name": "blendName", "primary_tested": ["Coffee.blendName()"], "external_dependencies": {"modules": ["Coffee"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests that the blendName method of Coffee returns a non-empty string."}]}, {"file_path": "src/test/java/net/datafaker/providers/healthcare/MedicalProcedureTest.java", "testclass_name": "MedicalProcedureTest", "dependencies": ["package net.datafaker.providers.healthcare;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MedicalProcedureTest", "description": "Tests for generating medical procedure codes using the MedicalProcedure provider.", "class_members": {"variables": [{"name": "medicalProcedure", "type": "MedicalProcedure"}]}, "test_cases": [{"name": "testProcedureCodes", "primary_tested": ["MedicalProcedure.icd10()"], "external_dependencies": {"modules": ["MedicalProcedure"], "class_members": [{"name": "medicalProcedure", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of ICD-10 procedure codes and validates their format."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/AwsTest.java", "testclass_name": "AwsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.List;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "AwsTest", "description": "Unit tests for AWS-related functionalities provided by the BaseFaker class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAccountId", "primary_tested": ["Aws.accountId()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS account IDs."}, {"name": "testAcmARN", "primary_tested": ["Aws.acmARN()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS ACM ARNs."}, {"name": "testAlbARN", "primary_tested": ["Aws.albARN()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS ALB ARNs."}, {"name": "testAlbTargetGroupARN", "primary_tested": ["Aws.albTargetGroupARN()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS ALB Target Group ARNs."}, {"name": "testRoute53ZoneId", "primary_tested": ["Aws.route53ZoneId()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS Route 53 Zone IDs."}, {"name": "testSecurityGroupId", "primary_tested": ["Aws.securityGroupId()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS Security Group IDs."}, {"name": "testSubnetId", "primary_tested": ["Aws.subnetId()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS Subnet IDs."}, {"name": "testVpcId", "primary_tested": ["Aws.vpcId()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS VPC IDs."}, {"name": "testRegion", "primary_tested": ["Aws.region()"], "external_dependencies": {"modules": ["BaseFaker", "Aws"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of AWS regions."}]}, {"file_path": "src/test/java/net/datafaker/providers/entertainment/AvatarTest.java", "testclass_name": "AvatarTest", "dependencies": ["package net.datafaker.providers.entertainment;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "AvatarTest", "description": "Tests for the Avatar provider in the EntertainmentFaker.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAvatar", "primary_tested": ["Avatar.image()"], "external_dependencies": {"modules": ["Avatar"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of an avatar image URL using the Avatar provider."}]}, {"file_path": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java", "testclass_name": "Dota2Test", "dependencies": ["package net.datafaker.providers.videogame;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.List;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Dota2Test", "description": "Unit tests for the Dota2 class, focusing on various functionalities like hero quotes and other attributes.", "class_members": {"variables": [{"name": "dota2", "type": "Dota2"}]}, "test_cases": [{"name": "dota2HeroQuote", "primary_tested": ["Dota2.hero()", "Dota2.heroQuote(String)"], "associated_methods": ["String.replace(String,String)", "String.toLowerCase(Locale)"], "external_dependencies": {"modules": ["Dota2", "Locale"], "class_members": [{"name": "dota2", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of generating hero quotes in Dota2."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/TextTest.java", "testclass_name": "TextTest", "dependencies": ["package net.datafaker.providers.base;", "import org.assertj.core.api.Condition;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static net.datafaker.providers.base.Text.DIGITS;", "import static net.datafaker.providers.base.Text.EN_LOWERCASE;", "import static net.datafaker.providers.base.Text.EN_UPPERCASE;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "TextTest", "description": "Unit tests for the Text class in the net.datafaker.providers.base package.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "textShouldContain3RULowerCaseAnd5CustomSpecialSymbols", "primary_tested": ["Text.text(Text.TextRuleConfig)"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "Text.TextSymbolsBuilder", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the generated text contains exactly 3 Russian lowercase letters and 5 custom special symbols."}, {"name": "exceptionIfLengthIsShorterThanNumberOfRequiredSymbols", "primary_tested": ["Text.text(Text.TextRuleConfig)"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "Text.TextSymbolsBuilder", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an IllegalArgumentException is thrown when the length of the text is shorter than the number of required symbols."}, {"name": "everyTextShouldContainLowerCaseUpperCaseAndDigit", "primary_tested": ["Text.text(Text.TextRuleConfig)"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "Text.TextSymbolsBuilder", "org.assertj.core.api.Assertions", "org.assertj.core.api.Condition"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that every generated text contains at least one lowercase letter, one uppercase letter, and one digit."}, {"name": "testCharacter", "primary_tested": ["Text.character()"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "java.util.regex.Pattern", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the generated character is an alphabetic character."}, {"name": "testUppercaseCharacter", "primary_tested": ["Text.uppercaseCharacter()"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the generated character is an uppercase character."}, {"name": "testLowercaseCharacter", "primary_tested": ["Text.lowercaseCharacter()"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the generated character is a lowercase character."}, {"name": "testFixedLengthText", "primary_tested": ["Text.text(int)"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the generated text has a fixed length specified by the input parameter."}, {"name": "testDefaultLengthText", "primary_tested": ["Text.text()"], "associated_methods": [], "external_dependencies": {"modules": ["Text", "BaseFaker", "org.assertj.core.api.Assertions"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the generated text has a length between 20 and 80 characters."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "testclass_name": "SlackEmojiTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "SlackEmojiTest", "description": "Unit tests for SlackEmoji class methods.", "class_members": {"variables": [{"name": "EMOTICON_REGEX", "type": "static final String"}, {"name": "slackEmoji", "type": "SlackEmoji"}]}, "test_cases": [{"name": "people", "primary_tested": ["SlackEmoji.people()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the people method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "nature", "primary_tested": ["SlackEmoji.nature()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the nature method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "food_and_drink", "primary_tested": ["SlackEmoji.foodAndDrink()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the foodAndDrink method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "celebration", "primary_tested": ["SlackEmoji.celebration()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the celebration method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "activity", "primary_tested": ["SlackEmoji.activity()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the activity method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "travel_and_places", "primary_tested": ["SlackEmoji.travelAndPlaces()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the travelAndPlaces method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "objects_and_symbols", "primary_tested": ["SlackEmoji.objectsAndSymbols()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the objectsAndSymbols method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "custom", "primary_tested": ["SlackEmoji.custom()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the custom method of SlackEmoji to ensure it matches the emoticon regex."}, {"name": "emoji", "primary_tested": ["SlackEmoji.emoji()"], "external_dependencies": {"modules": ["SlackEmoji"], "class_members": [{"name": "slackEmoji", "type": "variable"}]}, "category": "unit", "description": "Tests the emoji method of SlackEmoji to ensure it matches the emoticon regex."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/AviationTest.java", "testclass_name": "AviationTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;", "import java.util.regex.Pattern;"], "name": "AviationTest", "description": "Unit tests for the Aviation class methods.", "class_members": {"variables": [{"name": "aviation", "type": "Aviation"}]}, "fixtures": [], "test_cases": [{"name": "flight_ICAO", "primary_tested": ["Aviation.flight(String)"], "external_dependencies": {"modules": ["Pattern"], "class_members": [{"name": "aviation", "type": "variable"}]}, "category": "unit", "description": "Tests the flight method with ICAO-related inputs."}, {"name": "flight_IATA", "primary_tested": ["Aviation.flight(String)"], "external_dependencies": {"modules": ["Pattern"], "class_members": [{"name": "aviation", "type": "variable"}]}, "category": "unit", "description": "Tests the flight method with IATA-related inputs."}, {"name": "flight_default", "primary_tested": ["Aviation.flight()"], "external_dependencies": {"modules": [], "class_members": [{"name": "aviation", "type": "variable"}]}, "category": "unit", "description": "Tests the default flight method."}, {"name": "aircraft", "primary_tested": ["Aviation.aircraft()"], "external_dependencies": {"modules": [], "class_members": [{"name": "aviation", "type": "variable"}]}, "category": "unit", "description": "Tests the aircraft method."}, {"name": "gate", "primary_tested": ["Aviation.gate()"], "external_dependencies": {"modules": [], "class_members": [{"name": "aviation", "type": "variable"}]}, "category": "unit", "description": "Tests the gate method."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/MedicalTest.java", "testclass_name": "MedicalTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MedicalTest", "description": "Tests for the Medical provider in the BaseFaker class, focusing on various medical-related data generation.", "class_members": {"variables": [], "methods": [{"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDiagnosisCodeUS", "primary_tested": ["Medical.diagnosisCode()"], "external_dependencies": {"modules": ["BaseFaker", "Medical", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of diagnosis codes for the US locale, ensuring they match the expected ICD-10-CM format."}, {"name": "testDiagnosisCodeAU", "primary_tested": ["Medical.diagnosisCode()"], "external_dependencies": {"modules": ["BaseFaker", "Medical", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of diagnosis codes for the Australian locale, ensuring they match the expected ICD-10-AM format."}, {"name": "testDiagnosisCodeNotAustraliaNorUS", "primary_tested": ["Medical.diagnosisCode()"], "external_dependencies": {"modules": ["BaseFaker", "Medical", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of diagnosis codes for locales other than Australia and the US, ensuring they match the expected ICD-10 format."}, {"name": "testProcedureCodes", "primary_tested": ["Medical.procedureCode()"], "external_dependencies": {"modules": ["BaseFaker", "Medical"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of procedure codes, ensuring they match the expected ICD-10-PCS format."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/HashingTest.java", "testclass_name": "HashingTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "HashingTest", "description": "Unit tests for hashing methods in the BaseFaker class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMd2", "primary_tested": ["Hashing.md2()"], "external_dependencies": {"modules": ["BaseFaker", "Hashing"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the MD2 hashing functionality."}, {"name": "testMd5", "primary_tested": ["Hashing.md5()"], "external_dependencies": {"modules": ["BaseFaker", "Hashing"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the MD5 hashing functionality."}, {"name": "testSha1", "primary_tested": ["Hashing.sha1()"], "external_dependencies": {"modules": ["BaseFaker", "Hashing"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the SHA-1 hashing functionality."}, {"name": "testSha256", "primary_tested": ["Hashing.sha256()"], "external_dependencies": {"modules": ["BaseFaker", "Hashing"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the SHA-256 hashing functionality."}, {"name": "testSha384", "primary_tested": ["Hashing.sha384()"], "external_dependencies": {"modules": ["BaseFaker", "Hashing"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the SHA-384 hashing functionality."}, {"name": "testSha512", "primary_tested": ["Hashing.sha512()"], "external_dependencies": {"modules": ["BaseFaker", "Hashing"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the SHA-512 hashing functionality."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/FileTest.java", "testclass_name": "FileTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FileTest", "description": "Unit tests for file-related functionalities provided by the BaseFaker class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testExtension", "primary_tested": ["BaseFaker.file().extension()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of file extensions with specific allowed values."}, {"name": "testMimeTypeFormat", "primary_tested": ["BaseFaker.file().mimeType()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the format of generated MIME types."}, {"name": "testFileName", "primary_tested": ["BaseFaker.file().fileName()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of file names with specific patterns."}, {"name": "testFileNameSpecifyExtension", "primary_tested": ["BaseFaker.file().fileName(String,String,String,String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of file names with a specified extension."}, {"name": "testFileNameSpecifyDir", "primary_tested": ["BaseFaker.file().fileName(String,String,String,String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of file names with a specified directory."}, {"name": "testFileNameSpecifySeparator", "primary_tested": ["BaseFaker.file().fileName(String,String,String,String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of file names with a specified separator."}, {"name": "testFileNameSpecifyName", "primary_tested": ["BaseFaker.file().fileName(String,String,String,String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of file names with a specified name."}]}, {"file_path": "src/test/java/net/datafaker/integration/UkLocalDirectivesTest.java", "testclass_name": "UkLocalDirectivesTest", "dependencies": ["package net.datafaker.integration;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "UkLocalDirectivesTest", "description": "Tests the resolution of directives specific to the UK locale within the YML file without reaching out to any of the BaseFaker child objects.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "resolvesDirectivesOnlyInYmlFile", "primary_tested": ["BaseFaker.address().streetName()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "List", "assertThat"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the street name generated for the UK locale starts with a feminine or masculine prefix as defined in the YML file."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java", "testclass_name": "ShakespeareTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "ShakespeareTest", "description": "Unit tests for Shakespeare quotes generated by the BaseFaker class.", "class_members": {"variables": [{"name": "shakespeare", "type": "Shakespeare"}]}, "test_cases": [{"name": "testHamletQuote", "primary_tested": ["Shakespeare.hamletQuote()"], "external_dependencies": {"modules": ["Shakespeare"], "class_members": [{"name": "shakespeare", "type": "variable"}]}, "category": "unit", "description": "Tests that the Hamlet quote generated by Shakespeare is not empty."}, {"name": "testAsYouLikeItQuote", "primary_tested": ["Shakespeare.asYouLikeItQuote()"], "external_dependencies": {"modules": ["Shakespeare"], "class_members": [{"name": "shakespeare", "type": "variable"}]}, "category": "unit", "description": "Tests that the As You Like It quote generated by Shakespeare is not empty."}, {"name": "testKingRichardIIIQuote", "primary_tested": ["Shakespeare.kingRichardIIIQuote()"], "external_dependencies": {"modules": ["Shakespeare"], "class_members": [{"name": "shakespeare", "type": "variable"}]}, "category": "unit", "description": "Tests that the King Richard III quote generated by Shakespeare is not empty."}, {"name": "testRomeoAndJulietQuote", "primary_tested": ["Shakespeare.romeoAndJulietQuote()"], "external_dependencies": {"modules": ["Shakespeare"], "class_members": [{"name": "shakespeare", "type": "variable"}]}, "category": "unit", "description": "Tests that the Romeo and Juliet quote generated by Shakespeare is not empty."}]}, {"file_path": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java", "testclass_name": "HearthstoneTest", "dependencies": ["package net.datafaker.providers.videogame;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "HearthstoneTest", "description": "Unit tests for Hearthstone-related functionalities in the VideoGameFaker.", "class_members": {"variables": [{"name": "hearthstone", "type": "Hearthstone"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "battlegroundsScoreTest", "primary_tested": ["Hearthstone.battlegroundsScore()"], "external_dependencies": {"modules": ["Hearthstone"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a Battlegrounds score within a specified range."}, {"name": "standardRankTest", "primary_tested": ["Hearthstone.standardRank()"], "external_dependencies": {"modules": ["Hearthstone"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a standard rank with a specific pattern."}, {"name": "wildRankTest", "primary_tested": ["Hearthstone.wildRank()"], "external_dependencies": {"modules": ["Hearthstone"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a wild rank with a specific pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java", "testclass_name": "StarWarsTest", "dependencies": ["package net.datafaker.providers.entertainment;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Collection;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "StarWarsTest", "description": "Unit tests for Star Wars related functionalities provided by the Faker library.", "class_members": {"variables": [{"name": "starWars", "type": "StarWars"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "test_cases": [{"name": "callSign", "primary_tested": ["StarWars.callSign()"], "external_dependencies": {"modules": ["StarWars"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the call sign generation functionality of the StarWars class."}, {"name": "alternativeSpelling", "primary_tested": ["StarWars.alternateCharacterSpelling()"], "external_dependencies": {"modules": ["StarWars"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the alternative character spelling generation functionality of the StarWars class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "testclass_name": "TwitterTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.Date;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "TwitterTest", "description": "Unit tests for Twitter-related functionalities in the BaseFaker class.", "class_members": {"variables": [{"name": "twitter", "type": "Twitter"}]}, "test_cases": [{"name": "testCreatedDateForward", "primary_tested": ["Twitter.createdTime(boolean,Date,Date)"], "external_dependencies": {"modules": ["Date"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the forward creation time functionality of the Twitter class."}, {"name": "testCreatedDateBackward", "primary_tested": ["Twitter.createdTime(boolean,Date,Date)"], "external_dependencies": {"modules": ["Date"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the backward creation time functionality of the Twitter class."}, {"name": "testShortTwitterIdLength", "primary_tested": ["Twitter.twitterId(int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a short Twitter ID with a specific length."}, {"name": "testLongTwitterIdLength", "primary_tested": ["Twitter.twitterId(int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a long Twitter ID with a specific length."}, {"name": "testTwitterIdLength", "primary_tested": ["Twitter.twitterId(int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a Twitter ID with a specific length."}, {"name": "testTwitterIdUnique", "primary_tested": ["Twitter.twitterId(int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the uniqueness of generated Twitter IDs."}, {"name": "testTextLength", "primary_tested": ["Twitter.text(String[],int,int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the length of generated text in Twitter posts."}, {"name": "testTextKeyWords", "primary_tested": ["Twitter.text(String[],int,int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the inclusion of specific keywords in generated Twitter text."}, {"name": "username", "primary_tested": ["Twitter.userName()"], "external_dependencies": {"modules": ["Pattern"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of Twitter usernames that match a specific pattern."}, {"name": "userId", "primary_tested": ["Twitter.userId()"], "external_dependencies": {"modules": ["Pattern"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of Twitter user IDs that match a specific pattern."}, {"name": "linkTestRules", "primary_tested": ["Twitter.getLink(String,int)"], "external_dependencies": {"modules": ["Pattern"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of Twitter links that match a specific pattern."}, {"name": "linkTestKeyWords", "primary_tested": ["Twitter.getLink(String,int)"], "external_dependencies": {"modules": ["String"], "class_members": [{"name": "twitter", "type": "variable"}]}, "category": "unit", "description": "Tests the inclusion of specific keywords in generated Twitter links."}]}, {"file_path": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java", "testclass_name": "MostSpecificLocaleTest", "dependencies": ["package net.datafaker.integration;", "import net.datafaker.service.FakeValuesService;", "import net.datafaker.service.FakerContext;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MostSpecificLocaleTest", "description": "Tests the resolution of the most specific locale in the FakeValuesService.", "class_members": {"variables": [{"name": "en", "type": "FakerContext"}, {"name": "en_US", "type": "FakerContext"}], "methods": [{"name": "fakeValuesService", "signature": "FakeValuesService fakeValuesService(FakerContext context)"}]}, "fixtures": [], "test_cases": [{"name": "resolvesTheMostSpecificLocale", "primary_tested": ["FakeValuesService.fetchObject(String,FakerContext)"], "associated_methods": [], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext", "Locale", "List"], "class_members": [{"name": "en", "type": "variable"}, {"name": "en_US", "type": "variable"}, {"name": "fakeValuesService", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the resolution of the most specific locale in the FakeValuesService by comparing default countries for 'en' and 'en_US' locales."}]}, {"file_path": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java", "testclass_name": "Issue194SlashFormatRegexTest", "dependencies": ["package net.datafaker.integration;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Issue194SlashFormatRegexTest", "description": "Tests for validating the regexified values of zip codes for different locales using BaseFaker.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "enGBZipCodeReturnsProperRegexifiedValue", "primary_tested": ["BaseFaker.address().zipCode()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "description": "Tests if the zip code generated for the en_GB locale matches the expected regex pattern."}, {"name": "enCAZipCodeReturnsProperRegexifiedValue", "primary_tested": ["BaseFaker.address().zipCode()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "description": "Tests if the zip code generated for the en_CA locale matches the expected regex pattern."}, {"name": "viZipCodeReturnsProperRegexifiedValue", "primary_tested": ["BaseFaker.address().zipCode()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "description": "Tests if the zip code generated for the vi locale matches the expected regex pattern."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/BulgarianIdNumberTest.java", "testclass_name": "BulgarianIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "BulgarianIdNumberTest", "description": "Unit tests for the BulgarianIdNumber class, specifically focusing on the checksum method.", "class_members": {"variables": [{"name": "generator", "type": "BulgarianIdNumber"}]}, "test_cases": [{"name": "checksum", "primary_tested": ["BulgarianIdNumber.checksum(String)"], "external_dependencies": {"modules": ["BulgarianIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum functionality of the BulgarianIdNumber class with various ID numbers."}]}, {"file_path": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java", "testclass_name": "DiseaseTest", "dependencies": ["package net.datafaker.providers.healthcare;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import java.util.Set;", "import java.util.stream.Collectors;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.DERMATOLOGY_DISEASE_KEY;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.GYNECOLOGY_AND_OBSTETRICS_DISEASE_KEY;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.INTERNAL_DISEASE_KEY;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.NEUROLOGICAL_DISEASE_KEY;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.OPHTHALMOLOGY_AND_OTORHINOLARYNGOLOGY_DISEASE_KEY;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.PAEDIATRIC_DISEASE_KEY;", "import static net.datafaker.providers.healthcare.Disease.DiseaseType.SURGICAL_DISEASE_KEY;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "DiseaseTest", "description": "Tests for the Disease class in the healthcare package, focusing on various disease types and ICD-10 codes.", "class_members": {"variables": [{"name": "disease", "type": "Disease"}, {"name": "allDiseases", "type": "Set<String>"}], "methods": [{"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "testAnyDisease", "primary_tested": ["Disease.anyDisease()"], "associated_methods": ["Disease.getBaseList(String)"], "external_dependencies": {"modules": ["Disease", "Disease.DiseaseType", "Arrays", "Collection", "Set", "Collectors"], "class_members": [{"name": "disease", "type": "variable"}, {"name": "allDiseases", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of any disease from the combined list of all disease types."}, {"name": "testDiseaseCodes", "primary_tested": ["Disease.icd10()"], "external_dependencies": {"modules": ["Disease"], "class_members": [{"name": "disease", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ICD-10 disease codes, ensuring they match the expected format."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SouthKoreanIdNumberTest.java", "testclass_name": "SouthKoreanIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.RepeatedTest;", "import java.time.LocalDate;", "import java.time.format.DateTimeFormatter;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "SouthKoreanIdNumberTest", "description": "Tests for validating South Korean Resident Registration Numbers (RRN).", "class_members": {"variables": [{"name": "YYMMDD", "type": "static final DateTimeFormatter"}, {"name": "D_6_D_7", "type": "static final Pattern"}]}, "test_cases": [{"name": "testValidKoKrRrn", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["Faker", "Locale", "Pattern", "LocalDate", "DateTimeFormatter"], "class_members": [{"name": "YYMMDD", "type": "variable"}, {"name": "D_6_D_7", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation and validation of a valid South Korean Resident Registration Number (RRN)."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/MacedonianIdNumberTest.java", "testclass_name": "MacedonianIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MacedonianIdNumberTest", "description": "Unit tests for the checksum functionality of the MacedonianIdNumber class.", "class_members": {"variables": [{"name": "generator", "type": "MacedonianIdNumber"}]}, "test_cases": [{"name": "checksum", "primary_tested": ["MacedonianIdNumber.checksum(String)"], "external_dependencies": {"modules": ["MacedonianIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum functionality of the MacedonianIdNumber class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "testclass_name": "OptionsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.util.List;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "OptionsTest", "description": "Unit tests for the Options class, focusing on various methods like option, subset, and nextElement.", "class_members": {"variables": [{"name": "options", "type": "String[]"}, {"name": "opt", "type": "Options"}]}, "test_cases": [{"name": "testOptionWithArray", "primary_tested": ["Options.option(String[])"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "opt", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "description": "Tests the option method with an array of strings."}, {"name": "testOptionWithVarargsString", "primary_tested": ["Options.option(String...)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "opt", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "description": "Tests the option method with varargs of strings."}, {"name": "testOptionWithVarargs", "primary_tested": ["Options.option(Integer...)", "Options.option(Long[])", "Options.option(Short[])", "Options.option(Byte[])", "Options.option(Double[])", "Options.option(Float[])", "Options.option(BigInteger[])", "Options.option(BigDecimal[])", "Options.option(Boolean[])"], "external_dependencies": {"modules": ["Options", "BigInteger", "BigDecimal"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the option method with various types of varargs and arrays."}, {"name": "testSubset", "primary_tested": ["Options.subset(int,Integer[])", "Options.subset(int,Long[])", "Options.subset(int,String[])"], "external_dependencies": {"modules": ["Options", "List"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the subset method with various types of arrays."}, {"name": "testSubsetWithDuplicate", "primary_tested": ["Options.subset(int,Object[])", "Options.subset(int,String[])"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the subset method with arrays containing duplicates."}, {"name": "testEmptySubset", "primary_tested": ["Options.subset(int,Object[])", "Options.subset(int,String[])"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the subset method with an empty subset and negative size."}, {"name": "testOptionWithEnum", "primary_tested": ["Options.option(Class<Day>)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the option method with an enum type."}, {"name": "testNextArrayElement", "primary_tested": ["Options.nextElement(Integer[])"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the nextElement method with an array of integers."}, {"name": "testNextListElement", "primary_tested": ["Options.nextElement(List<Integer>)"], "external_dependencies": {"modules": ["Options", "List"], "class_members": [{"name": "opt", "type": "variable"}]}, "category": "unit", "description": "Tests the nextElement method with a list of integers."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/TimeTest.java", "testclass_name": "TimeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.time.LocalTime;", "import java.time.format.DateTimeFormatter;", "import java.time.temporal.ChronoUnit;", "import java.time.temporal.TemporalAccessor;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "TimeTest", "description": "Unit tests for time-related functionalities in the BaseFaker class.", "class_members": {"variables": [{"name": "RE_TIME_BETWEEN", "type": "static final Pattern"}, {"name": "NANOSECONDS_IN_DAY", "type": "static final long"}, {"name": "NANOSECONDS_IN_MINUTE", "type": "static final long"}]}, "test_cases": [{"name": "testFutureTime", "primary_tested": ["BaseFaker.time().future(int,ChronoUnit)"], "external_dependencies": {"modules": ["LocalTime", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the future time generation functionality ensuring the generated time is within the specified range."}, {"name": "testFutureTimeWithMinimum", "primary_tested": ["BaseFaker.time().future(int,int,ChronoUnit)"], "external_dependencies": {"modules": ["LocalTime", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the future time generation functionality with a minimum time ensuring the generated time is within the specified range."}, {"name": "testPastTimeWithMinimum", "primary_tested": ["BaseFaker.time().past(int,int,ChronoUnit)"], "external_dependencies": {"modules": ["LocalTime", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the past time generation functionality with a minimum time ensuring the generated time is within the specified range."}, {"name": "testPastTime", "primary_tested": ["BaseFaker.time().past(int,ChronoUnit)"], "external_dependencies": {"modules": ["LocalTime", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the past time generation functionality ensuring the generated time is within the specified range."}, {"name": "testBetween", "primary_tested": ["BaseFaker.time().between(LocalTime,LocalTime)"], "external_dependencies": {"modules": ["LocalTime"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the time generation between two LocalTime instances ensuring the generated time is within the specified range."}, {"name": "testBetweenWithSameLocalTime", "primary_tested": ["BaseFaker.time().between(LocalTime,LocalTime)"], "external_dependencies": {"modules": ["LocalTime"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the time generation between two identical LocalTime instances ensuring the generated time is the same."}, {"name": "testBetweenThenLargerThanNow", "primary_tested": ["BaseFaker.time().between(LocalTime,LocalTime)"], "external_dependencies": {"modules": ["LocalTime"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the time generation between two LocalTime instances where the upper bound is less than the lower bound, expecting an IllegalArgumentException."}, {"name": "testBetweenWithMask", "primary_tested": ["BaseFaker.time().between(LocalTime,LocalTime,String)"], "external_dependencies": {"modules": ["LocalTime", "DateTimeFormatter", "Pattern"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "RE_TIME_BETWEEN", "type": "variable"}, {"name": "NANOSECONDS_IN_DAY", "type": "variable"}, {"name": "NANOSECONDS_IN_MINUTE", "type": "variable"}]}, "category": "unit", "description": "Tests the time generation between two LocalTime instances with a specified pattern ensuring the generated time is within the specified range and matches the pattern."}, {"name": "futureWithMask", "primary_tested": ["BaseFaker.time().future(int,ChronoUnit,String)", "BaseFaker.time().future(int,int,ChronoUnit,String)"], "external_dependencies": {"modules": ["DateTimeFormatter", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the future time generation functionality with a specified pattern ensuring the generated time is parsable with the specified pattern."}, {"name": "pastWithMask", "primary_tested": ["BaseFaker.time().past(int,ChronoUnit,String)", "BaseFaker.time().past(int,int,ChronoUnit,String)"], "external_dependencies": {"modules": ["DateTimeFormatter", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the past time generation functionality with a specified pattern ensuring the generated time is parsable with the specified pattern."}]}, {"file_path": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java", "testclass_name": "FakerRepeatabilityIntegrationTest", "dependencies": ["package net.datafaker.integration;", "import com.google.common.collect.MapDifference;", "import com.google.common.collect.Maps;", "import net.datafaker.Faker;", "import net.datafaker.providers.base.AbstractProvider;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.parallel.Execution;", "import org.junit.jupiter.api.parallel.ExecutionMode;", "import java.lang.reflect.InvocationTargetException;", "import java.lang.reflect.Method;", "import java.lang.reflect.Modifier;", "import java.time.Instant;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.Random;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FakerRepeatabilityIntegrationTest", "description": "Integration tests for ensuring repeatability and uniqueness of values generated by Faker.", "class_members": {"methods": [{"name": "buildReport", "signature": "static Map<String, String> buildReport(Faker faker) throws IllegalAccessException, InvocationTargetException"}]}, "fixtures": [], "test_cases": [{"name": "shouldCreateRepeatableValues", "primary_tested": ["Faker.Faker(Random)", "AbstractProvider.toString()"], "associated_methods": ["FakerRepeatabilityIntegrationTest.buildReport(Faker)"], "external_dependencies": {"modules": ["Faker", "Random", "Map", "MapDifference", "Maps", "AbstractProvider", "InvocationTargetException", "IllegalAccessException", "Method", "Arrays", "Comparator", "HashMap", "List", "Modifier", "assertThat"], "class_members": [{"name": "buildReport", "type": "method"}]}, "category": "integration", "description": "Tests that Faker generates repeatable values when initialized with the same seed."}, {"name": "shouldCreateUniqueValues", "primary_tested": ["Faker.Faker()", "AbstractProvider.toString()"], "associated_methods": ["FakerRepeatabilityIntegrationTest.buildReport(Faker)"], "external_dependencies": {"modules": ["Faker", "Map", "MapDifference", "Maps", "AbstractProvider", "InvocationTargetException", "IllegalAccessException", "Method", "Arrays", "Comparator", "HashMap", "List", "Modifier", "assertThat"], "class_members": [{"name": "buildReport", "type": "method"}]}, "category": "integration", "description": "Tests that Faker generates unique values when initialized without a seed."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/NameTest.java", "testclass_name": "NameTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "NameTest", "description": "Unit tests for various name generation functionalities provided by the Name class.", "class_members": {"variables": [{"name": "name", "type": "Name"}]}, "fixtures": [], "test_cases": [{"name": "testName", "primary_tested": ["Name.name()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a full name matching a specific pattern."}, {"name": "testNameWithMiddle", "primary_tested": ["Name.nameWithMiddle()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a name with a middle name matching a specific pattern."}, {"name": "testNameWithMiddleDoesNotHaveRepeatedName", "primary_tested": ["Name.nameWithMiddle()"], "associated_methods": ["String.split(String)"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests that the generated name with a middle name does not have repeated names."}, {"name": "testFullName", "primary_tested": ["Name.fullName()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a full name matching a specific pattern."}, {"name": "testFullNameArabic", "primary_tested": ["Name.fullName()"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a full name in Arabic matching a specific pattern."}, {"name": "testFirstName", "primary_tested": ["Name.firstName()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a first name matching a specific pattern."}, {"name": "testFemaleFirstName", "primary_tested": ["Name.femaleFirstName()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a female first name matching a specific pattern."}, {"name": "testMaleFirstName", "primary_tested": ["Name.malefirstName()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a male first name matching a specific pattern."}, {"name": "testLastName", "primary_tested": ["Name.lastName()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a last name matching a specific pattern."}, {"name": "testPrefix", "primary_tested": ["Name.prefix()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a name prefix matching a specific pattern."}, {"name": "testSuffix", "primary_tested": ["Name.suffix()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a name suffix matching a specific pattern."}, {"name": "testTitle", "primary_tested": ["Name.title()"], "external_dependencies": {"modules": ["Name"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a title matching a specific pattern."}, {"name": "test", "primary_tested": ["Name.name()"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a name in Indonesian."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "testclass_name": "UniqueTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.service.RandomService;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.*;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.mockito.Mockito.*;"], "name": "UniqueTest", "description": "Unit tests for the Unique class in the BaseFaker library, focusing on the fetchFromYaml method.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}, {"name": "defaultValues", "type": "static final List<String>"}]}, "fixtures": [], "test_cases": [{"name": "fetchFromYaml_shouldReturnValuesInRandomOrderUsingRandomService", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "associated_methods": ["RandomService.nextInt(int,int)"], "external_dependencies": {"modules": ["BaseFaker", "RandomService", "Mockito"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "defaultValues", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method returns values in random order using the RandomService."}, {"name": "fetchFromYaml_shouldThrowExceptionWhenAllPossibleValuesHaveBeenReturned", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method throws an exception when all possible values have been returned."}, {"name": "fetchFromYaml_shouldReturnValuesBasedOnKeyAndLocale", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method returns values based on the key and locale."}, {"name": "fetchFromYaml_shouldThrowExceptionWhenNoValuesFoundForKey", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method throws an exception when no values are found for the key."}, {"name": "fetchFromYaml_shouldThrowExceptionWhenNonListValueFoundForKey", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method throws an exception when a non-list value is found for the key."}, {"name": "fetchFromYaml_shouldThrowExceptionWhenListOfListsFoundForKey", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method throws an exception when a list of lists is found for the key."}, {"name": "fetchFromYaml_shouldNotInterfereWithValuesReturnedFromOtherFakers", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "defaultValues", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method does not interfere with values returned from other fakers."}, {"name": "fetchFromYaml_shouldConvertIntegersToStrings", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method converts integers to strings."}, {"name": "fetchFromYaml_shouldConvertDecimalsToStrings", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method converts decimals to strings."}, {"name": "fetchFromYaml_shouldConvertBooleansToStrings", "primary_tested": ["BaseFaker.unique().fetchFromYaml(String)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the fetchFromYaml method converts booleans to strings."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/UtilsTest.java", "testclass_name": "UtilsTest", "dependencies": ["package net.datafaker.idnumbers;", "import org.junit.jupiter.api.Test;", "import static net.datafaker.idnumbers.Utils.digit;", "import static net.datafaker.idnumbers.Utils.digitAt;", "import static net.datafaker.idnumbers.Utils.multiply;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "UtilsTest", "description": "Unit tests for utility methods in the Utils class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "digit_parsesGivenCharToNumber", "primary_tested": ["Utils.digit(char)"], "external_dependencies": {"modules": ["Utils"]}, "category": "unit", "description": "Tests the digit parsing functionality from a given character to a number."}, {"name": "digitAt_parsesGivenCharToNumber", "primary_tested": ["Utils.digitAt(String,int)"], "external_dependencies": {"modules": ["Utils"]}, "category": "unit", "description": "Tests the digit parsing functionality from a given character at a specific position in a string to a number."}, {"name": "multiply_digits", "primary_tested": ["Utils.multiply(String,int[])"], "external_dependencies": {"modules": ["Utils"]}, "category": "unit", "description": "Tests the multiplication functionality of digits."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java", "testclass_name": "MoldovanIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MoldovanIdNumberTest", "description": "Tests for the MoldovanIdNumber class, focusing on generating valid PINs and calculating checksums.", "class_members": {"variables": [{"name": "generator", "type": "MoldovanIdNumber"}, {"name": "faker", "type": "Faker"}]}, "fixtures": [], "test_cases": [{"name": "valid", "primary_tested": ["MoldovanIdNumber.generateValid(Faker)"], "external_dependencies": {"modules": ["MoldovanIdNumber", "Faker"], "class_members": [{"name": "generator", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid PIN with a length of 13 digits."}, {"name": "checksum", "primary_tested": ["MoldovanIdNumber.checksum(String)"], "external_dependencies": {"modules": ["MoldovanIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum calculation for various PINs."}]}, {"file_path": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "testclass_name": "FakeCollectionTest", "dependencies": ["package net.datafaker.sequence;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.providers.base.Address;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.providers.base.Number;", "import net.datafaker.transformations.CompositeField;", "import net.datafaker.transformations.CsvTransformer;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.JsonTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.List;", "import java.util.Random;", "import java.util.function.Supplier;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "FakeCollectionTest", "description": "Test suite for generating collections and sequences using the FakeCollection class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "generateCollection", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection of names with a specified size range."}, {"name": "generateSequence", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a sequence of digits with a specified size range."}, {"name": "generateSequenceOfDefaultSize", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a sequence of digits with default size."}, {"name": "generateEmptySequence", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of an empty sequence."}, {"name": "isInfiniteTest", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the infinite property of a sequence."}, {"name": "generateSequence5", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a sequence of digits with a fixed size of 5."}, {"name": "generateNullCollection", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection with null values."}, {"name": "illegalNullRate", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the handling of illegal null rates."}, {"name": "generateCollectionPassingSuppliersAsList", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection by passing suppliers as a list."}, {"name": "generateCollectionWithRepeatableFaker", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection with a repeatable faker."}, {"name": "generateCollectionWithDifferentObjects", "primary_tested": ["Name.firstName()", "Number.random().nextInt(int)"], "external_dependencies": {"modules": ["Name", "Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection with different object types."}, {"name": "checkWrongArguments", "primary_tested": ["Name.firstName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the handling of wrong arguments for collection generation."}, {"name": "toCsv", "primary_tested": ["CsvTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["CsvTransformer", "Schema", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV data from a collection."}, {"name": "toJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON data from a collection."}, {"name": "toNestedJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema", "BaseFaker", "Address", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of nested JSON data from a collection."}, {"name": "singletonTest", "primary_tested": ["BloodPressure.new()", "Glucose.new()", "Temperature.new()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a singleton from a collection."}, {"name": "testIterator", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the iteration over a sequence of digits."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java", "testclass_name": "SwedishIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "SwedishIdNumberTest", "description": "Unit tests for validating Swedish Social Security Numbers (SSNs).", "class_members": {}, "fixtures": [], "test_cases": [{"name": "validSwedishSsn", "primary_tested": ["SwedenIdNumber.isValidSwedishSsn(String)"], "external_dependencies": {"modules": ["SwedenIdNumber"]}, "category": "unit", "description": "Tests the validation of valid Swedish Social Security Numbers."}, {"name": "invalidSwedishSsn", "primary_tested": ["SwedenIdNumber.isValidSwedishSsn(String)"], "external_dependencies": {"modules": ["SwedenIdNumber"]}, "category": "unit", "description": "Tests the validation of invalid Swedish Social Security Numbers."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/ImageTest.java", "testclass_name": "ImageTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.providers.base.Image.ImageType;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.EnumSource;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;"], "name": "ImageTest", "description": "Unit tests for various image generation functionalities provided by the Image class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "bmp", "primary_tested": ["Image.base64BMP()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded BMP image."}, {"name": "gif", "primary_tested": ["Image.base64GIF()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded GIF image."}, {"name": "png", "primary_tested": ["Image.base64PNG()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded PNG image."}, {"name": "jpg", "primary_tested": ["Image.base64JPG()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded JPG image."}, {"name": "jpeg", "primary_tested": ["Image.base64JPEG()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded JPEG image."}, {"name": "svg", "primary_tested": ["Image.base64SVG()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded SVG image."}, {"name": "tiff", "primary_tested": ["Image.base64TIFF()"], "external_dependencies": {"modules": ["Image"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded TIFF image."}, {"name": "base64", "primary_tested": ["Image.base64(Base64ImageRuleConfig)"], "external_dependencies": {"modules": ["Image", "ImageType"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded image with various types."}, {"name": "defaultBuilder", "primary_tested": ["Image.base64(ImageBuilder)"], "external_dependencies": {"modules": ["Image", "ImageBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded image using the default builder."}, {"name": "customBase64builder", "primary_tested": ["Image.base64(ImageBuilder)"], "external_dependencies": {"modules": ["Image", "ImageBuilder", "ImageType"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded GIF image using a custom builder."}, {"name": "tinyBase64builder", "primary_tested": ["Image.base64(ImageBuilder)"], "external_dependencies": {"modules": ["Image", "ImageBuilder", "ImageType"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded tiny PNG image using a custom builder."}, {"name": "largeBase64builder", "primary_tested": ["Image.base64(ImageBuilder)"], "external_dependencies": {"modules": ["Image", "ImageBuilder", "ImageType"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a base64-encoded large BMP image using a custom builder."}, {"name": "shouldErrorOnIllegalType", "primary_tested": ["ImageBuilder.build()"], "external_dependencies": {"modules": ["ImageBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an IllegalArgumentException is thrown when an illegal image type is provided."}, {"name": "shouldErrorOnNegativeWidth", "primary_tested": ["ImageBuilder.build()"], "external_dependencies": {"modules": ["ImageBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an IllegalArgumentException is thrown when a negative width is provided."}, {"name": "shouldErrorOnZeroWidth", "primary_tested": ["ImageBuilder.build()"], "external_dependencies": {"modules": ["ImageBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an IllegalArgumentException is thrown when a zero width is provided."}, {"name": "shouldErrorOnNegativeHeight", "primary_tested": ["ImageBuilder.build()"], "external_dependencies": {"modules": ["ImageBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an IllegalArgumentException is thrown when a negative height is provided."}, {"name": "shouldErrorOnZeroHeight", "primary_tested": ["ImageBuilder.build()"], "external_dependencies": {"modules": ["ImageBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an IllegalArgumentException is thrown when a zero height is provided."}]}, {"file_path": "src/test/java/net/datafaker/formats/YamlTest.java", "testclass_name": "YamlTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.transformations.Schema;", "import net.datafaker.transformations.YamlTransformer;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.math.BigDecimal;", "import java.util.Collections;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.IntStream;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "YamlTest", "description": "Tests for the YamlTransformer class, focusing on generating YAML from various schemas and fake sequences.", "class_members": {"variables": [], "methods": [{"name": "generateTestSchema", "signature": "private static Stream<Arguments> generateTestSchema()"}, {"name": "map", "signature": "@SafeVarargs private static Map<Supplier<String>, Supplier<Object>> map(Map.Entry<Supplier<String>, Supplier<Object>>... entries)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "simpleYamlTest", "primary_tested": ["YamlTransformer.generate(Schema<String, String>, int)"], "external_dependencies": {"modules": ["YamlTransformer", "Schema", "Arguments"], "class_members": []}, "category": "unit", "description": "Tests the generation of YAML from various schemas."}, {"name": "generateFromFakeSequence", "primary_tested": ["YamlTransformer.generate(Iterable<Name>, Schema<Name, String>)"], "associated_methods": ["BaseFaker.collection()"], "external_dependencies": {"modules": ["BaseFaker", "YamlTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of YAML from a fake sequence of names."}, {"name": "generateFromFakeSequenceWithCollection", "primary_tested": ["YamlTransformer.generate(Iterable<Name>, Schema<Name, List<String>>)"], "associated_methods": ["BaseFaker.collection()"], "external_dependencies": {"modules": ["BaseFaker", "YamlTransformer", "Schema", "Name", "Collectors"], "class_members": []}, "category": "unit", "description": "Tests the generation of YAML from a fake sequence of names with a collection schema."}]}, {"file_path": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java", "testclass_name": "OscarMovieTest", "dependencies": ["package net.datafaker.providers.entertainment;", "import org.junit.jupiter.api.RepeatedTest;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.util.Strings.isNullOrEmpty;"], "name": "OscarMovieTest", "description": "Tests for the OscarMovie class, focusing on various methods like actor, movieName, quote, character, and releaseDate.", "class_members": {"variables": [{"name": "oscarMovie", "type": "OscarMovie"}]}, "fixtures": [], "test_cases": [{"name": "actor", "primary_tested": ["OscarMovie.actor()"], "external_dependencies": {"modules": ["OscarMovie"], "class_members": [{"name": "oscarMovie", "type": "variable"}]}, "category": "unit", "description": "Tests the actor method of OscarMovie to ensure it returns a non-control character string."}, {"name": "movieName", "primary_tested": ["OscarMovie.movieName()"], "external_dependencies": {"modules": ["OscarMovie"], "class_members": [{"name": "oscarMovie", "type": "variable"}], "project_specific_resources": ["Strings.isNullOrEmpty(String)"]}, "category": "unit", "description": "Tests the movieName method of OscarMovie to ensure it returns a non-null and non-empty string."}, {"name": "quote", "primary_tested": ["OscarMovie.quote()"], "external_dependencies": {"modules": ["OscarMovie"], "class_members": [{"name": "oscarMovie", "type": "variable"}], "project_specific_resources": ["Strings.isNullOrEmpty(String)"]}, "category": "unit", "description": "Tests the quote method of OscarMovie to ensure it returns a non-null and non-empty string."}, {"name": "character", "primary_tested": ["OscarMovie.character()"], "external_dependencies": {"modules": ["OscarMovie"], "class_members": [{"name": "oscarMovie", "type": "variable"}]}, "category": "unit", "description": "Tests the character method of OscarMovie to ensure it returns a non-control character string."}, {"name": "releaseDate", "primary_tested": ["OscarMovie.releaseDate()"], "external_dependencies": {"modules": ["OscarMovie"], "class_members": [{"name": "oscarMovie", "type": "variable"}]}, "category": "unit", "description": "Tests the releaseDate method of OscarMovie to ensure it returns a string matching the specified pattern."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java", "testclass_name": "PortugueseIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "PortugueseIdNumberTest", "description": "Tests for generating valid and invalid Portuguese ID numbers using the Faker library.", "class_members": {"variables": [{"name": "ptFaker", "type": "Faker"}]}, "fixtures": [], "test_cases": [{"name": "testInvalid", "primary_tested": ["IdNumber.invalid()"], "external_dependencies": {"modules": ["Faker", "IdNumber"], "class_members": [{"name": "ptFaker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of invalid Portuguese ID numbers using the Faker library."}, {"name": "testValid", "primary_tested": ["IdNumber.valid()"], "external_dependencies": {"modules": ["Faker", "IdNumber"], "class_members": [{"name": "ptFaker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of valid Portuguese ID numbers using the Faker library."}]}, {"file_path": "src/test/java/net/datafaker/service/files/EnFileTest.java", "testclass_name": "EnFileTest", "dependencies": ["package net.datafaker.service.files;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "EnFileTest", "description": "Tests the file name convention for EnFile.", "test_cases": [{"name": "fileNameConvention", "primary_tested": ["EnFile.getFiles()"], "associated_methods": ["File.getFile()"], "external_dependencies": {"modules": ["EnFile", "File"]}, "category": "unit", "description": "Tests that all file names returned by EnFile.getFiles() adhere to lowercase naming conventions."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/PassportTest.java", "testclass_name": "PassportTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "PassportTest", "description": "Tests for validating passport numbers in different locales using BaseFaker.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDefaultLocale", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the default locale passport number validation."}, {"name": "testValidDutch", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Dutch locale passport number validation."}, {"name": "testValidChinese", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Chinese locale passport number validation."}, {"name": "testValidUnitedStates", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the United States locale passport number validation."}, {"name": "testValidAustralia", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Australian locale passport number validation."}, {"name": "testValidCanada", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Canadian locale passport number validation."}, {"name": "testValidUnitedKingdom", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the United Kingdom locale passport number validation."}, {"name": "testValidJapan", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Japanese locale passport number validation."}, {"name": "testValidSpain", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Spanish locale passport number validation."}, {"name": "testValidBulgaria", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Bulgarian locale passport number validation."}, {"name": "testValidFinland", "primary_tested": ["BaseFaker.passport().valid()"], "external_dependencies": {"modules": ["BaseFaker", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Finnish locale passport number validation."}]}, {"file_path": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "testclass_name": "FakerIntegrationTest", "dependencies": ["package net.datafaker.integration;", "import net.datafaker.Faker;", "import net.datafaker.providers.base.AbstractProvider;", "import net.datafaker.providers.base.Address;", "import net.datafaker.providers.base.App;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.File;", "import java.lang.reflect.Method;", "import java.lang.reflect.Modifier;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Locale;", "import java.util.Map;", "import java.util.Random;", "import java.util.Set;", "import java.util.function.Supplier;", "import java.util.logging.Logger;", "import java.util.stream.Stream;", "import static java.lang.Thread.currentThread;", "import static org.apache.commons.lang3.StringUtils.substringBefore;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.reflections.ReflectionUtils.getAllMethods;", "import static org.reflections.ReflectionUtils.withModifier;", "import static org.reflections.ReflectionUtils.withParametersCount;", "import static org.reflections.ReflectionUtils.withReturnType;"], "name": "FakerIntegrationTest", "description": "Integration tests for Faker library, focusing on string-returning methods across various locales.", "class_members": {"variables": [{"name": "log", "type": "Logger"}, {"name": "exceptions", "type": "static final Map<Locale, SkippedMethods>"}], "methods": [{"name": "init", "signature": "Faker init(Locale locale, Random random)"}, {"name": "testAllMethodsThatReturnStringsActuallyReturnStrings", "signature": "void testAllMethodsThatReturnStringsActuallyReturnStrings(AbstractProvider<?> provider)"}, {"name": "isExcepted", "signature": "boolean isExcepted(Object object, Method method, Locale locale)"}, {"name": "dataParameters", "signature": "Stream<Arguments> dataParameters()"}], "nested_classes": [{"name": "SkippedMethods", "description": "Internal class to manage skipped methods for specific locales"}]}, "fixtures": [], "test_cases": [{"name": "testAllFakerMethodsThatReturnStrings", "primary_tested": ["AbstractProvider.toString()"], "associated_methods": ["Faker.getClass()", "AbstractProvider.getFaker()", "AbstractProvider.getClass()"], "external_dependencies": {"modules": ["Faker", "AbstractProvider", "Locale", "Random", "Method", "Modifier", "Logger"], "class_members": [{"name": "log", "type": "variable"}, {"name": "init", "type": "method"}, {"name": "testAllMethodsThatReturnStringsActuallyReturnStrings", "type": "method"}], "project_specific_resources": ["SkippedMethods.of(Class<?>, String...)"]}, "category": "integration", "fixtures_used": [], "description": "Tests all string-returning methods of Faker across various locales to ensure they return non-blank strings."}, {"name": "testExceptionsNotCoveredInAboveTest", "primary_tested": ["BaseFaker.bothify(String)", "BaseFaker.letterify(String)", "BaseFaker.numerify(String)", "Lorem.paragraph(int)", "Lorem.paragraphs(int)", "Lorem.sentence(int)", "Lorem.sentences(int)", "Address.streetAddress()", "Lorem.words()", "Lorem.words(int)"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "Random", "Logger"], "class_members": [{"name": "log", "type": "variable"}, {"name": "init", "type": "method"}]}, "category": "integration", "fixtures_used": [], "description": "Tests specific methods of BaseFaker that were not covered in the previous test to ensure they return non-null values."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java", "testclass_name": "ChineseIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "ChineseIdNumberTest", "description": "Tests for validating Chinese ID numbers using the BaseFaker class.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}], "methods": [{"name": "assertThatSsnNumberValid", "signature": "void assertThatSsnNumberValid(int, String)"}]}, "fixtures": [], "test_cases": [{"name": "testValidChineseIdNumber", "primary_tested": ["BaseFaker.idNumber().valid()"], "external_dependencies": {"modules": ["BaseFaker", "ChineseIdNumber"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid Chinese ID number and checks its length."}, {"name": "testChecksumOfChineseIdNumber", "primary_tested": ["ChineseIdNumber.idNumber(char[])"], "external_dependencies": {"modules": ["ChineseIdNumber"]}, "category": "unit", "description": "Tests the checksum calculation of a given Chinese ID number."}, {"name": "testValidZhCnIdNumber", "primary_tested": ["ChineseIdNumber.generateValid(BaseFaker)"], "external_dependencies": {"modules": ["BaseFaker", "ChineseIdNumber"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid Chinese ID number in the zh_CN locale."}]}, {"file_path": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java", "testclass_name": "WordUtilsTest", "dependencies": ["package net.datafaker.internal.helper;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "WordUtilsTest", "description": "Unit tests for the WordUtils class, specifically focusing on the capitalize method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "capitalizeWord", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality of the WordUtils.capitalize method for various string inputs."}, {"name": "capitalizeNull", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the behavior of the WordUtils.capitalize method when the input is null or an empty string."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "testclass_name": "BarcodeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "BarcodeTest", "description": "Unit tests for barcode generation and validation in the BaseFaker class.", "class_members": {"methods": [{"name": "isBarcodeValid", "signature": "static boolean isBarcodeValid(long)"}]}, "test_cases": [{"name": "type", "primary_tested": ["Barcode.type()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of barcode types and ensures they match the expected pattern."}, {"name": "testEan13", "primary_tested": ["Barcode.ean13()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of EAN-13 barcodes and ensures they match the expected pattern."}, {"name": "testGtin13", "primary_tested": ["Barcode.gtin13()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of GTIN-13 barcodes and ensures they match the expected pattern."}, {"name": "testEan8", "primary_tested": ["Barcode.ean8()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of EAN-8 barcodes and ensures they match the expected pattern."}, {"name": "testGtin8", "primary_tested": ["Barcode.gtin8()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of GTIN-8 barcodes and ensures they match the expected pattern."}, {"name": "testGtin14Length", "primary_tested": ["Barcode.gtin14()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of GTIN-14 barcodes and ensures they match the expected pattern."}, {"name": "testGtin12Length", "primary_tested": ["Barcode.gtin12()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of GTIN-12 barcodes and ensures they match the expected pattern."}, {"name": "testGtin12CheckSum", "primary_tested": ["Barcode.gtin12()"], "associated_methods": ["BarcodeTest.isBarcodeValid(long)"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "isBarcodeValid", "type": "method"}]}, "category": "unit", "description": "Tests the checksum validation of GTIN-12 barcodes."}, {"name": "testGtin14CheckSum", "primary_tested": ["Barcode.gtin14()"], "associated_methods": ["BarcodeTest.isBarcodeValid(long)"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "isBarcodeValid", "type": "method"}]}, "category": "unit", "description": "Tests the checksum validation of GTIN-14 barcodes."}, {"name": "testEan8CheckSum", "primary_tested": ["Barcode.ean8()"], "associated_methods": ["BarcodeTest.isBarcodeValid(long)"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "isBarcodeValid", "type": "method"}]}, "category": "unit", "description": "Tests the checksum validation of EAN-8 barcodes."}, {"name": "testEan13CheckSum", "primary_tested": ["Barcode.ean13()"], "external_dependencies": {"modules": ["Barcode"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum validation of EAN-13 barcodes."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java", "testclass_name": "SouthAfricanIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.IdNumber;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static java.lang.Integer.parseInt;", "import static net.datafaker.idnumbers.SouthAfricanIdNumber.isValidEnZASsn;", "import static net.datafaker.idnumbers.SouthAfricanIdNumber.sequentialNumber;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "SouthAfricanIdNumberTest", "description": "Test suite for validating South African ID numbers using DataFaker library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testExistSsn", "primary_tested": ["SouthAfricanIdNumber.isValidEnZASsn(String)"], "external_dependencies": {"modules": ["SouthAfricanIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of existing South African ID numbers."}, {"name": "testFakerSsn", "primary_tested": ["SouthAfricanIdNumber.isValidEnZASsn(String)"], "associated_methods": ["IdNumber.valid()", "IdNumber.invalid()"], "external_dependencies": {"modules": ["BaseFaker", "IdNumber", "SouthAfricanIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation and validation of South African ID numbers using DataFaker."}, {"name": "testSsnFormat", "primary_tested": ["IdNumber.valid()", "IdNumber.invalid()"], "external_dependencies": {"modules": ["BaseFaker", "IdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the format of generated South African ID numbers."}, {"name": "sequentialNumber_forMales", "primary_tested": ["SouthAfricanIdNumber.sequentialNumber(BaseFaker,Gender)"], "external_dependencies": {"modules": ["BaseFaker", "SouthAfricanIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of sequential numbers for males in South African ID numbers."}, {"name": "sequentialNumber_forFemales", "primary_tested": ["SouthAfricanIdNumber.sequentialNumber(BaseFaker,Gender)"], "external_dependencies": {"modules": ["BaseFaker", "SouthAfricanIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of sequential numbers for females in South African ID numbers."}]}, {"file_path": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java", "testclass_name": "FakerIDNTest", "dependencies": ["package net.datafaker.internal.helper;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "FakerIDNTest", "description": "Unit tests for the FakerIDN class, focusing on the toASCII method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "toASCIINoError", "primary_tested": ["FakerIDN.toASCII(String)"], "external_dependencies": {"modules": ["FakerIDN"]}, "category": "unit", "description": "Tests the toASCII method with a valid input string, expecting no errors and the same string as output."}, {"name": "toASCIIResultIsEmptyException", "primary_tested": ["FakerIDN.toASCII(String)"], "external_dependencies": {"modules": ["FakerIDN"]}, "category": "unit", "description": "Tests the toASCII method with an invalid input string, expecting a RuntimeException to be thrown."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "testclass_name": "FinanceTest", "dependencies": ["package net.datafaker.providers.base;", "import org.apache.commons.validator.routines.checkdigit.LuhnCheckDigit;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static net.datafaker.providers.base.Finance.*;", "import static org.assertj.core.api.Assertions.assertThat;", "import java.util.List;", "import java.util.Collection;", "import java.util.Set;"], "name": "FinanceTest", "description": "Test suite for validating various financial data generation functionalities provided by the Finance class.", "class_members": {"variables": [{"name": "finance", "type": "Finance"}], "methods": [{"name": "assertCardLuhnDigit", "signature": "void assertCardLuhnDigit(String creditCard)"}]}, "fixtures": [], "test_cases": [{"name": "creditCard", "primary_tested": ["Finance.creditCard()"], "associated_methods": ["FinanceTest.assertCardLuhnDigit(String)"], "external_dependencies": {"modules": ["Finance", "LuhnCheckDigit"], "class_members": [{"name": "finance", "type": "variable"}, {"name": "assertCardLuhnDigit", "type": "method"}]}, "category": "unit", "description": "Tests the generation of a valid credit card number using the Luhn algorithm."}, {"name": "nasdaqTicker", "primary_tested": ["Finance.nasdaqTicker()"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid NASDAQ ticker symbol."}, {"name": "nyseTicker", "primary_tested": ["Finance.nyseTicker()"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid NYSE ticker symbol."}, {"name": "bic", "primary_tested": ["Finance.bic()"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid BIC (Bank Identifier Code)."}, {"name": "iban", "primary_tested": ["Finance.iban()"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid IBAN (International Bank Account Number)."}, {"name": "ibanWithCountryCode", "primary_tested": ["Finance.iban(String)"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid IBAN with a specific country code (DE)."}, {"name": "ibanCountryCodes", "primary_tested": ["Finance.ibanSupportedCountries()"], "external_dependencies": {"modules": ["Finance"]}, "category": "unit", "description": "Tests the retrieval of supported IBAN country codes."}, {"name": "ibanWithAllCountryCodes", "primary_tested": ["Finance.iban(String)"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of IBANs for all supported country codes."}, {"name": "creditCardWithType", "primary_tested": ["Finance.creditCard(CreditCardType)"], "associated_methods": ["FinanceTest.assertCardLuhnDigit(String)"], "external_dependencies": {"modules": ["Finance", "LuhnCheckDigit"], "class_members": [{"name": "finance", "type": "variable"}, {"name": "assertCardLuhnDigit", "type": "method"}]}, "category": "unit", "description": "Tests the generation of valid credit card numbers for all supported types using the Luhn algorithm."}, {"name": "costaRicaIbanMustBeValid", "primary_tested": ["Finance.iban(String)"], "external_dependencies": {"modules": ["Finance", "BaseFaker", "fr.marcwrobel.jbanking.iban.Iban"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid IBAN for Costa Rica."}, {"name": "visaCard", "primary_tested": ["Finance.creditCard(CreditCardType)"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid Visa credit card number."}, {"name": "discoverCard", "primary_tested": ["Finance.creditCard(CreditCardType)"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid Discover credit card number."}, {"name": "usRoutingNumber", "primary_tested": ["Finance.usRoutingNumber()"], "external_dependencies": {"modules": ["Finance"], "class_members": [{"name": "finance", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid US routing number."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java", "testclass_name": "MexicanIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import net.datafaker.providers.base.IdNumber;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "MexicanIdNumberTest", "description": "Test suite for validating Mexican ID numbers using DataFaker.", "class_members": {"variables": [{"name": "REGEX", "type": "static final Pattern"}, {"name": "faker", "type": "static final Faker"}, {"name": "idNumber", "type": "final IdNumber"}]}, "test_cases": [{"name": "valid", "primary_tested": ["IdNumber.valid()"], "external_dependencies": {"modules": ["IdNumber", "Pattern"], "class_members": [{"name": "idNumber", "type": "variable"}, {"name": "REGEX", "type": "variable"}]}, "category": "unit", "description": "Tests the validity of a Mexican ID number using a regex pattern."}, {"name": "validEsMXSsn", "primary_tested": ["IdNumber.validEsMXSsn()"], "external_dependencies": {"modules": ["IdNumber", "Pattern"], "class_members": [{"name": "idNumber", "type": "variable"}, {"name": "REGEX", "type": "variable"}]}, "category": "unit", "description": "Tests the validity of a Mexican SSN using a regex pattern."}, {"name": "invalid", "primary_tested": ["IdNumber.invalid()"], "external_dependencies": {"modules": ["IdNumber", "Pattern"], "class_members": [{"name": "idNumber", "type": "variable"}, {"name": "REGEX", "type": "variable"}]}, "category": "unit", "description": "Tests the invalidity of a Mexican ID number using a regex pattern."}, {"name": "invalidEsMXSsn", "primary_tested": ["IdNumber.invalidEsMXSsn()"], "external_dependencies": {"modules": ["IdNumber", "Pattern"], "class_members": [{"name": "idNumber", "type": "variable"}, {"name": "REGEX", "type": "variable"}]}, "category": "unit", "description": "Tests the invalidity of a Mexican SSN using a regex pattern."}]}, {"file_path": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "testclass_name": "FakeStreamTest", "dependencies": ["package net.datafaker.sequence;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.providers.base.Address;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.transformations.CompositeField;", "import net.datafaker.transformations.CsvTransformer;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.JsonTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.List;", "import java.util.Random;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "FakeStreamTest", "description": "Test suite for generating and transforming streams of fake data using the FakeSequence class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "generateFiniteStream", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a finite stream of names with a specified length range."}, {"name": "generateInfiniteStream", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of an infinite stream of names."}, {"name": "generateStreamOfNames", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream of names with a specified length."}, {"name": "generateStreamOfDigits", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Number"], "class_members": []}, "category": "unit", "description": "Tests the generation of an infinite stream of digits."}, {"name": "generateNullStream", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream with a high null rate."}, {"name": "illegalNullRate", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the handling of illegal null rates by throwing an IllegalArgumentException."}, {"name": "generateStreamPassingSuppliersAsList", "primary_tested": ["BaseFaker.stream(List)"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream by passing suppliers as a list."}, {"name": "generateStreamWithRepeatableFaker", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream using a repeatable faker with a specific seed."}, {"name": "generateStreamWithDifferentObjects", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name", "Random"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream with different types of objects."}, {"name": "checkWrongArguments", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the handling of wrong arguments by throwing an IllegalArgumentException."}, {"name": "singletonTest", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a singleton from a stream."}, {"name": "isInfiniteTest", "primary_tested": ["FakeSequence.isInfinite()"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the detection of infinite streams."}, {"name": "toCsv", "primary_tested": ["CsvTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the transformation of a stream to CSV format."}, {"name": "toCsvFromInfiniteSequence", "primary_tested": ["CsvTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the handling of an infinite sequence when transforming to CSV, expecting an IllegalArgumentException."}, {"name": "toJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the transformation of a stream to JSON format."}, {"name": "toJsonFromInfiniteSequence", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the handling of an infinite sequence when transforming to JSON, expecting an IllegalArgumentException."}, {"name": "toNestedJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "JsonTransformer", "Schema", "Address", "Name"], "class_members": []}, "category": "unit", "description": "Tests the transformation of a stream to nested JSON format."}, {"name": "testIterator", "primary_tested": ["FakeSequence.iterator()"], "external_dependencies": {"modules": ["BaseFaker", "Number"], "class_members": []}, "category": "unit", "description": "Tests the iteration over a finite stream of digits."}, {"name": "testIteratorInfinite", "primary_tested": ["FakeSequence.iterator()"], "external_dependencies": {"modules": ["BaseFaker", "Number"], "class_members": []}, "category": "unit", "description": "Tests the iteration over an infinite stream of digits."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java", "testclass_name": "EstonianIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import static net.datafaker.idnumbers.EstonianIdNumber.firstDigit;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "EstonianIdNumberTest", "description": "Tests for Estonian ID number generation and validation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "checksum", "primary_tested": ["EstonianIdNumber.checksum(String)"], "external_dependencies": {"modules": ["EstonianIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checksum calculation for Estonian ID numbers."}, {"name": "firstDigit_18xx", "primary_tested": ["EstonianIdNumber.firstDigit(int,Gender)"], "external_dependencies": {"modules": ["EstonianIdNumber", "Gender"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the first digit calculation for Estonian ID numbers in the 1800s."}, {"name": "firstDigit_19xx", "primary_tested": ["EstonianIdNumber.firstDigit(int,Gender)"], "external_dependencies": {"modules": ["EstonianIdNumber", "Gender"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the first digit calculation for Estonian ID numbers in the 1900s."}, {"name": "firstDigit_20xx", "primary_tested": ["EstonianIdNumber.firstDigit(int,Gender)"], "external_dependencies": {"modules": ["EstonianIdNumber", "Gender"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the first digit calculation for Estonian ID numbers in the 2000s."}, {"name": "firstDigit_21xx", "primary_tested": ["EstonianIdNumber.firstDigit(int,Gender)"], "external_dependencies": {"modules": ["EstonianIdNumber", "Gender"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the first digit calculation for Estonian ID numbers in the 2100s."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "testclass_name": "CustomFakerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.nio.file.Paths;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "CustomFakerTest", "description": "Test suite for custom faker implementations, focusing on insect-related data generation and file path handling.", "class_members": {"nested_classes": [{"name": "MyCustomFaker", "description": "Custom faker class extending BaseFaker, providing insect-related data generation methods."}, {"name": "Insect", "description": "Class providing insect names from a predefined list."}, {"name": "InsectFromFile", "description": "Class providing insect names from files, with methods to resolve ant and bee names."}]}, "test_cases": [{"name": "addNullExistingPath", "primary_tested": ["BaseFaker.addPath(Locale,Path)"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "Paths"]}, "category": "unit", "description": "Tests that adding a null path to BaseFaker throws an IllegalArgumentException."}, {"name": "addNonExistingPath", "primary_tested": ["BaseFaker.addPath(Locale,Path)"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "Paths"]}, "category": "unit", "description": "Tests that adding a non-existing path to BaseFaker throws an IllegalArgumentException."}, {"name": "insectTest", "primary_tested": ["MyCustomFaker.insect()"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["MyCustomFaker", "Insect"]}, "category": "unit", "description": "Tests that the insect name generated by MyCustomFaker matches a specific pattern."}, {"name": "insectTestExpression", "primary_tested": ["MyCustomFaker.expression(String)"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["MyCustomFaker", "Insect"]}, "category": "unit", "description": "Tests that the insect name generated by MyCustomFaker using an expression matches a specific pattern."}, {"name": "insectAntTestExpressionFromFile", "primary_tested": ["MyCustomFaker.insectFromFile()"], "associated_methods": ["InsectFromFile.ant()"], "external_dependencies": {"modules": ["MyCustomFaker", "InsectFromFile"]}, "category": "unit", "description": "Tests that the ant name generated by MyCustomFaker from a file matches a specific pattern."}, {"name": "insectBeeTestExpressionFromFile", "primary_tested": ["MyCustomFaker.insectFromFile()"], "associated_methods": ["InsectFromFile.bee()"], "external_dependencies": {"modules": ["MyCustomFaker", "InsectFromFile"]}, "category": "unit", "description": "Tests that the bee name generated by MyCustomFaker from a file ends with 'bee'."}, {"name": "insectBeeTestExpressionFromFileWithoutExtraFaker", "primary_tested": ["BaseFaker.getProvider(Class,Function,BaseFaker)"], "associated_methods": ["InsectFromFile.bee()"], "external_dependencies": {"modules": ["BaseFaker", "InsectFromFile"]}, "category": "unit", "description": "Tests that the bee name generated by BaseFaker from a file ends with 'bee'."}, {"name": "insectTestWithoutExtraFaker", "primary_tested": ["BaseFaker.getProvider(Class,Function,BaseFaker)"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["BaseFaker", "Insect"]}, "category": "unit", "description": "Tests that the insect name generated by BaseFaker matches a specific pattern."}, {"name": "testMultipleFakerContextsPerOneClassName", "primary_tested": ["BaseFaker.getProvider(String)"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["BaseFaker", "Insect", "Locale"]}, "category": "unit", "description": "Tests that multiple faker contexts can be created for the same class name and that they are not the same instance."}]}, {"file_path": "src/test/java/net/datafaker/formats/XmlTest.java", "testclass_name": "XmlTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.sequence.FakeStream;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.Schema;", "import net.datafaker.transformations.SimpleField;", "import net.datafaker.transformations.XmlTransformer;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.Collections;", "import java.util.List;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "XmlTest", "description": "Test suite for the XmlTransformer class, focusing on generating XML from various schemas and fake data sequences.", "class_members": {"variables": [], "methods": [{"name": "getNumberOfLines", "signature": "private static int getNumberOfLines(String xml)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "xmlSchemaTest", "primary_tested": ["XmlTransformer.generate(Schema<String, String>,int)"], "associated_methods": [], "external_dependencies": {"modules": ["XmlTransformer", "Schema", "Field"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of XML from various schemas."}, {"name": "xmlPrettySchemaTest", "primary_tested": ["XmlTransformer.generate(Schema<String, String>,int)"], "associated_methods": [], "external_dependencies": {"modules": ["XmlTransformer", "Schema", "Field"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of pretty XML from various schemas."}, {"name": "generateFromFakeSequence", "primary_tested": ["XmlTransformer.generate(Iterable<Name>,Schema<Name, List<SimpleField<Name, String>>>,int)"], "associated_methods": [], "external_dependencies": {"modules": ["BaseFaker", "Name", "Schema", "SimpleField", "XmlTransformer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of XML from a fake sequence of names."}, {"name": "generateXMLWithThreeNestedLevels", "primary_tested": ["XmlTransformer.generate(Schema<Object, ?>,int)"], "associated_methods": [], "external_dependencies": {"modules": ["BaseFaker", "FakeStream", "Schema", "SimpleField", "XmlTransformer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of XML with three nested levels of fake data."}, {"name": "generateXMLWithThreeNestedLevelsAndAttributes", "primary_tested": ["XmlTransformer.generate(Schema<Object, ?>,int)"], "associated_methods": [], "external_dependencies": {"modules": ["BaseFaker", "FakeStream", "Schema", "SimpleField", "XmlTransformer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of XML with three nested levels of fake data and attributes."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java", "testclass_name": "UkrainianIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.IdNumber;", "import net.datafaker.providers.base.PersonIdNumber;", "import org.junit.jupiter.api.Test;", "import java.time.LocalDate;", "import static net.datafaker.providers.base.IdNumber.GenderRequest.ANY;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UkrainianIdNumberTest", "description": "Unit tests for validating Ukrainian ID numbers.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}, {"name": "ukrainianIdNumber", "type": "UkrainianIdNumber"}], "methods": [{"name": "isUnzrValid", "signature": "boolean isUnzrValid(String unzr)"}]}, "fixtures": [], "test_cases": [{"name": "valid", "primary_tested": ["UkrainianIdNumber.generateValid(BaseFaker,IdNumber.IdNumberRequest)"], "associated_methods": ["PersonIdNumber.idNumber()", "PersonIdNumber.birthDate()"], "external_dependencies": {"modules": ["BaseFaker", "IdNumber", "PersonIdNumber", "LocalDate"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "ukrainianIdNumber", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a valid Ukrainian ID number and verifies its components."}, {"name": "invalid", "primary_tested": ["UkrainianIdNumber.generateInvalid(BaseFaker)"], "associated_methods": [], "external_dependencies": {"modules": ["BaseFaker", "UkrainianIdNumber"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "ukrainianIdNumber", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of an invalid Ukrainian ID number and verifies its invalidity."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java", "testclass_name": "FakeValuesGroupingTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FakeValuesGroupingTest", "description": "Unit tests for the FakeValuesGrouping class, focusing on handling single and multiple FakeValues.", "class_members": {"variables": [{"name": "fakeValuesGrouping", "type": "FakeValuesGrouping"}, {"name": "addressValues", "type": "FakeValues"}]}, "fixtures": ["before"], "test_cases": [{"name": "handlesOneFakeValue", "primary_tested": ["FakeValuesGrouping.get(String)"], "associated_methods": ["FakeValues.get(String)"], "external_dependencies": {"modules": ["FakeValuesGrouping", "FakeValues"], "class_members": [{"name": "fakeValuesGrouping", "type": "variable"}, {"name": "addressValues", "type": "variable"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests the functionality of retrieving a single FakeValue from FakeValuesGrouping."}, {"name": "handlesMultipleFakeValues", "primary_tested": ["FakeValuesGrouping.get(String)"], "associated_methods": ["FakeValues.get(String)", "FakeValuesGrouping.add(FakeValues)"], "external_dependencies": {"modules": ["FakeValuesGrouping", "FakeValues", "FakeValuesContext"], "class_members": [{"name": "fakeValuesGrouping", "type": "variable"}, {"name": "addressValues", "type": "variable"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests the functionality of retrieving multiple FakeValues from FakeValuesGrouping."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DroneTest.java", "testclass_name": "DroneTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.AssertionsForClassTypes.assertThat;", "import java.util.List;", "import java.util.Collection;"], "name": "DroneTest", "description": "Unit tests for various attributes of a Drone object.", "class_members": {"variables": [{"name": "drone", "type": "Drone"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "weight", "primary_tested": ["Drone.weight()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the weight method returns a non-empty string without '#'."}, {"name": "maxAscentSpeed", "primary_tested": ["Drone.maxAscentSpeed()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxAscentSpeed method returns a non-empty string without '#'."}, {"name": "maxDescentSpeed", "primary_tested": ["Drone.maxDescentSpeed()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxDescentSpeed method returns a non-empty string without '#'."}, {"name": "flightTime", "primary_tested": ["Drone.flightTime()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the flightTime method returns a non-empty string without '#'."}, {"name": "maxAltitude", "primary_tested": ["Drone.maxAltitude()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxAltitude method returns a non-empty string without '#'."}, {"name": "maxFlightDistance", "primary_tested": ["Drone.maxFlightDistance()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxFlightDistance method returns a non-empty string without '#'."}, {"name": "maxSpeed", "primary_tested": ["Drone.maxSpeed()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxSpeed method returns a non-empty string without '#'."}, {"name": "maxWindResistance", "primary_tested": ["Drone.maxWindResistance()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxWindResistance method returns a non-empty string without '#'."}, {"name": "maxAngularVelocity", "primary_tested": ["Drone.maxAngularVelocity()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxAngularVelocity method returns a non-empty string without '#'."}, {"name": "maxTiltAngle", "primary_tested": ["Drone.maxTiltAngle()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxTiltAngle method returns a non-empty string without '#'."}, {"name": "operatingTemperature", "primary_tested": ["Drone.operatingTemperature()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the operatingTemperature method returns a non-empty string without '#'."}, {"name": "batteryCapacity", "primary_tested": ["Drone.batteryCapacity()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the batteryCapacity method returns a non-empty string without '#'."}, {"name": "batteryVoltage", "primary_tested": ["Drone.batteryVoltage()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the batteryVoltage method returns a non-empty string without '#'."}, {"name": "batteryWeight", "primary_tested": ["Drone.batteryWeight()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the batteryWeight method returns a non-empty string without '#'."}, {"name": "chargingTemperature", "primary_tested": ["Drone.chargingTemperature()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the chargingTemperature method returns a non-empty string without '#'."}, {"name": "maxChargingPower", "primary_tested": ["Drone.maxChargingPower()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxChargingPower method returns a non-empty string without '#'."}, {"name": "maxResolution", "primary_tested": ["Drone.maxResolution()"], "external_dependencies": {"modules": ["Drone"], "class_members": [{"name": "drone", "type": "variable"}]}, "category": "unit", "description": "Tests that the maxResolution method returns a non-empty string without '#'."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java", "testclass_name": "SingaporeIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.Test;", "import java.time.LocalDate;", "import static net.datafaker.idnumbers.SingaporeIdNumber.Type.FOREIGNER_TWENTIETH_CENTURY;", "import static net.datafaker.idnumbers.SingaporeIdNumber.Type.FOREIGNER_TWENTY_FIRST_CENTURY;", "import static net.datafaker.idnumbers.SingaporeIdNumber.Type.SINGAPOREAN_TWENTIETH_CENTURY;", "import static net.datafaker.idnumbers.SingaporeIdNumber.Type.SINGAPOREAN_TWENTY_FIRST_CENTURY;", "import static net.datafaker.idnumbers.SingaporeIdNumber.centuryPrefixCitizen;", "import static net.datafaker.idnumbers.SingaporeIdNumber.centuryPrefixForeigner;", "import static net.datafaker.idnumbers.SingaporeIdNumber.randomBirthDate;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "SingaporeIdNumberTest", "description": "Unit tests for Singapore ID number generation and related functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "centuryPrefix_forCitizens", "primary_tested": ["SingaporeIdNumber.centuryPrefixCitizen(LocalDate)"], "external_dependencies": {"modules": ["LocalDate", "SingaporeIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the century prefix generation for citizens based on birth date."}, {"name": "centuryPrefix_forForeigner", "primary_tested": ["SingaporeIdNumber.centuryPrefixForeigner(LocalDate)"], "external_dependencies": {"modules": ["LocalDate", "SingaporeIdNumber"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the century prefix generation for foreigners based on birth date."}, {"name": "randomBirthDate_20th_century", "primary_tested": ["SingaporeIdNumber.randomBirthDate(Faker,SingaporeIdNumber.Type)"], "associated_methods": ["Faker.getYear() / 100"], "external_dependencies": {"modules": ["Faker", "SingaporeIdNumber", "SingaporeIdNumber.Type"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of random birth dates in the 20th century for both Singaporeans and foreigners."}, {"name": "randomBirthDate_21th_century", "primary_tested": ["SingaporeIdNumber.randomBirthDate(Faker,SingaporeIdNumber.Type)"], "associated_methods": ["Faker.getYear() / 100"], "external_dependencies": {"modules": ["Faker", "SingaporeIdNumber", "SingaporeIdNumber.Type"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of random birth dates in the 21st century for both Singaporeans and foreigners."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/CodeTest.java", "testclass_name": "CodeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.apache.commons.validator.routines.ISBNValidator;", "import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;", "import org.apache.commons.validator.routines.checkdigit.LuhnCheckDigit;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CodeTest", "description": "Test suite for validating various code generation functionalities in the BaseFaker class.", "class_members": {"variables": [], "methods": [{"name": "assertIsValidISBN10", "signature": "void assertIsValidISBN10(String, ISBNValidator)"}, {"name": "assertIsValidISBN13", "signature": "void assertIsValidISBN13(String, ISBNValidator)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "isbn10DefaultIsNoSeparator", "primary_tested": ["BaseFaker.code().isbn10()"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN10(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-10 codes without separators."}, {"name": "isbn13DefaultIsNoSeparator", "primary_tested": ["BaseFaker.code().isbn13()"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN13(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-13 codes without separators."}, {"name": "testIsbn10", "primary_tested": ["BaseFaker.code().isbn10(boolean)"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN10(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-10 codes with and without separators."}, {"name": "testIsbn13", "primary_tested": ["BaseFaker.code().isbn13(boolean)"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN13(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-13 codes with and without separators."}, {"name": "testOverrides", "primary_tested": ["BaseFaker.code().isbn10(boolean)", "BaseFaker.code().isbn13(boolean)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-10 and ISBN-13 codes with separators using a specific locale."}, {"name": "asin", "primary_tested": ["BaseFaker.code().asin()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ASIN codes."}, {"name": "imei", "primary_tested": ["BaseFaker.code().imei()"], "associated_methods": ["LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(String)"], "external_dependencies": {"modules": ["BaseFaker", "LuhnCheckDigit"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of IMEI codes and validates them using the Luhn algorithm."}, {"name": "ean8", "primary_tested": ["BaseFaker.code().ean8()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of EAN-8 codes."}, {"name": "gtin8", "primary_tested": ["BaseFaker.code().gtin8()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of GTIN-8 codes."}, {"name": "ean13", "primary_tested": ["BaseFaker.code().ean13()"], "associated_methods": ["EAN13CheckDigit.EAN13_CHECK_DIGIT.isValid(String)"], "external_dependencies": {"modules": ["BaseFaker", "EAN13CheckDigit"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of EAN-13 codes and validates them using the EAN-13 check digit algorithm."}, {"name": "gtin13", "primary_tested": ["BaseFaker.code().gtin13()"], "associated_methods": ["EAN13CheckDigit.EAN13_CHECK_DIGIT.isValid(String)"], "external_dependencies": {"modules": ["BaseFaker", "EAN13CheckDigit"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of GTIN-13 codes and validates them using the EAN-13 check digit algorithm."}, {"name": "isbnGs1", "primary_tested": ["BaseFaker.code().isbnGs1()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-GS1 prefixes."}, {"name": "isbnGroup", "primary_tested": ["BaseFaker.code().isbnGroup()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN group identifiers."}, {"name": "isbnRegistrant", "primary_tested": ["BaseFaker.code().isbnRegistrant()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN registrant codes."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "testclass_name": "VehicleTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import java.util.List;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "VehicleTest", "description": "Test suite for validating various vehicle-related data generation methods in the BaseFaker class.", "class_members": {"variables": [{"name": "WORD_MATCH", "type": "static final String"}, {"name": "WORDS_MATCH", "type": "static final String"}, {"name": "INTERNATIONAL_WORDS_MATCH", "type": "static final String"}]}, "test_cases": [{"name": "testVin", "primary_tested": ["Vehicle.vin()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the VIN generation to ensure it matches the expected regex pattern."}, {"name": "testManufacturer", "primary_tested": ["Vehicle.manufacturer()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the manufacturer name generation to ensure it matches the international words regex pattern."}, {"name": "testMake", "primary_tested": ["Vehicle.make()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the make name generation to ensure it matches the international words regex pattern."}, {"name": "testModel", "primary_tested": ["Vehicle.model()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the model name generation to ensure it matches the international words regex pattern."}, {"name": "testModelWithParams", "primary_tested": ["Vehicle.model(String)"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the model name generation with a specific manufacturer to ensure it matches the international words regex pattern."}, {"name": "testMakeAndModel", "primary_tested": ["Vehicle.makeAndModel()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the combined make and model generation to ensure it matches the international words regex pattern."}, {"name": "testStyle", "primary_tested": ["Vehicle.style()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the vehicle style generation to ensure it matches the word regex pattern."}, {"name": "testColor", "primary_tested": ["Vehicle.color()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the vehicle color generation to ensure it matches the word regex pattern."}, {"name": "testUpholsteryColor", "primary_tested": ["Vehicle.upholsteryColor()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the upholstery color generation to ensure it matches the word regex pattern."}, {"name": "testUpholsteryFabric", "primary_tested": ["Vehicle.upholsteryFabric()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the upholstery fabric generation to ensure it matches the words regex pattern."}, {"name": "testUpholstery", "primary_tested": ["Vehicle.upholstery()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the upholstery generation to ensure it matches the words regex pattern."}, {"name": "testTransmission", "primary_tested": ["Vehicle.transmission()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the transmission generation to ensure it matches the word regex pattern."}, {"name": "testDriveType", "primary_tested": ["Vehicle.driveType()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the drive type generation to ensure it matches the words regex pattern."}, {"name": "testFuelType", "primary_tested": ["Vehicle.fuelType()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the fuel type generation to ensure it matches the words regex pattern."}, {"name": "testCarType", "primary_tested": ["Vehicle.carType()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the car type generation to ensure it matches the words regex pattern."}, {"name": "testEngine", "primary_tested": ["Vehicle.engine()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the engine description generation to ensure it matches the expected pattern."}, {"name": "testCarOptions", "primary_tested": ["Vehicle.carOptions()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the car options generation to ensure the list size is within the expected range."}, {"name": "testCarOptionsMinMax", "primary_tested": ["Vehicle.carOptions(int,int)"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the car options generation with specified min and max values to ensure the list size is within the expected range."}, {"name": "testStandardSpecsMinMax", "primary_tested": ["Vehicle.standardSpecs(int,int)"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the standard specs generation with specified min and max values to ensure the list size is within the expected range."}, {"name": "testStandardSpecs", "primary_tested": ["Vehicle.standardSpecs()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the standard specs generation to ensure the list size is within the expected range."}, {"name": "testDoor", "primary_tested": ["Vehicle.doors()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the door count generation to ensure it matches the expected pattern."}, {"name": "testLicensePlate", "primary_tested": ["Vehicle.licensePlate()"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the license plate generation to ensure it matches the words regex pattern."}, {"name": "testLicensePlateWithParam", "primary_tested": ["Vehicle.licensePlate(String)"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the license plate generation with a specific state to ensure it matches the words regex pattern."}, {"name": "testLicensePlateWithParam_Canada", "primary_tested": ["Vehicle.licensePlate(String)"], "external_dependencies": {"modules": ["Vehicle"]}, "category": "unit", "description": "Tests the license plate generation with a specific Canadian province to ensure it matches the words regex pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "testclass_name": "DateAndTimeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.sql.Timestamp;", "import java.time.Duration;", "import java.time.LocalDate;", "import java.time.LocalDateTime;", "import java.time.LocalTime;", "import java.time.Period;", "import java.time.ZoneId;", "import java.time.format.DateTimeFormatter;", "import java.time.temporal.ChronoUnit;", "import java.time.zone.ZoneRules;", "import java.util.Date;", "import java.util.concurrent.TimeUnit;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "DateAndTimeTest", "description": "Unit tests for DateAndTime functionality, including future and past date generation, date ranges, birthdays, and durations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFutureDate", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime", "TimeUnit"], "class_members": []}, "category": "unit", "description": "Tests the generation of future dates within a specified range."}, {"name": "testFutureDateWithMinimum", "primary_tested": ["DateAndTime.future(int,int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit"], "class_members": []}, "category": "unit", "description": "Tests the generation of future dates with a minimum and maximum range."}, {"name": "testPastDateWithMinimum", "primary_tested": ["DateAndTime.past(int,int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit"], "class_members": []}, "category": "unit", "description": "Tests the generation of past dates with a minimum and maximum range."}, {"name": "testPastDateWithReferenceDate", "primary_tested": ["DateAndTime.past(int,TimeUnit,Date)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit", "Date"], "class_members": []}, "category": "unit", "description": "Tests the generation of past dates with a reference date."}, {"name": "testPastDate", "primary_tested": ["DateAndTime.past(int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit", "Date"], "class_members": []}, "category": "unit", "description": "Tests the generation of past dates within a specified range."}, {"name": "testBetween", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime"], "class_members": []}, "category": "unit", "description": "Tests the generation of dates between two specified timestamps."}, {"name": "testBetweenWithMaskReturningString", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp,String)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime", "DateTimeFormatter"], "class_members": []}, "category": "unit", "description": "Tests the generation of dates between two timestamps with a date format mask."}, {"name": "testBetweenDateAsArgument", "primary_tested": ["DateAndTime.between(Date,Date)"], "external_dependencies": {"modules": ["DateAndTime", "Date"], "class_members": []}, "category": "unit", "description": "Tests the generation of dates between two Date objects."}, {"name": "testBetweenThenLargerThanNow", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime"], "class_members": []}, "category": "unit", "description": "Tests the handling of an invalid date range where the upper bound is before the lower bound."}, {"name": "testBirthday", "primary_tested": ["DateAndTime.birthday()"], "external_dependencies": {"modules": ["LocalDateTime", "DateAndTime", "ZoneId", "ChronoUnit"], "class_members": []}, "category": "unit", "description": "Tests the generation of birthdays within a specified age range."}, {"name": "testBirthdayWithAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "DateAndTime", "ZoneId", "ZoneRules"], "class_members": []}, "category": "unit", "description": "Tests the generation of birthdays with specified minimum and maximum ages."}, {"name": "birthdayWithMask", "primary_tested": ["DateAndTime.birthday(int,int,String)"], "external_dependencies": {"modules": ["DateAndTime", "DateTimeFormatter"], "class_members": []}, "category": "unit", "description": "Tests the generation of birthdays with a date format mask."}, {"name": "futureWithMask", "primary_tested": ["DateAndTime.future(int,TimeUnit,String)", "DateAndTime.future(int,int,TimeUnit,String)", "DateAndTime.future(int,TimeUnit,Date,String)"], "external_dependencies": {"modules": ["DateAndTime", "DateTimeFormatter", "TimeUnit", "Date"], "class_members": []}, "category": "unit", "description": "Tests the generation of future dates with a date format mask."}, {"name": "pastWithMask", "primary_tested": ["DateAndTime.past(int,TimeUnit,String)", "DateAndTime.past(int,int,TimeUnit,String)", "DateAndTime.past(int,TimeUnit,Date,String)"], "external_dependencies": {"modules": ["DateAndTime", "DateTimeFormatter", "TimeUnit", "Date"], "class_members": []}, "category": "unit", "description": "Tests the generation of past dates with a date format mask."}, {"name": "periodTest", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": []}, "category": "unit", "description": "Tests the generation of periods within a specified range."}, {"name": "invalidDuration", "primary_tested": ["DateAndTime.duration(long,String)"], "external_dependencies": {"modules": ["DateAndTime"], "class_members": []}, "category": "unit", "description": "Tests the handling of invalid duration units."}, {"name": "durationTest", "primary_tested": ["DateAndTime.duration(long,long,ChronoUnit)", "DateAndTime.duration(long,ChronoUnit)", "DateAndTime.duration(long,long,String)", "DateAndTime.duration(long,String)"], "external_dependencies": {"modules": ["DateAndTime", "Duration", "ChronoUnit"], "class_members": []}, "category": "unit", "description": "Tests the generation of durations within a specified range."}, {"name": "maxLessThanMinPeriod", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": []}, "category": "unit", "description": "Tests the handling of an invalid period range where the maximum period is less than the minimum period."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "testclass_name": "PolishIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import net.datafaker.idnumbers.PolishIdNumber.Gender;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.EnumSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.time.LocalDate;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.assertj.core.api.Assertions.fail;"], "name": "PolishIdNumberTest", "description": "Test suite for validating the generation and properties of Polish ID numbers (PESEL).", "class_members": {"variables": [{"name": "PESEL_EXPECTED_LENGTH", "type": "static final int"}, {"name": "faker", "type": "static final Faker"}, {"name": "peselNumber", "type": "static final PolishIdNumber"}], "methods": [{"name": "assertBasics", "signature": "void assertBasics(String gotPesel)"}, {"name": "assertBirthDate", "signature": "void assertBirthDate(LocalDate givenBirthDate, String gotPesel)"}, {"name": "assertGender", "signature": "void assertGender(Gender givenGender, String gotPesel)"}, {"name": "assertControlDigit", "signature": "void assertControlDigit(String gotPesel)"}, {"name": "toNumber", "signature": "int toNumber(char digit2, char digit1)"}]}, "test_cases": [{"name": "testGenderedPesel", "primary_tested": ["PolishIdNumber.get(Faker,LocalDate,Gender)"], "associated_methods": ["PolishIdNumberTest.assertBasics(String)", "PolishIdNumberTest.assertBirthDate(LocalDate,String)", "PolishIdNumberTest.assertGender(Gender,String)", "PolishIdNumberTest.assertControlDigit(String)"], "external_dependencies": {"modules": ["Faker", "PolishIdNumber", "Gender", "LocalDate", "BaseFaker"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "peselNumber", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of PESEL numbers with specific genders."}, {"name": "testCenturiesPesel", "primary_tested": ["PolishIdNumber.get(Faker,LocalDate,Gender)"], "associated_methods": ["PolishIdNumberTest.assertBasics(String)", "PolishIdNumberTest.assertBirthDate(LocalDate,String)", "PolishIdNumberTest.assertControlDigit(String)"], "external_dependencies": {"modules": ["Faker", "PolishIdNumber", "Gender", "LocalDate"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "peselNumber", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of PESEL numbers across different centuries."}, {"name": "testInvalidCenturiesPesel", "primary_tested": ["PolishIdNumber.get(Faker,LocalDate,Gender)"], "external_dependencies": {"modules": ["Faker", "PolishIdNumber", "Gender", "LocalDate"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "peselNumber", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of invalid birth years for PESEL generation."}, {"name": "testNullGender", "primary_tested": ["PolishIdNumber.get(Faker,LocalDate,Gender)"], "associated_methods": ["PolishIdNumberTest.assertBasics(String)", "PolishIdNumberTest.assertBirthDate(LocalDate,String)", "PolishIdNumberTest.assertControlDigit(String)"], "external_dependencies": {"modules": ["Faker", "PolishIdNumber", "Gender", "LocalDate"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "peselNumber", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of PESEL numbers with a null gender."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "testclass_name": "AlbanianIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import static java.lang.Integer.parseInt;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "AlbanianIdNumberTest", "description": "Test suite for validating and generating Albanian ID numbers.", "class_members": {"variables": [{"name": "generator", "type": "AlbanianIdNumber"}, {"name": "faker", "type": "Faker"}]}, "test_cases": [{"name": "valid", "primary_tested": ["AlbanianIdNumber.generateValid(Faker)"], "external_dependencies": {"modules": ["AlbanianIdNumber", "Faker"], "class_members": [{"name": "generator", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid Albanian ID number and checks its length."}, {"name": "invalid", "primary_tested": ["AlbanianIdNumber.generateInvalid(Faker)"], "external_dependencies": {"modules": ["AlbanianIdNumber", "Faker"], "class_members": [{"name": "generator", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of an invalid Albanian ID number, checks its length, and validates a specific part of the number."}, {"name": "yy", "primary_tested": ["AlbanianIdNumber.yy(int)"], "external_dependencies": {"modules": ["AlbanianIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of year to a specific format used in Albanian ID numbers."}, {"name": "mm", "primary_tested": ["AlbanianIdNumber.mm(int,Gender)"], "external_dependencies": {"modules": ["AlbanianIdNumber", "Gender"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of month based on gender for Albanian ID numbers."}, {"name": "dd", "primary_tested": ["AlbanianIdNumber.dd(int)"], "external_dependencies": {"modules": ["AlbanianIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of day to a specific format used in Albanian ID numbers."}, {"name": "checksum", "primary_tested": ["AlbanianIdNumber.checksum(String)"], "external_dependencies": {"modules": ["AlbanianIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum calculation for Albanian ID numbers."}, {"name": "checksumOfFirstChar", "primary_tested": ["AlbanianIdNumber.checksumOfFirstChar(char)"], "external_dependencies": {"modules": ["AlbanianIdNumber"], "class_members": [{"name": "generator", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum calculation of the first character for Albanian ID numbers."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/SipTest.java", "testclass_name": "SipTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "SipTest", "description": "Unit tests for the Sip class, focusing on various methods that generate SIP-related data.", "class_members": {"variables": [{"name": "sip", "type": "Sip"}]}, "test_cases": [{"name": "method_returnUpperCaseWithMinimum3Chars", "primary_tested": ["Sip.method()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the method() returns a string in uppercase with a minimum of 3 characters."}, {"name": "contentType_returnLowerCaseTwoWordsSepereatedBySlashMinimum3And4Chars", "primary_tested": ["Sip.contentType()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the contentType() returns a string with two lowercase words separated by a slash, with the first word having at least 4 characters and the second word having at least 3 characters."}, {"name": "messagingPort_return4DigitIntBetween1000And9999", "primary_tested": ["Sip.messagingPort()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the messagingPort() returns a 4-digit integer between 1000 and 9999."}, {"name": "rtpPort_returnPositiveEvenInt", "primary_tested": ["Sip.rtpPort()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the rtpPort() returns a positive even integer."}, {"name": "provisionalResponseCode_return3DigitIntBetween100And199", "primary_tested": ["Sip.provisionalResponseCode()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the provisionalResponseCode() returns a 3-digit integer between 100 and 199."}, {"name": "successResponse_Codereturn3DigitIntBetween200And299", "primary_tested": ["Sip.successResponseCode()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the successResponseCode() returns a 3-digit integer between 200 and 299."}, {"name": "redirectResponseCode_Codereturn3DigitIntBetween300And399", "primary_tested": ["Sip.redirectResponseCode()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the redirectResponseCode() returns a 3-digit integer between 300 and 399."}, {"name": "clientErrorResponseCode_Codereturn3DigitIntBetween400And499", "primary_tested": ["Sip.clientErrorResponseCode()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the clientErrorResponseCode() returns a 3-digit integer between 400 and 499."}, {"name": "serverErrorResponseCode_Codereturn3DigitIntBetween500And599", "primary_tested": ["Sip.serverErrorResponseCode()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the serverErrorResponseCode() returns a 3-digit integer between 500 and 599."}, {"name": "globalErrorResponseCode_Codereturn3DigitIntBetween600And699", "primary_tested": ["Sip.globalErrorResponseCode()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the globalErrorResponseCode() returns a 3-digit integer between 600 and 699."}, {"name": "provisionalResponsePhrase_returnAnyNonDigitString", "primary_tested": ["Sip.provisionalResponsePhrase()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the provisionalResponsePhrase() returns a non-digit string."}, {"name": "successResponsePhrase_returnAnyNonDigitString", "primary_tested": ["Sip.successResponsePhrase()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the successResponsePhrase() returns a non-digit string."}, {"name": "redirectResponsePhrase_returnAnyNonDigitString", "primary_tested": ["Sip.redirectResponsePhrase()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the redirectResponsePhrase() returns a non-digit string."}, {"name": "clientErrorResponsePhrase_returnAnyNonDigitString", "primary_tested": ["Sip.clientErrorResponsePhrase()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the clientErrorResponsePhrase() returns a non-digit string."}, {"name": "serverErrorResponsePhrase_returnAnyNonDigitString", "primary_tested": ["Sip.serverErrorResponsePhrase()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the serverErrorResponsePhrase() returns a non-digit string."}, {"name": "globalErrorResponsePhrase_returnAnyNonDigitString", "primary_tested": ["Sip.globalErrorResponsePhrase()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the globalErrorResponsePhrase() returns a non-digit string."}, {"name": "bodyString_returnAValidSdpBodyString", "primary_tested": ["Sip.bodyString()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the bodyString() returns a valid SDP body string with specific format and content."}, {"name": "bodyBytes_isNotNull", "primary_tested": ["Sip.bodyBytes()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the bodyBytes() returns a non-null byte array."}, {"name": "nameAddress_returnValidNameAddressString", "primary_tested": ["Sip.nameAddress()"], "external_dependencies": {"modules": ["Sip"], "class_members": [{"name": "sip", "type": "variable"}]}, "category": "unit", "description": "Tests that the nameAddress() returns a valid name-address string with specific format."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "testclass_name": "PlanetTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.List;", "import static net.datafaker.providers.base.Planet.PlanetName.EARTH;", "import static net.datafaker.providers.base.Planet.PlanetName.JUPITER;", "import static net.datafaker.providers.base.Planet.PlanetName.MARS;", "import static net.datafaker.providers.base.Planet.PlanetName.MERCURY;", "import static net.datafaker.providers.base.Planet.PlanetName.NEPTUNE;", "import static net.datafaker.providers.base.Planet.PlanetName.SATURN;", "import static net.datafaker.providers.base.Planet.PlanetName.URANUS;", "import static net.datafaker.providers.base.Planet.PlanetName.VENUS;", "import static net.datafaker.providers.base.Planet.PlanetName.PLUTO;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "PlanetTest", "description": "Unit tests for the Planet class, focusing on metadata retrieval for various planets.", "class_members": {"variables": [{"name": "planet", "type": "Planet"}]}, "fixtures": [], "test_cases": [{"name": "shouldHaveNinePlanets", "primary_tested": ["Planet.PlanetName.values()"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}], "project_specific_resources": ["getBaseList(String)"]}, "category": "unit", "description": "Tests if the PlanetName enum has exactly 9 entries and if the planet.yml file contains 9 names."}, {"name": "shouldReturnCorrectJupiterMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Jupiter, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectMarsMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Mars, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectVenusMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Venus, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectUranusMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Uranus, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectMercuryMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Mercury, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectNeptuneMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Neptune, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectEarthMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Earth, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectSaturnMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Saturn, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}, {"name": "shouldReturnCorrectPlutoMetadata", "primary_tested": ["Planet.lengthOfDay(PlanetName)", "Planet.meanDistanceFromTheSun(PlanetName)", "Planet.equatorialGravity(PlanetName)", "Planet.mass(PlanetName)", "Planet.equatorialRadius(PlanetName)"], "external_dependencies": {"modules": ["Planet"], "class_members": [{"name": "planet", "type": "variable"}]}, "category": "unit", "description": "Tests the metadata retrieval for Pluto, including length of day, mean distance from the Sun, equatorial gravity, mass, and equatorial radius."}]}, {"file_path": "src/test/java/net/datafaker/formats/JsonTest.java", "testclass_name": "JsonTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.sequence.FakeSequence;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.JsonTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.AbstractMap;", "import java.util.Collections;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.Random;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static net.datafaker.transformations.Transformer.LINE_SEPARATOR;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "JsonTest", "description": "Test suite for JsonTransformer functionality, focusing on JSON generation from various schemas and sequences.", "class_members": {"variables": [], "methods": [{"name": "entry", "signature": "Map.Entry<Supplier<String>, Supplier<Object>> entry(Supplier<String> key, Supplier<Object> value)"}, {"name": "map", "signature": "Map<Supplier<String>, Supplier<Object>> map(Map.Entry<Supplier<String>, Supplier<Object>>... entries)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testJsonStream", "primary_tested": ["JsonTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "Collectors"], "class_members": []}, "category": "unit", "description": "Tests the generation of a JSON stream from a schema."}, {"name": "testGenerateFromSchemaWithLimit", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a schema with a specified limit."}, {"name": "testGenerateFromFakeSequenceCollectionWithoutComma", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a FakeSequence collection without commas between objects."}, {"name": "testGenerateFromFakeSequenceCollection", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a FakeSequence collection."}, {"name": "testGenerateFromFakeSequenceStream", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a FakeSequence stream."}, {"name": "testGenerateFromInfiniteFakeSequence", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from an infinite FakeSequence, expecting an exception."}, {"name": "simpleJsonTestForJsonTransformer", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Parameterized test for JSON generation from a schema."}, {"name": "outputArrayJsonTestForJsonTransformer", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Parameterized test for JSON generation from a schema, expecting an array output."}, {"name": "outputWithoutCommaForJsonTransformer", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Parameterized test for JSON generation from a schema without commas between objects."}, {"name": "jsonWithDifferentFieldFormatsInOneObjectTest", "primary_tested": ["JsonTransformer.generate(Iterable,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON with different field formats in one object."}, {"name": "jsonObjectCollectionTest", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a schema with an object collection."}, {"name": "jsonCollectionOfCollectionsTest", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a schema with a collection of collections."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomServiceTest.java", "testclass_name": "RandomServiceTest", "dependencies": ["package net.datafaker.service;", "import net.datafaker.AbstractFakerTest;", "import org.assertj.core.api.Condition;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.Random;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.allOf;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "RandomServiceTest", "description": "Unit tests for the RandomService class, focusing on various random number generation methods and their boundaries.", "class_members": {"methods": [{"name": "randomServiceProvider", "signature": "private static Stream<Arguments> randomServiceProvider()"}]}, "fixtures": [], "test_cases": [{"name": "testPositiveBoundariesOnly", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the boundary is zero."}, {"name": "testLongWithinBoundary", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated long values are within the specified boundary."}, {"name": "testLongMaxBoundary", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated long values are within the maximum boundary."}, {"name": "testIntInRange", "primary_tested": ["RandomService.nextInt(int,int)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated integer values are within the specified range."}, {"name": "nextInt_returnsValueWithinGivenRange", "primary_tested": ["RandomService.nextInt(int,int)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated integer values are within the given range."}, {"name": "predictableRandomRange", "primary_tested": ["RandomService.nextInt()", "RandomService.nextInt(int)", "RandomService.nextInt(int,int)", "RandomService.nextFloat()", "RandomService.nextLong()", "RandomService.nextLong(long)", "RandomService.nextLong(long,long)", "RandomService.nextBoolean()"], "external_dependencies": {"modules": ["RandomService", "Random"]}, "category": "unit", "description": "Tests predictable random number generation with a fixed seed."}, {"name": "testDoubleInRange", "primary_tested": ["RandomService.nextDouble(double,double)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated double values are within the specified range."}, {"name": "testLongInRange", "primary_tested": ["RandomService.nextLong(long,long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated long values are within the specified range."}, {"name": "testHex", "primary_tested": ["RandomService.hex(int)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated hex string matches the expected pattern."}, {"name": "testDefaultHex", "primary_tested": ["RandomService.hex()"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the default generated hex string matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "testclass_name": "TimeAndDateTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.time.Duration;", "import java.time.Instant;", "import java.time.LocalDate;", "import java.time.LocalDateTime;", "import java.time.Period;", "import java.time.format.DateTimeFormatter;", "import java.time.temporal.ChronoUnit;", "import java.util.concurrent.TimeUnit;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "TimeAndDateTest", "description": "Unit tests for TimeAndDate class, focusing on various date and time operations.", "class_members": {"variables": [{"name": "timeAndDate", "type": "TimeAndDate"}]}, "fixtures": [], "test_cases": [{"name": "testFutureDate", "primary_tested": ["TimeAndDate.future()"], "external_dependencies": {"modules": ["TimeAndDate"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the future date generation to ensure it is in the future."}, {"name": "testFutureDateWithBounds", "primary_tested": ["TimeAndDate.future(int,TimeUnit,Instant)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the future date generation with bounds to ensure it falls within the specified range."}, {"name": "testFutureDateWithMinimum", "primary_tested": ["TimeAndDate.future(int,int,TimeUnit)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the future date generation with minimum bounds to ensure it falls within the specified range."}, {"name": "testPastDateWithMinimum", "primary_tested": ["TimeAndDate.past(int,int,TimeUnit)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the past date generation with minimum bounds to ensure it falls within the specified range."}, {"name": "testPastDateWithReferenceDate", "primary_tested": ["TimeAndDate.past(int,TimeUnit,Instant)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the past date generation with a reference date to ensure it falls within the specified range."}, {"name": "testPastDate", "primary_tested": ["TimeAndDate.past()"], "external_dependencies": {"modules": ["TimeAndDate"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the past date generation to ensure it is in the past."}, {"name": "testPastDateWithBounds", "primary_tested": ["TimeAndDate.past(int,TimeUnit)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the past date generation with bounds to ensure it falls within the specified range."}, {"name": "testBetween", "primary_tested": ["TimeAndDate.between(Instant,Instant)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the date generation between two specified instants to ensure it falls within the specified range."}, {"name": "testBetweenWithMaskReturningString", "primary_tested": ["TimeAndDate.between(Instant,Instant,String)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant", "DateTimeFormatter"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the date generation between two specified instants with a mask to ensure it returns a formatted string."}, {"name": "testBetweenThenLargerThanNow", "primary_tested": ["TimeAndDate.between(Instant,Instant)"], "external_dependencies": {"modules": ["TimeAndDate", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the date generation between two specified instants where the upper bound is before the lower bound, expecting an exception."}, {"name": "testBirthday", "primary_tested": ["TimeAndDate.birthday()"], "external_dependencies": {"modules": ["TimeAndDate", "LocalDateTime", "LocalDate"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the birthday generation to ensure it falls within the default age range."}, {"name": "testBirthdayWithAges", "primary_tested": ["TimeAndDate.birthday(int,int)"], "external_dependencies": {"modules": ["TimeAndDate", "LocalDate", "Number"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the birthday generation with specified age ranges to ensure it falls within the specified range."}, {"name": "birthdayWithMask", "primary_tested": ["TimeAndDate.birthday(int,int,String)"], "external_dependencies": {"modules": ["TimeAndDate", "DateTimeFormatter"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the birthday generation with a mask to ensure it returns a formatted string."}, {"name": "futureWithMask", "primary_tested": ["TimeAndDate.future(int,TimeUnit,String)", "TimeAndDate.future(int,int,TimeUnit,String)", "TimeAndDate.future(int,TimeUnit,Instant,String)"], "external_dependencies": {"modules": ["TimeAndDate", "DateTimeFormatter", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the future date generation with a mask to ensure it returns a formatted string."}, {"name": "pastWithMask", "primary_tested": ["TimeAndDate.past(int,TimeUnit,String)", "TimeAndDate.past(int,int,TimeUnit,String)", "TimeAndDate.past(int,TimeUnit,Instant,String)"], "external_dependencies": {"modules": ["TimeAndDate", "DateTimeFormatter", "Instant"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the past date generation with a mask to ensure it returns a formatted string."}, {"name": "periodTest", "primary_tested": ["TimeAndDate.period(Period,Period)"], "external_dependencies": {"modules": ["TimeAndDate", "Period"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the period generation to ensure it falls within the specified range."}, {"name": "durationTest", "primary_tested": ["TimeAndDate.duration(long,long,ChronoUnit)", "TimeAndDate.duration(long,ChronoUnit)"], "external_dependencies": {"modules": ["TimeAndDate", "Duration", "ChronoUnit"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the duration generation to ensure it falls within the specified range."}, {"name": "maxLessThanMinPeriod", "primary_tested": ["TimeAndDate.period(Period,Period)"], "external_dependencies": {"modules": ["TimeAndDate", "Period"], "class_members": [{"name": "timeAndDate", "type": "variable"}]}, "category": "unit", "description": "Tests the period generation with max period less than min period, expecting an exception."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "testclass_name": "RomanianIdNumberTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.time.LocalDate;", "import java.util.HashSet;", "import java.util.Set;", "import java.util.regex.Pattern;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;", "import static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "RomanianIdNumberTest", "description": "Unit tests for the RomanianIdNumber class, focusing on various aspects of generating and validating Romanian ID numbers.", "class_members": {"variables": [{"name": "RE_TWO_DIGITS", "type": "static final Pattern"}, {"name": "RE_THREE_DIGITS", "type": "static final Pattern"}, {"name": "RE_THIRTEEN_DIGITS", "type": "static final Pattern"}, {"name": "impl", "type": "RomanianIdNumber"}, {"name": "faker", "type": "Faker"}]}, "fixtures": [], "test_cases": [{"name": "sample", "primary_tested": ["RomanianIdNumber.generateValid(Faker)"], "external_dependencies": {"modules": ["RomanianIdNumber", "Faker"], "class_members": [{"name": "impl", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a valid Romanian ID number and ensures it matches the expected 13-digit pattern."}, {"name": "firstDigit_18xx", "primary_tested": ["RomanianIdNumber.firstCharacter(LocalDate,Gender)"], "external_dependencies": {"modules": ["RomanianIdNumber", "LocalDate"], "class_members": [{"name": "impl", "type": "variable"}]}, "category": "unit", "description": "Tests the first character generation for years between 1800 and 1899, ensuring it matches the expected gender-based values."}, {"name": "firstDigit_19xx", "primary_tested": ["RomanianIdNumber.firstCharacter(LocalDate,Gender)"], "external_dependencies": {"modules": ["RomanianIdNumber", "LocalDate"], "class_members": [{"name": "impl", "type": "variable"}]}, "category": "unit", "description": "Tests the first character generation for years between 1900 and 1999, ensuring it matches the expected gender-based values."}, {"name": "firstDigit_20xx", "primary_tested": ["RomanianIdNumber.firstCharacter(LocalDate,Gender)"], "external_dependencies": {"modules": ["RomanianIdNumber", "LocalDate"], "class_members": [{"name": "impl", "type": "variable"}]}, "category": "unit", "description": "Tests the first character generation for years between 2000 and 2099, ensuring it matches the expected gender-based values."}, {"name": "dateOfBirth", "primary_tested": ["RomanianIdNumber.dateOfBirth(LocalDate)"], "external_dependencies": {"modules": ["RomanianIdNumber", "LocalDate"], "class_members": [{"name": "impl", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of a LocalDate to a date of birth string in the format used in Romanian ID numbers."}, {"name": "countyCode", "primary_tested": ["RomanianIdNumber.countyCode(Faker)"], "external_dependencies": {"modules": ["RomanianIdNumber", "Faker"], "class_members": [{"name": "impl", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of county codes and ensures they match the expected 2-digit pattern and are within the valid range."}, {"name": "sequenceNumber", "primary_tested": ["RomanianIdNumber.sequenceNumber(Faker)"], "external_dependencies": {"modules": ["RomanianIdNumber", "Faker"], "class_members": [{"name": "impl", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a sequence number and ensures it matches the expected 3-digit pattern."}, {"name": "checksum", "primary_tested": ["RomanianIdNumber.checksum(String)"], "external_dependencies": {"modules": ["RomanianIdNumber"], "class_members": [{"name": "impl", "type": "variable"}]}, "category": "unit", "description": "Tests the checksum calculation for a given Romanian ID number string."}]}, {"file_path": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "testclass_name": "FakeAnnotationTest", "dependencies": ["package net.datafaker.annotations;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Locale;", "import java.util.Objects;", "import java.util.Random;", "import net.datafaker.Faker;", "import net.datafaker.annotations.dto.ComplexPersonJavaRecord;", "import net.datafaker.annotations.dto.Person;", "import net.datafaker.annotations.dto.PersonJavaRecord;", "import net.datafaker.sequence.FakeCollection;", "import net.datafaker.service.RandomService;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.Test;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "FakeAnnotationTest", "description": "Tests for generating entities using Faker with default and custom schemas.", "class_members": {"methods": [{"name": "defaultSchema", "signature": "public static Schema<Object, ?> defaultSchema()"}, {"name": "customSchema", "signature": "public static Schema<Object, ?> customSchema()"}, {"name": "complexSchema", "signature": "public static Schema<Object, ?> complexSchema()"}], "nested_classes": [{"name": "DefaultPerson", "description": "Internal class with default schema annotation"}, {"name": "SimplePerson", "description": "Internal class without schema annotation"}, {"name": "DefaultPersonJavaRecord", "description": "Internal record class with default schema annotation"}, {"name": "SimplePersonJavaRecord", "description": "Internal record class without schema annotation"}]}, "test_cases": [{"name": "shouldGenerateEntityWithDefaultSchema", "primary_tested": ["Faker.populate(Class)"], "external_dependencies": {"modules": ["Faker", "Person"]}, "category": "unit", "description": "Tests generating an entity with the default schema."}, {"name": "shouldGenerateEntityFromJavaRecordWithDefaultSchema", "primary_tested": ["Faker.populate(Class)"], "external_dependencies": {"modules": ["Faker", "PersonJavaRecord"]}, "category": "unit", "description": "Tests generating an entity from a Java record with the default schema."}, {"name": "shouldGenerateEntityWithCustomSchema", "primary_tested": ["Faker.populate(Class,Schema)"], "external_dependencies": {"modules": ["Faker", "Person", "Schema"], "class_members": [{"name": "customSchema", "type": "method"}]}, "category": "unit", "description": "Tests generating an entity with a custom schema."}, {"name": "shouldGenerateEntityFromJavaRecordWithCustomSchema", "primary_tested": ["Faker.populate(Class,Schema)"], "external_dependencies": {"modules": ["Faker", "PersonJavaRecord", "Schema"], "class_members": [{"name": "customSchema", "type": "method"}]}, "category": "unit", "description": "Tests generating an entity from a Java record with a custom schema."}, {"name": "shouldGenerateEntityWithCustomSchemaWhenClassTemplateWithoutAnnotation", "primary_tested": ["Faker.populate(Class,Schema)"], "external_dependencies": {"modules": ["Faker", "SimplePerson", "Schema"], "class_members": [{"name": "customSchema", "type": "method"}]}, "category": "unit", "description": "Tests generating an entity with a custom schema for a class without annotation."}, {"name": "shouldGenerateEntityFromJavaRecordWithCustomSchemaWhenClassTemplateWithoutAnnotation", "primary_tested": ["Faker.populate(Class,Schema)"], "external_dependencies": {"modules": ["Faker", "SimplePersonJavaRecord", "Schema"], "class_members": [{"name": "customSchema", "type": "method"}]}, "category": "unit", "description": "Tests generating an entity from a Java record with a custom schema for a class without annotation."}, {"name": "shouldGenerateEntityFromJavaRecordWithComplexSchemaWhenClassTemplateWithoutAnnotation", "primary_tested": ["Faker.populate(Class,Schema)"], "external_dependencies": {"modules": ["Faker", "ComplexPersonJavaRecord", "Schema"], "class_members": [{"name": "complexSchema", "type": "method"}]}, "category": "unit", "description": "Tests generating an entity from a Java record with a complex schema for a class without annotation."}, {"name": "shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass", "primary_tested": ["Faker.populate(Class)"], "external_dependencies": {"modules": ["Faker", "DefaultPerson"]}, "category": "unit", "description": "Tests generating an entity with the default schema defined in the current class."}, {"name": "shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass2", "primary_tested": ["Faker.populate(Class,Schema)"], "associated_methods": ["FakeCollection.Builder.suppliers(Supplier)", "FakeCollection.Builder.len(int)", "FakeCollection.Builder.generate()"], "external_dependencies": {"modules": ["Faker", "DefaultPerson", "Schema", "FakeCollection"], "class_members": [{"name": "customSchema", "type": "method"}]}, "category": "unit", "description": "Tests generating an entity with the default schema defined in the current class and using FakeCollection."}, {"name": "shouldGenerateEntityFromJavaRecordWithDefaultSchemaAndInDefaultSchemaInCurrentClass", "primary_tested": ["Faker.populate(Class)"], "external_dependencies": {"modules": ["Faker", "DefaultPersonJavaRecord"]}, "category": "unit", "description": "Tests generating an entity from a Java record with the default schema defined in the current class."}]}, {"file_path": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java", "testclass_name": "JavaObjectTransformerTest", "dependencies": ["package net.datafaker.transformations;", "import net.datafaker.AbstractFakerTest;", "import org.junit.jupiter.api.Test;", "import java.time.Instant;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Date;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "JavaObjectTransformerTest", "description": "Tests for the JavaObjectTransformer class, focusing on transforming and validating Java objects and records.", "class_members": {"nested_classes": [{"name": "Person", "description": "Internal class representing a person with various attributes."}, {"name": "Client", "description": "Internal record representing a client with various attributes."}]}, "fixtures": [], "test_cases": [{"name": "javaObjectTest", "primary_tested": ["JavaObjectTransformer.apply(Class,Schema)"], "associated_methods": ["Person.getBirthDate()", "Person.getLastName()", "Person.getFirstName()", "Person.getRegistrationDate()"], "external_dependencies": {"modules": ["JavaObjectTransformer", "Schema", "Person", "Faker"], "class_members": [], "project_specific_resources": ["Field.field(String,Supplier)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a Java object (Person) using the JavaObjectTransformer."}, {"name": "javaRecordTest", "primary_tested": ["JavaObjectTransformer.apply(Class,Schema)"], "associated_methods": ["Client.firstName()", "Client.lastName()", "Client.phoneNumber()", "Client.registrationDate()"], "external_dependencies": {"modules": ["JavaObjectTransformer", "Schema", "Client", "Faker"], "class_members": [], "project_specific_resources": ["Field.field(String,Supplier)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of a Java record (Client) using the JavaObjectTransformer."}, {"name": "javaStreamingTest", "primary_tested": ["JavaObjectTransformer.generateStream(Schema,int)"], "associated_methods": ["Person.getBirthDate()", "Person.getLastName()", "Person.getFirstName()", "Person.getRegistrationDate()"], "external_dependencies": {"modules": ["JavaObjectTransformer", "Schema", "Person", "Faker"], "class_members": [], "project_specific_resources": ["Field.field(String,Supplier)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the streaming generation of Java objects (Person) using the JavaObjectTransformer."}, {"name": "javaEmptyStreamTest", "primary_tested": ["JavaObjectTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["JavaObjectTransformer", "Schema", "Faker"], "class_members": [], "project_specific_resources": ["Field.field(String,Supplier)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of an empty stream of Java objects using the JavaObjectTransformer."}, {"name": "javaCollectionTest", "primary_tested": ["JavaObjectTransformer.generate(Schema,int)"], "associated_methods": ["Person.getBirthDate()", "Person.getLastName()", "Person.getFirstName()", "Person.getRegistrationDate()"], "external_dependencies": {"modules": ["JavaObjectTransformer", "Schema", "Person", "Faker"], "class_members": [], "project_specific_resources": ["Field.field(String,Supplier)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a collection of Java objects (Person) using the JavaObjectTransformer."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesTest.java", "testclass_name": "FakeValuesTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.net.MalformedURLException;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.Locale;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "FakeValuesTest", "description": "Unit tests for the FakeValues class, focusing on various scenarios related to locale and path handling.", "class_members": {"variables": [{"name": "PATH", "type": "static final String"}, {"name": "fakeValues", "type": "FakeValues"}], "methods": [], "nested_classes": []}, "fixtures": ["before"], "test_cases": [{"name": "getAValueReturnsAValue", "primary_tested": ["FakeValues.get(String)"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues", "type": "variable"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests that a value is returned when a valid path is provided."}, {"name": "getAValueDoesNotReturnAValue", "primary_tested": ["FakeValues.get(String)"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues", "type": "variable"}]}, "category": "unit", "fixtures_used": ["before"], "description": "Tests that no value is returned when an invalid path is provided."}, {"name": "getAValueWithANonEnglishFile", "primary_tested": ["FakeValues.get(String)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a value is returned when a non-English locale is used."}, {"name": "getAValueForHebrewLocale", "primary_tested": ["FakeValues.get(String)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a value is returned when the Hebrew locale is used."}, {"name": "correctPathForHebrewLanguage", "primary_tested": ["FakeValues.getPaths()"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the correct path is returned for the Hebrew locale."}, {"name": "incorrectPathForHebrewLanguage", "primary_tested": ["FakeValues.getPaths()"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an incorrect path is not returned for the Hebrew locale."}, {"name": "correctLocale", "primary_tested": ["FakeValues.getLocale()"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the correct locale is returned."}, {"name": "getAValueFromALocaleThatCantBeLoaded", "primary_tested": ["FakeValues.get(String)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that no value is returned when a locale that cannot be loaded is used."}, {"name": "checkEquals", "primary_tested": [], "associated_methods": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale", "Path", "Paths", "MalformedURLException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equality of FakeValues instances based on different contexts."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "testclass_name": "PhoneNumberTest", "dependencies": ["package net.datafaker.providers.base;", "import com.google.i18n.phonenumbers.NumberParseException;", "import com.google.i18n.phonenumbers.PhoneNumberUtil;", "import com.google.i18n.phonenumbers.Phonenumber;", "import net.datafaker.Faker;", "import org.assertj.core.api.AbstractStringAssert;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "PhoneNumberTest", "description": "Test suite for validating phone number generation across various locales using the Faker library.", "class_members": {"variables": [{"name": "ESTONIAN", "type": "static final Faker"}, {"name": "MOLDOVAN", "type": "static final Faker"}, {"name": "COUNT", "type": "static final int"}, {"name": "util", "type": "PhoneNumberUtil"}], "methods": [{"name": "canadianLocales", "signature": "Stream<Arguments> canadianLocales()"}, {"name": "locales", "signature": "Stream<Arguments> locales()"}, {"name": "locale", "signature": "Arguments locale(String language, String country)"}, {"name": "parse", "signature": "Phonenumber.PhoneNumber parse(String generatedNumber, String countryCode) throws NumberParseException"}, {"name": "assertThatPhone", "signature": "static AbstractStringAssert<?> assertThatPhone(String phoneNumber)"}, {"name": "noSpaces", "signature": "static String noSpaces(String phone)"}]}, "fixtures": [], "test_cases": [{"name": "testCellPhone_enUS", "primary_tested": ["PhoneNumber.cellPhone()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber"], "class_members": [{"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a cell phone number in the US locale."}, {"name": "testPhone_esMx", "primary_tested": ["PhoneNumber.cellPhone()", "PhoneNumber.phoneNumber()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber"], "class_members": [{"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of phone numbers in the Mexican locale."}, {"name": "testPhone_CA", "primary_tested": ["PhoneNumber.cellPhone()"], "associated_methods": ["PhoneNumberTest.canadianLocales()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber", "Pattern"], "class_members": [{"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of phone numbers in Canadian locales."}, {"name": "testAllPhoneNumberNational", "primary_tested": ["PhoneNumber.phoneNumber()"], "associated_methods": ["PhoneNumberTest.locales()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber", "Phonenumber.PhoneNumber", "PhoneNumberUtil"], "class_members": [{"name": "COUNT", "type": "variable"}, {"name": "util", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of national phone numbers across various locales."}, {"name": "testAllPhoneNumberInternational", "primary_tested": ["PhoneNumber.phoneNumberInternational()"], "associated_methods": ["PhoneNumberTest.locales()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber", "Phonenumber.PhoneNumber", "PhoneNumberUtil"], "class_members": [{"name": "COUNT", "type": "variable"}, {"name": "util", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of international phone numbers across various locales."}, {"name": "testAllPhoneNumberMobile", "primary_tested": ["PhoneNumber.cellPhone()"], "associated_methods": ["PhoneNumberTest.locales()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber", "Phonenumber.PhoneNumber", "PhoneNumberUtil"], "class_members": [{"name": "COUNT", "type": "variable"}, {"name": "util", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of mobile phone numbers across various locales."}, {"name": "testAllPhoneNumberMobileInternational", "primary_tested": ["PhoneNumber.cellPhoneInternational()"], "associated_methods": ["PhoneNumberTest.locales()"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "PhoneNumber", "Phonenumber.PhoneNumber", "PhoneNumberUtil"], "class_members": [{"name": "COUNT", "type": "variable"}, {"name": "util", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of international mobile phone numbers across various locales."}, {"name": "testCellPhone", "primary_tested": ["PhoneNumber.cellPhone()"], "external_dependencies": {"modules": ["PhoneNumber"]}, "category": "unit", "description": "Tests the generation of a cell phone number."}, {"name": "testPhoneNumber", "primary_tested": ["PhoneNumber.phoneNumber()"], "external_dependencies": {"modules": ["PhoneNumber"]}, "category": "unit", "description": "Tests the generation of a phone number."}, {"name": "testExtension", "primary_tested": ["PhoneNumber.extension()"], "external_dependencies": {"modules": ["PhoneNumber"]}, "category": "unit", "description": "Tests the generation of a phone number extension."}, {"name": "testSubscriberNumber", "primary_tested": ["PhoneNumber.subscriberNumber()"], "external_dependencies": {"modules": ["PhoneNumber"]}, "category": "unit", "description": "Tests the generation of a subscriber number."}, {"name": "testSubscriberNumberWithLength", "primary_tested": ["PhoneNumber.subscriberNumber(int)"], "external_dependencies": {"modules": ["PhoneNumber"]}, "category": "unit", "description": "Tests the generation of a subscriber number with a specified length."}, {"name": "cellPhone_estonia", "primary_tested": ["PhoneNumber.cellPhone()"], "associated_methods": ["PhoneNumberTest.noSpaces(String)"], "external_dependencies": {"modules": ["PhoneNumber"], "class_members": [{"name": "ESTONIAN", "type": "variable"}, {"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a cell phone number in Estonia."}, {"name": "phoneNumberNational_estonia", "primary_tested": ["PhoneNumber.phoneNumberNational()"], "associated_methods": ["PhoneNumberTest.noSpaces(String)"], "external_dependencies": {"modules": ["PhoneNumber"], "class_members": [{"name": "ESTONIAN", "type": "variable"}, {"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a national phone number in Estonia."}, {"name": "phoneNumberInternational_estonia", "primary_tested": ["PhoneNumber.phoneNumberInternational()"], "associated_methods": ["PhoneNumberTest.noSpaces(String)"], "external_dependencies": {"modules": ["PhoneNumber"], "class_members": [{"name": "ESTONIAN", "type": "variable"}, {"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of an international phone number in Estonia."}, {"name": "cellPhone_moldova", "primary_tested": ["PhoneNumber.cellPhone()"], "associated_methods": ["PhoneNumberTest.noSpaces(String)"], "external_dependencies": {"modules": ["PhoneNumber"], "class_members": [{"name": "MOLDOVAN", "type": "variable"}, {"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a cell phone number in Moldova."}, {"name": "phoneNumber_moldova", "primary_tested": ["PhoneNumber.phoneNumber()"], "associated_methods": ["PhoneNumberTest.noSpaces(String)"], "external_dependencies": {"modules": ["PhoneNumber"], "class_members": [{"name": "MOLDOVAN", "type": "variable"}, {"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a phone number in Moldova."}, {"name": "phoneNumberInternational_moldova", "primary_tested": ["PhoneNumber.phoneNumberInternational()"], "associated_methods": ["PhoneNumberTest.noSpaces(String)"], "external_dependencies": {"modules": ["PhoneNumber"], "class_members": [{"name": "MOLDOVAN", "type": "variable"}, {"name": "COUNT", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of an international phone number in Moldova."}]}, {"file_path": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "testclass_name": "JavaNamesTest", "dependencies": ["package net.datafaker.internal.helper;", "import org.junit.jupiter.api.Test;", "import static net.datafaker.internal.helper.JavaNames.toJavaNames;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "JavaNamesTest", "description": "Unit tests for the toJavaNames method in the JavaNames class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "singleWord", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a single word input."}, {"name": "emptyString", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with an empty string input."}, {"name": "nullString", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a null string input."}, {"name": "wordWithDigit", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a word containing a digit."}, {"name": "wordStartingWithDigit", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a word starting with a digit."}, {"name": "singleCharacter", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a single character input."}, {"name": "singleCharacterUnderscore", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a single underscore character input."}, {"name": "onlyUnderscores", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with input containing only underscores."}, {"name": "multipleWordsSeparatedByUnderscores", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with multiple words separated by underscores."}, {"name": "multipleUnderscoresInRow", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with multiple underscores in a row."}, {"name": "upperFirstCharacterWithoutUnderscores", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a word starting with an uppercase character and no underscores."}, {"name": "upperFirstCharacterWithUnderscores", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a word starting with an uppercase character and containing underscores."}, {"name": "endingWithUnderscore", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a word ending with an underscore."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/LoremTest.java", "testclass_name": "LoremTest", "dependencies": ["package net.datafaker.providers.base;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import java.util.Random;", "import java.util.stream.Collectors;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "LoremTest", "description": "Unit tests for the Lorem class, focusing on various text generation functionalities.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}], "methods": [{"name": "providerListTest", "signature": "Collection<TestSpec> providerListTest()"}]}, "fixtures": [], "test_cases": [{"name": "shouldCreateFixedLengthString", "primary_tested": ["Lorem.fixedString(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of fixed-length strings using Lorem.fixedString."}, {"name": "testCharacter", "primary_tested": ["Lorem.character()"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a single character using Lorem.character."}, {"name": "testCharacterIncludeUpperCase", "primary_tested": ["Lorem.character(boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a single character with and without uppercase using Lorem.character."}, {"name": "testCharactersShouldIncludeMinAndMaxLenght", "primary_tested": ["Lorem.characters(int,int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with varying lengths using Lorem.characters."}, {"name": "testCharacters", "primary_tested": ["Lorem.characters()"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with a default length using Lorem.characters."}, {"name": "testCharactersIncludeUpperCase", "primary_tested": ["Lorem.characters(boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with and without uppercase using Lorem.characters."}, {"name": "testCharactersWithLength", "primary_tested": ["Lorem.characters(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with specified lengths using Lorem.characters."}, {"name": "testCharactersWithLengthIncludeUppercase", "primary_tested": ["Lorem.characters(int,boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with specified lengths and uppercase inclusion using Lorem.characters."}, {"name": "testCharactersMinimumMaximumLength", "primary_tested": ["Lorem.characters(int,int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters within a specified length range using Lorem.characters."}, {"name": "testCharactersMinimumMaximumLengthEquals", "primary_tested": ["Lorem.characters(int,int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with equal minimum and maximum lengths using Lorem.characters."}, {"name": "testCharactersMinimumMaximumLengthEqualsIncludingUppercaseAndIncludingDigit", "primary_tested": ["Lorem.characters(int,int,boolean,boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with equal minimum and maximum lengths, including uppercase and digits using Lorem.characters."}, {"name": "testCharactersFixedLengthIncludingUppercaseAndIncludingDigit", "primary_tested": ["Lorem.characters(int,boolean,boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with a fixed length, including uppercase and digits using Lorem.characters."}, {"name": "testFixedNumberOfCharactersEmpty", "primary_tested": ["Lorem.characters(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters with negative or zero length using Lorem.characters."}, {"name": "testCharactersMinimumMaximumLengthIncludeUppercase", "primary_tested": ["Lorem.characters(int,int,boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters within a specified length range, including uppercase using Lorem.characters."}, {"name": "testCharactersMinimumMaximumLengthIncludeUppercaseIncludeDigit", "primary_tested": ["Lorem.characters(int,int,boolean,boolean)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of characters within a specified length range, including uppercase and digits using Lorem.characters."}, {"name": "testSentence", "primary_tested": ["Lorem.sentence()"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a sentence using Lorem.sentence."}, {"name": "testSentenceWithWordCount", "primary_tested": ["Lorem.sentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a sentence with a specified word count using Lorem.sentence."}, {"name": "testSentenceWithWordCountAndRandomWordsToAdd", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a sentence with a specified word count and additional random words using Lorem.sentence."}, {"name": "testSentenceFixedNumberOfWords", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a sentence with a fixed number of words using Lorem.sentence."}, {"name": "testWords", "primary_tested": ["Lorem.words()"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of words using Lorem.words."}, {"name": "testMaxLengthSentence", "primary_tested": ["Lorem.maxLengthSentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a sentence with a maximum length using Lorem.maxLengthSentence."}, {"name": "testMaxLengthWithEmptySentence", "primary_tested": ["Lorem.maxLengthSentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of an empty sentence using Lorem.maxLengthSentence."}, {"name": "testMaxLengthWithNegativeLengthSentence", "primary_tested": ["Lorem.maxLengthSentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of an empty sentence with a negative length using Lorem.maxLengthSentence."}, {"name": "testSentences", "primary_tested": ["Lorem.paragraph()"], "external_dependencies": {"modules": ["Lorem", "StringUtils"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a paragraph with sentences using Lorem.paragraph."}, {"name": "testSentencesWithCount", "primary_tested": ["Lorem.paragraph(int)"], "external_dependencies": {"modules": ["Lorem", "StringUtils"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a paragraph with a specified number of sentences using Lorem.paragraph."}]}, {"file_path": "src/test/java/net/datafaker/formats/CsvTest.java", "testclass_name": "CsvTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.sequence.FakeSequence;", "import net.datafaker.transformations.CsvTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.Random;", "import static net.datafaker.transformations.Field.field;", "import static net.datafaker.transformations.Transformer.LINE_SEPARATOR;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "CsvTest", "description": "Test suite for CSV transformation functionalities using the CsvTransformer class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "csvTestNew", "primary_tested": ["CsvTransformer.generate(Schema,int)"], "associated_methods": ["BaseFaker.name().firstName()", "BaseFaker.name().lastName()", "BaseFaker.address().streetAddress()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name", "Address"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a custom separator and header."}, {"name": "csvTestWithQuotesNew", "primary_tested": ["CsvTransformer.generate(Schema,int)"], "associated_methods": ["BaseFaker.expression(String)"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a custom separator and header, including expressions."}, {"name": "testCsvWithCommaNew", "primary_tested": ["CsvTransformer.generate(Schema,int)"], "associated_methods": [], "external_dependencies": {"modules": ["CsvTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a comma separator and no header."}, {"name": "testCsvWithDifferentObjects", "primary_tested": ["CsvTransformer.generate(Schema,int)"], "associated_methods": ["BaseFaker.number().randomDigit()", "BaseFaker.bool().bool()", "BaseFaker.name().firstName()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Number", "Bool", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with different object types."}, {"name": "testCsvWithDifferentObjectsFunction", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.internet().password(int,int)", "BaseFaker.number().randomDigit()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Internet", "Number"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with different object types using functions."}, {"name": "testCsvWithDifferentObjectsFunctionStream", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.internet().password(int,int)", "BaseFaker.number().randomDigit()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Internet", "Number"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with different object types using functions and streams."}, {"name": "testCsvWithInfiniteSequence", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.number().digits(int)", "BaseFaker.name().firstName()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Number", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with an infinite sequence, expecting an exception."}, {"name": "testLimitForCsv", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.name()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a specified limit."}, {"name": "testLimitForCsvNew", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.name()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a specified limit using a new schema."}, {"name": "testLimitForCollection", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.name()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a specified limit for a collection."}, {"name": "testLimitForCollectionNew", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.name()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with a specified limit for a collection using a new schema."}, {"name": "testInfiniteCsv", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.name()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with an infinite sequence, expecting an exception."}, {"name": "testInfiniteCsvWithLimit", "primary_tested": ["CsvTransformer.generate(FakeSequence,Schema)"], "associated_methods": ["BaseFaker.name()"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV with an infinite sequence and a specified limit."}, {"name": "supplierShouldBeDefinedInCaseOfNullInput", "primary_tested": ["CsvTransformer.generate(Schema,int)"], "associated_methods": [], "external_dependencies": {"modules": ["CsvTransformer", "Schema", "Name"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown if the input is null and no suppliers are defined."}]}, {"file_path": "src/test/java/net/datafaker/formats/SqlTest.java", "testclass_name": "SqlTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.Faker;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.sequence.FakeSequence;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.Schema;", "import net.datafaker.transformations.sql.SqlDialect;", "import net.datafaker.transformations.sql.SqlTransformer;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.List;", "import java.util.Map;", "import java.util.Random;", "import java.util.Set;", "import java.util.TreeMap;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static net.datafaker.transformations.Transformer.LINE_SEPARATOR;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "SqlTest", "description": "Test suite for generating SQL statements using SqlTransformer with various configurations and dialects.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "generateFromFakeSequenceSeparated", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from a FakeSequence in separated mode."}, {"name": "generateFromFakeSequenceBatch", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from a FakeSequence in batch mode."}, {"name": "generateFromEmptySchema", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from an empty schema."}, {"name": "generateFromInfiniteFakeSequenceBatch", "primary_tested": ["SqlTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer", "FakeSequence"]}, "category": "unit", "description": "Tests the generation of SQL statements from an infinite FakeSequence in batch mode, expecting an exception."}, {"name": "testGenerateFromSchemaWithLimitSeparatedStatements", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements from a schema with a limit in separated mode."}, {"name": "testGenerateFromSchemaWithLimitBatchModeStatements", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements from a schema with a limit in batch mode."}, {"name": "testForceQuotedWithSqlIdentifiers", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with forced quoted identifiers."}, {"name": "simpleSqlTestForSqlTransformer", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with various schemas."}, {"name": "simpleSqlTestForSqlTransformerOracle", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with Oracle dialect."}, {"name": "simpleSqlTestForSqlTransformerPostgres", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with Postgres dialect."}, {"name": "simpleSqlTestForSqlTransformerMSSQL", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with MSSQL dialect."}, {"name": "simpleSqlTestForSqlTransformerMySQL", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with MySQL dialect."}, {"name": "batchSqlTestForSqlTransformerPostgres", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements for SqlTransformer with Postgres dialect."}, {"name": "sqlKeywordCaseCheck", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with lowercase keywords for SqlTransformer with Postgres dialect."}, {"name": "sqlKeywordCapitalCaseCheck", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with capital case keywords for SqlTransformer with Postgres dialect."}, {"name": "batchSqlTestForSqlTransformerOracle", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements for SqlTransformer with Oracle dialect."}, {"name": "batchSizeSqlTestForSqlTransformerOracle", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements with a specific batch size for SqlTransformer with Oracle dialect."}, {"name": "batchSizeSqlTestForSqlTransformerPostgres", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements with a specific batch size for SqlTransformer with Postgres dialect."}, {"name": "arrayAndMultisetSqlTestForSqlTransformerCalcite", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements with arrays and multisets for SqlTransformer with Calcite dialect."}, {"name": "batchTestForSqlTransformerSparkSql", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Faker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of batch SQL statements for SqlTransformer with SparkSQL dialect."}, {"name": "simpleSqlTestForSqlTransformerSparkSql", "primary_tested": ["SqlTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of simple SQL statements for SqlTransformer with SparkSQL dialect."}, {"name": "simpleStreamTestForSqlTransformerSparkSql", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements as a stream for SqlTransformer with SparkSQL dialect."}, {"name": "testSqlBatch", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "SqlTransformer"]}, "category": "unit", "description": "Tests the generation of SQL statements in batch mode for SqlTransformer."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/NumberTest.java", "testclass_name": "NumberTest", "dependencies": ["package net.datafaker.providers.base;", "import org.apache.commons.lang3.tuple.Pair;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Map;", "import java.util.Random;", "import java.util.Set;", "import java.util.concurrent.atomic.AtomicLong;", "import java.util.function.Function;", "import java.util.function.Supplier;", "import static org.assertj.core.api.Assertions.assertThat;"]}, {"file_path": "src/test/java/net/datafaker/providers/base/AddressTest.java", "testclass_name": "AddressTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.Faker;", "import org.assertj.core.api.Condition;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.NullSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.text.DecimalFormatSymbols;", "import java.util.Locale;", "import java.util.Random;", "import java.util.function.BiFunction;", "import java.util.function.Function;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"]}, {"file_path": "src/test/java/net/datafaker/FakerTest.java", "testclass_name": "FakerTest", "dependencies": ["package net.datafaker;", "import net.datafaker.annotations.Deterministic;", "import net.datafaker.providers.base.AbstractProvider;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.Timeout;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import org.reflections.Reflections;", "import java.lang.reflect.Constructor;", "import java.lang.reflect.InvocationTargetException;", "import java.lang.reflect.Method;", "import java.lang.reflect.Modifier;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Locale;", "import java.util.Map;", "import java.util.Random;", "import java.util.Set;", "import java.util.concurrent.Callable;", "import java.util.concurrent.TimeUnit;", "import java.util.stream.Collectors;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.reflections.scanners.Scanners.SubTypes;"]}, {"file_path": "src/test/java/net/datafaker/providers/base/AzureTest.java", "testclass_name": "AzureTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "AzureTest", "description": "Unit tests for various Azure resource generation functionalities provided by the BaseFaker class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRegion", "primary_tested": ["Azure.region()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure regions."}, {"name": "testAccountId", "primary_tested": ["Azure.subscriptionId()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure subscription IDs."}, {"name": "testTenantId", "primary_tested": ["Azure.tenantId()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure tenant IDs."}, {"name": "testResourceGroup", "primary_tested": ["Azure.resourceGroup()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure resource groups."}, {"name": "testManagementGroup", "primary_tested": ["Azure.managementGroup()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure management groups."}, {"name": "testApplicationGateway", "primary_tested": ["Azure.applicationGateway()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure application gateways."}, {"name": "testBastionHost", "primary_tested": ["Azure.bastionHost()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure bastion hosts."}, {"name": "testFirewall", "primary_tested": ["Azure.firewall()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure firewalls."}, {"name": "testLoadBalancer", "primary_tested": ["Azure.loadBalancer()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure load balancers."}, {"name": "testNetworkSecurityGroup", "primary_tested": ["Azure.networkSecurityGroup()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure network security groups."}, {"name": "testVirtualNetwork", "primary_tested": ["Azure.virtualNetwork()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure virtual networks."}, {"name": "testVirtualWan", "primary_tested": ["Azure.virtualWan()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure virtual WANs."}, {"name": "testAppServiceEnvironment", "primary_tested": ["Azure.appServiceEnvironment()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure app service environments."}, {"name": "testAppServicePlan", "primary_tested": ["Azure.appServicePlan()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure app service plans."}, {"name": "testLoadTesting", "primary_tested": ["Azure.loadTesting()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure load testing resources."}, {"name": "testStaticWebApp", "primary_tested": ["Azure.staticWebApp()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure static web apps."}, {"name": "testVirtualMachine", "primary_tested": ["Azure.virtualMachine()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure virtual machines."}, {"name": "testStorageAccount", "primary_tested": ["Azure.storageAccount()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure storage accounts."}, {"name": "testContainerRegistry", "primary_tested": ["Azure.containerRegistry()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure container registries."}, {"name": "testContainerApps", "primary_tested": ["Azure.containerApps()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure container apps."}, {"name": "testContainerAppsEnvironment", "primary_tested": ["Azure.containerAppsEnvironment()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure container apps environments."}, {"name": "testContainerInstance", "primary_tested": ["Azure.containerInstance()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure container instances."}, {"name": "testCosmosDBDatabase", "primary_tested": ["Azure.cosmosDBDatabase()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure Cosmos DB databases."}, {"name": "testSqlDatabase", "primary_tested": ["Azure.sqlDatabase()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure SQL databases."}, {"name": "testMysqlDatabase", "primary_tested": ["Azure.mysqlDatabase()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure MySQL databases."}, {"name": "testPostgreSQLDatabase", "primary_tested": ["Azure.postgreSQLDatabase()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure PostgreSQL databases."}, {"name": "testServiceBus", "primary_tested": ["Azure.serviceBus()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure service bus resources."}, {"name": "testServiceBusQueue", "primary_tested": ["Azure.serviceBusQueue()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure service bus queues."}, {"name": "testServiceBusTopic", "primary_tested": ["Azure.serviceBusTopic()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure service bus topics."}, {"name": "testKeyVault", "primary_tested": ["Azure.keyVault()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure key vaults."}, {"name": "testLogAnalytics", "primary_tested": ["Azure.logAnalytics()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure log analytics resources."}, {"name": "testSpringApps", "primary_tested": ["Azure.springApps()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of Azure Spring Apps."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/InternetTest.java", "testclass_name": "InternetTest", "dependencies": ["package net.datafaker.providers.base;", "import org.apache.commons.validator.routines.EmailValidator;", "import org.assertj.core.api.Condition;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import org.mockito.Spy;", "import java.net.URL;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.Locale;", "import java.util.Random;", "import java.util.regex.Pattern;", "import java.util.stream.Collectors;", "import static java.lang.Integer.parseInt;", "import static org.assertj.core.api.Assertions.anyOf;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;", "import static org.mockito.Mockito.doReturn;"]}, {"file_path": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "testclass_name": "IdNumberTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.Faker;", "import net.datafaker.idnumbers.SouthAfricanIdNumber;", "import net.datafaker.idnumbers.SwedenIdNumber;", "import org.assertj.core.api.AbstractStringAssert;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.Locale;", "import java.util.regex.Pattern;", "import static java.lang.Integer.parseInt;", "import static org.assertj.core.api.Assertions.assertThat;"]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "testclass_name": "FakeValuesServiceTest", "dependencies": ["package net.datafaker.service;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.internal.helper.SingletonLocale;", "import net.datafaker.providers.base.AbstractProvider;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.BaseProviders;", "import org.apache.commons.validator.routines.checkdigit.LuhnCheckDigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import org.mockito.Mock;", "import org.mockito.Spy;", "import java.io.IOException;", "import java.net.URL;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.time.LocalDateTime;", "import java.time.OffsetDateTime;", "import java.time.ZoneId;", "import java.time.format.DateTimeFormatter;", "import java.time.format.DateTimeFormatterBuilder;", "import java.time.temporal.ChronoField;", "import java.util.List;", "import java.util.Locale;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.mockito.ArgumentMatchers.anyInt;", "import static org.mockito.Mockito.doReturn;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.when;"]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_ipV6CidrTest.java", "testclass_name": "Internet_ipV6CidrTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Internet_ipV6CidrTest", "description": "Unit tests for the IPv6 CIDR generation functionality in the Internet class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIpV6Cidr", "primary_tested": ["Internet.ipV6Cidr()"], "external_dependencies": {"modules": ["BaseFaker", "Internet"]}, "category": "unit", "description": "Tests the generation of an IPv6 CIDR and verifies its format."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_ipV4CidrTest.java", "testclass_name": "Internet_ipV4CidrTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Internet_ipV4CidrTest", "description": "Unit tests for the IPV4 CIDR generation functionality in the Internet class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIpV4Cidr", "primary_tested": ["Internet.ipV4Cidr()"], "external_dependencies": {"modules": ["BaseFaker", "Internet"]}, "category": "unit", "description": "Tests the generation of an IPV4 CIDR string and verifies its format."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BaseFaker_getFakerTest.java", "testclass_name": "BaseFaker_getFakerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "BaseFaker_getFakerTest", "description": "Unit test for the getFaker method in BaseFaker class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetFaker", "primary_tested": ["BaseFaker.getFaker()"], "external_dependencies": {"modules": ["BaseFaker", "ProviderRegistration"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getFaker method of the BaseFaker class to ensure it returns the correct instance."}]}, {"file_path": "src/test/java/net/datafaker/transformations/CsvTransformer_getStartStreamTest.java", "testclass_name": "CsvTransformer_getStartStreamTest", "dependencies": ["package net.datafaker.transformations;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "CsvTransformer_getStartStreamTest", "description": "Unit test for the getStartStream method of CsvTransformer.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetStartStream", "primary_tested": ["CsvTransformer.getStartStream(Schema)"], "external_dependencies": {"modules": ["CsvTransformer", "Schema"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getStartStream method of CsvTransformer to ensure it returns an empty string when no header is specified."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java", "testclass_name": "Azure_subscriptionIdTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Azure_subscriptionIdTest", "description": "Unit test for the subscriptionId method in the Azure class.", "class_members": {"variables": [{"name": "azure", "type": "Azure"}]}, "test_cases": [{"name": "testSubscriptionId", "primary_tested": ["Azure.subscriptionId()"], "external_dependencies": {"modules": ["BaseFaker", "Azure"], "class_members": [{"name": "azure", "type": "variable"}]}, "category": "unit", "description": "Tests the subscriptionId method of the Azure class to ensure it generates a valid UUID format."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_getPublicIpV4AddressTest.java", "testclass_name": "Internet_getPublicIpV4AddressTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.service.RandomService;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.net.InetAddress;", "import java.util.Arrays;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "Internet_getPublicIpV4AddressTest", "description": "Unit test for the getPublicIpV4Address method in the Internet class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetPublicIpV4Address", "primary_tested": ["Internet.getPublicIpV4Address()"], "associated_methods": [], "external_dependencies": {"modules": ["Internet", "RandomService", "InetAddress", "BaseProviders", "Mockito", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getPublicIpV4Address method of the Internet class to ensure it returns a valid public IPv4 address."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_uuidv7Test.java", "testclass_name": "Internet_uuidv7Test", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.UUID;"], "name": "Internet_uuidv7Test", "description": "Unit tests for the uuidv7 method in the Internet class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUuidv7", "primary_tested": ["Internet.uuidv7()"], "associated_methods": ["UUID.fromString(String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet", "UUID"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uuidv7 method of the Internet class to ensure it generates a valid UUIDv7 with the correct version and variant."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Company_urlTest.java", "testclass_name": "Company_urlTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Company_urlTest", "description": "Unit tests for the Company class's url method.", "class_members": {"variables": [{"name": "company", "type": "Company"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUrl", "primary_tested": ["Company.url()"], "external_dependencies": {"modules": ["Company", "BaseFaker"], "class_members": [{"name": "company", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the url generation functionality of the Company class, ensuring it starts with 'www.' and matches the expected pattern."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Name_titleTest.java", "testclass_name": "Name_titleTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Name_titleTest", "description": "Unit tests for the title generation functionality of the Name class.", "class_members": {"variables": [{"name": "name", "type": "Name"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTitle", "primary_tested": ["Name.title()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the title generation functionality of the Name class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BaseFaker_getProviderTest.java", "testclass_name": "BaseFaker_getProviderTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.util.function.Function;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.mockito.Mockito.*;"], "name": "BaseFaker_getProviderTest", "description": "Unit tests for the getProvider method in BaseFaker.", "class_members": {"nested_classes": [{"name": "TestProvider", "description": "Internal test provider class extending AbstractProvider"}]}, "test_cases": [{"name": "testGetProvider", "primary_tested": ["BaseFaker.getProvider(Class<TestProvider>,Function<ProviderRegistration,TestProvider>)"], "external_dependencies": {"modules": ["BaseFaker", "TestProvider", "Function", "ProviderRegistration"], "project_specific_resources": ["Mockito.mock(Class<Function>)", "Mockito.when(Function.apply(ProviderRegistration)).thenReturn(TestProvider)"]}, "category": "unit", "description": "Tests the getProvider method of BaseFaker to ensure it returns the expected TestProvider instance."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_csvTest.java", "testclass_name": "FakeValuesService_csvTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_csvTest", "description": "Unit tests for the csv method in FakeValuesService, focusing on even and odd column scenarios.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCsv_evenColumns", "primary_tested": ["FakeValuesService.csv(String,char,boolean,int,String...)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": []}, "category": "unit", "description": "Tests the csv method with an even number of columns, ensuring the result is not null."}, {"name": "testCsv_oddColumns", "primary_tested": ["FakeValuesService.csv(String,char,boolean,int,String...)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": []}, "category": "unit", "description": "Tests the csv method with an odd number of columns, expecting an IllegalArgumentException with a specific error message."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Color_hexTest.java", "testclass_name": "Color_hexTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import net.datafaker.service.RandomService;"], "name": "Color_hexTest", "description": "Unit tests for the Color class's hex method, which generates hexadecimal color codes with or without a hash sign.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHexWithHashSign", "primary_tested": ["Color.hex(boolean)"], "associated_methods": ["RandomService.hex(int)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "Color"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a hexadecimal color code with a hash sign."}, {"name": "testHexWithoutHashSign", "primary_tested": ["Color.hex(boolean)"], "associated_methods": ["RandomService.hex(int)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "Color"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a hexadecimal color code without a hash sign."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/RomanianIdNumber_generateInvalidTest.java", "testclass_name": "RomanianIdNumber_generateInvalidTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;"], "name": "RomanianIdNumber_generateInvalidTest", "description": "Unit tests for generating invalid Romanian ID numbers.", "class_members": {"variables": [{"name": "impl", "type": "RomanianIdNumber"}, {"name": "faker", "type": "Faker"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGenerateInvalid", "primary_tested": ["RomanianIdNumber.generateInvalid(Faker)"], "associated_methods": ["RomanianIdNumber.generateValid(Faker)", "RomanianIdNumber.checksum(String)"], "external_dependencies": {"modules": ["RomanianIdNumber", "Faker"], "class_members": [{"name": "impl", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid Romanian ID number and verifies that it is different from a valid ID and has an incorrect checksum."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Number_randomDoubleTest.java", "testclass_name": "Number_randomDoubleTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.math.RoundingMode;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import net.datafaker.service.RandomService;"], "name": "Number_randomDoubleTest", "description": "Unit test for the randomDouble method in the Number class.", "class_members": {"variables": [{"name": "faker", "type": "BaseProviders"}, {"name": "randomService", "type": "RandomService"}, {"name": "number", "type": "Number"}]}, "test_cases": [{"name": "testRandomDouble", "primary_tested": ["Number.randomDouble(int,int,int)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "BigDecimal", "RoundingMode"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "randomService", "type": "variable"}, {"name": "number", "type": "variable"}], "project_specific_resources": ["RandomService.nextDouble()"]}, "category": "unit", "description": "Tests the randomDouble method of the Number class, ensuring it returns a correctly rounded double value."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumber_generateInvalidTest.java", "testclass_name": "SouthAfricanIdNumber_generateInvalidTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.BaseProviders;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static net.datafaker.idnumbers.SouthAfricanIdNumber.isValidEnZASsn;", "import static org.junit.jupiter.api.Assertions.assertFalse;"], "name": "SouthAfricanIdNumber_generateInvalidTest", "description": "Unit tests for generating invalid South African ID numbers.", "class_members": {"variables": [{"name": "southAfricanIdNumber", "type": "SouthAfricanIdNumber"}, {"name": "faker", "type": "BaseProviders"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGenerateInvalidSsn", "primary_tested": ["SouthAfricanIdNumber.generateInvalid(BaseProviders)"], "associated_methods": ["SouthAfricanIdNumber.isValidEnZASsn(String)"], "external_dependencies": {"modules": ["SouthAfricanIdNumber", "BaseProviders", "BaseFaker", "Locale"], "class_members": [{"name": "southAfricanIdNumber", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid South African ID number and verifies that it is indeed invalid."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/IdNumber_validTest.java", "testclass_name": "IdNumber_validTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IdNumber_validTest", "description": "Unit tests for validating and invalidating IdNumber using Faker.", "class_members": {"variables": [{"name": "faker", "type": "Faker"}, {"name": "idNumber", "type": "IdNumber"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidIdNumber", "primary_tested": ["IdNumber.valid()"], "external_dependencies": {"modules": ["Faker", "IdNumber"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "idNumber", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid IdNumber."}, {"name": "testInvalidIdNumber", "primary_tested": ["IdNumber.invalid()"], "external_dependencies": {"modules": ["Faker", "IdNumber"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "idNumber", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid IdNumber."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Number_numberBetweenTest.java", "testclass_name": "Number_numberBetweenTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Number_numberBetweenTest", "description": "Unit tests for the numberBetween method in the BaseFaker class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testNumberBetween_MinEqualsMax", "primary_tested": ["BaseFaker.numberBetween(int,int)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the numberBetween method when the minimum value is equal to the maximum value."}, {"name": "testNumberBetween_MinLessThanMax", "primary_tested": ["BaseFaker.numberBetween(int,int)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the numberBetween method when the minimum value is less than the maximum value."}, {"name": "testNumberBetween_MinGreaterThanMax", "primary_tested": ["BaseFaker.numberBetween(int,int)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the numberBetween method when the minimum value is greater than the maximum value."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_futureTest.java", "testclass_name": "DateAndTime_futureTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_futureTest", "description": "Unit tests for the future date generation functionality of the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFutureDateWithinBounds", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the generated future date is within the specified bounds."}, {"name": "testFutureDateWithMinimumTime", "primary_tested": ["DateAndTime.future(int,int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the generated future date respects the minimum time constraint and is within the specified bounds."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_usernameTest.java", "testclass_name": "Internet_usernameTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import net.datafaker.service.FakerContext;"], "name": "Internet_usernameTest", "description": "Unit tests for the username generation functionality in the Internet class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUsername", "primary_tested": ["Internet.username()"], "associated_methods": ["BaseFaker.name()", "Name.firstName()", "Name.lastName()", "BaseFaker.getContext()", "FakerContext.getLocale()"], "external_dependencies": {"modules": ["BaseFaker", "Name", "FakerContext", "Internet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the username generation functionality with typical first and last names."}, {"name": "testUsernameWithSpecialCharacters", "primary_tested": ["Internet.username()"], "associated_methods": ["BaseFaker.name()", "Name.firstName()", "Name.lastName()", "BaseFaker.getContext()", "FakerContext.getLocale()"], "external_dependencies": {"modules": ["BaseFaker", "Name", "FakerContext", "Internet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the username generation functionality with first and last names containing special characters."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Text_textTest.java", "testclass_name": "Text_textTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.mockito.Mockito.*;"], "name": "Text_textTest", "description": "Unit tests for the Text class, focusing on different feature inclusion scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testText_AllFeaturesIncluded", "primary_tested": ["Text.text(int,int,boolean,boolean,boolean)"], "associated_methods": ["BaseProviders.number()", "BaseProviders.text()", "Number.numberBetween(int,int)", "Text.text(Object)"], "external_dependencies": {"modules": ["BaseProviders", "Number", "Text"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Text class with all features included."}, {"name": "testText_NoFeaturesIncluded", "primary_tested": ["Text.text(int,int,boolean,boolean,boolean)"], "associated_methods": ["BaseProviders.number()", "BaseProviders.text()", "Number.numberBetween(int,int)", "Text.text(Object)"], "external_dependencies": {"modules": ["BaseProviders", "Number", "Text"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Text class with no features included."}]}, {"file_path": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java", "testclass_name": "WordUtils_capitalizeTest", "dependencies": ["package net.datafaker.internal.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "WordUtils_capitalizeTest", "description": "Unit tests for the WordUtils.capitalize method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCapitalize_nullInput", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with a null input."}, {"name": "testCapitalize_emptyInput", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with an empty input."}, {"name": "testCapitalize_alreadyCapitalized", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with an already capitalized input."}, {"name": "testCapitalize_needsCapitalization", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with an input that needs capitalization."}]}, {"file_path": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java", "testclass_name": "SqlTransformer_generateStreamTest", "dependencies": ["package net.datafaker.transformations.sql;", "import net.datafaker.transformations.Schema;", "import net.datafaker.transformations.SimpleField;", "import org.junit.jupiter.api.Test;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SqlTransformer_generateStreamTest", "description": "Unit tests for the generateStream method of the SqlTransformer class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGenerateStreamWithEmptySchema", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer", "Stream"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generateStream method with an empty schema."}, {"name": "testGenerateStreamWithBatchMode", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer", "SimpleField", "Stream"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generateStream method with batch mode enabled."}, {"name": "testGenerateStreamWithoutBatchMode", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["Schema", "SqlTransformer", "SimpleField", "Stream"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generateStream method without batch mode."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java", "testclass_name": "FakeValuesService_primitiveToWrapperTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_primitiveToWrapperTest", "description": "Unit tests for the primitiveToWrapper method in the FakeValuesService class.", "class_members": {"variables": [{"name": "primitiveClass", "type": "Class<?>"}, {"name": "nonPrimitiveClass", "type": "Class<?>"}, {"name": "nullClass", "type": "Class<?>"}]}, "test_cases": [{"name": "testPrimitiveToWrapper", "primary_tested": ["FakeValuesService.primitiveToWrapper(Class<?>)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": [{"name": "primitiveClass", "type": "variable"}, {"name": "nonPrimitiveClass", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of a primitive class to its wrapper class and verifies that a non-primitive class remains unchanged."}, {"name": "testPrimitiveToWrapperWithNull", "primary_tested": ["FakeValuesService.primitiveToWrapper(Class<?>)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": [{"name": "nullClass", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of the primitiveToWrapper method when a null class is provided, expecting a null result."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java", "testclass_name": "SwedenIdNumber_isValidSwedishSsnTest", "dependencies": ["package net.datafaker.idnumbers;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SwedenIdNumber_isValidSwedishSsnTest", "description": "Unit tests for validating Swedish SSN (Social Security Number) using the isValidSwedishSsn method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testValidSwedishSsn", "primary_tested": ["SwedenIdNumber.isValidSwedishSsn(String)"], "external_dependencies": {"modules": ["SwedenIdNumber"]}, "category": "unit", "description": "Tests the validation of a valid Swedish SSN."}, {"name": "testInvalidSwedishSsnLength", "primary_tested": ["SwedenIdNumber.isValidSwedishSsn(String)"], "external_dependencies": {"modules": ["SwedenIdNumber"]}, "category": "unit", "description": "Tests the validation of a Swedish SSN with an invalid length."}, {"name": "testInvalidSwedishSsnDate", "primary_tested": ["SwedenIdNumber.isValidSwedishSsn(String)"], "external_dependencies": {"modules": ["SwedenIdNumber"]}, "category": "unit", "description": "Tests the validation of a Swedish SSN with an invalid date."}, {"name": "testInvalidSwedishSsnChecksum", "primary_tested": ["SwedenIdNumber.isValidSwedishSsn(String)"], "external_dependencies": {"modules": ["SwedenIdNumber"]}, "category": "unit", "description": "Tests the validation of a Swedish SSN with an invalid checksum."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "testclass_name": "FakeValues_equalsTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "FakeValues_equalsTest", "description": "Unit tests for the equals method in the FakeValues class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"]}, "category": "unit", "description": "Tests the equals method with the same instance of FakeValues."}, {"name": "testEquals_DifferentInstanceSameContext", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"]}, "category": "unit", "description": "Tests the equals method with different instances of FakeValues but with the same context."}, {"name": "testEquals_DifferentContext", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"]}, "category": "unit", "description": "Tests the equals method with different instances of FakeValues and different contexts."}, {"name": "testEquals_DifferentType", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues", "FakeValuesContext", "Locale"]}, "category": "unit", "description": "Tests the equals method with a different type (not an instance of FakeValues)."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java", "testclass_name": "Internet_macAddressTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Internet_macAddressTest", "description": "Unit tests for the macAddress method in the Internet class.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}, {"name": "internet", "type": "Internet"}]}, "fixtures": [], "test_cases": [{"name": "testMacAddressWithNullPrefix", "primary_tested": ["Internet.macAddress(String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "internet", "type": "variable"}]}, "category": "unit", "description": "Tests the macAddress method with a null prefix, ensuring the result is a valid MAC address."}, {"name": "testMacAddressWithEmptyPrefix", "primary_tested": ["Internet.macAddress(String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "internet", "type": "variable"}]}, "category": "unit", "description": "Tests the macAddress method with an empty prefix, ensuring the result is a valid MAC address."}, {"name": "testMacAddressWithValidPrefix", "primary_tested": ["Internet.macAddress(String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "internet", "type": "variable"}]}, "category": "unit", "description": "Tests the macAddress method with a valid prefix, ensuring the result is a valid MAC address starting with the given prefix."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java", "testclass_name": "DateAndTime_periodTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.time.Period;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DateAndTime_periodTest", "description": "Unit tests for the period functionality in the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeriodValidRange", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the period functionality with a valid range."}, {"name": "testPeriodInvalidRange", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the period functionality with an invalid range, expecting an IllegalArgumentException."}, {"name": "testPeriodEqualMinMax", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the period functionality with equal min and max values."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java", "testclass_name": "DateAndTime_betweenTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DateAndTime_betweenTest", "description": "Unit tests for the DateAndTime class's between method.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBetweenValidRange", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the between method with a valid date range."}, {"name": "testBetweenEqualDates", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the between method with equal dates."}, {"name": "testBetweenInvalidRange", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the between method with an invalid date range, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "testclass_name": "RandomService_equalsTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "RandomService_equalsTest", "description": "Unit tests for the equals method in the RandomService class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstancesWithSameRandom", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService", "Random"]}, "category": "unit", "description": "Tests the equals method with different instances having the same Random object."}, {"name": "testEquals_DifferentInstancesWithDifferentRandom", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService", "Random"]}, "category": "unit", "description": "Tests the equals method with different instances having different Random objects."}, {"name": "testEquals_NullComparison", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests the equals method with a null comparison."}, {"name": "testEquals_DifferentClassComparison", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests the equals method with a comparison to an object of a different class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java", "testclass_name": "Lorem_wordsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Lorem_wordsTest", "description": "Unit tests for the Lorem.words method with different input values.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testWordsWithPositiveNumber", "primary_tested": ["Lorem.words(int)"], "external_dependencies": {"modules": ["Lorem", "List", "String"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Lorem.words method with a positive number, ensuring the returned list has the correct size and contains non-blank words."}, {"name": "testWordsWithZero", "primary_tested": ["Lorem.words(int)"], "external_dependencies": {"modules": ["Lorem", "List"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Lorem.words method with zero, ensuring the returned list is empty."}, {"name": "testWordsWithNegativeNumber", "primary_tested": ["Lorem.words(int)"], "external_dependencies": {"modules": ["Lorem", "List"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Lorem.words method with a negative number, ensuring the returned list is empty."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java", "testclass_name": "DateAndTime_birthdayLocalDateTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.time.LocalDate;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_birthdayLocalDateTest", "description": "Unit tests for the birthdayLocalDate method in the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBirthdayLocalDateWithEqualAges", "primary_tested": ["DateAndTime.birthdayLocalDate(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthdayLocalDate method with equal minimum and maximum ages."}, {"name": "testBirthdayLocalDateWithDifferentAges", "primary_tested": ["DateAndTime.birthdayLocalDate(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthdayLocalDate method with different minimum and maximum ages."}, {"name": "testBirthdayLocalDateWithNegativeAges", "primary_tested": ["DateAndTime.birthdayLocalDate(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthdayLocalDate method with negative minimum and maximum ages."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_pastTest.java", "testclass_name": "DateAndTime_pastTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_pastTest", "description": "Unit tests for the DateAndTime class's past method with different time units.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPastWithDays", "primary_tested": ["DateAndTime.past(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the past method of DateAndTime with TimeUnit.DAYS."}, {"name": "testPastWithHours", "primary_tested": ["DateAndTime.past(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the past method of DateAndTime with TimeUnit.HOURS."}, {"name": "testPastWithMinutes", "primary_tested": ["DateAndTime.past(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the past method of DateAndTime with TimeUnit.MINUTES."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java", "testclass_name": "DateAndTime_birthdayTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import java.time.LocalDate;", "import java.time.LocalDateTime;", "import java.time.LocalTime;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_birthdayTest", "description": "Unit tests for the birthday generation functionality in the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBirthdayWithEqualAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "BaseFaker", "Timestamp", "LocalDateTime", "LocalDate", "LocalTime"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthday generation with equal minimum and maximum ages."}, {"name": "testBirthdayWithDifferentAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "BaseFaker", "Timestamp", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthday generation with different minimum and maximum ages."}, {"name": "testBirthdayWithNegativeAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "BaseFaker", "Timestamp", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthday generation with negative minimum and maximum ages."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_regexifyTest.java", "testclass_name": "FakeValuesService_regexifyTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.Locale;"], "name": "FakeValuesService_regexifyTest", "description": "Unit tests for the regexify method in FakeValuesService.", "class_members": {"variables": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRegexifyWithExistingRegex", "primary_tested": ["FakeValuesService.regexify(String,FakerContext)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the regexify method with an existing regex pattern."}, {"name": "testRegexifyWithNewRegex", "primary_tested": ["FakeValuesService.regexify(String,FakerContext)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the regexify method with a new regex pattern."}, {"name": "testRegexifyWithEmptyRegex", "primary_tested": ["FakeValuesService.regexify(String,FakerContext)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the regexify method with an empty regex pattern."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java", "testclass_name": "RandomService_nextLongTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.Random;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "RandomService_nextLongTest", "description": "Unit tests for the nextLong method in the RandomService class.", "class_members": {"variables": [{"name": "randomService", "type": "RandomService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextLongWithPositiveBound", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextLong method with a positive bound."}, {"name": "testNextLongWithNegativeBound", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextLong method with a negative bound, expecting an IllegalArgumentException."}, {"name": "testNextLongWithZeroBound", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextLong method with a zero bound, expecting an IllegalArgumentException."}, {"name": "testNextLongWithDifferentBounds", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the nextLong method with different bounds provided by a parameterized test."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_hexTest.java", "testclass_name": "RandomService_hexTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "RandomService_hexTest", "description": "Unit tests for the hex generation functionality of the RandomService.", "class_members": {"variables": [{"name": "randomService", "type": "RandomService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHexWithLengthZero", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex generation functionality with a length of zero."}, {"name": "testHexWithPositiveLengthUppercase", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex generation functionality with a positive length and uppercase."}, {"name": "testHexWithPositiveLengthLowercase", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex generation functionality with a positive length and lowercase."}, {"name": "testHexWithCustomRandom", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService", "Random"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hex generation functionality with a custom Random instance."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_addUrlTest.java", "testclass_name": "FakeValuesService_addUrlTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.net.MalformedURLException;", "import java.net.URL;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_addUrlTest", "description": "Unit tests for the addUrl method in FakeValuesService, covering valid and invalid scenarios.", "class_members": {"variables": [{"name": "fakeValuesService", "type": "FakeValuesService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddUrlValid", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a valid URL to the FakeValuesService."}, {"name": "testAddUrlNullLocale", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the addUrl method when the locale is null, expecting a NullPointerException."}, {"name": "testAddUrlNullUrl", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the addUrl method when the URL is null, expecting an IllegalArgumentException."}, {"name": "testAddUrlInvalidUrl", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the addUrl method when an invalid URL is provided, expecting a MalformedURLException."}]}]