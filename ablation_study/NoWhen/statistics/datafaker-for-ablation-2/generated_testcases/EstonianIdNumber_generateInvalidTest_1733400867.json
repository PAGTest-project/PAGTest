[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class EstonianIdNumber_generateInvalidTest {\n\n    private BaseProviders faker;\n    private EstonianIdNumber estonianIdNumber;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        estonianIdNumber = new EstonianIdNumber();\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().digits(3)).thenReturn(\"123\");\n\n        String expectedBasePart = \"3900101123\";\n        int expectedChecksum = estonianIdNumber.checksum(expectedBasePart);\n        String expectedInvalidId = expectedBasePart + (expectedChecksum + 1) % 10;\n\n        String result = estonianIdNumber.generateInvalid(faker);\n        assertEquals(expectedInvalidId, result);\n    }\n\n    @Test\n    public void testGenerateInvalidWithDifferentBirthday() {\n        LocalDate birthday = LocalDate.of(2000, 12, 31);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().digits(3)).thenReturn(\"456\");\n\n        String expectedBasePart = \"5001231456\";\n        int expectedChecksum = estonianIdNumber.checksum(expectedBasePart);\n        String expectedInvalidId = expectedBasePart + (expectedChecksum + 1) % 10;\n\n        String result = estonianIdNumber.generateInvalid(faker);\n        assertEquals(expectedInvalidId, result);\n    }\n}\n"}]