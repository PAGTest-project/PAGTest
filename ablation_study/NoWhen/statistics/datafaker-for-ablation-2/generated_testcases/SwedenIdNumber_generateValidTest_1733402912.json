[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.when;\n\npublic class SwedenIdNumber_generateValidTest {\n\n    private SwedenIdNumber swedenIdNumber;\n    private BaseProviders f;\n\n    @BeforeEach\n    public void setUp() {\n        swedenIdNumber = new SwedenIdNumber();\n        f = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateValid() {\n        IdNumber.IdNumberRequest request = new IdNumber.IdNumberRequest(0, 0, IdNumber.GenderRequest.MALE);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(f.numerify(\"###\")).thenReturn(\"123\");\n        when(f.options().option(SwedenIdNumber.PLUS_MINUS)).thenReturn(\"-\");\n        when(Utils.birthday(f, request)).thenReturn(birthday);\n        when(Utils.gender(f, request)).thenReturn(Gender.MALE);\n\n        PersonIdNumber result = swedenIdNumber.generateValid(f, request);\n\n        assertThat(result.getIdNumber()).startsWith(\"900101-123\");\n        assertThat(result.getBirthday()).isEqualTo(birthday);\n        assertThat(result.getGender()).isEqualTo(Gender.MALE);\n    }\n\n    @Test\n    void testGenerateValidWithPlus() {\n        IdNumber.IdNumberRequest request = new IdNumber.IdNumberRequest(0, 0, IdNumber.GenderRequest.FEMALE);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(f.numerify(\"###\")).thenReturn(\"123\");\n        when(f.options().option(SwedenIdNumber.PLUS_MINUS)).thenReturn(\"+\");\n        when(Utils.birthday(f, request)).thenReturn(birthday);\n        when(Utils.gender(f, request)).thenReturn(Gender.FEMALE);\n\n        PersonIdNumber result = swedenIdNumber.generateValid(f, request);\n\n        assertThat(result.getIdNumber()).startsWith(\"900101+123\");\n        assertThat(result.getBirthday()).isEqualTo(birthday);\n        assertThat(result.getGender()).isEqualTo(Gender.FEMALE);\n    }\n\n    @Test\n    void testGenerateValidChecksum() {\n        IdNumber.IdNumberRequest request = new IdNumber.IdNumberRequest(0, 0, IdNumber.GenderRequest.MALE);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(f.numerify(\"###\")).thenReturn(\"123\");\n        when(f.options().option(SwedenIdNumber.PLUS_MINUS)).thenReturn(\"-\");\n        when(Utils.birthday(f, request)).thenReturn(birthday);\n        when(Utils.gender(f, request)).thenReturn(Gender.MALE);\n\n        PersonIdNumber result = swedenIdNumber.generateValid(f, request);\n\n        String basePart = \"900101-123\";\n        int expectedChecksum = SwedenIdNumber.calculateChecksum(basePart);\n        assertThat(result.getIdNumber()).endsWith(String.valueOf(expectedChecksum));\n    }\n}\n"}]