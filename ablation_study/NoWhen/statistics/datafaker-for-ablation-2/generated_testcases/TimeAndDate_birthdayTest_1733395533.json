[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TimeAndDate_birthdayTest {\n    private TimeAndDate timeAndDate;\n\n    @BeforeEach\n    public void setUp() {\n        timeAndDate = new TimeAndDate(new BaseProviders() {});\n    }\n\n    @Test\n    void testBirthdayWithEqualAges() {\n        int minAge = 30;\n        int maxAge = 30;\n        LocalDate expectedBirthday = LocalDate.now().minusYears(maxAge);\n\n        LocalDate result = timeAndDate.birthday(minAge, maxAge);\n\n        assertEquals(expectedBirthday, result);\n    }\n\n    @Test\n    void testBirthdayWithDifferentAges() {\n        int minAge = 18;\n        int maxAge = 65;\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n\n        LocalDate result = timeAndDate.birthday(minAge, maxAge);\n\n        assertTrue(result.isAfter(from) || result.isEqual(from));\n        assertTrue(result.isBefore(to) || result.isEqual(to));\n    }\n\n    @Test\n    void testBirthdayWithNegativeAges() {\n        int minAge = -5;\n        int maxAge = -1;\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n\n        LocalDate result = timeAndDate.birthday(minAge, maxAge);\n\n        assertTrue(result.isAfter(from) || result.isEqual(from));\n        assertTrue(result.isBefore(to) || result.isEqual(to));\n    }\n}\n"}]