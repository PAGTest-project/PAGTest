[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class PolishIdNumber_getTest {\n\n    @Test\n    public void testGetWithGender() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthDate = LocalDate.of(1990, 1, 1);\n        PolishIdNumber.Gender requestedGender = PolishIdNumber.Gender.FEMALE;\n\n        PolishIdNumber polishIdNumber = new PolishIdNumber();\n\n        // Mocking the internal method calls\n        when(faker.number().randomDigit()).thenReturn(1, 2, 3, 4);\n        when(faker.random().nextInt(5)).thenReturn(2);\n\n        // When\n        String result = polishIdNumber.get(faker, birthDate, requestedGender);\n\n        // Then\n        assertEquals(\"19010112345\", result);\n    }\n}\n"}]