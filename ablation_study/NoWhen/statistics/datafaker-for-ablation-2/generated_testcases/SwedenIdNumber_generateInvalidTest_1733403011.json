[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class SwedenIdNumber_generateInvalidTest {\n    private SwedenIdNumber swedenIdNumber;\n    private BaseProviders baseProviders;\n\n    @BeforeEach\n    public void setUp() {\n        swedenIdNumber = new SwedenIdNumber();\n        baseProviders = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        // Mock the behavior of getPattern to return a specific pattern\n        when(baseProviders.options().option(SwedenIdNumber.VALID_PATTERNS)).thenReturn(\"######-####\");\n\n        // Generate an invalid SSN\n        String invalidSsn = swedenIdNumber.generateInvalid(baseProviders);\n\n        // Assert that the generated SSN is invalid\n        assertFalse(SwedenIdNumber.isValidSwedishSsn(invalidSsn));\n    }\n}\n"}]