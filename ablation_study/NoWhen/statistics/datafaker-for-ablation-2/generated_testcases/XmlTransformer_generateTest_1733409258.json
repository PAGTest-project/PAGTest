[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass XmlTransformer_generateTest {\n\n    @Test\n    void testGenerateFiniteSequence() {\n        // Given\n        XmlTransformer<String> transformer = new XmlTransformer<>(false);\n        Schema<String, ?> schema = mock(Schema.class);\n        Iterable<String> fakeSequence = mock(Iterable.class);\n        when(fakeSequence.iterator()).thenReturn(Arrays.asList(\"item1\", \"item2\").iterator());\n\n        // When\n        String result = transformer.generate(fakeSequence, schema);\n\n        // Then\n        assertNotNull(result);\n    }\n\n    @Test\n    void testGenerateInfiniteSequence() {\n        // Given\n        XmlTransformer<String> transformer = new XmlTransformer<>(false);\n        Schema<String, ?> schema = mock(Schema.class);\n        Iterable<String> fakeSequence = mock(Iterable.class);\n        when(fakeSequence.iterator()).thenReturn(new InfiniteIterator());\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, schema);\n        });\n    }\n\n    private static class InfiniteIterator implements Iterator<String> {\n        @Override\n        public boolean hasNext() {\n            return true;\n        }\n\n        @Override\n        public String next() {\n            return \"item\";\n        }\n    }\n}\n"}]