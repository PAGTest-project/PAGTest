[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.service.FakeValuesService;\nimport net.datafaker.service.RandomService;\nimport net.datafaker.service.Context;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class Nation_flagTest {\n    private Nation nation;\n\n    @BeforeEach\n    public void setUp() {\n        nation = new Nation(new BaseProviders() {\n            @Override\n            public FakeValuesService fakeValuesService() {\n                return new FakeValuesService();\n            }\n\n            @Override\n            public Context getContext() {\n                return new Context();\n            }\n\n            @Override\n            public RandomService random() {\n                return new RandomService();\n            }\n        });\n    }\n\n    @Test\n    void testFlag() {\n        String flag = nation.flag();\n        assertThat(flag).isNotBlank();\n    }\n\n    @Test\n    void testNationality() {\n        String nationality = nation.nationality();\n        assertThat(nationality).isNotBlank();\n    }\n\n    @Test\n    void testLanguage() {\n        String language = nation.language();\n        assertThat(language).isNotBlank();\n    }\n\n    @Test\n    void testIsoLanguage() {\n        String isoLanguage = nation.isoLanguage();\n        assertThat(isoLanguage).matches(\"[a-z]{2}\");\n    }\n\n    @Test\n    void testIsoCountry() {\n        String isoCountry = nation.isoCountry();\n        assertThat(isoCountry).matches(\"[A-Z]{2}\");\n    }\n}\n"}]