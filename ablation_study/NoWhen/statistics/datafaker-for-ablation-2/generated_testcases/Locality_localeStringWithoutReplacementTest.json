[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.Faker;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.Random;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Locality_localeStringWithoutReplacementTest {\n    private Locality locality;\n    private Faker faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new Faker();\n        locality = new Locality(faker.base());\n    }\n\n    @Test\n    void testLocaleStringWithoutReplacement() {\n        Random random = new Random();\n        List<String> allLocales = locality.allSupportedLocales();\n        int initialSize = allLocales.size();\n\n        for (int i = 0; i < initialSize; i++) {\n            String locale = locality.localeStringWithoutReplacement(random);\n            assertTrue(allLocales.contains(locale));\n        }\n\n        // After all locales have been returned once, the list should be reset\n        String localeAfterReset = locality.localeStringWithoutReplacement(random);\n        assertTrue(allLocales.contains(localeAfterReset));\n    }\n\n    @Test\n    void testLocaleStringWithoutReplacementWithSameSeed() {\n        Random random1 = new Random(12345L);\n        Random random2 = new Random(12345L);\n\n        String locale1 = locality.localeStringWithoutReplacement(random1);\n        String locale2 = locality.localeStringWithoutReplacement(random2);\n\n        assertEquals(locale1, locale2);\n    }\n}\n"}]