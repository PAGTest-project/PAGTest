[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static net.datafaker.idnumbers.SouthAfricanIdNumber.isValidEnZASsn;\nimport static net.datafaker.idnumbers.SouthAfricanIdNumber.sequentialNumber;\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class SouthAfricanIdNumber_generateValidTest {\n\n    private SouthAfricanIdNumber idNumberGenerator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        idNumberGenerator = new SouthAfricanIdNumber();\n        faker = new BaseProviders() {\n            @Override\n            public Gender gender() {\n                return FEMALE; // Default to FEMALE for simplicity\n            }\n\n            @Override\n            public String options() {\n                return \"08\"; // Default to \"08\" for simplicity\n            }\n\n            @Override\n            public int number() {\n                return 1234; // Default to 1234 for simplicity\n            }\n        };\n    }\n\n    @Test\n    public void testGenerateValid_Female() {\n        IdNumberRequest request = new IdNumberRequest() {\n            @Override\n            public Gender gender() {\n                return FEMALE;\n            }\n\n            @Override\n            public LocalDate birthday() {\n                return LocalDate.parse(\"1990-01-01\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")); // Example date for simplicity\n            }\n        };\n\n        PersonIdNumber idNumber = idNumberGenerator.generateValid(faker, request);\n        assertTrue(isValidEnZASsn(idNumber.getIdNumber()));\n    }\n\n    @Test\n    public void testGenerateValid_Male() {\n        IdNumberRequest request = new IdNumberRequest() {\n            @Override\n            public Gender gender() {\n                return MALE;\n            }\n\n            @Override\n            public LocalDate birthday() {\n                return LocalDate.parse(\"1990-01-01\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")); // Example date for simplicity\n            }\n        };\n\n        PersonIdNumber idNumber = idNumberGenerator.generateValid(faker, request);\n        assertTrue(isValidEnZASsn(idNumber.getIdNumber()));\n    }\n\n    @Test\n    public void testSequentialNumber_Female() {\n        String seqNumber = sequentialNumber(faker, FEMALE);\n        int number = Integer.parseInt(seqNumber);\n        assertTrue(number >= 0 && number < 5000);\n    }\n\n    @Test\n    public void testSequentialNumber_Male() {\n        String seqNumber = sequentialNumber(faker, MALE);\n        int number = Integer.parseInt(seqNumber);\n        assertTrue(number >= 5000 && number < 10000);\n    }\n}\n"}]