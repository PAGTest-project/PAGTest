[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class UkrainianIdNumber_generateInvalidTest {\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.numerify(\"####\")).thenReturn(\"1234\");\n\n        UkrainianIdNumber ukrainianIdNumber = new UkrainianIdNumber();\n\n        // When\n        String result = ukrainianIdNumber.generateInvalid(faker);\n\n        // Then\n        String expectedDob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String expectedNumbers = \"1234\";\n        int expectedMultiplied = ukrainianIdNumber.multiply(expectedDob + expectedNumbers, UkrainianIdNumber.CHECKSUM_WEIGHTS);\n        int expectedChecksum = (expectedMultiplied + 1) % 10;\n        String expectedResult = expectedDob + \"-\" + expectedNumbers + expectedChecksum;\n\n        assertEquals(expectedResult, result);\n    }\n}\n"}]