[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers.pt.br;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Locale;\nimport java.net.URL;\nimport java.nio.file.Path;\n\npublic class IdNumberGeneratorPtBrUtil_isCNPJValidTest {\n\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new BaseProviders() {\n            @Override\n            public String expression(String expression) {\n                return null;\n            }\n\n            @Override\n            public void addUrl(Locale locale, URL url) {\n                // Implementation not needed for this test\n            }\n\n            @Override\n            public void addPath(Locale locale, Path path) {\n                // Implementation not needed for this test\n            }\n        };\n    }\n\n    @Test\n    public void testIsCNPJValid_ValidCNPJ() {\n        String validCNPJ = IdNumberGeneratorPtBrUtil.cnpj(faker, false, true, true);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(validCNPJ));\n    }\n\n    @Test\n    public void testIsCNPJValid_InvalidCNPJ() {\n        String invalidCNPJ = IdNumberGeneratorPtBrUtil.cnpj(faker, false, false, true);\n        assertFalse(IdNumberGeneratorPtBrUtil.isCNPJValid(invalidCNPJ));\n    }\n\n    @Test\n    public void testIsCNPJValid_UnmaskedCNPJ() {\n        String cnpj = \"12.345.678/0001-95\";\n        String unmaskedCNPJ = DocumentFormatterUtil.unmask(cnpj);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(unmaskedCNPJ));\n    }\n\n    @Test\n    public void testIsCNPJValid_InvalidFormat() {\n        String invalidFormatCNPJ = \"12345678901234\"; // Missing one digit\n        assertFalse(IdNumberGeneratorPtBrUtil.isCNPJValid(invalidFormatCNPJ));\n    }\n}\n"}]