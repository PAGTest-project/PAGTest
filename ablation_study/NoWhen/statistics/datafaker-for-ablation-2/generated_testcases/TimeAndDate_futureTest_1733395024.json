[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.Instant;\nimport java.util.concurrent.TimeUnit;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class TimeAndDate_futureTest {\n    private TimeAndDate timeAndDate;\n\n    @BeforeEach\n    public void setUp() {\n        timeAndDate = new TimeAndDate(new BaseProviders());\n    }\n\n    @Test\n    public void testFutureDateWithinRange() {\n        long atMost = 1000; // 1 second\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(atMost));\n    }\n\n    @Test\n    public void testFutureDateWithLargeRange() {\n        long atMost = TimeUnit.DAYS.toMillis(365); // 1 year\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(atMost));\n    }\n\n    @Test\n    public void testFutureDateWithMinimalRange() {\n        long atMost = 1; // 1 millisecond\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(atMost));\n    }\n}\n"}]