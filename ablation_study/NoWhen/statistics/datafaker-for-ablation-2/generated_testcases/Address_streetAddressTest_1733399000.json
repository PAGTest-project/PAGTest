[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Address_streetAddressTest {\n\n    @Test\n    public void testStreetAddressWithoutSecondary() {\n        // Given\n        BaseFaker faker = mock(BaseFaker.class);\n        Address address = new Address(faker);\n        when(faker.fakeValuesService().resolve(\"address.street_address\", address, faker.context())).thenReturn(\"123 Main St\");\n\n        // When\n        String result = address.streetAddress(false);\n\n        // Then\n        assertEquals(\"123 Main St\", result);\n    }\n\n    @Test\n    public void testStreetAddressWithSecondary() {\n        // Given\n        BaseFaker faker = mock(BaseFaker.class);\n        Address address = new Address(faker);\n        when(faker.fakeValuesService().resolve(\"address.street_address\", address, faker.context())).thenReturn(\"123 Main St\");\n        when(address.secondaryAddress()).thenReturn(\"Apt 4B\");\n\n        // When\n        String result = address.streetAddress(true);\n\n        // Then\n        assertEquals(\"123 Main St Apt 4B\", result);\n    }\n}\n"}]