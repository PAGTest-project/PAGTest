[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.when;\n\npublic class SingaporeIdNumber_generateValidTest {\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        IdNumberRequest request = new IdNumberRequest(0, 100, Gender.ANY);\n        LocalDate birthDate = LocalDate.of(1990, 1, 1);\n        boolean citizen = true;\n        Gender gender = Gender.MALE;\n\n        when(faker.bool().bool()).thenReturn(citizen);\n        when(Utils.birthday(faker, request)).thenReturn(birthDate);\n        when(Utils.gender(faker, request)).thenReturn(gender);\n\n        // When\n        PersonIdNumber result = new SingaporeIdNumber().generateValid(faker, request);\n\n        // Then\n        assertNotNull(result);\n    }\n}\n"}]