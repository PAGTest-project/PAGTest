[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport net.datafaker.sequence.FakeSequence;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\n\npublic class JsonTransformer_generateTest {\n\n    @Test\n    public void testGenerateFiniteSequence() {\n        // Given\n        JsonTransformer<String> transformer = JsonTransformer.builder().build();\n        Schema<String, ?> schema = mock(Schema.class);\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(false);\n        when(fakeSequence.iterator()).thenReturn(Arrays.asList(\"item1\", \"item2\").iterator());\n\n        // When\n        String result = transformer.generate(fakeSequence, schema);\n\n        // Then\n        assertEquals(\"[\\n\" +\n                \"{\\\"item1\\\"},\\n\" +\n                \"{\\\"item2\\\"}\\n\" +\n                \"]\", result);\n    }\n\n    @Test\n    public void testGenerateInfiniteSequence() {\n        // Given\n        JsonTransformer<String> transformer = JsonTransformer.builder().build();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        // When & Then\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, null);\n        });\n        assertTrue(exception.getMessage().contains(\"The sequence should be finite\"));\n    }\n\n    @Test\n    public void testGenerateSingleItemSequence() {\n        // Given\n        JsonTransformer<String> transformer = JsonTransformer.builder().build();\n        Schema<String, ?> schema = mock(Schema.class);\n        Iterable<String> input = Arrays.asList(\"item1\");\n\n        // When\n        String result = transformer.generate(input, schema);\n\n        // Then\n        assertEquals(\"{\\\"item1\\\"}\", result);\n    }\n}\n"}]