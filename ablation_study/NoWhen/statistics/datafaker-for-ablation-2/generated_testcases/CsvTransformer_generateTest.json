[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport net.datafaker.sequence.FakeSequence;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\n\nclass CsvTransformer_generateTest {\n\n    @Test\n    void testGenerateWithFiniteSequence() {\n        // Given\n        CsvTransformer<String> transformer = CsvTransformer.<String>builder().build();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(false);\n        when(fakeSequence.iterator()).thenReturn(Arrays.asList(\"value1\", \"value2\").iterator());\n\n        Schema<String, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[]{});\n\n        // When\n        String result = transformer.generate(fakeSequence, schema);\n\n        // Then\n        assertNotNull(result);\n    }\n\n    @Test\n    void testGenerateWithInfiniteSequence() {\n        // Given\n        CsvTransformer<String> transformer = CsvTransformer.<String>builder().build();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        Schema<String, ?> schema = mock(Schema.class);\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, schema);\n        });\n    }\n\n    @Test\n    void testGenerateWithEmptySequence() {\n        // Given\n        CsvTransformer<String> transformer = CsvTransformer.<String>builder().build();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(false);\n        when(fakeSequence.iterator()).thenReturn(Arrays.asList().iterator());\n\n        Schema<String, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[]{});\n\n        // When\n        String result = transformer.generate(fakeSequence, schema);\n\n        // Then\n        assertEquals(\"\", result);\n    }\n}\n"}]