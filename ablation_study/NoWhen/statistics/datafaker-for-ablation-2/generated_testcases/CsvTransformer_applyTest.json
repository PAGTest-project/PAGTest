[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class CsvTransformer_applyTest {\n\n    @Test\n    public void testApply_SingleField() {\n        // Given\n        CsvTransformer<String> transformer = new CsvTransformer<>(\";\", '\"', false);\n        Schema<String, ?> schema = mock(Schema.class);\n        Field<String, ?>[] fields = new Field[1];\n        SimpleField<String, ?> field = mock(SimpleField.class);\n        when(field.transform(any())).thenReturn(\"value\");\n        fields[0] = field;\n        when(schema.getFields()).thenReturn(fields);\n\n        // When\n        CharSequence result = transformer.apply(\"input\", schema);\n\n        // Then\n        assertEquals(\"value\", result.toString());\n    }\n\n    @Test\n    public void testApply_MultipleFields() {\n        // Given\n        CsvTransformer<String> transformer = new CsvTransformer<>(\";\", '\"', false);\n        Schema<String, ?> schema = mock(Schema.class);\n        Field<String, ?>[] fields = new Field[2];\n        SimpleField<String, ?> field1 = mock(SimpleField.class);\n        SimpleField<String, ?> field2 = mock(SimpleField.class);\n        when(field1.transform(any())).thenReturn(\"value1\");\n        when(field2.transform(any())).thenReturn(\"value2\");\n        fields[0] = field1;\n        fields[1] = field2;\n        when(schema.getFields()).thenReturn(fields);\n\n        // When\n        CharSequence result = transformer.apply(\"input\", schema);\n\n        // Then\n        assertEquals(\"value1;value2\", result.toString());\n    }\n}\n"}]