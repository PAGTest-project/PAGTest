[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.service.RandomService;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.time.LocalDate;\n\npublic class ChineseIdNumber_generateValidTest {\n    private ChineseIdNumber chineseIdNumber;\n    private BaseProviders faker;\n\n    @Before\n    public void setUp() {\n        chineseIdNumber = new ChineseIdNumber();\n        faker = new BaseFaker();\n    }\n\n    @Test\n    public void testGenerateValidIdNumber() {\n        IdNumberRequest request = new IdNumberRequest();\n        PersonIdNumber idNumber = chineseIdNumber.generateValid(faker, request);\n        assertNotNull(idNumber);\n        assertNotNull(idNumber.getIdNumber());\n        assertNotNull(idNumber.getBirthday());\n        assertNotNull(idNumber.getGender());\n    }\n\n    @Test\n    public void testIdNumberChecksum() {\n        char[] res = \"11010519841107\".toCharArray();\n        res[12] = '3';\n        res[13] = '3';\n        res[14] = '8';\n        res[15] = '0';\n        String expectedIdNumber = \"110105198411073380\";\n        assertEquals(expectedIdNumber, ChineseIdNumber.idNumber(res));\n    }\n\n    @Test\n    public void testFillBirthday() {\n        char[] res = new char[18];\n        LocalDate birthday = LocalDate.of(1984, 11, 7);\n        chineseIdNumber.fillBirthday(res, 6, birthday);\n        String expectedBirthdayPart = \"19841107\";\n        assertEquals(expectedBirthdayPart, new String(res, 6, 8));\n    }\n\n    @Test\n    public void testGenerateInvalidIdNumber() {\n        String invalidIdNumber = chineseIdNumber.generateInvalid(faker);\n        assertNotNull(invalidIdNumber);\n        assertTrue(invalidIdNumber.endsWith(\"42\"));\n    }\n}\n"}]