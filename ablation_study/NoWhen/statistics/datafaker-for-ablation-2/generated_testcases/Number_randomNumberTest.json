[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Number_randomNumberTest {\n\n    @Test\n    public void testRandomNumber_numberOfDigitsZero() {\n        BaseFaker faker = mock(BaseFaker.class);\n        RandomService randomService = mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.nextInt(1)).thenReturn(0);\n\n        Number number = new Number(faker);\n        long result = number.randomNumber(0, false);\n\n        assertEquals(0, result);\n    }\n\n    @Test\n    public void testRandomNumber_strictTrue() {\n        BaseFaker faker = mock(BaseFaker.class);\n        RandomService randomService = mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.nextLong(anyLong())).thenReturn(5L);\n\n        Number number = new Number(faker);\n        long result = number.randomNumber(3, true);\n\n        assertTrue(result >= 100 && result < 1000);\n    }\n\n    @Test\n    public void testRandomNumber_strictFalse() {\n        BaseFaker faker = mock(BaseFaker.class);\n        RandomService randomService = mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.nextLong(anyLong())).thenReturn(500L);\n\n        Number number = new Number(faker);\n        long result = number.randomNumber(3, false);\n\n        assertTrue(result >= 0 && result < 1000);\n    }\n}\n"}]