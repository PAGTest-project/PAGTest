[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers.pt.br;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil.isCPFValid;\n\npublic class IdNumberGeneratorPtBrUtil_cpfTest {\n\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new BaseProviders() {\n            @Override\n            public RandomService random() {\n                return new RandomService(new java.util.Random()); // Mock implementation\n            }\n        };\n    }\n\n    @Test\n    public void testCpfValidFormatted() {\n        String cpf = IdNumberGeneratorPtBrUtil.cpf(faker, true, true);\n        assertTrue(isCPFValid(cpf));\n        assertTrue(cpf.matches(\"\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}-\\\\d{2}\"));\n    }\n\n    @Test\n    public void testCpfValidUnformatted() {\n        String cpf = IdNumberGeneratorPtBrUtil.cpf(faker, false, true);\n        assertTrue(isCPFValid(cpf));\n        assertTrue(cpf.matches(\"\\\\d{11}\"));\n    }\n\n    @Test\n    public void testCpfInvalidFormatted() {\n        String cpf = IdNumberGeneratorPtBrUtil.cpf(faker, true, false);\n        assertFalse(isCPFValid(cpf));\n        assertTrue(cpf.matches(\"\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}-\\\\d{2}\"));\n    }\n\n    @Test\n    public void testCpfInvalidUnformatted() {\n        String cpf = IdNumberGeneratorPtBrUtil.cpf(faker, false, false);\n        assertFalse(isCPFValid(cpf));\n        assertTrue(cpf.matches(\"\\\\d{11}\"));\n    }\n}\n"}]