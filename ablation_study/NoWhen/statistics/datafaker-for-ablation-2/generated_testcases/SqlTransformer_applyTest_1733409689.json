[{"strategy": "generate", "code": "\npackage net.datafaker.transformations.sql;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass SqlTransformer_applyTest {\n\n    @Test\n    void testApply_NoFields() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, false, -1, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[0]);\n\n        CharSequence result = transformer.apply(new Object(), schema, 0);\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    void testApply_NonBatchMode() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, false, -1, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ? extends CharSequence> field = mock(Field.class);\n        when(field.getName()).thenReturn(\"field1\");\n        when(schema.getFields()).thenReturn(new Field[]{field});\n\n        CharSequence result = transformer.apply(new Object(), schema, 0);\n        assertEquals(\"INSERT INTO MyTable (field1) VALUES ()\", result);\n    }\n\n    @Test\n    void testApply_BatchMode_FirstRow() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, true, 2, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ? extends CharSequence> field = mock(Field.class);\n        when(field.getName()).thenReturn(\"field1\");\n        when(schema.getFields()).thenReturn(new Field[]{field});\n\n        CharSequence result = transformer.apply(new Object(), schema, 0);\n        assertEquals(\"INSERT INTO MyTable (field1) VALUES ()\", result);\n    }\n\n    @Test\n    void testApply_BatchMode_OtherRow() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, true, 2, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ? extends CharSequence> field = mock(Field.class);\n        when(field.getName()).thenReturn(\"field1\");\n        when(schema.getFields()).thenReturn(new Field[]{field});\n\n        CharSequence result = transformer.apply(new Object(), schema, 1);\n        assertEquals(\"INSERT INTO MyTable (field1) VALUES ()\", result);\n    }\n}\n"}]