[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class Aviation_aircraftTest {\n\n    @Test\n    public void testAircraft() {\n        BaseProviders faker = mock(BaseProviders.class);\n        Number number = mock(Number.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        when(faker.number()).thenReturn(number);\n        when(faker.fakeValuesService()).thenReturn(fakeValuesService);\n\n        Aviation aviation = new Aviation(faker);\n\n        // Mock the numberBetween method to return each index from 0 to 5\n        for (int i = 0; i < 6; i++) {\n            when(number.numberBetween(0, 6)).thenReturn(i);\n            when(fakeValuesService.resolve(\"aviation.aircraft.airplane\", aviation, null)).thenReturn(\"aviation.aircraft.airplane\");\n            when(fakeValuesService.resolve(\"aviation.aircraft.warplane\", aviation, null)).thenReturn(\"aviation.aircraft.warplane\");\n            when(fakeValuesService.resolve(\"aviation.aircraft.army_helicopter\", aviation, null)).thenReturn(\"aviation.aircraft.army_helicopter\");\n            when(fakeValuesService.resolve(\"aviation.aircraft.civil_helicopter\", aviation, null)).thenReturn(\"aviation.aircraft.civil_helicopter\");\n            when(fakeValuesService.resolve(\"aviation.aircraft.general\", aviation, null)).thenReturn(\"aviation.aircraft.general\");\n            when(fakeValuesService.resolve(\"aviation.aircraft.cargo\", aviation, null)).thenReturn(\"aviation.aircraft.cargo\");\n\n            String result = aviation.aircraft();\n            assertTrue(result.startsWith(\"aviation.aircraft.\"));\n        }\n    }\n}\n"}]