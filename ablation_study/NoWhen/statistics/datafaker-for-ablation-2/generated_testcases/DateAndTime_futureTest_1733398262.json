[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Timestamp;\nimport java.util.concurrent.TimeUnit;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class DateAndTime_futureTest {\n    private DateAndTime dateAndTime;\n\n    @BeforeEach\n    public void setUp() {\n        dateAndTime = new DateAndTime(new BaseProviders());\n    }\n\n    @Test\n    void testFutureDateWithinBounds() {\n        int atMost = 100;\n        TimeUnit unit = TimeUnit.SECONDS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n\n        long referenceMillis = referenceDate.getTime();\n        long futureMillis = futureDate.getTime();\n        long upperBoundMillis = referenceMillis + unit.toMillis(atMost);\n\n        assertTrue(futureMillis > referenceMillis);\n        assertTrue(futureMillis < upperBoundMillis);\n    }\n\n    @Test\n    void testFutureDateWithMinimumTime() {\n        int atMost = 100;\n        int minimum = 50;\n        TimeUnit unit = TimeUnit.SECONDS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n\n        Timestamp futureDate = dateAndTime.future(atMost, minimum, unit);\n\n        long referenceMillis = referenceDate.getTime();\n        long futureMillis = futureDate.getTime();\n        long minimumMillis = referenceMillis + unit.toMillis(minimum);\n        long upperBoundMillis = referenceMillis + unit.toMillis(atMost);\n\n        assertTrue(futureMillis > minimumMillis);\n        assertTrue(futureMillis < upperBoundMillis);\n    }\n}\n"}]