[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class Aws_albTargetGroupARNTest {\n    private Aws aws;\n\n    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseProviders() {};\n        aws = new Aws(faker);\n    }\n\n    @Test\n    public void testAlbTargetGroupARN() {\n        String expectedPrefix = \"arn:aws:elasticloadbalancing:\";\n        String region = aws.region();\n        String accountId = aws.accountId();\n        String appName = aws.appName();\n        String randHex = aws.randHex();\n\n        String expectedARN = expectedPrefix + region + \":\" + accountId + \":targetgroup/\" + appName + \"/\" + randHex;\n        String actualARN = aws.albTargetGroupARN();\n\n        assertEquals(expectedARN, actualARN);\n    }\n\n    private static class Aws extends AbstractProvider<BaseProviders> {\n\n        private final Text.TextRuleConfig configForRoute53ZoneId;\n\n        protected Aws(BaseProviders faker) {\n            super(faker);\n            configForRoute53ZoneId = Text.TextSymbolsBuilder.builder()\n                                     .with(EN_UPPERCASE).len(21).build();\n        }\n\n        public String region() {\n            return resolve(\"aws.regions\");\n        }\n\n        public String service() {\n            return resolve(\"aws.services\");\n        }\n\n        public String accountId() {\n            return faker.numerify(\"0#########\");\n        }\n\n        public String acmARN() {\n            return \"arn:aws:acm:\" +\n                region() +\n                \":\" +\n                accountId() +\n                \":certificate/\" +\n                faker.internet().uuid();\n        }\n\n        public String albARN() {\n            return \"arn:aws:elasticloadbalancing:\" +\n                region() +\n                \":\" +\n                accountId() +\n                \":loadbalancer/app/\" +\n                appName() +\n                \"/\" +\n                randHex();\n        }\n\n        public String albTargetGroupARN() {\n            return \"arn:aws:elasticloadbalancing:\" +\n                region() +\n                \":\" +\n                accountId() +\n                \":targetgroup/\" +\n                appName() +\n                \"/\" +\n                randHex();\n        }\n\n        public String route53ZoneId() {\n            return faker.text().text(configForRoute53ZoneId);\n        }\n\n        public String securityGroupId() {\n            return \"sg-\" + randHex(17);\n        }\n\n        public String subnetId() {\n            return \"subnet-\" + randHex(17);\n        }\n\n        public String vpcId() {\n            return \"vpc-\" + randHex(17);\n        }\n\n        public String appName() {\n            return faker.app().name().toLowerCase().replaceAll(\"\\\\W+\", \"\");\n        }\n\n        public String randHex(int length) {\n            return faker.random().hex(length, false);\n        }\n\n        public String randHex() {\n            return randHex(16);\n        }\n    }\n}\n"}]