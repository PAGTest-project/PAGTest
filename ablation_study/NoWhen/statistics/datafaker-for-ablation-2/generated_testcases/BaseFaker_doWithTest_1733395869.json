[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Locale;\nimport java.util.concurrent.Callable;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class BaseFaker_doWithTest {\n\n    @Test\n    public void testDoWith_SuccessfulExecution() throws Exception {\n        // Given\n        BaseFaker baseFaker = new BaseFaker();\n        FakerContext context = mock(FakerContext.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        baseFaker.context = context;\n        baseFaker.fakeValuesService = fakeValuesService;\n\n        Locale newLocale = Locale.FRENCH;\n        Locale currentLocale = Locale.ENGLISH;\n        when(context.getLocale()).thenReturn(currentLocale);\n\n        Callable<String> callable = () -> \"success\";\n\n        // When\n        String result = baseFaker.doWith(callable, newLocale);\n\n        // Then\n        assertEquals(\"success\", result);\n        verify(context).setCurrentLocale(newLocale);\n        verify(fakeValuesService).updateFakeValuesInterfaceMap(anyList());\n        verify(context).setCurrentLocale(currentLocale);\n        verify(fakeValuesService, times(2)).updateFakeValuesInterfaceMap(anyList());\n    }\n\n    @Test\n    public void testDoWith_RuntimeException() {\n        // Given\n        BaseFaker baseFaker = new BaseFaker();\n        FakerContext context = mock(FakerContext.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        baseFaker.context = context;\n        baseFaker.fakeValuesService = fakeValuesService;\n\n        Locale newLocale = Locale.FRENCH;\n        Locale currentLocale = Locale.ENGLISH;\n        when(context.getLocale()).thenReturn(currentLocale);\n\n        Callable<String> callable = () -> {\n            throw new RuntimeException(\"test exception\");\n        };\n\n        // When\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            baseFaker.doWith(callable, newLocale);\n        });\n\n        // Then\n        assertEquals(\"test exception\", exception.getMessage());\n        verify(context).setCurrentLocale(newLocale);\n        verify(fakeValuesService).updateFakeValuesInterfaceMap(anyList());\n        verify(context).setCurrentLocale(currentLocale);\n        verify(fakeValuesService, times(2)).updateFakeValuesInterfaceMap(anyList());\n    }\n\n    @Test\n    public void testDoWith_CheckedException() {\n        // Given\n        BaseFaker baseFaker = new BaseFaker();\n        FakerContext context = mock(FakerContext.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        baseFaker.context = context;\n        baseFaker.fakeValuesService = fakeValuesService;\n\n        Locale newLocale = Locale.FRENCH;\n        Locale currentLocale = Locale.ENGLISH;\n        when(context.getLocale()).thenReturn(currentLocale);\n\n        Callable<String> callable = () -> {\n            throw new Exception(\"test exception\");\n        };\n\n        // When\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            baseFaker.doWith(callable, newLocale);\n        });\n\n        // Then\n        assertEquals(\"java.lang.Exception: test exception\", exception.getMessage());\n        verify(context).setCurrentLocale(newLocale);\n        verify(fakeValuesService).updateFakeValuesInterfaceMap(anyList());\n        verify(context).setCurrentLocale(currentLocale);\n        verify(fakeValuesService, times(2)).updateFakeValuesInterfaceMap(anyList());\n    }\n}\n"}]