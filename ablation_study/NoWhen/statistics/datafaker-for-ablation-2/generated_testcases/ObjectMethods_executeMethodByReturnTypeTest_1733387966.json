[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static net.datafaker.providers.base.ObjectMethods.executeMethodByReturnType;\nimport static net.datafaker.providers.base.ObjectMethods.getMethodByReturnType;\n\nclass ObjectMethods_executeMethodByReturnTypeTest {\n    private Person person;\n    private PersonName personName;\n\n    @BeforeEach\n    void setUp() {\n        person = new Person();\n        personName = new PersonName();\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeWithValidReturnType() {\n        Integer age = executeMethodByReturnType(person, \"Integer\");\n        assertNotNull(age);\n        assertEquals(person.age(), age);\n\n        String firstName = executeMethodByReturnType(personName, \"String\");\n        assertNotNull(firstName);\n        assertEquals(personName.firstName(), firstName);\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeWithInvalidReturnType() {\n        assertNull(executeMethodByReturnType(person, \"InvalidType\"));\n        assertNull(executeMethodByReturnType(personName, \"InvalidType\"));\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeWithException() {\n        assertThrows(RuntimeException.class, () -> executeMethodByReturnType(person, \"void\"));\n        assertThrows(RuntimeException.class, () -> executeMethodByReturnType(personName, \"void\"));\n    }\n\n    @Test\n    void testGetMethodByReturnTypeWithValidReturnType() {\n        assertNotNull(getMethodByReturnType(person, \"Integer\"));\n        assertNotNull(getMethodByReturnType(personName, \"String\"));\n    }\n\n    @Test\n    void testGetMethodByReturnTypeWithInvalidReturnType() {\n        assertNull(getMethodByReturnType(person, \"InvalidType\"));\n        assertNull(getMethodByReturnType(personName, \"InvalidType\"));\n    }\n}\n"}]