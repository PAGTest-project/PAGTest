[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class FakeValuesService_safeFetchTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        fakeValuesService = new FakeValuesService();\n    }\n\n    @Test\n    public void testSafeFetchWithNullObject() {\n        String result = fakeValuesService.safeFetch(\"nonExistentKey\", context, \"defaultIfNull\");\n        assertEquals(\"defaultIfNull\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithSingleStringList() {\n        List<String> values = List.of(\"singleValue\");\n        fakeValuesService.key2fetchedObject.get(context.getLocaleChain().get(0)).put(\"testKey\", values);\n        String result = fakeValuesService.safeFetch(\"testKey\", context, \"defaultIfNull\");\n        assertEquals(\"singleValue\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithMultipleStringList() {\n        List<String> values = List.of(\"value1\", \"value2\", \"value3\");\n        fakeValuesService.key2fetchedObject.get(context.getLocaleChain().get(0)).put(\"testKey\", values);\n        String result = fakeValuesService.safeFetch(\"testKey\", context, \"defaultIfNull\");\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testSafeFetchWithSlashDelimitedRegex() {\n        String regex = \"/[a-z]+/\";\n        fakeValuesService.key2fetchedObject.get(context.getLocaleChain().get(0)).put(\"testKey\", regex);\n        String result = fakeValuesService.safeFetch(\"testKey\", context, \"defaultIfNull\");\n        assertEquals(\"#{regexify '%s'}\".formatted(regex.substring(1, regex.length() - 1)), result);\n    }\n\n    @Test\n    public void testSafeFetchWithNonStringObject() {\n        Integer nonStringObject = 12345;\n        fakeValuesService.key2fetchedObject.get(context.getLocaleChain().get(0)).put(\"testKey\", nonStringObject);\n        String result = fakeValuesService.safeFetch(\"testKey\", context, \"defaultIfNull\");\n        assertEquals(\"12345\", result);\n    }\n}\n"}]