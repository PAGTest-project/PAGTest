[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\n\npublic class MacedonianIdNumber_generateInvalidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = new BaseProviders() {\n            @Override\n            public LocalDate birthday() {\n                return LocalDate.of(1990, 1, 1);\n            }\n\n            @Override\n            public Gender gender() {\n                return Gender.MALE;\n            }\n\n            @Override\n            public int numberBetween(int min, int max) {\n                return 0;\n            }\n        };\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        String invalidId = generator.generateInvalid(faker);\n        String basePart = generator.basePart(faker, faker.birthday(), faker.gender());\n        int checksum = generator.checksum(basePart);\n        assertThat(invalidId).isEqualTo(basePart + ((checksum + 1) % 10));\n    }\n\n    @Test\n    void testChecksum() {\n        assertThat(generator.checksum(\"010100650000\")).isEqualTo(6);\n        assertThat(generator.checksum(\"923456789012\")).isEqualTo(4);\n    }\n}\n"}]