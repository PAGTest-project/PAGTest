[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.when;\n\npublic class BulgarianIdNumber_generateValidTest {\n    private BulgarianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new BulgarianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateValid() {\n        LocalDate birthDate = LocalDate.of(1980, 3, 20);\n        Gender gender = Gender.MALE;\n        String basePart = \"800320\";\n        String expectedIdNumber = basePart + \"1\"; // Assuming checksum for \"800320\" is \"1\"\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthDate);\n        when(faker.gender().binaryTypes()).thenReturn(gender.toString());\n\n        IdNumberRequest request = new IdNumberRequest();\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        assertThat(result.getIdNumber()).isEqualTo(expectedIdNumber);\n        assertThat(result.getBirthday()).isEqualTo(birthDate);\n        assertThat(result.getGender()).isEqualTo(gender);\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        LocalDate birthDate = LocalDate.of(1980, 3, 20);\n        Gender gender = Gender.MALE;\n        String basePart = \"800320\";\n        String expectedInvalidIdNumber = basePart + \"2\"; // Assuming invalid checksum for \"800320\" is \"2\"\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthDate);\n        when(faker.gender().binaryTypes()).thenReturn(gender.toString());\n\n        String result = generator.generateInvalid(faker);\n\n        assertThat(result).isEqualTo(expectedInvalidIdNumber);\n    }\n\n    @Test\n    void testChecksum() {\n        assertThat(generator.checksum(\"803205603\")).isEqualTo(1);\n        assertThat(generator.checksum(\"800101000\")).isEqualTo(8);\n        assertThat(generator.checksum(\"750102001\")).isEqualTo(8);\n        assertThat(generator.checksum(\"820630876\")).isEqualTo(0);\n        assertThat(generator.checksum(\"560628204\")).isEqualTo(7);\n        assertThat(generator.checksum(\"752316926\")).isEqualTo(3);\n        assertThat(generator.checksum(\"755201000\")).isEqualTo(5);\n        assertThat(generator.checksum(\"754201103\")).isEqualTo(0);\n    }\n}\n"}]