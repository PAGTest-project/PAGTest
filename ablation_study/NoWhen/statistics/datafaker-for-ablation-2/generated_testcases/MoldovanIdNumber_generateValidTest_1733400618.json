[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.Faker;\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\n\npublic class MoldovanIdNumber_generateValidTest {\n    private MoldovanIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MoldovanIdNumber();\n        faker = new Faker();\n    }\n\n    @Test\n    void testGenerateValid() {\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        PersonIdNumber personIdNumber = generator.generateValid(faker, request);\n\n        // Validate the generated ID number\n        assertThat(personIdNumber.getIdNumber()).isNotBlank();\n        assertThat(personIdNumber.getBirthday()).isNotNull();\n        assertThat(personIdNumber.getGender()).isNotNull();\n\n        // Validate the checksum\n        String basePart = personIdNumber.getIdNumber().substring(0, personIdNumber.getIdNumber().length() - 1);\n        char expectedChecksum = generator.checksum(basePart);\n        assertThat(personIdNumber.getIdNumber().charAt(personIdNumber.getIdNumber().length() - 1)).isEqualTo(expectedChecksum);\n    }\n\n    @Test\n    void testBasePart() {\n        LocalDate birthday = LocalDate.of(1990, 5, 15);\n        String basePart = generator.basePart(faker, birthday);\n\n        // Validate the base part format\n        assertThat(basePart).hasSize(12);\n        assertThat(basePart.charAt(0)).isEqualTo('2');\n        assertThat(basePart.substring(1, 4)).isEqualTo(\"990\");\n    }\n\n    @Test\n    void testChecksum() {\n        assertThat(generator.checksum(\"293270095431\")).isEqualTo('9');\n        assertThat(generator.checksum(\"201403700084\")).isEqualTo('3');\n        assertThat(generator.checksum(\"099220624701\")).isEqualTo('8');\n        assertThat(generator.checksum(\"200504212980\")).isEqualTo('9');\n        assertThat(generator.checksum(\"200504401269\")).isEqualTo('3');\n        assertThat(generator.checksum(\"200201100696\")).isEqualTo('1');\n        assertThat(generator.checksum(\"200403612722\")).isEqualTo('9');\n    }\n}\n"}]