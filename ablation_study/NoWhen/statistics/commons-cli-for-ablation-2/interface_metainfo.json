[{"uris": "src/main/java/org/apache/commons/cli/Converter.java.Converter", "name": "Converter", "file_path": "src/main/java/org/apache/commons/cli/Converter.java", "superclasses": [], "methods": ["[T]apply(String)"], "method_uris": ["src/main/java/org/apache/commons/cli/Converter.java.Converter.[T]apply(String)"], "overrides": null, "attributes": null, "class_docstring": "\nThe definition of the functional interface to call when doing a conversion. Like {@code Function<String,T>} but can throw an Exception.\n\n@param <T> The return type for the function.\n@param <E> The kind of thrown exception or error.\n@since 1.7.0\n", "original_string": "@FunctionalInterface\npublic interface Converter<T, E extends Throwable> {\n    // See also Apache Commons Lang FailableFunction\n\n    /**\n     * The default converter. Does nothing.\n     */\n    Converter<?, RuntimeException> DEFAULT = s -> s;\n\n    /**\n     * Class name converter. Calls {@link Class#forName(String)}.\n     */\n    Converter<Class<?>, ClassNotFoundException> CLASS = Class::forName;\n\n    /**\n     * File name converter. Calls {@link File#File(String)}.\n     */\n    Converter<File, NullPointerException> FILE = File::new;\n\n    /**\n     * Path converter. Calls {@link Paths#get(java.net.URI)}.\n     */\n    Converter<Path, InvalidPathException> PATH = Paths::get;\n\n    /**\n     * Number converter. Converts to a Double if a decimal point ('.') is in the string or a Long otherwise.\n     */\n    Converter<Number, NumberFormatException> NUMBER = s -> s.indexOf('.') != -1 ? (Number) Double.valueOf(s) : (Number) Long.valueOf(s);\n\n    /**\n     * Converts a class name to an instance of the class. Uses the Class converter to find the class and then call the default constructor.\n     *\n     * @see #CLASS\n     */\n    Converter<Object, ReflectiveOperationException> OBJECT = s -> CLASS.apply(s).getConstructor().newInstance();\n\n    /**\n     * Creates a URL. Calls {@link URL#URL(String)}.\n     */\n    Converter<URL, MalformedURLException> URL = URL::new;\n\n    /**\n     * Converts to a date using the format string Form \"EEE MMM dd HH:mm:ss zzz yyyy\".\n     */\n    Converter<Date, java.text.ParseException> DATE = s -> new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\").parse(s);\n\n    /**\n     * Applies the conversion function to the String argument.\n     *\n     * @param string the String to convert\n     * @return the Object from the conversion.\n     * @throws E on error.\n     */\n    T apply(String string) throws E;\n}"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser", "name": "CommandLineParser", "file_path": "src/main/java/org/apache/commons/cli/CommandLineParser.java", "superclasses": [], "methods": ["[CommandLine]parse(Options,String[])", "[CommandLine]parse(Options,String[],boolean)"], "method_uris": ["src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser.[CommandLine]parse(Options,String[])", "src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser.[CommandLine]parse(Options,String[],boolean)"], "overrides": null, "attributes": null, "class_docstring": "\nA class that implements the {@code CommandLineParser} interface can parse a String array according to the\n{@link Options} specified and return a {@link CommandLine}.\n", "original_string": "public interface CommandLineParser {\n\n    /**\n     * Parses the arguments according to the specified options.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered while parsing the command line tokens.\n     */\n    CommandLine parse(Options options, String[] arguments) throws ParseException;\n\n    /**\n     * Parses the arguments according to the specified options and properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @return the list of atomic option and value tokens\n     *\n     * @throws ParseException if there are any problems encountered while parsing the command line tokens.\n     */\n    /*\n     * To maintain binary compatibility, this is commented out. It is still in the abstract Parser class, so most users will\n     * still reap the benefit. CommandLine parse(Options options, String[] arguments, Properties properties) throws\n     * ParseException;\n     */\n\n    /**\n     * Parses the arguments according to the specified options.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param stopAtNonOption if {@code true} an unrecognized argument stops the parsing and the remaining arguments\n     *        are added to the {@link CommandLine}s args list. If {@code false} an unrecognized argument triggers a\n     *        ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered while parsing the command line tokens.\n     */\n    CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;\n\n    /**\n     * Parses the arguments according to the specified options and properties.\n     *\n     * @param options the specified Options\n     * @param arguments the command line arguments\n     * @param properties command line option name-value pairs\n     * @param stopAtNonOption if {@code true} an unrecognized argument stops the parsing and the remaining arguments\n     *        are added to the {@link CommandLine}s args list. If {@code false} an unrecognized argument triggers a\n     *        ParseException.\n     *\n     * @return the list of atomic option and value tokens\n     * @throws ParseException if there are any problems encountered while parsing the command line tokens.\n     */\n    /*\n     * To maintain binary compatibility, this is commented out. It is still in the abstract Parser class, so most users will\n     * still reap the benefit. CommandLine parse(Options options, String[] arguments, Properties properties, boolean\n     * stopAtNonOption) throws ParseException;\n     */\n}"}]