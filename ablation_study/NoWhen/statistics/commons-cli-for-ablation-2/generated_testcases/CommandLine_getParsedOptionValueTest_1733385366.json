[{"strategy": "generate", "code": "\npackage org.apache.commons.cli;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.function.Supplier;\n\npublic class CommandLine_getParsedOptionValueTest {\n    private CommandLine commandLine;\n    private Options options;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        options = new Options();\n        options.addOption(\"a\", true, \"Option a with argument\");\n        options.addOption(\"b\", false, \"Option b without argument\");\n\n        final String[] args = {\"-a\", \"valueA\", \"-b\"};\n        final CommandLineParser parser = new DefaultParser();\n        commandLine = parser.parse(options, args);\n    }\n\n    @Test\n    public void testGetParsedOptionValueWithValidOption() throws ParseException {\n        Option optionA = options.getOption(\"a\");\n        Supplier<String> defaultValue = () -> \"default\";\n\n        String result = commandLine.getParsedOptionValue(optionA, defaultValue);\n        assertEquals(\"valueA\", result);\n    }\n\n    @Test\n    public void testGetParsedOptionValueWithNullOption() throws ParseException {\n        Supplier<String> defaultValue = () -> \"default\";\n\n        String result = commandLine.getParsedOptionValue(null, defaultValue);\n        assertEquals(\"default\", result);\n    }\n\n    @Test\n    public void testGetParsedOptionValueWithInvalidOption() throws ParseException {\n        Option optionC = new Option(\"c\", true, \"Option c with argument\");\n        Supplier<String> defaultValue = () -> \"default\";\n\n        String result = commandLine.getParsedOptionValue(optionC, defaultValue);\n        assertEquals(\"default\", result);\n    }\n\n    @Test\n    public void testGetParsedOptionValueWithConverterException() {\n        Option optionA = options.getOption(\"a\");\n        optionA.setConverter(s -> { throw new RuntimeException(\"Converter error\"); });\n        Supplier<String> defaultValue = () -> \"default\";\n\n        assertThrows(ParseException.class, () -> {\n            commandLine.getParsedOptionValue(optionA, defaultValue);\n        });\n    }\n}\n"}]