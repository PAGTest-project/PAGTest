{"file_path": "src/test/java/net/hydromatic/morel/FromBuilderTest.java", "testclass_name": "FromBuilderTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.ast.Ast;", "import net.hydromatic.morel.ast.Core;", "import net.hydromatic.morel.ast.FromBuilder;", "import net.hydromatic.morel.compile.Environments;", "import net.hydromatic.morel.type.Binding;", "import net.hydromatic.morel.type.PrimitiveType;", "import net.hydromatic.morel.type.Type;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.util.PairList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableSet;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.Function;", "import static net.hydromatic.morel.ast.CoreBuilder.core;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.hasToString;"], "name": "FromBuilderTest", "description": "Unit tests for the FromBuilder class, which constructs and simplifies Core.From expressions.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "Fixture", "description": "Internal helper class providing setup for test cases."}]}, "fixtures": [], "test_cases": [{"name": "testBasic", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.build()"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the basic functionality of scanning and building a FromBuilder expression."}, {"name": "testWhereOrder", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.order(Iterable<Core.OrderItem>)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding where and order clauses to a FromBuilder expression."}, {"name": "testTrivialYield", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding a yield clause to a FromBuilder expression."}, {"name": "testTrivialYield2", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding multiple scans and a yield clause to a FromBuilder expression."}, {"name": "testTrivialYield3", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding a yield clause before a scan in a FromBuilder expression."}, {"name": "testNested", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions and adding a where clause."}, {"name": "testNested3", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions and adding a where clause, including simplification."}, {"name": "testNested4", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions and adding a where clause, including simplification with tuple types."}, {"name": "testNestedSameName", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions with the same variable name and adding a where clause."}, {"name": "testNested0", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.build()"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting an empty FromBuilder expression."}, {"name": "testNested2", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions with record patterns and adding a where clause."}, {"name": "testNestedFromTuple", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions with tuple patterns and adding a where clause."}]}