{"file_path": "src/test/java/net/hydromatic/morel/compile/ExtentTest.java", "testclass_name": "ExtentTest", "dependencies": ["package net.hydromatic.morel.compile;", "import net.hydromatic.morel.ast.Core;", "import net.hydromatic.morel.ast.FromBuilder;", "import net.hydromatic.morel.type.ListType;", "import net.hydromatic.morel.type.PrimitiveType;", "import net.hydromatic.morel.type.RecordLikeType;", "import net.hydromatic.morel.type.RecordType;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.util.ImmutablePairList;", "import net.hydromatic.morel.util.PairList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableSet;", "import com.google.common.collect.ImmutableSortedMap;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.List;", "import java.util.function.BiConsumer;", "import java.util.function.Consumer;", "import static net.hydromatic.morel.ast.CoreBuilder.core;", "import static org.apache.calcite.linq4j.tree.Expressions.list;", "import static org.hamcrest.CoreMatchers.instanceOf;", "import static org.hamcrest.CoreMatchers.notNullValue;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.anEmptyMap;", "import static org.hamcrest.Matchers.empty;", "import static org.hamcrest.Matchers.hasSize;", "import static org.hamcrest.Matchers.hasToString;", "import static org.hamcrest.core.Is.is;"], "name": "ExtentTest", "description": "Tests for the Extent functionality in the Morel language compiler.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "Fixture", "description": "Internal helper class for setting up test fixtures."}]}, "fixtures": [], "test_cases": [{"name": "testConstant", "primary_tested": ["Core.Exp.isConstant()"], "external_dependencies": {"modules": ["Core", "BigDecimal", "PairList"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core", "Expressions.list"]}, "category": "unit", "fixtures_used": [], "description": "Tests whether an expression is constant."}, {"name": "testEq", "primary_tested": ["Core.equal(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests a variable assigned a single value."}, {"name": "testBetween", "primary_tested": ["Core.andAlso(TypeSystem,Core.Exp,Core.Exp)"], "associated_methods": ["Core.greaterThanOrEqualTo(TypeSystem,Core.Exp,Core.Exp)", "Core.lessThan(TypeSystem,Core.Exp,Core.Exp)", "Core.notEqual(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType", "BigDecimal"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the extent of a variable within a range and other conditions."}, {"name": "testSubTrue", "primary_tested": ["Core.subTrue(TypeSystem,Core.Exp,List<Core.Exp>)"], "associated_methods": ["Core.andAlso(TypeSystem,Core.Exp,Core.Exp)", "Core.orElse(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "BigDecimal"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core", "Expressions.list"]}, "category": "unit", "fixtures_used": [], "description": "Tests the subTrue method which substitutes true in an expression."}, {"name": "testFlatten", "primary_tested": ["Core.decomposeAnd(Core.Exp)", "Core.decomposeOr(Core.Exp)"], "associated_methods": ["Core.andAlso(TypeSystem,Core.Exp,Core.Exp)", "Core.orElse(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "BigDecimal"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the flattening of AND and OR expressions."}, {"name": "testAnalysis2c", "primary_tested": ["Extents.create(TypeSystem,Core.Pat,ImmutableSortedMap<String,Core.Exp>,List<Core.FromStep>,PairList<Core.IdPat,Core.Exp>)"], "associated_methods": ["Core.elem(TypeSystem,Core.Exp,Core.Exp)", "Core.greaterThan(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType", "BigDecimal", "PairList", "ImmutableSortedMap", "ImmutableList", "ImmutableSet"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the analysis of extents with various conditions."}, {"name": "testAnalysis2d", "primary_tested": ["Extents.create(TypeSystem,Core.Pat,ImmutableSortedMap<String,Core.Exp>,List<Core.FromStep>,PairList<Core.IdPat,Core.Exp>)"], "associated_methods": ["Core.elem(TypeSystem,Core.Exp,Core.Exp)", "Core.greaterThan(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType", "BigDecimal", "PairList", "ImmutableSortedMap", "ImmutableList", "ImmutableSet"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the analysis of extents with specific conditions."}]}