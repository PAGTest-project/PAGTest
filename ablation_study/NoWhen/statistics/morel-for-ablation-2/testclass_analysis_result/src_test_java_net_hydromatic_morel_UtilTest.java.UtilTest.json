{"file_path": "src/test/java/net/hydromatic/morel/UtilTest.java", "testclass_name": "UtilTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.ast.Ast;", "import net.hydromatic.morel.ast.Pos;", "import net.hydromatic.morel.compile.BuiltIn;", "import net.hydromatic.morel.eval.Codes;", "import net.hydromatic.morel.type.PrimitiveType;", "import net.hydromatic.morel.type.RangeExtent;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.util.Folder;", "import net.hydromatic.morel.util.MapList;", "import net.hydromatic.morel.util.Pair;", "import net.hydromatic.morel.util.Static;", "import net.hydromatic.morel.util.TailList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import com.google.common.collect.Lists;", "import com.google.common.collect.Range;", "import org.apache.calcite.runtime.FlatLists;", "import org.apache.calcite.util.ImmutableIntList;", "import org.apache.calcite.util.Util;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Objects;", "import java.util.Set;", "import java.util.function.BiConsumer;", "import java.util.function.Consumer;", "import java.util.function.Function;", "import java.util.function.Predicate;", "import static net.hydromatic.morel.ast.AstBuilder.ast;", "import static net.hydromatic.morel.eval.Codes.isNegative;", "import static net.hydromatic.morel.util.Ord.forEachIndexed;", "import static net.hydromatic.morel.util.Static.nextPowerOfTwo;", "import static net.hydromatic.morel.util.Static.transform;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.hasToString;", "import static org.hamcrest.Matchers.instanceOf;", "import static org.hamcrest.Matchers.not;", "import static org.hamcrest.Matchers.notNullValue;", "import static org.hamcrest.core.Is.is;", "import static org.junit.jupiter.api.Assertions.fail;"], "name": "UtilTest", "description": "Unit tests for various utility classes and methods in the Morel project.", "class_members": {"variables": [], "methods": [{"name": "checkShorterThan", "signature": "<E> void checkShorterThan(Iterable<E> iterable, int size)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTailList", "primary_tested": ["TailList.size()", "TailList.get(int)", "TailList.set(int,E)", "TailList.add(int,E)", "TailList.addAll(Collection)", "TailList.clear()", "TailList.isEmpty()"], "external_dependencies": {"modules": ["ArrayList", "TailList", "Arrays", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the functionality of the TailList class, including size, get, set, add, addAll, clear, and isEmpty methods."}, {"name": "testOrd", "primary_tested": ["Ord.forEachIndexed(Iterable,BiConsumer)"], "external_dependencies": {"modules": ["Arrays", "StringBuilder", "Ord"], "class_members": []}, "category": "unit", "description": "Tests the forEachIndexed method from the Ord class, which iterates over a list with indices."}, {"name": "testMapList", "primary_tested": ["MapList.of(int,IntFunction)"], "external_dependencies": {"modules": ["MapList", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the creation and usage of a MapList, which maps integers to elements using a function."}, {"name": "testFolder", "primary_tested": ["Folder.start(List,Ast.Exp)", "Folder.at(List,Ast.Exp)", "Folder.cons(List,Ast.Exp)", "Folder.combineAll(List)"], "external_dependencies": {"modules": ["ArrayList", "Folder", "Ast", "Pos"], "class_members": []}, "category": "unit", "description": "Tests the Folder class methods for managing and combining AST expressions."}, {"name": "testShorterThan", "primary_tested": ["Static.shorterThan(Iterable,int)"], "associated_methods": ["checkShorterThan(Iterable,int)"], "external_dependencies": {"modules": ["Arrays", "ImmutableIntList", "HashSet", "Collections", "Static", "Util"], "class_members": [{"name": "checkShorterThan", "type": "method"}]}, "category": "unit", "description": "Tests the shorterThan method from the Static class, which checks if an iterable is shorter than a given size."}, {"name": "testFind", "primary_tested": ["Static.find(List,Predicate)"], "external_dependencies": {"modules": ["Arrays", "Collections", "Static"], "class_members": []}, "category": "unit", "description": "Tests the find method from the Static class, which finds the index of an element in a list that matches a predicate."}, {"name": "testPos", "primary_tested": ["Pos.split(String,char,String)", "Pos.toString()"], "external_dependencies": {"modules": ["Pos", "Pair", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the Pos class methods for splitting strings and generating position strings."}, {"name": "testPower", "primary_tested": ["Static.nextPowerOfTwo(int)"], "external_dependencies": {"modules": ["Static"], "class_members": []}, "category": "unit", "description": "Tests the nextPowerOfTwo method from the Static class, which calculates the next power of two for a given integer."}, {"name": "testTransform", "primary_tested": ["Static.transform(List,Function)"], "external_dependencies": {"modules": ["Arrays", "Collections", "Static"], "class_members": []}, "category": "unit", "description": "Tests the transform method from the Static class, which applies a function to each element of a list."}, {"name": "testToString", "primary_tested": ["Codes.floatToString(float)"], "external_dependencies": {"modules": ["Codes", "Float"], "class_members": []}, "category": "unit", "description": "Tests the floatToString method from the Codes class, which converts a float to a string."}, {"name": "testFloatBit", "primary_tested": ["Codes.isNegative(float)"], "external_dependencies": {"modules": ["Codes", "Float"], "class_members": []}, "category": "unit", "description": "Tests the isNegative method from the Codes class, which checks if a float is negative."}, {"name": "testPairAllMatch", "primary_tested": ["Pair.anyMatch(Iterable,Iterable,BiPredicate)", "Pair.allMatch(Iterable,Iterable,BiPredicate)", "Pair.noneMatch(Iterable,Iterable,BiPredicate)"], "external_dependencies": {"modules": ["Arrays", "Collections", "Pair", "Objects"], "class_members": []}, "category": "unit", "description": "Tests the anyMatch, allMatch, and noneMatch methods from the Pair class, which check conditions on pairs of elements from two iterables."}, {"name": "testRangeExtent", "primary_tested": ["RangeExtent.iterable"], "external_dependencies": {"modules": ["TypeSystem", "BuiltIn", "Range", "RangeExtent", "ImmutableMap", "ImmutableRangeSet", "Lists", "PrimitiveType", "FlatLists"], "class_members": []}, "category": "unit", "description": "Tests the RangeExtent class, which handles ranges and their extents, including iterables over those ranges."}]}