[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.type.TypeSystem;\nimport net.hydromatic.morel.util.ImmutablePairList;\nimport net.hydromatic.morel.util.Pair;\nimport net.hydromatic.morel.util.PairList;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class Extents_createTest {\n\n    @Test\n    public void testCreate_AllPathsCovered() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat() {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = new ArrayList<>();\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of();\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertNotNull(result.boundPats);\n        assertNotNull(result.goalPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n\n    @Test\n    public void testCreate_WithFollowingSteps() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat() {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        ArrayList<Core.FromStep> followingSteps = new ArrayList<>();\n        followingSteps.add(new Core.Where(ImmutablePairList.of(), new Core.Exp() {}));\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of();\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertNotNull(result.boundPats);\n        assertNotNull(result.goalPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n\n    @Test\n    public void testCreate_WithBoundPats() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat() {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        boundPats.put(new Core.NamedPat() {}, new Core.Exp() {});\n        Iterable<? extends Core.FromStep> followingSteps = new ArrayList<>();\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of();\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertNotNull(result.boundPats);\n        assertNotNull(result.goalPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n\n    @Test\n    public void testCreate_WithIdPats() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat() {};\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = new ArrayList<>();\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of(new Core.IdPat(null, null, 0), new Core.Exp() {});\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertNotNull(result.boundPats);\n        assertNotNull(result.goalPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n}\n"}]