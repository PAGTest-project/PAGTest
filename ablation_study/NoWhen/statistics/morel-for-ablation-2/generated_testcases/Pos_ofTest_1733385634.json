[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.ast;\n\nimport org.apache.calcite.util.IntPair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Pos_ofTest {\n\n    @Test\n    void testOf_SingleLine() {\n        String ml = \"abcdefgh\";\n        String file = \"stdIn\";\n        int startOffset = 3;\n        int endOffset = 6;\n\n        Pos result = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"stdIn\", result.file);\n        assertEquals(1, result.startLine);\n        assertEquals(4, result.startColumn);\n        assertEquals(1, result.endLine);\n        assertEquals(7, result.endColumn);\n    }\n\n    @Test\n    void testOf_MultiLine() {\n        String ml = \"abc\\ndef\\nghi\";\n        String file = \"stdIn\";\n        int startOffset = 4;\n        int endOffset = 8;\n\n        Pos result = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"stdIn\", result.file);\n        assertEquals(2, result.startLine);\n        assertEquals(1, result.startColumn);\n        assertEquals(3, result.endLine);\n        assertEquals(2, result.endColumn);\n    }\n\n    @Test\n    void testOf_StartAtBeginning() {\n        String ml = \"abcdefgh\";\n        String file = \"stdIn\";\n        int startOffset = 0;\n        int endOffset = 3;\n\n        Pos result = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"stdIn\", result.file);\n        assertEquals(1, result.startLine);\n        assertEquals(1, result.startColumn);\n        assertEquals(1, result.endLine);\n        assertEquals(4, result.endColumn);\n    }\n\n    @Test\n    void testOf_EndAtEnd() {\n        String ml = \"abcdefgh\";\n        String file = \"stdIn\";\n        int startOffset = 5;\n        int endOffset = 8;\n\n        Pos result = Pos.of(ml, file, startOffset, endOffset);\n\n        assertEquals(\"stdIn\", result.file);\n        assertEquals(1, result.startLine);\n        assertEquals(6, result.startColumn);\n        assertEquals(1, result.endLine);\n        assertEquals(9, result.endColumn);\n    }\n\n    @Test\n    void testOf_InvalidOffset() {\n        String ml = \"abcdefgh\";\n        String file = \"stdIn\";\n        int startOffset = 10;\n        int endOffset = 15;\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            Pos.of(ml, file, startOffset, endOffset);\n        });\n    }\n}\n"}]