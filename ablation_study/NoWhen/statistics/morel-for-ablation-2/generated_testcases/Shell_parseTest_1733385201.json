[{"strategy": "generate", "code": "\npackage net.hydromatic.morel;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport net.hydromatic.morel.foreign.ForeignValue;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Shell_parseTest {\n\n    @Test\n    public void testParse() {\n        // Given\n        ConfigImpl initialConfig = new ConfigImpl(true, false, true, false, false, ImmutableMap.of(), new File(\"\"), () -> {}, -1);\n        List<String> argList = ImmutableList.of(\n            \"--banner=false\",\n            \"--terminal=dumb\",\n            \"--echo\",\n            \"--help\",\n            \"--system=false\",\n            \"--foreign=net.hydromatic.morel.foreign.Calcite\",\n            \"--directory=testDir\",\n            \"--maxUseDepth=10\"\n        );\n\n        // When\n        Config resultConfig = Shell.parse(initialConfig, argList);\n\n        // Then\n        assertTrue(resultConfig instanceof ConfigImpl);\n        ConfigImpl resultConfigImpl = (ConfigImpl) resultConfig;\n        assertEquals(false, resultConfigImpl.banner);\n        assertEquals(true, resultConfigImpl.dumb);\n        assertEquals(true, resultConfigImpl.echo);\n        assertEquals(true, resultConfigImpl.help);\n        assertEquals(false, resultConfigImpl.system);\n        assertEquals(new File(\"testDir\"), resultConfigImpl.directory);\n        assertEquals(10, resultConfigImpl.maxUseDepth);\n\n        // Verify valueMap\n        Map<String, ForeignValue> valueMap = resultConfigImpl.valueMap;\n        assertEquals(1, valueMap.size());\n        assertTrue(valueMap.containsKey(\"net.hydromatic.morel.foreign.Calcite\"));\n    }\n}\n"}]