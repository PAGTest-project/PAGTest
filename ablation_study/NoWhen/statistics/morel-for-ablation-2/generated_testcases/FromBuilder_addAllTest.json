[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.PrimitiveType;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FromBuilder_addAllTest {\n\n    private FromBuilder fromBuilder;\n    private TypeSystem typeSystem;\n    private Core.IdPat pat;\n    private Core.Exp exp;\n    private Core.Exp condition;\n\n    @BeforeEach\n    public void setUp() {\n        typeSystem = new TypeSystem();\n        fromBuilder = new FromBuilder(typeSystem, Environments.empty());\n        pat = new Core.IdPat(PrimitiveType.INT, \"id\", 0);\n        exp = new Core.Literal(Op.INT_LITERAL, PrimitiveType.INT, 10);\n        condition = new Core.Literal(Op.BOOL_LITERAL, PrimitiveType.BOOLEAN, true);\n    }\n\n    @Test\n    public void testAddAll() {\n        Core.FromStep step1 = new Core.Scan(Arrays.asList(Binding.of(pat)), pat, exp, condition);\n        Core.FromStep step2 = new Core.Where(Arrays.asList(Binding.of(pat)), condition);\n        List<Core.FromStep> steps = Arrays.asList(step1, step2);\n\n        FromBuilder result = fromBuilder.addAll(steps);\n\n        assertEquals(fromBuilder, result);\n        assertEquals(2, fromBuilder.steps.size());\n    }\n\n    @Test\n    public void testAddAllEmpty() {\n        List<Core.FromStep> steps = Arrays.asList();\n\n        FromBuilder result = fromBuilder.addAll(steps);\n\n        assertEquals(fromBuilder, result);\n        assertEquals(0, fromBuilder.steps.size());\n    }\n\n    @Test\n    public void testAddAllSingleStep() {\n        Core.FromStep step = new Core.Scan(Arrays.asList(Binding.of(pat)), pat, exp, condition);\n        List<Core.FromStep> steps = Arrays.asList(step);\n\n        FromBuilder result = fromBuilder.addAll(steps);\n\n        assertEquals(fromBuilder, result);\n        assertEquals(1, fromBuilder.steps.size());\n    }\n}\n"}]