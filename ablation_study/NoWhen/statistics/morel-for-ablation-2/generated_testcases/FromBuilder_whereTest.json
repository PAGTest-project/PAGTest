[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.PrimitiveType;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FromBuilder_whereTest {\n\n    private FromBuilder fromBuilder;\n    private TypeSystem typeSystem;\n    private Core core;\n\n    @BeforeEach\n    public void setUp() {\n        typeSystem = new TypeSystem();\n        fromBuilder = new FromBuilder(typeSystem, Environments.empty());\n        core = new Core(typeSystem); // Fix: Pass typeSystem to Core constructor\n    }\n\n    @Test\n    public void testWhereWithTrueCondition() {\n        Core.Exp condition = core.boolLiteral(true);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithFalseCondition() {\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithNonLiteralCondition() {\n        Core.IdPat idPat = new Core.IdPat(PrimitiveType.INT, \"x\", 0);\n        Core.Exp condition = core.id(idPat);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n}\n"}]