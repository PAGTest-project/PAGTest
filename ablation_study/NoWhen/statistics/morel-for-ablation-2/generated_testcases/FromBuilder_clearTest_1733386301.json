[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.PrimitiveType;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class FromBuilder_clearTest {\n    private FromBuilder fromBuilder;\n    private TypeSystem typeSystem;\n    private List<Core.FromStep> steps;\n    private List<Binding> bindings;\n\n    @BeforeEach\n    public void setUp() {\n        typeSystem = new TypeSystem();\n        fromBuilder = new FromBuilder(typeSystem, Environments.empty());\n        steps = new ArrayList<>();\n        bindings = new ArrayList<>();\n    }\n\n    @Test\n    public void testClear() {\n        // Given\n        fromBuilder.addAll(steps);\n        fromBuilder.bindings().addAll(bindings);\n        fromBuilder.addStep(core.scan(bindings, new Core.IdPat(\"i\"), core.intLiteral(1), core.boolLiteral(true)));\n\n        // When\n        fromBuilder.clear();\n\n        // Then\n        assertTrue(fromBuilder.bindings().isEmpty());\n        assertTrue(fromBuilder.build().steps.isEmpty());\n        assertEquals(Integer.MIN_VALUE, fromBuilder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, fromBuilder.removeIfLastIndex);\n    }\n\n    @Test\n    public void testClearWithStepsAndBindings() {\n        // Given\n        steps.add(core.scan(bindings, new Core.IdPat(\"i\"), core.intLiteral(1), core.boolLiteral(true)));\n        bindings.add(Binding.of(new Core.IdPat(\"i\")));\n        fromBuilder.addAll(steps);\n        fromBuilder.bindings().addAll(bindings);\n\n        // When\n        fromBuilder.clear();\n\n        // Then\n        assertTrue(fromBuilder.bindings().isEmpty());\n        assertTrue(fromBuilder.build().steps.isEmpty());\n        assertEquals(Integer.MIN_VALUE, fromBuilder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, fromBuilder.removeIfLastIndex);\n    }\n}\n"}]