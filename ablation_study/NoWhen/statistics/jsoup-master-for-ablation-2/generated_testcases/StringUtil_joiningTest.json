[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_joiningTest {\n\n    @Test\n    public void testJoiningWithDelimiter() {\n        Stream<CharSequence> stream = Stream.of(\"apple\", \"banana\", \"cherry\");\n        String result = stream.collect(StringUtil.joining(\", \"));\n        assertEquals(\"apple, banana, cherry\", result);\n    }\n\n    @Test\n    public void testJoiningWithEmptyStream() {\n        Stream<CharSequence> stream = Stream.of();\n        String result = stream.collect(StringUtil.joining(\", \"));\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testJoiningWithSingleElement() {\n        Stream<CharSequence> stream = Stream.of(\"apple\");\n        String result = stream.collect(StringUtil.joining(\", \"));\n        assertEquals(\"apple\", result);\n    }\n\n    @Test\n    public void testJoiningWithNullElement() {\n        Stream<CharSequence> stream = Stream.of(\"apple\", null, \"cherry\");\n        String result = stream.collect(StringUtil.joining(\", \"));\n        assertEquals(\"apple, null, cherry\", result);\n    }\n\n    @Test\n    public void testJoiningWithWhitespaceNormalization() {\n        Stream<CharSequence> stream = Stream.of(\"  apple  \", \"  banana  \", \"  cherry  \");\n        String result = stream.collect(StringUtil.joining(\", \"));\n        assertEquals(\"  apple  ,   banana  ,   cherry  \", result);\n    }\n}\n"}]