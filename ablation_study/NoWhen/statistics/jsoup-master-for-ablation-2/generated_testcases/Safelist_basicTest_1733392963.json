[{"strategy": "retry", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_basicTest {\n\n    @Test\n    public void testBasicSafelistTags() {\n        Safelist safelist = Safelist.basic();\n\n        // Test allowed tags\n        assertTrue(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"blockquote\"));\n        assertTrue(safelist.isSafeTag(\"br\"));\n        assertTrue(safelist.isSafeTag(\"cite\"));\n        assertTrue(safelist.isSafeTag(\"code\"));\n        assertTrue(safelist.isSafeTag(\"dd\"));\n        assertTrue(safelist.isSafeTag(\"dl\"));\n        assertTrue(safelist.isSafeTag(\"dt\"));\n        assertTrue(safelist.isSafeTag(\"em\"));\n        assertTrue(safelist.isSafeTag(\"i\"));\n        assertTrue(safelist.isSafeTag(\"li\"));\n        assertTrue(safelist.isSafeTag(\"ol\"));\n        assertTrue(safelist.isSafeTag(\"p\"));\n        assertTrue(safelist.isSafeTag(\"pre\"));\n        assertTrue(safelist.isSafeTag(\"q\"));\n        assertTrue(safelist.isSafeTag(\"small\"));\n        assertTrue(safelist.isSafeTag(\"span\"));\n        assertTrue(safelist.isSafeTag(\"strike\"));\n        assertTrue(safelist.isSafeTag(\"strong\"));\n        assertTrue(safelist.isSafeTag(\"sub\"));\n        assertTrue(safelist.isSafeTag(\"sup\"));\n        assertTrue(safelist.isSafeTag(\"u\"));\n        assertTrue(safelist.isSafeTag(\"ul\"));\n\n        // Test disallowed tags\n        assertFalse(safelist.isSafeTag(\"script\"));\n        assertFalse(safelist.isSafeTag(\"img\"));\n    }\n\n    @Test\n    public void testBasicSafelistAttributes() {\n        Safelist safelist = Safelist.basic();\n        Element element = new Element(Tag.valueOf(\"a\"), \"\");\n        Attribute hrefAttr = new Attribute(\"href\", \"http://example.com\");\n        Attribute classAttr = new Attribute(\"class\", \"example\");\n\n        // Test allowed attributes\n        assertTrue(safelist.isSafeAttribute(\"a\", element, hrefAttr));\n        assertFalse(safelist.isSafeAttribute(\"a\", element, classAttr));\n\n        element = new Element(Tag.valueOf(\"blockquote\"), \"\");\n        Attribute citeAttr = new Attribute(\"cite\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"blockquote\", element, citeAttr));\n\n        element = new Element(Tag.valueOf(\"q\"), \"\");\n        assertTrue(safelist.isSafeAttribute(\"q\", element, citeAttr));\n    }\n\n    @Test\n    public void testBasicSafelistProtocols() {\n        Safelist safelist = Safelist.basic();\n        Element element = new Element(Tag.valueOf(\"a\"), \"\");\n        Attribute hrefAttr = new Attribute(\"href\", \"http://example.com\");\n        Attribute ftpAttr = new Attribute(\"href\", \"ftp://example.com\");\n        Attribute mailtoAttr = new Attribute(\"href\", \"mailto:example@example.com\");\n        Attribute invalidAttr = new Attribute(\"href\", \"javascript:alert('XSS')\");\n\n        // Test allowed protocols\n        assertTrue(safelist.isSafeAttribute(\"a\", element, hrefAttr));\n        assertTrue(safelist.isSafeAttribute(\"a\", element, ftpAttr));\n        assertTrue(safelist.isSafeAttribute(\"a\", element, mailtoAttr));\n\n        // Test disallowed protocols\n        assertFalse(safelist.isSafeAttribute(\"a\", element, invalidAttr));\n    }\n\n    @Test\n    public void testBasicSafelistEnforcedAttributes() {\n        Safelist safelist = Safelist.basic();\n        Attributes enforcedAttrs = safelist.getEnforcedAttributes(\"a\");\n\n        // Test enforced attributes\n        assertEquals(\"nofollow\", enforcedAttrs.get(\"rel\"));\n    }\n}\n"}]