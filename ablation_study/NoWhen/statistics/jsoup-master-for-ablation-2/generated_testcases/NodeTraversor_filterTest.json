[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Node;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeTraversor_filterTest {\n\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n    }\n\n    @Test\n    public void testFilterStop() {\n        Node root = doc.select(\"div\").first();\n        FilterResult result = NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.STOP;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        }, root);\n        assertEquals(FilterResult.STOP, result);\n    }\n\n    @Test\n    public void testFilterContinue() {\n        Node root = doc.select(\"div\").first();\n        FilterResult result = NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        }, root);\n        assertEquals(FilterResult.CONTINUE, result);\n    }\n\n    @Test\n    public void testFilterSkipChildren() {\n        Node root = doc.select(\"div\").first();\n        final StringBuilder accum = new StringBuilder();\n        FilterResult result = NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n                return (\"p\".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n        }, root);\n        assertEquals(\"<div><p></p></div>\", accum.toString());\n        assertEquals(FilterResult.CONTINUE, result);\n    }\n\n    @Test\n    public void testFilterRemove() {\n        Node root = doc.select(\"div\").first();\n        FilterResult result = NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.REMOVE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        }, root);\n        assertEquals(0, root.childNodeSize());\n        assertEquals(FilterResult.CONTINUE, result);\n    }\n}\n"}]