[{"strategy": "retry", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.helper.ValidationException;\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_removeProtocolsTest {\n    private Safelist safelist;\n    private static final String TEST_TAG = \"a\";\n    private static final String TEST_ATTRIBUTE = \"href\";\n    private static final String TEST_SCHEME = \"http\";\n\n    @BeforeEach\n    public void setUp() {\n        safelist = Safelist.none()\n                .addAttributes(TEST_TAG, TEST_ATTRIBUTE)\n                .addProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);\n    }\n\n    @Test\n    public void testRemoveProtocols_ValidProtocolsRemoved() {\n        safelist.removeProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);\n\n        Attributes attributes = new Attributes();\n        Attribute attribute = new Attribute(TEST_ATTRIBUTE, TEST_SCHEME + \"://someValue\");\n        attributes.put(attribute);\n        Element element = new Element(Tag.valueOf(TEST_TAG), \"\", attributes);\n\n        assertFalse(safelist.isSafeAttribute(TEST_TAG, element, attribute));\n    }\n\n    @Test\n    public void testRemoveProtocols_InvalidProtocolsNotRemoved() {\n        final String invalidScheme = \"invalid-scheme\";\n        safelist.removeProtocols(TEST_TAG, TEST_ATTRIBUTE, invalidScheme);\n\n        Attributes attributes = new Attributes();\n        Attribute attribute = new Attribute(TEST_ATTRIBUTE, TEST_SCHEME + \"://someValue\");\n        attributes.put(attribute);\n        Element element = new Element(Tag.valueOf(TEST_TAG), \"\", attributes);\n\n        assertTrue(safelist.isSafeAttribute(TEST_TAG, element, attribute));\n    }\n\n    @Test\n    public void testRemoveProtocols_AllProtocolsRemoved() {\n        safelist.removeProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);\n\n        Attributes attributes = new Attributes();\n        Attribute attribute = new Attribute(TEST_ATTRIBUTE, TEST_SCHEME + \"://someValue\");\n        attributes.put(attribute);\n        Element element = new Element(Tag.valueOf(TEST_TAG), \"\", attributes);\n\n        assertFalse(safelist.isSafeAttribute(TEST_TAG, element, attribute));\n    }\n\n    @Test\n    public void testRemoveProtocols_TagProtocolsRemoved() {\n        safelist.removeProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);\n\n        assertFalse(safelist.protocols.containsKey(TagName.valueOf(TEST_TAG)));\n    }\n\n    @Test\n    public void testRemoveProtocols_AttributeProtocolsRemoved() {\n        safelist.removeProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);\n\n        assertFalse(safelist.protocols.get(TagName.valueOf(TEST_TAG)).containsKey(AttributeKey.valueOf(TEST_ATTRIBUTE)));\n    }\n}\n"}]