[{"strategy": "generate", "code": "\npackage org.jsoup.helper;\n\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactoryConfigurationException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass W3CDom_selectXpathTest {\n\n    @Test\n    void testSelectXpath_Success() throws Exception {\n        // Given\n        W3CDom w3cDom = new W3CDom();\n        Document doc = w3cDom.fromJsoup(org.jsoup.Jsoup.parse(\"<root><child>text</child></root>\"));\n        String xpath = \"//child\";\n\n        // When\n        NodeList nodeList = w3cDom.selectXpath(xpath, doc);\n\n        // Then\n        assertNotNull(nodeList);\n        assertEquals(1, nodeList.getLength());\n        assertEquals(\"child\", nodeList.item(0).getNodeName());\n    }\n\n    @Test\n    void testSelectXpath_XPathExpressionException() {\n        // Given\n        W3CDom w3cDom = new W3CDom();\n        Document doc = w3cDom.fromJsoup(org.jsoup.Jsoup.parse(\"<root><child>text</child></root>\"));\n        String invalidXpath = \"//invalid[\";\n\n        // When & Then\n        assertThrows(Selector.SelectorParseException.class, () -> {\n            w3cDom.selectXpath(invalidXpath, doc);\n        });\n    }\n\n    @Test\n    void testSelectXpath_XPathFactoryConfigurationException() {\n        // Given\n        W3CDom w3cDom = new W3CDom();\n        Document doc = w3cDom.fromJsoup(org.jsoup.Jsoup.parse(\"<root><child>text</child></root>\"));\n        String xpath = \"//child\";\n        System.setProperty(W3CDom.XPathFactoryProperty, \"invalidFactory\");\n\n        // When & Then\n        assertThrows(Selector.SelectorParseException.class, () -> {\n            w3cDom.selectXpath(xpath, doc);\n        });\n    }\n}\n"}]