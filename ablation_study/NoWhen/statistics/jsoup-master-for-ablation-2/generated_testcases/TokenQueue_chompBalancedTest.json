[{"strategy": "retry", "code": "\npackage org.jsoup.parser;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TokenQueue_chompBalancedTest {\n    private TokenQueue tokenQueue;\n\n    @BeforeEach\n    public void setUp() {\n        tokenQueue = new TokenQueue(\"(one (two) three) four\");\n    }\n\n    @Test\n    public void testChompBalanced_Simple() {\n        String result = tokenQueue.chompBalanced('(', ')');\n        assertEquals(\"one (two) three\", result);\n    }\n\n    @Test\n    public void testChompBalanced_Empty() {\n        tokenQueue = new TokenQueue(\"\");\n        String result = tokenQueue.chompBalanced('(', ')');\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testChompBalanced_Unbalanced() {\n        tokenQueue = new TokenQueue(\"(one (two) three\");\n        assertThrows(IllegalArgumentException.class, () -> {\n            tokenQueue.chompBalanced('(', ')');\n        });\n    }\n\n    @Test\n    public void testChompBalanced_WithQuotes() {\n        tokenQueue = new TokenQueue(\"(one '(\\\"two\\\")' three) four\");\n        String result = tokenQueue.chompBalanced('(', ')');\n        assertEquals(\"one '(\\\"two\\\")' three\", result);\n    }\n\n    @Test\n    public void testChompBalanced_WithEscapes() {\n        tokenQueue = new TokenQueue(\"(one \\\\(two\\\\) three) four\");\n        String result = tokenQueue.chompBalanced('(', ')');\n        assertEquals(\"one \\\\(two\\\\) three\", result);\n    }\n\n    @Test\n    public void testChompBalanced_WithRegexQE() {\n        tokenQueue = new TokenQueue(\"(one \\\\Q(two)\\\\E three) four\");\n        String result = tokenQueue.chompBalanced('(', ')');\n        assertEquals(\"one \\\\Q(two)\\\\E three\", result);\n    }\n}\n"}]