[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.select.Elements;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FormElement_formDataTest {\n    private FormElement formElement;\n\n    @BeforeEach\n    public void setUp() {\n        formElement = new FormElement(Tag.valueOf(\"form\"), null, null);\n    }\n\n    @Test\n    public void testFormDataWithSingleInput() {\n        Element input = new Element(Tag.valueOf(\"input\"), null);\n        input.attr(\"name\", \"username\");\n        input.attr(\"value\", \"testuser\");\n        formElement.appendChild(input);\n\n        List<Connection.KeyVal> data = formElement.formData();\n        assertEquals(1, data.size());\n        assertEquals(\"username\", data.get(0).key());\n        assertEquals(\"testuser\", data.get(0).value());\n    }\n\n    @Test\n    public void testFormDataWithDisabledInput() {\n        Element input = new Element(Tag.valueOf(\"input\"), null);\n        input.attr(\"name\", \"username\");\n        input.attr(\"value\", \"testuser\");\n        input.attr(\"disabled\", \"disabled\");\n        formElement.appendChild(input);\n\n        List<Connection.KeyVal> data = formElement.formData();\n        assertEquals(0, data.size());\n    }\n\n    @Test\n    public void testFormDataWithSelect() {\n        Element select = new Element(Tag.valueOf(\"select\"), null);\n        select.attr(\"name\", \"color\");\n        Element option1 = new Element(Tag.valueOf(\"option\"), null);\n        option1.attr(\"value\", \"red\");\n        option1.attr(\"selected\", \"selected\");\n        Element option2 = new Element(Tag.valueOf(\"option\"), null);\n        option2.attr(\"value\", \"blue\");\n        select.appendChild(option1);\n        select.appendChild(option2);\n        formElement.appendChild(select);\n\n        List<Connection.KeyVal> data = formElement.formData();\n        assertEquals(1, data.size());\n        assertEquals(\"color\", data.get(0).key());\n        assertEquals(\"red\", data.get(0).value());\n    }\n\n    @Test\n    public void testFormDataWithCheckbox() {\n        Element checkbox = new Element(Tag.valueOf(\"input\"), null);\n        checkbox.attr(\"type\", \"checkbox\");\n        checkbox.attr(\"name\", \"remember\");\n        checkbox.attr(\"checked\", \"checked\");\n        formElement.appendChild(checkbox);\n\n        List<Connection.KeyVal> data = formElement.formData();\n        assertEquals(1, data.size());\n        assertEquals(\"remember\", data.get(0).key());\n        assertEquals(\"on\", data.get(0).value());\n    }\n\n    @Test\n    public void testFormDataWithRadio() {\n        Element radio1 = new Element(Tag.valueOf(\"input\"), null);\n        radio1.attr(\"type\", \"radio\");\n        radio1.attr(\"name\", \"gender\");\n        radio1.attr(\"value\", \"male\");\n        radio1.attr(\"checked\", \"checked\");\n        Element radio2 = new Element(Tag.valueOf(\"input\"), null);\n        radio2.attr(\"type\", \"radio\");\n        radio2.attr(\"name\", \"gender\");\n        radio2.attr(\"value\", \"female\");\n        formElement.appendChild(radio1);\n        formElement.appendChild(radio2);\n\n        List<Connection.KeyVal> data = formElement.formData();\n        assertEquals(1, data.size());\n        assertEquals(\"gender\", data.get(0).key());\n        assertEquals(\"male\", data.get(0).value());\n    }\n}\n"}]