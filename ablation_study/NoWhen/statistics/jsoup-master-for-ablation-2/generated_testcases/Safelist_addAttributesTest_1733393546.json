[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_addAttributesTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testAddAttributes_ValidAttributes() {\n        safelist.addAttributes(\"a\", \"href\", \"class\");\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"\")));\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"class\", \"\")));\n    }\n\n    @Test\n    public void testAddAttributes_InvalidAttributes() {\n        safelist.addAttributes(\"a\", \"href\", \"class\");\n        assertFalse(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"style\", \"\")));\n    }\n\n    @Test\n    public void testAddAttributes_NoAttributesSupplied() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addAttributes(\"a\");\n        });\n    }\n\n    @Test\n    public void testAddAttributes_EmptyTag() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addAttributes(\"\", \"href\");\n        });\n    }\n\n    @Test\n    public void testAddAttributes_NullAttributes() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addAttributes(\"a\", (String[]) null);\n        });\n    }\n\n    @Test\n    public void testAddAttributes_EmptyAttribute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addAttributes(\"a\", \"href\", \"\");\n        });\n    }\n\n    @Test\n    public void testAddAttributes_AllTag() {\n        safelist.addAttributes(\":all\", \"class\");\n        assertTrue(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"class\", \"\")));\n        assertTrue(safelist.isSafeAttribute(\"div\", new Element(Tag.valueOf(\"div\"), \"\"), new Attribute(\"class\", \"\")));\n    }\n\n    @Test\n    public void testAddAttributes_EnforcedAttributes() {\n        safelist.addAttributes(\"a\", \"href\", \"class\");\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        Attributes enforcedAttributes = safelist.getEnforcedAttributes(\"a\");\n        assertEquals(\"nofollow\", enforcedAttributes.get(\"rel\"));\n    }\n}\n"}]