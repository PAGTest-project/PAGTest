[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_appendElementTest {\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        element = new Element(\"div\");\n    }\n\n    @Test\n    public void testAppendElement() {\n        Element child = element.appendElement(\"span\", \"http://www.w3.org/1999/xhtml\");\n        assertNotNull(child);\n        assertEquals(\"span\", child.tagName());\n        assertEquals(\"http://www.w3.org/1999/xhtml\", child.tag().namespace());\n        assertTrue(element.childElementsList().contains(child));\n    }\n\n    @Test\n    public void testAppendElementWithDefaultNamespace() {\n        Element child = element.appendElement(\"span\");\n        assertNotNull(child);\n        assertEquals(\"span\", child.tagName());\n        assertEquals(Tag.DEFAULT_NAMESPACE, child.tag().namespace());\n        assertTrue(element.childElementsList().contains(child));\n    }\n\n    @Test\n    public void testAppendElementWithInvalidTagName() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            element.appendElement(\"invalid tag name\", \"http://www.w3.org/1999/xhtml\");\n        });\n    }\n\n    @Test\n    public void testAppendElementWithNullTagName() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            element.appendElement(null, \"http://www.w3.org/1999/xhtml\");\n        });\n    }\n\n    @Test\n    public void testAppendElementWithNullNamespace() {\n        Element child = element.appendElement(\"span\", null);\n        assertNotNull(child);\n        assertEquals(\"span\", child.tagName());\n        assertEquals(Tag.DEFAULT_NAMESPACE, child.tag().namespace());\n        assertTrue(element.childElementsList().contains(child));\n    }\n}\n"}]