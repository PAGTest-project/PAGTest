[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.ConcurrentModificationException;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Attributes_normalizeTest {\n    private Attributes attributes;\n\n    @BeforeEach\n    public void setUp() {\n        attributes = new Attributes();\n    }\n\n    @Test\n    public void testNormalizeWithInternalKey() {\n        attributes.put(\"/internalKey\", \"value\");\n        attributes.normalize();\n        assertEquals(\"/internalKey\", attributes.get(\"/internalKey\"));\n    }\n\n    @Test\n    public void testNormalizeWithNonInternalKey() {\n        attributes.put(\"nonInternalKey\", \"VALUE\");\n        attributes.normalize();\n        assertEquals(\"value\", attributes.get(\"nonInternalKey\"));\n    }\n\n    @Test\n    public void testNormalizeWithMixedKeys() {\n        attributes.put(\"/internalKey\", \"value\");\n        attributes.put(\"nonInternalKey\", \"VALUE\");\n        attributes.normalize();\n        assertEquals(\"/internalKey\", attributes.get(\"/internalKey\"));\n        assertEquals(\"value\", attributes.get(\"nonInternalKey\"));\n    }\n\n    @Test\n    public void testNormalizeWithEmptyAttributes() {\n        attributes.normalize();\n        assertTrue(attributes.isEmpty());\n    }\n\n    @Test\n    public void testNormalizeWithNullKey() {\n        attributes.put(null, \"value\");\n        assertThrows(NullPointerException.class, () -> attributes.normalize());\n    }\n\n    @Test\n    public void testNormalizeWithNullValue() {\n        attributes.put(\"key\", null);\n        attributes.normalize();\n        assertNull(attributes.get(\"key\"));\n    }\n\n    @Test\n    public void testNormalizeWithMultipleKeys() {\n        attributes.put(\"key1\", \"VALUE1\");\n        attributes.put(\"key2\", \"VALUE2\");\n        attributes.put(\"key3\", \"VALUE3\");\n        attributes.normalize();\n        assertEquals(\"value1\", attributes.get(\"key1\"));\n        assertEquals(\"value2\", attributes.get(\"key2\"));\n        assertEquals(\"value3\", attributes.get(\"key3\"));\n    }\n\n    @Test\n    public void testNormalizeWithDuplicateKeys() {\n        attributes.put(\"key\", \"VALUE\");\n        attributes.put(\"key\", \"VALUE\");\n        attributes.normalize();\n        assertEquals(\"value\", attributes.get(\"key\"));\n    }\n\n    @Test\n    public void testNormalizeWithInternalAndNonInternalDuplicateKeys() {\n        attributes.put(\"/internalKey\", \"value\");\n        attributes.put(\"internalKey\", \"VALUE\");\n        attributes.normalize();\n        assertEquals(\"/internalKey\", attributes.get(\"/internalKey\"));\n        assertEquals(\"value\", attributes.get(\"internalKey\"));\n    }\n}\n"}]