[{"strategy": "retry", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_removeTagsTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testRemoveTags_SingleTag() {\n        safelist.addTags(\"a\", \"b\", \"c\");\n        safelist.removeTags(\"b\");\n\n        assertFalse(safelist.isSafeTag(\"b\"));\n        assertTrue(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"c\"));\n    }\n\n    @Test\n    public void testRemoveTags_MultipleTags() {\n        safelist.addTags(\"a\", \"b\", \"c\", \"d\");\n        safelist.removeTags(\"b\", \"d\");\n\n        assertFalse(safelist.isSafeTag(\"b\"));\n        assertFalse(safelist.isSafeTag(\"d\"));\n        assertTrue(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"c\"));\n    }\n\n    @Test\n    public void testRemoveTags_NonExistentTag() {\n        safelist.addTags(\"a\", \"b\");\n        safelist.removeTags(\"c\");\n\n        assertTrue(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"b\"));\n        assertFalse(safelist.isSafeTag(\"c\"));\n    }\n\n    @Test\n    public void testRemoveTags_AttributesRemoved() {\n        safelist.addTags(\"a\", \"b\");\n        safelist.addAttributes(\"a\", \"href\", \"class\");\n        safelist.addAttributes(\"b\", \"src\", \"alt\");\n        safelist.removeTags(\"a\");\n\n        assertFalse(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"b\"));\n        assertNull(safelist.attributes.get(Tag.valueOf(\"a\")));\n        assertNotNull(safelist.attributes.get(Tag.valueOf(\"b\")));\n    }\n\n    @Test\n    public void testRemoveTags_EnforcedAttributesRemoved() {\n        safelist.addTags(\"a\", \"b\");\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        safelist.addEnforcedAttribute(\"b\", \"width\", \"100\");\n        safelist.removeTags(\"a\");\n\n        assertFalse(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"b\"));\n        assertNull(safelist.enforcedAttributes.get(Tag.valueOf(\"a\")));\n        assertNotNull(safelist.enforcedAttributes.get(Tag.valueOf(\"b\")));\n    }\n\n    @Test\n    public void testRemoveTags_ProtocolsRemoved() {\n        safelist.addTags(\"a\", \"b\");\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        safelist.addProtocols(\"b\", \"src\", \"ftp\");\n        safelist.removeTags(\"a\");\n\n        assertFalse(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"b\"));\n        assertNull(safelist.protocols.get(Tag.valueOf(\"a\")));\n        assertNotNull(safelist.protocols.get(Tag.valueOf(\"b\")));\n    }\n\n    @Test\n    public void testRemoveTags_NullInput() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.removeTags(null));\n    }\n\n    @Test\n    public void testRemoveTags_EmptyInput() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.removeTags());\n    }\n\n    @Test\n    public void testRemoveTags_EmptyTag() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.removeTags(\"\"));\n    }\n\n    @Test\n    public void testRemoveTags_InvalidTag() {\n        assertThrows(IllegalArgumentException.class, () -> safelist.removeTags(\"invalidTag\"));\n    }\n}\n"}]