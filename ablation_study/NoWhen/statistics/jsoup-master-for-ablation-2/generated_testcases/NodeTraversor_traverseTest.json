[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.nodes.Node;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.*;\n\npublic class NodeTraversor_traverseTest {\n\n    @Test\n    public void testTraverse_SingleNode() {\n        NodeVisitor visitor = mock(NodeVisitor.class);\n        Node root = mock(Node.class);\n        Node child = mock(Node.class);\n\n        when(root.childNodeSize()).thenReturn(1);\n        when(root.childNode(0)).thenReturn(child);\n        when(child.nextSibling()).thenReturn(null);\n        when(child.parentNode()).thenReturn(root);\n        when(child.childNodeSize()).thenReturn(0);\n\n        NodeTraversor.traverse(visitor, root);\n\n        verify(visitor).head(root, 0);\n        verify(visitor).head(child, 1);\n        verify(visitor).tail(child, 1);\n        verify(visitor).tail(root, 0);\n    }\n\n    @Test\n    public void testTraverse_NodeRemoved() {\n        NodeVisitor visitor = mock(NodeVisitor.class);\n        Node root = mock(Node.class);\n        Node child = mock(Node.class);\n        Node sibling = mock(Node.class);\n\n        when(root.childNodeSize()).thenReturn(2);\n        when(root.childNode(0)).thenReturn(child);\n        when(root.childNode(1)).thenReturn(sibling);\n        when(child.nextSibling()).thenReturn(sibling);\n        when(child.parentNode()).thenReturn(root);\n        when(child.childNodeSize()).thenReturn(0);\n        when(child.hasParent()).thenReturn(false);\n        when(sibling.nextSibling()).thenReturn(null);\n        when(sibling.parentNode()).thenReturn(root);\n        when(sibling.childNodeSize()).thenReturn(0);\n\n        NodeTraversor.traverse(visitor, root);\n\n        verify(visitor).head(root, 0);\n        verify(visitor).head(child, 1);\n        verify(visitor).head(sibling, 1);\n        verify(visitor).tail(sibling, 1);\n        verify(visitor).tail(root, 0);\n    }\n}\n"}]