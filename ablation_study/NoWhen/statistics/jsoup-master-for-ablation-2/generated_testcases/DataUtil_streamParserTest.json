[{"strategy": "retry", "code": "\npackage org.jsoup.helper;\n\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.StreamParser;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Path;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.*;\n\npublic class DataUtil_streamParserTest {\n\n    @Test\n    public void testStreamParser() throws IOException {\n        // Given\n        Path path = mock(Path.class);\n        Charset charset = Charset.forName(\"UTF-8\");\n        String baseUri = \"http://example.com\";\n        Parser parser = mock(Parser.class);\n\n        DataUtil.CharsetDoc charsetDoc = mock(DataUtil.CharsetDoc.class);\n        when(charsetDoc.input).thenReturn(mock(ControllableInputStream.class));\n        when(charsetDoc.charset).thenReturn(charset);\n\n        BufferedReader reader = mock(BufferedReader.class);\n        when(reader.readLine()).thenReturn(\"test\");\n\n        StreamParser streamer = mock(StreamParser.class);\n        doNothing().when(streamer).parse(any(BufferedReader.class), eq(baseUri));\n\n        // When\n        StreamParser result = DataUtil.streamParser(path, charset, baseUri, parser);\n\n        // Then\n        assertNotNull(result);\n        verify(streamer).parse(any(BufferedReader.class), eq(baseUri));\n    }\n}\n"}]