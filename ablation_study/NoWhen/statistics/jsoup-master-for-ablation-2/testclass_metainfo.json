[{"uris": "src/test/java/org/jsoup/helper/DataUtilTest.java.DataUtilTest", "name": "DataUtilTest", "file_path": "src/test/java/org/jsoup/helper/DataUtilTest.java", "superclasses": "", "methods": ["[void]testCharset()", "[void]testQuotedCharset()", "[void]discardsSpuriousByteOrderMark()", "[void]discardsSpuriousByteOrderMarkWhenNoCharsetSet()", "[void]shouldNotThrowExceptionOnEmptyCharset()", "[void]shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()", "[void]shouldCorrectCharsetForDuplicateCharsetString()", "[void]shouldReturnNullForIllegalCharsetNames()", "[void]generatesMimeBoundaries()", "[void]wrongMetaCharsetFallback()", "[void]secondMetaElementWithContentTypeContainsCharsetParameter()", "[void]firstMetaElementWithCharsetShouldBeUsedForDecoding()", "[void]parseSequenceInputStream()", "[void]supportsBOMinFiles()", "[void]streamerSupportsBOMinFiles()", "[void]supportsUTF8BOM()", "[void]noExtraNULLBytes()", "[void]supportsZippedUTF8BOM()", "[void]streamerSupportsZippedUTF8BOM()", "[void]supportsXmlCharsetDeclaration()", "[void]loadsGzipFile()", "[void]loadsGzipPath()", "[void]loadsZGzipFile()", "[void]loadsZGzipPath()", "[void]handlesFakeGzipFile()", "[void]handlesFakeGzipPath()", "[void]handlesChunkedInputStream()", "[void]handlesUnlimitedRead()"], "method_uris": ["src/test/java/org/jsoup/helper/DataUtilTest.java.DataUtilTest.[ControllableInputStream]stream(String)", "src/test/java/org/jsoup/helper/DataUtilTest.java.DataUtilTest.[ControllableInputStream]stream(String,String)"], "overrides": null, "attributes": [{"original_string": "    static class VaryingReadInputStream extends InputStream {\n        final InputStream in;\n        int stride = 0;\n\n        VaryingReadInputStream(InputStream in) {\n            this.in = in;\n        }\n\n        public int read() throws IOException {\n            return in.read();\n        }\n\n        public int read(byte[] b) throws IOException {\n            return in.read(b, 0, Math.min(b.length, ++stride));\n        }\n\n        public int read(byte[] b, int off, int len) throws IOException {\n            return in.read(b, off, Math.min(len, ++stride));\n        }\n    }", "definition": "    static class VaryingReadInputStream extends InputStream", "class_docstring": " an input stream to give a range of output sizes, that changes on each read", "name": "VaryingReadInputStream", "super_interfaces": [], "superclasses": "InputStream", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "fields": [{"attribute_expression": "final InputStream in;", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "InputStream", "name": "in", "syntax_pass": true}, {"attribute_expression": "int stride = 0;", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "int", "name": "stride = 0", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        VaryingReadInputStream(InputStream in) {\n            this.in = in;\n        }", "docstring": "", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "name": "VaryingReadInputStream", "params": [{"name": "in", "type": "InputStream"}], "body": "                                               {\n            this.in = in;\n        }", "signature": "VaryingReadInputStream(InputStream in)"}, {"syntax_pass": true, "original_string": "        public int read() throws IOException {\n            return in.read();\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "name": "read", "params": [], "body": "                                             {\n            return in.read();\n        }", "signature": "public int read()"}, {"syntax_pass": true, "original_string": "        public int read(byte[] b) throws IOException {\n            return in.read(b, 0, Math.min(b.length, ++stride));\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "name": "read", "params": [{"name": "b", "type": "byte[]"}], "body": "                                                     {\n            return in.read(b, 0, Math.min(b.length, ++stride));\n        }", "signature": "public int read(byte[] b)"}, {"syntax_pass": true, "original_string": "        public int read(byte[] b, int off, int len) throws IOException {\n            return in.read(b, off, Math.min(len, ++stride));\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "name": "read", "params": [{"name": "b", "type": "byte[]"}, {"name": "off", "type": "int"}, {"name": "len", "type": "int"}], "body": "                                                                       {\n            return in.read(b, off, Math.min(len, ++stride));\n        }", "signature": "public int read(byte[] b, int off, int len)"}]}], "class_docstring": "", "original_string": "public class DataUtilTest {\n    @Test\n    public void testCharset() {\n        assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=UTF-8\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1\"));\n        assertNull(DataUtil.getCharsetFromContentType(\"text/html\"));\n        assertNull(DataUtil.getCharsetFromContentType(null));\n        assertNull(DataUtil.getCharsetFromContentType(\"text/html;charset=Unknown\"));\n    }\n\n    @Test\n    public void testQuotedCharset() {\n        assertEquals(\"utf-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"utf-8\\\"\"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=\\\"UTF-8\\\"\"));\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"ISO-8859-1\\\"\"));\n        assertNull(DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"Unsupported\\\"\"));\n        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset='UTF-8'\"));\n    }\n\n    private ControllableInputStream stream(String data) {\n        return ControllableInputStream.wrap(new ByteArrayInputStream(data.getBytes(StandardCharsets.UTF_8)), 0);\n    }\n\n    private ControllableInputStream stream(String data, String charset) {\n        return ControllableInputStream.wrap(new ByteArrayInputStream(data.getBytes(Charset.forName(charset))), 0);\n    }\n\n    @Test\n    public void discardsSpuriousByteOrderMark() throws IOException {\n        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n        Document doc = DataUtil.parseInputStream(stream(html), \"UTF-8\", \"http://foo.com/\", Parser.htmlParser());\n        assertEquals(\"One\", doc.head().text());\n    }\n\n    @Test\n    public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() throws IOException {\n        String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n        Document doc = DataUtil.parseInputStream(stream(html), null, \"http://foo.com/\", Parser.htmlParser());\n        assertEquals(\"One\", doc.head().text());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n    }\n\n    @Test\n    public void shouldNotThrowExceptionOnEmptyCharset() {\n        assertNull(DataUtil.getCharsetFromContentType(\"text/html; charset=\"));\n        assertNull(DataUtil.getCharsetFromContentType(\"text/html; charset=;\"));\n    }\n\n    @Test\n    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {\n        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1, charset=1251\"));\n    }\n\n    @Test\n    public void shouldCorrectCharsetForDuplicateCharsetString() {\n        assertEquals(\"iso-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=charset=iso-8859-1\"));\n    }\n\n    @Test\n    public void shouldReturnNullForIllegalCharsetNames() {\n        assertNull(DataUtil.getCharsetFromContentType(\"text/html; charset=$HJKDF\u00a7$/(\"));\n    }\n\n    @Test\n    public void generatesMimeBoundaries() {\n        String m1 = DataUtil.mimeBoundary();\n        String m2 = DataUtil.mimeBoundary();\n\n        assertEquals(DataUtil.boundaryLength, m1.length());\n        assertEquals(DataUtil.boundaryLength, m2.length());\n        assertNotSame(m1, m2);\n    }\n\n    @Test\n    public void wrongMetaCharsetFallback() throws IOException {\n        String html = \"<html><head><meta charset=iso-8></head><body></body></html>\";\n\n        Document doc = DataUtil.parseInputStream(stream(html), null, \"http://example.com\", Parser.htmlParser());\n\n        final String expected = \"<html>\\n\" +\n                \" <head>\\n\" +\n                \"  <meta charset=\\\"iso-8\\\">\\n\" +\n                \" </head>\\n\" +\n                \" <body></body>\\n\" +\n                \"</html>\";\n\n        assertEquals(expected, doc.toString());\n    }\n\n    @Test\n    public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {\n        String html = \"<html><head>\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html\\\">\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=euc-kr\\\">\" +\n                \"</head><body>\ud55c\uad6d\uc5b4</body></html>\";\n\n        Document doc = DataUtil.parseInputStream(stream(html, \"euc-kr\"), null, \"http://example.com\", Parser.htmlParser());\n\n        assertEquals(\"\ud55c\uad6d\uc5b4\", doc.body().text());\n    }\n\n    @Test\n    public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {\n        String html = \"<html><head>\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=iso-8859-1\\\">\" +\n                \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=koi8-u\\\">\" +\n                \"</head><body>\u00dcbergr\u00f6\u00dfentr\u00e4ger</body></html>\";\n\n        Document doc = DataUtil.parseInputStream(stream(html, \"iso-8859-1\"), null, \"http://example.com\", Parser.htmlParser());\n\n        assertEquals(\"\u00dcbergr\u00f6\u00dfentr\u00e4ger\", doc.body().text());\n    }\n\n    @Test\n    public void parseSequenceInputStream() throws IOException {\n        // https://github.com/jhy/jsoup/pull/1671\n        File in = getFile(\"/htmltests/medium.html\");\n        String fileContent = new String(Files.readAllBytes(in.toPath()));\n        int halfLength = fileContent.length() / 2;\n        String firstPart = fileContent.substring(0, halfLength);\n        String secondPart = fileContent.substring(halfLength);\n        SequenceInputStream sequenceStream = new SequenceInputStream(\n                stream(firstPart),\n                stream(secondPart)\n        );\n        ControllableInputStream stream = ControllableInputStream.wrap(sequenceStream, 0);\n        Document doc = DataUtil.parseInputStream(stream, null, \"\", Parser.htmlParser());\n        assertEquals(fileContent, doc.outerHtml());\n    }\n\n    @Test\n    public void supportsBOMinFiles() throws IOException {\n        // test files from http://www.i18nl10n.com/korean/utftest/\n        File in = getFile(\"/bomtests/bom_utf16be.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-16BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf16le.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-16LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32be.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-32BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32le.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertTrue(doc.title().contains(\"UTF-32LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n    }\n\n    @Test\n    public void streamerSupportsBOMinFiles() throws IOException {\n        // test files from http://www.i18nl10n.com/korean/utftest/\n        Path in = getFile(\"/bomtests/bom_utf16be.html\").toPath();\n        Parser parser = Parser.htmlParser();\n        Document doc = DataUtil.streamParser(in, null, \"http://example.com\", parser).complete();\n        assertTrue(doc.title().contains(\"UTF-16BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf16le.html\").toPath();\n        doc = DataUtil.streamParser(in, null, \"http://example.com\", parser).complete();\n        assertTrue(doc.title().contains(\"UTF-16LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32be.html\").toPath();\n        doc = DataUtil.streamParser(in, null, \"http://example.com\", parser).complete();\n        assertTrue(doc.title().contains(\"UTF-32BE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n\n        in = getFile(\"/bomtests/bom_utf32le.html\").toPath();\n        doc = DataUtil.streamParser(in, null, \"http://example.com\", parser).complete();\n        assertTrue(doc.title().contains(\"UTF-32LE\"));\n        assertTrue(doc.text().contains(\"\uac00\uac01\uac02\uac03\uac04\uac05\"));\n    }\n\n    @Test\n    public void supportsUTF8BOM() throws IOException {\n        File in = getFile(\"/bomtests/bom_utf8.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertEquals(\"OK\", doc.head().select(\"title\").text());\n    }\n\n    @Test\n    public void noExtraNULLBytes() throws IOException {\n    \tfinal byte[] b = \"<html><head><meta charset=\\\"UTF-8\\\"></head><body><div><u>\u00fc</u>\u00fc</div></body></html>\".getBytes(StandardCharsets.UTF_8);\n    \t\n    \tDocument doc = Jsoup.parse(new ByteArrayInputStream(b), null, \"\");\n    \tassertFalse( doc.outerHtml().contains(\"\\u0000\") );\n    }\n\n    @Test\n    public void supportsZippedUTF8BOM() throws IOException {\n        File in = getFile(\"/bomtests/bom_utf8.html.gz\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com\");\n        assertEquals(\"OK\", doc.head().select(\"title\").text());\n        assertEquals(\"There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.\", doc.body().text());\n    }\n\n    @Test\n    public void streamerSupportsZippedUTF8BOM() throws IOException {\n        Path in = getFile(\"/bomtests/bom_utf8.html.gz\").toPath();\n        Document doc = DataUtil.streamParser(in, null, \"http://example.com\", Parser.htmlParser()).complete();\n        assertEquals(\"OK\", doc.head().select(\"title\").text());\n        assertEquals(\"There is a UTF8 BOM at the top (before the XML decl). If not read correctly, will look like a non-joining space.\", doc.body().text());\n    }\n\n    @Test\n    public void supportsXmlCharsetDeclaration() throws IOException {\n        String encoding = \"iso-8859-1\";\n        InputStream soup = new ByteArrayInputStream((\n                \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\" +\n                        \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\" +\n                        \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">Hell\u00f6 W\u00f6rld!</html>\"\n        ).getBytes(Charset.forName(encoding)));\n\n        Document doc = Jsoup.parse(soup, null, \"\");\n        assertEquals(\"Hell\u00f6 W\u00f6rld!\", doc.body().text());\n    }\n\n\n    @Test\n    public void loadsGzipFile() throws IOException {\n        File in = getFile(\"/htmltests/gzip.html.gz\");\n        Document doc = Jsoup.parse(in, null);\n        assertEquals(\"Gzip test\", doc.title());\n        assertEquals(\"This is a gzipped HTML file.\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test\n    public void loadsGzipPath() throws IOException {\n        Path in = getPath(\"/htmltests/gzip.html.gz\");\n        Document doc = Jsoup.parse(in, null);\n        assertEquals(\"Gzip test\", doc.title());\n        assertEquals(\"This is a gzipped HTML file.\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test\n    public void loadsZGzipFile() throws IOException {\n        // compressed on win, with z suffix\n        File in = getFile(\"/htmltests/gzip.html.z\");\n        Document doc = Jsoup.parse(in, null);\n        assertEquals(\"Gzip test\", doc.title());\n        assertEquals(\"This is a gzipped HTML file.\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test\n    public void loadsZGzipPath() throws IOException {\n        // compressed on win, with z suffix\n        Path in = getPath(\"/htmltests/gzip.html.z\");\n        Document doc = Jsoup.parse(in, null);\n        assertEquals(\"Gzip test\", doc.title());\n        assertEquals(\"This is a gzipped HTML file.\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test\n    public void handlesFakeGzipFile() throws IOException {\n        File in = getFile(\"/htmltests/fake-gzip.html.gz\");\n        Document doc = Jsoup.parse(in, null);\n        assertEquals(\"This is not gzipped\", doc.title());\n        assertEquals(\"And should still be readable.\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test\n    public void handlesFakeGzipPath() throws IOException {\n        Path in = getPath(\"/htmltests/fake-gzip.html.gz\");\n        Document doc = Jsoup.parse(in, null);\n        assertEquals(\"This is not gzipped\", doc.title());\n        assertEquals(\"And should still be readable.\", doc.selectFirst(\"p\").text());\n    }\n\n    // an input stream to give a range of output sizes, that changes on each read\n    static class VaryingReadInputStream extends InputStream {\n        final InputStream in;\n        int stride = 0;\n\n        VaryingReadInputStream(InputStream in) {\n            this.in = in;\n        }\n\n        public int read() throws IOException {\n            return in.read();\n        }\n\n        public int read(byte[] b) throws IOException {\n            return in.read(b, 0, Math.min(b.length, ++stride));\n        }\n\n        public int read(byte[] b, int off, int len) throws IOException {\n            return in.read(b, off, Math.min(len, ++stride));\n        }\n    }\n\n    @Test\n    void handlesChunkedInputStream() throws IOException {\n        File inputFile = ParseTest.getFile(\"/htmltests/large.html\");\n        String input = ParseTest.getFileAsString(inputFile);\n        VaryingReadInputStream stream = new VaryingReadInputStream(ParseTest.inputStreamFrom(input));\n\n        Document expected = Jsoup.parse(input, \"https://example.com\");\n        Document doc = Jsoup.parse(stream, null, \"https://example.com\");\n        assertTrue(doc.hasSameValue(expected));\n    }\n\n    @Test\n    void handlesUnlimitedRead() throws IOException {\n        File inputFile = ParseTest.getFile(\"/htmltests/large.html\");\n        String input = ParseTest.getFileAsString(inputFile);\n        VaryingReadInputStream stream = new VaryingReadInputStream(ParseTest.inputStreamFrom(input));\n\n        ByteBuffer byteBuffer = DataUtil.readToByteBuffer(stream, 0);\n        String read = new String(byteBuffer.array(), 0, byteBuffer.limit(), StandardCharsets.UTF_8);\n\n        assertEquals(input, read);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/helper/HttpConnectionTest.java.HttpConnectionTest", "name": "HttpConnectionTest", "file_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java", "superclasses": "", "methods": ["[void]canCreateEmptyConnection()", "[void]throwsExceptionOnResponseWithoutExecute()", "[void]throwsExceptionOnParseWithoutExecute()", "[void]throwsExceptionOnBodyWithoutExecute()", "[void]throwsExceptionOnBodyAsBytesWithoutExecute()", "[void]headers()", "[void]sameHeadersCombineWithComma()", "[void]multipleHeaders()", "[void]ignoresEmptySetCookies()", "[void]connectWithUrl()", "[void]throwsOnMalformedUrl()", "[void]userAgent()", "[void]timeout()", "[void]referrer()", "[void]method()", "[void]throwsOnOddData()", "[void]data()", "[void]cookie()", "[void]inputStream()", "[void]requestBody()", "[void]encodeUrl()", "[void]encodeUrlSupplementary()", "[void]encodedUrlDoesntDoubleEncode()", "[void]urlPathIsPreservedDoesntDoubleEncode()", "[void]connectToEncodedUrl()", "[void]encodedUrlPathIsPreserved()", "[void]urlPathPlusIsPreserved()", "[void]noUrlThrowsValidationError()", "[void]handlesHeaderEncodingOnRequest()", "[void]supportsInternationalDomainNames()", "[void]supportsIdnWithPort()", "[void]validationErrorsOnExecute()", "[void]testMalformedException()", "[void]setHeaderWithUnicodeValue()", "[void]setAuth()"], "method_uris": ["src/test/java/org/jsoup/helper/HttpConnectionTest.java.HttpConnectionTest.[void]caseInsensitiveHeaders(Locale)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HttpConnectionTest {\n    /* most actual network http connection tests are in integration */\n\n    @Test public void canCreateEmptyConnection() {\n        HttpConnection con = new HttpConnection();\n        assertEquals(Connection.Method.GET, con.request().method());\n        assertThrows(IllegalArgumentException.class, () -> {\n            URL url = con.request().url();\n        });\n    }\n\n    @Test public void throwsExceptionOnResponseWithoutExecute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection con = HttpConnection.connect(\"http://example.com\");\n            con.response();\n        });\n    }\n\n    @Test public void throwsExceptionOnParseWithoutExecute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection con = HttpConnection.connect(\"http://example.com\");\n            con.response().parse();\n        });\n    }\n\n    @Test public void throwsExceptionOnBodyWithoutExecute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection con = HttpConnection.connect(\"http://example.com\");\n            con.response().body();\n        });\n    }\n\n    @Test public void throwsExceptionOnBodyAsBytesWithoutExecute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection con = HttpConnection.connect(\"http://example.com\");\n            con.response().bodyAsBytes();\n        });\n    }\n\n    @MultiLocaleTest\n    public void caseInsensitiveHeaders(Locale locale) {\n        Locale.setDefault(locale);\n\n        Connection.Response res = new HttpConnection.Response();\n        res.header(\"Accept-Encoding\", \"gzip\");\n        res.header(\"content-type\", \"text/html\");\n        res.header(\"refErrer\", \"http://example.com\");\n\n        assertTrue(res.hasHeader(\"Accept-Encoding\"));\n        assertTrue(res.hasHeader(\"accept-encoding\"));\n        assertTrue(res.hasHeader(\"accept-Encoding\"));\n        assertTrue(res.hasHeader(\"ACCEPT-ENCODING\"));\n\n        assertEquals(\"gzip\", res.header(\"accept-Encoding\"));\n        assertEquals(\"gzip\", res.header(\"ACCEPT-ENCODING\"));\n        assertEquals(\"text/html\", res.header(\"Content-Type\"));\n        assertEquals(\"http://example.com\", res.header(\"Referrer\"));\n\n        res.removeHeader(\"Content-Type\");\n        assertFalse(res.hasHeader(\"content-type\"));\n\n        res.removeHeader(\"ACCEPT-ENCODING\");\n        assertFalse(res.hasHeader(\"Accept-Encoding\"));\n\n        res.header(\"ACCEPT-ENCODING\", \"deflate\");\n        assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n        assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n    }\n\n    @Test public void headers() {\n        Connection con = HttpConnection.connect(\"http://example.com\");\n        Map<String, String> headers = new HashMap<>();\n        headers.put(\"content-type\", \"text/html\");\n        headers.put(\"Connection\", \"keep-alive\");\n        headers.put(\"Host\", \"http://example.com\");\n        con.headers(headers);\n        assertEquals(\"text/html\", con.request().header(\"content-type\"));\n        assertEquals(\"keep-alive\", con.request().header(\"Connection\"));\n        assertEquals(\"http://example.com\", con.request().header(\"Host\"));\n    }\n\n    @Test public void sameHeadersCombineWithComma() {\n        Map<String, List<String>> headers = new HashMap<>();\n        List<String> values = new ArrayList<>();\n        values.add(\"no-cache\");\n        values.add(\"no-store\");\n        headers.put(\"Cache-Control\", values);\n        HttpConnection.Response res = new HttpConnection.Response();\n        res.processResponseHeaders(headers);\n        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n    }\n\n    @Test public void multipleHeaders() {\n        Connection.Request req = new HttpConnection.Request();\n        req.addHeader(\"Accept\", \"Something\");\n        req.addHeader(\"Accept\", \"Everything\");\n        req.addHeader(\"Foo\", \"Bar\");\n\n        assertTrue(req.hasHeader(\"Accept\"));\n        assertTrue(req.hasHeader(\"ACCEpt\"));\n        assertEquals(\"Something, Everything\", req.header(\"accept\"));\n        assertTrue(req.hasHeader(\"fOO\"));\n        assertEquals(\"Bar\", req.header(\"foo\"));\n\n        List<String> accept = req.headers(\"accept\");\n        assertEquals(2, accept.size());\n        assertEquals(\"Something\", accept.get(0));\n        assertEquals(\"Everything\", accept.get(1));\n\n        Map<String, List<String>> headers = req.multiHeaders();\n        assertEquals(accept, headers.get(\"Accept\"));\n        assertEquals(\"Bar\", headers.get(\"Foo\").get(0));\n\n        assertTrue(req.hasHeader(\"Accept\"));\n        assertTrue(req.hasHeaderWithValue(\"accept\", \"Something\"));\n        assertTrue(req.hasHeaderWithValue(\"accept\", \"Everything\"));\n        assertFalse(req.hasHeaderWithValue(\"accept\", \"Something for nothing\"));\n\n        req.removeHeader(\"accept\");\n        headers = req.multiHeaders();\n        assertEquals(\"Bar\", headers.get(\"Foo\").get(0));\n        assertFalse(req.hasHeader(\"Accept\"));\n        assertNull(headers.get(\"Accept\"));\n    }\n\n    @Test public void ignoresEmptySetCookies() {\n        // prep http response header map\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Set-Cookie\", Collections.emptyList());\n        HttpConnection.Response res = new HttpConnection.Response();\n        res.processResponseHeaders(headers);\n        assertEquals(0, res.cookies().size());\n    }\n\n    @Test public void connectWithUrl() throws MalformedURLException {\n        Connection con = HttpConnection.connect(new URL(\"http://example.com\"));\n        assertEquals(\"http://example.com\", con.request().url().toExternalForm());\n    }\n\n    @Test public void throwsOnMalformedUrl() {\n        assertThrows(IllegalArgumentException.class, () -> HttpConnection.connect(\"bzzt\"));\n    }\n\n    @Test public void userAgent() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(HttpConnection.DEFAULT_UA, con.request().header(\"User-Agent\"));\n        con.userAgent(\"Mozilla\");\n        assertEquals(\"Mozilla\", con.request().header(\"User-Agent\"));\n    }\n\n    @Test public void timeout() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(30 * 1000, con.request().timeout());\n        con.timeout(1000);\n        assertEquals(1000, con.request().timeout());\n    }\n\n    @Test public void referrer() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.referrer(\"http://foo.com\");\n        assertEquals(\"http://foo.com\", con.request().header(\"Referer\"));\n    }\n\n    @Test public void method() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        assertEquals(Connection.Method.GET, con.request().method());\n        con.method(Connection.Method.POST);\n        assertEquals(Connection.Method.POST, con.request().method());\n    }\n\n    @Test public void throwsOnOddData() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection con = HttpConnection.connect(\"http://example.com/\");\n            con.data(\"Name\", \"val\", \"what\");\n        });\n    }\n\n    @Test public void data() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.data(\"Name\", \"Val\", \"Foo\", \"bar\");\n        Collection<Connection.KeyVal> values = con.request().data();\n        Object[] data =  values.toArray();\n        Connection.KeyVal one = (Connection.KeyVal) data[0];\n        Connection.KeyVal two = (Connection.KeyVal) data[1];\n        assertEquals(\"Name\", one.key());\n        assertEquals(\"Val\", one.value());\n        assertEquals(\"Foo\", two.key());\n        assertEquals(\"bar\", two.value());\n    }\n\n    @Test public void cookie() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.cookie(\"Name\", \"Val\");\n        assertEquals(\"Val\", con.request().cookie(\"Name\"));\n    }\n\n    @Test public void inputStream() {\n        Connection.KeyVal kv = HttpConnection.KeyVal.create(\"file\", \"thumb.jpg\", ParseTest.inputStreamFrom(\"Check\"));\n        assertEquals(\"file\", kv.key());\n        assertEquals(\"thumb.jpg\", kv.value());\n        assertTrue(kv.hasInputStream());\n\n        kv = HttpConnection.KeyVal.create(\"one\", \"two\");\n        assertEquals(\"one\", kv.key());\n        assertEquals(\"two\", kv.value());\n        assertFalse(kv.hasInputStream());\n    }\n\n    @Test public void requestBody() {\n        Connection con = HttpConnection.connect(\"http://example.com/\");\n        con.requestBody(\"foo\");\n        assertEquals(\"foo\", con.request().requestBody());\n    }\n\n    @Test public void encodeUrl() throws MalformedURLException {\n        URL url1 = new URL(\"https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag\");\n        URL url2 = new UrlBuilder(url1).build();\n        assertEquals(\"https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag\", url2.toExternalForm());\n    }\n\n    @Test public void encodeUrlSupplementary() throws MalformedURLException {\n        URL url1 = new URL(\"https://example.com/tools/test\ud83d\udca9.html\"); // = \"/tools/test\\uD83D\\uDCA9.html\"\n        URL url2 = new UrlBuilder(url1).build();\n        assertEquals(\"https://example.com/tools/test%F0%9F%92%A9.html\", url2.toExternalForm());\n    }\n\n    @Test void encodedUrlDoesntDoubleEncode() throws MalformedURLException {\n        URL url1 = new URL(\"https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag%20ment\");\n        URL url2 = new UrlBuilder(url1).build();\n        URL url3 = new UrlBuilder(url2).build();\n        assertEquals(\"https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag%20ment\", url2.toExternalForm());\n        assertEquals(\"https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag%20ment\", url3.toExternalForm());\n    }\n\n    @Test void urlPathIsPreservedDoesntDoubleEncode() throws MalformedURLException {\n        URL url1 = new URL(\"https://test.com/[foo] bar+/%5BOne%5D?q=white space#frag ment\");\n        URL url2 = new UrlBuilder(url1).build();\n        URL url3 = new UrlBuilder(url2).build();\n        assertEquals(\"https://test.com/%5Bfoo%5D%20bar+/%5BOne%5D?q=white+space#frag%20ment\", url2.toExternalForm());\n        assertEquals(\"https://test.com/%5Bfoo%5D%20bar+/%5BOne%5D?q=white+space#frag%20ment\", url3.toExternalForm());\n    }\n\n    @Test void connectToEncodedUrl() {\n        Connection connect = Jsoup.connect(\"https://example.com/a%20b%20c?query+string\");\n        URL url = connect.request().url();\n        assertEquals(\"https://example.com/a%20b%20c?query+string\", url.toExternalForm());\n    }\n\n    @Test void encodedUrlPathIsPreserved() {\n        // https://github.com/jhy/jsoup/issues/1952\n        Connection connect = Jsoup.connect(\"https://example.com/%2B32\");\n        URL url = connect.request().url();\n        assertEquals(\"https://example.com/%2B32\", url.toExternalForm());\n    }\n\n    @Test void urlPathPlusIsPreserved() {\n        // https://github.com/jhy/jsoup/issues/1952\n        Connection connect = Jsoup.connect(\"https://example.com/123+456\");\n        URL url = connect.request().url();\n        assertEquals(\"https://example.com/123+456\", url.toExternalForm());\n    }\n\n    @Test public void noUrlThrowsValidationError() throws IOException {\n        HttpConnection con = new HttpConnection();\n        boolean threw = false;\n        try {\n            con.execute();\n        } catch (IllegalArgumentException e) {\n            threw = true;\n            assertEquals(\"URL not set. Make sure to call #url(...) before executing the request.\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n\n    @Test public void handlesHeaderEncodingOnRequest() {\n        Connection.Request req = new HttpConnection.Request();\n        req.addHeader(\"xxx\", \"\u00e9\");\n    }\n\n    @Test public void supportsInternationalDomainNames() throws MalformedURLException {\n        String idn = \"https://www.\u6d4b\u8bd5.\u6d4b\u8bd5/foo.html?bar\";\n        String puny = \"https://www.xn--0zwm56d.xn--0zwm56d/foo.html?bar\";\n\n        Connection con = Jsoup.connect(idn);\n        assertEquals(puny, con.request().url().toExternalForm());\n\n        HttpConnection.Request req = new HttpConnection.Request();\n        req.url(new URL(idn));\n        assertEquals(puny, req.url().toExternalForm());\n    }\n\n    @Test void supportsIdnWithPort() throws MalformedURLException {\n        String idn = \"https://www.\u6d4b\u8bd5.\u6d4b\u8bd5:9001/foo.html?bar\";\n        String puny = \"https://www.xn--0zwm56d.xn--0zwm56d:9001/foo.html?bar\";\n\n        Connection con = Jsoup.connect(idn);\n        assertEquals(puny, con.request().url().toExternalForm());\n\n        HttpConnection.Request req = new HttpConnection.Request();\n        req.url(new URL(idn));\n        assertEquals(puny, req.url().toExternalForm());\n    }\n\n    @Test public void validationErrorsOnExecute() throws IOException {\n        Connection con = new HttpConnection();\n        boolean urlThrew = false;\n        try {\n            con.execute();\n        } catch (IllegalArgumentException e) {\n            urlThrew = e.getMessage().contains(\"URL\");\n        }\n        assertTrue(urlThrew);\n    }\n\n    @Test void testMalformedException() {\n        boolean threw = false;\n        try {\n            Jsoup.connect(\"jsoup.org/test\");\n        } catch (IllegalArgumentException e) {\n            threw = true;\n            assertEquals(\"The supplied URL, 'jsoup.org/test', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n\n    @Test void setHeaderWithUnicodeValue() {\n        Connection connect = Jsoup.connect(\"https://example.com\");\n        String value = \"/foo/\u6211\u7684\";\n        connect.header(\"Key\", value);\n\n        String actual = connect.request().header(\"Key\");\n        assertEquals(value, actual);\n    }\n\n    @Test void setAuth() throws MalformedURLException {\n        Connection con = Jsoup.newSession();\n\n        assertNull(con.request().auth());\n\n        RequestAuthenticator auth1 = new RequestAuthenticator() {\n            @Override public PasswordAuthentication authenticate(Context auth) {\n                return auth.credentials(\"foo\", \"bar\");\n            }\n        };\n\n        RequestAuthenticator auth2 = new RequestAuthenticator() {\n            @Override public PasswordAuthentication authenticate(Context auth) {\n                return auth.credentials(\"qux\", \"baz\");\n            }\n        };\n\n        con.auth(auth1);\n        assertSame(con.request().auth(), auth1);\n\n        con.auth(auth2);\n        assertSame(con.request().auth(), auth2);\n\n        con.request().auth(auth1);\n        assertSame(con.request().auth(), auth1);\n\n        PasswordAuthentication creds = auth1.authenticate(\n            new RequestAuthenticator.Context(new URL(\"http://example.com\"), Authenticator.RequestorType.SERVER, \"Realm\"));\n        assertNotNull(creds);\n        assertEquals(\"foo\", creds.getUserName());\n        assertEquals(\"bar\", new String(creds.getPassword()));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/helper/ValidateTest.java.ValidateTest", "name": "ValidateTest", "file_path": "src/test/java/org/jsoup/helper/ValidateTest.java", "superclasses": "", "methods": ["[void]testNotNull()", "[void]stacktraceFiltersOutValidateClass()", "[void]nonnullParam()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ValidateTest {\n    @Test\n    public void testNotNull() {\n        Validate.notNull(\"foo\");\n        boolean threw = false;\n        try {\n            Validate.notNull(null);\n        } catch (IllegalArgumentException e) {\n            threw = true;\n        }\n        Assertions.assertTrue(threw);\n    }\n\n    @Test void stacktraceFiltersOutValidateClass() {\n        boolean threw = false;\n        try {\n            Validate.notNull(null);\n        } catch (ValidationException e) {\n            threw = true;\n            assertEquals(\"Object must not be null\", e.getMessage());\n            StackTraceElement[] stackTrace = e.getStackTrace();\n            for (StackTraceElement trace : stackTrace) {\n                assertNotEquals(trace.getClassName(), Validate.class.getName());\n            }\n            assertTrue(stackTrace.length >= 1);\n        }\n        Assertions.assertTrue(threw);\n    }\n\n    @Test void nonnullParam() {\n        boolean threw = true;\n        try {\n            Validate.notNullParam(null, \"foo\");\n        } catch (ValidationException e) {\n            assertEquals(\"The parameter 'foo' must not be null.\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/helper/W3CDomTest.java.W3CDomTest", "name": "W3CDomTest", "file_path": "src/test/java/org/jsoup/helper/W3CDomTest.java", "superclasses": "", "methods": ["[void]simpleConversion()", "[void]namespacePreservation()", "[void]handlesInvalidAttributeNames()", "[void]htmlInputDocMaintainsHtmlAttributeNames()", "[void]xmlInputDocMaintainsHtmlAttributeNames()", "[void]handlesInvalidTagAsText()", "[void]canConvertToCustomDocument()", "[void]treatsUndeclaredNamespaceAsLocalName()", "[void]xmlnsXpathTest()", "[void]xhtmlNoNamespace()", "[void]canDisableNamespaces()", "[void]testRoundTripDoctype()", "[void]canOutputHtmlWithoutNamespace()", "[void]convertsElementsAndMaintainsSource()", "[void]canXmlParseCdataNodes()", "[void]handlesEmptyDoctype()", "[void]testHtmlParseAttributesAreCaseInsensitive()"], "method_uris": ["src/test/java/org/jsoup/helper/W3CDomTest.java.W3CDomTest.[Document]parseXml(String,boolean)", "src/test/java/org/jsoup/helper/W3CDomTest.java.W3CDomTest.[NodeList]xpath(Document,String)", "src/test/java/org/jsoup/helper/W3CDomTest.java.W3CDomTest.[String]output(String,boolean)", "src/test/java/org/jsoup/helper/W3CDomTest.java.W3CDomTest.[void]assertEqualsIgnoreCase(String,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class W3CDomTest {\n\n    private static Document parseXml(String xml, boolean nameSpaceAware) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            factory.setNamespaceAware(nameSpaceAware);\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            builder.setEntityResolver((publicId, systemId) -> {\n                if (systemId.contains(\"about:legacy-compat\")) { // <!doctype html>\n                    return new InputSource(new StringReader(\"\"));\n                } else {\n                    return null;\n                }\n            });\n            Document dom = builder.parse(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));\n            dom.normalizeDocument();\n            return dom;\n        } catch (Exception e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    @Test\n    public void simpleConversion() {\n        String html = \"<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')\";\n        org.jsoup.nodes.Document doc = Jsoup.parse(html);\n\n        W3CDom w3c = new W3CDom();\n        Document wDoc = w3c.fromJsoup(doc);\n        NodeList meta = wDoc.getElementsByTagName(\"META\");\n        assertEquals(0, meta.getLength());\n\n        String out = W3CDom.asString(wDoc, W3CDom.OutputXml());\n        String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><title>W3c</title></head><body><p class=\\\"one\\\" id=\\\"12\\\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>\";\n        assertEquals(expected, TextUtil.stripNewlines(out));\n\n        Document roundTrip = parseXml(out, true);\n        assertEquals(\"Text\", roundTrip.getElementsByTagName(\"p\").item(0).getTextContent());\n\n        // check we can set properties\n        Map<String, String> properties = W3CDom.OutputXml();\n        properties.put(OutputKeys.INDENT, \"yes\");\n        String furtherOut = W3CDom.asString(wDoc, properties);\n        assertTrue(furtherOut.length() > out.length()); // wanted to assert formatting, but actual indentation is platform specific so breaks in CI\n        String furtherExpected =\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><title>W3c</title></head><body><p class=\\\"one\\\" id=\\\"12\\\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>\";\n        assertEquals(furtherExpected, TextUtil.stripNewlines(furtherOut)); // on windows, DOM will write newlines as \\r\\n\n    }\n\n    @Test\n    public void namespacePreservation() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/namespaces.xhtml\");\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(in, \"UTF-8\");\n\n        Document doc;\n        org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n        doc = jDom.fromJsoup(jsoupDoc);\n\n        Node htmlEl = doc.getChildNodes().item(0);\n        assertEquals(\"http://www.w3.org/1999/xhtml\", htmlEl.getNamespaceURI());\n        assertEquals(\"html\", htmlEl.getLocalName());\n        assertEquals(\"html\", htmlEl.getNodeName());\n\n        // inherits default namespace\n        Node head = htmlEl.getFirstChild().getNextSibling();\n        assertEquals(\"http://www.w3.org/1999/xhtml\", head.getNamespaceURI());\n        assertEquals(\"head\", head.getLocalName());\n        assertEquals(\"head\", head.getNodeName());\n\n        Node epubTitle = htmlEl.getChildNodes().item(3).getChildNodes().item(3);\n        assertEquals(\"Check\", epubTitle.getTextContent());\n        assertEquals(\"http://www.idpf.org/2007/ops\", epubTitle.getNamespaceURI());\n        assertEquals(\"title\", epubTitle.getLocalName());\n        assertEquals(\"epub:title\", epubTitle.getNodeName());\n\n        Node xSection = epubTitle.getNextSibling().getNextSibling();\n        assertEquals(\"urn:test\", xSection.getNamespaceURI());\n        assertEquals(\"section\", xSection.getLocalName());\n        assertEquals(\"x:section\", xSection.getNodeName());\n\n        // https://github.com/jhy/jsoup/issues/977\n        // does not keep last set namespace\n        Node svg = xSection.getNextSibling().getNextSibling();\n        assertEquals(\"http://www.w3.org/2000/svg\", svg.getNamespaceURI());\n        assertEquals(\"svg\", svg.getLocalName());\n        assertEquals(\"svg\", svg.getNodeName());\n\n        Node path = svg.getChildNodes().item(1);\n        assertEquals(\"http://www.w3.org/2000/svg\", path.getNamespaceURI());\n        assertEquals(\"path\", path.getLocalName());\n        assertEquals(\"path\", path.getNodeName());\n\n        Node clip = path.getChildNodes().item(1);\n        assertEquals(\"http://example.com/clip\", clip.getNamespaceURI());\n        assertEquals(\"clip\", clip.getLocalName());\n        assertEquals(\"clip\", clip.getNodeName());\n        assertEquals(\"456\", clip.getTextContent());\n\n        Node picture = svg.getNextSibling().getNextSibling();\n        assertEquals(\"http://www.w3.org/1999/xhtml\", picture.getNamespaceURI());\n        assertEquals(\"picture\", picture.getLocalName());\n        assertEquals(\"picture\", picture.getNodeName());\n\n        Node img = picture.getFirstChild();\n        assertEquals(\"http://www.w3.org/1999/xhtml\", img.getNamespaceURI());\n        assertEquals(\"img\", img.getLocalName());\n        assertEquals(\"img\", img.getNodeName());\n\n    }\n\n    @Test\n    public void handlesInvalidAttributeNames() {\n        String html = \"<html><head></head><body style=\\\"color: red\\\" \\\" name\\\"></body></html>\";\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(html);\n        Element body = jsoupDoc.select(\"body\").first();\n        assertTrue(body.hasAttr(\"\\\"\")); // actually an attribute with key '\"'. Correct per HTML5 spec, but w3c xml dom doesn't dig it\n        assertTrue(body.hasAttr(\"name\\\"\"));\n\n        Document w3Doc = W3CDom.convert(jsoupDoc);\n        String xml = W3CDom.asString(w3Doc, W3CDom.OutputXml());\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head/><body _=\\\"\\\" name_=\\\"\\\" style=\\\"color: red\\\"/></html>\", xml);\n    }\n\n    @Test\n    public void htmlInputDocMaintainsHtmlAttributeNames() {\n        String html = \"<!DOCTYPE html><html><head></head><body><p h\u00e0nh=\\\"1\\\" h\u00ecnh=\\\"2\\\">unicode attr names</p></body></html>\";\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(html);\n\n        Document w3Doc = W3CDom.convert(jsoupDoc);\n        String out = W3CDom.asString(w3Doc, W3CDom.OutputHtml());\n        String expected = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body><p h\u00e0nh=\\\"1\\\" h\u00ecnh=\\\"2\\\">unicode attr names</p></body></html>\";\n        assertEquals(expected, TextUtil.stripNewlines(out));\n    }\n\n    @Test\n    public void xmlInputDocMaintainsHtmlAttributeNames() {\n        String html = \"<!DOCTYPE html><html><head></head><body><p h\u00e0nh=\\\"1\\\" h\u00ecnh=\\\"2\\\">unicode attr names coerced</p></body></html>\";\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(html);\n        jsoupDoc.outputSettings().syntax(org.jsoup.nodes.Document.OutputSettings.Syntax.xml);\n\n        Document w3Doc = W3CDom.convert(jsoupDoc);\n        String out = W3CDom.asString(w3Doc, W3CDom.OutputHtml());\n        String expected = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body><p h_nh=\\\"2\\\">unicode attr names coerced</p></body></html>\";\n        assertEquals(expected, TextUtil.stripNewlines(out));\n    }\n\n    @Test\n    public void handlesInvalidTagAsText() {\n        org.jsoup.nodes.Document jsoup = Jsoup.parse(\"<\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u3067\u9ad8\u53ce\u5165\uff01>Text <p>More</p>\");\n\n        Document w3Doc = W3CDom.convert(jsoup);\n        String xml = W3CDom.asString(w3Doc, W3CDom.OutputXml());\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head/><body>&lt;\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u3067\u9ad8\u53ce\u5165\uff01&gt;Text <p>More</p></body></html>\", xml);\n    }\n\n    @Test\n    public void canConvertToCustomDocument() throws ParserConfigurationException {\n        org.jsoup.nodes.Document document = Jsoup.parse(\"<html><div></div></html>\");\n\n        DocumentBuilderFactory localDocumentBuilderFactory = DocumentBuilderFactory.newInstance();\n        Document customDocumentResult = localDocumentBuilderFactory.newDocumentBuilder().newDocument();\n\n        W3CDom w3cDom = new W3CDom();\n        w3cDom.convert(document, customDocumentResult);\n\n        String html = W3CDom.asString(customDocumentResult, W3CDom.OutputHtml());\n        assertEquals(\"<html><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body><div></div></body></html>\", html);\n    }\n\n    @Test\n    public void treatsUndeclaredNamespaceAsLocalName() {\n        String html = \"<fb:like>One</fb:like>\";\n        org.jsoup.nodes.Document doc = Jsoup.parse(html);\n\n        Document w3Doc = new W3CDom().fromJsoup(doc);\n        Node htmlEl = w3Doc.getFirstChild();\n\n        assertEquals(\"http://www.w3.org/1999/xhtml\", htmlEl.getNamespaceURI());\n        assertEquals(\"html\", htmlEl.getLocalName());\n        assertEquals(\"html\", htmlEl.getNodeName());\n\n        Node fb = htmlEl.getFirstChild().getNextSibling().getFirstChild();\n        assertNull(fb.getNamespaceURI());\n        assertEquals(\"like\", fb.getLocalName());\n        assertEquals(\"fb:like\", fb.getNodeName());\n    }\n\n    @Test\n    public void xmlnsXpathTest() throws XPathExpressionException {\n        W3CDom w3c = new W3CDom();\n        String html = \"<html><body><div>hello</div></body></html>\";\n        Document dom = w3c.fromJsoup(Jsoup.parse(html));\n        NodeList nodeList = xpath(dom, \"//*[local-name()=\\\"body\\\"]\");// namespace aware; HTML namespace is default\n        assertEquals(\"div\", nodeList.item(0).getLocalName());\n\n        // default output is namespace aware, so query needs to be as well\n        html = \"<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>\";\n        dom = w3c.fromJsoup(Jsoup.parse(html));\n        nodeList = xpath(dom, \"//body\");\n        assertNull(nodeList); // no matches\n\n        dom = w3c.fromJsoup(Jsoup.parse(html));\n        nodeList = xpath(dom, \"//*[local-name()=\\\"body\\\"]\");\n        assertNotNull(nodeList);\n        assertEquals(1, nodeList.getLength());\n        assertEquals(\"div\", nodeList.item(0).getLocalName());\n        assertEquals(\"http://www.w3.org/1999/xhtml\", nodeList.item(0).getNamespaceURI());\n        assertNull(nodeList.item(0).getPrefix());\n\n        // get rid of the name space awareness\n        String xml = w3c.asString(dom);\n        dom = parseXml(xml, false);\n        Node item = (Node) xpath(dom, \"//body\");\n        assertEquals(\"body\", item.getNodeName());\n        assertNull(item.getNamespaceURI());\n        assertNull(item.getPrefix());\n\n        // put back, will get zero\n        dom = parseXml(xml, true);\n        nodeList = xpath(dom, \"//body\");\n        assertNull(nodeList);\n    }\n\n    @Test\n    public void xhtmlNoNamespace() throws XPathExpressionException {\n        W3CDom w3c = new W3CDom();\n        String html = \"<html><body><div>hello</div></body></html>\";\n        w3c.namespaceAware(false);\n        Document dom = w3c.fromJsoup(Jsoup.parse(html));\n        NodeList nodeList = xpath(dom, \"//body\");// no namespace\n        assertEquals(1, nodeList.getLength());\n        assertEquals(\"div\", nodeList.item(0).getLocalName());\n    }\n\n    @Test\n    void canDisableNamespaces() throws XPathExpressionException {\n        W3CDom w3c = new W3CDom();\n        assertTrue(w3c.namespaceAware());\n\n        w3c.namespaceAware(false);\n        assertFalse(w3c.namespaceAware());\n\n        String html = \"<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>\";\n        Document dom = w3c.fromJsoup(Jsoup.parse(html));\n        NodeList nodeList = xpath(dom, \"//body\");// no ns, so needs no prefix\n        assertEquals(\"div\", nodeList.item(0).getLocalName());\n    }\n\n    private NodeList xpath(Document w3cDoc, String query) throws XPathExpressionException {\n        XPathExpression xpath = XPathFactory.newInstance().newXPath().compile(query);\n        return ((NodeList) xpath.evaluate(w3cDoc, XPathConstants.NODE));\n    }\n\n    @Test\n    public void testRoundTripDoctype() {\n        // TODO - not super happy with this output - but plain DOM doesn't let it out, and don't want to rebuild the writer\n        // because we have Saxon on the test classpath, the transformer will change to that, and so case may change (e.g. Java base in META, Saxon is meta for HTML)\n        String base = \"<!DOCTYPE html><p>One</p>\";\n        assertEqualsIgnoreCase(\"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body><p>One</p></body></html>\", output(base, true));\n        assertEqualsIgnoreCase(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head/><body><p>One</p></body></html>\", output(base, false));\n\n        String publicDoc = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n        assertEqualsIgnoreCase(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body></body></html>\", output(publicDoc, true));\n        // different impls will have different XML formatting. OpenJDK 13 default gives this: <body /> but others have <body/>, so just check start\n        assertTrue(output(publicDoc, false).startsWith(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE html PUBLIC\"));\n\n        String systemDoc = \"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\">\";\n        assertEqualsIgnoreCase(\"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body></body></html>\", output(systemDoc, true));\n        assertEqualsIgnoreCase(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head/><body/></html>\", output(systemDoc, false));\n\n        String legacyDoc = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\";\n        assertEqualsIgnoreCase(\"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body></body></html>\", output(legacyDoc, true));\n        assertEqualsIgnoreCase(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\"><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head/><body/></html>\", output(legacyDoc, false));\n\n        String noDoctype = \"<p>One</p>\";\n        assertEqualsIgnoreCase(\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head><META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"></head><body><p>One</p></body></html>\", output(noDoctype, true));\n        assertEqualsIgnoreCase(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head/><body><p>One</p></body></html>\", output(noDoctype, false));\n    }\n\n    private String output(String in, boolean modeHtml) {\n        org.jsoup.nodes.Document jdoc = Jsoup.parse(in);\n        Document w3c = W3CDom.convert(jdoc);\n\n        Map<String, String> properties = modeHtml ? W3CDom.OutputHtml() : W3CDom.OutputXml();\n        return TextUtil.normalizeSpaces(W3CDom.asString(w3c, properties));\n    }\n\n    private void assertEqualsIgnoreCase(String want, String have) {\n        assertEquals(want.toLowerCase(Locale.ROOT), have.toLowerCase(Locale.ROOT));\n    }\n\n\n    @Test\n    public void canOutputHtmlWithoutNamespace() {\n        String html = \"<p>One</p>\";\n        org.jsoup.nodes.Document jdoc = Jsoup.parse(html);\n        W3CDom w3c = new W3CDom();\n        w3c.namespaceAware(false);\n\n        String asHtml = W3CDom.asString(w3c.fromJsoup(jdoc), W3CDom.OutputHtml());\n        String asXtml = W3CDom.asString(w3c.fromJsoup(jdoc), W3CDom.OutputXml());\n        assertEqualsIgnoreCase(\n            \"<html><head><meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=utf-8\\\"></head><body><p>one</p></body></html>\",\n            asHtml);\n        assertEqualsIgnoreCase(\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><html><head/><body><p>One</p></body></html>\",\n            asXtml);\n    }\n\n    @Test public void convertsElementsAndMaintainsSource() {\n        org.jsoup.nodes.Document jdoc = Jsoup.parse(\"<body><div><p>One</div><div><p>Two\");\n        W3CDom w3CDom = new W3CDom();\n        Element jDiv = jdoc.selectFirst(\"div\");\n        assertNotNull(jDiv);\n        Document doc = w3CDom.fromJsoup(jDiv);\n        Node div = w3CDom.contextNode(doc);\n\n        assertEquals(\"div\", div.getLocalName());\n        assertEquals(jDiv, div.getUserData(W3CDom.SourceProperty));\n\n        Node textNode = div.getFirstChild().getFirstChild();\n        assertEquals(\"One\", textNode.getTextContent());\n        assertEquals(Node.TEXT_NODE, textNode.getNodeType());\n\n        org.jsoup.nodes.TextNode jText = (TextNode) jDiv.childNode(0).childNode(0);\n        assertEquals(jText, textNode.getUserData(W3CDom.SourceProperty));\n    }\n    \n    @Test public void canXmlParseCdataNodes() throws XPathExpressionException {\n        String html = \"<p><script>1 && 2</script><style>3 && 4</style> 5 &amp;&amp; 6</p>\";\n        org.jsoup.nodes.Document jdoc = Jsoup.parse(html);\n        jdoc.outputSettings().syntax(org.jsoup.nodes.Document.OutputSettings.Syntax.xml);\n        String xml = jdoc.body().html();\n        assertTrue(xml.contains(\"<script>//<![CDATA[\\n1 && 2\\n//]]></script>\")); // as asserted in ElementTest\n        Document doc = parseXml(xml, false);\n        NodeList list = xpath(doc, \"//script\");\n        assertEquals(2, list.getLength());\n        Node scriptComment = list.item(0); // will be the cdata node\n        assertEquals(\"//\", scriptComment.getTextContent());\n        Node script = list.item(1);\n        assertEquals(\"\\n\" +\n            \"1 && 2\\n\" +\n            \"//\", script.getTextContent());\n\n    }\n\n    @Test public void handlesEmptyDoctype() {\n        String html = \"<!doctype>Foo\";\n        org.jsoup.nodes.Document jdoc = Jsoup.parse(html);\n        Document doc = (new W3CDom()).fromJsoup(jdoc);\n        assertNull(doc.getDoctype());\n        assertEquals(\"Foo\", doc.getFirstChild().getTextContent());\n    }\n\n    @Test void testHtmlParseAttributesAreCaseInsensitive() throws IOException {\n        // https://github.com/jhy/jsoup/issues/981\n        String html = \"<html lang=en>\\n\" +\n            \"<body>\\n\" +\n            \"<img src=\\\"firstImage.jpg\\\" alt=\\\"Alt one\\\" />\\n\" +\n            \"<IMG SRC=\\\"secondImage.jpg\\\" AlT=\\\"Alt two\\\" />\\n\" +\n            \"</body>\\n\" +\n            \"</html>\";\n        org.jsoup.nodes.Document jsoupDoc;\n        jsoupDoc = Jsoup.parse(html);\n        org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();\n        Document doc = jDom.fromJsoup(jsoupDoc);\n        org.w3c.dom.Element body = (org.w3c.dom.Element) doc.getDocumentElement().getElementsByTagName(\"body\").item(0);\n        NodeList imgs = body.getElementsByTagName(\"img\");\n        assertEquals(2, imgs.getLength());\n        org.w3c.dom.Element first = (org.w3c.dom.Element) imgs.item(0);\n        assertEquals(first.getAttributes().getLength(), 2);\n        String img1 = first.getAttribute(\"src\");\n        assertEquals(\"firstImage.jpg\", img1);\n        String alt1 = first.getAttribute(\"alt\");\n        assertEquals(\"Alt one\", alt1);\n        org.w3c.dom.Element second = (org.w3c.dom.Element) imgs.item(1);\n        assertEquals(second.getAttributes().getLength(), 2);\n        String img2 = second.getAttribute(\"src\");\n        assertEquals(\"secondImage.jpg\", img2);\n        String alt2 = second.getAttribute(\"alt\");\n        assertEquals(\"Alt two\", alt2);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/select/ElementsTest.java.ElementsTest", "name": "ElementsTest", "file_path": "src/test/java/org/jsoup/select/ElementsTest.java", "superclasses": "", "methods": ["[void]filter()", "[void]attributes()", "[void]hasAttr()", "[void]hasAbsAttr()", "[void]attr()", "[void]absAttr()", "[void]classes()", "[void]hasClassCaseInsensitive()", "[void]text()", "[void]hasText()", "[void]html()", "[void]outerHtml()", "[void]setHtml()", "[void]val()", "[void]before()", "[void]after()", "[void]wrap()", "[void]wrapDiv()", "[void]unwrap()", "[void]unwrapP()", "[void]unwrapKeepsSpace()", "[void]empty()", "[void]remove()", "[void]eq()", "[void]is()", "[void]parents()", "[void]not()", "[void]tagNameSet()", "[void]traverse()", "[void]forms()", "[void]comments()", "[void]textNodes()", "[void]dataNodes()", "[void]nodesEmpty()", "[void]classWithHyphen()", "[void]siblings()", "[void]eachText()", "[void]eachAttr()", "[void]setElementByIndex()", "[void]removeElementByIndex()", "[void]removeElementByObject()", "[void]removeElementObjectNoops()", "[void]clear()", "[void]removeAll()", "[void]retainAll()", "[void]iteratorRemovesFromDom()", "[void]removeIf()", "[void]removeIfSupportsConcurrentRead()", "[void]replaceAll()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nTests for ElementList.\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class ElementsTest {\n    @Test public void filter() {\n        String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".headline\").select(\"p\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"There\", els.get(1).text());\n    }\n\n    @Test public void attributes() {\n        String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\";\n        Document doc = Jsoup.parse(h);\n        Elements withTitle = doc.select(\"p[title]\");\n        assertEquals(2, withTitle.size());\n        assertTrue(withTitle.hasAttr(\"title\"));\n        assertFalse(withTitle.hasAttr(\"class\"));\n        assertEquals(\"foo\", withTitle.attr(\"title\"));\n\n        withTitle.removeAttr(\"title\");\n        assertEquals(2, withTitle.size()); // existing Elements are not reevaluated\n        assertEquals(0, doc.select(\"p[title]\").size());\n\n        Elements ps = doc.select(\"p\").attr(\"style\", \"classy\");\n        assertEquals(4, ps.size());\n        assertEquals(\"classy\", ps.last().attr(\"style\"));\n        assertEquals(\"bar\", ps.last().attr(\"class\"));\n    }\n\n    @Test public void hasAttr() {\n        Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\");\n        Elements ps = doc.select(\"p\");\n        assertTrue(ps.hasAttr(\"class\"));\n        assertFalse(ps.hasAttr(\"style\"));\n    }\n\n    @Test public void hasAbsAttr() {\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>\");\n        Elements one = doc.select(\"#1\");\n        Elements two = doc.select(\"#2\");\n        Elements both = doc.select(\"a\");\n        assertFalse(one.hasAttr(\"abs:href\"));\n        assertTrue(two.hasAttr(\"abs:href\"));\n        assertTrue(both.hasAttr(\"abs:href\")); // hits on #2\n    }\n\n    @Test public void attr() {\n        Document doc = Jsoup.parse(\"<p title=foo><p title=bar><p class=foo><p class=bar>\");\n        String classVal = doc.select(\"p\").attr(\"class\");\n        assertEquals(\"foo\", classVal);\n    }\n\n    @Test public void absAttr() {\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>\");\n        Elements one = doc.select(\"#1\");\n        Elements two = doc.select(\"#2\");\n        Elements both = doc.select(\"a\");\n\n        assertEquals(\"\", one.attr(\"abs:href\"));\n        assertEquals(\"https://jsoup.org\", two.attr(\"abs:href\"));\n        assertEquals(\"https://jsoup.org\", both.attr(\"abs:href\"));\n    }\n\n    @Test public void classes() {\n        Document doc = Jsoup.parse(\"<div><p class='mellow yellow'></p><p class='red green'></p>\");\n\n        Elements els = doc.select(\"p\");\n        assertTrue(els.hasClass(\"red\"));\n        assertFalse(els.hasClass(\"blue\"));\n        els.addClass(\"blue\");\n        els.removeClass(\"yellow\");\n        els.toggleClass(\"mellow\");\n\n        assertEquals(\"blue\", els.get(0).className());\n        assertEquals(\"red green blue mellow\", els.get(1).className());\n    }\n\n    @Test public void hasClassCaseInsensitive() {\n        Elements els = Jsoup.parse(\"<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE\").select(\"p\");\n        Element one = els.get(0);\n        Element two = els.get(1);\n        Element thr = els.get(2);\n\n        assertTrue(one.hasClass(\"One\"));\n        assertTrue(one.hasClass(\"ONE\"));\n\n        assertTrue(two.hasClass(\"TWO\"));\n        assertTrue(two.hasClass(\"Two\"));\n\n        assertTrue(thr.hasClass(\"ThreE\"));\n        assertTrue(thr.hasClass(\"three\"));\n    }\n\n    @Test public void text() {\n        String h = \"<div><p>Hello<p>there<p>world</div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there world\", doc.select(\"div > *\").text());\n    }\n\n    @Test public void hasText() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p></p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertTrue(divs.hasText());\n        assertFalse(doc.select(\"div + div\").hasText());\n    }\n\n    @Test public void html() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertEquals(\"<p>Hello</p>\\n<p>There</p>\", divs.html());\n    }\n\n    @Test public void outerHtml() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div><p>There</p></div>\");\n        Elements divs = doc.select(\"div\");\n        assertEquals(\"<div><p>Hello</p></div><div><p>There</p></div>\", TextUtil.stripNewlines(divs.outerHtml()));\n    }\n\n    @Test public void setHtml() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><p>Three</p>\");\n        Elements ps = doc.select(\"p\");\n\n        ps.prepend(\"<b>Bold</b>\").append(\"<i>Ital</i>\");\n        assertEquals(\"<p><b>Bold</b>Two<i>Ital</i></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n\n        ps.html(\"<span>Gone</span>\");\n        assertEquals(\"<p><span>Gone</span></p>\", TextUtil.stripNewlines(ps.get(1).outerHtml()));\n    }\n\n    @Test public void val() {\n        Document doc = Jsoup.parse(\"<input value='one' /><textarea>two</textarea>\");\n        Elements els = doc.select(\"input, textarea\");\n        assertEquals(2, els.size());\n        assertEquals(\"one\", els.val());\n        assertEquals(\"two\", els.last().val());\n\n        els.val(\"three\");\n        assertEquals(\"three\", els.first().val());\n        assertEquals(\"three\", els.last().val());\n        assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n    }\n\n    @Test public void before() {\n        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n        doc.select(\"a\").before(\"<span>foo</span>\");\n        assertEquals(\"<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void after() {\n        Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n        doc.select(\"a\").after(\"<span>foo</span>\");\n        assertEquals(\"<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void wrap() {\n        String h = \"<p><b>This</b> is <b>jsoup</b></p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"b\").wrap(\"<i></i>\");\n        assertEquals(\"<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>\", doc.body().html());\n    }\n\n    @Test public void wrapDiv() {\n        String h = \"<p><b>This</b> is <b>jsoup</b>.</p> <p>How do you like it?</p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"p\").wrap(\"<div></div>\");\n        assertEquals(\n            \"<div>\\n <p><b>This</b> is <b>jsoup</b>.</p>\\n</div>\\n<div>\\n <p>How do you like it?</p>\\n</div>\",\n            doc.body().html());\n    }\n\n    @Test public void unwrap() {\n        String h = \"<div><font>One</font> <font><a href=\\\"/\\\">Two</a></font></div\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"font\").unwrap();\n        assertEquals(\"<div>\\n\" +\n            \" One <a href=\\\"/\\\">Two</a>\\n\" +\n            \"</div>\", doc.body().html());\n    }\n\n    @Test public void unwrapP() {\n        String h = \"<p><a>One</a> Two</p> Three <i>Four</i> <p>Fix <i>Six</i></p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"p\").unwrap();\n        assertEquals(\"<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void unwrapKeepsSpace() {\n        String h = \"<p>One <span>two</span> <span>three</span> four</p>\";\n        Document doc = Jsoup.parse(h);\n        doc.select(\"span\").unwrap();\n        assertEquals(\"<p>One two three four</p>\", doc.body().html());\n    }\n\n    @Test public void empty() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> <p>now!</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n\n        doc.select(\"p\").empty();\n        assertEquals(\"<div><p></p> <p></p></div>\", doc.body().html());\n    }\n\n    @Test public void remove() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n\n        doc.select(\"p\").remove();\n        assertEquals(\"<div> jsoup </div>\", doc.body().html());\n    }\n\n    @Test public void eq() {\n        String h = \"<p>Hello<p>there<p>world\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"there\", doc.select(\"p\").eq(1).text());\n        assertEquals(\"there\", doc.select(\"p\").get(1).text());\n    }\n\n    @Test public void is() {\n        String h = \"<p>Hello<p title=foo>there<p>world\";\n        Document doc = Jsoup.parse(h);\n        Elements ps = doc.select(\"p\");\n        assertTrue(ps.is(\"[title=foo]\"));\n        assertFalse(ps.is(\"[title=bar]\"));\n    }\n\n    @Test public void parents() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><p>There</p>\");\n        Elements parents = doc.select(\"p\").parents();\n\n        assertEquals(3, parents.size());\n        assertEquals(\"div\", parents.get(0).tagName());\n        assertEquals(\"body\", parents.get(1).tagName());\n        assertEquals(\"html\", parents.get(2).tagName());\n    }\n\n    @Test public void not() {\n        Document doc = Jsoup.parse(\"<div id=1><p>One</p></div> <div id=2><p><span>Two</span></p></div>\");\n\n        Elements div1 = doc.select(\"div\").not(\":has(p > span)\");\n        assertEquals(1, div1.size());\n        assertEquals(\"1\", div1.first().id());\n\n        Elements div2 = doc.select(\"div\").not(\"#1\");\n        assertEquals(1, div2.size());\n        assertEquals(\"2\", div2.first().id());\n    }\n\n    @Test public void tagNameSet() {\n        Document doc = Jsoup.parse(\"<p>Hello <i>there</i> <i>now</i></p>\");\n        doc.select(\"i\").tagName(\"em\");\n\n        assertEquals(\"<p>Hello <em>there</em> <em>now</em></p>\", doc.body().html());\n    }\n\n    @Test public void traverse() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        doc.select(\"div\").traverse(new NodeVisitor() {\n            @Override\n            public void head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n            }\n\n            @Override\n            public void tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n            }\n        });\n        assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n    }\n\n    @Test public void forms() {\n        Document doc = Jsoup.parse(\"<form id=1><input name=q></form><div /><form id=2><input name=f></form>\");\n        Elements els = doc.select(\"form, div\");\n        assertEquals(3, els.size());\n\n        List<FormElement> forms = els.forms();\n        assertEquals(2, forms.size());\n        assertNotNull(forms.get(0));\n        assertNotNull(forms.get(1));\n        assertEquals(\"1\", forms.get(0).id());\n        assertEquals(\"2\", forms.get(1).id());\n    }\n\n    @Test public void comments() {\n        Document doc = Jsoup.parse(\"<!-- comment1 --><p><!-- comment2 --><p class=two><!-- comment3 -->\");\n        List<Comment> comments = doc.select(\"p\").comments();\n        assertEquals(2, comments.size());\n        assertEquals(\" comment2 \", comments.get(0).getData());\n        assertEquals(\" comment3 \", comments.get(1).getData());\n\n        List<Comment> comments1 = doc.select(\"p.two\").comments();\n        assertEquals(1, comments1.size());\n        assertEquals(\" comment3 \", comments1.get(0).getData());\n    }\n\n    @Test public void textNodes() {\n        Document doc = Jsoup.parse(\"One<p>Two<a>Three</a><p>Four</p>Five\");\n        List<TextNode> textNodes = doc.select(\"p\").textNodes();\n        assertEquals(2, textNodes.size());\n        assertEquals(\"Two\", textNodes.get(0).text());\n        assertEquals(\"Four\", textNodes.get(1).text());\n    }\n\n    @Test public void dataNodes() {\n        Document doc = Jsoup.parse(\"<p>One</p><script>Two</script><style>Three</style>\");\n        List<DataNode> dataNodes = doc.select(\"p, script, style\").dataNodes();\n        assertEquals(2, dataNodes.size());\n        assertEquals(\"Two\", dataNodes.get(0).getWholeData());\n        assertEquals(\"Three\", dataNodes.get(1).getWholeData());\n\n        doc = Jsoup.parse(\"<head><script type=application/json><crux></script><script src=foo>Blah</script>\");\n        Elements script = doc.select(\"script[type=application/json]\");\n        List<DataNode> scriptNode = script.dataNodes();\n        assertEquals(1, scriptNode.size());\n        DataNode dataNode = scriptNode.get(0);\n        assertEquals(\"<crux>\", dataNode.getWholeData());\n\n        // check if they're live\n        dataNode.setWholeData(\"<cromulent>\");\n        assertEquals(\"<script type=\\\"application/json\\\"><cromulent></script>\", script.outerHtml());\n    }\n\n    @Test public void nodesEmpty() {\n        Document doc = Jsoup.parse(\"<p>\");\n        assertEquals(0, doc.select(\"form\").textNodes().size());\n    }\n\n    @Test public void classWithHyphen() {\n        Document doc = Jsoup.parse(\"<p class='tab-nav'>Check</p>\");\n        Elements els = doc.getElementsByClass(\"tab-nav\");\n        assertEquals(1, els.size());\n        assertEquals(\"Check\", els.text());\n    }\n\n    @Test public void siblings() {\n        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12</div>\");\n\n        Elements els = doc.select(\"p:eq(3)\"); // gets p4 and p10\n        assertEquals(2, els.size());\n\n        Elements next = els.next();\n        assertEquals(2, next.size());\n        assertEquals(\"5\", next.first().text());\n        assertEquals(\"11\", next.last().text());\n\n        assertEquals(0, els.next(\"p:contains(6)\").size());\n        final Elements nextF = els.next(\"p:contains(5)\");\n        assertEquals(1, nextF.size());\n        assertEquals(\"5\", nextF.first().text());\n\n        Elements nextA = els.nextAll();\n        assertEquals(4, nextA.size());\n        assertEquals(\"5\", nextA.first().text());\n        assertEquals(\"12\", nextA.last().text());\n\n        Elements nextAF = els.nextAll(\"p:contains(6)\");\n        assertEquals(1, nextAF.size());\n        assertEquals(\"6\", nextAF.first().text());\n\n        Elements prev = els.prev();\n        assertEquals(2, prev.size());\n        assertEquals(\"3\", prev.first().text());\n        assertEquals(\"9\", prev.last().text());\n\n        assertEquals(0, els.prev(\"p:contains(1)\").size());\n        final Elements prevF = els.prev(\"p:contains(3)\");\n        assertEquals(1, prevF.size());\n        assertEquals(\"3\", prevF.first().text());\n\n        Elements prevA = els.prevAll();\n        assertEquals(6, prevA.size());\n        assertEquals(\"3\", prevA.first().text());\n        assertEquals(\"7\", prevA.last().text());\n\n        Elements prevAF = els.prevAll(\"p:contains(1)\");\n        assertEquals(1, prevAF.size());\n        assertEquals(\"1\", prevAF.first().text());\n    }\n\n    @Test public void eachText() {\n        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12<p></p></div>\");\n        List<String> divText = doc.select(\"div\").eachText();\n        assertEquals(2, divText.size());\n        assertEquals(\"1 2 3 4 5 6\", divText.get(0));\n        assertEquals(\"7 8 9 10 11 12\", divText.get(1));\n\n        List<String> pText = doc.select(\"p\").eachText();\n        Elements ps = doc.select(\"p\");\n        assertEquals(13, ps.size());\n        assertEquals(12, pText.size()); // not 13, as last doesn't have text\n        assertEquals(\"1\", pText.get(0));\n        assertEquals(\"2\", pText.get(1));\n        assertEquals(\"5\", pText.get(4));\n        assertEquals(\"7\", pText.get(6));\n        assertEquals(\"12\", pText.get(11));\n    }\n\n    @Test public void eachAttr() {\n        Document doc = Jsoup.parse(\n            \"<div><a href='/foo'>1</a><a href='http://example.com/bar'>2</a><a href=''>3</a><a>4</a>\",\n            \"http://example.com\");\n\n        List<String> hrefAttrs = doc.select(\"a\").eachAttr(\"href\");\n        assertEquals(3, hrefAttrs.size());\n        assertEquals(\"/foo\", hrefAttrs.get(0));\n        assertEquals(\"http://example.com/bar\", hrefAttrs.get(1));\n        assertEquals(\"\", hrefAttrs.get(2));\n        assertEquals(4, doc.select(\"a\").size());\n\n        List<String> absAttrs = doc.select(\"a\").eachAttr(\"abs:href\");\n        assertEquals(3, absAttrs.size());\n        assertEquals(3, absAttrs.size());\n        assertEquals(\"http://example.com/foo\", absAttrs.get(0));\n        assertEquals(\"http://example.com/bar\", absAttrs.get(1));\n        assertEquals(\"http://example.com\", absAttrs.get(2));\n    }\n\n    @Test public void setElementByIndex() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three\");\n        Element newP = doc.createElement(\"p\").text(\"New\").attr(\"id\", \"new\");\n\n        Elements ps = doc.select(\"p\");\n        Element two = ps.get(1);\n        Element old = ps.set(1, newP);\n        assertSame(old, two);\n        assertSame(newP, ps.get(1)); // replaced in list\n        assertEquals(\"<p>One</p>\\n<p id=\\\"new\\\">New</p>\\n<p>Three</p>\", doc.body().html()); // replaced in dom\n    }\n\n    @Test public void removeElementByIndex() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three\");\n\n        Elements ps = doc.select(\"p\");\n        Element two = ps.get(1);\n        assertTrue(ps.contains(two));\n        Element old = ps.remove(1);\n        assertSame(old, two);\n\n        assertEquals(2, ps.size()); // removed from list\n        assertFalse(ps.contains(old));\n        assertEquals(\"<p>One</p>\\n<p>Three</p>\", doc.body().html()); // removed from dom\n    }\n\n    @Test public void removeElementByObject() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three\");\n\n        Elements ps = doc.select(\"p\");\n        Element two = ps.get(1);\n        assertTrue(ps.contains(two));\n        boolean removed = ps.remove(two);\n        assertTrue(removed);\n\n        assertEquals(2, ps.size()); // removed from list\n        assertFalse(ps.contains(two));\n        assertEquals(\"<p>One</p>\\n<p>Three</p>\", doc.body().html()); // removed from dom\n    }\n\n    @Test public void removeElementObjectNoops() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three\");\n        String origHtml = doc.html();\n        Element newP = doc.createElement(\"p\").text(\"New\");\n\n        Elements ps = doc.select(\"p\");\n        int size = ps.size();\n        assertFalse(ps.remove(newP));\n        assertFalse(ps.remove(newP.childNodes()));\n        assertEquals(origHtml, doc.html());\n        assertEquals(size, ps.size());\n    }\n\n    @Test public void clear() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two</p><div>Three</div>\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(2, ps.size());\n        ps.clear();\n        assertEquals(0, ps.size());\n\n        assertEquals(0, doc.select(\"p\").size());\n    }\n\n    @Test public void removeAll() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three<p>Four</p><div>Div\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(4, ps.size());\n        Elements midPs = doc.select(\"p:gt(0):lt(3)\"); //Two and Three\n        assertEquals(2, midPs.size());\n\n        boolean removed = ps.removeAll(midPs);\n        assertEquals(2, ps.size());\n        assertTrue(removed);\n        assertEquals(2, midPs.size());\n\n        Elements divs = doc.select(\"div\");\n        assertEquals(1, divs.size());\n        assertFalse(ps.removeAll(divs));\n        assertEquals(2, ps.size());\n\n        assertEquals(\"<p>One</p>\\n<p>Four</p>\\n<div>\\n Div\\n</div>\", doc.body().html());\n    }\n\n    @Test public void retainAll() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three<p>Four</p><div>Div\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(4, ps.size());\n        Elements midPs = doc.select(\"p:gt(0):lt(3)\"); //Two and Three\n        assertEquals(2, midPs.size());\n\n        boolean removed = ps.retainAll(midPs);\n        assertEquals(2, ps.size());\n        assertTrue(removed);\n        assertEquals(2, midPs.size());\n\n        assertEquals(\"<p>Two</p>\\n<p>Three</p>\\n<div>\\n Div\\n</div>\", doc.body().html());\n\n        Elements psAgain = doc.select(\"p\");\n        assertFalse(midPs.retainAll(psAgain));\n\n        assertEquals(\"<p>Two</p>\\n<p>Three</p>\\n<div>\\n Div\\n</div>\", doc.body().html());\n    }\n\n    @Test public void iteratorRemovesFromDom() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three<p>Four\");\n        Elements ps = doc.select(\"p\");\n\n        assertEquals(4, ps.size());\n        for (Iterator<Element> it = ps.iterator(); it.hasNext(); ) {\n            Element el = it.next();\n            if (el.text().contains(\"Two\"))\n                it.remove();\n        }\n        assertEquals(3, ps.size());\n        assertEquals(\"<p>One</p>\\n<p>Three</p>\\n<p>Four</p>\", doc.body().html());\n    }\n\n    @Test public void removeIf() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three<p>Four\");\n        Elements ps = doc.select(\"p\");\n\n        assertEquals(4, ps.size());\n        boolean removed = ps.removeIf(el -> el.text().contains(\"Two\"));\n        assertTrue(removed);\n        assertEquals(3, ps.size());\n        assertEquals(\"<p>One</p>\\n<p>Three</p>\\n<p>Four</p>\", doc.body().html());\n\n        assertFalse(ps.removeIf(el -> el.text().contains(\"Five\")));\n        assertEquals(\"<p>One</p>\\n<p>Three</p>\\n<p>Four</p>\", doc.body().html());\n    }\n\n    @Test public void removeIfSupportsConcurrentRead() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three<p>Four\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(4, ps.size());\n\n        boolean removed = ps.removeIf(el -> ps.contains(el));\n        assertTrue(removed);\n        assertEquals(0, ps.size());\n        assertEquals(\"\", doc.body().html());\n    }\n\n    @Test public void replaceAll() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three<p>Four\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(4, ps.size());\n\n        ps.replaceAll(el -> {\n            Element div = doc.createElement(\"div\");\n            div.text(el.text());\n            return div;\n        });\n\n        // Check Elements\n        for (Element p : ps) {\n            assertEquals(\"div\", p.tagName());\n        }\n\n        // check dom\n        assertEquals(\"<div> One</div><div> Two</div><div> Three</div><div> Four</div>\", TextUtil.normalizeSpaces(doc.body().html()));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/select/XpathTest.java.XpathTest", "name": "XpathTest", "file_path": "src/test/java/org/jsoup/select/XpathTest.java", "superclasses": "", "methods": ["[void]supportsXpath()", "[void]supportsXpathFromElement()", "[void]emptyElementsIfNoResults()", "[void]throwsSelectException()", "[void]supportsLocalname()", "[void]canDitchNamespaces()", "[void]cssAndXpathEquivalents(Document,String,String)", "[void]canSelectTextNodes()", "[void]selectByAttribute()", "[void]selectOutsideOfElementTree()", "[void]selectAncestorsOnContextElement()", "[void]canSupplyAlternateFactoryImpl()", "[void]notNamespaceAware()", "[void]supportsPrefixes()"], "method_uris": ["src/test/java/org/jsoup/select/XpathTest.java.XpathTest.[Stream<Arguments>]provideEvaluators()"], "overrides": null, "attributes": [{"original_string": "    public static class AlternateXpathFactory extends XPathFactory {\n        public AlternateXpathFactory() {\n            super();\n        }\n\n        @Override\n        public boolean isObjectModelSupported(String objectModel) {\n            return true;\n        }\n\n        @Override\n        public void setFeature(String name, boolean value) throws XPathFactoryConfigurationException {\n\n        }\n\n        @Override\n        public boolean getFeature(String name) throws XPathFactoryConfigurationException {\n            return true;\n        }\n\n        @Override\n        public void setXPathVariableResolver(XPathVariableResolver resolver) {\n\n        }\n\n        @Override\n        public void setXPathFunctionResolver(XPathFunctionResolver resolver) {\n\n        }\n\n        @Override\n        public XPath newXPath() {\n            throw new IllegalArgumentException(\"Sorry, no can do!\");\n        }\n    }", "definition": "    public static class AlternateXpathFactory extends XPathFactory", "class_docstring": " minimal, no-op implementation class to verify users can load a factory to support XPath 2.0 etc", "name": "AlternateXpathFactory", "super_interfaces": [], "superclasses": "XPathFactory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public AlternateXpathFactory() {\n            super();\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "AlternateXpathFactory", "params": [], "body": "                                       {\n            super();\n        }", "signature": "public AlternateXpathFactory()"}, {"syntax_pass": true, "original_string": "        @Override\n        public boolean isObjectModelSupported(String objectModel) {\n            return true;\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "isObjectModelSupported", "params": [{"name": "objectModel", "type": "String"}], "body": "                                                                  {\n            return true;\n        }", "signature": "@Override\n        public boolean isObjectModelSupported(String objectModel)"}, {"syntax_pass": true, "original_string": "        @Override\n        public void setFeature(String name, boolean value) throws XPathFactoryConfigurationException {\n\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "setFeature", "params": [{"name": "name", "type": "String"}, {"name": "value", "type": "boolean"}], "body": "                                                                                                     {\n\n        }", "signature": "@Override\n        public void setFeature(String name, boolean value)"}, {"syntax_pass": true, "original_string": "        @Override\n        public boolean getFeature(String name) throws XPathFactoryConfigurationException {\n            return true;\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "getFeature", "params": [{"name": "name", "type": "String"}], "body": "                                                                                         {\n            return true;\n        }", "signature": "@Override\n        public boolean getFeature(String name)"}, {"syntax_pass": true, "original_string": "        @Override\n        public void setXPathVariableResolver(XPathVariableResolver resolver) {\n\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "setXPathVariableResolver", "params": [{"name": "resolver", "type": "XPathVariableResolver"}], "body": "                                                                             {\n\n        }", "signature": "@Override\n        public void setXPathVariableResolver(XPathVariableResolver resolver)"}, {"syntax_pass": true, "original_string": "        @Override\n        public void setXPathFunctionResolver(XPathFunctionResolver resolver) {\n\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "setXPathFunctionResolver", "params": [{"name": "resolver", "type": "XPathFunctionResolver"}], "body": "                                                                             {\n\n        }", "signature": "@Override\n        public void setXPathFunctionResolver(XPathFunctionResolver resolver)"}, {"syntax_pass": true, "original_string": "        @Override\n        public XPath newXPath() {\n            throw new IllegalArgumentException(\"Sorry, no can do!\");\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "XPath", "classes": []}, "name": "newXPath", "params": [], "body": "                                {\n            throw new IllegalArgumentException(\"Sorry, no can do!\");\n        }", "signature": "@Override\n        public XPath newXPath()"}]}], "class_docstring": "", "original_string": "public class XpathTest {\n\n    @Test\n    public void supportsXpath() {\n        String html = \"<body><div><p>One</div><div><p>Two</div><div>Three</div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.selectXpath(\"//div/p\");\n        assertEquals(2, els.size());\n        assertEquals(\"One\", els.get(0).text());\n        assertEquals(\"Two\", els.get(1).text());\n    }\n\n    @Test public void supportsXpathFromElement() {\n        String html = \"<body><div><p>One</div><div><p>Two</div><div>Three</div>\";\n        Document doc = Jsoup.parse(html);\n\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        Element w3cDiv = div.selectXpath(\".\").first(); // self\n        assertSame(div, w3cDiv);\n\n        Elements els = div.selectXpath(\"p\");\n        assertEquals(1, els.size());\n        assertEquals(\"One\", els.get(0).text());\n        assertEquals(\"p\", els.get(0).tagName());\n\n        assertEquals(1, div.selectXpath(\"//body\").size()); // the whole document is visible on the div context\n        assertEquals(1, doc.selectXpath(\"//body\").size());\n    }\n\n    @Test public void emptyElementsIfNoResults() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two\");\n        assertEquals(0, doc.selectXpath(\"//div\").size());\n    }\n\n    @Test\n    public void throwsSelectException() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two\");\n        boolean threw = false;\n        try {\n            doc.selectXpath(\"//???\");\n        } catch (Selector.SelectorParseException e) {\n            threw = true;\n            // checks exception message within jsoup's control, rest may be JDK impl specific\n            // was - Could not evaluate XPath query [//???]: javax.xml.transform.TransformerException: A location step was expected following the '/' or '//' token.\n            assertTrue(e.getMessage().startsWith(\"Could not evaluate XPath query [//???]:\"));\n\n            // check we have a root cause\n            Throwable cause = e.getCause();\n            assertNotNull(cause);\n            assertNotSame(cause, e);\n        }\n        assertTrue(threw);\n    }\n\n    @Test\n    public void supportsLocalname() {\n        String xhtml = \"<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>\";\n        Document doc = Jsoup.parse(xhtml, Parser.xmlParser());\n        Elements elements = doc.selectXpath(\"//*[local-name()='body']\");\n        assertEquals(1, elements.size());\n        assertEquals(\"One\", elements.first().id());\n    }\n\n    @Test\n    public void canDitchNamespaces() {\n        String xhtml = \"<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>\";\n        Document doc = Jsoup.parse(xhtml, Parser.xmlParser());\n        doc.select(\"[xmlns]\").removeAttr(\"xmlns\");\n        Elements elements = doc.selectXpath(\"//*[local-name()='body']\");\n        assertEquals(1, elements.size());\n\n        elements = doc.selectXpath(\"//body\");\n        assertEquals(1, elements.size());\n        assertEquals(\"One\", elements.first().id());\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"provideEvaluators\")\n    void cssAndXpathEquivalents(Document doc, String css, String xpath) {\n        Elements fromCss = doc.select(css);\n        Elements fromXpath = doc.selectXpath(xpath);\n\n        assertTrue(fromCss.size() >= 1);\n        assertTrue(fromXpath.size() >= 1);\n        // tests same size, order, and contents\n        assertEquals(fromCss, fromXpath);\n    }\n\n    private static Stream<Arguments> provideEvaluators() {\n        String html = \"<div id=1><div id=2><p class=foo>Hello</p></div></div><DIV id=3>\";\n        Document doc = Jsoup.parse(html);\n\n        return Stream.of(\n           Arguments.of(doc, \"DIV\", \"//div\"),\n           Arguments.of(doc, \"div > p.foo\", \"//div/p[@class]\"),\n           Arguments.of(doc, \"div + div\", \"//div/following-sibling::div[1]\"),\n           Arguments.of(doc, \"p:containsOwn(Hello)\", \"//p[contains(text(),\\\"Hello\\\")]\")\n        );\n    }\n\n    @Test void canSelectTextNodes() {\n        String html = \"<div><p>One<p><a>Two</a><p>Three and some more\";\n        Document doc = Jsoup.parse(html);\n\n        //  as text nodes:\n        List<TextNode> text = doc.selectXpath(\"//body//p//text()\", TextNode.class);\n        assertEquals(3, text.size());\n        assertEquals(\"One\", text.get(0).text());\n        assertEquals(\"Two\", text.get(1).text());\n        assertEquals(\"Three and some more\", text.get(2).text());\n\n        //  as just nodes:\n        List<Node> nodes = doc.selectXpath(\"//body//p//text()\", Node.class);\n        assertEquals(3, nodes.size());\n        assertEquals(\"One\", nodes.get(0).outerHtml());\n        assertEquals(\"Two\", nodes.get(1).outerHtml());\n        assertEquals(\"Three and some more\", nodes.get(2).outerHtml());\n    }\n\n    @Test void selectByAttribute() {\n        Document doc = Jsoup.parse(\"<p><a href='/foo'>Foo</a><a href='/bar'>Bar</a><a>None</a>\");\n        List<String> hrefs = doc.selectXpath(\"//a[@href]\").eachAttr(\"href\");\n        assertEquals(2, hrefs.size());\n        assertEquals(\"/foo\", hrefs.get(0));\n        assertEquals(\"/bar\", hrefs.get(1));\n    }\n\n    @Test void selectOutsideOfElementTree() {\n        Document doc = Jsoup.parse(\"<p>One<p>Two<p>Three\");\n        Elements ps = doc.selectXpath(\"//p\");\n        assertEquals(3, ps.size());\n\n        Element p1 = ps.get(0);\n        assertEquals(\"One\", p1.text());\n\n        Elements sibs = p1.selectXpath(\"following-sibling::p\");\n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }\n\n    @Test void selectAncestorsOnContextElement() {\n        // https://github.com/jhy/jsoup/issues/1652\n        Document doc = Jsoup.parse(\"<div><p>Hello\");\n        Element p = doc.selectFirst(\"p\");\n        assertNotNull(p);\n        Elements chain = p.selectXpath(\"ancestor-or-self::*\");\n        assertEquals(4, chain.size());\n        assertEquals(\"html\", chain.get(0).tagName());\n        assertEquals(\"p\", chain.get(3).tagName());\n    }\n\n    @Test\n    public void canSupplyAlternateFactoryImpl() {\n        // previously we had a test to load Saxon and do an XPath 2.0 query. But we know Saxon works and so that's\n        // redundant - really just need to test that an alternate XPath factory can be used\n\n        System.setProperty(XPathFactoryProperty, AlternateXpathFactory.class.getName());\n\n        String xhtml = \"<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>\";\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.parse(xhtml, Parser.xmlParser());\n            Elements elements = doc.selectXpath(\"//*:body\");\n\n        } catch (IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Sorry, no can do!\"));\n            threw = true;\n        }\n        assertTrue(threw);\n        System.clearProperty(XPathFactoryProperty);\n    }\n\n    @Test\n    public void notNamespaceAware() {\n        String xhtml = \"<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>\";\n        Document doc = Jsoup.parse(xhtml, Parser.xmlParser());\n        Elements elements = doc.selectXpath(\"//body\");\n        assertEquals(1, elements.size());\n        assertEquals(\"One\", elements.first().id());\n    }\n\n    @Test\n    public void supportsPrefixes() {\n        // example from https://www.w3.org/TR/xml-names/\n        String xml = \"<?xml version=\\\"1.0\\\"?>\\n\" +\n            \"<bk:book xmlns:bk='urn:loc.gov:books'\\n\" +\n            \"         xmlns:isbn='urn:ISBN:0-395-36341-6'>\\n\" +\n            \"    <bk:title>Cheaper by the Dozen</bk:title>\\n\" +\n            \"    <isbn:number>1568491379</isbn:number>\\n\" +\n            \"</bk:book>\";\n        Document doc = Jsoup.parse(xml, Parser.xmlParser());\n\n        //Elements elements = doc.selectXpath(\"//bk:book/bk:title\");\n        Elements elements = doc.selectXpath(\"//book/title\");\n        assertEquals(1, elements.size());\n        assertEquals(\"Cheaper by the Dozen\", elements.first().text());\n\n        // with prefix\n        Elements byPrefix = doc.selectXpath(\"//*[name()='bk:book']/*[name()='bk:title']\");\n        assertEquals(1, byPrefix.size());\n        assertEquals(\"Cheaper by the Dozen\", byPrefix.first().text());\n\n        Elements byLocalName = doc.selectXpath(\"//*[local-name()='book']/*[local-name()='title']\");\n        assertEquals(1, byLocalName.size());\n        assertEquals(\"Cheaper by the Dozen\", byLocalName.first().text());\n\n        Elements isbn = doc.selectXpath(\"//book/number\");\n        assertEquals(1, isbn.size());\n        assertEquals(\"1568491379\", isbn.first().text());\n    }\n\n    // minimal, no-op implementation class to verify users can load a factory to support XPath 2.0 etc\n    public static class AlternateXpathFactory extends XPathFactory {\n        public AlternateXpathFactory() {\n            super();\n        }\n\n        @Override\n        public boolean isObjectModelSupported(String objectModel) {\n            return true;\n        }\n\n        @Override\n        public void setFeature(String name, boolean value) throws XPathFactoryConfigurationException {\n\n        }\n\n        @Override\n        public boolean getFeature(String name) throws XPathFactoryConfigurationException {\n            return true;\n        }\n\n        @Override\n        public void setXPathVariableResolver(XPathVariableResolver resolver) {\n\n        }\n\n        @Override\n        public void setXPathFunctionResolver(XPathFunctionResolver resolver) {\n\n        }\n\n        @Override\n        public XPath newXPath() {\n            throw new IllegalArgumentException(\"Sorry, no can do!\");\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/select/QueryParserTest.java.QueryParserTest", "name": "QueryParserTest", "file_path": "src/test/java/org/jsoup/select/QueryParserTest.java", "superclasses": "", "methods": ["[void]testConsumeSubQuery()", "[void]testImmediateParentRun()", "[void]testOrGetsCorrectPrecedence()", "[void]testParsesMultiCorrectly()", "[void]exceptionOnUncloseAttribute()", "[void]testParsesSingleQuoteInContains()", "[void]exceptOnEmptySelector()", "[void]exceptOnNullSelector()", "[void]okOnSpacesForeAndAft()", "[void]structuralEvaluatorsToString()", "[void]parsesOrAfterAttribute()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nTests for the Selector Query Parser.\n\n@author Jonathan Hedley\n", "original_string": "public class QueryParserTest {\n    @Test public void testConsumeSubQuery() {\n        Document doc = Jsoup.parse(\"<html><head>h</head><body>\" +\n                \"<li><strong>l1</strong></li>\" +\n                \"<a><li><strong>l2</strong></li></a>\" +\n                \"<p><strong>yes</strong></p>\" +\n                \"</body></html>\");\n        assertEquals(\"l1 yes\", doc.body().select(\">p>strong,>li>strong\").text()); // selecting immediate from body\n        assertEquals(\"l2 yes\", doc.select(\"body>p>strong,body>*>li>strong\").text());\n        assertEquals(\"l2 yes\", doc.select(\"body>*>li>strong,body>p>strong\").text());\n        assertEquals(\"l2 yes\", doc.select(\"body>p>strong,body>*>li>strong\").text());\n    }\n\n    @Test public void testImmediateParentRun() {\n        String query = \"div > p > bold.brass\";\n        assertEquals(\"(ImmediateParentRun (Tag 'div')(Tag 'p')(And (Tag 'bold')(Class '.brass')))\", sexpr(query));\n\n        /*\n        <ImmediateParentRun css=\"div > p > bold.brass\" cost=\"11\">\n          <Tag css=\"div\" cost=\"1\"></Tag>\n          <Tag css=\"p\" cost=\"1\"></Tag>\n          <And css=\"bold.brass\" cost=\"7\">\n            <Tag css=\"bold\" cost=\"1\"></Tag>\n            <Class css=\".brass\" cost=\"6\"></Class>\n          </And>\n        </ImmediateParentRun>\n         */\n    }\n\n    @Test public void testOrGetsCorrectPrecedence() {\n        // tests that a selector \"a b, c d, e f\" evals to (a AND b) OR (c AND d) OR (e AND f)\"\n        // top level or, three child ands\n        String query = \"a b, c d, e f\";\n        String parsed = sexpr(query);\n        assertEquals(\"(Or (And (Tag 'b')(Parent (Tag 'a')))(And (Tag 'd')(Parent (Tag 'c')))(And (Tag 'f')(Parent (Tag 'e'))))\", parsed);\n\n        /*\n        <Or css=\"a b, c d, e f\" cost=\"9\">\n          <And css=\"a b\" cost=\"3\">\n            <Tag css=\"b\" cost=\"1\"></Tag>\n            <Parent css=\"a \" cost=\"2\">\n              <Tag css=\"a\" cost=\"1\"></Tag>\n            </Parent>\n          </And>\n          <And css=\"c d\" cost=\"3\">\n            <Tag css=\"d\" cost=\"1\"></Tag>\n            <Parent css=\"c \" cost=\"2\">\n              <Tag css=\"c\" cost=\"1\"></Tag>\n            </Parent>\n          </And>\n          <And css=\"e f\" cost=\"3\">\n            <Tag css=\"f\" cost=\"1\"></Tag>\n            <Parent css=\"e \" cost=\"2\">\n              <Tag css=\"e\" cost=\"1\"></Tag>\n            </Parent>\n          </And>\n        </Or>\n         */\n    }\n\n    @Test public void testParsesMultiCorrectly() {\n        String query = \".foo.qux[attr=bar] > ol.bar, ol > li + li\";\n        String parsed = sexpr(query);\n        assertEquals(\"(Or (And (Tag 'li')(ImmediatePreviousSibling (ImmediateParentRun (Tag 'ol')(Tag 'li'))))(ImmediateParentRun (And (AttributeWithValue '[attr=bar]')(Class '.foo')(Class '.qux'))(And (Tag 'ol')(Class '.bar'))))\", parsed);\n\n        /*\n        <Or css=\".foo.qux[attr=bar] > ol.bar, ol > li + li\" cost=\"31\">\n          <And css=\"ol > li + li\" cost=\"7\">\n            <Tag css=\"li\" cost=\"1\"></Tag>\n            <ImmediatePreviousSibling css=\"ol > li + \" cost=\"6\">\n              <ImmediateParentRun css=\"ol > li\" cost=\"4\">\n                <Tag css=\"ol\" cost=\"1\"></Tag>\n                <Tag css=\"li\" cost=\"1\"></Tag>\n              </ImmediateParentRun>\n            </ImmediatePreviousSibling>\n          </And>\n          <ImmediateParentRun css=\".foo.qux[attr=bar] > ol.bar\" cost=\"24\">\n            <And css=\".foo.qux[attr=bar]\" cost=\"15\">\n              <AttributeWithValue css=\"[attr=bar]\" cost=\"3\"></AttributeWithValue>\n              <Class css=\".foo\" cost=\"6\"></Class>\n              <Class css=\".qux\" cost=\"6\"></Class>\n            </And>\n            <And css=\"ol.bar\" cost=\"7\">\n              <Tag css=\"ol\" cost=\"1\"></Tag>\n              <Class css=\".bar\" cost=\"6\"></Class>\n            </And>\n          </ImmediateParentRun>\n        </Or>\n         */\n    }\n\n    @Test public void exceptionOnUncloseAttribute() {\n        assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse(\"section > a[href=\\\"]\"));\n    }\n\n    @Test public void testParsesSingleQuoteInContains() {\n        assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse(\"p:contains(One \\\" One)\"));\n    }\n\n\n    @Test public void exceptOnEmptySelector() {\n        assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse(\"\"));\n    }\n\n    @Test public void exceptOnNullSelector() {\n        assertThrows(Selector.SelectorParseException.class, () -> QueryParser.parse(null));\n    }\n\n    @Test public void okOnSpacesForeAndAft() {\n        Evaluator parse = QueryParser.parse(\" span div  \");\n        assertEquals(\"span div\", parse.toString());\n    }\n\n    @Test public void structuralEvaluatorsToString() {\n        String q = \"a:not(:has(span.foo)) b d > e + f ~ g\";\n        Evaluator parse = QueryParser.parse(q);\n        assertEquals(q, parse.toString());\n        String parsed = sexpr(q);\n        assertEquals(\"(And (Tag 'g')(PreviousSibling (And (Tag 'f')(ImmediatePreviousSibling (ImmediateParentRun (And (Tag 'd')(Parent (And (Tag 'b')(Parent (And (Tag 'a')(Not (Has (And (Tag 'span')(Class '.foo')))))))))(Tag 'e'))))))\", parsed);\n    }\n\n    @Test public void parsesOrAfterAttribute() {\n        // https://github.com/jhy/jsoup/issues/2073\n        String q = \"#parent [class*=child], .some-other-selector .nested\";\n        String parsed = sexpr(q);\n        assertEquals(\"(Or (And (Parent (Id '#parent'))(AttributeWithValueContaining '[class*=child]'))(And (Class '.nested')(Parent (Class '.some-other-selector'))))\", parsed);\n\n        assertEquals(\"(Or (Class '.some-other-selector')(And (Parent (Id '#parent'))(AttributeWithValueContaining '[class*=child]')))\", sexpr(\"#parent [class*=child], .some-other-selector\"));\n        assertEquals(\"(Or (Class '.some-other-selector')(And (Id '#el')(AttributeWithValueContaining '[class*=child]')))\", sexpr(\"#el[class*=child], .some-other-selector\"));\n        assertEquals(\"(Or (And (Parent (Id '#parent'))(AttributeWithValueContaining '[class*=child]'))(And (Class '.nested')(Parent (Class '.some-other-selector'))))\", sexpr(\"#parent [class*=child], .some-other-selector .nested\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest", "name": "SelectorTest", "file_path": "src/test/java/org/jsoup/select/SelectorTest.java", "superclasses": "", "methods": ["[void]testByTag()", "[void]byEscapedTag()", "[void]testById()", "[void]byEscapedId()", "[void]testByClass()", "[void]byEscapedClass()", "[void]testByClassCaseInsensitive()", "[void]testNamespacedTag()", "[void]testWildcardNamespacedTag()", "[void]testNamespacedWildcardTag()", "[void]testWildcardNamespacedXmlTag()", "[void]testWildCardNamespacedCaseVariations()", "[void]testByAttributeRegex()", "[void]testByAttributeRegexCharacterClass()", "[void]testByAttributeRegexCombined()", "[void]testCombinedWithContains()", "[void]testAllElements()", "[void]testAllWithClass()", "[void]testGroupOr()", "[void]testGroupOrAttribute()", "[void]descendant()", "[void]and()", "[void]deeperDescendant()", "[void]parentChildElement()", "[void]parentWithClassChild()", "[void]parentChildStar()", "[void]multiChildDescent()", "[void]caseInsensitive()", "[void]adjacentSiblings()", "[void]adjacentSiblingsWithId()", "[void]notAdjacent()", "[void]mixCombinator()", "[void]mixCombinatorGroup()", "[void]generalSiblings()", "[void]testCharactersInIdAndClass()", "[void]testSupportsLeadingCombinator()", "[void]testPseudoLessThan()", "[void]testPseudoGreaterThan()", "[void]testPseudoEquals()", "[void]testPseudoBetween()", "[void]testPseudoCombined()", "[void]testPseudoHas()", "[void]testNestedHas()", "[void]testHasSibling()", "[void]testPsuedoContainsWithParentheses()", "[void]containsWholeText()", "[void]containsWholeOwnText()", "[void]testMatches()", "[void]matchesOwn()", "[void]matchesWholeText()", "[void]matchesWholeOwnText()", "[void]testRelaxedTags()", "[void]notParas()", "[void]notAll()", "[void]notClass()", "[void]handlesCommasInSelector()", "[void]selectSupplementaryCharacter()", "[void]selectClassWithSpace()", "[void]selectSameElements()", "[void]attributeWithBrackets()", "[void]containsWithQuote()", "[void]selectFirst()", "[void]selectFirstWithAnd()", "[void]selectFirstWithOr()", "[void]matchText()", "[void]nthLastChildWithNoParent()", "[void]splitOnBr()", "[void]matchTextAttributes()", "[void]findBetweenSpan()", "[void]startsWithBeginsWithSpace()", "[void]endsWithEndsWithSpaces()", "[void]html_mixed_case_simple_name()", "[void]html_mixed_case_wildcard_name()", "[void]html_lowercase_simple_name()", "[void]html_lowercase_wildcard_name()", "[void]xml_mixed_case_simple_name()", "[void]xml_mixed_case_wildcard_name()", "[void]xml_lowercase_simple_name()", "[void]xml_lowercase_wildcard_name()", "[void]trimSelector()", "[void]xmlWildcardNamespaceTest()", "[void]childElements()", "[void]selectFirstLevelChildrenOnly()", "[void]wildcardNamespaceMatchesNoNamespace()", "[void]containsTextQueryIsNormalized()", "[void]selectorExceptionNotStringFormatException()", "[void]evaluatorMemosAreReset()", "[void]blankTextNodesAreConsideredEmpty()", "[void]emptyPseudo()", "[void]parentFromSpecifiedDescender()", "[void]rootImmediateParentSubquery()", "[void]is()", "[void]orAfterClass()", "[void]emptyAttributePrefix()", "[void]anyAttribute()", "[void]divHasSpanPreceding()", "[void]divHasDivPreceding()", "[void]nestedMultiHas()"], "method_uris": ["src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]assertSelectedIds(Elements)", "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]assertSelectedOwnText(Elements)", "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]testByAttribute(Locale)", "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]testByAttributeStarting(Locale)", "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]testPseudoContains(Locale)", "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]containsOwn(Locale)", "src/test/java/org/jsoup/select/SelectorTest.java.SelectorTest.[void]containsData(Locale)"], "overrides": null, "attributes": [], "class_docstring": "\nTests that the selector selects correctly.\n\n@author Jonathan Hedley, jonathan@hedley.net\n", "original_string": "public class SelectorTest {\n\n    /** Test that the selected elements match exactly the specified IDs. */\n    public static void assertSelectedIds(Elements els, String... ids) {\n        assertNotNull(els);\n        assertEquals(ids.length, els.size(), \"Incorrect number of selected elements\");\n        for (int i = 0; i < ids.length; i++) {\n            assertEquals(ids[i], els.get(i).id(), \"Incorrect content at index\");\n        }\n    }\n\n    public static void assertSelectedOwnText(Elements els, String... ownTexts) {\n        assertNotNull(els);\n        assertEquals(ownTexts.length, els.size(), \"Incorrect number of selected elements\");\n        for (int i = 0; i < ownTexts.length; i++) {\n            assertEquals(ownTexts[i], els.get(i).ownText(), \"Incorrect content at index\");\n        }\n    }\n\n    @Test public void testByTag() {\n        // should be case-insensitive\n        Elements els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>\").select(\"DIV\");\n        assertSelectedIds(els, \"1\", \"2\", \"3\");\n\n        Elements none = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"span\");\n        assertTrue(none.isEmpty());\n    }\n\n    @Test public void byEscapedTag() {\n        // tested same result as js document.querySelector\n        Document doc = Jsoup.parse(\"<p.p>One</p.p> <p\\\\p>Two</p\\\\p>\");\n\n        Element one = doc.expectFirst(\"p\\\\.p\");\n        assertEquals(\"One\", one.text());\n\n        Element two = doc.expectFirst(\"p\\\\\\\\p\");\n        assertEquals(\"Two\", two.text());\n    }\n\n    @Test public void testById() {\n        Elements els = Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\").select(\"#foo\");\n        assertSelectedOwnText(els, \"Hello\", \"Foo two!\");\n\n        Elements none = Jsoup.parse(\"<div id=1></div>\").select(\"#foo\");\n        assertTrue(none.isEmpty());\n    }\n\n    @Test public void byEscapedId() {\n        Document doc = Jsoup.parse(\"<p id='i.d'>One</p> <p id='i\\\\d'>Two</p> <p id='one-two/three'>Three</p>\");\n\n        Element one = doc.expectFirst(\"#i\\\\.d\");\n        assertEquals(\"One\", one.text());\n\n        Element two = doc.expectFirst(\"#i\\\\\\\\d\");\n        assertEquals(\"Two\", two.text());\n\n        Element thr = doc.expectFirst(\"p#one-two\\\\/three\");\n        assertEquals(\"Three\", thr.text());\n    }\n\n    @Test public void testByClass() {\n        Elements els = Jsoup.parse(\"<p id=0 class='ONE two'><p id=1 class='one'><p id=2 class='two'>\").select(\"P.One\");\n        assertSelectedIds(els, \"0\", \"1\");\n\n        Elements none = Jsoup.parse(\"<div class='one'></div>\").select(\".foo\");\n        assertTrue(none.isEmpty());\n\n        Elements els2 = Jsoup.parse(\"<div class='One-Two' id=1></div>\").select(\".one-two\");\n        assertSelectedIds(els2, \"1\");\n    }\n\n    @Test public void byEscapedClass() {\n        Document doc = Jsoup.parse(\"<p class='one.two#three'>One</p>\");\n        assertSelectedOwnText(doc.select(\"p.one\\\\.two\\\\#three\"), \"One\");\n    }\n\n    @Test public void testByClassCaseInsensitive() {\n        String html = \"<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four\";\n        Elements elsFromClass = Jsoup.parse(html).select(\"P.Foo\");\n        Elements elsFromAttr = Jsoup.parse(html).select(\"p[class=foo]\");\n\n        assertEquals(elsFromAttr.size(), elsFromClass.size());\n        assertSelectedOwnText(elsFromClass, \"One\", \"Two\", \"Three\");\n    }\n\n\n    @MultiLocaleTest\n    public void testByAttribute(Locale locale) {\n        Locale.setDefault(locale);\n\n        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />\" +\n                \"<div data-name='with spaces'/>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements withTitle = doc.select(\"[title]\");\n        assertEquals(4, withTitle.size());\n\n        Elements foo = doc.select(\"[TITLE=foo]\");\n        assertEquals(1, foo.size());\n\n        Elements foo2 = doc.select(\"[title=\\\"foo\\\"]\");\n        assertEquals(1, foo2.size());\n\n        Elements foo3 = doc.select(\"[title=\\\"Foo\\\"]\");\n        assertEquals(1, foo3.size());\n\n        Elements dataName = doc.select(\"[data-name=\\\"with spaces\\\"]\");\n        assertEquals(1, dataName.size());\n        assertEquals(\"with spaces\", dataName.first().attr(\"data-name\"));\n\n        Elements not = doc.select(\"div[title!=bar]\");\n        assertEquals(5, not.size());\n        assertEquals(\"Foo\", not.first().attr(\"title\"));\n\n        Elements starts = doc.select(\"[title^=ba]\");\n        assertEquals(2, starts.size());\n        assertEquals(\"Bar\", starts.first().attr(\"title\"));\n        assertEquals(\"Balim\", starts.last().attr(\"title\"));\n\n        Elements ends = doc.select(\"[title$=im]\");\n        assertEquals(2, ends.size());\n        assertEquals(\"Balim\", ends.first().attr(\"title\"));\n        assertEquals(\"SLIM\", ends.last().attr(\"title\"));\n\n        Elements contains = doc.select(\"[title*=i]\");\n        assertEquals(2, contains.size());\n        assertEquals(\"Balim\", contains.first().attr(\"title\"));\n        assertEquals(\"SLIM\", contains.last().attr(\"title\"));\n    }\n\n    @Test public void testNamespacedTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n        Elements byTag = doc.select(\"abc|def\");\n        assertSelectedIds(byTag, \"1\", \"2\");\n\n        Elements byAttr = doc.select(\".bold\");\n        assertSelectedIds(byAttr, \"2\");\n\n        Elements byTagAttr = doc.select(\"abc|def.bold\");\n        assertSelectedIds(byTagAttr, \"2\");\n\n        Elements byContains = doc.select(\"abc|def:contains(e)\");\n        assertSelectedIds(byContains, \"1\", \"2\");\n    }\n\n    @Test public void testWildcardNamespacedTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n        Elements byTag = doc.select(\"*|def\");\n        assertSelectedIds(byTag, \"1\", \"2\");\n\n        Elements byAttr = doc.select(\".bold\");\n        assertSelectedIds(byAttr, \"2\");\n\n        Elements byTagAttr = doc.select(\"*|def.bold\");\n        assertSelectedIds(byTagAttr, \"2\");\n\n        Elements byContains = doc.select(\"*|def:contains(e)\");\n        assertSelectedIds(byContains, \"1\", \"2\");\n    }\n\n    @Test public void testNamespacedWildcardTag() {\n        // https://github.com/jhy/jsoup/issues/1811\n        Document doc = Jsoup.parse(\"<p>One</p> <ac:p id=2>Two</ac:p> <ac:img id=3>Three</ac:img>\");\n        Elements byNs = doc.select(\"ac|*\");\n        assertSelectedIds(byNs, \"2\", \"3\");\n    }\n\n    @Test public void testWildcardNamespacedXmlTag() {\n        Document doc = Jsoup.parse(\n            \"<div><Abc:Def id=1>Hello</Abc:Def></div> <Abc:Def class=bold id=2>There</abc:def>\",\n            \"\", Parser.xmlParser()\n        );\n\n        Elements byTag = doc.select(\"*|Def\");\n        assertSelectedIds(byTag, \"1\", \"2\");\n\n        Elements byAttr = doc.select(\".bold\");\n        assertSelectedIds(byAttr, \"2\");\n\n        Elements byTagAttr = doc.select(\"*|Def.bold\");\n        assertSelectedIds(byTagAttr, \"2\");\n\n        Elements byContains = doc.select(\"*|Def:contains(e)\");\n        assertSelectedIds(byContains, \"1\", \"2\");\n    }\n\n    @Test public void testWildCardNamespacedCaseVariations() {\n        Document doc = Jsoup.parse(\"<One:Two>One</One:Two><three:four>Two</three:four>\", \"\", Parser.xmlParser());\n        Elements els1 = doc.select(\"One|Two\");\n        Elements els2 = doc.select(\"one|two\");\n        Elements els3 = doc.select(\"Three|Four\");\n        Elements els4 = doc.select(\"three|Four\");\n\n        assertEquals(els1, els2);\n        assertEquals(els3, els4);\n        assertEquals(\"One\", els1.text());\n        assertEquals(1, els1.size());\n        assertEquals(\"Two\", els3.text());\n        assertEquals(1, els2.size());\n    }\n\n    @MultiLocaleTest\n    public void testByAttributeStarting(Locale locale) {\n        Locale.setDefault(locale);\n\n        Document doc = Jsoup.parse(\"<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n        Elements withData = doc.select(\"[^data-]\");\n        assertEquals(2, withData.size());\n        assertEquals(\"1\", withData.first().id());\n        assertEquals(\"2\", withData.last().id());\n\n        withData = doc.select(\"p[^data-]\");\n        assertEquals(1, withData.size());\n        assertEquals(\"2\", withData.first().id());\n\n        assertEquals(1, doc.select(\"[^attrib]\").size());\n    }\n\n    @Test public void testByAttributeRegex() {\n        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>\");\n        Elements imgs = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g)]\");\n        assertSelectedIds(imgs, \"1\", \"2\", \"3\");\n    }\n\n    @Test public void testByAttributeRegexCharacterClass() {\n        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>\");\n        Elements imgs = doc.select(\"img[src~=[o]]\");\n        assertSelectedIds(imgs, \"1\", \"4\");\n    }\n\n    @Test public void testByAttributeRegexCombined() {\n        Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n        Elements els = doc.select(\"div table[class~=x|y]\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.text());\n    }\n\n    @Test public void testCombinedWithContains() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p><p>Two +</p><p>Three +</p>\");\n        Elements els = doc.select(\"p#1 + :contains(+)\");\n        assertEquals(1, els.size());\n        assertEquals(\"Two +\", els.text());\n        assertEquals(\"p\", els.first().tagName());\n    }\n\n    @Test public void testAllElements() {\n        String h = \"<div><p>Hello</p><p><b>there</b></p></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements allDoc = doc.select(\"*\");\n        Elements allUnderDiv = doc.select(\"div *\");\n        assertEquals(8, allDoc.size());\n        assertEquals(3, allUnderDiv.size());\n        assertEquals(\"p\", allUnderDiv.first().tagName());\n    }\n\n    @Test public void testAllWithClass() {\n        String h = \"<p class=first>One<p class=first>Two<p>Three\";\n        Document doc = Jsoup.parse(h);\n        Elements ps = doc.select(\"*.first\");\n        assertEquals(2, ps.size());\n    }\n\n    @Test public void testGroupOr() {\n        String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"p,div,[title]\");\n\n        assertEquals(5, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"foo\", els.get(0).attr(\"title\"));\n        assertEquals(\"div\", els.get(1).tagName());\n        assertEquals(\"bar\", els.get(1).attr(\"title\"));\n        assertEquals(\"div\", els.get(2).tagName());\n        assertEquals(0, els.get(2).attr(\"title\").length()); // missing attributes come back as empty string\n        assertFalse(els.get(2).hasAttr(\"title\"));\n        assertEquals(\"p\", els.get(3).tagName());\n        assertEquals(\"span\", els.get(4).tagName());\n    }\n\n    @Test public void testGroupOrAttribute() {\n        String h = \"<div id=1 /><div id=2 /><div title=foo /><div title=bar />\";\n        Elements els = Jsoup.parse(h).select(\"[id],[title=foo]\");\n\n        assertEquals(3, els.size());\n        assertEquals(\"1\", els.get(0).id());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(\"foo\", els.get(2).attr(\"title\"));\n    }\n\n    @Test public void descendant() {\n        String h = \"<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>\";\n        Document doc = Jsoup.parse(h);\n        Element root = doc.getElementsByClass(\"HEAD\").first();\n\n        Elements els = root.select(\".head p\");\n        assertEquals(2, els.size());\n        assertEquals(\"Hello\", els.get(0).text());\n        assertEquals(\"There\", els.get(1).text());\n\n        Elements p = root.select(\"p.first\");\n        assertEquals(1, p.size());\n        assertEquals(\"Hello\", p.get(0).text());\n\n        Elements empty = root.select(\"p .first\"); // self, not descend, should not match\n        assertEquals(0, empty.size());\n\n        Elements aboveRoot = root.select(\"body div.head\");\n        assertEquals(0, aboveRoot.size());\n    }\n\n    @Test public void and() {\n        String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\";\n        Document doc = Jsoup.parse(h);\n\n        Elements div = doc.select(\"div.foo\");\n        assertEquals(1, div.size());\n        assertEquals(\"div\", div.first().tagName());\n\n        Elements p = doc.select(\"div .foo\"); // space indicates like \"div *.foo\"\n        assertEquals(1, p.size());\n        assertEquals(\"p\", p.first().tagName());\n\n        Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); // very specific!\n        assertEquals(1, div2.size());\n        assertEquals(\"div\", div2.first().tagName());\n\n        Elements p2 = doc.select(\"div *.foo\"); // space indicates like \"div *.foo\"\n        assertEquals(1, p2.size());\n        assertEquals(\"p\", p2.first().tagName());\n    }\n\n    @Test public void deeperDescendant() {\n        String h = \"<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>\";\n        Document doc = Jsoup.parse(h);\n        Element root = doc.getElementsByClass(\"head\").first();\n\n        Elements els = root.select(\"div p .first\");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.first().text());\n        assertEquals(\"span\", els.first().tagName());\n\n        Elements aboveRoot = root.select(\"body p .first\");\n        assertEquals(0, aboveRoot.size());\n    }\n\n    @Test public void parentChildElement() {\n        String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements divs = doc.select(\"div > div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"2\", divs.get(0).id()); // 2 is child of 1\n        assertEquals(\"3\", divs.get(1).id()); // 3 is child of 2\n\n        Elements div2 = doc.select(\"div#1 > div\");\n        assertEquals(1, div2.size());\n        assertEquals(\"2\", div2.get(0).id());\n    }\n\n    @Test public void parentWithClassChild() {\n        String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n        Document doc = Jsoup.parse(h);\n\n        Elements allAs = doc.select(\"h1 > a\");\n        assertEquals(3, allAs.size());\n        assertEquals(\"a\", allAs.first().tagName());\n\n        Elements fooAs = doc.select(\"h1.foo > a\");\n        assertEquals(2, fooAs.size());\n        assertEquals(\"a\", fooAs.first().tagName());\n\n        Elements barAs = doc.select(\"h1.foo > a.bar\");\n        assertEquals(1, barAs.size());\n    }\n\n    @Test public void parentChildStar() {\n        String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements divChilds = doc.select(\"div > *\");\n        assertEquals(3, divChilds.size());\n        assertEquals(\"p\", divChilds.get(0).tagName());\n        assertEquals(\"p\", divChilds.get(1).tagName());\n        assertEquals(\"span\", divChilds.get(2).tagName());\n    }\n\n    @Test public void multiChildDescent() {\n        String h = \"<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"div#foo > h1.bar > a[href*=example]\");\n        assertEquals(1, els.size());\n        assertEquals(\"a\", els.first().tagName());\n    }\n\n    @Test public void caseInsensitive() {\n        String h = \"<dIv tItle=bAr><div>\"; // mixed case so a simple toLowerCase() on value doesn't catch\n        Document doc = Jsoup.parse(h);\n\n        assertEquals(2, doc.select(\"DiV\").size());\n        assertEquals(1, doc.select(\"DiV[TiTLE]\").size());\n        assertEquals(1, doc.select(\"DiV[TiTLE=BAR]\").size());\n        assertEquals(0, doc.select(\"DiV[TiTLE=BARBARELLA]\").size());\n    }\n\n    @Test public void adjacentSiblings() {\n        String h = \"<ol><li>One<li>Two<li>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li + li\");\n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }\n\n    @Test public void adjacentSiblingsWithId() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li#1 + li#2\");\n        assertEquals(1, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n    }\n\n    @Test public void notAdjacent() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"li#1 + li#3\");\n        assertEquals(0, sibs.size());\n    }\n\n    @Test public void mixCombinator() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements sibs = doc.select(\"body > div.foo li + li\");\n\n        assertEquals(2, sibs.size());\n        assertEquals(\"Two\", sibs.get(0).text());\n        assertEquals(\"Three\", sibs.get(1).text());\n    }\n\n    @Test public void mixCombinatorGroup() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".foo > ol, ol > li + li\");\n\n        assertEquals(3, els.size());\n        assertEquals(\"ol\", els.get(0).tagName());\n        assertEquals(\"Two\", els.get(1).text());\n        assertEquals(\"Three\", els.get(2).text());\n    }\n\n    @Test public void generalSiblings() {\n        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\"#1 ~ #3\");\n        assertEquals(1, els.size());\n        assertEquals(\"Three\", els.first().text());\n    }\n\n    // for http://github.com/jhy/jsoup/issues#issue/10\n    @Test public void testCharactersInIdAndClass() {\n        // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)\n        String h = \"<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Element el1 = doc.getElementById(\"a1-foo_bar\");\n        assertEquals(\"One\", el1.text());\n        Element el2 = doc.getElementsByClass(\"b2-qux_bif\").first();\n        assertEquals(\"Two\", el2.text());\n\n        Element el3 = doc.select(\"#a1-foo_bar\").first();\n        assertEquals(\"One\", el3.text());\n        Element el4 = doc.select(\".b2-qux_bif\").first();\n        assertEquals(\"Two\", el4.text());\n    }\n\n    // for http://github.com/jhy/jsoup/issues#issue/13\n    @Test public void testSupportsLeadingCombinator() {\n        String h = \"<div><p><span>One</span><span>Two</span></p></div>\";\n        Document doc = Jsoup.parse(h);\n\n        Element p = doc.select(\"div > p\").first();\n        Elements spans = p.select(\"> span\");\n        assertEquals(2, spans.size());\n        assertEquals(\"One\", spans.first().text());\n\n        // make sure doesn't get nested\n        h = \"<div id=1><div id=2><div id=3></div></div></div>\";\n        doc = Jsoup.parse(h);\n        Element div = doc.select(\"div\").select(\" > div\").first();\n        assertEquals(\"2\", div.id());\n    }\n\n    @Test public void testPseudoLessThan() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:lt(2)\");\n        assertEquals(3, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Two\", ps.get(1).text());\n        assertEquals(\"Four\", ps.get(2).text());\n    }\n\n    @Test public void testPseudoGreaterThan() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:gt(0)\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n        assertEquals(\"Three\", ps.get(1).text());\n    }\n\n    @Test public void testPseudoEquals() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:eq(0)\");\n        assertEquals(2, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Four\", ps.get(1).text());\n\n        Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\");\n        assertEquals(1, ps2.size());\n        assertEquals(\"One\", ps2.get(0).text());\n        assertEquals(\"p\", ps2.get(0).tagName());\n    }\n\n    @Test public void testPseudoBetween() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n        Elements ps = doc.select(\"div p:gt(0):lt(2)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n    }\n\n    @Test public void testPseudoCombined() {\n        Document doc = Jsoup.parse(\"<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>\");\n        Elements ps = doc.select(\"div.foo p:gt(0)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"Two\", ps.get(0).text());\n    }\n\n    @Test public void testPseudoHas() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        assertEquals(2, divs1.size());\n        assertEquals(\"0\", divs1.get(0).id());\n        assertEquals(\"1\", divs1.get(1).id());\n\n        Elements divs2 = doc.select(\"div:has([class])\");\n        assertEquals(1, divs2.size());\n        assertEquals(\"1\", divs2.get(0).id());\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        assertEquals(3, divs3.size());\n        assertEquals(\"0\", divs3.get(0).id());\n        assertEquals(\"1\", divs3.get(1).id());\n        assertEquals(\"2\", divs3.get(2).id());\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        assertEquals(3, els1.size()); // body, div, div\n        assertEquals(\"body\", els1.first().tagName());\n        assertEquals(\"0\", els1.get(1).id());\n        assertEquals(\"2\", els1.get(2).id());\n\n        Elements els2 = doc.body().select(\":has(> span)\");\n        assertEquals(2,els2.size()); // p, div\n        assertEquals(\"p\",els2.first().tagName());\n        assertEquals(\"1\", els2.get(1).id());\n    }\n\n    @Test public void testNestedHas() {\n        Document doc = Jsoup.parse(\"<div><p><span>One</span></p></div> <div><p>Two</p></div>\");\n        Elements divs = doc.select(\"div:has(p:has(span))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"One\", divs.first().text());\n\n        // test matches in has\n        divs = doc.select(\"div:has(p:matches((?i)two))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"div\", divs.first().tagName());\n        assertEquals(\"Two\", divs.first().text());\n\n        // test contains in has\n        divs = doc.select(\"div:has(p:contains(two))\");\n        assertEquals(1, divs.size());\n        assertEquals(\"div\", divs.first().tagName());\n        assertEquals(\"Two\", divs.first().text());\n    }\n\n    @Test public void testHasSibling() {\n        // https://github.com/jhy/jsoup/issues/2137\n        Document doc = Jsoup.parse(\"<h1 id=1>One</h1> <h2>Two</h2> <h1>Three</h1>\");\n        Elements els = doc.select(\"h1:has(+h2)\");\n        assertSelectedIds(els, \"1\");\n\n        els = doc.select(\"h1:has(~h1)\");\n        assertSelectedIds(els, \"1\");\n\n        // nested with sibling\n        doc = Jsoup.parse(\"<div id=1><p><i>One</i><i>Two</p><p><i>Three</p></div> <div><p><i>Four</div>\");\n        els = doc.select(\"div:has(p:has(i:has(~i)))\");\n        assertSelectedIds(els, \"1\");\n    }\n\n    @MultiLocaleTest\n    public void testPseudoContains(Locale locale) {\n        Locale.setDefault(locale);\n\n        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain, the.</p></div>\");\n\n        Elements ps1 = doc.select(\"p:contains(Rain)\");\n        assertEquals(3, ps1.size());\n\n        Elements ps2 = doc.select(\"p:contains(the rain)\");\n        assertEquals(2, ps2.size());\n        assertEquals(\"The Rain.\", ps2.first().html());\n        assertEquals(\"The <i>RAIN</i>.\", ps2.last().html());\n\n        Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n        assertEquals(1, ps3.size());\n        assertEquals(\"light\", ps3.first().className());\n\n        Elements ps4 = doc.select(\".light:contains(rain)\");\n        assertEquals(1, ps4.size());\n        assertEquals(\"light\", ps3.first().className());\n\n        Elements ps5 = doc.select(\":contains(rain)\");\n        assertEquals(8, ps5.size()); // html, body, div,...\n\n        Elements ps6 = doc.select(\":contains(RAIN)\");\n        assertEquals(8, ps6.size());\n    }\n\n    @Test public void testPsuedoContainsWithParentheses() {\n        Document doc = Jsoup.parse(\"<div><p id=1>This (is good)</p><p id=2>This is bad)</p>\");\n\n        Elements ps1 = doc.select(\"p:contains(this (is good))\");\n        assertEquals(1, ps1.size());\n        assertEquals(\"1\", ps1.first().id());\n\n        Elements ps2 = doc.select(\"p:contains(this is bad\\\\))\");\n        assertEquals(1, ps2.size());\n        assertEquals(\"2\", ps2.first().id());\n    }\n\n    @Test void containsWholeText() {\n        Document doc = Jsoup.parse(\"<div><p> jsoup\\n The <i>HTML</i> Parser</p><p>jsoup The HTML Parser</div>\");\n        Elements ps = doc.select(\"p\");\n\n        Elements es1 = doc.select(\"p:containsWholeText( jsoup\\n The HTML Parser)\");\n        Elements es2 = doc.select(\"p:containsWholeText(jsoup The HTML Parser)\");\n        assertEquals(1, es1.size());\n        assertEquals(1, es2.size());\n        assertEquals(ps.get(0), es1.first());\n        assertEquals(ps.get(1), es2.first());\n\n        assertEquals(0, doc.select(\"div:containsWholeText(jsoup the html parser)\").size());\n        assertEquals(0, doc.select(\"div:containsWholeText(jsoup\\n the html parser)\").size());\n\n        doc = Jsoup.parse(\"<div><p></p><p> </p><p>.  </p>\");\n        Elements blanks = doc.select(\"p:containsWholeText(  )\");\n        assertEquals(1, blanks.size());\n        assertEquals(\".  \", blanks.first().wholeText());\n    }\n\n    @Test void containsWholeOwnText() {\n        Document doc = Jsoup.parse(\"<div><p> jsoup\\n The <i>HTML</i> Parser</p><p>jsoup The HTML Parser<br></div>\");\n        Elements ps = doc.select(\"p\");\n\n        Elements es1 = doc.select(\"p:containsWholeOwnText( jsoup\\n The  Parser)\");\n        Elements es2 = doc.select(\"p:containsWholeOwnText(jsoup The HTML Parser\\n)\");\n        assertEquals(1, es1.size());\n        assertEquals(1, es2.size());\n        assertEquals(ps.get(0), es1.first());\n        assertEquals(ps.get(1), es2.first());\n\n        assertEquals(0, doc.select(\"div:containsWholeOwnText(jsoup the html parser)\").size());\n        assertEquals(0, doc.select(\"div:containsWholeOwnText(jsoup\\n the  parser)\").size());\n\n        doc = Jsoup.parse(\"<div><p></p><p> </p><p>.  </p>\");\n        Elements blanks = doc.select(\"p:containsWholeOwnText(  )\");\n        assertEquals(1, blanks.size());\n        assertEquals(\".  \", blanks.first().wholeText());\n    }\n\n    @MultiLocaleTest\n    public void containsOwn(Locale locale) {\n        Locale.setDefault(locale);\n\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> igor</p>\");\n        Elements ps = doc.select(\"p:containsOwn(Hello IGOR)\");\n        assertEquals(1, ps.size());\n        assertEquals(\"1\", ps.first().id());\n\n        assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n\n        Document doc2 = Jsoup.parse(\"<p>Hello <b>there</b> IGOR</p>\");\n        assertEquals(1, doc2.select(\"p:containsOwn(igor)\").size());\n\n    }\n\n    @Test public void testMatches() {\n        Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n\n        Elements p1 = doc.select(\"p:matches(The rain)\"); // no match, case sensitive\n        assertEquals(0, p1.size());\n\n        Elements p2 = doc.select(\"p:matches((?i)the rain)\"); // case insense. should include root, html, body\n        assertEquals(1, p2.size());\n        assertEquals(\"1\", p2.first().id());\n\n        Elements p4 = doc.select(\"p:matches((?i)^rain$)\"); // bounding\n        assertEquals(1, p4.size());\n        assertEquals(\"4\", p4.first().id());\n\n        Elements p5 = doc.select(\"p:matches(\\\\d+)\");\n        assertEquals(1, p5.size());\n        assertEquals(\"2\", p5.first().id());\n\n        Elements p6 = doc.select(\"p:matches(\\\\w+\\\\s+\\\\(\\\\w+\\\\))\"); // test bracket matching\n        assertEquals(1, p6.size());\n        assertEquals(\"3\", p6.first().id());\n\n        Elements p7 = doc.select(\"p:matches((?i)the):has(i)\"); // multi\n        assertEquals(1, p7.size());\n        assertEquals(\"1\", p7.first().id());\n    }\n\n    @Test public void matchesOwn() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n\n        Elements p1 = doc.select(\"p:matchesOwn((?i)hello now)\");\n        assertEquals(1, p1.size());\n        assertEquals(\"1\", p1.first().id());\n\n        assertEquals(0, doc.select(\"p:matchesOwn(there)\").size());\n    }\n\n    @Test public void matchesWholeText() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b>\\n now</p><p id=2> </p><p id=3></p>\");\n\n        Elements p1 = doc.select(\"p:matchesWholeText((?i)hello there\\n now)\");\n        assertEquals(1, p1.size());\n        assertEquals(\"1\", p1.first().id());\n\n        assertEquals(1, doc.select(\"p:matchesWholeText(there\\n now)\").size());\n        assertEquals(0, doc.select(\"p:matchesWholeText(There\\n now)\").size());\n\n        Elements p2 = doc.select(\"p:matchesWholeText(^\\\\s+$)\");\n        assertEquals(1, p2.size());\n        assertEquals(\"2\", p2.first().id());\n\n        Elements p3 = doc.select(\"p:matchesWholeText(^$)\");\n        assertEquals(1, p3.size());\n        assertEquals(\"3\", p3.first().id());\n    }\n\n    @Test public void matchesWholeOwnText() {\n        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b>\\n now</p><p id=2> </p><p id=3><i>Text</i></p>\");\n\n        Elements p1 = doc.select(\"p:matchesWholeOwnText((?i)hello \\n now)\");\n        assertEquals(1, p1.size());\n        assertEquals(\"1\", p1.first().id());\n\n        assertEquals(0, doc.select(\"p:matchesWholeOwnText(there\\n now)\").size());\n\n        Elements p2 = doc.select(\"p:matchesWholeOwnText(^\\\\s+$)\");\n        assertEquals(1, p2.size());\n        assertEquals(\"2\", p2.first().id());\n\n        Elements p3 = doc.select(\"p:matchesWholeOwnText(^$)\");\n        assertEquals(1, p3.size());\n        assertEquals(\"3\", p3.first().id());\n    }\n\n    @Test public void testRelaxedTags() {\n        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n\n        Elements el1 = doc.select(\"abc_def\");\n        assertEquals(1, el1.size());\n        assertEquals(\"1\", el1.first().id());\n\n        Elements el2 = doc.select(\"abc-def\");\n        assertEquals(1, el2.size());\n        assertEquals(\"2\", el2.first().id());\n    }\n\n    @Test public void notParas() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.select(\"p:not([id=1])\");\n        assertEquals(2, el1.size());\n        assertEquals(\"Two\", el1.first().text());\n        assertEquals(\"Three\", el1.last().text());\n\n        Elements el2 = doc.select(\"p:not(:has(span))\");\n        assertEquals(2, el2.size());\n        assertEquals(\"One\", el2.first().text());\n        assertEquals(\"Two\", el2.last().text());\n    }\n\n    @Test public void notAll() {\n        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n        assertEquals(2, el1.size());\n        assertEquals(\"body\", el1.first().tagName());\n        assertEquals(\"span\", el1.last().tagName());\n    }\n\n    @Test public void notClass() {\n        Document doc = Jsoup.parse(\"<div class=left>One</div><div class=right id=1><p>Two</p></div>\");\n\n        Elements el1 = doc.select(\"div:not(.left)\");\n        assertEquals(1, el1.size());\n        assertEquals(\"1\", el1.first().id());\n    }\n\n    @Test public void handlesCommasInSelector() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        assertEquals(1, ps.size());\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        assertEquals(2, containers.size());\n        assertEquals(\"div\", containers.get(0).tagName());\n        assertEquals(\"li\", containers.get(1).tagName());\n        assertEquals(\"123\", containers.get(1).text());\n    }\n\n    @Test public void selectSupplementaryCharacter() {\n        String s = new String(Character.toChars(135361));\n        Document doc = Jsoup.parse(\"<div k\" + s + \"='\" + s + \"'>^\" + s +\"$/div>\");\n        assertEquals(\"div\", doc.select(\"div[k\" + s + \"]\").first().tagName());\n        assertEquals(\"div\", doc.select(\"div:containsOwn(\" + s + \")\").first().tagName());\n    }\n\n    @Test\n    public void selectClassWithSpace() {\n        final String html = \"<div class=\\\"value\\\">class without space</div>\\n\"\n                          + \"<div class=\\\"value \\\">class with space</div>\";\n\n        Document doc = Jsoup.parse(html);\n\n        Elements found = doc.select(\"div[class=value ]\");\n        assertEquals(2, found.size());\n        assertEquals(\"class without space\", found.get(0).text());\n        assertEquals(\"class with space\", found.get(1).text());\n\n        found = doc.select(\"div[class=\\\"value \\\"]\");\n        assertEquals(2, found.size());\n        assertEquals(\"class without space\", found.get(0).text());\n        assertEquals(\"class with space\", found.get(1).text());\n\n        found = doc.select(\"div[class=\\\"value\\\\ \\\"]\");\n        assertEquals(0, found.size());\n    }\n\n    @Test public void selectSameElements() {\n        final String html = \"<div>one</div><div>one</div>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"div\");\n        assertEquals(2, els.size());\n\n        Elements subSelect = els.select(\":contains(one)\");\n        assertEquals(2, subSelect.size());\n    }\n\n    @Test public void attributeWithBrackets() {\n        String html = \"<div data='End]'>One</div> <div data='[Another)]]'>Two</div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.select(\"div[data='End]']\").first().text());\n        assertEquals(\"Two\", doc.select(\"div[data='[Another)]]']\").first().text());\n        assertEquals(\"One\", doc.select(\"div[data=\\\"End]\\\"]\").first().text());\n        assertEquals(\"Two\", doc.select(\"div[data=\\\"[Another)]]\\\"]\").first().text());\n    }\n\n    @MultiLocaleTest\n    public void containsData(Locale locale) {\n        Locale.setDefault(locale);\n\n        String html = \"<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>\";\n        Document doc = Jsoup.parse(html);\n        Element body = doc.body();\n\n        Elements dataEls1 = body.select(\":containsData(function)\");\n        Elements dataEls2 = body.select(\"script:containsData(function)\");\n        Elements dataEls3 = body.select(\"span:containsData(comments)\");\n        Elements dataEls4 = body.select(\":containsData(o)\");\n        Elements dataEls5 = body.select(\"style:containsData(ITEM)\");\n\n        assertEquals(2, dataEls1.size()); // body and script\n        assertEquals(1, dataEls2.size());\n        assertEquals(dataEls1.last(), dataEls2.first());\n        assertEquals(\"<script>FUNCTION</script>\", dataEls2.outerHtml());\n        assertEquals(1, dataEls3.size());\n        assertEquals(\"span\", dataEls3.first().tagName());\n        assertEquals(3, dataEls4.size());\n        assertEquals(\"body\", dataEls4.first().tagName());\n        assertEquals(\"script\", dataEls4.get(1).tagName());\n        assertEquals(\"span\", dataEls4.get(2).tagName());\n        assertEquals(1, dataEls5.size());\n    }\n\n    @Test public void containsWithQuote() {\n        String html = \"<p>One'One</p><p>One'Two</p>\";\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"p:contains(One\\\\'One)\");\n        assertEquals(1, els.size());\n        assertEquals(\"One'One\", els.text());\n    }\n\n    @Test public void selectFirst() {\n        String html = \"<p>One<p>Two<p>Three\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test public void selectFirstWithAnd() {\n        String html = \"<p>One<p class=foo>Two<p>Three\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"Two\", doc.selectFirst(\"p.foo\").text());\n    }\n\n    @Test public void selectFirstWithOr() {\n        String html = \"<p>One<p>Two<p>Three<div>Four\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"One\", doc.selectFirst(\"p, div\").text());\n    }\n\n    @Test public void matchText() {\n        String html = \"<p>One<br>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().prettyPrint(false);\n        String origHtml = doc.html();\n\n        Elements one = doc.select(\"p:matchText:first-child\");\n        assertEquals(\"One\", one.first().text());\n\n        Elements two = doc.select(\"p:matchText:last-child\");\n        assertEquals(\"Two\", two.first().text());\n\n        assertEquals(origHtml, doc.html());\n\n        assertEquals(\"Two\", doc.select(\"p:matchText + br + *\").text());\n    }\n\n    @Test public void nthLastChildWithNoParent() {\n        Element el = new Element(\"p\").text(\"Orphan\");\n        Elements els = el.select(\"p:nth-last-child(1)\");\n        assertEquals(0, els.size());\n    }\n\n    @Test public void splitOnBr() {\n        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:matchText\");\n        assertEquals(3, els.size());\n        assertEquals(\"One\", els.get(0).text());\n        assertEquals(\"Two\", els.get(1).text());\n        assertEquals(\"Three\", els.get(2).toString());\n    }\n\n    @Test public void matchTextAttributes() {\n        Document doc = Jsoup.parse(\"<div><p class=one>One<br>Two<p class=two>Three<br>Four\");\n        Elements els = doc.select(\"p.two:matchText:last-child\");\n\n        assertEquals(1, els.size());\n        assertEquals(\"Four\", els.text());\n    }\n\n    @Test public void findBetweenSpan() {\n        Document doc = Jsoup.parse(\"<p><span>One</span> Two <span>Three</span>\");\n        Elements els = doc.select(\"span ~ p:matchText\"); // the Two becomes its own p, sibling of the span\n        // todo - think this should really be 'p:matchText span ~ p'. The :matchText should behave as a modifier to expand the nodes.\n\n        assertEquals(1, els.size());\n        assertEquals(\"Two\", els.text());\n    }\n\n    @Test public void startsWithBeginsWithSpace() {\n        Document doc = Jsoup.parse(\"<small><a href=\\\" mailto:abc@def.net\\\">(abc@def.net)</a></small>\");\n        Elements els = doc.select(\"a[href^=' mailto']\");\n\n        assertEquals(1, els.size());\n    }\n\n    @Test public void endsWithEndsWithSpaces() {\n        Document doc = Jsoup.parse(\"<small><a href=\\\" mailto:abc@def.net \\\">(abc@def.net)</a></small>\");\n        Elements els = doc.select(\"a[href$='.net ']\");\n\n        assertEquals(1, els.size());\n    }\n\n    // https://github.com/jhy/jsoup/issues/1257\n    private final String mixedCase =\n        \"<html xmlns:n=\\\"urn:ns\\\"><n:mixedCase>text</n:mixedCase></html>\";\n    private final String lowercase =\n        \"<html xmlns:n=\\\"urn:ns\\\"><n:lowercase>text</n:lowercase></html>\";\n\n    @Test\n    public void html_mixed_case_simple_name() {\n        Document doc = Jsoup.parse(mixedCase, \"\", Parser.htmlParser());\n        assertEquals(0, doc.select(\"mixedCase\").size());\n    }\n\n    @Test\n    public void html_mixed_case_wildcard_name() {\n        Document doc = Jsoup.parse(mixedCase, \"\", Parser.htmlParser());\n        assertEquals(1, doc.select(\"*|mixedCase\").size());\n    }\n\n    @Test\n    public void html_lowercase_simple_name() {\n        Document doc = Jsoup.parse(lowercase, \"\", Parser.htmlParser());\n        assertEquals(0, doc.select(\"lowercase\").size());\n    }\n\n    @Test\n    public void html_lowercase_wildcard_name() {\n        Document doc = Jsoup.parse(lowercase, \"\", Parser.htmlParser());\n        assertEquals(1, doc.select(\"*|lowercase\").size());\n    }\n\n    @Test\n    public void xml_mixed_case_simple_name() {\n        Document doc = Jsoup.parse(mixedCase, \"\", Parser.xmlParser());\n        assertEquals(0, doc.select(\"mixedCase\").size());\n    }\n\n    @Test\n    public void xml_mixed_case_wildcard_name() {\n        Document doc = Jsoup.parse(mixedCase, \"\", Parser.xmlParser());\n        assertEquals(1, doc.select(\"*|mixedCase\").size());\n    }\n\n    @Test\n    public void xml_lowercase_simple_name() {\n        Document doc = Jsoup.parse(lowercase, \"\", Parser.xmlParser());\n        assertEquals(0, doc.select(\"lowercase\").size());\n    }\n\n    @Test\n    public void xml_lowercase_wildcard_name() {\n        Document doc = Jsoup.parse(lowercase, \"\", Parser.xmlParser());\n        assertEquals(1, doc.select(\"*|lowercase\").size());\n    }\n\n    @Test\n    public void trimSelector() {\n        // https://github.com/jhy/jsoup/issues/1274\n        Document doc = Jsoup.parse(\"<p><span>Hello\");\n        Elements els = doc.select(\" p span \");\n        assertEquals(1, els.size());\n        assertEquals(\"Hello\", els.first().text());\n    }\n\n    @Test\n    public void xmlWildcardNamespaceTest() {\n        // https://github.com/jhy/jsoup/issues/1208\n        Document doc = Jsoup.parse(\"<ns1:MyXmlTag>1111</ns1:MyXmlTag><ns2:MyXmlTag>2222</ns2:MyXmlTag>\", \"\", Parser.xmlParser());\n        Elements select = doc.select(\"*|MyXmlTag\");\n        assertEquals(2, select.size());\n        assertEquals(\"1111\", select.get(0).text());\n        assertEquals(\"2222\", select.get(1).text());\n    }\n\n    @Test\n    public void childElements() {\n        // https://github.com/jhy/jsoup/issues/1292\n        String html = \"<body><span id=1>One <span id=2>Two</span></span></body>\";\n        Document doc = Jsoup.parse(html);\n\n        Element outer = doc.selectFirst(\"span\");\n        Element span = outer.selectFirst(\"span\");\n        Element inner = outer.selectFirst(\"* span\");\n\n        assertEquals(\"1\", outer.id());\n        assertEquals(\"1\", span.id());\n        assertEquals(\"2\", inner.id());\n        assertEquals(outer, span);\n        assertNotEquals(outer, inner);\n    }\n\n    @Test\n    public void selectFirstLevelChildrenOnly() {\n        // testcase for https://github.com/jhy/jsoup/issues/984\n        String html = \"<div><span>One <span>Two</span></span> <span>Three <span>Four</span></span>\";\n        Document doc = Jsoup.parse(html);\n\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n\n        // want to select One and Three only - the first level children\n        Elements spans = div.select(\":root > span\");\n        assertEquals(2, spans.size());\n        assertEquals(\"One Two\", spans.get(0).text());\n        assertEquals(\"Three Four\", spans.get(1).text());\n    }\n\n    @Test\n    public void wildcardNamespaceMatchesNoNamespace() {\n        // https://github.com/jhy/jsoup/issues/1565\n        String xml = \"<package><meta>One</meta><opf:meta>Two</opf:meta></package>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n\n        Elements metaEls = doc.select(\"meta\");\n        assertEquals(1, metaEls.size());\n        assertEquals(\"One\", metaEls.get(0).text());\n\n        Elements nsEls = doc.select(\"*|meta\");\n        assertEquals(2, nsEls.size());\n        assertEquals(\"One\", nsEls.get(0).text());\n        assertEquals(\"Two\", nsEls.get(1).text());\n    }\n\n    @Test void containsTextQueryIsNormalized() {\n        Document doc = Jsoup.parse(\"<p><p id=1>Hello  there now<em>!</em>\");\n        Elements a = doc.select(\"p:contains(Hello   there  now!)\");\n        Elements b = doc.select(\":containsOwn(hello   there  now)\");\n        Elements c = doc.select(\"p:contains(Hello there now)\");\n        Elements d = doc.select(\":containsOwn(hello There now)\");\n        Elements e = doc.select(\"p:contains(HelloThereNow)\");\n\n        assertEquals(1, a.size());\n        assertEquals(a, b);\n        assertEquals(a, c);\n        assertEquals(a, d);\n        assertEquals(0, e.size());\n        assertNotEquals(a, e);\n    }\n\n    @Test public void selectorExceptionNotStringFormatException() {\n        Selector.SelectorParseException ex = new Selector.SelectorParseException(\"%&\");\n        assertEquals(\"%&\", ex.getMessage());\n    }\n\n    @Test public void evaluatorMemosAreReset() {\n        Evaluator eval = QueryParser.parse(\"p ~ p\");\n        CombiningEvaluator.And andEval = (CombiningEvaluator.And) eval;\n        StructuralEvaluator.PreviousSibling prevEval = (StructuralEvaluator.PreviousSibling) andEval.evaluators.get(0);\n        IdentityHashMap<Element, IdentityHashMap<Element, Boolean>> map = prevEval.threadMemo.get();\n        assertEquals(0, map.size()); // no memo yet\n\n        Document doc1 = Jsoup.parse(\"<p>One<p>Two<p>Three\");\n        Document doc2 = Jsoup.parse(\"<p>One2<p>Two2<p>Three2\");\n\n        Elements s1 = doc1.select(eval);\n        assertEquals(2, s1.size());\n        assertEquals(\"Two\", s1.first().text());\n        Elements s2 = doc2.select(eval);\n        assertEquals(2, s2.size());\n        assertEquals(\"Two2\", s2.first().text());\n\n        assertEquals(1, map.size()); // root of doc 2\n    }\n\n    @Test public void blankTextNodesAreConsideredEmpty() {\n        // https://github.com/jhy/jsoup/issues/1976\n        String html = \"<li id=1>\\n </li><li id=2></li><li id=3> </li><li id=4>One</li><li id=5><span></li>\";\n        Document doc = Jsoup.parse(html);\n        Elements empty = doc.select(\"li:empty\");\n        Elements notEmpty = doc.select(\"li:not(:empty)\");\n\n        assertSelectedIds(empty, \"1\", \"2\", \"3\");\n        assertSelectedIds(notEmpty, \"4\", \"5\");\n    }\n\n    @Test\n    public void emptyPseudo() {\n        // https://github.com/jhy/jsoup/issues/2130\n        String html = \"<ul>\" +\n            \"  <li id='1'>\\n </li>\" + // Blank text node only\n            \"  <li id='2'></li>\" + // No nodes\n            \"  <li id='3'><!-- foo --></li>\" + // Comment node only\n            \"  <li id='4'>One</li>\" + // Text node with content\n            \"  <li id='5'><span></span></li>\" + // Element node\n            \"  <li id='6'>\\n <span></span></li>\" + // Blank text node followed by an element\n            \"  <li id='7'><!-- foo --><i></i></li>\" + // Comment node with element\n            \"</ul>\";\n        Document doc = Jsoup.parse(html);\n        Elements empty = doc.select(\"li:empty\");\n        assertSelectedIds(empty, \"1\", \"2\", \"3\");\n\n        Elements notEmpty = doc.select(\"li:not(:empty)\");\n        assertSelectedIds(notEmpty, \"4\", \"5\", \"6\", \"7\");\n    }\n\n    @Test public void parentFromSpecifiedDescender() {\n        // https://github.com/jhy/jsoup/issues/2018\n        String html = \"<ul id=outer><li>Foo</li><li>Bar <ul id=inner><li>Baz</li><li>Qux</li></ul> </li></ul>\";\n        Document doc = Jsoup.parse(html);\n\n        Element ul = doc.expectFirst(\"#outer\");\n        assertEquals(2, ul.childrenSize());\n\n        Element li1 = ul.expectFirst(\"> li:nth-child(1)\");\n        assertEquals(\"Foo\", li1.ownText());\n        assertTrue(li1.select(\"ul\").isEmpty());\n\n        Element li2 = ul.expectFirst(\"> li:nth-child(2)\");\n        assertEquals(\"Bar\", li2.ownText());\n\n        // And now for the bug - li2 select was not restricted to the li2 context\n        Elements innerLis = li2.select(\"ul > li\");\n        assertSelectedOwnText(innerLis, \"Baz\", \"Qux\");\n\n        // Confirm that parent selector (\" \") works same as immediate parent (\">\");\n        Elements innerLisFromParent = li2.select(\"ul li\");\n        assertEquals(innerLis, innerLisFromParent);\n    }\n\n    @Test public void rootImmediateParentSubquery() {\n        // a combinator at the start of the query is applied to the Root selector. i.e. \"> p\" matches a P immediately parented\n        // by the Root (which is <html> for a top level query, or the context element in :has)\n        // in the sub query, the combinator was dropped incorrectly\n        String html = \"<p id=0><span>A</p> <p id=1><b><i><span>B</p> <p id=2><i>C</p>\\n\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:has(> span, > i)\"); // should match a p with an immediate span or i\n        assertSelectedIds(els, \"0\", \"2\");\n    }\n\n    @Test public void is() {\n        String html = \"<h1 id=1><p></p></h1> <section><h1 id=2></h1></section> <article><h2 id=3></h2></article> <h2 id=4><p></p></h2>\";\n        Document doc = Jsoup.parse(html);\n\n        assertSelectedIds(\n            doc.select(\":is(section, article) :is(h1, h2, h3)\"),\n            \"2\", \"3\");\n\n        assertSelectedIds(\n            doc.select(\":is(section, article) ~ :is(h1, h2, h3):has(p)\"),\n            \"4\");\n\n        assertSelectedIds(\n            doc.select(\":is(h1:has(p), h2:has(section), h3)\"),\n            \"1\");\n\n        assertSelectedIds(\n            doc.select(\":is(h1, h2, h3):has(p)\"),\n            \"1\", \"4\");\n\n        String query = \"div :is(h1, h2)\";\n        Evaluator parse = QueryParser.parse(query);\n        assertEquals(query, parse.toString());\n    }\n\n    @Test public void orAfterClass() {\n        // see also QueryParserTest#parsesOrAfterAttribute\n        // https://github.com/jhy/jsoup/issues/2073\n        Document doc = Jsoup.parse(\"<div id=parent><span class=child></span><span class=child></span><span class=child></span></div>\");\n        String q = \"#parent [class*=child], .some-other-selector .nested\";\n        assertEquals(\"(Or (And (Parent (Id '#parent'))(AttributeWithValueContaining '[class*=child]'))(And (Class '.nested')(Parent (Class '.some-other-selector'))))\", EvaluatorDebug.sexpr(q));\n        Elements els = doc.select(q);\n        assertEquals(3, els.size());\n    }\n\n    @Test public void emptyAttributePrefix() {\n        // https://github.com/jhy/jsoup/issues/2079\n        // Discovered feature: [^] should find elements with any attribute (any prefix)\n        String html = \"<p one>One<p one two>Two<p>Three\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"[^]\");\n        assertSelectedOwnText(els, \"One\", \"Two\");\n\n        Elements emptyAttr = doc.select(\"p:not([^])\");\n        assertSelectedOwnText(emptyAttr, \"Three\");\n    }\n\n    @Test public void anyAttribute() {\n        // https://github.com/jhy/jsoup/issues/2079\n        String html = \"<div id=1><p one>One<p one two>Two<p>Three\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p[*]\");\n        assertSelectedOwnText(els, \"One\", \"Two\");\n\n        Elements emptyAttr = doc.select(\"p:not([*])\");\n        assertSelectedOwnText(emptyAttr, \"Three\");\n    }\n\n    @Test void divHasSpanPreceding() {\n        // https://github.com/jhy/jsoup/issues/2187\n        String html = \"<div><span>abc</span><a>def</a></div>\";\n        String q = \"div:has(span + a)\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(q);\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.first().normalName());\n    }\n\n    @Test void divHasDivPreceding() {\n        // https://github.com/jhy/jsoup/issues/2131\n        String html = \"<div id=1>\\n\" +\n            \"<div 1><span>hello</span></div>\\n\" +\n            \"<div 2><span>there</span></div>\\n\" +\n            \"\\n\" +\n            \"</div>\";\n\n        String q = \"div:has(>div + div)\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(q);\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.first().normalName());\n        assertEquals(\"1\", els.first().id());\n    }\n\n    @Test void nestedMultiHas() {\n        // https://github.com/jhy/jsoup/issues/2131\n        String html =\n            \"<html>\" +\n                \"<head></head>\" +\n                \"<body>\" +\n                \"<div id=o>\" +\n                \"<div id=i1><span id=s1>hello</span></div>\" +\n                \"<div id=i2><span id=s2>world</span></div>\" +\n                \"</div>\" +\n                \"</body></html>\";\n        Document document = Jsoup.parse(html);\n\n        String q = \"div:has(> div:has(> span) + div:has(> span))\";\n        Elements els = document.select(q);\n        assertEquals(1, els.size());\n        assertEquals(\"o\", els.get(0).id());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String mixedCase =\n        \"<html xmlns:n=\\\"urn:ns\\\"><n:mixedCase>text</n:mixedCase></html>\";", "docstring": " https://github.com/jhy/jsoup/issues/1257", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "mixedCase =\n        \"<html xmlns:n=\\\"urn:ns\\\"><n:mixedCase>text</n:mixedCase></html>\"", "syntax_pass": true}, {"attribute_expression": "private final String lowercase =\n        \"<html xmlns:n=\\\"urn:ns\\\"><n:lowercase>text</n:lowercase></html>\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "lowercase =\n        \"<html xmlns:n=\\\"urn:ns\\\"><n:lowercase>text</n:lowercase></html>\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/select/CssTest.java.CssTest", "name": "CssTest", "file_path": "src/test/java/org/jsoup/select/CssTest.java", "superclasses": "", "methods": ["[void]firstChild()", "[void]lastChild()", "[void]nthChild_simple()", "[void]nthOfType_unknownTag()", "[void]nthLastChild_simple()", "[void]nthOfType_simple()", "[void]nthLastOfType_simple()", "[void]nthChild_advanced()", "[void]nthOfType_advanced()", "[void]nthLastChild_advanced()", "[void]nthLastOfType_advanced()", "[void]firstOfType()", "[void]lastOfType()", "[void]empty()", "[void]onlyChild()", "[void]onlyOfType()", "[void]root()"], "method_uris": ["src/test/java/org/jsoup/select/CssTest.java.CssTest.[void]initClass()", "src/test/java/org/jsoup/select/CssTest.java.CssTest.[void]init()", "src/test/java/org/jsoup/select/CssTest.java.CssTest.[void]check(Elements)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CssTest {\n\n\tprivate Document html = null;\n\tprivate static String htmlString;\n\n\t@BeforeAll\n\tpublic static void initClass() {\n\t\tStringBuilder sb = new StringBuilder(\"<html><head></head><body>\");\n\n\t\tsb.append(\"<div id='pseudo'>\");\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n\t\t}\n\t\tsb.append(\"</div>\");\n\n\t\tsb.append(\"<div id='type'>\");\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n\t\t\tsb.append(String.format(\"<span>%d</span>\",i));\n\t\t\tsb.append(String.format(\"<em>%d</em>\",i));\n            sb.append(String.format(\"<svg>%d</svg>\",i));\n\t\t}\n\t\tsb.append(\"</div>\");\n\n\t\tsb.append(\"<span id='onlySpan'><br /></span>\");\n\t\tsb.append(\"<p class='empty'><!-- Comment only is still empty! --></p>\");\n\n\t\tsb.append(\"<div id='only'>\");\n\t\tsb.append(\"Some text before the <em>only</em> child in this div\");\n\t\tsb.append(\"</div>\");\n\n\t\tsb.append(\"</body></html>\");\n\t\thtmlString = sb.toString();\n\t}\n\n\t@BeforeEach\n\tpublic void init() {\n\t\thtml  = Jsoup.parse(htmlString);\n\t}\n\n\t@Test\n\tpublic void firstChild() {\n\t\tcheck(html.select(\"#pseudo :first-child\"), \"1\");\n\t\tcheck(html.select(\"html:first-child\"));\n\t}\n\n\t@Test\n\tpublic void lastChild() {\n\t\tcheck(html.select(\"#pseudo :last-child\"), \"10\");\n\t\tcheck(html.select(\"html:last-child\"));\n\t}\n\n\t@Test\n\tpublic void nthChild_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#pseudo :nth-child(%d)\", i)), String.valueOf(i));\n\t\t}\n\t}\n\n    @Test\n    public void nthOfType_unknownTag() {\n        for(int i = 1; i <=10; i++) {\n            check(html.select(String.format(\"#type svg:nth-of-type(%d)\", i)), String.valueOf(i));\n        }\n    }\n\n\t@Test\n\tpublic void nthLastChild_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#pseudo :nth-last-child(%d)\", i)), String.valueOf(11-i));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void nthOfType_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#type p:nth-of-type(%d)\", i)), String.valueOf(i));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void nthLastOfType_simple() {\n\t\tfor(int i = 1; i <=10; i++) {\n\t\t\tcheck(html.select(String.format(\"#type :nth-last-of-type(%d)\", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void nthChild_advanced() {\n\t\tcheck(html.select(\"#pseudo :nth-child(-5)\"));\n\t\tcheck(html.select(\"#pseudo :nth-child(odd)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n-1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n+1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n+3)\"), \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-child(even)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-child(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-child(3n-1)\"), \"2\", \"5\", \"8\");\n\t\tcheck(html.select(\"#pseudo :nth-child(-2n+5)\"), \"1\", \"3\", \"5\");\n\t\tcheck(html.select(\"#pseudo :nth-child(+5)\"), \"5\");\n\t}\n\n\t@Test\n\tpublic void nthOfType_advanced() {\n\t\tcheck(html.select(\"#type :nth-of-type(-5)\"));\n\t\tcheck(html.select(\"#type p:nth-of-type(odd)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type em:nth-of-type(2n-1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-of-type(2n+1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type span:nth-of-type(2n+3)\"), \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-of-type(even)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type p:nth-of-type(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type p:nth-of-type(3n-1)\"), \"2\", \"5\", \"8\");\n\t\tcheck(html.select(\"#type p:nth-of-type(-2n+5)\"), \"1\", \"3\", \"5\");\n\t\tcheck(html.select(\"#type :nth-of-type(+5)\"), \"5\", \"5\", \"5\", \"5\");\n\t}\n\n\n\t@Test\n\tpublic void nthLastChild_advanced() {\n\t\tcheck(html.select(\"#pseudo :nth-last-child(-5)\"));\n\t\tcheck(html.select(\"#pseudo :nth-last-child(odd)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n-1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n+1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n+3)\"), \"2\", \"4\", \"6\", \"8\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(even)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(2n)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(3n-1)\"), \"3\", \"6\", \"9\");\n\n\t\tcheck(html.select(\"#pseudo :nth-last-child(-2n+5)\"), \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#pseudo :nth-last-child(+5)\"), \"6\");\n\t}\n\n\t@Test\n\tpublic void nthLastOfType_advanced() {\n\t\tcheck(html.select(\"#type :nth-last-of-type(-5)\"));\n\t\tcheck(html.select(\"#type p:nth-last-of-type(odd)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type em:nth-last-of-type(2n-1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(2n+1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type span:nth-last-of-type(2n+3)\"), \"2\", \"4\", \"6\", \"8\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(even)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(2n)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n\t\tcheck(html.select(\"#type p:nth-last-of-type(3n-1)\"), \"3\", \"6\", \"9\");\n\n\t\tcheck(html.select(\"#type span:nth-last-of-type(-2n+5)\"), \"6\", \"8\", \"10\");\n\t\tcheck(html.select(\"#type :nth-last-of-type(+5)\"), \"6\", \"6\", \"6\", \"6\");\n\t}\n\n\t@Test\n\tpublic void firstOfType() {\n\t\tcheck(html.select(\"div:not(#only) :first-of-type\"), \"1\", \"1\", \"1\", \"1\", \"1\");\n\t}\n\n\t@Test\n\tpublic void lastOfType() {\n\t\tcheck(html.select(\"div:not(#only) :last-of-type\"), \"10\", \"10\", \"10\", \"10\", \"10\");\n\t}\n\n\t@Test\n\tpublic void empty() {\n\t\tfinal Elements sel = html.select(\":empty\");\n\t\tassertEquals(3, sel.size());\n\t\tassertEquals(\"head\", sel.get(0).tagName());\n\t\tassertEquals(\"br\", sel.get(1).tagName());\n\t\tassertEquals(\"p\", sel.get(2).tagName());\n\t}\n\n\t@Test\n\tpublic void onlyChild() {\n\t\tfinal Elements sel = html.select(\"span :only-child\");\n\t\tassertEquals(1, sel.size());\n\t\tassertEquals(\"br\", sel.get(0).tagName());\n\n\t\tcheck(html.select(\"#only :only-child\"), \"only\");\n\t}\n\n\t@Test\n\tpublic void onlyOfType() {\n\t\tfinal Elements sel = html.select(\":only-of-type\");\n\t\tassertEquals(6, sel.size());\n\t\tassertEquals(\"head\", sel.get(0).tagName());\n\t\tassertEquals(\"body\", sel.get(1).tagName());\n\t\tassertEquals(\"span\", sel.get(2).tagName());\n\t\tassertEquals(\"br\", sel.get(3).tagName());\n\t\tassertEquals(\"p\", sel.get(4).tagName());\n\t\tassertTrue(sel.get(4).hasClass(\"empty\"));\n\t\tassertEquals(\"em\", sel.get(5).tagName());\n\t}\n\n\tprotected void check(Elements result, String...expectedContent ) {\n\t\tassertEquals(expectedContent.length, result.size(), \"Number of elements\");\n\t\tfor (int i = 0; i < expectedContent.length; i++) {\n\t\t\tassertNotNull(result.get(i));\n\t\t\tassertEquals(expectedContent[i], result.get(i).ownText(), \"Expected element\");\n\t\t}\n\t}\n\n\t@Test\n\tpublic void root() {\n\t\tElements sel = html.select(\":root\");\n\t\tassertEquals(1, sel.size());\n\t\tassertNotNull(sel.get(0));\n\t\tassertEquals(Tag.valueOf(\"html\"), sel.get(0).tag());\n\n\t\tElements sel2 = html.select(\"body\").select(\":root\");\n\t\tassertEquals(1, sel2.size());\n\t\tassertNotNull(sel2.get(0));\n\t\tassertEquals(Tag.valueOf(\"body\"), sel2.get(0).tag());\n\t}\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private Document html = null;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Document", "name": "html = null", "syntax_pass": true}, {"attribute_expression": "private static String htmlString;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String", "name": "htmlString", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/select/TraversorTest.java.TraversorTest", "name": "TraversorTest", "file_path": "src/test/java/org/jsoup/select/TraversorTest.java", "superclasses": "", "methods": ["[void]filterVisit()", "[void]filterSkipChildren()", "[void]filterSkipEntirely()", "[void]filterRemove()", "[void]filterStop()", "[void]replaceElement()", "[void]canAddChildren()", "[void]canSpecifyOnlyHead()", "[void]canRemoveDuringHead()", "[void]elementFunctionalTraverse()", "[void]seesDocRoot()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TraversorTest {\n    // Note: NodeTraversor.traverse(new NodeVisitor) is tested in\n    // ElementsTest#traverse()\n\n    @Test\n    public void filterVisit() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n    }\n\n    @Test\n    public void filterSkipChildren() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n                // OMIT contents of p:\n                return (\"p\".equals(node.nodeName())) ? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div><p></p></div><div><#text></#text></div>\", accum.toString());\n    }\n\n    @Test\n    public void filterSkipEntirely() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                // OMIT p:\n                if (\"p\".equals(node.nodeName()))\n                    return FilterResult.SKIP_ENTIRELY;\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div></div><div><#text></#text></div>\", accum.toString());\n    }\n\n    @Test\n    public void filterRemove() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There be <b>bold</b></div>\");\n        NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                // Delete \"p\" in head:\n                return (\"p\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                // Delete \"b\" in tail:\n                return (\"b\".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div></div>\\n<div>\\n There be\\n</div>\", doc.select(\"body\").html());\n    }\n\n    @Test\n    public void filterStop() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n                // Stop after p.\n                return (\"p\".equals(node.nodeName())) ? FilterResult.STOP : FilterResult.CONTINUE;\n            }\n        }, doc.select(\"div\"));\n        assertEquals(\"<div><p><#text></#text></p>\", accum.toString());\n    }\n\n    @Test public void replaceElement() {\n        // https://github.com/jhy/jsoup/issues/1289\n        // test we can replace an element during traversal\n        String html = \"<div><p>One <i>two</i> <i>three</i> four.</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        NodeTraversor.traverse(new NodeVisitor() {\n            @Override\n            public void head(Node node, int depth) {\n                if (node instanceof Element) {\n                    Element el = (Element) node;\n                    if (el.nameIs(\"i\")) {\n                        Element u = new Element(\"u\").insertChildren(0, el.childNodes());\n                        el.replaceWith(u);\n                    }\n                }\n            }\n\n            @Override\n            public void tail(Node node, int depth) {}\n        }, doc);\n\n        Element p = doc.selectFirst(\"p\");\n        assertNotNull(p);\n        assertEquals(\"<p>One <u>two</u> <u>three</u> four.</p>\", p.outerHtml());\n    }\n\n    @Test public void canAddChildren() {\n        Document doc = Jsoup.parse(\"<div><p></p><p></p></div>\");\n\n        NodeTraversor.traverse(new NodeVisitor() {\n            int i = 0;\n            @Override\n            public void head(Node node, int depth) {\n                if (node.nodeName().equals(\"p\")) {\n                    Element p = (Element) node;\n                    p.append(\"<span>\" + i++ + \"</span>\");\n                }\n            }\n\n            @Override\n            public void tail(Node node, int depth) {\n                if (node.nodeName().equals(\"p\")) {\n                    Element p = (Element) node;\n                    p.append(\"<span>\" + i++ + \"</span>\");\n                }\n            }\n        }, doc);\n\n        assertEquals(\"<div>\\n\" +\n            \" <p><span>0</span><span>1</span></p>\\n\" +\n            \" <p><span>2</span><span>3</span></p>\\n\" +\n            \"</div>\", doc.body().html());\n    }\n\n    @Test public void canSpecifyOnlyHead() {\n        // really, a compilation test - works as a lambda if just head\n        Document doc = Jsoup.parse(\"<div><p>One</p></div>\");\n        final int[] count = {0};\n        NodeTraversor.traverse((node, depth) -> count[0]++, doc);\n        assertEquals(7, count[0]);\n    }\n\n    @Test public void canRemoveDuringHead() {\n        Document doc = Jsoup.parse(\"<div><p id=1>Zero<p id=1>One<p id=2>Two<p>Three</div>\");\n        NodeTraversor.traverse((node, depth) -> {\n            if (node.attr(\"id\").equals(\"1\"))\n                node.remove();\n            else if (node instanceof TextNode && ((TextNode) node).text().equals(\"Three\"))\n                node.remove();\n        }, doc);\n\n        assertEquals(\"<div><p id=\\\"2\\\">Two</p><p></p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test void elementFunctionalTraverse() {\n        Document doc = Jsoup.parse(\"<div><p>1<p>2<p>3\");\n        Element body = doc.body();\n\n        AtomicInteger seenCount = new AtomicInteger();\n        AtomicInteger deepest = new AtomicInteger();\n        body.traverse((node, depth) -> {\n            seenCount.incrementAndGet();\n            if (depth > deepest.get()) deepest.set(depth);\n        });\n\n        assertEquals(8, seenCount.get()); // body and contents\n        assertEquals(3, deepest.get());\n    }\n\n    @Test void seesDocRoot() {\n        Document doc = Jsoup.parse(\"<p>One\");\n        AtomicBoolean seen = new AtomicBoolean(false);\n        doc.traverse((node, depth) -> {\n            if (node.equals(doc))\n                seen.set(true);\n        });\n        assertTrue(seen.get());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/select/SelectorIT.java.SelectorIT", "name": "SelectorIT", "file_path": "src/test/java/org/jsoup/select/SelectorIT.java", "superclasses": "", "methods": ["[void]multiThreadHas()"], "method_uris": [], "overrides": null, "attributes": [{"original_string": "    static class ThreadCatcher implements Thread.UncaughtExceptionHandler {\n        AtomicInteger exceptionCount = new AtomicInteger();\n\n        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n\n            e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }\n    }", "definition": "    static class ThreadCatcher implements Thread.UncaughtExceptionHandler", "class_docstring": "", "name": "ThreadCatcher", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "fields": [{"attribute_expression": "AtomicInteger exceptionCount = new AtomicInteger();", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicInteger", "name": "exceptionCount = new AtomicInteger()", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n\n            e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "uncaughtException", "params": [{"name": "t", "type": "Thread"}, {"name": "e", "type": "Throwable"}], "body": "                                                             {\n\n            e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }", "signature": "@Override\n        public void uncaughtException(Thread t, Throwable e)"}]}], "class_docstring": "", "original_string": "public class SelectorIT {\n\n    @Test\n    public void multiThreadHas() throws InterruptedException {\n        final String html = \"<div id=1></div><div id=2><p>One</p><p>Two</p>\";\n        final Evaluator eval = QueryParser.parse(\"div:has(p)\");\n\n        int numThreads = 20;\n        int numThreadLoops = 5;\n\n        SelectorIT.ThreadCatcher catcher = new SelectorIT.ThreadCatcher();\n\n        Thread[] threads = new Thread[numThreads];\n        for (int threadNum = 0; threadNum < numThreads; threadNum++) {\n            Thread thread = new Thread(() -> {\n                Document doc = Jsoup.parse(html);\n                for (int loop = 0; loop < numThreadLoops; loop++) {\n                    Elements els = doc.select(eval);\n                    assertEquals(1, els.size());\n                    assertEquals(\"2\", els.get(0).id());\n                }\n            });\n            thread.setName(\"Runner-\" + threadNum);\n            thread.start();\n            thread.setUncaughtExceptionHandler(catcher);\n            threads[threadNum] = thread;\n        }\n\n        // now join them all\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(0, catcher.exceptionCount.get());\n    }\n\n    static class ThreadCatcher implements Thread.UncaughtExceptionHandler {\n        AtomicInteger exceptionCount = new AtomicInteger();\n\n        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n\n            e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/integration/ConnectIT.java.ConnectIT", "name": "ConnectIT", "file_path": "src/test/java/org/jsoup/integration/ConnectIT.java", "superclasses": "", "methods": ["[void]canInterruptBodyStringRead()", "[void]canInterruptDocumentRead()", "[void]canInterruptThenJoinASpawnedThread()", "[void]totalTimeout()", "[void]slowReadOk()", "[void]infiniteReadSupported()", "[void]streamParserUncheckedExceptionOnTimeoutInStream()", "[void]streamParserCheckedExceptionOnTimeoutInSelect()", "[void]remainingAfterFirstRead()", "[void]noLimitAfterFirstRead()", "[void]bodyStreamConstrainedViaBufferUp()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nFailsafe integration tests for Connect methods. These take a bit longer to run, so included as Integ, not Unit, tests.\n", "original_string": "public class ConnectIT {\n    // Slow Rider tests.\n    @Test\n    public void canInterruptBodyStringRead() throws InterruptedException {\n        // todo - implement in interruptable channels, so it's immediate\n        final String[] body = new String[1];\n        Thread runner = new Thread(() -> {\n            try {\n                Connection.Response res = Jsoup.connect(SlowRider.Url)\n                    .timeout(15 * 1000)\n                    .execute();\n                body[0] = res.body();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        });\n\n        runner.start();\n        Thread.sleep(1000 * 3);\n        runner.interrupt();\n        assertTrue(runner.isInterrupted());\n        runner.join();\n\n        assertTrue(body[0].length() > 0);\n        assertTrue(body[0].contains(\"<p>Are you still there?\"));\n    }\n\n    @Test\n    public void canInterruptDocumentRead() throws InterruptedException {\n        // todo - implement in interruptable channels, so it's immediate\n        long start = System.currentTimeMillis();\n        final String[] body = new String[1];\n        Thread runner = new Thread(() -> {\n            try {\n                Connection.Response res = Jsoup.connect(SlowRider.Url)\n                    .timeout(15 * 1000)\n                    .execute();\n                body[0] = res.parse().text();\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n        });\n\n        runner.start();\n        Thread.sleep(3 * 1000);\n        runner.interrupt();\n        assertTrue(runner.isInterrupted());\n        runner.join();\n\n        long end = System.currentTimeMillis();\n        // check we are between 3 and connect timeout seconds (should be just over 3; but allow some slack for slow CI runners)\n        assertTrue(end - start > 3 * 1000);\n        assertTrue(end - start < 10 * 1000);\n    }\n\n    @Test public void canInterruptThenJoinASpawnedThread() throws InterruptedException {\n        // https://github.com/jhy/jsoup/issues/1991\n        AtomicBoolean ioException = new AtomicBoolean();\n        Thread runner = new Thread(() -> {\n            try {\n                while (!Thread.currentThread().isInterrupted()) {\n                    Document doc  = Jsoup.connect(SlowRider.Url)\n                        .timeout(30000)\n                        .get();\n                }\n            } catch (IOException e) {\n                ioException.set(true); // don't expect to catch, because the outer sleep will complete before this timeout\n            }\n        });\n\n        runner.start();\n        Thread.sleep(2 * 1000);\n        runner.interrupt();\n        runner.join();\n        assertFalse(ioException.get());\n    }\n\n    @Test\n    public void totalTimeout() throws IOException {\n        int timeout = 3 * 1000;\n        long start = System.currentTimeMillis();\n        boolean threw = false;\n        try {\n            Jsoup.connect(SlowRider.Url).timeout(timeout).get();\n        } catch (SocketTimeoutException e) {\n            long end = System.currentTimeMillis();\n            long took = end - start;\n            assertTrue(took > timeout, (\"Time taken was \" + took));\n            assertTrue(took < timeout * 1.8, (\"Time taken was \" + took));\n            threw = true;\n        }\n\n        assertTrue(threw);\n    }\n\n    @Test\n    public void slowReadOk() throws IOException {\n        // make sure that a slow read that is under the request timeout is still OK\n        Document doc = Jsoup.connect(SlowRider.Url)\n            .data(SlowRider.MaxTimeParam, \"2000\") // the request completes in 2 seconds\n            .get();\n\n        Element h1 = doc.selectFirst(\"h1\");\n        assertEquals(\"outatime\", h1.text());\n    }\n\n    @Test\n    public void infiniteReadSupported() throws IOException {\n        Document doc = Jsoup.connect(SlowRider.Url)\n            .timeout(0)\n            .data(SlowRider.MaxTimeParam, \"2000\")\n            .get();\n\n        Element h1 = doc.selectFirst(\"h1\");\n        assertEquals(\"outatime\", h1.text());\n    }\n\n    @Test void streamParserUncheckedExceptionOnTimeoutInStream() throws IOException {\n        boolean caught = false;\n        try (StreamParser streamParser = Jsoup.connect(SlowRider.Url)\n            .data(SlowRider.MaxTimeParam, \"10000\")\n            .data(SlowRider.IntroSizeParam, \"8000\") // 8K to pass first buffer, or the timeout would occur in execute or streamparser()\n            .timeout(4000) // has a 1000 sleep at the start\n            .execute()\n            .streamParser()) {\n\n            // we should expect to timeout while in stream\n            try {\n                long count = streamParser.stream().count();\n            } catch (Exception e) {\n                caught = true;\n                UncheckedIOException ioe = (UncheckedIOException) e;\n                IOException cause = ioe.getCause();\n                //assertInstanceOf(SocketTimeoutException.class, cause); // different JDKs seem to wrap this differently\n                assertInstanceOf(IOException.class, cause);\n\n            }\n        }\n        assertTrue(caught);\n    }\n\n    @Test void streamParserCheckedExceptionOnTimeoutInSelect() throws IOException {\n        boolean caught = false;\n        try (StreamParser streamParser = Jsoup.connect(SlowRider.Url)\n            .data(SlowRider.MaxTimeParam, \"10000\")\n            .data(SlowRider.IntroSizeParam, \"8000\") // 8K to pass first buffer, or the timeout would occur in execute or streamparser()\n            .timeout(4000) // has a 1000 sleep at the start\n            .execute()\n            .streamParser()) {\n\n            // we should expect to timeout while in stream\n            try {\n                long count = 0;\n                while (streamParser.selectNext(\"p\") != null) {\n                    count++;\n                }\n            } catch (IOException e) {\n                caught = true;\n            }\n        }\n        assertTrue(caught);\n    }\n\n    private static final int LargeHtmlSize = 280735;\n\n    @Test\n    public void remainingAfterFirstRead() throws IOException {\n        int bufferSize = 5 * 1024;\n        int capSize = 100 * 1024;\n\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n\n        try (BufferedInputStream stream = Jsoup.connect(url).maxBodySize(capSize)\n            .execute().bodyStream()) {\n\n            // simulates parse which does a limited read first\n            stream.mark(bufferSize);\n            ByteBuffer firstBytes = DataUtil.readToByteBuffer(stream, bufferSize);\n\n            byte[] array = firstBytes.array();\n            String firstText = new String(array, StandardCharsets.UTF_8);\n            assertTrue(firstText.startsWith(\"<html><head><title>Large\"));\n            assertEquals(bufferSize, array.length);\n\n            boolean fullyRead = stream.read() == -1;\n            assertFalse(fullyRead);\n\n            // reset and read again\n            stream.reset();\n            ByteBuffer fullRead = DataUtil.readToByteBuffer(stream, 0);\n            byte[] fullArray = fullRead.array();\n\n            // bodyStream is not capped to body size - only for jsoup consumed stream\n            assertTrue(fullArray.length > capSize);\n\n            assertEquals(LargeHtmlSize, fullRead.limit());\n            String fullText = new String(fullRead.array(), 0, fullRead.limit(), StandardCharsets.UTF_8);\n            assertTrue(fullText.startsWith(firstText));\n            assertEquals(LargeHtmlSize, fullText.length());\n        }\n    }\n\n    @Test\n    public void noLimitAfterFirstRead() throws IOException {\n        int firstMaxRead = 5 * 1024;\n\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n        try (BufferedInputStream stream = Jsoup.connect(url).execute().bodyStream()) {\n            // simulates parse which does a limited read first\n            stream.mark(firstMaxRead);\n            ByteBuffer firstBytes = DataUtil.readToByteBuffer(stream, firstMaxRead);\n            byte[] array = firstBytes.array();\n            String firstText = new String(array, StandardCharsets.UTF_8);\n            assertTrue(firstText.startsWith(\"<html><head><title>Large\"));\n            assertEquals(firstMaxRead, array.length);\n\n            // reset and read fully\n            stream.reset();\n            ByteBuffer fullRead = DataUtil.readToByteBuffer(stream, 0);\n            assertEquals(LargeHtmlSize, fullRead.limit());\n            String fullText = new String(fullRead.array(), 0, fullRead.limit(), StandardCharsets.UTF_8);\n            assertTrue(fullText.startsWith(firstText));\n            assertEquals(LargeHtmlSize, fullText.length());\n        }\n    }\n\n    @Test public void bodyStreamConstrainedViaBufferUp() throws IOException {\n        int cap = 5 * 1024;\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n        try (BufferedInputStream stream = Jsoup\n            .connect(url)\n            .maxBodySize(cap)\n            .execute()\n            .bufferUp()\n            .bodyStream()) {\n\n            ByteBuffer cappedRead = DataUtil.readToByteBuffer(stream, 0);\n            assertEquals(cap, cappedRead.limit());\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int LargeHtmlSize = 280735;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "LargeHtmlSize = 280735", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/integration/UrlConnectTest.java.UrlConnectTest", "name": "UrlConnectTest", "file_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java", "superclasses": "", "methods": ["[void]fetchBaidu()", "[void]exceptOnUnknownContentType()", "[void]ignoresContentTypeIfSoConfigured()", "[void]followsTempRedirect()", "[void]followsNewTempRedirect()", "[void]postRedirectsFetchWithGet()", "[void]followsRedirectToHttps()", "[void]followsRelativeRedirect()", "[void]followsRelativeDotRedirect()", "[void]followsRelativeDotRedirect2()", "[void]followsRedirectsWithWithespaces()", "[void]gracefullyHandleBrokenLocationRedirect()", "[void]ignores500tExceptionIfSoConfigured()", "[void]ignores500WithNoContentExceptionIfSoConfigured()", "[void]ignores200WithNoContentExceptionIfSoConfigured()", "[void]handles200WithNoContent()", "[void]doesntRedirectIfSoConfigured()", "[void]redirectsResponseCookieToNextResponse()", "[void]maximumRedirects()", "[void]handlesDodgyCharset()", "[void]testUnsafeFail()", "[void]testSNIFail()", "[void]shouldWorkForCharsetInExtraAttribute()", "[void]shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()", "[void]shouldParseBrokenHtml5MetaCharsetTagCorrectly()", "[void]shouldEmptyMetaCharsetCorrectly()", "[void]shouldWorkForDuplicateCharsetInTag()", "[void]handles201Created()", "[void]fetchViaHttpProxy()", "[void]fetchViaHttpProxySetByArgument()", "[void]invalidProxyFails()", "[void]proxyGetAndSet()", "[void]throwsIfRequestBodyForGet()", "[void]canSpecifyResponseCharset()", "[void]handlesUnescapedRedirects()", "[void]handlesEscapesInRedirecct()", "[void]handlesUt8fInUrl()", "[void]inWildUtfRedirect()", "[void]inWildUtfRedirect2()", "[void]handlesEscapedRedirectUrls()", "[void]handlesUnicodeInQuery()", "[void]handlesSuperDeepPage()", "[void]handles966()", "[void]canRequestIdn()"], "method_uris": ["src/test/java/org/jsoup/integration/UrlConnectTest.java.UrlConnectTest.[String]ihVal(String,Document)"], "overrides": null, "attributes": [], "class_docstring": "\nTests the URL connection. Not enabled by default, so tests don't require network connection.\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "@Disabled // ignored by default so tests don't require network access. comment out to enable.\n// todo: rebuild these into a local Jetty test server, so not reliant on the vagaries of the internet.\npublic class UrlConnectTest {\n    private static final String WEBSITE_WITH_INVALID_CERTIFICATE = \"https://certs.cac.washington.edu/CAtest/\";\n    private static final String WEBSITE_WITH_SNI = \"https://jsoup.org/\";\n    public static String browserUa = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36\";\n\n    @Test\n    public void fetchBaidu() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://www.baidu.com/\").timeout(10*1000).execute();\n        Document doc = res.parse();\n\n        assertEquals(\"GBK\", doc.outputSettings().charset().displayName());\n        assertEquals(\"GBK\", res.charset());\n        assert(res.hasCookie(\"BAIDUID\"));\n        assertEquals(\"text/html;charset=gbk\", res.contentType());\n    }\n\n    @Test\n    public void exceptOnUnknownContentType() {\n        String url = \"http://direct.jsoup.org/rez/osi_logo.png\"; // not text/* but image/png, should throw\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.parse(new URL(url), 3000);\n        } catch (UnsupportedMimeTypeException e) {\n            threw = true;\n            assertEquals(\"org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://direct.jsoup.org/rez/osi_logo.png\", e.toString());\n            assertEquals(url, e.getUrl());\n            assertEquals(\"image/png\", e.getMimeType());\n        } catch (IOException e) {\n        }\n        assertTrue(threw);\n    }\n\n    @Test\n    public void ignoresContentTypeIfSoConfigured() throws IOException {\n        Document doc = Jsoup.connect(\"https://jsoup.org/rez/osi_logo.png\").ignoreContentType(true).get();\n        assertEquals(\"\", doc.title()); // this will cause an ugly parse tree\n    }\n\n    private static String ihVal(String key, Document doc) {\n        return doc.select(\"th:contains(\"+key+\") + td\").first().text();\n    }\n\n    @Test\n    public void followsTempRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\"); // http://jsoup.org\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }\n\n    @Test\n    public void followsNewTempRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/307.pl\"); // http://jsoup.org\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n        assertEquals(\"https://jsoup.org/\", con.response().url().toString());\n    }\n\n    @Test\n    public void postRedirectsFetchWithGet() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\")\n                .data(\"Argument\", \"Riposte\")\n                .method(Connection.Method.POST);\n        Connection.Response res = con.execute();\n        assertEquals(\"https://jsoup.org/\", res.url().toExternalForm());\n        assertEquals(Connection.Method.GET, res.method());\n    }\n\n    @Test\n    public void followsRedirectToHttps() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-secure.pl\"); // https://www.google.com\n        con.data(\"id\", \"5\");\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"Google\"));\n    }\n\n    @Test\n    public void followsRelativeRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel.pl\"); // to /tidy/\n        Document doc = con.post();\n        assertTrue(doc.title().contains(\"HTML Tidy Online\"));\n    }\n\n    @Test\n    public void followsRelativeDotRedirect() throws IOException {\n        // redirects to \"./ok.html\", should resolve to http://direct.infohound.net/tools/ok.html\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-rel-dot.pl\"); // to ./ok.html\n        Document doc = con.post();\n        assertTrue(doc.title().contains(\"OK\"));\n        assertEquals(doc.location(), \"http://direct.infohound.net/tools/ok.html\");\n    }\n\n    @Test\n    public void followsRelativeDotRedirect2() throws IOException {\n        //redirects to \"esportspenedes.cat/./ep/index.php\", should resolve to \"esportspenedes.cat/ep/index.php\"\n        Connection con = Jsoup.connect(\"http://esportspenedes.cat\")  // note lack of trailing / - server should redir to / first, then to ./ep/...; but doesn't'\n                .timeout(10000);\n        Document doc = con.post();\n        assertEquals(doc.location(), \"http://esportspenedes.cat/ep/index.php\");\n    }\n\n    @Test\n    public void followsRedirectsWithWithespaces() throws IOException {\n        Connection con = Jsoup.connect(\"http://tinyurl.com/kgofxl8\"); // to http://www.google.com/?q=white spaces\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"Google\"));\n    }\n\n    @Test\n    public void gracefullyHandleBrokenLocationRedirect() throws IOException {\n        Connection con = Jsoup.connect(\"http://aag-ye.com\"); // has Location: http:/temp/AAG_New/en/index.php\n        con.get(); // would throw exception on error\n        assertTrue(true);\n    }\n\n    @Test\n    public void ignores500tExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/500.pl\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(500, res.statusCode());\n        assertEquals(\"Application Error\", res.statusMessage());\n        assertEquals(\"Woops\", doc.select(\"h1\").first().text());\n    }\n\n    @Test\n    public void ignores500WithNoContentExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/500-no-content.pl\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(500, res.statusCode());\n        assertEquals(\"Application Error\", res.statusMessage());\n    }\n\n    @Test\n    public void ignores200WithNoContentExceptionIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/200-no-content.pl\").ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(200, res.statusCode());\n        assertEquals(\"All Good\", res.statusMessage());\n    }\n\n    @Test\n    public void handles200WithNoContent() throws IOException {\n        Connection con = Jsoup\n            .connect(\"http://direct.infohound.net/tools/200-no-content.pl\")\n            .userAgent(browserUa);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(200, res.statusCode());\n\n        con = Jsoup\n            .connect(\"http://direct.infohound.net/tools/200-no-content.pl\")\n            .parser(Parser.xmlParser())\n            .userAgent(browserUa);\n        res = con.execute();\n        doc = res.parse();\n        assertEquals(200, res.statusCode());\n    }\n\n    @Test\n    public void doesntRedirectIfSoConfigured() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\").followRedirects(false);\n        Connection.Response res = con.execute();\n        assertEquals(302, res.statusCode());\n        assertEquals(\"http://jsoup.org\", res.header(\"Location\"));\n    }\n\n    @Test\n    public void redirectsResponseCookieToNextResponse() throws IOException {\n        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302-cookie.pl\");\n        Connection.Response res = con.execute();\n        assertEquals(\"asdfg123\", res.cookie(\"token\")); // confirms that cookies set on 1st hit are presented in final result\n        Document doc = res.parse();\n        assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"HTTP_COOKIE\", doc)); // confirms that redirected hit saw cookie\n    }\n\n    @Test\n    public void maximumRedirects() {\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.connect(\"http://direct.infohound.net/tools/loop.pl\").get();\n        } catch (IOException e) {\n            assertTrue(e.getMessage().contains(\"Too many redirects\"));\n            threw = true;\n        }\n        assertTrue(threw);\n    }\n\n    @Test\n    public void handlesDodgyCharset() throws IOException {\n        // tests that when we get back \"UFT8\", that it is recognised as unsupported, and falls back to default instead\n        String url = \"http://direct.infohound.net/tools/bad-charset.pl\";\n        Connection.Response res = Jsoup.connect(url).execute();\n        assertEquals(\"text/html; charset=UFT8\", res.header(\"Content-Type\")); // from the header\n        assertNull(res.charset()); // tried to get from header, not supported, so returns null\n        Document doc = res.parse(); // would throw an error if charset unsupported\n        assertTrue(doc.text().contains(\"Hello!\"));\n        assertEquals(\"UTF-8\", res.charset()); // set from default on parse\n    }\n\n    /**\n     * Verify that security disabling feature works properly.\n     * <p/>\n     * 1. try to hit url with invalid certificate and evaluate that exception is thrown\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testUnsafeFail() throws Exception {\n        String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n        assertThrows(IOException.class, () -> Jsoup.connect(url).execute());\n    }\n\n\n    /**\n     * Verify that requests to websites with SNI fail on jdk 1.6\n     * <p/>\n     * read for more details:\n     * http://en.wikipedia.org/wiki/Server_Name_Indication\n     *\n     * Test is ignored independent from others as it requires JDK 1.6\n     * @throws Exception\n     */\n    @Test\n    public void testSNIFail() throws Exception {\n        assertThrows(IOException.class, () -> Jsoup.connect(WEBSITE_WITH_SNI).execute());\n    }\n\n    @Test\n    public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n        Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();\n        Document doc = res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"ISO-8859-1\", res.charset());\n    }\n\n    // The following tests were added to test specific domains if they work. All code paths\n    // which make the following test green are tested in other unit or integration tests, so the following lines\n    // could be deleted\n\n    @Test\n    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://aamo.info/\").execute();\n        res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"ISO-8859-1\", res.charset());\n    }\n\n    @Test\n    public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://9kuhkep.net\").execute();\n        res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"UTF-8\", res.charset());\n    }\n\n    @Test\n    public void shouldEmptyMetaCharsetCorrectly() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://aastmultimedia.com\").execute();\n        res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"UTF-8\", res.charset());\n    }\n\n    @Test\n    public void shouldWorkForDuplicateCharsetInTag() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://aaptsdassn.org\").execute();\n        Document doc = res.parse(); // would throw an error if charset unsupported\n        assertEquals(\"ISO-8859-1\", res.charset());\n    }\n\n    @Test\n    public void handles201Created() throws IOException {\n        Document doc = Jsoup.connect(\"http://direct.infohound.net/tools/201.pl\").get(); // 201, location=jsoup\n        assertEquals(\"https://jsoup.org/\", doc.location());\n    }\n\n    /*\n     Proxy tests. Assumes local proxy running on 8888, without system propery set (so that specifying it is required).\n     */\n\n    @Test\n    public void fetchViaHttpProxy() throws IOException {\n        String url = \"https://jsoup.org\";\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8888));\n        Document doc = Jsoup.connect(url).proxy(proxy).get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }\n\n    @Test\n    public void fetchViaHttpProxySetByArgument() throws IOException {\n        String url = \"https://jsoup.org\";\n        Document doc = Jsoup.connect(url).proxy(\"localhost\", 8888).get();\n        assertTrue(doc.title().contains(\"jsoup\"));\n    }\n\n    @Test\n    public void invalidProxyFails() {\n        boolean caught = false;\n        String url = \"https://jsoup.org\";\n        try {\n            Document doc = Jsoup.connect(url).proxy(\"localhost\", 8889).get();\n        } catch (IOException e) {\n            caught = e instanceof ConnectException;\n        }\n        assertTrue(caught);\n    }\n\n    @Test\n    public void proxyGetAndSet() throws IOException {\n        String url = \"https://jsoup.org\";\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(\"localhost\", 8889)); // invalid\n        final Connection con = Jsoup.connect(url).proxy(proxy);\n\n        assert con.request().proxy() == proxy;\n        con.request().proxy(null); // disable\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"jsoup\")); // would fail if actually went via proxy\n    }\n\n    @Test\n    public void throwsIfRequestBodyForGet() throws IOException {\n        boolean caught = false;\n        String url = \"https://jsoup.org\";\n        try {\n            Document doc = Jsoup.connect(url).requestBody(\"fail\").get();\n        } catch (IllegalArgumentException e) {\n            caught = true;\n        }\n        assertTrue(caught);\n    }\n\n    @Test\n    public void canSpecifyResponseCharset() throws IOException {\n        // both these docs have <80> in there as euro/control char depending on charset\n        String noCharsetUrl = \"http://direct.infohound.net/tools/Windows-1252-nocharset.html\";\n        String charsetUrl = \"http://direct.infohound.net/tools/Windows-1252-charset.html\";\n\n        // included in meta\n        Connection.Response res1 = Jsoup.connect(charsetUrl).execute();\n        assertNull(res1.charset()); // not set in headers\n        final Document doc1 = res1.parse();\n        assertEquals(\"windows-1252\", doc1.charset().displayName()); // but determined at parse time\n        assertEquals(\"Cost is \u20ac100\", doc1.select(\"p\").text());\n        assertTrue(doc1.text().contains(\"\u20ac\"));\n\n        // no meta, no override\n        Connection.Response res2 = Jsoup.connect(noCharsetUrl).execute();\n        assertNull(res2.charset()); // not set in headers\n        final Document doc2 = res2.parse();\n        assertEquals(\"UTF-8\", doc2.charset().displayName()); // so defaults to utf-8\n        assertEquals(\"Cost is \ufffd100\", doc2.select(\"p\").text());\n        assertTrue(doc2.text().contains(\"\ufffd\"));\n\n        // no meta, let's override\n        Connection.Response res3 = Jsoup.connect(noCharsetUrl).execute();\n        assertNull(res3.charset()); // not set in headers\n        res3.charset(\"windows-1252\");\n        assertEquals(\"windows-1252\", res3.charset()); // read back\n        final Document doc3 = res3.parse();\n        assertEquals(\"windows-1252\", doc3.charset().displayName()); // from override\n        assertEquals(\"Cost is \u20ac100\", doc3.select(\"p\").text());\n        assertTrue(doc3.text().contains(\"\u20ac\"));\n    }\n\n    @Test\n    public void handlesUnescapedRedirects() throws IOException {\n        // URL locations should be url safe (ascii) but are often not, so we should try to guess\n        // in this case the location header is utf-8, but defined in spec as iso8859, so detect, convert, encode\n        String url = \"https://direct.infohound.net/tools/302-utf.pl\";\n        String urlEscaped = \"https://direct.infohound.net/tools/test%F0%9F%92%A9.html\";\n\n        Connection.Response res = Jsoup.connect(url).execute();\n        Document doc = res.parse();\n        assertEquals(doc.body().text(), \"\\uD83D\\uDCA9!\");\n        assertEquals(doc.location(), urlEscaped);\n\n        Connection.Response res2 = Jsoup.connect(url).followRedirects(false).execute();\n        assertEquals(\"/tools/test\\uD83D\\uDCA9.html\", res2.header(\"Location\"));\n        // if we didn't notice it was utf8, would look like: Location: /tools/test\u00f0\u009f\u0092\u00a9.html\n    }\n\n    @Test public void handlesEscapesInRedirecct() throws IOException {\n        Document doc = Jsoup.connect(\"https://direct.infohound.net/tools/302-escaped.pl\").get();\n        assertEquals(\"https://direct.infohound.net/tools/q.pl?q=one%20two\", doc.location());\n\n        doc = Jsoup.connect(\"https://direct.infohound.net/tools/302-white.pl\").get();\n        assertEquals(\"https://direct.infohound.net/tools/q.pl?q=one+two\", doc.location());\n    }\n\n    @Test\n    public void handlesUt8fInUrl() throws IOException {\n        String url = \"https://direct.infohound.net/tools/test\\uD83D\\uDCA9.html\";\n        String urlEscaped = \"https://direct.infohound.net/tools/test%F0%9F%92%A9.html\";\n\n        Connection.Response res = Jsoup.connect(url).execute();\n        Document doc = res.parse();\n        assertEquals(\"\\uD83D\\uDCA9!\", doc.body().text());\n        assertEquals(urlEscaped, doc.location());\n    }\n\n    @Test\n    public void inWildUtfRedirect() throws IOException {\n        Connection.Response res = Jsoup.connect(\"http://brabantn.ws/Q4F\").execute();\n        Document doc = res.parse();\n        assertEquals(\n            \"http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx\",\n            doc.location()\n            );\n    }\n\n    @Test\n    public void inWildUtfRedirect2() throws IOException {\n        Connection.Response res = Jsoup.connect(\"https://ssl.souq.com/sa-en/2724288604627/s\").execute();\n        Document doc = res.parse();\n        assertEquals(\n            \"https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch\",\n            doc.location()\n        );\n    }\n\n   @Test public void handlesEscapedRedirectUrls() throws IOException {\n        String url = \"http://www.altalex.com/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione\";\n        // sends: Location:http://shop.wki.it/shared/sso/sso.aspx?sso=&url=http%3a%2f%2fwww.altalex.com%2fsession%2fset%2f%3freturnurl%3dhttp%253a%252f%252fwww.altalex.com%253a80%252fdocuments%252fnews%252f2016%252f12%252f06%252fquestioni-civilistiche-conseguenti-alla-depenalizzazione\n        // then to: http://www.altalex.com/session/set/?returnurl=http%3a%2f%2fwww.altalex.com%3a80%2fdocuments%2fnews%2f2016%2f12%2f06%2fquestioni-civilistiche-conseguenti-alla-depenalizzazione&sso=RDRG6T684G4AK2E7U591UGR923\n        // then : http://www.altalex.com:80/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione\n\n        // bug is that jsoup goes to\n        // \tGET /shared/sso/sso.aspx?sso=&url=http%253a%252f%252fwww.altalex.com%252fsession%252fset%252f%253freturnurl%253dhttp%25253a%25252f%25252fwww.altalex.com%25253a80%25252fdocuments%25252fnews%25252f2016%25252f12%25252f06%25252fquestioni-civilistiche-conseguenti-alla-depenalizzazione HTTP/1.1\n        // i.e. double escaped\n\n        Connection.Response res = Jsoup.connect(url)\n                .proxy(\"localhost\", 8888)\n                .execute();\n        Document doc = res.parse();\n        assertEquals(200, res.statusCode());\n    }\n\n    @Test public void handlesUnicodeInQuery() throws IOException {\n        Document doc = Jsoup.connect(\"https://www.google.pl/search?q=g\u0105ska\").get();\n        assertEquals(\"g\u0105ska - Szukaj w Google\", doc.title());\n\n        doc = Jsoup.connect(\"http://mov-world.net/archiv/TV/A/%23No.Title/\").get();\n        assertEquals(\"Index of /archiv/TV/A/%23No.Title\", doc.title());\n    }\n\n    @Test public void handlesSuperDeepPage() throws IOException {\n        // https://github.com/jhy/jsoup/issues/955\n\n        long start = System.currentTimeMillis();\n        String url = \"http://sv.stargate.wikia.com/wiki/M2J\";\n        Document doc = Jsoup.connect(url).get();\n        assertEquals(\"M2J | Sv.stargate Wiki | FANDOM powered by Wikia\", doc.title());\n        assertEquals(110160, doc.select(\"dd\").size());\n        // those are all <dl><dd> stacked in each other. wonder how that got generated?\n        assertTrue(System.currentTimeMillis() - start < 1000);\n    }\n\n    @Test public void handles966() throws IOException {\n        // http://szshb.nxszs.gov.cn/\n        // https://github.com/jhy/jsoup/issues/966\n\n        Document doc = Jsoup.connect(\"http://szshb.nxszs.gov.cn/\").get();\n\n        assertEquals(\"\u77f3\u5634\u5c71\u5e02\u73af\u5883\u4fdd\u62a4\u5c40\", doc.title());\n    }\n\n    @Test public void canRequestIdn() throws IOException {\n        String url = \"https://r\u00e4ksm\u00f6rg\u00e5s.josefsson.org/\";\n        Document doc = Jsoup.connect(url).get();\n\n        assertEquals(\"https://xn--rksmrgs-5wao1o.josefsson.org/\", doc.location());\n        assertTrue(doc.title().contains(\"R\u00e4ksm\u00f6rg\u00e5s.josef\u00dfon.org\"));\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String WEBSITE_WITH_INVALID_CERTIFICATE = \"https://certs.cac.washington.edu/CAtest/\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "WEBSITE_WITH_INVALID_CERTIFICATE = \"https://certs.cac.washington.edu/CAtest/\"", "syntax_pass": true}, {"attribute_expression": "private static final String WEBSITE_WITH_SNI = \"https://jsoup.org/\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "WEBSITE_WITH_SNI = \"https://jsoup.org/\"", "syntax_pass": true}, {"attribute_expression": "public static String browserUa = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36\";", "docstring": "", "modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "type": "String", "name": "browserUa = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest", "name": "ConnectTest", "file_path": "src/test/java/org/jsoup/integration/ConnectTest.java", "superclasses": "", "methods": ["[void]canConnectToLocalServer()", "[void]canConnectToLocalTlsServer()", "[void]fetchURl()", "[void]fetchURIWithWhitespace()", "[void]exceptOnUnsupportedProtocol()", "[void]throwsExceptionOn404()", "[void]ignoresExceptionIfSoConfigured()", "[void]doesPost()", "[void]doesPostMultipartWithoutInputstream()", "[void]canSendSecFetchHeaders()", "[void]secFetchHeadersSurviveRedirect()", "[void]sendsRequestBodyJsonWithData()", "[void]sendsRequestBodyJsonWithoutData()", "[void]sendsRequestBody()", "[void]sendsRequestBodyWithUrlParams()", "[void]doesGet(String)", "[void]streamParserGet(String)", "[void]doesPut()", "[void]doesDeleteWithBody()", "[void]doesDeleteWithoutBody()", "[void]postFiles(String)", "[void]multipleParsesOkAfterBufferUp()", "[void]bodyAfterParseThrowsValidationError()", "[void]bodyAndBytesAvailableBeforeParse()", "[void]parseParseThrowsValidates()", "[void]multiCookieSet()", "[void]requestCookiesSurviveRedirect()", "[void]supportsDeflate()", "[void]handlesLargerContentLengthParseRead()", "[void]handlesWrongContentLengthDuringBufferedRead()", "[void]handlesRedirect()", "[void]handlesEmptyRedirect()", "[void]doesNotPostFor302()", "[void]doesPostFor307()", "[void]getUtf8Bom()", "[void]streamerGetUtf8Bom()", "[void]testBinaryContentTypeThrowsException()", "[void]testParseRss()", "[void]imageXmlMimeType()", "[void]canFetchBinaryAsBytes()", "[void]handlesUnknownEscapesAcrossBuffer()", "[void]postHtmlFile()", "[void]fetchHandlesXml()", "[void]fetchHandlesXmlAsHtmlWhenParserSet()", "[void]combinesSameHeadersWithComma()", "[void]sendHeadRequest()", "[void]fetchToW3c()", "[void]baseHrefCorrectAfterHttpEquiv()", "[void]maxBodySize()", "[void]repeatable()", "[void]maxBodySizeInReadToByteBuffer()", "[void]formLoginFlow()", "[void]formLoginFlow2()", "[void]preservesUrlFragment()", "[void]fetchUnicodeUrl()", "[void]willEscapePathInRedirect()", "[void]failsIfNotAuthenticated(String)", "[void]canAuthenticate(String)", "[void]incorrectAuth(String)", "[void]progressListener(String)"], "method_uris": ["src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest.[void]setUp()", "src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest.[void]emptyCookieJar()", "src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest.[String]ihVal(String,Document)", "src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest.[String]echoSelect(String)", "src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest.[void]fetchHandlesXml(String)", "src/test/java/org/jsoup/integration/ConnectTest.java.ConnectTest.[Stream<String>]echoUrls()"], "overrides": null, "attributes": [], "class_docstring": "\nTests Jsoup.connect against a local server.\n", "original_string": "public class ConnectTest {\n    private static final int LargeDocFileLen = 280735;\n    private static final int LargeDocTextLen = 269535;\n    private static String echoUrl;\n\n    @BeforeAll\n    public static void setUp() {\n        TestServer.start();\n        echoUrl = EchoServlet.Url;\n    }\n\n    @BeforeEach\n    public void emptyCookieJar() {\n        // empty the cookie jar, so cookie tests are independent.\n        Jsoup.connect(\"http://example.com\").cookieStore().removeAll();\n    }\n\n    @Test\n    public void canConnectToLocalServer() throws IOException {\n        String url = HelloServlet.Url;\n        Document doc = Jsoup.connect(url).get();\n        Element p = doc.selectFirst(\"p\");\n        assertEquals(\"Hello, World!\", p.text());\n    }\n\n    @Test void canConnectToLocalTlsServer() throws IOException {\n        String url = HelloServlet.TlsUrl;\n        Document doc = Jsoup.connect(url).get();\n        Element p = doc.selectFirst(\"p\");\n        assertEquals(\"Hello, World!\", p.text());\n    }\n\n    @Test\n    public void fetchURl() throws IOException {\n        Document doc = Jsoup.parse(new URL(echoUrl), 10 * 1000);\n        assertTrue(doc.title().contains(\"Environment Variables\"));\n    }\n\n    @Test\n    public void fetchURIWithWhitespace() throws IOException {\n        Connection con = Jsoup.connect(echoUrl + \"#with whitespaces\");\n        Document doc = con.get();\n        assertTrue(doc.title().contains(\"Environment Variables\"));\n    }\n\n    @Test\n    public void exceptOnUnsupportedProtocol() {\n        String url = \"file://etc/passwd\";\n        boolean threw = false;\n        try {\n            Document doc = Jsoup.connect(url).get();\n        } catch (MalformedURLException e) {\n            threw = true;\n            assertEquals(\"java.net.MalformedURLException: Only http & https protocols supported\", e.toString());\n        } catch (IOException e) {\n        }\n        assertTrue(threw);\n    }\n\n    static String ihVal(String key, Document doc) {\n        final Element first = doc.select(\"th:contains(\" + key + \") + td\").first();\n        return first != null ? first.text() : null;\n    }\n\n    @Test\n    public void throwsExceptionOn404() {\n        String url = EchoServlet.Url;\n        Connection con = Jsoup.connect(url).header(EchoServlet.CodeParam, \"404\");\n\n        boolean threw = false;\n        try {\n            Document doc = con.get();\n        } catch (HttpStatusException e) {\n            threw = true;\n            assertEquals(\"org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404, URL=[\" + e.getUrl() + \"]\", e.toString());\n            assertTrue(e.getUrl().startsWith(url));\n            assertEquals(404, e.getStatusCode());\n        } catch (IOException e) {\n        }\n        assertTrue(threw);\n    }\n\n    @Test\n    public void ignoresExceptionIfSoConfigured() throws IOException {\n        String url = EchoServlet.Url;\n        Connection con = Jsoup.connect(url)\n            .header(EchoServlet.CodeParam, \"404\")\n            .ignoreHttpErrors(true);\n        Connection.Response res = con.execute();\n        Document doc = res.parse();\n        assertEquals(404, res.statusCode());\n        assertEquals(\"Webserver Environment Variables\", doc.title());\n    }\n\n    @Test\n    public void doesPost() throws IOException {\n        Document doc = Jsoup.connect(echoUrl)\n            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n            .cookie(\"auth\", \"token\")\n            .post();\n\n        assertEquals(\"POST\", ihVal(\"Method\", doc));\n        assertEquals(\"gzip\", ihVal(\"Accept-Encoding\", doc));\n        assertEquals(\"auth=token\", ihVal(\"Cookie\", doc));\n        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n        assertEquals(\"application/x-www-form-urlencoded; charset=UTF-8\", ihVal(\"Content-Type\", doc));\n    }\n\n    @Test\n    public void doesPostMultipartWithoutInputstream() throws IOException {\n        Document doc = Jsoup.connect(echoUrl)\n                .header(CONTENT_TYPE, MULTIPART_FORM_DATA)\n                .userAgent(browserUa)\n                .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n                .post();\n\n        assertTrue(ihVal(\"Content-Type\", doc).contains(MULTIPART_FORM_DATA));\n\n        assertTrue(ihVal(\"Content-Type\", doc).contains(\"boundary\")); // should be automatically set\n        assertEquals(\"Jsoup, Jonathan\", ihVal(\"uname\", doc));\n        assertEquals(\"\u5ea6\u4e00\u4e0b\", ihVal(\"\u767e\", doc));\n    }\n\n    @Test\n    public void canSendSecFetchHeaders() throws IOException {\n        // https://github.com/jhy/jsoup/issues/1461\n        Document doc = Jsoup.connect(echoUrl)\n            .header(\"Random-Header-name\", \"hello\")\n            .header(\"Sec-Fetch-Site\", \"cross-site\")\n            .header(\"Sec-Fetch-Mode\", \"cors\")\n            .get();\n\n        assertEquals(\"hello\", ihVal(\"Random-Header-name\", doc));\n        assertEquals(\"cross-site\", ihVal(\"Sec-Fetch-Site\", doc));\n        assertEquals(\"cors\", ihVal(\"Sec-Fetch-Mode\", doc));\n    }\n\n    @Test\n    public void secFetchHeadersSurviveRedirect() throws IOException {\n        Document doc = Jsoup\n            .connect(RedirectServlet.Url)\n            .data(RedirectServlet.LocationParam, echoUrl)\n            .header(\"Random-Header-name\", \"hello\")\n            .header(\"Sec-Fetch-Site\", \"cross-site\")\n            .header(\"Sec-Fetch-Mode\", \"cors\")\n            .get();\n\n        assertEquals(\"hello\", ihVal(\"Random-Header-name\", doc));\n        assertEquals(\"cross-site\", ihVal(\"Sec-Fetch-Site\", doc));\n        assertEquals(\"cors\", ihVal(\"Sec-Fetch-Mode\", doc));\n    }\n\n    @Test\n    public void sendsRequestBodyJsonWithData() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoUrl)\n            .requestBody(body)\n            .header(\"Content-Type\", \"application/json\")\n            .userAgent(browserUa)\n            .data(\"foo\", \"true\")\n            .post();\n        assertEquals(\"POST\", ihVal(\"Method\", doc));\n        assertEquals(\"application/json\", ihVal(\"Content-Type\", doc));\n        assertEquals(\"foo=true\", ihVal(\"Query String\", doc));\n        assertEquals(body, ihVal(\"Post Data\", doc));\n    }\n\n    @Test\n    public void sendsRequestBodyJsonWithoutData() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoUrl)\n            .requestBody(body)\n            .header(\"Content-Type\", \"application/json\")\n            .userAgent(browserUa)\n            .post();\n        assertEquals(\"POST\", ihVal(\"Method\", doc));\n        assertEquals(\"application/json\", ihVal(\"Content-Type\", doc));\n        assertEquals(body, ihVal(\"Post Data\", doc));\n    }\n\n    @Test\n    public void sendsRequestBody() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoUrl)\n            .requestBody(body)\n            .header(\"Content-Type\", \"text/plain\")\n            .userAgent(browserUa)\n            .post();\n        assertEquals(\"POST\", ihVal(\"Method\", doc));\n        assertEquals(\"text/plain\", ihVal(\"Content-Type\", doc));\n        assertEquals(body, ihVal(\"Post Data\", doc));\n    }\n\n    @Test\n    public void sendsRequestBodyWithUrlParams() throws IOException {\n        final String body = \"{key:value}\";\n        Document doc = Jsoup.connect(echoUrl)\n            .requestBody(body)\n            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n            .header(\"Content-Type\", \"text/plain\") // todo - if user sets content-type, we should append postcharset\n            .userAgent(browserUa)\n            .post();\n        assertEquals(\"POST\", ihVal(\"Method\", doc));\n        assertEquals(\"uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B\", ihVal(\"Query String\", doc));\n        assertEquals(body, ihVal(\"Post Data\", doc));\n    }\n\n    @ParameterizedTest @MethodSource(\"echoUrls\") // http and https\n    public void doesGet(String url) throws IOException {\n        Connection con = Jsoup.connect(url + \"?what=the\")\n            .userAgent(\"Mozilla\")\n            .referrer(\"http://example.com\")\n            .data(\"what\", \"about & me?\");\n\n        Document doc = con.get();\n        assertEquals(\"what=the&what=about+%26+me%3F\", ihVal(\"Query String\", doc));\n        assertEquals(\"the, about & me?\", ihVal(\"what\", doc));\n        assertEquals(\"Mozilla\", ihVal(\"User-Agent\", doc));\n        assertEquals(\"http://example.com\", ihVal(\"Referer\", doc));\n    }\n\n    @ParameterizedTest @MethodSource(\"echoUrls\") // http and https\n    public void streamParserGet(String url) throws IOException {\n        Connection con = Jsoup.connect(url)\n            .userAgent(\"Mozilla\")\n            .referrer(\"http://example.com\")\n            .data(\"what\", \"about & me?\");\n\n        //final Element first = doc.select(\"th:contains(\" + key + \") + td\").first();\n        try (StreamParser streamer = con.execute().streamParser()) {\n            Element title = streamer.expectFirst(\"title\");\n            assertEquals(\"Webserver Environment Variables\", title.text());\n            Element method = streamer.expectNext(echoSelect(\"Method\"));\n            assertEquals(\"GET\", method.text());\n\n            Document doc = streamer.document();\n            assertSame(doc, title.ownerDocument());\n\n            assertEquals(url + \"?what=about+%26+me%3F\", doc.location()); // with the query string\n        }\n    }\n\n    static String echoSelect(String key) {\n        return String.format(\"th:contains(%s) + td\", key);\n    }\n\n    @Test\n    public void doesPut() throws IOException {\n        Connection.Response res = Jsoup.connect(echoUrl)\n            .data(\"uname\", \"Jsoup\", \"uname\", \"Jonathan\", \"\u767e\", \"\u5ea6\u4e00\u4e0b\")\n            .cookie(\"auth\", \"token\")\n            .method(Connection.Method.PUT)\n            .execute();\n\n        Document doc = res.parse();\n        assertEquals(\"PUT\", ihVal(\"Method\", doc));\n        assertEquals(\"gzip\", ihVal(\"Accept-Encoding\", doc));\n        assertEquals(\"auth=token\", ihVal(\"Cookie\", doc));\n    }\n\n    @Test\n    public void doesDeleteWithBody() throws IOException {\n        // https://github.com/jhy/jsoup/issues/1972\n        String body = \"some body\";\n        Connection.Response res = Jsoup.connect(echoUrl)\n            .requestBody(body)\n            .method(Method.DELETE)\n            .execute();\n\n        Document doc = res.parse();\n        assertEquals(\"DELETE\", ihVal(\"Method\", doc));\n        assertEquals(body, ihVal(\"Post Data\", doc));\n    }\n\n    @Test\n    public void doesDeleteWithoutBody() throws IOException {\n        Connection.Response res = Jsoup.connect(echoUrl)\n            .method(Method.DELETE)\n            .execute();\n\n        Document doc = res.parse();\n        assertEquals(\"DELETE\", ihVal(\"Method\", doc));\n        assertEquals(null, ihVal(\"Post Data\", doc));\n    }\n\n    /**\n     * Tests upload of content to a remote service.\n     */\n    @ParameterizedTest @MethodSource(\"echoUrls\") // http and https\n    public void postFiles(String url) throws IOException {\n        File thumb = ParseTest.getFile(\"/htmltests/thumb.jpg\");\n        File html = ParseTest.getFile(\"/htmltests/large.html\");\n\n        Document res = Jsoup\n            .connect(url)\n            .data(\"firstname\", \"Jay\")\n            .data(\"firstPart\", thumb.getName(), Files.newInputStream(thumb.toPath()), \"image/jpeg\")\n            .data(\"secondPart\", html.getName(), Files.newInputStream(html.toPath())) // defaults to \"application-octetstream\";\n            .data(\"surname\", \"Soup\")\n            .post();\n\n        assertEquals(\"4\", ihVal(\"Parts\", res));\n\n        assertEquals(\"application/octet-stream\", ihVal(\"Part secondPart ContentType\", res));\n        assertEquals(\"secondPart\", ihVal(\"Part secondPart Name\", res));\n        assertEquals(\"large.html\", ihVal(\"Part secondPart Filename\", res));\n        assertEquals(\"280735\", ihVal(\"Part secondPart Size\", res));\n\n        assertEquals(\"image/jpeg\", ihVal(\"Part firstPart ContentType\", res));\n        assertEquals(\"firstPart\", ihVal(\"Part firstPart Name\", res));\n        assertEquals(\"thumb.jpg\", ihVal(\"Part firstPart Filename\", res));\n        assertEquals(\"1052\", ihVal(\"Part firstPart Size\", res));\n\n        assertEquals(\"Jay\", ihVal(\"firstname\", res));\n        assertEquals(\"Soup\", ihVal(\"surname\", res));\n\n        /*\n        <tr><th>Part secondPart ContentType</th><td>application/octet-stream</td></tr>\n        <tr><th>Part secondPart Name</th><td>secondPart</td></tr>\n        <tr><th>Part secondPart Filename</th><td>google-ipod.html</td></tr>\n        <tr><th>Part secondPart Size</th><td>43972</td></tr>\n        <tr><th>Part firstPart ContentType</th><td>image/jpeg</td></tr>\n        <tr><th>Part firstPart Name</th><td>firstPart</td></tr>\n        <tr><th>Part firstPart Filename</th><td>thumb.jpg</td></tr>\n        <tr><th>Part firstPart Size</th><td>1052</td></tr>\n         */\n    }\n\n    @Test\n    public void multipleParsesOkAfterBufferUp() throws IOException {\n        Connection.Response res = Jsoup.connect(echoUrl).execute().bufferUp();\n\n        Document doc = res.parse();\n        assertTrue(doc.title().contains(\"Environment\"));\n\n        Document doc2 = res.parse();\n        assertTrue(doc2.title().contains(\"Environment\"));\n    }\n\n    @Test\n    public void bodyAfterParseThrowsValidationError() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection.Response res = Jsoup.connect(echoUrl).execute();\n            Document doc = res.parse();\n            String body = res.body();\n        });\n    }\n\n    @Test\n    public void bodyAndBytesAvailableBeforeParse() throws IOException {\n        Connection.Response res = Jsoup.connect(echoUrl).execute();\n        String body = res.body();\n        assertTrue(body.contains(\"Environment\"));\n        byte[] bytes = res.bodyAsBytes();\n        assertTrue(bytes.length > 100);\n\n        Document doc = res.parse();\n        assertTrue(doc.title().contains(\"Environment\"));\n    }\n\n    @Test\n    public void parseParseThrowsValidates() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Connection.Response res = Jsoup.connect(echoUrl).execute();\n            Document doc = res.parse();\n            assertTrue(doc.title().contains(\"Environment\"));\n            Document doc2 = res.parse(); // should blow up because the response input stream has been drained\n        });\n    }\n\n\n    @Test\n    public void multiCookieSet() throws IOException {\n        Connection con = Jsoup\n                .connect(RedirectServlet.Url)\n                .data(RedirectServlet.CodeParam, \"302\")\n                .data(RedirectServlet.SetCookiesParam, \"true\")\n                .data(RedirectServlet.LocationParam, echoUrl);\n        Connection.Response res = con.execute();\n\n        // test cookies set by redirect:\n        Map<String, String> cookies = res.cookies();\n        assertEquals(\"asdfg123\", cookies.get(\"token\"));\n        assertEquals(\"jhy\", cookies.get(\"uid\")); // two uids set, order dependent\n\n        // send those cookies into the echo URL by map:\n        Document doc = Jsoup.connect(echoUrl).cookies(cookies).get();\n        assertEquals(\"token=asdfg123; uid=jhy\", ihVal(\"Cookie\", doc));\n    }\n\n    @Test public void requestCookiesSurviveRedirect() throws IOException {\n        // this test makes sure that Request keyval cookies (not in the cookie store) are sent on subsequent redirections,\n        // when not using the session method\n        Connection con = Jsoup.connect(RedirectServlet.Url)\n            .data(RedirectServlet.LocationParam, echoUrl)\n            .cookie(\"LetMeIn\", \"True\")\n            .cookie(\"DoesItWork\", \"Yes\");\n\n        Connection.Response res = con.execute();\n        assertEquals(0, res.cookies().size()); // were not set by Redir or Echo servlet\n        Document doc = res.parse();\n        assertEquals(echoUrl, doc.location());\n        assertEquals(\"True\", ihVal(\"Cookie: LetMeIn\", doc));\n        assertEquals(\"Yes\", ihVal(\"Cookie: DoesItWork\", doc));\n    }\n\n    @Test\n    public void supportsDeflate() throws IOException {\n        Connection.Response res = Jsoup.connect(DeflateServlet.Url).execute();\n        assertEquals(\"deflate\", res.header(\"Content-Encoding\"));\n\n        Document doc = res.parse();\n        assertEquals(\"Hello, World!\", doc.selectFirst(\"p\").text());\n    }\n\n    @Test\n    public void handlesLargerContentLengthParseRead() throws IOException {\n        // this handles situations where the remote server sets a content length greater than it actually writes\n\n        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n            .data(InterruptedServlet.Magnitude, InterruptedServlet.Larger)\n            .timeout(400)\n            .execute();\n\n        Document document = res.parse();\n        assertEquals(\"Something\", document.title());\n        assertEquals(0, document.select(\"p\").size());\n        // current impl, jetty won't write past content length\n        // todo - find way to trick jetty into writing larger than set header. Take over the stream?\n    }\n\n    @Test\n    public void handlesWrongContentLengthDuringBufferedRead() throws IOException {\n        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)\n                .timeout(400)\n                .execute();\n        // this servlet writes max_buffer data, but sets content length to max_buffer/2. So will read up to that.\n        // previous versions of jetty would allow to write less, and would throw except here\n\n        res.bufferUp();\n        Document doc = res.parse();\n        assertEquals(0, doc.select(\"p\").size());\n    }\n\n    @Test public void handlesRedirect() throws IOException {\n        Document doc = Jsoup.connect(RedirectServlet.Url)\n            .data(RedirectServlet.LocationParam, HelloServlet.Url)\n            .get();\n\n        Element p = doc.selectFirst(\"p\");\n        assertEquals(\"Hello, World!\", p.text());\n\n        assertEquals(HelloServlet.Url, doc.location());\n    }\n\n    @Test public void handlesEmptyRedirect() {\n        boolean threw = false;\n        try {\n            Connection.Response res = Jsoup.connect(RedirectServlet.Url)\n                .execute();\n        } catch (IOException e) {\n            assertTrue(e.getMessage().contains(\"Too many redirects\"));\n            threw = true;\n        }\n        assertTrue(threw);\n    }\n\n    @Test public void doesNotPostFor302() throws IOException {\n        final Document doc = Jsoup.connect(RedirectServlet.Url)\n            .data(\"Hello\", \"there\")\n            .data(RedirectServlet.LocationParam, EchoServlet.Url)\n            .post();\n\n        assertEquals(EchoServlet.Url, doc.location());\n        assertEquals(\"GET\", ihVal(\"Method\", doc));\n        assertNull(ihVal(\"Hello\", doc)); // data not sent\n    }\n\n    @Test public void doesPostFor307() throws IOException {\n        final Document doc = Jsoup.connect(RedirectServlet.Url)\n            .data(\"Hello\", \"there\")\n            .data(RedirectServlet.LocationParam, EchoServlet.Url)\n            .data(RedirectServlet.CodeParam, \"307\")\n            .post();\n\n        assertEquals(EchoServlet.Url, doc.location());\n        assertEquals(\"POST\", ihVal(\"Method\", doc));\n        assertEquals(\"there\", ihVal(\"Hello\", doc));\n    }\n\n    @Test public void getUtf8Bom() throws IOException {\n        Connection con = Jsoup.connect(FileServlet.urlTo(\"/bomtests/bom_utf8.html\"));\n        Document doc = con.get();\n\n        assertEquals(\"UTF-8\", con.response().charset());\n        assertEquals(\"OK\", doc.title());\n    }\n\n    @Test public void streamerGetUtf8Bom() throws IOException {\n        Connection con = Jsoup.connect(FileServlet.urlTo(\"/bomtests/bom_utf8.html\"));\n        Document doc = con.execute().streamParser().complete();\n\n        assertEquals(\"UTF-8\", con.response().charset());\n        assertEquals(\"OK\", doc.title());\n    }\n\n    @Test\n    public void testBinaryContentTypeThrowsException() throws IOException {\n        Connection con = Jsoup.connect(FileServlet.urlTo(\"/htmltests/thumb.jpg\"));\n        con.data(FileServlet.ContentTypeParam, \"image/jpeg\");\n\n        boolean threw = false;\n        try {\n            con.execute();\n            Document doc = con.response().parse();\n        } catch (UnsupportedMimeTypeException e) {\n            threw = true;\n            assertEquals(\"Unhandled content type. Must be text/*, */xml, or */*+xml\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n\n    @Test public void testParseRss() throws IOException {\n        // test that we switch automatically to xml, and we support application/rss+xml\n        Connection con = Jsoup.connect(FileServlet.urlTo(\"/htmltests/test-rss.xml\"));\n        con.data(FileServlet.ContentTypeParam, \"application/rss+xml\");\n        Document doc = con.get();\n        Element title = doc.selectFirst(\"title\");\n        assertNotNull(title);\n        assertEquals(\"jsoup RSS news\", title.text());\n        assertEquals(\"channel\", title.parent().nodeName());\n        assertEquals(\"\", doc.title()); // the document title is unset, this tag is channel>title, not html>head>title\n        assertEquals(3, doc.select(\"link\").size());\n        assertEquals(\"application/rss+xml\", con.response().contentType());\n        assertTrue(doc.parser().getTreeBuilder() instanceof XmlTreeBuilder);\n        assertEquals(Document.OutputSettings.Syntax.xml, doc.outputSettings().syntax());\n    }\n\n    @Test public void imageXmlMimeType() throws IOException {\n        // test that we switch to XML, and that we support image/svg+xml\n        String mimetype = \"image/svg+xml\";\n\n        Connection con = Jsoup.connect(FileServlet.urlTo(\"/htmltests/osi-logo.svg\"))\n            .data(FileServlet.ContentTypeParam, mimetype);\n        Document doc = con.get();\n\n        assertEquals(mimetype, con.response().contentType());\n        assertTrue(doc.parser().getTreeBuilder() instanceof XmlTreeBuilder);\n        assertEquals(Document.OutputSettings.Syntax.xml, doc.outputSettings().syntax());\n        Node firstChild = doc.firstChild();\n        XmlDeclaration decl = (XmlDeclaration) firstChild;\n        assertEquals(\"no\", decl.attr(\"standalone\"));\n        Element svg = doc.expectFirst(\"svg\");\n        Element flowRoot = svg.expectFirst(\"flowRoot\");\n        assertEquals(\"flowRoot\", flowRoot.tagName());\n        assertEquals(\"preserve\", flowRoot.attr(\"xml:space\"));\n    }\n\n    @Test\n    public void canFetchBinaryAsBytes() throws IOException {\n        String path = \"/htmltests/thumb.jpg\";\n        int actualSize = 1052;\n\n        Connection.Response res = Jsoup.connect(FileServlet.urlTo(path))\n            .data(FileServlet.ContentTypeParam, \"image/jpeg\")\n            .ignoreContentType(true)\n            .execute();\n\n        byte[] resBytes = res.bodyAsBytes();\n        assertEquals(actualSize, resBytes.length);\n\n        // compare the content of the file and the bytes:\n        Path filePath = ParseTest.getPath(path);\n        byte[] fileBytes = Files.readAllBytes(filePath);\n        assertEquals(actualSize, fileBytes.length);\n        assertArrayEquals(fileBytes, resBytes);\n    }\n\n    @Test\n    public void handlesUnknownEscapesAcrossBuffer() throws IOException {\n        String localPath = \"/htmltests/escapes-across-buffer.html\";\n        String localUrl = FileServlet.urlTo(localPath);\n\n        Document docFromLocalServer = Jsoup.connect(localUrl).get();\n        Document docFromFileRead = Jsoup.parse(ParseTest.getFile(localPath), \"UTF-8\");\n\n        String text = docFromLocalServer.body().text();\n        assertEquals(14766, text.length());\n        assertEquals(text, docFromLocalServer.body().text());\n        assertEquals(text, docFromFileRead.body().text());\n    }\n\n    /**\n     * Test fetching a form, and submitting it with a file attached.\n     */\n    @Test\n    public void postHtmlFile() throws IOException {\n        Document index = Jsoup.connect(FileServlet.urlTo(\"/htmltests/upload-form.html\")).get();\n        List<FormElement> forms = index.select(\"[name=tidy]\").forms();\n        assertEquals(1, forms.size());\n        FormElement form = forms.get(0);\n        Connection post = form.submit();\n\n        File uploadFile = ParseTest.getFile(\"/htmltests/large.html\");\n        FileInputStream stream = new FileInputStream(uploadFile);\n\n        Connection.KeyVal fileData = post.data(\"_file\");\n        assertNotNull(fileData);\n        fileData.value(\"check.html\");\n        fileData.inputStream(stream);\n\n        Connection.Response res;\n        try {\n            res = post.execute();\n        } finally {\n            stream.close();\n        }\n\n        Document doc = res.parse();\n        assertEquals(ihVal(\"Method\", doc), \"POST\"); // from form action\n        assertEquals(ihVal(\"Part _file Filename\", doc), \"check.html\");\n        assertEquals(ihVal(\"Part _file Name\", doc), \"_file\");\n        assertEquals(ihVal(\"_function\", doc), \"tidy\");\n    }\n\n    @Test\n    public void fetchHandlesXml() throws IOException {\n        String[] types = {\"text/xml\", \"application/xml\", \"application/rss+xml\", \"application/xhtml+xml\"};\n        for (String type : types) {\n            fetchHandlesXml(type);\n        }\n    }\n\n    void fetchHandlesXml(String contentType) throws IOException {\n        // should auto-detect xml and use XML parser, unless explicitly requested the html parser\n        String xmlUrl = FileServlet.urlTo(\"/htmltests/xml-test.xml\");\n        Connection con = Jsoup.connect(xmlUrl);\n        con.data(FileServlet.ContentTypeParam, contentType);\n        Document doc = con.get();\n        Connection.Request req = con.request();\n        assertTrue(req.parser().getTreeBuilder() instanceof XmlTreeBuilder);\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\\n\", doc.outerHtml());\n        assertEquals(con.response().contentType(), contentType);\n    }\n\n    @Test\n    public void fetchHandlesXmlAsHtmlWhenParserSet() throws IOException {\n        // should auto-detect xml and use XML parser, unless explicitly requested the html parser\n        String xmlUrl = FileServlet.urlTo(\"/htmltests/xml-test.xml\");\n        Connection con = Jsoup.connect(xmlUrl).parser(Parser.htmlParser());\n        con.data(FileServlet.ContentTypeParam, \"application/xml\");\n        Document doc = con.get();\n        Connection.Request req = con.request();\n        assertTrue(req.parser().getTreeBuilder() instanceof HtmlTreeBuilder);\n        assertEquals(\"<html> <head></head> <body> <doc> <val> One <val> Two </val>Three </val> </doc> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }\n\n    @Test\n    public void combinesSameHeadersWithComma() throws IOException {\n        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n        Connection con = Jsoup.connect(echoUrl);\n        con.get();\n\n        Connection.Response res = con.response();\n        assertEquals(\"text/html;charset=utf-8\", res.header(\"Content-Type\"));\n        assertEquals(\"no-cache, no-store\", res.header(\"Cache-Control\"));\n\n        List<String> header = res.headers(\"Cache-Control\");\n        assertEquals(2, header.size());\n        assertEquals(\"no-cache\", header.get(0));\n        assertEquals(\"no-store\", header.get(1));\n    }\n\n    @Test\n    public void sendHeadRequest() throws IOException {\n        String url = FileServlet.urlTo(\"/htmltests/xml-test.xml\");\n        Connection con = Jsoup.connect(url)\n            .method(Connection.Method.HEAD)\n            .data(FileServlet.ContentTypeParam, \"text/xml\");\n        final Connection.Response response = con.execute();\n        assertEquals(\"text/xml\", response.header(\"Content-Type\"));\n        assertEquals(\"\", response.body()); // head ought to have no body\n        Document doc = response.parse();\n        assertEquals(\"\", doc.text());\n    }\n\n    @Test\n    public void fetchToW3c() throws IOException {\n        String url = FileServlet.urlTo(\"/htmltests/upload-form.html\");\n        Document doc = Jsoup.connect(url).get();\n\n        W3CDom dom = new W3CDom();\n        org.w3c.dom.Document wDoc = dom.fromJsoup(doc);\n        assertEquals(url, wDoc.getDocumentURI());\n        String html = dom.asString(wDoc);\n        assertTrue(html.contains(\"Upload\"));\n    }\n\n    @Test\n    public void baseHrefCorrectAfterHttpEquiv() throws IOException {\n        // https://github.com/jhy/jsoup/issues/440\n        Connection.Response res = Jsoup.connect(FileServlet.urlTo(\"/htmltests/charset-base.html\")).execute();\n        Document doc = res.parse();\n        assertEquals(\"http://example.com/foo.jpg\", doc.select(\"img\").first().absUrl(\"src\"));\n    }\n\n    @Test\n    public void maxBodySize() throws IOException {\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n\n        Connection.Response defaultRes = Jsoup.connect(url).execute();\n        Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops\n        Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops\n        Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop\n        Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();\n\n        int actualDocText = LargeDocTextLen;\n        assertEquals(actualDocText, defaultRes.parse().text().length());\n        assertEquals(49165, smallRes.parse().text().length());\n        assertEquals(196577, mediumRes.parse().text().length());\n        assertEquals(actualDocText, largeRes.parse().text().length());\n        assertEquals(actualDocText, unlimitedRes.parse().text().length());\n    }\n\n    @Test public void repeatable() throws IOException {\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n        Connection con = Jsoup.connect(url).parser(Parser.xmlParser());\n        Document doc1 = con.get();\n        Document doc2 = con.get();\n        assertEquals(\"Large HTML\", doc1.title());\n        assertEquals(\"Large HTML\", doc2.title());\n    }\n\n    @Test\n    public void maxBodySizeInReadToByteBuffer() throws IOException {\n        // https://github.com/jhy/jsoup/issues/1774\n        // when calling readToByteBuffer, contents were not buffered up\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n\n        Connection.Response defaultRes = Jsoup.connect(url).execute();\n        Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops\n        Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops\n        Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop\n        Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();\n\n        int actualDocText = 280735;\n        assertEquals(actualDocText, defaultRes.body().length());\n        assertEquals(50 * 1024, smallRes.body().length());\n        assertEquals(200 * 1024, mediumRes.body().length());\n        assertEquals(actualDocText, largeRes.body().length());\n        assertEquals(actualDocText, unlimitedRes.body().length());\n    }\n\n    @Test void formLoginFlow() throws IOException {\n        String echoUrl = EchoServlet.Url;\n        String cookieUrl = CookieServlet.Url;\n\n        String startUrl = FileServlet.urlTo(\"/htmltests/form-tests.html\");\n        Document loginDoc = Jsoup.connect(startUrl).get();\n        FormElement form = loginDoc.expectForm(\"#login\");\n        assertNotNull(form);\n        form.expectFirst(\"[name=username]\").val(\"admin\");\n        form.expectFirst(\"[name=password]\").val(\"Netscape engineers are weenies!\");\n\n        // post it- should go to Cookie then bounce to Echo\n        Connection submit = form.submit();\n        assertEquals(Connection.Method.POST, submit.request().method());\n        Connection.Response postRes = submit.execute();\n        assertEquals(echoUrl, postRes.url().toExternalForm());\n        assertEquals(Connection.Method.GET, postRes.method());\n        Document resultDoc = postRes.parse();\n        assertEquals(\"One=EchoServlet; One=Root\", ihVal(\"Cookie\", resultDoc));\n        // should be no form data sent to the echo redirect\n        assertEquals(\"\", ihVal(\"Query String\", resultDoc));\n\n        // new request to echo, should not have form data, but should have cookies from implicit session\n        Document newEcho = submit.newRequest(echoUrl).get();\n        assertEquals(\"One=EchoServlet; One=Root\", ihVal(\"Cookie\", newEcho));\n        assertEquals(\"\", ihVal(\"Query String\", newEcho));\n\n        Document cookieDoc = submit.newRequest(cookieUrl).get();\n        assertEquals(\"CookieServlet\", ihVal(\"One\", cookieDoc)); // different cookie path\n\n    }\n\n    @Test void formLoginFlow2() throws IOException {\n        String echoUrl = EchoServlet.Url;\n        String cookieUrl = CookieServlet.Url;\n        String startUrl = FileServlet.urlTo(\"/htmltests/form-tests.html\");\n\n        Connection session = Jsoup.newSession();\n        Document loginDoc = session.newRequest(startUrl).get();\n        FormElement form = loginDoc.expectForm(\"#login2\");\n        assertNotNull(form);\n        String username = \"admin\";\n        form.expectFirst(\"[name=username]\").val(username);\n        String password = \"Netscape engineers are weenies!\";\n        form.expectFirst(\"[name=password]\").val(password);\n\n        Connection submit = form.submit();\n        assertEquals(username, submit.data(\"username\").value());\n        assertEquals(password, submit.data(\"password\").value());\n\n        Connection.Response postRes = submit.execute();\n        assertEquals(cookieUrl, postRes.url().toExternalForm());\n        assertEquals(Connection.Method.POST, postRes.method());\n        Document resultDoc = postRes.parse();\n\n        Document echo2 = resultDoc.connection().newRequest(echoUrl).get();\n        assertEquals(\"\", ihVal(\"Query String\", echo2)); // should not re-send the data\n        assertEquals(\"One=EchoServlet; One=Root\", ihVal(\"Cookie\", echo2));\n    }\n\n    @Test void preservesUrlFragment() throws IOException {\n        // confirms https://github.com/jhy/jsoup/issues/1686\n        String url = EchoServlet.Url + \"#fragment\";\n        Document doc = Jsoup.connect(url).get();\n        assertEquals(url, doc.location());\n    }\n\n    @Test void fetchUnicodeUrl() throws IOException {\n        String url = EchoServlet.Url + \"/\u2714/?\u9375=\u5024\";\n        Document doc = Jsoup.connect(url).get();\n\n        assertEquals(\"/\u2714/\", ihVal(\"Path Info\", doc));\n        assertEquals(\"%E9%8D%B5=%E5%80%A4\", ihVal(\"Query String\", doc));\n        assertEquals(\"\u9375=\u5024\", URLDecoder.decode(ihVal(\"Query String\", doc), DataUtil.UTF_8.name()));\n    }\n\n    @Test void willEscapePathInRedirect() throws IOException {\n        String append = \"/Foo{bar}<>%/\";\n        String url = EchoServlet.Url + append;\n        Document doc = Jsoup\n            .connect(RedirectServlet.Url)\n            .data(RedirectServlet.LocationParam, url)\n            .get();\n\n        String path = ihVal(\"Path Info\", doc);\n        assertEquals(append, path);\n        assertEquals(\"/EchoServlet/Foo%7Bbar%7D%3C%3E%25/\", ihVal(\"Request URI\", doc));\n    }\n\n    /**\n     Provides HTTP and HTTPS EchoServlet URLs\n     */\n    private static Stream<String> echoUrls() {\n        return Stream.of(EchoServlet.Url, EchoServlet.TlsUrl);\n    }\n\n    @ParameterizedTest @MethodSource(\"echoUrls\")\n    void failsIfNotAuthenticated(String url) throws IOException {\n        String password = AuthFilter.newServerPassword(); // we don't send it, but ensures cache won't hit\n        Connection.Response res = Jsoup.connect(url)\n            .header(AuthFilter.WantsServerAuthentication, \"1\")\n            .ignoreHttpErrors(true)\n            .execute();\n\n        assertEquals(401, res.statusCode());\n    }\n\n    @ParameterizedTest @MethodSource(\"echoUrls\")\n    void canAuthenticate(String url) throws IOException {\n        AtomicInteger count = new AtomicInteger(0);\n        String password = AuthFilter.newServerPassword();\n        Connection.Response res = Jsoup.connect(url)\n            .header(AuthFilter.WantsServerAuthentication, \"1\")\n            .auth(ctx -> {\n                count.incrementAndGet();\n                assertEquals(Authenticator.RequestorType.SERVER, ctx.type());\n                assertEquals(\"localhost\", ctx.url().getHost());\n                assertEquals(AuthFilter.ServerRealm, ctx.realm());\n\n                return ctx.credentials(AuthFilter.ServerUser, password);\n            })\n            .execute();\n\n        assertEquals(1, count.get());\n\n        Document doc = res.parse();\n        assertTrue(ihVal(\"Authorization\", doc).startsWith(\"Basic \")); // tests we set the auth header\n    }\n\n    @ParameterizedTest @MethodSource(\"echoUrls\")\n    void incorrectAuth(String url) throws IOException {\n        Connection session = Jsoup.newSession()\n            .header(AuthFilter.WantsServerAuthentication, \"1\")\n            .ignoreHttpErrors(true);\n\n        String password = AuthFilter.newServerPassword();\n        int code = session.newRequest(url).execute().statusCode(); // no auth sent\n        assertEquals(HttpServletResponse.SC_UNAUTHORIZED, code);\n\n        AtomicInteger count = new AtomicInteger(0);\n        Connection.Response res = session.newRequest(url)\n            .auth(ctx -> {\n                count.incrementAndGet();\n                return ctx.credentials(AuthFilter.ServerUser, password + \"wrong\"); // incorrect\n            })\n            .execute();\n        assertEquals(MaxAttempts, count.get());\n        assertEquals(HttpServletResponse.SC_UNAUTHORIZED, res.statusCode());\n\n        AtomicInteger successCount = new AtomicInteger(0);\n        Connection.Response successRes = session.newRequest(url)\n            .auth(ctx -> {\n                successCount.incrementAndGet();\n                return ctx.credentials(AuthFilter.ServerUser, password); // correct\n            })\n            .execute();\n        assertEquals(1, successCount.get());\n        assertEquals(HttpServletResponse.SC_OK, successRes.statusCode());\n    }\n\n    // proxy connection tests are in ProxyTest\n\n    @ParameterizedTest\n    @ValueSource(strings = {\n        \"/htmltests/large.html\",\n        \"/htmltests/large.html?\" + FileServlet.SuppressContentLength\n    })\n    void progressListener(String path) throws IOException {\n        String url = FileServlet.urlTo(path);\n        boolean knownContentLength = !url.contains(FileServlet.SuppressContentLength);\n\n        AtomicBoolean seenProgress = new AtomicBoolean(false);\n        AtomicBoolean completed = new AtomicBoolean(false);\n        AtomicInteger numProgress = new AtomicInteger();\n\n        Connection con = Jsoup.connect(url).onResponseProgress((processed, total, percent, response) -> {\n            //System.out.println(\"Processed: \" + processed + \" of \" + total + \" (\" + percent + \"%)\");\n            if (!seenProgress.get()) {\n                seenProgress.set(true);\n                assertEquals(0, processed);\n                assertEquals(knownContentLength ? LargeDocFileLen : -1, total);\n                assertEquals(0.0f, percent);\n\n                assertEquals(200, response.statusCode());\n                String contentLength = response.header(\"Content-Length\");\n                if (knownContentLength) {\n                    assertNotNull(contentLength);\n                    assertEquals(String.valueOf(LargeDocFileLen), contentLength);\n                } else {\n                    assertNull(contentLength);\n                }\n                assertEquals(url, response.url().toExternalForm());\n            }\n            numProgress.getAndIncrement();\n\n            if (percent == 100.0f) {\n                // even if the content-length is not set, we get 100% when the read is completed\n                completed.set(true);\n                assertEquals(LargeDocFileLen, processed);\n            }\n\n        });\n        Document document = con.get();\n\n        assertTrue(seenProgress.get());\n        assertTrue(completed.get());\n\n        // should expect to see events relative to how large the buffer is.\n        int expected = LargeDocFileLen / 8192;\n\n        int num = numProgress.get();\n        // debug log if not in those ranges:\n        if (num < expected * 0.75 || num > expected * 1.5) {\n            System.err.println(\"Expected: \" + expected + \", got: \" + num);\n        }\n        assertTrue(num > expected * 0.75);\n        assertTrue(num < expected * 1.5);\n\n        // check the document works\n        assertEquals(LargeDocTextLen, document.text().length());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int LargeDocFileLen = 280735;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "LargeDocFileLen = 280735", "syntax_pass": true}, {"attribute_expression": "private static final int LargeDocTextLen = 269535;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "LargeDocTextLen = 269535", "syntax_pass": true}, {"attribute_expression": "private static String echoUrl;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "String", "name": "echoUrl", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/integration/FuzzFixesIT.java.FuzzFixesIT", "name": "FuzzFixesIT", "file_path": "src/test/java/org/jsoup/integration/FuzzFixesIT.java", "superclasses": "", "methods": ["[void]testHtmlParse(File)", "[void]testXmlParse(File)"], "method_uris": ["src/test/java/org/jsoup/integration/FuzzFixesIT.java.FuzzFixesIT.[Stream<File>]testFiles()"], "overrides": null, "attributes": [], "class_docstring": "\nTests fixes for issues raised by the <a href=\"https://oss-fuzz.com/testcases?project=jsoup\">OSS Fuzz project</a>. As\nsome of these are timeout tests - run each file 100 times and ensure under time.\n", "original_string": "public class FuzzFixesIT {\n    static int numIters = 50;\n    static int timeout = 30; // external fuzzer is set to 60 for 100 runs\n    static File testDir = ParseTest.getFile(\"/fuzztests/\");\n\n    private static Stream<File> testFiles() {\n        File[] files = testDir.listFiles();\n        assertNotNull(files);\n        assertTrue(files.length > 10);\n\n        return Stream.of(files);\n    }\n\n    @Disabled // disabled, as these soak up build time and the outcome oughtn't change unless we are refactoring the tree builders. manually execute as desired.\n    @ParameterizedTest\n    @MethodSource(\"testFiles\")\n    void testHtmlParse(File file) throws IOException {\n        long startTime = System.currentTimeMillis();\n        long completeBy = startTime + timeout * 1000L;\n\n        for (int i = 0; i < numIters; i++) {\n            Document doc = Jsoup.parse(file, \"UTF-8\", \"https://example.com/\");\n            assertNotNull(doc);\n            if (System.currentTimeMillis() > completeBy)\n                Assertions.fail(String.format(\"Timeout: only completed %d iters of [%s] in %d seconds\", i, file.getName(), timeout));\n        }\n    }\n    \n    @Disabled // disabled, as these soak up build time and the outcome oughtn't change unless we are refactoring the tree builders. manually execute as desired.\n    @ParameterizedTest\n    @MethodSource(\"testFiles\")\n    void testXmlParse(File file) throws IOException {\n        long startTime = System.currentTimeMillis();\n        long completeBy = startTime + timeout * 1000L;\n\n        for (int i = 0; i < numIters; i++) {\n            Document doc = Jsoup.parse(file, \"UTF-8\", \"https://example.com/\", Parser.xmlParser());\n            assertNotNull(doc);\n            if (System.currentTimeMillis() > completeBy)\n                Assertions.fail(String.format(\"Timeout: only completed %d iters of [%s] in %d seconds\", i, file.getName(), timeout));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "static int numIters = 50;", "docstring": "", "modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "type": "int", "name": "numIters = 50", "syntax_pass": true}, {"attribute_expression": "static int timeout = 30;", "docstring": "", "modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "type": "int", "name": "timeout = 30", "syntax_pass": true}, {"attribute_expression": "static File testDir = ParseTest.getFile(\"/fuzztests/\");", "docstring": " external fuzzer is set to 60 for 100 runs", "modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "type": "File", "name": "testDir = ParseTest.getFile(\"/fuzztests/\")", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/integration/SessionTest.java.SessionTest", "name": "SessionTest", "file_path": "src/test/java/org/jsoup/integration/SessionTest.java", "superclasses": "", "methods": ["[void]testPathScopedCookies()", "[void]testPathScopedCookiesOnRedirect()", "[void]testCanChangeParsers()"], "method_uris": ["src/test/java/org/jsoup/integration/SessionTest.java.SessionTest.[void]setUp()", "src/test/java/org/jsoup/integration/SessionTest.java.SessionTest.[Elements]keyEls(String,Document)", "src/test/java/org/jsoup/integration/SessionTest.java.SessionTest.[String]keyText(String,Document)", "src/test/java/org/jsoup/integration/SessionTest.java.SessionTest.[void]assertCookieServlet(Document)", "src/test/java/org/jsoup/integration/SessionTest.java.SessionTest.[void]assertEchoServlet(Document)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SessionTest {\n    @BeforeAll\n    public static void setUp() {\n        TestServer.start();\n    }\n\n    private static Elements keyEls(String key, Document doc) {\n        return doc.select(\"th:contains(\" + key + \") + td\");\n    }\n\n    private static String keyText(String key, Document doc) {\n        return doc.selectFirst(\"th:contains(\" + key + \") + td\").text();\n    }\n\n    @Test\n    public void testPathScopedCookies() throws IOException {\n        final Connection session = Jsoup.newSession();\n        final String userAgent = \"Jsoup Testalot v0.1\";\n\n        session.userAgent(userAgent);\n        session.url(CookieServlet.Url);\n\n        // should have no cookies:\n        Connection con1 = session.newRequest();\n        Document doc1 = con1.get();\n        assertEquals(0, doc1.select(\"table tr\").size()); // none sent to servlet\n\n        // set the cookies\n        Connection con2 = session.newRequest().data(CookieServlet.SetCookiesParam, \"1\");\n        Document doc2 = con2.get();\n        assertEquals(0, doc2.select(\"table tr\").size());  // none sent to servlet - we just got them!\n        Map<String, String> cookies = con2.response().cookies(); // simple cookie response, all named \"One\", so should be first sent\n        assertEquals(1, cookies.size());\n        assertEquals(\"Root\", cookies.get(\"One\"));\n\n        // todo - interrogate cookie-store\n\n        // check that they are sent and filtered to the right path\n        Connection con3 = session.newRequest();\n        Document doc3 = con3.get();\n        assertCookieServlet(doc3);\n\n        Document echo = session.newRequest().url(EchoServlet.Url).get();\n        assertEchoServlet(echo);\n        assertEquals(userAgent, keyText(\"User-Agent\", echo)); // check that customer user agent sent on session arrived\n\n        // check that cookies aren't set out of the session\n        Document doc4 = Jsoup.newSession().url(CookieServlet.Url).get();\n        assertEquals(0, doc4.select(\"table tr\").size()); // none sent to servlet\n\n        // check can add local ones also\n        Document doc5 = session.newRequest().cookie(\"Bar\", \"Qux\").get();\n        Elements doc5Bar = keyEls(\"Bar\", doc5);\n        assertEquals(\"Qux\", doc5Bar.first().text());\n    }\n\n    // validate that only cookies set by cookie servlet get to the cookie servlet path\n    private void assertCookieServlet(Document doc) {\n        assertEquals(2, doc.select(\"table tr\").size());  // two of three sent to servlet (/ and /CookieServlet)\n        Elements doc3Els = keyEls(\"One\", doc);\n        assertEquals(2, doc3Els.size());\n        assertEquals(\"CookieServlet\", doc3Els.get(0).text()); // ordered by most specific path\n        assertEquals(\"Root\", doc3Els.get(1).text()); // ordered by most specific path\n    }\n\n    // validate that only for echo servlet\n    private void assertEchoServlet(Document doc) {\n        Elements echoEls = keyEls(\"Cookie: One\", doc);  // two of three sent to servlet (/ and /EchoServlet)\n        assertEquals(2, echoEls.size());\n        assertEquals(\"EchoServlet\", echoEls.get(0).text()); // ordered by most specific path - /Echo\n        assertEquals(\"Root\", echoEls.get(1).text()); // ordered by most specific path - /\n    }\n\n    @Test\n    public void testPathScopedCookiesOnRedirect() throws IOException {\n        Connection session = Jsoup.newSession();\n\n        Document doc1 = session.newRequest()\n            .url(CookieServlet.Url)\n            .data(CookieServlet.LocationParam, EchoServlet.Url)\n            .data(CookieServlet.SetCookiesParam, \"1\")\n            .get();\n\n        // we should be redirected to the echo servlet with cookies\n        assertEquals(EchoServlet.Url, doc1.location());\n        assertEchoServlet(doc1); // checks we only have /echo cookies\n\n        Document doc2 = session.newRequest()\n            .url(EchoServlet.Url)\n            .get();\n        assertEchoServlet(doc2); // test retained in session\n\n        Document doc3 = session.newRequest()\n            .url(CookieServlet.Url)\n            .get();\n        assertCookieServlet(doc3); // and so were the /cookie cookies\n    }\n\n    @Test\n    public void testCanChangeParsers() throws IOException {\n        Connection session = Jsoup.newSession().parser(Parser.xmlParser());\n\n        String xmlUrl = FileServlet.urlTo(\"/htmltests/xml-test.xml\");\n        String xmlVal = \"<doc><val>One<val>Two</val>Three</val></doc>\\n\";\n\n        Document doc1 = session.newRequest().url(xmlUrl).get();\n        assertEquals(xmlVal, doc1.html()); // not HTML normed, used XML parser\n\n        Document doc2 = session.newRequest().parser(Parser.htmlParser()).url(xmlUrl).get();\n        assertTrue(doc2.html().startsWith(\"<html>\"));\n\n        Document doc3 = session.newRequest().url(xmlUrl).get();\n        assertEquals(xmlVal, doc3.html()); // did not blow away xml default\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/integration/FuzzFixesTest.java.FuzzFixesTest", "name": "FuzzFixesTest", "file_path": "src/test/java/org/jsoup/integration/FuzzFixesTest.java", "superclasses": "", "methods": ["[void]blankAbsAttr()", "[void]bookmark()", "[void]testHtmlParse(File)", "[void]testXmlParse(File)"], "method_uris": ["src/test/java/org/jsoup/integration/FuzzFixesTest.java.FuzzFixesTest.[Stream<File>]testFiles()"], "overrides": null, "attributes": [], "class_docstring": "\nTests fixes for issues raised by the OSS Fuzz project @ https://oss-fuzz.com/testcases?project=jsoup. Contains inline\nstring cases causing exceptions. Timeout tests are in FuzzFixesIT.\n", "original_string": "public class FuzzFixesTest {\n\n    private static Stream<File> testFiles() {\n        File[] files = FuzzFixesIT.testDir.listFiles();\n        assertNotNull(files);\n        assertTrue(files.length > 10);\n\n        return Stream.of(files);\n    }\n\n    @Test\n    public void blankAbsAttr() {\n        // https://github.com/jhy/jsoup/issues/1541\n        String html = \"b<bodY abs: abs:abs: abs:abs:abs>\";\n        Document doc = Jsoup.parse(html);\n        assertNotNull(doc);\n    }\n\n    @Test\n    public void bookmark() {\n        // https://github.com/jhy/jsoup/issues/1576\n        String html = \"<?a<U<P<A \";\n        Document doc = Jsoup.parse(html);\n        assertNotNull(doc);\n\n        Document xmlDoc = Parser.xmlParser().parseInput(html, \"\");\n        assertNotNull(xmlDoc);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"testFiles\")\n    void testHtmlParse(File file) throws IOException {\n        Document doc = Jsoup.parse(file, \"UTF-8\", \"https://example.com/\");\n        assertNotNull(doc);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"testFiles\")\n    void testXmlParse(File file) throws IOException {\n        Document doc = Jsoup.parse(file, \"UTF-8\", \"https://example.com/\", Parser.xmlParser());\n        assertNotNull(doc);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/integration/SafelistExtensionTest.java.SafelistExtensionTest", "name": "SafelistExtensionTest", "file_path": "src/test/java/org/jsoup/integration/SafelistExtensionTest.java", "superclasses": "", "methods": ["[void]canCustomizeSafeTests()"], "method_uris": [], "overrides": null, "attributes": [{"original_string": "    private static class OpenSafelist extends Safelist {\n        public OpenSafelist(Safelist safelist) {\n            super(safelist);\n        }\n\n        @Override\n        public boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n            if (attr.getKey().startsWith(\"open\"))\n                return true;\n            return super.isSafeAttribute(tagName, el, attr);\n        }\n\n        @Override\n        public boolean isSafeTag(String tag) {\n            if (tag.startsWith(\"open\"))\n                return true;\n            return super.isSafeTag(tag);\n        }\n    }", "definition": "    private static class OpenSafelist extends Safelist", "class_docstring": " passes tags and attributes starting with \"open\"", "name": "OpenSafelist", "super_interfaces": [], "superclasses": "Safelist", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public OpenSafelist(Safelist safelist) {\n            super(safelist);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "OpenSafelist", "params": [{"name": "safelist", "type": "Safelist"}], "body": "                                               {\n            super(safelist);\n        }", "signature": "public OpenSafelist(Safelist safelist)"}, {"syntax_pass": true, "original_string": "        @Override\n        public boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n            if (attr.getKey().startsWith(\"open\"))\n                return true;\n            return super.isSafeAttribute(tagName, el, attr);\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "isSafeAttribute", "params": [{"name": "tagName", "type": "String"}, {"name": "el", "type": "Element"}, {"name": "attr", "type": "Attribute"}], "body": "                                                                                   {\n            if (attr.getKey().startsWith(\"open\"))\n                return true;\n            return super.isSafeAttribute(tagName, el, attr);\n        }", "signature": "@Override\n        public boolean isSafeAttribute(String tagName, Element el, Attribute attr)"}, {"syntax_pass": true, "original_string": "        @Override\n        public boolean isSafeTag(String tag) {\n            if (tag.startsWith(\"open\"))\n                return true;\n            return super.isSafeTag(tag);\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "isSafeTag", "params": [{"name": "tag", "type": "String"}], "body": "                                             {\n            if (tag.startsWith(\"open\"))\n                return true;\n            return super.isSafeTag(tag);\n        }", "signature": "@Override\n        public boolean isSafeTag(String tag)"}]}], "class_docstring": "\nCheck that we can extend Safelist methods\n", "original_string": "public class SafelistExtensionTest {\n    @Test public void canCustomizeSafeTests() {\n        OpenSafelist openSafelist = new OpenSafelist(Safelist.relaxed());\n        Safelist safelist = Safelist.relaxed();\n\n        String html = \"<p><opentag openattr>Hello</opentag></p>\";\n\n        String openClean = Jsoup.clean(html, openSafelist);\n        String clean = Jsoup.clean(html, safelist);\n\n        assertEquals(\"<p><opentag openattr=\\\"\\\">Hello</opentag></p>\", TextUtil.stripNewlines(openClean));\n        assertEquals(\"<p>Hello</p>\", clean);\n    }\n\n    // passes tags and attributes starting with \"open\"\n    private static class OpenSafelist extends Safelist {\n        public OpenSafelist(Safelist safelist) {\n            super(safelist);\n        }\n\n        @Override\n        public boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n            if (attr.getKey().startsWith(\"open\"))\n                return true;\n            return super.isSafeAttribute(tagName, el, attr);\n        }\n\n        @Override\n        public boolean isSafeTag(String tag) {\n            if (tag.startsWith(\"open\"))\n                return true;\n            return super.isSafeTag(tag);\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/integration/SessionIT.java.SessionIT", "name": "SessionIT", "file_path": "src/test/java/org/jsoup/integration/SessionIT.java", "superclasses": "", "methods": ["[void]multiThread()", "[void]multiThreadWithoutNewRequestBlowsUp()", "[void]multiThreadWithProgressListener()"], "method_uris": ["src/test/java/org/jsoup/integration/SessionIT.java.SessionIT.[void]setUp()"], "overrides": null, "attributes": [{"original_string": "    static class ThreadCatcher implements Thread.UncaughtExceptionHandler {\n        AtomicInteger exceptionCount = new AtomicInteger();\n        AtomicInteger multiThreadExceptions = new AtomicInteger();\n\n        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n            if (e instanceof IllegalArgumentException && e.getMessage().contains(\"Multiple threads\"))\n                multiThreadExceptions.incrementAndGet();\n            else\n                e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }\n    }", "definition": "    static class ThreadCatcher implements Thread.UncaughtExceptionHandler", "class_docstring": "", "name": "ThreadCatcher", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "fields": [{"attribute_expression": "AtomicInteger exceptionCount = new AtomicInteger();", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicInteger", "name": "exceptionCount = new AtomicInteger()", "syntax_pass": true}, {"attribute_expression": "AtomicInteger multiThreadExceptions = new AtomicInteger();", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "AtomicInteger", "name": "multiThreadExceptions = new AtomicInteger()", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n            if (e instanceof IllegalArgumentException && e.getMessage().contains(\"Multiple threads\"))\n                multiThreadExceptions.incrementAndGet();\n            else\n                e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "name": "uncaughtException", "params": [{"name": "t", "type": "Thread"}, {"name": "e", "type": "Throwable"}], "body": "                                                             {\n            if (e instanceof IllegalArgumentException && e.getMessage().contains(\"Multiple threads\"))\n                multiThreadExceptions.incrementAndGet();\n            else\n                e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }", "signature": "@Override\n        public void uncaughtException(Thread t, Throwable e)"}]}], "class_docstring": " Integration tests to test longer running Connection", "original_string": "public class SessionIT {\n    @BeforeAll\n    public static void setUp() {\n        TestServer.start();\n    }\n\n    @Test\n    public void multiThread() throws InterruptedException {\n        int numThreads = 20;\n        int numThreadLoops = 5;\n        String[] urls = {\n            FileServlet.urlTo(\"/htmltests/medium.html\"),\n            FileServlet.urlTo(\"/htmltests/upload-form.html\"),\n            FileServlet.urlTo(\"/htmltests/comments.html\"),\n            FileServlet.urlTo(\"/htmltests/large.html\"),\n        };\n        String[] titles = {\n            \"Medium HTML\",\n            \"Upload Form Test\",\n            \"A Certain Kind of Test\",\n            \"Large HTML\"\n        };\n        ThreadCatcher catcher = new ThreadCatcher();\n\n        Connection session = Jsoup.newSession();\n\n        Thread[] threads = new Thread[numThreads];\n        for (int threadNum = 0; threadNum < numThreads; threadNum++) {\n            Thread thread = new Thread(() -> {\n                for (int loop = 0; loop < numThreadLoops; loop++) {\n                    for (int i = 0; i < urls.length; i++) {\n                        try {\n                            Document doc = session.newRequest().url(urls[i]).get();\n                            assertEquals(titles[i], doc.title());\n                        } catch (IOException e) {\n                            throw new UncheckedIOException(e);\n                        }\n                    }\n                }\n            });\n            thread.setName(\"Runner-\" + threadNum);\n            thread.start();\n            thread.setUncaughtExceptionHandler(catcher);\n            threads[threadNum] = thread;\n        }\n\n        // now join them all\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(0, catcher.exceptionCount.get());\n    }\n\n    // test that we throw a nice clear exception if you try to multi-thread by forget .newRequest()\n    @Test\n    public void multiThreadWithoutNewRequestBlowsUp() throws InterruptedException {\n        int numThreads = 20;\n        String url = SlowRider.Url + \"?\" + SlowRider.MaxTimeParam + \"=10000\"; // this makes sure that the first req is still executing whilst the others run\n        String title = \"Slow Rider\";\n\n        ThreadCatcher catcher = new ThreadCatcher();\n        Connection session = Jsoup.newSession();\n\n        Thread[] threads = new Thread[numThreads];\n        AtomicInteger successful = new AtomicInteger();\n        for (int threadNum = 0; threadNum < numThreads; threadNum++) {\n            Thread thread = new Thread(() -> {\n                try {\n                    Document doc = session.url(url).get();\n                    assertEquals(title, doc.title());\n                    successful.getAndIncrement();\n                } catch (IOException e) {\n                    throw new UncheckedIOException(e);\n                }\n            });\n            thread.setName(\"Runner-\" + threadNum);\n            thread.start();\n            thread.setUncaughtExceptionHandler(catcher);\n            threads[threadNum] = thread;\n        }\n\n        // now join them all\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        // only one should have passed, rest should have blown up (assuming the started whilst other was running)\n        //assertEquals(numThreads - 1, catcher.multiThreadExceptions.get());\n        //assertEquals(numThreads - 1, catcher.exceptionCount.get());\n\n        /* The checks above work when all 20 threads are executed within 10 seconds. However, depending on how cloudy it\n         is when the CI jobs are run, they may not all complete in time. As of writing that appears most commonly on the\n         maxOS runners, which appear overtaxed. That makes this test flaky. So we relax the test conditions, and make\n         sure at least just one passed and one failed. That's OK in prod as well, because we are only concerned about\n         concurrent execution, which the impl does detect correctly. */\n        assertTrue(successful.get() > 0);\n        assertTrue(catcher.multiThreadExceptions.get() > 0);\n        assertEquals(catcher.multiThreadExceptions.get(), catcher.exceptionCount.get()); // all exceptions are multi-threaded\n    }\n\n    @Test\n    public void multiThreadWithProgressListener() throws InterruptedException {\n        // tests that we can use one progress listener for multiple URLs and threads.\n        int numThreads = 10;\n        String[] urls = {\n            FileServlet.urlTo(\"/htmltests/medium.html\"),\n            FileServlet.urlTo(\"/htmltests/upload-form.html\"),\n            FileServlet.urlTo(\"/htmltests/comments.html\"),\n            FileServlet.urlTo(\"/htmltests/large.html\"),\n        };\n        Set<String> seenUrls = ConcurrentHashMap.newKeySet();\n        AtomicInteger completedCount = new AtomicInteger(0);\n        ThreadCatcher catcher = new ThreadCatcher();\n\n        Connection session = Jsoup.newSession()\n            .onResponseProgress((processed, total, percent, response) -> {\n                if (percent == 100.0f) {\n                    //System.out.println(\"Completed \" + Thread.currentThread().getName() + \"- \" + response.url());\n                    seenUrls.add(response.url().toExternalForm());\n                    completedCount.incrementAndGet();\n                }\n            });\n\n        Thread[] threads = new Thread[numThreads];\n        for (int threadNum = 0; threadNum < numThreads; threadNum++) {\n            Thread thread = new Thread(() -> {\n                for (String url : urls) {\n                    try {\n                        Connection con = session.newRequest().url(url);\n                        con.get();\n                    } catch (IOException e) {\n                        throw new UncheckedIOException(e);\n                    }\n                }\n            });\n            thread.setName(\"Runner-\" + threadNum);\n            thread.start();\n            thread.setUncaughtExceptionHandler(catcher);\n            threads[threadNum] = thread;\n        }\n\n        // now join them all\n        for (Thread thread : threads) {\n            thread.join();\n        }\n\n        assertEquals(0, catcher.exceptionCount.get());\n        assertEquals(urls.length, seenUrls.size());\n        assertEquals(urls.length * numThreads, completedCount.get());\n    }\n\n\n    static class ThreadCatcher implements Thread.UncaughtExceptionHandler {\n        AtomicInteger exceptionCount = new AtomicInteger();\n        AtomicInteger multiThreadExceptions = new AtomicInteger();\n\n        @Override\n        public void uncaughtException(Thread t, Throwable e) {\n            if (e instanceof IllegalArgumentException && e.getMessage().contains(\"Multiple threads\"))\n                multiThreadExceptions.incrementAndGet();\n            else\n                e.printStackTrace();\n            exceptionCount.incrementAndGet();\n        }\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/integration/ParseTest.java.ParseTest", "name": "ParseTest", "file_path": "src/test/java/org/jsoup/integration/ParseTest.java", "superclasses": "", "methods": ["[void]testHtml5Charset()", "[void]testBrokenHtml5CharsetWithASingleDoubleQuote()", "[void]testLowercaseUtf8Charset()", "[void]testXwiki()", "[void]testXwikiExpanded()", "[void]testWikiExpandedFromString()", "[void]testWikiFromString()", "[void]testFileParseNoCharsetMethod()"], "method_uris": ["src/test/java/org/jsoup/integration/ParseTest.java.ParseTest.[File]getFile(String)", "src/test/java/org/jsoup/integration/ParseTest.java.ParseTest.[Path]getPath(String)", "src/test/java/org/jsoup/integration/ParseTest.java.ParseTest.[InputStream]inputStreamFrom(String)", "src/test/java/org/jsoup/integration/ParseTest.java.ParseTest.[String]getFileAsString(File)"], "overrides": null, "attributes": [], "class_docstring": "\nIntegration test: parses from real-world example HTML.\n\n@author Jonathan Hedley, jonathan@hedley.net\n", "original_string": "public class ParseTest {\n    @Test\n    public void testHtml5Charset() throws IOException {\n        // test that <meta charset=\"gb2312\"> works\n        File in = getFile(\"/htmltests/meta-charset-1.html\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com/\"); //gb2312, has html5 <meta charset>\n        assertEquals(\"\u65b0\", doc.text());\n        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n\n        // double check, no charset, falls back to utf8 which is incorrect\n        in = getFile(\"/htmltests/meta-charset-2.html\"); //\n        doc = Jsoup.parse(in, null, \"http://example.com\"); // gb2312, no charset\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n        assertNotEquals(\"\u65b0\", doc.text());\n\n        // confirm fallback to utf8\n        in = getFile(\"/htmltests/meta-charset-3.html\");\n        doc = Jsoup.parse(in, null, \"http://example.com/\"); // utf8, no charset\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n        assertEquals(\"\u65b0\", doc.text());\n    }\n\n    @Test\n    public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {\n        InputStream in = inputStreamFrom(\"<html>\\n\" +\n                \"<head><meta charset=UTF-8\\\"></head>\\n\" +\n                \"<body></body>\\n\" +\n                \"</html>\");\n        Document doc = Jsoup.parse(in, null, \"http://example.com/\");\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n    }\n\n    @Test\n    public void testLowercaseUtf8Charset() throws IOException {\n        File in = getFile(\"/htmltests/lowercase-charset-test.html\");\n        Document doc = Jsoup.parse(in, null);\n\n        Element form = doc.select(\"#form\").first();\n        assertEquals(2, form.children().size());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().name());\n    }\n\n    @Test\n    public void testXwiki() throws IOException {\n        // https://github.com/jhy/jsoup/issues/1324\n        // this tests that when in CharacterReader we hit a buffer while marked, we preserve the mark when buffered up and can rewind\n        File in = getFile(\"/htmltests/xwiki-1324.html.gz\");\n        Document doc = Jsoup.parse(in, null, \"https://localhost/\");\n        assertEquals(\"XWiki Jetty HSQLDB 12.1-SNAPSHOT\", doc.select(\"#xwikiplatformversion\").text());\n\n        // was getting busted at =userdirectory, because it hit the bufferup point but the mark was then lost. so\n        // updated to preserve the mark.\n        String wantHtml = \"<a class=\\\"list-group-item\\\" data-id=\\\"userdirectory\\\" href=\\\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;section=userdirectory\\\" title=\\\"Customize the user directory live table.\\\">User Directory</a>\";\n        assertEquals(wantHtml, doc.select(\"[data-id=userdirectory]\").outerHtml());\n    }\n\n    @Test\n    public void testXwikiExpanded() throws IOException {\n        // https://github.com/jhy/jsoup/issues/1324\n        // this tests that if there is a huge illegal character reference, we can get through a buffer and rewind, and still catch that it's an invalid refence,\n        // and the parse tree is correct.\n        File in = getFile(\"/htmltests/xwiki-edit.html.gz\");\n        Parser parser = Parser.htmlParser();\n        Document doc = Jsoup.parse(new GZIPInputStream(new FileInputStream(in)), \"UTF-8\", \"https://localhost/\", parser.setTrackErrors(100));\n        ParseErrorList errors = parser.getErrors();\n\n        assertEquals(\"XWiki Jetty HSQLDB 12.1-SNAPSHOT\", doc.select(\"#xwikiplatformversion\").text());\n        assertEquals(0, errors.size()); // not an invalid reference because did not look legit\n\n        // was getting busted at =userdirectory, because it hit the bufferup point but the mark was then lost. so\n        // updated to preserve the mark.\n        String wantHtml = \"<a class=\\\"list-group-item\\\" data-id=\\\"userdirectory\\\" href=\\\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;RIGHTHERERIGHTHERERIGHTHERERIGHTHERE\";\n        assertTrue(doc.select(\"[data-id=userdirectory]\").outerHtml().startsWith(wantHtml));\n    }\n\n    @Test public void testWikiExpandedFromString() throws IOException {\n        File in = getFile(\"/htmltests/xwiki-edit.html.gz\");\n        String html = getFileAsString(in);\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"XWiki Jetty HSQLDB 12.1-SNAPSHOT\", doc.select(\"#xwikiplatformversion\").text());\n        String wantHtml = \"<a class=\\\"list-group-item\\\" data-id=\\\"userdirectory\\\" href=\\\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;RIGHTHERERIGHTHERERIGHTHERERIGHTHERE\";\n        assertTrue(doc.select(\"[data-id=userdirectory]\").outerHtml().startsWith(wantHtml));\n    }\n\n    @Test public void testWikiFromString() throws IOException {\n        File in = getFile(\"/htmltests/xwiki-1324.html.gz\");\n        String html = getFileAsString(in);\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"XWiki Jetty HSQLDB 12.1-SNAPSHOT\", doc.select(\"#xwikiplatformversion\").text());\n        String wantHtml = \"<a class=\\\"list-group-item\\\" data-id=\\\"userdirectory\\\" href=\\\"/xwiki/bin/admin/XWiki/XWikiPreferences?editor=globaladmin&amp;section=userdirectory\\\" title=\\\"Customize the user directory live table.\\\">User Directory</a>\";\n        assertEquals(wantHtml, doc.select(\"[data-id=userdirectory]\").outerHtml());\n    }\n\n    @Test public void testFileParseNoCharsetMethod() throws IOException {\n        File in = getFile(\"/htmltests/xwiki-1324.html.gz\");\n        Document doc = Jsoup.parse(in);\n        assertEquals(\"XWiki Jetty HSQLDB 12.1-SNAPSHOT\", doc.select(\"#xwikiplatformversion\").text());\n    }\n\n\n    public static File getFile(String resourceName) {\n        try {\n            URL resource = ParseTest.class.getResource(resourceName);\n            return resource != null ? new File(resource.toURI()) : new File(\"/404\");\n        } catch (URISyntaxException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    public static Path getPath(String resourceName) {\n        try {\n            URL resource = ParseTest.class.getResource(resourceName);\n            return resource != null ? Paths.get(resource.toURI()) : Paths.get(\"/404\");\n        } catch (URISyntaxException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    public static InputStream inputStreamFrom(String s) {\n        return new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));\n    }\n\n    public static String getFileAsString(File file) throws IOException {\n        byte[] bytes;\n        if (file.getName().endsWith(\".gz\")) {\n            InputStream stream = new GZIPInputStream(new FileInputStream(file));\n            ByteBuffer byteBuffer = DataUtil.readToByteBuffer(stream, 0);\n            bytes = new byte[byteBuffer.limit()];\n            System.arraycopy(byteBuffer.array(), 0, bytes, 0, byteBuffer.limit());\n        } else {\n            bytes = Files.readAllBytes(file.toPath());\n        }\n        return new String(bytes);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java.HtmlTreeBuilderStateTest", "name": "HtmlTreeBuilderStateTest", "file_path": "src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java", "superclasses": "", "methods": ["[void]ensureArraysAreSorted()", "[void]ensureTagSearchesAreKnownTags()", "[void]nestedAnchorElements01()", "[void]nestedAnchorElements02()"], "method_uris": ["src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java.HtmlTreeBuilderStateTest.[List<Object[]>]findConstantArrays(Class)", "src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java.HtmlTreeBuilderStateTest.[void]ensureSorted(List<Object[]>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HtmlTreeBuilderStateTest {\n    static List<Object[]> findConstantArrays(Class aClass) {\n        ArrayList<Object[]> array = new ArrayList<>();\n        Field[] fields = aClass.getDeclaredFields();\n\n        for (Field field : fields) {\n            int modifiers = field.getModifiers();\n            if (Modifier.isStatic(modifiers) && !Modifier.isPrivate(modifiers) && field.getType().isArray()) {\n                try {\n                    array.add((Object[]) field.get(null));\n                } catch (IllegalAccessException e) {\n                    throw new IllegalStateException(e);\n                }\n            }\n        }\n\n        return array;\n    }\n\n    static void ensureSorted(List<Object[]> constants) {\n        for (Object[] array : constants) {\n            Object[] copy = Arrays.copyOf(array, array.length);\n            Arrays.sort(array);\n            assertArrayEquals(array, copy);\n        }\n    }\n\n    @Test\n    public void ensureArraysAreSorted() {\n        List<Object[]> constants = findConstantArrays(Constants.class);\n        ensureSorted(constants);\n        assertEquals(40, constants.size());\n    }\n\n    @Test public void ensureTagSearchesAreKnownTags() {\n        List<Object[]> constants = findConstantArrays(Constants.class);\n        for (Object[] constant : constants) {\n            String[] tagNames = (String[]) constant;\n            for (String tagName : tagNames) {\n                if (StringUtil.inSorted(tagName, InBodyStartInputAttribs))\n                    continue; // odd one out in the constant\n                assertTrue(Tag.isKnownTag(tagName), String.format(\"Unknown tag name: %s\", tagName));\n            }\n        }\n    }\n\n\n    @Test\n    public void nestedAnchorElements01() {\n        String html = \"<html>\\n\" +\n            \"  <body>\\n\" +\n            \"    <a href='#1'>\\n\" +\n            \"        <div>\\n\" +\n            \"          <a href='#2'>child</a>\\n\" +\n            \"        </div>\\n\" +\n            \"    </a>\\n\" +\n            \"  </body>\\n\" +\n            \"</html>\";\n        String s = Jsoup.parse(html).toString();\n        assertEquals(\"<html>\\n\" +\n            \" <head></head>\\n\" +\n            \" <body>\\n\" +\n            \"  <a href=\\\"#1\\\"> </a>\\n\" +\n            \"  <div>\\n\" +\n            \"   <a href=\\\"#1\\\"> </a><a href=\\\"#2\\\">child</a>\\n\" +\n            \"  </div>\\n\" +\n            \" </body>\\n\" +\n            \"</html>\", s);\n    }\n\n    @Test\n    public void nestedAnchorElements02() {\n        String html = \"<html>\\n\" +\n            \"  <body>\\n\" +\n            \"    <a href='#1'>\\n\" +\n            \"      <div>\\n\" +\n            \"        <div>\\n\" +\n            \"          <a href='#2'>child</a>\\n\" +\n            \"        </div>\\n\" +\n            \"      </div>\\n\" +\n            \"    </a>\\n\" +\n            \"  </body>\\n\" +\n            \"</html>\";\n        String s = Jsoup.parse(html).toString();\n        assertEquals(\"<html>\\n\" +\n            \" <head></head>\\n\" +\n            \" <body>\\n\" +\n            \"  <a href=\\\"#1\\\"> </a>\\n\" +\n            \"  <div>\\n\" +\n            \"   <a href=\\\"#1\\\"> </a>\\n\" +\n            \"   <div>\\n\" +\n            \"    <a href=\\\"#1\\\"> </a><a href=\\\"#2\\\">child</a>\\n\" +\n            \"   </div>\\n\" +\n            \"  </div>\\n\" +\n            \" </body>\\n\" +\n            \"</html>\", s);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/CharacterReaderTest.java.CharacterReaderTest", "name": "CharacterReaderTest", "file_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java", "superclasses": "", "methods": ["[void]consume()", "[void]unconsume()", "[void]mark()", "[void]rewindToMark()", "[void]consumeToEnd()", "[void]nextIndexOfChar()", "[void]nextIndexOfString()", "[void]nextIndexOfUnmatched()", "[void]consumeToChar()", "[void]consumeToString()", "[void]advance()", "[void]consumeToAny()", "[void]consumeLetterSequence()", "[void]consumeLetterThenDigitSequence()", "[void]matches()", "[void]matchesIgnoreCase()", "[void]containsIgnoreCase()", "[void]containsIgnoreCaseBuffer()", "[void]matchesAny()", "[void]matchesDigit()", "[void]cachesStrings()", "[void]rangeEquals()", "[void]empty()", "[void]consumeToNonexistentEndWhenAtAnd()", "[void]notEmptyAtBufferSplitPoint()", "[void]bufferUp()", "[void]canEnableAndDisableLineNumberTracking()", "[void]canTrackNewlines()", "[void]countsColumnsOverBufferWhenNoNewlines()", "[void]linenumbersAgreeWithEditor()", "[void]consumeDoubleQuotedAttributeConsumesThruSingleQuote()", "[void]consumeSingleQuotedAttributeConsumesThruDoubleQuote()", "[void]consumeDoubleQuotedAttributeConsumesThruSingleQuoteToAmp()", "[void]consumeSingleQuotedAttributeConsumesThruDoubleQuoteToAmp()"], "method_uris": ["src/test/java/org/jsoup/parser/CharacterReaderTest.java.CharacterReaderTest.[String]BufferBuster(String)"], "overrides": null, "attributes": [], "class_docstring": "\nTest suite for character reader.\n\n@author Jonathan Hedley, jonathan@hedley.net\n", "original_string": "public class CharacterReaderTest {\n    public final static int maxBufferLen = CharacterReader.BufferSize;\n\n    @Test public void consume() {\n        CharacterReader r = new CharacterReader(\"one\");\n        assertEquals(0, r.pos());\n        assertEquals('o', r.current());\n        assertEquals('o', r.consume());\n        assertEquals(1, r.pos());\n        assertEquals('n', r.current());\n        assertEquals(1, r.pos());\n        assertEquals('n', r.consume());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n        assertEquals(CharacterReader.EOF, r.consume());\n        assertTrue(r.isEmpty());\n        assertEquals(CharacterReader.EOF, r.consume());\n    }\n\n    @Test public void unconsume() {\n        CharacterReader r = new CharacterReader(\"one\");\n        assertEquals('o', r.consume());\n        assertEquals('n', r.current());\n        r.unconsume();\n        assertEquals('o', r.current());\n\n        assertEquals('o', r.consume());\n        assertEquals('n', r.consume());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n        r.unconsume();\n        assertFalse(r.isEmpty());\n        assertEquals('e', r.current());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n\n        assertEquals(CharacterReader.EOF, r.consume());\n        r.unconsume(); // read past, so have to eat again\n        assertTrue(r.isEmpty());\n        r.unconsume();\n        assertFalse(r.isEmpty());\n\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n\n        assertEquals(CharacterReader.EOF, r.consume());\n        assertTrue(r.isEmpty());\n\n        // unconsume all remaining characters\n        for (int i = 0; i < 4; i++) {\n            r.unconsume();\n        }\n        assertThrows(UncheckedIOException.class, r::unconsume);\n    }\n\n    @Test public void mark() {\n        CharacterReader r = new CharacterReader(\"one\");\n        r.consume();\n        r.mark();\n        assertEquals(1, r.pos());\n        assertEquals('n', r.consume());\n        assertEquals('e', r.consume());\n        assertTrue(r.isEmpty());\n        r.rewindToMark();\n        assertEquals(1, r.pos());\n        assertEquals('n', r.consume());\n        assertFalse(r.isEmpty());\n        assertEquals(2, r.pos());\n    }\n\n    @Test public void rewindToMark() {\n        CharacterReader r = new CharacterReader(\"nothing\");\n        // marking should be invalid\n        assertThrows(UncheckedIOException.class, r::rewindToMark);\n    }\n\n    @Test public void consumeToEnd() {\n        String in = \"one two three\";\n        CharacterReader r = new CharacterReader(in);\n        String toEnd = r.consumeToEnd();\n        assertEquals(in, toEnd);\n        assertTrue(r.isEmpty());\n    }\n\n    @Test public void nextIndexOfChar() {\n        String in = \"blah blah\";\n        CharacterReader r = new CharacterReader(in);\n\n        assertEquals(-1, r.nextIndexOf('x'));\n        assertEquals(3, r.nextIndexOf('h'));\n        String pull = r.consumeTo('h');\n        assertEquals(\"bla\", pull);\n        r.consume();\n        assertEquals(2, r.nextIndexOf('l'));\n        assertEquals(\" blah\", r.consumeToEnd());\n        assertEquals(-1, r.nextIndexOf('x'));\n    }\n\n    @Test public void nextIndexOfString() {\n        String in = \"One Two something Two Three Four\";\n        CharacterReader r = new CharacterReader(in);\n\n        assertEquals(-1, r.nextIndexOf(\"Foo\"));\n        assertEquals(4, r.nextIndexOf(\"Two\"));\n        assertEquals(\"One Two \", r.consumeTo(\"something\"));\n        assertEquals(10, r.nextIndexOf(\"Two\"));\n        assertEquals(\"something Two Three Four\", r.consumeToEnd());\n        assertEquals(-1, r.nextIndexOf(\"Two\"));\n    }\n\n    @Test public void nextIndexOfUnmatched() {\n        CharacterReader r = new CharacterReader(\"<[[one]]\");\n        assertEquals(-1, r.nextIndexOf(\"]]>\"));\n    }\n\n    @Test public void consumeToChar() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertEquals(\"One \", r.consumeTo('T'));\n        assertEquals(\"\", r.consumeTo('T')); // on Two\n        assertEquals('T', r.consume());\n        assertEquals(\"wo \", r.consumeTo('T'));\n        assertEquals('T', r.consume());\n        assertEquals(\"hree\", r.consumeTo('T')); // consume to end\n    }\n\n    @Test public void consumeToString() {\n        CharacterReader r = new CharacterReader(\"One Two Two Four\");\n        assertEquals(\"One \", r.consumeTo(\"Two\"));\n        assertEquals('T', r.consume());\n        assertEquals(\"wo \", r.consumeTo(\"Two\"));\n        assertEquals('T', r.consume());\n        // To handle strings straddling across buffers, consumeTo() may return the\n        // data in multiple pieces near EOF.\n        StringBuilder builder = new StringBuilder();\n        String part;\n        do {\n            part = r.consumeTo(\"Qux\");\n            builder.append(part);\n        } while (!part.isEmpty());\n        assertEquals(\"wo Four\", builder.toString());\n    }\n\n    @Test public void advance() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertEquals('O', r.consume());\n        r.advance();\n        assertEquals('e', r.consume());\n    }\n\n    @Test public void consumeToAny() {\n        CharacterReader r = new CharacterReader(\"One &bar; qux\");\n        assertEquals(\"One \", r.consumeToAny('&', ';'));\n        assertTrue(r.matches('&'));\n        assertTrue(r.matches(\"&bar;\"));\n        assertEquals('&', r.consume());\n        assertEquals(\"bar\", r.consumeToAny('&', ';'));\n        assertEquals(';', r.consume());\n        assertEquals(\" qux\", r.consumeToAny('&', ';'));\n    }\n\n    @Test public void consumeLetterSequence() {\n        CharacterReader r = new CharacterReader(\"One &bar; qux\");\n        assertEquals(\"One\", r.consumeLetterSequence());\n        assertEquals(\" &\", r.consumeTo(\"bar;\"));\n        assertEquals(\"bar\", r.consumeLetterSequence());\n        assertEquals(\"; qux\", r.consumeToEnd());\n    }\n\n    @Test public void consumeLetterThenDigitSequence() {\n        CharacterReader r = new CharacterReader(\"One12 Two &bar; qux\");\n        assertEquals(\"One12\", r.consumeLetterThenDigitSequence());\n        assertEquals(' ', r.consume());\n        assertEquals(\"Two\", r.consumeLetterThenDigitSequence());\n        assertEquals(\" &bar; qux\", r.consumeToEnd());\n    }\n\n    @Test public void matches() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertTrue(r.matches('O'));\n        assertTrue(r.matches(\"One Two Three\"));\n        assertTrue(r.matches(\"One\"));\n        assertFalse(r.matches(\"one\"));\n        assertEquals('O', r.consume());\n        assertFalse(r.matches(\"One\"));\n        assertTrue(r.matches(\"ne Two Three\"));\n        assertFalse(r.matches(\"ne Two Three Four\"));\n        assertEquals(\"ne Two Three\", r.consumeToEnd());\n        assertFalse(r.matches(\"ne\"));\n        assertTrue(r.isEmpty());\n    }\n\n    @Test\n    public void matchesIgnoreCase() {\n        CharacterReader r = new CharacterReader(\"One Two Three\");\n        assertTrue(r.matchesIgnoreCase(\"O\"));\n        assertTrue(r.matchesIgnoreCase(\"o\"));\n        assertTrue(r.matches('O'));\n        assertFalse(r.matches('o'));\n        assertTrue(r.matchesIgnoreCase(\"One Two Three\"));\n        assertTrue(r.matchesIgnoreCase(\"ONE two THREE\"));\n        assertTrue(r.matchesIgnoreCase(\"One\"));\n        assertTrue(r.matchesIgnoreCase(\"one\"));\n        assertEquals('O', r.consume());\n        assertFalse(r.matchesIgnoreCase(\"One\"));\n        assertTrue(r.matchesIgnoreCase(\"NE Two Three\"));\n        assertFalse(r.matchesIgnoreCase(\"ne Two Three Four\"));\n        assertEquals(\"ne Two Three\", r.consumeToEnd());\n        assertFalse(r.matchesIgnoreCase(\"ne\"));\n    }\n\n    @Test public void containsIgnoreCase() {\n        CharacterReader r = new CharacterReader(\"One TWO three\");\n        assertTrue(r.containsIgnoreCase(\"two\"));\n        assertTrue(r.containsIgnoreCase(\"three\"));\n        // weird one: does not find one, because it scans for consistent case only\n        assertFalse(r.containsIgnoreCase(\"one\"));\n    }\n\n    @Test void containsIgnoreCaseBuffer() {\n        String html = \"<p><p><p></title><p></TITLE><p>\" + BufferBuster(\"Foo Bar Qux \") + \"<foo><bar></title>\";\n        CharacterReader r = new CharacterReader(html);\n\n        assertTrue(r.containsIgnoreCase(\"</title>\"));\n        assertFalse(r.containsIgnoreCase(\"</not>\"));\n        assertFalse(r.containsIgnoreCase(\"</not>\")); // cached, but we only test functionally here\n        assertTrue(r.containsIgnoreCase(\"</title>\"));\n        r.consumeTo(\"</title>\");\n        assertTrue(r.containsIgnoreCase(\"</title>\"));\n        r.consumeTo(\"<p>\");\n        assertTrue(r.matches(\"<p>\"));\n\n        assertTrue(r.containsIgnoreCase(\"</title>\"));\n        assertTrue(r.containsIgnoreCase(\"</title>\"));\n        assertFalse(r.containsIgnoreCase(\"</not>\"));\n        assertFalse(r.containsIgnoreCase(\"</not>\"));\n\n        r.consumeTo(\"</TITLE>\");\n        r.consumeTo(\"<p>\");\n        assertTrue(r.matches(\"<p>\"));\n        assertFalse(r.containsIgnoreCase(\"</title>\")); // because we haven't buffered up yet, we don't know\n        r.consumeTo(\"<foo>\");\n        assertFalse(r.matches(\"<foo>\")); // buffer underrun\n        r.consumeTo(\"<foo>\");\n        assertTrue(r.matches(\"<foo>\")); // cross the buffer\n        assertTrue(r.containsIgnoreCase(\"</TITLE>\"));\n        assertTrue(r.containsIgnoreCase(\"</title>\"));\n    }\n\n    static String BufferBuster(String content) {\n        StringBuilder builder = new StringBuilder();\n        while (builder.length() < maxBufferLen)\n            builder.append(content);\n        return builder.toString();\n    }\n\n    @Test public void matchesAny() {\n        char[] scan = {' ', '\\n', '\\t'};\n        CharacterReader r = new CharacterReader(\"One\\nTwo\\tThree\");\n        assertFalse(r.matchesAny(scan));\n        assertEquals(\"One\", r.consumeToAny(scan));\n        assertTrue(r.matchesAny(scan));\n        assertEquals('\\n', r.consume());\n        assertFalse(r.matchesAny(scan));\n        // nothing to match\n        r.consumeToEnd();\n        assertTrue(r.isEmpty());\n        assertFalse(r.matchesAny(scan));\n    }\n\n    @Test public void matchesDigit() {\n        CharacterReader r = new CharacterReader(\"42\");\n        r.consumeToEnd();\n        assertTrue(r.isEmpty());\n        // nothing to match\n        assertFalse(r.matchesDigit());\n        r.unconsume();\n        assertTrue(r.matchesDigit());\n    }\n\n    @Test public void cachesStrings() {\n        CharacterReader r = new CharacterReader(\"Check\\tCheck\\tCheck\\tCHOKE\\tA string that is longer than 16 chars\");\n        String one = r.consumeTo('\\t');\n        r.consume();\n        String two = r.consumeTo('\\t');\n        r.consume();\n        String three = r.consumeTo('\\t');\n        r.consume();\n        String four = r.consumeTo('\\t');\n        r.consume();\n        String five = r.consumeTo('\\t');\n\n        assertEquals(\"Check\", one);\n        assertEquals(\"Check\", two);\n        assertEquals(\"Check\", three);\n        assertEquals(\"CHOKE\", four);\n        assertSame(one, two);\n        assertSame(two, three);\n        assertNotSame(three, four);\n        assertNotSame(four, five);\n        assertEquals(five, \"A string that is longer than 16 chars\");\n    }\n\n    @Test\n    public void rangeEquals() {\n        CharacterReader r = new CharacterReader(\"Check\\tCheck\\tCheck\\tCHOKE\");\n        assertTrue(r.rangeEquals(0, 5, \"Check\"));\n        assertFalse(r.rangeEquals(0, 5, \"CHOKE\"));\n        assertFalse(r.rangeEquals(0, 5, \"Chec\"));\n\n        assertTrue(r.rangeEquals(6, 5, \"Check\"));\n        assertFalse(r.rangeEquals(6, 5, \"Chuck\"));\n\n        assertTrue(r.rangeEquals(12, 5, \"Check\"));\n        assertFalse(r.rangeEquals(12, 5, \"Cheeky\"));\n\n        assertTrue(r.rangeEquals(18, 5, \"CHOKE\"));\n        assertFalse(r.rangeEquals(18, 5, \"CHIKE\"));\n    }\n\n    @Test\n    public void empty() {\n        CharacterReader r = new CharacterReader(\"One\");\n        assertTrue(r.matchConsume(\"One\"));\n        assertTrue(r.isEmpty());\n\n        r = new CharacterReader(\"Two\");\n        String two = r.consumeToEnd();\n        assertEquals(\"Two\", two);\n    }\n\n    @Test\n    public void consumeToNonexistentEndWhenAtAnd() {\n        CharacterReader r = new CharacterReader(\"<!\");\n        assertTrue(r.matchConsume(\"<!\"));\n        assertTrue(r.isEmpty());\n\n        String after = r.consumeTo('>');\n        assertEquals(\"\", after);\n\n        assertTrue(r.isEmpty());\n    }\n\n    @Test\n    public void notEmptyAtBufferSplitPoint() {\n        int len = CharacterReader.BufferSize * 12;\n        StringBuilder builder = StringUtil.borrowBuilder();\n        while (builder.length() <= len) builder.append('!');\n        CharacterReader r = new CharacterReader(builder.toString());\n        StringUtil.releaseBuilder(builder);\n\n        // consume through\n        for (int pos = 0; pos < len; pos ++) {\n            assertEquals(pos, r.pos());\n            assertFalse(r.isEmpty());\n            assertEquals('!', r.consume());\n            assertEquals(pos + 1, r.pos());\n            assertFalse(r.isEmpty());\n        }\n        assertEquals('!', r.consume());\n        assertTrue(r.isEmpty());\n        assertEquals(CharacterReader.EOF, r.consume());\n    }\n\n    @Test public void bufferUp() {\n        String note = \"HelloThere\"; // + ! = 11 chars\n        int loopCount = 64;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < loopCount; i++) {\n            sb.append(note);\n            sb.append(\"!\");\n        }\n\n        String s = sb.toString();\n        BufferedReader br = new BufferedReader(new StringReader(s));\n\n        CharacterReader r = new CharacterReader(br);\n        for (int i = 0; i < loopCount; i++) {\n            String pull = r.consumeTo('!');\n            assertEquals(note, pull);\n            assertEquals('!', r.current());\n            r.advance();\n        }\n\n        assertTrue(r.isEmpty());\n    }\n\n    @Test public void canEnableAndDisableLineNumberTracking() {\n        CharacterReader reader = new CharacterReader(\"Hello!\");\n        assertFalse(reader.isTrackNewlines());\n        reader.trackNewlines(true);\n        assertTrue(reader.isTrackNewlines());\n        reader.trackNewlines(false);\n        assertFalse(reader.isTrackNewlines());\n    }\n\n    @Test public void canTrackNewlines() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<foo>\\n<bar>\\n<qux>\\n\");\n        while (builder.length() < maxBufferLen)\n            builder.append(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\");\n        builder.append(\"[foo]\\n[bar]\");\n        String content = builder.toString();\n\n        CharacterReader noTrack = new CharacterReader(content);\n        assertFalse(noTrack.isTrackNewlines());\n        CharacterReader track = new CharacterReader(content);\n        track.trackNewlines(true);\n        assertTrue(track.isTrackNewlines());\n\n        // check that no tracking works as expected (pos is 0 indexed, line number stays at 1, col is pos+1)\n        assertEquals(0, noTrack.pos());\n        assertEquals(1, noTrack.lineNumber());\n        assertEquals(1, noTrack.columnNumber());\n        noTrack.consumeTo(\"<qux>\");\n        assertEquals(12, noTrack.pos());\n        assertEquals(1, noTrack.lineNumber());\n        assertEquals(13, noTrack.columnNumber());\n        assertEquals(\"1:13\", noTrack.posLineCol());\n        // get over the buffer\n        while (!noTrack.matches(\"[foo]\"))\n            noTrack.consumeTo(\"[foo]\");\n        assertEquals(2090, noTrack.pos());\n        assertEquals(1, noTrack.lineNumber());\n        assertEquals(noTrack.pos()+1, noTrack.columnNumber());\n        assertEquals(\"1:2091\", noTrack.posLineCol());\n\n        // and the line numbers: \"<foo>\\n<bar>\\n<qux>\\n\"\n        assertEquals(0, track.pos());\n        assertEquals(1, track.lineNumber());\n        assertEquals(1, track.columnNumber());\n\n        track.consumeTo('\\n');\n        assertEquals(1, track.lineNumber());\n        assertEquals(6, track.columnNumber());\n        track.consume();\n        assertEquals(2, track.lineNumber());\n        assertEquals(1, track.columnNumber());\n\n        assertEquals(\"<bar>\", track.consumeTo('\\n'));\n        assertEquals(2, track.lineNumber());\n        assertEquals(6, track.columnNumber());\n\n        assertEquals(\"\\n\", track.consumeTo(\"<qux>\"));\n        assertEquals(12, track.pos());\n        assertEquals(3, track.lineNumber());\n        assertEquals(1, track.columnNumber());\n        assertEquals(\"3:1\", track.posLineCol());\n        assertEquals(\"<qux>\", track.consumeTo('\\n'));\n        assertEquals(\"3:6\", track.posLineCol());\n        // get over the buffer\n        while (!track.matches(\"[foo]\"))\n            track.consumeTo(\"[foo]\");\n        assertEquals(2090, track.pos());\n        assertEquals(4, track.lineNumber());\n        assertEquals(2073, track.columnNumber());\n        assertEquals(\"4:2073\", track.posLineCol());\n        track.consumeTo('\\n');\n        assertEquals(\"4:2078\", track.posLineCol());\n\n        track.consumeTo(\"[bar]\");\n        assertEquals(5, track.lineNumber());\n        assertEquals(\"5:1\", track.posLineCol());\n        track.consumeToEnd();\n        assertEquals(\"5:6\", track.posLineCol());\n    }\n\n    @Test public void countsColumnsOverBufferWhenNoNewlines() {\n        StringBuilder builder = new StringBuilder();\n        while (builder.length() < maxBufferLen * 4)\n            builder.append(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\");\n        String content = builder.toString();\n        CharacterReader reader = new CharacterReader(content);\n        reader.trackNewlines(true);\n\n        assertEquals(\"1:1\", reader.posLineCol());\n        StringBuilder seen = new StringBuilder();\n        while (!reader.isEmpty())\n            seen.append(reader.consume());\n        assertEquals(content, seen.toString());\n        assertEquals(content.length(), reader.pos());\n        assertEquals(reader.pos() + 1, reader.columnNumber());\n        assertEquals(1, reader.lineNumber());\n    }\n\n    @Test public void linenumbersAgreeWithEditor() throws IOException {\n        String content = ParseTest.getFileAsString(ParseTest.getFile(\"/htmltests/large.html\"));\n        CharacterReader reader = new CharacterReader(content);\n        reader.trackNewlines(true);\n\n        String scan = \"<p>VESTIBULUM\"; // near the end of the file\n        while (!reader.matches(scan))\n            reader.consumeTo(scan);\n\n        assertEquals(280218, reader.pos());\n        assertEquals(1002, reader.lineNumber());\n        assertEquals(1, reader.columnNumber());\n        reader.consumeTo(' ');\n        assertEquals(1002, reader.lineNumber());\n        assertEquals(14, reader.columnNumber());\n    }\n\n    @Test public void consumeDoubleQuotedAttributeConsumesThruSingleQuote() {\n        String html = \"He'llo\\\" >\";\n        CharacterReader r = new CharacterReader(html);\n        assertEquals(\"He'llo\", r.consumeAttributeQuoted(false));\n        assertEquals('\"', r.consume());\n    }\n\n    @Test public void consumeSingleQuotedAttributeConsumesThruDoubleQuote() {\n        String html = \"He\\\"llo' >\";\n        CharacterReader r = new CharacterReader(html);\n        assertEquals(\"He\\\"llo\", r.consumeAttributeQuoted(true));\n        assertEquals('\\'', r.consume());\n    }\n\n    @Test public void consumeDoubleQuotedAttributeConsumesThruSingleQuoteToAmp() {\n        String html = \"He'llo &copy;\\\" >\";\n        CharacterReader r = new CharacterReader(html);\n        assertEquals(\"He'llo \", r.consumeAttributeQuoted(false));\n        assertEquals('&', r.consume());\n    }\n\n    @Test public void consumeSingleQuotedAttributeConsumesThruDoubleQuoteToAmp() {\n        String html = \"He\\\"llo &copy;' >\";\n        CharacterReader r = new CharacterReader(html);\n        assertEquals(\"He\\\"llo \", r.consumeAttributeQuoted(true));\n        assertEquals('&', r.consume());\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public final static int maxBufferLen = CharacterReader.BufferSize;", "docstring": "", "modifiers": "public final static", "marker_annotations": [], "non_marker_annotations": ["public", "final", "static"], "comments": [], "type": "int", "name": "maxBufferLen = CharacterReader.BufferSize", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/parser/TokeniserTest.java.TokeniserTest", "name": "TokeniserTest", "file_path": "src/test/java/org/jsoup/parser/TokeniserTest.java", "superclasses": "", "methods": ["[void]bufferUpInAttributeVal()", "[void]handleSuperLargeTagNames()", "[void]handleSuperLargeAttributeName()", "[void]handleLargeText()", "[void]handleLargeComment()", "[void]handleLargeCdata()", "[void]handleLargeTitle()", "[void]cp1252Entities()", "[void]cp1252EntitiesProduceError()", "[void]cp1252SubstitutionTable()", "[void]canParseVeryLongBogusComment()", "[void]canParseCdataEndingAtEdgeOfBuffer()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TokeniserTest {\n    @Test\n    public void bufferUpInAttributeVal() {\n        // https://github.com/jhy/jsoup/issues/967\n\n        // check each double, singlem, unquoted impls\n        String[] quotes = {\"\\\"\", \"'\", \"\"};\n        for (String quote : quotes) {\n            String preamble = \"<img src=\" + quote;\n            String tail = \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\";\n            StringBuilder sb = new StringBuilder(preamble);\n\n            final int charsToFillBuffer = BufferSize - preamble.length();\n            for (int i = 0; i < charsToFillBuffer; i++) {\n                sb.append('a');\n            }\n\n            sb.append('X'); // First character to cross character buffer boundary\n            sb.append(tail).append(quote).append(\">\\n\");\n\n            String html = sb.toString();\n            Document doc = Jsoup.parse(html);\n            String src = doc.select(\"img\").attr(\"src\");\n\n            assertTrue(src.contains(\"X\"), \"Handles for quote \" + quote);\n            assertTrue(src.contains(tail));\n        }\n    }\n\n    @Test public void handleSuperLargeTagNames() {\n        // unlikely, but valid. so who knows.\n\n        StringBuilder sb = new StringBuilder(BufferSize);\n        do {\n            sb.append(\"LargeTagName\");\n        } while (sb.length() < BufferSize);\n        String tag = sb.toString();\n        String html = \"<\" + tag + \">One</\" + tag + \">\";\n\n        Document doc = Parser.htmlParser().settings(ParseSettings.preserveCase).parseInput(html, \"\");\n        Elements els = doc.select(tag);\n        assertEquals(1, els.size());\n        Element el = els.first();\n        assertNotNull(el);\n        assertEquals(\"One\", el.text());\n        assertEquals(tag, el.tagName());\n    }\n\n    @Test public void handleSuperLargeAttributeName() {\n        StringBuilder sb = new StringBuilder(BufferSize);\n        do {\n            sb.append(\"LargAttributeName\");\n        } while (sb.length() < BufferSize);\n        String attrName = sb.toString();\n        String html = \"<p \" + attrName + \"=foo>One</p>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.getElementsByAttribute(attrName);\n        assertEquals(1, els.size());\n        Element el = els.first();\n        assertNotNull(el);\n        assertEquals(\"One\", el.text());\n        Attribute attribute = el.attributes().asList().get(0);\n        assertEquals(attrName.toLowerCase(), attribute.getKey());\n        assertEquals(\"foo\", attribute.getValue());\n    }\n\n    @Test public void handleLargeText() {\n        StringBuilder sb = new StringBuilder(BufferSize);\n        do {\n            sb.append(\"A Large Amount of Text\");\n        } while (sb.length() < BufferSize);\n        String text = sb.toString();\n        String html = \"<p>\" + text + \"</p>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"p\");\n        assertEquals(1, els.size());\n        Element el = els.first();\n\n        assertNotNull(el);\n        assertEquals(text, el.text());\n    }\n\n    @Test public void handleLargeComment() {\n        StringBuilder sb = new StringBuilder(BufferSize);\n        do {\n            sb.append(\"Quite a comment \");\n        } while (sb.length() < BufferSize);\n        String comment = sb.toString();\n        String html = \"<p><!-- \" + comment + \" --></p>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"p\");\n        assertEquals(1, els.size());\n        Element el = els.first();\n\n        assertNotNull(el);\n        Comment child = (Comment) el.childNode(0);\n        assertEquals(\" \" + comment + \" \", child.getData());\n    }\n\n    @Test public void handleLargeCdata() {\n        StringBuilder sb = new StringBuilder(BufferSize);\n        do {\n            sb.append(\"Quite a lot of CDATA <><><><>\");\n        } while (sb.length() < BufferSize);\n        String cdata = sb.toString();\n        String html = \"<p><![CDATA[\" + cdata + \"]]></p>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"p\");\n        assertEquals(1, els.size());\n        Element el = els.first();\n\n        assertNotNull(el);\n        TextNode child = (TextNode) el.childNode(0);\n        assertEquals(cdata, el.text());\n        assertEquals(cdata, child.getWholeText());\n    }\n\n    @Test public void handleLargeTitle() {\n        StringBuilder sb = new StringBuilder(BufferSize);\n        do {\n            sb.append(\"Quite a long title\");\n        } while (sb.length() < BufferSize);\n        String title = sb.toString();\n        String html = \"<title>\" + title + \"</title>\";\n\n        Document doc = Jsoup.parse(html);\n        Elements els = doc.select(\"title\");\n        assertEquals(1, els.size());\n        Element el = els.first();\n\n        assertNotNull(el);\n        TextNode child = (TextNode) el.childNode(0);\n        assertEquals(title, el.text());\n        assertEquals(title, child.getWholeText());\n        assertEquals(title, doc.title());\n    }\n\n    @Test public void cp1252Entities() {\n        assertEquals(\"\\u20ac\", Jsoup.parse(\"&#0128;\").text());\n        assertEquals(\"\\u201a\", Jsoup.parse(\"&#0130;\").text());\n        assertEquals(\"\\u20ac\", Jsoup.parse(\"&#x80;\").text());\n    }\n\n    @Test public void cp1252EntitiesProduceError() {\n        Parser parser = new Parser(new HtmlTreeBuilder());\n        parser.setTrackErrors(10);\n        assertEquals(\"\\u20ac\", parser.parseInput(\"<html><body>&#0128;</body></html>\", \"\").text());\n        assertEquals(1, parser.getErrors().size());\n    }\n\n    @Test public void cp1252SubstitutionTable() {\n        for (int i = 0; i < Tokeniser.win1252Extensions.length; i++) {\n            String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, Charset.forName(\"Windows-1252\"));\n            assertEquals(1, s.length());\n\n            // some of these characters are illegal\n            if (s.charAt(0) == '\\ufffd') { continue; }\n\n            assertEquals(s.charAt(0), Tokeniser.win1252Extensions[i], \"At: \" + i);\n        }\n    }\n\n    @Test public void canParseVeryLongBogusComment() {\n        StringBuilder commentData = new StringBuilder(BufferSize);\n        do {\n            commentData.append(\"blah blah blah blah \");\n        } while (commentData.length() < BufferSize);\n        String expectedCommentData = commentData.toString();\n        String testMarkup = \"<html><body><!\" + expectedCommentData + \"></body></html>\";\n        Parser parser = new Parser(new HtmlTreeBuilder());\n\n        Document doc = parser.parseInput(testMarkup, \"\");\n\n        Node commentNode = doc.body().childNode(0);\n        assertTrue(commentNode instanceof Comment, \"Expected comment node\");\n        assertEquals(expectedCommentData, ((Comment)commentNode).getData());\n    }\n\n    @Test public void canParseCdataEndingAtEdgeOfBuffer() {\n        String cdataStart = \"<![CDATA[\";\n        String cdataEnd = \"]]>\";\n        int bufLen = BufferSize - cdataStart.length() - 1;    // also breaks with -2, but not with -3 or 0\n        char[] cdataContentsArray = new char[bufLen];\n        Arrays.fill(cdataContentsArray, 'x');\n        String cdataContents = new String(cdataContentsArray);\n        String testMarkup = cdataStart + cdataContents + cdataEnd;\n        Parser parser = new Parser(new HtmlTreeBuilder());\n\n        Document doc = parser.parseInput(testMarkup, \"\");\n\n        Node cdataNode = doc.body().childNode(0);\n        assertTrue(cdataNode instanceof CDataNode, \"Expected CDATA node\");\n        assertEquals(cdataContents, ((CDataNode)cdataNode).text());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/HtmlTreeBuilderTest.java.HtmlTreeBuilderTest", "name": "HtmlTreeBuilderTest", "file_path": "src/test/java/org/jsoup/parser/HtmlTreeBuilderTest.java", "superclasses": "", "methods": ["[void]ensureSearchArraysAreSorted()", "[void]nonnull()", "[void]nonnullAssertions()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HtmlTreeBuilderTest {\n    @Test\n    public void ensureSearchArraysAreSorted() {\n        List<Object[]> constants = HtmlTreeBuilderStateTest.findConstantArrays(HtmlTreeBuilder.class);\n        HtmlTreeBuilderStateTest.ensureSorted(constants);\n        assertEquals(10, constants.size());\n    }\n\n    @Test\n    public void nonnull() {\n        assertThrows(IllegalArgumentException.class, () -> {\n                HtmlTreeBuilder treeBuilder = new HtmlTreeBuilder();\n                treeBuilder.parse(null, null, null); // not sure how to test that these visual warnings actually appear! - test below checks for method annotation\n            }\n        ); // I'm not convinced that this lambda is easier to read than the old Junit 4 @Test(expected=IEA.class)...\n    }\n\n    @Test public void nonnullAssertions() throws NoSuchMethodException {\n        Annotation[] declaredAnnotations = TreeBuilder.class.getPackage().getDeclaredAnnotations();\n        boolean seen = false;\n        for (Annotation annotation : declaredAnnotations) {\n            if (annotation.annotationType().isAssignableFrom(NullMarked.class))\n                seen = true;\n        }\n\n        // would need to rework this if/when that annotation moves from the method to the class / package.\n        assertTrue(seen);\n\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/HtmlParserTest.java.HtmlParserTest", "name": "HtmlParserTest", "file_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java", "superclasses": "", "methods": ["[void]parsesSimpleDocument()", "[void]parsesRoughAttributes()", "[void]dropsDuplicateAttributes(String,String)", "[void]retainsAttributesOfDifferentCaseIfSensitive()", "[void]parsesQuiteRoughAttributes()", "[void]parsesComments()", "[void]parsesUnterminatedComments()", "[void]allDashCommentsAreNotParseErrors()", "[void]dropsUnterminatedTag()", "[void]dropsUnterminatedAttribute()", "[void]parsesUnterminatedTextarea()", "[void]parsesUnterminatedOption()", "[void]testSelectWithOption()", "[void]testSpaceAfterTag()", "[void]createsDocumentStructure()", "[void]createsStructureFromBodySnippet()", "[void]handlesEscapedData()", "[void]handlesDataOnlyTags()", "[void]handlesTextAfterData()", "[void]handlesTextArea()", "[void]preservesSpaceInTextArea()", "[void]preservesSpaceInScript()", "[void]doesNotCreateImplicitLists()", "[void]discardsNakedTds()", "[void]handlesNestedImplicitTable()", "[void]handlesWhatWgExpensesTableExample()", "[void]handlesTbodyTable()", "[void]handlesImplicitCaptionClose()", "[void]noTableDirectInTable()", "[void]ignoresDupeEndTrTag()", "[void]handlesBaseTags()", "[void]handlesProtocolRelativeUrl()", "[void]handlesCdata()", "[void]roundTripsCdata()", "[void]handlesCdataAcrossBuffer()", "[void]handlesCdataInScript()", "[void]handlesUnclosedCdataAtEOF()", "[void]handleCDataInText()", "[void]cdataNodesAreTextNodes()", "[void]handlesInvalidStartTags()", "[void]handlesUnknownTags()", "[void]handlesUnknownInlineTags()", "[void]parsesBodyFragment()", "[void]parseBodyIsIndexNoAttributes()", "[void]handlesUnknownNamespaceTags()", "[void]handlesKnownEmptyBlocks()", "[void]handlesKnownEmptyNoFrames()", "[void]handlesKnownEmptyStyle()", "[void]handlesKnownEmptyTitle()", "[void]handlesKnownEmptyIframe()", "[void]handlesSolidusAtAttributeEnd()", "[void]handlesMultiClosingBody()", "[void]handlesUnclosedDefinitionLists()", "[void]handlesBlocksInDefinitions()", "[void]handlesFrames()", "[void]ignoresContentAfterFrameset()", "[void]handlesJavadocFont()", "[void]handlesBaseWithoutHref()", "[void]normalisesDocument()", "[void]normalisesEmptyDocument()", "[void]normalisesHeadlessBody()", "[void]normalisedBodyAfterContent()", "[void]findsCharsetInMalformedMeta()", "[void]testHgroup()", "[void]testRelaxedTags()", "[void]testHeaderContents()", "[void]testSpanContents()", "[void]testNoImagesInNoScriptInHead()", "[void]testUnclosedNoscriptInHead()", "[void]testAFlowContents()", "[void]testFontFlowContents()", "[void]handlesMisnestedTagsBI()", "[void]handlesMisnestedTagsBP()", "[void]handlesMisnestedAInDivs()", "[void]handlesUnexpectedMarkupInTables()", "[void]handlesUnclosedFormattingElements()", "[void]handlesUnclosedAnchors()", "[void]reconstructFormattingElements()", "[void]reconstructFormattingElementsInTable()", "[void]commentBeforeHtml()", "[void]emptyTdTag()", "[void]handlesSolidusInA()", "[void]handlesSpanInTbody()", "[void]handlesUnclosedTitleAtEof()", "[void]handlesUnclosedTitle()", "[void]handlesUnclosedScriptAtEof()", "[void]handlesUnclosedRawtextAtEof()", "[void]noImplicitFormForTextAreas()", "[void]handlesEscapedScript()", "[void]handles0CharacterAsText()", "[void]handlesNullInData()", "[void]handlesNullInComments()", "[void]handlesNewlinesAndWhitespaceInTag()", "[void]handlesWhitespaceInoDocType()", "[void]tracksErrorsWhenRequested()", "[void]tracksLimitedErrorsWhenRequested()", "[void]noErrorsByDefault()", "[void]optionalPClosersAreNotErrors()", "[void]handlesCommentsInTable()", "[void]handlesQuotesInCommentsInScripts()", "[void]handleNullContextInParseFragment()", "[void]doesNotFindShortestMatchingEntity()", "[void]relaxedBaseEntityMatchAndStrictExtendedMatch()", "[void]handlesXmlDeclarationAsBogusComment()", "[void]handlesTagsInTextarea()", "[void]createsFormElements()", "[void]associatedFormControlsWithDisjointForms()", "[void]handlesInputInTable()", "[void]convertsImageToImg()", "[void]handlesInvalidDoctypes()", "[void]handlesManyChildren()", "[void]testInvalidTableContents()", "[void]testNormalisesIsIndex()", "[void]testReinsertionModeForThCelss()", "[void]testUsingSingleQuotesInQueries()", "[void]testSupportsNonAsciiTags()", "[void]testSupportsPartiallyNonAsciiTags()", "[void]testFragment()", "[void]testHtmlLowerCase()", "[void]testHtmlLowerCaseAttributesOfVoidTags()", "[void]testHtmlLowerCaseAttributesForm()", "[void]canPreserveTagCase()", "[void]canPreserveAttributeCase()", "[void]canPreserveBothCase()", "[void]handlesControlCodeInAttributeName()", "[void]caseSensitiveParseTree()", "[void]caseInsensitiveParseTree()", "[void]preservedCaseLinksCantNest()", "[void]normalizesDiscordantTags()", "[void]selfClosingVoidIsNotAnError()", "[void]selfClosingOnNonvoidIsError()", "[void]testTemplateInsideTable()", "[void]testHandlesDeepSpans()", "[void]commentAtEnd()", "[void]preSkipsFirstNewline()", "[void]handlesXmlDeclAndCommentsBeforeDoctype()", "[void]fallbackToUtfIfCantEncode()", "[void]characterReaderBuffer()", "[void]selfClosingTextAreaDoesntLeaveDroppings()", "[void]testNoSpuriousSpace()", "[void]pTagsGetIndented()", "[void]indentRegardlessOfCase()", "[void]testH20()", "[void]testUNewlines()", "[void]testFarsi()", "[void]testStartOptGroup()", "[void]readerClosedAfterParse()", "[void]scriptInDataNode()", "[void]textareaValue()", "[void]preserveWhitespaceInHead()", "[void]handleContentAfterBody()", "[void]preservesTabs()", "[void]wholeTextTreatsBRasNewline()", "[void]canDetectAutomaticallyAddedElements()", "[void]canSetHtmlOnCreatedTableElements()", "[void]parseFragmentOnCreatedDocument()", "[void]nestedPFragments()", "[void]nestedAnchorAdoption()", "[void]tagsMustStartWithAscii()", "[void]htmlOutputCorrectsInvalidAttributeNames()", "[void]templateInHead()", "[void]nestedTemplateInBody()", "[void]canSelectIntoTemplate()", "[void]tableRowFragment()", "[void]templateTableRowFragment()", "[void]templateNotInTableRowFragment()", "[void]templateFragment()", "[void]templateInferredForm()", "[void]trimNormalizeElementNamesInBuilder()", "[void]errorsBeforeHtml()", "[void]afterHeadReAdds()", "[void]mergeHtmlAttributesFromBody()", "[void]mergeHtmlNoAttributesFromBody()", "[void]supportsRuby()", "[void]rubyRpRtImplicitClose()", "[void]rubyScopeError()", "[void]errorOnEofIfOpen()", "[void]NoErrorOnEofIfBodyOpen()", "[void]htmlClose()", "[void]largeTextareaContents()", "[void]svgParseTest()", "[void]mathParseText()", "[void]mathSvgStyleTest()", "[void]xmlnsAttributeError()", "[void]mathAnnotationSvg()", "[void]mathHtmlIntegrationPoint()", "[void]parseEmojiFromMultipointEncoded()", "[void]tableInPInQuirksMode()"], "method_uris": ["src/test/java/org/jsoup/parser/HtmlParserTest.java.HtmlParserTest.[Stream<Arguments>]dupeAttributeData()", "src/test/java/org/jsoup/parser/HtmlParserTest.java.HtmlParserTest.[boolean]didAddElements(String)", "src/test/java/org/jsoup/parser/HtmlParserTest.java.HtmlParserTest.[void]assertHtmlNamespace(Element)", "src/test/java/org/jsoup/parser/HtmlParserTest.java.HtmlParserTest.[void]assertSvgNamespace(Element)", "src/test/java/org/jsoup/parser/HtmlParserTest.java.HtmlParserTest.[void]assertMathNamespace(Element)"], "overrides": null, "attributes": [], "class_docstring": "\nTests for the Parser\n\n@author Jonathan Hedley, jonathan@hedley.net\n", "original_string": "public class HtmlParserTest {\n\n    @Test public void parsesSimpleDocument() {\n        String html = \"<html><head><title>First!</title></head><body><p>First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n        Document doc = Jsoup.parse(html);\n        // need a better way to verify these:\n        Element p = doc.body().child(0);\n        assertEquals(\"p\", p.tagName());\n        Element img = p.child(0);\n        assertEquals(\"foo.png\", img.attr(\"src\"));\n        assertEquals(\"img\", img.tagName());\n    }\n\n    @Test public void parsesRoughAttributes() {\n        String html = \"<html><head><title>First!</title></head><body><p class=\\\"foo > bar\\\">First post! <img src=\\\"foo.png\\\" /></p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        // need a better way to verify these:\n        Element p = doc.body().child(0);\n        assertEquals(\"p\", p.tagName());\n        assertEquals(\"foo > bar\", p.attr(\"class\"));\n    }\n\n    @ParameterizedTest @MethodSource(\"dupeAttributeData\")\n    public void dropsDuplicateAttributes(String html, String expected) {\n        Parser parser = Parser.htmlParser().setTrackErrors(10);\n        Document doc = parser.parseInput(html, \"\");\n\n        Element el = doc.expectFirst(\"body > *\");\n        assertEquals(expected, el.outerHtml()); // normalized names due to lower casing\n        String tag = el.normalName();\n\n        assertEquals(1, parser.getErrors().size());\n        assertEquals(\"Dropped duplicate attribute(s) in tag [\" + tag + \"]\", parser.getErrors().get(0).getErrorMessage());\n    }\n\n    private static Stream<Arguments> dupeAttributeData() {\n        return Stream.of(\n            Arguments.of(\"<p One=One ONE=Two Two=two one=Three One=Four two=Five>Text</p>\", \"<p one=\\\"One\\\" two=\\\"two\\\">Text</p>\"),\n            Arguments.of(\"<img One=One ONE=Two Two=two one=Three One=Four two=Five>\", \"<img one=\\\"One\\\" two=\\\"two\\\">\"),\n            Arguments.of(\"<form One=One ONE=Two Two=two one=Three One=Four two=Five></form>\", \"<form one=\\\"One\\\" two=\\\"two\\\"></form>\")\n        );\n    }\n\n    @Test public void retainsAttributesOfDifferentCaseIfSensitive() {\n        String html = \"<p One=One One=Two one=Three two=Four two=Five Two=Six>Text</p>\";\n        Parser parser = Parser.htmlParser().settings(preserveCase);\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<p One=\\\"One\\\" one=\\\"Three\\\" two=\\\"Four\\\" Two=\\\"Six\\\">Text</p>\", doc.selectFirst(\"p\").outerHtml());\n    }\n\n    @Test public void parsesQuiteRoughAttributes() {\n        String html = \"<p =a>One<a <p>Something</p>Else\";\n        // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribute named '<p'; and then auto-recreated\n        Document doc = Jsoup.parse(html);\n\n        // NOTE: per spec this should be the test case. but impacts too many ppl\n        // assertEquals(\"<p =a>One<a <p>Something</a></p>\\n<a <p>Else</a>\", doc.body().html());\n\n        assertEquals(\"<p _a>One<a></a></p><p><a>Something</a></p><a>Else</a>\", TextUtil.stripNewlines(doc.body().html()));\n\n        doc = Jsoup.parse(\"<p .....>\");\n        assertEquals(\"<p .....></p>\", doc.body().html());\n    }\n\n    @Test public void parsesComments() {\n        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        Element body = doc.body();\n        Comment comment = (Comment) body.childNode(1); // comment should not be sub of img, as it's an empty tag\n        assertEquals(\" <table><tr><td></table> \", comment.getData());\n        Element p = body.child(1);\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n    }\n\n    @Test public void parsesUnterminatedComments() {\n        String html = \"<p>Hello<!-- <tr><td>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.getElementsByTag(\"p\").get(0);\n        assertEquals(\"Hello\", p.text());\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n        Comment comment = (Comment) p.childNode(1);\n        assertEquals(\" <tr><td>\", comment.getData());\n    }\n\n    @Test void allDashCommentsAreNotParseErrors() {\n        // https://github.com/jhy/jsoup/issues/1667\n        // <!-----> is not a parse error\n        String html = \"<!------>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        Comment comment = (Comment) doc.childNode(0);\n        assertEquals(\"--\", comment.getData());\n        assertEquals(0, parser.getErrors().size());\n    }\n\n    @Test public void dropsUnterminatedTag() {\n        // jsoup used to parse this to <p>, but whatwg, webkit will drop.\n        String h1 = \"<p\";\n        Document doc = Jsoup.parse(h1);\n        assertEquals(0, doc.getElementsByTag(\"p\").size());\n        assertEquals(\"\", doc.text());\n\n        String h2 = \"<div id=1<p id='2'\";\n        doc = Jsoup.parse(h2);\n        assertEquals(\"\", doc.text());\n    }\n\n    @Test public void dropsUnterminatedAttribute() {\n        // jsoup used to parse this to <p id=\"foo\">, but whatwg, webkit will drop.\n        String h1 = \"<p id=\\\"foo\";\n        Document doc = Jsoup.parse(h1);\n        assertEquals(\"\", doc.text());\n    }\n\n    @Test public void parsesUnterminatedTextarea() {\n        // don't parse right to end, but break on <p>\n        Document doc = Jsoup.parse(\"<body><p><textarea>one<p>two\");\n        Element t = doc.select(\"textarea\").first();\n        assertEquals(\"one\", t.text());\n        assertEquals(\"two\", doc.select(\"p\").get(1).text());\n    }\n\n    @Test public void parsesUnterminatedOption() {\n        // bit weird this -- browsers and spec get stuck in select until there's a </select>\n        Document doc = Jsoup.parse(\"<body><p><select><option>One<option>Two</p><p>Three</p>\");\n        Elements options = doc.select(\"option\");\n        assertEquals(2, options.size());\n        assertEquals(\"One\", options.first().text());\n        assertEquals(\"TwoThree\", options.last().text());\n    }\n\n    @Test public void testSelectWithOption() {\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document document = parser.parseInput(\"<select><option>Option 1</option></select>\", \"http://jsoup.org\");\n        assertEquals(0, parser.getErrors().size());\n    }\n\n    @Test public void testSpaceAfterTag() {\n        Document doc = Jsoup.parse(\"<div > <a name=\\\"top\\\"></a ><p id=1 >Hello</p></div>\");\n        assertEquals(\"<div><a name=\\\"top\\\"></a><p id=\\\"1\\\">Hello</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void createsDocumentStructure() {\n        String html = \"<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>\";\n        Document doc = Jsoup.parse(html);\n        Element head = doc.head();\n        Element body = doc.body();\n\n        assertEquals(1, doc.children().size()); // root node: contains html node\n        assertEquals(2, doc.child(0).children().size()); // html node: head and body\n        assertEquals(3, head.children().size());\n        assertEquals(1, body.children().size());\n\n        assertEquals(\"keywords\", head.getElementsByTag(\"meta\").get(0).attr(\"name\"));\n        assertEquals(0, body.getElementsByTag(\"meta\").size());\n        assertEquals(\"jsoup\", doc.title());\n        assertEquals(\"Hello world\", body.text());\n        assertEquals(\"Hello world\", body.children().get(0).text());\n    }\n\n    @Test public void createsStructureFromBodySnippet() {\n        // the bar baz stuff naturally goes into the body, but the 'foo' goes into root, and the normalisation routine\n        // needs to move into the start of the body\n        String html = \"foo <b>bar</b> baz\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"foo bar baz\", doc.text());\n    }\n\n    @Test public void handlesEscapedData() {\n        String html = \"<div title='Surf &amp; Turf'>Reef &amp; Beef</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.getElementsByTag(\"div\").get(0);\n\n        assertEquals(\"Surf & Turf\", div.attr(\"title\"));\n        assertEquals(\"Reef & Beef\", div.text());\n    }\n\n    @Test public void handlesDataOnlyTags() {\n        String t = \"<style>font-family: bold</style>\";\n        List<Element> tels = Jsoup.parse(t).getElementsByTag(\"style\");\n        assertEquals(\"font-family: bold\", tels.get(0).data());\n        assertEquals(\"\", tels.get(0).text());\n\n        String s = \"<p>Hello</p><script>obj.insert('<a rel=\\\"none\\\" />');\\ni++;</script><p>There</p>\";\n        Document doc = Jsoup.parse(s);\n        assertEquals(\"Hello There\", doc.text());\n        assertEquals(\"obj.insert('<a rel=\\\"none\\\" />');\\ni++;\", doc.data());\n    }\n\n    @Test public void handlesTextAfterData() {\n        String h = \"<html><body>pre <script>inner</script> aft</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head></head><body>pre <script>inner</script> aft</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void handlesTextArea() {\n        Document doc = Jsoup.parse(\"<textarea>Hello</textarea>\");\n        Elements els = doc.select(\"textarea\");\n        assertEquals(\"Hello\", els.text());\n        assertEquals(\"Hello\", els.val());\n    }\n\n    @Test public void preservesSpaceInTextArea() {\n        // preserve because the tag is marked as preserve white space\n        Document doc = Jsoup.parse(\"<textarea>\\n\\tOne\\n\\tTwo\\n\\tThree\\n</textarea>\");\n        String expect = \"One\\n\\tTwo\\n\\tThree\"; // the leading and trailing spaces are dropped as a convenience to authors\n        Element el = doc.select(\"textarea\").first();\n        assertEquals(expect, el.text());\n        assertEquals(expect, el.val());\n        assertEquals(expect, el.html());\n        assertEquals(\"<textarea>\\n\\t\" + expect + \"\\n</textarea>\", el.outerHtml()); // but preserved in round-trip html\n    }\n\n    @Test public void preservesSpaceInScript() {\n        // preserve because it's content is a data node\n        Document doc = Jsoup.parse(\"<script>\\nOne\\n\\tTwo\\n\\tThree\\n</script>\");\n        String expect = \"\\nOne\\n\\tTwo\\n\\tThree\\n\";\n        Element el = doc.select(\"script\").first();\n        assertEquals(expect, el.data());\n        assertEquals(\"One\\n\\tTwo\\n\\tThree\", el.html());\n        assertEquals(\"<script>\" + expect + \"</script>\", el.outerHtml());\n    }\n\n    @Test public void doesNotCreateImplicitLists() {\n        // old jsoup used to wrap this in <ul>, but that's not to spec\n        String h = \"<li>Point one<li>Point two\";\n        Document doc = Jsoup.parse(h);\n        Elements ol = doc.select(\"ul\"); // should NOT have created a default ul.\n        assertEquals(0, ol.size());\n        Elements lis = doc.select(\"li\");\n        assertEquals(2, lis.size());\n        assertEquals(\"body\", lis.first().parent().tagName());\n\n        // no fiddling with non-implicit lists\n        String h2 = \"<ol><li><p>Point the first<li><p>Point the second\";\n        Document doc2 = Jsoup.parse(h2);\n\n        assertEquals(0, doc2.select(\"ul\").size());\n        assertEquals(1, doc2.select(\"ol\").size());\n        assertEquals(2, doc2.select(\"ol li\").size());\n        assertEquals(2, doc2.select(\"ol li p\").size());\n        assertEquals(1, doc2.select(\"ol li\").get(0).children().size()); // one p in first li\n    }\n\n    @Test public void discardsNakedTds() {\n        // jsoup used to make this into an implicit table; but browsers make it into a text run\n        String h = \"<td>Hello<td><p>There<p>now\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello<p>There</p><p>now</p>\", TextUtil.stripNewlines(doc.body().html()));\n        // <tbody> is introduced if no implicitly creating table, but allows tr to be directly under table\n    }\n\n    @Test public void handlesNestedImplicitTable() {\n        Document doc = Jsoup.parse(\"<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>\");\n        assertEquals(\"<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td><table><tbody><tr><td>3</td><td>4</td></tr></tbody></table></td></tr><tr><td>5</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesWhatWgExpensesTableExample() {\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n        Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n        assertEquals(\"<table><colgroup><col></colgroup><colgroup><col><col><col></colgroup><thead><tr><th></th><th>2008</th><th>2007</th><th>2006</th></tr></thead><tbody><tr><th scope=\\\"rowgroup\\\">Research and development</th><td>$ 1,109</td><td>$ 782</td><td>$ 712</td></tr><tr><th scope=\\\"row\\\">Percentage of net sales</th><td>3.4%</td><td>3.3%</td><td>3.7%</td></tr></tbody><tbody><tr><th scope=\\\"rowgroup\\\">Selling, general, and administrative</th><td>$ 3,761</td><td>$ 2,963</td><td>$ 2,433</td></tr><tr><th scope=\\\"row\\\">Percentage of net sales</th><td>11.6%</td><td>12.3%</td><td>12.6%</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesTbodyTable() {\n        Document doc = Jsoup.parse(\"<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>\");\n        assertEquals(\"<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesImplicitCaptionClose() {\n        Document doc = Jsoup.parse(\"<table><caption>A caption<td>One<td>Two\");\n        assertEquals(\"<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void noTableDirectInTable() {\n        Document doc = Jsoup.parse(\"<table> <td>One <td><table><td>Two</table> <table><td>Three\");\n        assertEquals(\"<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table><table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>\",\n            TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void ignoresDupeEndTrTag() {\n        Document doc = Jsoup.parse(\"<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>\"); // two </tr></tr>, must ignore or will close table\n        assertEquals(\"<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>\",\n            TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesBaseTags() {\n        // only listen to the first base href\n        String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>\";\n        Document doc = Jsoup.parse(h, \"http://foo/\");\n        assertEquals(\"http://foo/2/\", doc.baseUri()); // gets set once, so doc and descendants have first only\n\n        Elements anchors = doc.getElementsByTag(\"a\");\n        assertEquals(3, anchors.size());\n\n        assertEquals(\"http://foo/2/\", anchors.get(0).baseUri());\n        assertEquals(\"http://foo/2/\", anchors.get(1).baseUri());\n        assertEquals(\"http://foo/2/\", anchors.get(2).baseUri());\n\n        assertEquals(\"http://foo/2/1\", anchors.get(0).absUrl(\"href\"));\n        assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n        assertEquals(\"http://foo/4\", anchors.get(2).absUrl(\"href\"));\n    }\n\n    @Test public void handlesProtocolRelativeUrl() {\n        String base = \"https://example.com/\";\n        String html = \"<img src='//example.net/img.jpg'>\";\n        Document doc = Jsoup.parse(html, base);\n        Element el = doc.select(\"img\").first();\n        assertEquals(\"https://example.net/img.jpg\", el.absUrl(\"src\"));\n    }\n\n    @Test public void handlesCdata() {\n        // todo: as this is html namespace, should actually treat as bogus comment, not cdata. keep as cdata for now\n        String h = \"<div id=1><![CDATA[<html>\\n <foo><&amp;]]></div>\"; // the &amp; in there should remain literal\n        Document doc = Jsoup.parse(h);\n        Element div = doc.getElementById(\"1\");\n        assertEquals(\"<html>\\n <foo><&amp;\", div.text());\n        assertEquals(0, div.children().size());\n        assertEquals(1, div.childNodeSize()); // no elements, one text node\n    }\n\n    @Test public void roundTripsCdata() {\n        String h = \"<div id=1><![CDATA[\\n<html>\\n <foo><&amp;]]></div>\";\n        Document doc = Jsoup.parse(h);\n        Element div = doc.getElementById(\"1\");\n        assertEquals(\"<html>\\n <foo><&amp;\", div.text());\n        assertEquals(0, div.children().size());\n        assertEquals(1, div.childNodeSize()); // no elements, one text node\n\n        assertEquals(\"<div id=\\\"1\\\"><![CDATA[\\n<html>\\n <foo><&amp;]]>\\n</div>\", div.outerHtml());\n\n        CDataNode cdata = (CDataNode) div.textNodes().get(0);\n        assertEquals(\"\\n<html>\\n <foo><&amp;\", cdata.text());\n    }\n\n    @Test public void handlesCdataAcrossBuffer() {\n        StringBuilder sb = new StringBuilder();\n        while (sb.length() <= CharacterReader.BufferSize) {\n            sb.append(\"A suitable amount of CData.\\n\");\n        }\n        String cdata = sb.toString();\n        String h = \"<div><![CDATA[\" + cdata + \"]]></div>\";\n        Document doc = Jsoup.parse(h);\n        Element div = doc.selectFirst(\"div\");\n\n        CDataNode node = (CDataNode) div.textNodes().get(0);\n        assertEquals(cdata, node.text());\n    }\n\n    @Test public void handlesCdataInScript() {\n        String html = \"<script type=\\\"text/javascript\\\">//<![CDATA[\\n\\n  foo();\\n//]]></script>\";\n        Document doc = Jsoup.parse(html);\n\n        String data = \"//<![CDATA[\\n\\n  foo();\\n//]]>\";\n        Element script = doc.selectFirst(\"script\");\n        assertEquals(\"\", script.text()); // won't be parsed as cdata because in script data section\n        assertEquals(data, script.data());\n        assertEquals(html, script.outerHtml());\n\n        DataNode dataNode = (DataNode) script.childNode(0);\n        assertEquals(data, dataNode.getWholeData());\n        // see - not a cdata node, because in script. contrast with XmlTreeBuilder - will be cdata.\n    }\n\n    @Test public void handlesUnclosedCdataAtEOF() {\n        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF\n        String h = \"<![CDATA[]]\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(1, doc.body().childNodeSize());\n    }\n\n    @Test public void handleCDataInText() {\n        String h = \"<p>One <![CDATA[Two <&]]> Three</p>\";\n        Document doc = Jsoup.parse(h);\n        Element p = doc.selectFirst(\"p\");\n\n        List<Node> nodes = p.childNodes();\n        assertEquals(\"One \", ((TextNode) nodes.get(0)).getWholeText());\n        assertEquals(\"Two <&\", ((TextNode) nodes.get(1)).getWholeText());\n        assertEquals(\"Two <&\", ((CDataNode) nodes.get(1)).getWholeText());\n        assertEquals(\" Three\", ((TextNode) nodes.get(2)).getWholeText());\n\n        assertEquals(h, p.outerHtml());\n    }\n\n    @Test public void cdataNodesAreTextNodes() {\n        String h = \"<p>One <![CDATA[ Two <& ]]> Three</p>\";\n        Document doc = Jsoup.parse(h);\n        Element p = doc.selectFirst(\"p\");\n\n        List<TextNode> nodes = p.textNodes();\n        assertEquals(\"One \", nodes.get(0).text());\n        assertEquals(\" Two <& \", nodes.get(1).text());\n        assertEquals(\" Three\", nodes.get(2).text());\n    }\n\n    @Test public void handlesInvalidStartTags() {\n        String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello < There <&>\", doc.select(\"div\").first().text());\n    }\n\n    @Test public void handlesUnknownTags() {\n        String h = \"<div><foo title=bar>Hello<foo title=qux>there</foo></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements foos = doc.select(\"foo\");\n        assertEquals(2, foos.size());\n        assertEquals(\"bar\", foos.first().attr(\"title\"));\n        assertEquals(\"qux\", foos.last().attr(\"title\"));\n        assertEquals(\"there\", foos.last().text());\n    }\n\n    @Test public void handlesUnknownInlineTags() {\n        String h = \"<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>\";\n        Document doc = Jsoup.parseBodyFragment(h);\n        String out = doc.body().html();\n        assertEquals(h, TextUtil.stripNewlines(out));\n    }\n\n    @Test public void parsesBodyFragment() {\n        String h = \"<!-- comment --><p><a href='foo'>One</a></p>\";\n        Document doc = Jsoup.parseBodyFragment(h, \"http://example.com\");\n        assertEquals(\"<body><!-- comment --><p><a href=\\\"foo\\\">One</a></p></body>\", TextUtil.stripNewlines(doc.body().outerHtml()));\n        assertEquals(\"http://example.com/foo\", doc.select(\"a\").first().absUrl(\"href\"));\n    }\n\n    @Test public void parseBodyIsIndexNoAttributes() {\n        // https://github.com/jhy/jsoup/issues/1404\n        String expectedHtml = \"<form>\\n\" +\n            \" <hr><label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label>\\n\" +\n            \" <hr>\\n\" +\n            \"</form>\";\n        Document doc = Jsoup.parse(\"<isindex>\");\n        assertEquals(expectedHtml, doc.body().html());\n\n        doc = Jsoup.parseBodyFragment(\"<isindex>\");\n        assertEquals(expectedHtml, doc.body().html());\n\n        doc = Jsoup.parseBodyFragment(\"<table><input></table>\");\n        assertEquals(\"<input>\\n<table></table>\", doc.body().html());\n    }\n\n    @Test public void handlesUnknownNamespaceTags() {\n        // note that the first foo:bar should not really be allowed to be self closing, if parsed in html mode.\n        String h = \"<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<foo:bar id=\\\"1\\\" /><abc:def id=\\\"2\\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesKnownEmptyBlocks() {\n        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n        String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img><img></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo><hr> hr text <hr> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesKnownEmptyNoFrames() {\n        String h = \"<html><head><noframes /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><noframes></noframes><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void handlesKnownEmptyStyle() {\n        String h = \"<html><head><style /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><style></style><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void handlesKnownEmptyTitle() {\n        String h = \"<html><head><title /><meta name=foo></head><body>One</body></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><title></title><meta name=\\\"foo\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void handlesKnownEmptyIframe() {\n        String h = \"<p>One</p><iframe id=1 /><p>Two\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head></head><body><p>One</p><iframe id=\\\"1\\\"></iframe><p>Two</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void handlesSolidusAtAttributeEnd() {\n        // this test makes sure [<a href=/>link</a>] is parsed as [<a href=\"/\">link</a>], not [<a href=\"\" /><a>link</a>]\n        String h = \"<a href=/>link</a>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<a href=\\\"/\\\">link</a>\", doc.body().html());\n    }\n\n    @Test public void handlesMultiClosingBody() {\n        String h = \"<body><p>Hello</body><p>there</p></body></body></html><p>now\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(3, doc.select(\"p\").size());\n        assertEquals(3, doc.body().children().size());\n    }\n\n    @Test public void handlesUnclosedDefinitionLists() {\n        // jsoup used to create a <dl>, but that's not to spec\n        String h = \"<dt>Foo<dd>Bar<dt>Qux<dd>Zug\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(0, doc.select(\"dl\").size()); // no auto dl\n        assertEquals(4, doc.select(\"dt, dd\").size());\n        Elements dts = doc.select(\"dt\");\n        assertEquals(2, dts.size());\n        assertEquals(\"Zug\", dts.get(1).nextElementSibling().text());\n    }\n\n    @Test public void handlesBlocksInDefinitions() {\n        // per the spec, dt and dd are inline, but in practise are block\n        String h = \"<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"dt\", doc.select(\"#1\").first().parent().tagName());\n        assertEquals(\"dd\", doc.select(\"#2\").first().parent().tagName());\n        assertEquals(\"<dl><dt><div id=\\\"1\\\">Term</div></dt><dd><div id=\\\"2\\\">Def</div></dd></dl>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesFrames() {\n        String h = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\"><frame src=\\\"foo\\\"></frameset></html>\",\n            TextUtil.stripNewlines(doc.html()));\n        // no body auto vivification\n    }\n\n    @Test public void ignoresContentAfterFrameset() {\n        String h = \"<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<html><head><title>One</title></head><frameset><frame><frame></frameset></html>\", TextUtil.stripNewlines(doc.html()));\n        // no body, no table. No crash!\n    }\n\n    @Test public void handlesJavadocFont() {\n        String h = \"<TD BGCOLOR=\\\"#EEEEFF\\\" CLASS=\\\"NavBarCell1\\\">    <A HREF=\\\"deprecated-list.html\\\"><FONT CLASS=\\\"NavBarFont1\\\"><B>Deprecated</B></FONT></A>&nbsp;</TD>\";\n        Document doc = Jsoup.parse(h);\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"Deprecated\", a.text());\n        assertEquals(\"font\", a.child(0).tagName());\n        assertEquals(\"b\", a.child(0).child(0).tagName());\n    }\n\n    @Test public void handlesBaseWithoutHref() {\n        String h = \"<head><base target='_blank'></head><body><a href=/foo>Test</a></body>\";\n        Document doc = Jsoup.parse(h, \"http://example.com/\");\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"/foo\", a.attr(\"href\"));\n        assertEquals(\"http://example.com/foo\", a.attr(\"abs:href\"));\n    }\n\n    @Test public void normalisesDocument() {\n        String h = \"<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven \";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven</body></html>\",\n            TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void normalisesEmptyDocument() {\n        Document doc = Jsoup.parse(\"\");\n        assertEquals(\"<html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void normalisesHeadlessBody() {\n        Document doc = Jsoup.parse(\"<html><body><span class=\\\"foo\\\">bar</span>\");\n        assertEquals(\"<html><head></head><body><span class=\\\"foo\\\">bar</span></body></html>\",\n            TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void normalisedBodyAfterContent() {\n        Document doc = Jsoup.parse(\"<font face=Arial><body class=name><div>One</div></body></font>\");\n        assertEquals(\"<html><head></head><body class=\\\"name\\\"><font face=\\\"Arial\\\"><div>One</div></font></body></html>\",\n            TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void findsCharsetInMalformedMeta() {\n        String h = \"<meta http-equiv=Content-Type content=text/html; charset=gb2312>\";\n        // example cited for reason of html5's <meta charset> element\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"gb2312\", doc.select(\"meta\").attr(\"charset\"));\n    }\n\n    @Test public void testHgroup() {\n        // jsoup used to not allow hgroup in h{n}, but that's not in spec, and browsers are OK\n        Document doc = Jsoup.parse(\"<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>\");\n        assertEquals(\"<h1>Hello</h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup><hgroup><h1>More</h1><p>stuff</p></hgroup></h2>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void testRelaxedTags() {\n        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>\");\n        assertEquals(\"<abc_def id=\\\"1\\\">Hello</abc_def> <abc-def>There</abc-def>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void testHeaderContents() {\n        // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any\n        // spec, which defines them as containing phrasing content only. so, reality over theory.\n        Document doc = Jsoup.parse(\"<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>\");\n        assertEquals(\"<h1>Hello <div>There</div> now</h1><h2>More</h2><h3>Content</h3>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void testSpanContents() {\n        // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag\n        Document doc = Jsoup.parse(\"<span>Hello <div>there</div> <span>now</span></span>\");\n        assertEquals(\"<span>Hello <div>there</div><span>now</span></span>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void testNoImagesInNoScriptInHead() {\n        // jsoup used to allow, but against spec if parsing with noscript\n        Document doc = Jsoup.parse(\"<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>\");\n        assertEquals(\"<html><head><noscript>&lt;img src=\\\"foo\\\"&gt;</noscript></head><body><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void testUnclosedNoscriptInHead() {\n        // Was getting \"EOF\" in html output, because the #anythingElse handler was calling an undefined toString, so used object.toString.\n        String[] strings = {\"<noscript>\", \"<noscript>One\"};\n        for (String html : strings) {\n            Document doc = Jsoup.parse(html);\n            assertEquals(html + \"</noscript>\", TextUtil.stripNewlines(doc.head().html()));\n        }\n    }\n\n    @Test public void testAFlowContents() {\n        // html5 has <a> as either phrasing or block\n        Document doc = Jsoup.parse(\"<a>Hello <div>there</div> <span>now</span></a>\");\n        assertEquals(\"<a>Hello <div>there</div><span>now</span></a>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void testFontFlowContents() {\n        // html5 has no definition of <font>; often used as flow\n        Document doc = Jsoup.parse(\"<font>Hello <div>there</div> <span>now</span></font>\");\n        assertEquals(\"<font>Hello <div>there</div><span>now</span></font>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesMisnestedTagsBI() {\n        // whatwg: <b><i></b></i>\n        String h = \"<p>1<b>2<i>3</b>4</i>5</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<p>1<b>2<i>3</i></b><i>4</i>5</p>\", doc.body().html());\n        // adoption agency on </b>, reconstruction of formatters on 4.\n    }\n\n    @Test public void handlesMisnestedTagsBP() {\n        //  whatwg: <b><p></b></p>\n        String h = \"<b>1<p>2</b>3</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<b>1</b>\\n<p><b>2</b>3</p>\", doc.body().html());\n    }\n\n    @Test public void handlesMisnestedAInDivs() {\n        String h = \"<a href='#1'><div><div><a href='#2'>child</a></div</div></a>\";\n        String w = \"<a href=\\\"#1\\\"></a> <div> <a href=\\\"#1\\\"></a> <div> <a href=\\\"#1\\\"></a><a href=\\\"#2\\\">child</a> </div> </div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\n            StringUtil.normaliseWhitespace(w),\n            StringUtil.normaliseWhitespace(doc.body().html()));\n    }\n\n    @Test public void handlesUnexpectedMarkupInTables() {\n        // whatwg - tests markers in active formatting (if they didn't work, would get in table)\n        // also tests foster parenting\n        String h = \"<table><b><tr><td>aaa</td></tr>bbb</table>ccc\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesUnclosedFormattingElements() {\n        // whatwg: formatting elements get collected and applied, but excess elements are thrown away\n        String h = \"<!DOCTYPE html>\\n\" +\n            \"<p><b class=x><b class=x><b><b class=x><b class=x><b>X\\n\" +\n            \"<p>X\\n\" +\n            \"<p><b><b class=x><b>X\\n\" +\n            \"<p></b></b></b></b></b></b>X\";\n        Document doc = Jsoup.parse(h);\n        doc.outputSettings().indentAmount(0);\n        String want = \"<!doctype html>\\n\" +\n            \"<html>\\n\" +\n            \"<head></head>\\n\" +\n            \"<body>\\n\" +\n            \"<p><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></p>\\n\" +\n            \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b>X </b></b></b></b></b></p>\\n\" +\n            \"<p><b class=\\\"x\\\"><b><b class=\\\"x\\\"><b class=\\\"x\\\"><b><b><b class=\\\"x\\\"><b>X </b></b></b></b></b></b></b></b></p>\\n\" +\n            \"<p>X</p>\\n\" +\n            \"</body>\\n\" +\n            \"</html>\";\n        assertEquals(want, doc.html());\n    }\n\n    @Test public void handlesUnclosedAnchors() {\n        String h = \"<a href='http://example.com/'>Link<p>Error link</a>\";\n        Document doc = Jsoup.parse(h);\n        String want = \"<a href=\\\"http://example.com/\\\">Link</a>\\n<p><a href=\\\"http://example.com/\\\">Error link</a></p>\";\n        assertEquals(want, doc.body().html());\n    }\n\n    @Test public void reconstructFormattingElements() {\n        // tests attributes and multi b\n        String h = \"<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<p><b class=\\\"one\\\">One <i>Two <b>Three</b></i></b></p>\\n<p><b class=\\\"one\\\"><i><b>Hello</b></i></b></p>\", doc.body().html());\n    }\n\n    @Test public void reconstructFormattingElementsInTable() {\n        // tests that tables get formatting markers -- the <b> applies outside the table and does not leak in,\n        // and the <i> inside the table and does not leak out.\n        String h = \"<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>\";\n        Document doc = Jsoup.parse(h);\n        String want = \"<p><b>One</b></p><b><table><tbody><tr><td><p><i>Three</i></p><p><i>Four</i></p></td></tr></tbody></table><p>Five</p></b>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void commentBeforeHtml() {\n        String h = \"<!-- comment --><!-- comment 2 --><p>One</p>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void emptyTdTag() {\n        String h = \"<table><tr><td>One</td><td id='2' /></tr></table>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<td>One</td>\\n<td id=\\\"2\\\"></td>\", doc.select(\"tr\").first().html());\n    }\n\n    @Test public void handlesSolidusInA() {\n        // test for bug #66\n        String h = \"<a class=lp href=/lib/14160711/>link text</a>\";\n        Document doc = Jsoup.parse(h);\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"link text\", a.text());\n        assertEquals(\"/lib/14160711/\", a.attr(\"href\"));\n    }\n\n    @Test public void handlesSpanInTbody() {\n        // test for bug 64\n        String h = \"<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(doc.select(\"span\").first().children().size(), 0); // the span gets closed\n        assertEquals(doc.select(\"table\").size(), 1); // only one table\n    }\n\n    @Test public void handlesUnclosedTitleAtEof() {\n        assertEquals(\"Data\", Jsoup.parse(\"<title>Data\").title());\n        assertEquals(\"Data<\", Jsoup.parse(\"<title>Data<\").title());\n        assertEquals(\"Data</\", Jsoup.parse(\"<title>Data</\").title());\n        assertEquals(\"Data</t\", Jsoup.parse(\"<title>Data</t\").title());\n        assertEquals(\"Data</ti\", Jsoup.parse(\"<title>Data</ti\").title());\n        assertEquals(\"Data\", Jsoup.parse(\"<title>Data</title>\").title());\n        assertEquals(\"Data\", Jsoup.parse(\"<title>Data</title >\").title());\n    }\n\n    @Test public void handlesUnclosedTitle() {\n        Document one = Jsoup.parse(\"<title>One <b>Two <b>Three</TITLE><p>Test</p>\"); // has title, so <b> is plain text\n        assertEquals(\"One <b>Two <b>Three\", one.title());\n        assertEquals(\"Test\", one.select(\"p\").first().text());\n\n        Document two = Jsoup.parse(\"<title>One<b>Two <p>Test</p>\"); // no title, so <b> causes </title> breakout\n        assertEquals(\"One\", two.title());\n        assertEquals(\"<b>Two \\n <p>Test</p></b>\", two.body().html());\n    }\n\n    @Test public void handlesUnclosedScriptAtEof() {\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data\").select(\"script\").first().data());\n        assertEquals(\"Data<\", Jsoup.parse(\"<script>Data<\").select(\"script\").first().data());\n        assertEquals(\"Data</sc\", Jsoup.parse(\"<script>Data</sc\").select(\"script\").first().data());\n        assertEquals(\"Data</-sc\", Jsoup.parse(\"<script>Data</-sc\").select(\"script\").first().data());\n        assertEquals(\"Data</sc-\", Jsoup.parse(\"<script>Data</sc-\").select(\"script\").first().data());\n        assertEquals(\"Data</sc--\", Jsoup.parse(\"<script>Data</sc--\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script>\").select(\"script\").first().data());\n        assertEquals(\"Data</script\", Jsoup.parse(\"<script>Data</script\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script \").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\\\"\").select(\"script\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script n=\\\"p\").select(\"script\").first().data());\n    }\n\n    @Test public void handlesUnclosedRawtextAtEof() {\n        assertEquals(\"Data\", Jsoup.parse(\"<style>Data\").select(\"style\").first().data());\n        assertEquals(\"Data</st\", Jsoup.parse(\"<style>Data</st\").select(\"style\").first().data());\n        assertEquals(\"Data\", Jsoup.parse(\"<style>Data</style>\").select(\"style\").first().data());\n        assertEquals(\"Data</style\", Jsoup.parse(\"<style>Data</style\").select(\"style\").first().data());\n        assertEquals(\"Data</-style\", Jsoup.parse(\"<style>Data</-style\").select(\"style\").first().data());\n        assertEquals(\"Data</style-\", Jsoup.parse(\"<style>Data</style-\").select(\"style\").first().data());\n        assertEquals(\"Data</style--\", Jsoup.parse(\"<style>Data</style--\").select(\"style\").first().data());\n    }\n\n    @Test public void noImplicitFormForTextAreas() {\n        // old jsoup parser would create implicit forms for form children like <textarea>, but no more\n        Document doc = Jsoup.parse(\"<textarea>One</textarea>\");\n        assertEquals(\"<textarea>One</textarea>\", doc.body().html());\n    }\n\n    @Test public void handlesEscapedScript() {\n        Document doc = Jsoup.parse(\"<script><!-- one <script>Blah</script> --></script>\");\n        assertEquals(\"<!-- one <script>Blah</script> -->\", doc.select(\"script\").first().data());\n    }\n\n    @Test public void handles0CharacterAsText() {\n        Document doc = Jsoup.parse(\"0<p>0</p>\");\n        assertEquals(\"0\\n<p>0</p>\", doc.body().html());\n    }\n\n    @Test public void handlesNullInData() {\n        Document doc = Jsoup.parse(\"<p id=\\u0000>Blah \\u0000</p>\");\n        assertEquals(\"<p id=\\\"\\uFFFD\\\">Blah &#x0;</p>\", doc.body().html()); // replaced in attr, NOT replaced in data (but is escaped as control char <0x20)\n    }\n\n    @Test public void handlesNullInComments() {\n        Document doc = Jsoup.parse(\"<body><!-- \\u0000 \\u0000 -->\");\n        assertEquals(\"<!-- \\uFFFD \\uFFFD -->\", doc.body().html());\n    }\n\n    @Test public void handlesNewlinesAndWhitespaceInTag() {\n        Document doc = Jsoup.parse(\"<a \\n href=\\\"one\\\" \\r\\n id=\\\"two\\\" \\f >\");\n        assertEquals(\"<a href=\\\"one\\\" id=\\\"two\\\"></a>\", doc.body().html());\n    }\n\n    @Test public void handlesWhitespaceInoDocType() {\n        String html = \"<!DOCTYPE html\\r\\n\" +\n            \"      PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\r\\n\" +\n            \"      \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\", doc.childNode(0).outerHtml());\n    }\n\n    @Test public void tracksErrorsWhenRequested() {\n        String html = \"<p>One</p href='no'>\\n<!DOCTYPE html>\\n&arrgh;<font />&#33 &amp &#x110000;<br /></div><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n\n        List<ParseError> errors = parser.getErrors();\n        assertEquals(9, errors.size());\n        assertEquals(\"<1:21>: Attributes incorrectly present on end tag [/p]\", errors.get(0).toString());\n        assertEquals(\"<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]\", errors.get(1).toString());\n        assertEquals(\"<3:2>: Invalid character reference: invalid named reference [arrgh]\", errors.get(2).toString());\n        assertEquals(\"<3:16>: Tag [font] cannot be self closing; not a void tag\", errors.get(3).toString());\n        assertEquals(\"<3:20>: Invalid character reference: missing semicolon on [&#33]\", errors.get(4).toString());\n        assertEquals(\"<3:25>: Invalid character reference: missing semicolon on [&amp]\", errors.get(5).toString());\n        assertEquals(\"<3:36>: Invalid character reference: character [1114112] outside of valid range\", errors.get(6).toString());\n        assertEquals(\"<3:48>: Unexpected EndTag token [</div>] when in state [InBody]\", errors.get(7).toString());\n        assertEquals(\"<3:53>: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(8).toString());\n    }\n\n    @Test public void tracksLimitedErrorsWhenRequested() {\n        String html = \"<p>One</p href='no'>\\n<!DOCTYPE html>\\n&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(3);\n        Document doc = parser.parseInput(html, \"http://example.com\");\n\n        List<ParseError> errors = parser.getErrors();\n        assertEquals(3, errors.size());\n        assertEquals(\"<1:21>: Attributes incorrectly present on end tag [/p]\", errors.get(0).toString());\n        assertEquals(\"<2:16>: Unexpected Doctype token [<!doctype html>] when in state [InBody]\", errors.get(1).toString());\n        assertEquals(\"<3:2>: Invalid character reference: invalid named reference [arrgh]\", errors.get(2).toString());\n    }\n\n    @Test public void noErrorsByDefault() {\n        String html = \"<p>One</p href='no'>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser();\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n\n        List<ParseError> errors = parser.getErrors();\n        assertEquals(0, errors.size());\n    }\n\n    @Test public void optionalPClosersAreNotErrors() {\n        String html = \"<body><div><p>One<p>Two</div></body>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(128);\n        Document doc = Jsoup.parse(html, \"\", parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(0, errors.size());\n    }\n\n    @Test public void handlesCommentsInTable() {\n        String html = \"<table><tr><td>text</td><!-- Comment --></tr></table>\";\n        Document node = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>\", TextUtil.stripNewlines(node.outerHtml()));\n    }\n\n    @Test public void handlesQuotesInCommentsInScripts() {\n        String html = \"<script>\\n\" +\n            \"  <!--\\n\" +\n            \"    document.write('</scr' + 'ipt>');\\n\" +\n            \"  // -->\\n\" +\n            \"</script>\";\n        Document node = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<script>\\n\" +\n            \"  <!--\\n\" +\n            \"    document.write('</scr' + 'ipt>');\\n\" +\n            \"  // -->\\n\" +\n            \"</script>\", node.body().html());\n    }\n\n    @Test public void handleNullContextInParseFragment() {\n        String html = \"<ol><li>One</li></ol><p>Two</p>\";\n        List<Node> nodes = Parser.parseFragment(html, null, \"http://example.com/\");\n        assertEquals(1, nodes.size()); // returns <html> node (not document) -- no context means doc gets created\n        assertEquals(\"html\", nodes.get(0).nodeName());\n        assertEquals(\"<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>\", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));\n    }\n\n    @Test public void doesNotFindShortestMatchingEntity() {\n        // previous behaviour was to identify a possible entity, then chomp down the string until a match was found.\n        // (as defined in html5.) However in practise that lead to spurious matches against the author's intent.\n        String html = \"One &clubsuite; &clubsuit;\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(StringUtil.normaliseWhitespace(\"One &amp;clubsuite; \u2663\"), doc.body().html());\n    }\n\n    @Test public void relaxedBaseEntityMatchAndStrictExtendedMatch() {\n        // extended entities need a ; at the end to match, base does not\n        String html = \"&amp &quot &reg &icy &hopf &icy; &hopf;\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended).charset(\"ascii\"); // modifies output only to clarify test\n        assertEquals(\"&amp; \\\" &reg; &amp;icy &amp;hopf &icy; &hopf;\", doc.body().html());\n    }\n\n    @Test public void handlesXmlDeclarationAsBogusComment() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }\n\n    @Test public void handlesTagsInTextarea() {\n        String html = \"<textarea><p>Jsoup</p></textarea>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>\", doc.body().html());\n    }\n\n    // form tests\n    @Test public void createsFormElements() {\n        String html = \"<body><form><input id=1><input id=2></form></body>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.select(\"form\").first();\n\n        assertTrue(el instanceof FormElement, \"Is form element\");\n        FormElement form = (FormElement) el;\n        Elements controls = form.elements();\n        assertEquals(2, controls.size());\n        assertEquals(\"1\", controls.get(0).id());\n        assertEquals(\"2\", controls.get(1).id());\n    }\n\n    @Test public void associatedFormControlsWithDisjointForms() {\n        // form gets closed, isn't parent of controls\n        String html = \"<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.select(\"form\").first();\n\n        assertTrue(el instanceof FormElement, \"Is form element\");\n        FormElement form = (FormElement) el;\n        Elements controls = form.elements();\n        assertEquals(2, controls.size());\n        assertEquals(\"1\", controls.get(0).id());\n        assertEquals(\"2\", controls.get(1).id());\n\n        assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\"><td><input type=\\\"text\\\" id=\\\"2\\\"></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void handlesInputInTable() {\n        String h = \"<body>\\n\" +\n            \"<input type=\\\"hidden\\\" name=\\\"a\\\" value=\\\"\\\">\\n\" +\n            \"<table>\\n\" +\n            \"<input type=\\\"hidden\\\" name=\\\"b\\\" value=\\\"\\\" />\\n\" +\n            \"</table>\\n\" +\n            \"</body>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(1, doc.select(\"table input\").size());\n        assertEquals(2, doc.select(\"input\").size());\n    }\n\n    @Test public void convertsImageToImg() {\n        // image to img, unless in a svg. old html cruft.\n        String h = \"<body><image><svg><image /></svg></body>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n    }\n\n    @Test public void handlesInvalidDoctypes() {\n        // would previously throw invalid name exception on empty doctype\n        Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n        assertEquals(\n            \"<!doctype> <html> <head></head> <body></body> </html>\",\n            StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n        assertEquals(\n            \"<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n            StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n        assertEquals(\n            \"<!doctype \ufffd> <html> <head></head> <body></body> </html>\",\n            StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }\n\n    @Test public void handlesManyChildren() {\n        // Arrange\n        StringBuilder longBody = new StringBuilder(500000);\n        for (int i = 0; i < 25000; i++) {\n            longBody.append(i).append(\"<br>\");\n        }\n\n        // Act\n        long start = System.currentTimeMillis();\n        Document doc = Parser.parseBodyFragment(longBody.toString(), \"\");\n\n        // Assert\n        assertEquals(50000, doc.body().childNodeSize());\n        assertTrue(System.currentTimeMillis() - start < 1000);\n    }\n\n    @Test\n    public void testInvalidTableContents() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n        String rendered = doc.toString();\n        int endOfEmail = rendered.indexOf(\"Comment\");\n        int guarantee = rendered.indexOf(\"Why am I here?\");\n        assertTrue(endOfEmail > -1, \"Comment not found\");\n        assertTrue(guarantee > -1, \"Search text not found\");\n        assertTrue(guarantee > endOfEmail, \"Search text did not come after comment\");\n    }\n\n    @Test public void testNormalisesIsIndex() {\n        Document doc = Jsoup.parse(\"<body><isindex action='/submit'></body>\");\n        String html = doc.outerHtml();\n        assertEquals(\"<form action=\\\"/submit\\\"> <hr><label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label> <hr> </form>\",\n            StringUtil.normaliseWhitespace(doc.body().html()));\n    }\n\n    @Test public void testReinsertionModeForThCelss() {\n        String body = \"<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>\";\n        Document doc = Jsoup.parse(body);\n        assertEquals(1, doc.body().children().size());\n    }\n\n    @Test public void testUsingSingleQuotesInQueries() {\n        String body = \"<body> <div class='main'>hello</div></body>\";\n        Document doc = Jsoup.parse(body);\n        Elements main = doc.select(\"div[class='main']\");\n        assertEquals(\"hello\", main.text());\n    }\n\n    @Test public void testSupportsNonAsciiTags() {\n        String body = \"<a\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5>Yes</a\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5><b\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u0442\u044d\u0433>Correct</<b\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u0442\u044d\u0433>\";\n        Document doc = Jsoup.parse(body);\n        Elements els = doc.select(\"a\u9032\u6357\u63a8\u79fb\u30b0\u30e9\u30d5\");\n        assertEquals(\"Yes\", els.text());\n        els = doc.select(\"b\u0440\u0443\u0441\u0441\u043a\u0438\u0439-\u0442\u044d\u0433\");\n        assertEquals(\"Correct\", els.text());\n    }\n\n    @Test public void testSupportsPartiallyNonAsciiTags() {\n        String body = \"<div>Check</div\u00e1>\";\n        Document doc = Jsoup.parse(body);\n        Elements els = doc.select(\"div\");\n        assertEquals(\"Check\", els.text());\n    }\n\n    @Test public void testFragment() {\n        // make sure when parsing a body fragment, a script tag at start goes into the body\n        String html =\n            \"<script type=\\\"text/javascript\\\">console.log('foo');</script>\\n\" +\n                \"<div id=\\\"somecontent\\\">some content</div>\\n\" +\n                \"<script type=\\\"text/javascript\\\">console.log('bar');</script>\";\n\n        Document body = Jsoup.parseBodyFragment(html);\n        assertEquals(\"<script type=\\\"text/javascript\\\">console.log('foo');</script>\\n\" +\n            \"<div id=\\\"somecontent\\\">\\n\" +\n            \" some content\\n\" +\n            \"</div>\\n\" +\n            \"<script type=\\\"text/javascript\\\">console.log('bar');</script>\", body.body().html());\n    }\n\n    @Test public void testHtmlLowerCase() {\n        String html = \"<!doctype HTML><DIV ID=1>One</DIV>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!doctype html> <html> <head></head> <body> <div id=\\\"1\\\"> One </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        Element div = doc.selectFirst(\"#1\");\n        div.after(\"<TaG>One</TaG>\");\n        assertEquals(\"<tag>One</tag>\", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));\n    }\n\n    @Test public void testHtmlLowerCaseAttributesOfVoidTags() {\n        String html = \"<!doctype HTML><IMG ALT=One></DIV>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<!doctype html> <html> <head></head> <body> <img alt=\\\"One\\\"> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n    }\n\n    @Test public void testHtmlLowerCaseAttributesForm() {\n        String html = \"<form NAME=one>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<form name=\\\"one\\\"></form>\", StringUtil.normaliseWhitespace(doc.body().html()));\n    }\n\n    @Test public void canPreserveTagCase() {\n        Parser parser = Parser.htmlParser();\n        parser.settings(new ParseSettings(true, false));\n        Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n        assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <SPAN id=\\\"2\\\"></SPAN> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        Element div = doc.selectFirst(\"#1\");\n        div.after(\"<TaG ID=one>One</TaG>\");\n        assertEquals(\"<TaG id=\\\"one\\\">One</TaG>\", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));\n    }\n\n    @Test public void canPreserveAttributeCase() {\n        Parser parser = Parser.htmlParser();\n        parser.settings(new ParseSettings(false, true));\n        Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n        assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <span ID=\\\"2\\\"></span> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        Element div = doc.selectFirst(\"#1\");\n        div.after(\"<TaG ID=one>One</TaG>\");\n        assertEquals(\"<tag ID=\\\"one\\\">One</tag>\", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));\n    }\n\n    @Test public void canPreserveBothCase() {\n        Parser parser = Parser.htmlParser();\n        parser.settings(new ParseSettings(true, true));\n        Document doc = parser.parseInput(\"<div id=1><SPAN ID=2>\", \"\");\n        assertEquals(\"<html> <head></head> <body> <div id=\\\"1\\\"> <SPAN ID=\\\"2\\\"></SPAN> </div> </body> </html>\", StringUtil.normaliseWhitespace(doc.outerHtml()));\n\n        Element div = doc.selectFirst(\"#1\");\n        div.after(\"<TaG ID=one>One</TaG>\");\n        assertEquals(\"<TaG ID=\\\"one\\\">One</TaG>\", TextUtil.stripNewlines(div.nextElementSibling().outerHtml()));\n    }\n\n    @Test public void handlesControlCodeInAttributeName() {\n        Document doc = Jsoup.parse(\"<p><a \\06=foo>One</a><a/\\06=bar><a foo\\06=bar>Two</a></p>\");\n        assertEquals(\"<p><a>One</a><a></a><a foo=\\\"bar\\\">Two</a></p>\", doc.body().html());\n    }\n\n    @Test public void caseSensitiveParseTree() {\n        String html = \"<r><X>A</X><y>B</y></r>\";\n        Parser parser = Parser.htmlParser();\n        parser.settings(preserveCase);\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<r> <X> A </X> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n    }\n\n    @Test public void caseInsensitiveParseTree() {\n        String html = \"<r><X>A</X><y>B</y></r>\";\n        Parser parser = Parser.htmlParser();\n        Document doc = parser.parseInput(html, \"\");\n        assertEquals(\"<r> <x> A </x> <y> B </y> </r>\", StringUtil.normaliseWhitespace(doc.body().html()));\n    }\n\n    @Test public void preservedCaseLinksCantNest() {\n        String html = \"<A>ONE <A>Two</A></A>\";\n        Document doc = Parser.htmlParser()\n            .settings(preserveCase)\n            .parseInput(html, \"\");\n        //assertEquals(\"<A>ONE </A><A>Two</A>\", StringUtil.normaliseWhitespace(doc.body().html()));\n        assertEquals(\"<A>ONE </A><A>Two</A>\", doc.body().html());\n    }\n\n    @Test public void normalizesDiscordantTags() {\n        Document document = Jsoup.parse(\"<div>test</DIV><p></p>\");\n        assertEquals(\"<div>\\n test\\n</div>\\n<p></p>\", document.body().html());\n    }\n\n    @Test public void selfClosingVoidIsNotAnError() {\n        String html = \"<p>test<br/>test<br/></p>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(0, parser.getErrors().size());\n\n        assertTrue(Jsoup.isValid(html, Safelist.basic()));\n        String clean = Jsoup.clean(html, Safelist.basic());\n        assertEquals(\"<p>test<br>\\n test<br></p>\", clean);\n    }\n\n    @Test public void selfClosingOnNonvoidIsError() {\n        String html = \"<p>test</p>\\n\\n<div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(1, parser.getErrors().size());\n        assertEquals(\"<3:8>: Tag [div] cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());\n\n        assertFalse(Jsoup.isValid(html, Safelist.relaxed()));\n        String clean = Jsoup.clean(html, Safelist.relaxed());\n        assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));\n    }\n\n    @Test public void testTemplateInsideTable() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/table-polymer-template.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n        doc.outputSettings().prettyPrint(true);\n\n        Elements templates = doc.body().getElementsByTag(\"template\");\n        for (Element template : templates) {\n            assertTrue(template.childNodes().size() > 1);\n        }\n    }\n\n    @Test public void testHandlesDeepSpans() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 200; i++) {\n            sb.append(\"<span>\");\n        }\n\n        sb.append(\"<p>One</p>\");\n\n        Document doc = Jsoup.parse(sb.toString());\n        assertEquals(200, doc.select(\"span\").size());\n        assertEquals(1, doc.select(\"p\").size());\n    }\n\n    @Test public void commentAtEnd() {\n        Document doc = Jsoup.parse(\"<!\");\n        assertTrue(doc.childNode(0) instanceof Comment);\n    }\n\n    @Test public void preSkipsFirstNewline() {\n        Document doc = Jsoup.parse(\"<pre>\\n\\nOne\\nTwo\\n</pre>\");\n        Element pre = doc.selectFirst(\"pre\");\n        assertEquals(\"One\\nTwo\", pre.text());\n        assertEquals(\"\\nOne\\nTwo\\n\", pre.wholeText());\n    }\n\n    @Test public void handlesXmlDeclAndCommentsBeforeDoctype() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/comments.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n\n        assertEquals(\"<!--?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?--><!-- so --> <!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"><!-- what --> <html xml:lang=\\\"en\\\" lang=\\\"en\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>\",\n            StringUtil.normaliseWhitespace(doc.html()));\n\n        assertEquals(\"A Certain Kind of Test\", doc.head().select(\"title\").text());\n    }\n\n    @Test public void fallbackToUtfIfCantEncode() throws IOException {\n        // that charset can't be encoded, so make sure we flip to utf\n\n        String in = \"<html><meta charset=\\\"ISO-2022-CN\\\"/>One</html>\";\n        Document doc = Jsoup.parse(new ByteArrayInputStream(in.getBytes()), null, \"\");\n\n        assertEquals(\"UTF-8\", doc.charset().name());\n        assertEquals(\"One\", doc.text());\n\n        String html = doc.outerHtml();\n        assertEquals(\"<html><head><meta charset=\\\"UTF-8\\\"></head><body>One</body></html>\", TextUtil.stripNewlines(html));\n    }\n\n    @Test public void characterReaderBuffer() throws IOException {\n        File in = ParseTest.getFile(\"/htmltests/character-reader-buffer.html.gz\");\n        Document doc = Jsoup.parse(in, \"UTF-8\");\n\n        String expectedHref = \"http://www.domain.com/path?param_one=value&param_two=value\";\n\n        Elements links = doc.select(\"a\");\n        assertEquals(2, links.size());\n        assertEquals(expectedHref, links.get(0).attr(\"href\")); // passes\n        assertEquals(expectedHref, links.get(1).attr(\"href\")); // fails, \"but was:<...ath?param_one=value&[]_two-value>\"\n    }\n\n    @Test\n    public void selfClosingTextAreaDoesntLeaveDroppings() {\n        // https://github.com/jhy/jsoup/issues/1220\n        Document doc = Jsoup.parse(\"<div><div><textarea/></div></div>\");\n        assertFalse(doc.body().html().contains(\"&lt;\"));\n        assertFalse(doc.body().html().contains(\"&gt;\"));\n        assertEquals(\"<div><div><textarea></textarea></div></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testNoSpuriousSpace() {\n        Document doc = Jsoup.parse(\"Just<a>One</a><a>Two</a>\");\n        assertEquals(\"Just<a>One</a><a>Two</a>\", doc.body().html());\n        assertEquals(\"JustOneTwo\", doc.body().text());\n    }\n\n    @Test\n    public void pTagsGetIndented() {\n        String html = \"<div><p><a href=one>One</a><p><a href=two>Two</a></p></div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<div>\\n\" +\n            \" <p><a href=\\\"one\\\">One</a></p>\\n\" +\n            \" <p><a href=\\\"two\\\">Two</a></p>\\n\" +\n            \"</div>\", doc.body().html());\n    }\n\n    @Test\n    public void indentRegardlessOfCase() {\n        String html = \"<p>1</p><P>2</P>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\n            \"<body>\\n\" +\n            \" <p>1</p>\\n\" +\n            \" <p>2</p>\\n\" +\n            \"</body>\", doc.body().outerHtml());\n\n        Document caseDoc = Jsoup.parse(html, \"\", Parser.htmlParser().settings(preserveCase));\n        assertEquals(\n            \"<body>\\n\" +\n            \" <p>1</p>\\n\" +\n            \" <P>2</P>\\n\" +\n            \"</body>\", caseDoc.body().outerHtml());\n    }\n\n    @Test\n    public void testH20() {\n        // https://github.com/jhy/jsoup/issues/731\n        String html = \"H<sub>2</sub>O\";\n        String clean = Jsoup.clean(html, Safelist.basic());\n        assertEquals(\"H<sub>2</sub>O\", clean);\n\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"H2O\", doc.text());\n    }\n\n    @Test\n    public void testUNewlines() {\n        // https://github.com/jhy/jsoup/issues/851\n        String html = \"t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e\";\n        String clean = Jsoup.clean(html, Safelist.basic());\n        assertEquals(\"t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e\", clean);\n\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"test on fire\", doc.text());\n    }\n\n    @Test public void testFarsi() {\n        // https://github.com/jhy/jsoup/issues/1227\n        String text = \"\u0646\u06cc\u0645\u0647\\u200C\u0634\u0628\";\n        Document doc = Jsoup.parse(\"<p>\" + text);\n        assertEquals(text, doc.text());\n    }\n\n    @Test public void testStartOptGroup() {\n        // https://github.com/jhy/jsoup/issues/1313\n        String html = \"<select>\\n\" +\n            \"  <optgroup label=\\\"a\\\">\\n\" +\n            \"  <option>one\\n\" +\n            \"  <option>two\\n\" +\n            \"  <option>three\\n\" +\n            \"  <optgroup label=\\\"b\\\">\\n\" +\n            \"  <option>four\\n\" +\n            \"  <option>fix\\n\" +\n            \"  <option>six\\n\" +\n            \"</select>\";\n        Document doc = Jsoup.parse(html);\n        Element select = doc.selectFirst(\"select\");\n        assertEquals(2, select.childrenSize());\n\n        assertEquals(\"<optgroup label=\\\"a\\\"> <option>one </option><option>two </option><option>three </option></optgroup><optgroup label=\\\"b\\\"> <option>four </option><option>fix </option><option>six </option></optgroup>\", select.html());\n    }\n\n    @Test public void readerClosedAfterParse() {\n        Document doc = Jsoup.parse(\"Hello\");\n        TreeBuilder treeBuilder = doc.parser().getTreeBuilder();\n        assertNull(treeBuilder.reader);\n        assertNull(treeBuilder.tokeniser);\n    }\n\n    @Test public void scriptInDataNode() {\n        Document doc = Jsoup.parse(\"<script>Hello</script><style>There</style>\");\n        assertTrue(doc.selectFirst(\"script\").childNode(0) instanceof DataNode);\n        assertTrue(doc.selectFirst(\"style\").childNode(0) instanceof DataNode);\n\n        doc = Jsoup.parse(\"<SCRIPT>Hello</SCRIPT><STYLE>There</STYLE>\", \"\", Parser.htmlParser().settings(preserveCase));\n        assertTrue(doc.selectFirst(\"script\").childNode(0) instanceof DataNode);\n        assertTrue(doc.selectFirst(\"style\").childNode(0) instanceof DataNode);\n    }\n\n    @Test public void textareaValue() {\n        String html = \"<TEXTAREA>YES YES</TEXTAREA>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"YES YES\", doc.selectFirst(\"textarea\").val());\n\n        doc = Jsoup.parse(html, \"\", Parser.htmlParser().settings(preserveCase));\n        assertEquals(\"YES YES\", doc.selectFirst(\"textarea\").val());\n    }\n\n    @Test public void preserveWhitespaceInHead() {\n        String html = \"\\n<!doctype html>\\n<html>\\n<head>\\n<title>Hello</title>\\n</head>\\n<body>\\n<p>One</p>\\n</body>\\n</html>\\n\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<!doctype html>\\n<html>\\n<head>\\n<title>Hello</title>\\n</head>\\n<body>\\n<p>One</p>\\n</body>\\n</html>\\n\", doc.outerHtml());\n    }\n\n    @Test public void handleContentAfterBody() {\n        String html = \"<body>One</body>  <p>Hello!</p></html> <p>There</p>\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<html><head></head><body>One<p>Hello!</p><p>There</p></body>  </html> \", doc.outerHtml());\n    }\n\n    @Test public void preservesTabs() {\n        // testcase to demonstrate tab retention - https://github.com/jhy/jsoup/issues/1240\n        String html = \"<pre>One\\tTwo</pre><span>\\tThree\\tFour</span>\";\n        Document doc = Jsoup.parse(html);\n\n        Element pre = doc.selectFirst(\"pre\");\n        Element span = doc.selectFirst(\"span\");\n\n        assertEquals(\"One\\tTwo\", pre.text());\n        assertEquals(\"Three Four\", span.text()); // normalized, including overall trim\n        assertEquals(\"\\tThree\\tFour\", span.wholeText()); // text normalizes, wholeText retains original spaces incl tabs\n        assertEquals(\"One\\tTwo Three Four\", doc.body().text());\n\n        assertEquals(\"<pre>One\\tTwo</pre><span> Three Four</span>\", doc.body().html()); // html output provides normalized space, incl tab in pre but not in span\n\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(html, doc.body().html()); // disabling pretty-printing - round-trips the tab throughout, as no normalization occurs\n    }\n\n    @Test void wholeTextTreatsBRasNewline() {\n        String html = \"<div>\\nOne<br>Two <p>Three<br>Four</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        assertEquals(\"\\nOne\\nTwo Three\\nFour\", div.wholeText());\n        assertEquals(\"\\nOne\\nTwo \", div.wholeOwnText());\n    }\n\n    @Test public void canDetectAutomaticallyAddedElements() {\n        String bare = \"<script>One</script>\";\n        String full = \"<html><head><title>Check</title></head><body><p>One</p></body></html>\";\n\n        assertTrue(didAddElements(bare));\n        assertFalse(didAddElements(full));\n    }\n\n    private boolean didAddElements(String input) {\n        // two passes, one as XML and one as HTML. XML does not vivify missing/optional tags\n        Document html = Jsoup.parse(input);\n        Document xml = Jsoup.parse(input, \"\", Parser.xmlParser());\n\n        int htmlElementCount = html.getAllElements().size();\n        int xmlElementCount = xml.getAllElements().size();\n        return htmlElementCount > xmlElementCount;\n    }\n\n    @Test public void canSetHtmlOnCreatedTableElements() {\n        // https://github.com/jhy/jsoup/issues/1603\n        Element element = new Element(\"tr\");\n        element.html(\"<tr><td>One</td></tr>\");\n        assertEquals(\"<tr>\\n <tr>\\n  <td>One</td>\\n </tr>\\n</tr>\", element.outerHtml());\n    }\n\n    @Test public void parseFragmentOnCreatedDocument() {\n        // https://github.com/jhy/jsoup/issues/1601\n        String bareFragment = \"<h2>text</h2>\";\n        List<Node> nodes = new Document(\"\").parser().parseFragmentInput(bareFragment, new Element(\"p\"), \"\");\n        assertEquals(1, nodes.size());\n        Node node = nodes.get(0);\n        assertEquals(\"h2\", node.nodeName());\n        assertEquals(\"<p>\\n <h2>text</h2></p>\", node.parent().outerHtml());\n    }\n\n    @Test public void nestedPFragments() {\n        // https://github.com/jhy/jsoup/issues/1602\n        String bareFragment = \"<p></p><a></a>\";\n        List<Node> nodes = new Document(\"\").parser().parseFragmentInput(bareFragment, new Element(\"p\"), \"\");\n        assertEquals(2, nodes.size());\n        Node node = nodes.get(0);\n        assertEquals(\"<p>\\n <p></p><a></a></p>\", node.parent().outerHtml()); // mis-nested because fragment forced into the element, OK\n    }\n\n    @Test public void nestedAnchorAdoption() {\n        // https://github.com/jhy/jsoup/issues/1608\n        String html = \"<a>\\n<b>\\n<div>\\n<a>test</a>\\n</div>\\n</b>\\n</a>\";\n        Document doc = Jsoup.parse(html);\n        assertNotNull(doc);\n        assertEquals(\"<a> <b> </b></a><b><div><a> </a><a>test</a></div></b>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void tagsMustStartWithAscii() {\n        // https://github.com/jhy/jsoup/issues/1006\n        String[] valid = {\"a\u4e00\", \"a\u4f1a\u5458\u6302\u5355\u91d1\u989d5\", \"table(\u256f\u00b0\u25a1\u00b0)\u256f\"};\n        String[] invalid = {\"\u4e00\", \"\u4f1a\u5458\u6302\u5355\u91d1\u989d5\", \"(\u256f\u00b0\u25a1\u00b0)\u256f\"};\n\n        for (String tag : valid) {\n            Document doc = Jsoup.parse(\"<\" + tag + \">Text</\" + tag + \">\");\n            Elements els = doc.getElementsByTag(tag);\n            assertEquals(1, els.size());\n            assertEquals(tag, els.get(0).tagName());\n            assertEquals(\"Text\", els.get(0).text());\n        }\n\n        for (String tag : invalid) {\n            Document doc = Jsoup.parse(\"<\" + tag + \">Text</\" + tag + \">\");\n            Elements els = doc.getElementsByTag(tag);\n            assertEquals(0, els.size());\n            assertEquals(\"&lt;\" + tag + \"&gt;Text<!--/\" + tag + \"-->\", doc.body().html());\n        }\n    }\n\n    @Test void htmlOutputCorrectsInvalidAttributeNames() {\n        String html = \"<body style=\\\"color: red\\\" \\\" name\\\"><div =\\\"\\\"></div></body>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(Document.OutputSettings.Syntax.html, doc.outputSettings().syntax());\n\n        String out = doc.body().outerHtml();\n        assertEquals(\"<body style=\\\"color: red\\\" _ name_>\\n <div _></div>\\n</body>\", out);\n    }\n\n    @Test void templateInHead() {\n        // https://try.jsoup.org/~EGp3UZxQe503TJDHQEQEzm8IeUc\n        String html = \"<head><template id=1><meta name=tmpl></template><title>Test</title><style>One</style></head><body><p>Two</p>\";\n        Document doc = Jsoup.parse(html);\n\n        String want = \"<html><head><template id=\\\"1\\\"><meta name=\\\"tmpl\\\"></template><title>Test</title><style>One</style></head><body><p>Two</p></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n\n        Elements template = doc.select(\"template#1\");\n        template.select(\"meta\").attr(\"content\", \"Yes\");\n        template.unwrap();\n\n        want = \"<html><head><meta name=\\\"tmpl\\\" content=\\\"Yes\\\"><title>Test</title><style>One</style></head><body><p>Two</p></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void nestedTemplateInBody() {\n        String html = \"<body><template id=1><table><tr><template id=2><td>One</td><td>Two</td></template></tr></template></body>\";\n        Document doc = Jsoup.parse(html);\n\n        String want = \"<html><head></head><body><template id=\\\"1\\\"><table><tbody><tr><template id=\\\"2\\\"><td>One</td><td>Two</td></template></tr></tbody></table></template></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n\n        // todo - will be nice to add some simpler template element handling like clone children etc?\n        Element tmplTbl = doc.selectFirst(\"template#1\");\n        Element tmplRow = doc.selectFirst(\"template#2\");\n        assertNotNull(tmplRow);\n        assertNotNull(tmplTbl);\n        tmplRow.appendChild(tmplRow.clone());\n        doc.select(\"template\").unwrap();\n\n        want = \"<html><head></head><body><table><tbody><tr><td>One</td><td>Two</td><td>One</td><td>Two</td></tr></tbody></table></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void canSelectIntoTemplate() {\n        String html = \"<body><div><template><p>Hello</p>\";\n        Document doc = Jsoup.parse(html);\n        String want = \"<html><head></head><body><div><template><p>Hello</p></template></div></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n\n        Element p = doc.selectFirst(\"div p\");\n        Element p1 = doc.selectFirst(\"template :containsOwn(Hello)\");\n        assertEquals(\"p\", p.normalName());\n        assertEquals(p, p1);\n    }\n\n    @Test void tableRowFragment() {\n        Document doc = Jsoup.parse(\"<body><table></table></body\");\n        String html = \"<tr><td><img></td></tr>\";\n        Element table = doc.selectFirst(\"table\");\n        table.html(html); // invokes the fragment parser with table as context\n        String want = \"<tbody><tr><td><img></td></tr></tbody>\";\n        assertEquals(want, TextUtil.stripNewlines(table.html()));\n        want = \"<table><tbody><tr><td><img></td></tr></tbody></table>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test void templateTableRowFragment() {\n        // https://github.com/jhy/jsoup/issues/1409 (per the fragment <tr> use case)\n        Document doc = Jsoup.parse(\"<body><table><template></template></table></body\");\n        String html = \"<tr><td><img></td></tr>\";\n        Element tmpl = doc.selectFirst(\"template\");\n        tmpl.html(html); // invokes the fragment parser with template as context\n        String want = \"<tr><td><img></td></tr>\";\n        assertEquals(want, TextUtil.stripNewlines(tmpl.html()));\n        tmpl.unwrap();\n\n        want = \"<html><head></head><body><table><tr><td><img></td></tr></table></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void templateNotInTableRowFragment() {\n        // https://github.com/jhy/jsoup/issues/1409 (per the fragment <tr> use case)\n        Document doc = Jsoup.parse(\"<body><template></template></body\");\n        String html = \"<tr><td><img></td></tr>\";\n        Element tmpl = doc.selectFirst(\"template\");\n        tmpl.html(html); // invokes the fragment parser with template as context\n        String want = \"<tr><td><img></td></tr>\";\n        assertEquals(want, TextUtil.stripNewlines(tmpl.html()));\n        tmpl.unwrap();\n\n        want = \"<html><head></head><body><tr><td><img></td></tr></body></html>\";\n        assertEquals(want, TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void templateFragment() {\n        // https://github.com/jhy/jsoup/issues/1315\n        String html = \"<template id=\\\"lorem-ipsum\\\"><tr><td>Lorem</td><td>Ipsum</td></tr></template>\";\n        Document frag = Jsoup.parseBodyFragment(html);\n        String want = \"<template id=\\\"lorem-ipsum\\\"><tr><td>Lorem</td><td>Ipsum</td></tr></template>\";\n        assertEquals(want, TextUtil.stripNewlines(frag.body().html()));\n    }\n\n    @Test void templateInferredForm() {\n        // https://github.com/jhy/jsoup/issues/1637 | https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38987\n        Document doc = Jsoup.parse(\"<template><isindex action>\");\n        assertNotNull(doc);\n        assertEquals(\"<template><form><hr><label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label><hr></form></template>\",\n            TextUtil.stripNewlines(doc.head().html()));\n    }\n\n    @Test void trimNormalizeElementNamesInBuilder() {\n        // https://github.com/jhy/jsoup/issues/1637 | https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38983\n        // This is interesting - in TB state, the element name was \"template\\u001E\", so no name checks matched. Then,\n        // when the Element is created, the name got normalized to \"template\" and so looked like there should be a\n        // template on the stack during resetInsertionMode for the select.\n        // The issue was that the normalization in Tag.valueOf did a trim which the Token.Tag did not\n        Document doc = Jsoup.parse(\"<template\\u001E<select<input<\");\n        assertNotNull(doc);\n        assertEquals(\"<template><select></select><input>&lt;</template>\",\n            TextUtil.stripNewlines(doc.head().html()));\n    }\n\n    @Test void errorsBeforeHtml() {\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(\"<!doctype html><!doctype something></div>\", parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(2, errors.size());\n        assertEquals(\"<1:36>: Unexpected Doctype token [<!doctype something>] when in state [BeforeHtml]\", errors.get(0).toString());\n        assertEquals(\"<1:42>: Unexpected EndTag token [</div>] when in state [BeforeHtml]\", errors.get(1).toString());\n        assertEquals(\"<!doctype html><html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void afterHeadReAdds() {\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(\"<head></head><meta charset=UTF8><p>Hello\", parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(1, errors.size());\n        assertEquals(\"<1:33>: Unexpected StartTag token [<meta  charset=\\\"UTF8\\\">] when in state [AfterHead]\", errors.get(0).toString());\n        assertEquals(\"<html><head><meta charset=\\\"UTF8\\\"></head><body><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n        // meta gets added back into head\n    }\n\n    @Test void mergeHtmlAttributesFromBody() {\n        Document doc = Jsoup.parse(\"<html id=1 class=foo><body><html class=bar data=x><p>One\");\n        assertEquals(\"<html id=\\\"1\\\" class=\\\"foo\\\" data=\\\"x\\\"><head></head><body><p>One</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void mergeHtmlNoAttributesFromBody() {\n        Document doc = Jsoup.parse(\"<html id=1 class=foo><body><html><p>One\");\n        assertEquals(\"<html id=\\\"1\\\" class=\\\"foo\\\"><head></head><body><p>One</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void supportsRuby() {\n        String html = \"<ruby><rbc><rb>10</rb><rb>31</rb><rb>2002</rb></rbc><rtc><rt>Month</rt><rt>Day</rt><rt>Year</rt></rtc><rtc><rt>Expiration Date</rt><rp>(*)</rtc></ruby>\";\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(3, errors.size());\n        Element ruby = doc.expectFirst(\"ruby\");\n        assertEquals(\n            \"<ruby><rbc><rb>10</rb><rb>31</rb><rb>2002</rb></rbc><rtc><rt>Month</rt><rt>Day</rt><rt>Year</rt></rtc><rtc><rt>Expiration Date</rt><rp>(*)</rp></rtc></ruby>\",\n            TextUtil.stripNewlines(ruby.outerHtml()));\n        assertEquals(\"<1:38>: Unexpected StartTag token [<rb>] when in state [InBody]\", errors.get(2).toString()); // 3 errors from rb in rtc as undefined\n    }\n\n    @Test void rubyRpRtImplicitClose() {\n        String html = \"<ruby><rp>(<rt>Hello<rt>Hello<rp>)</ruby>\\n\";\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        assertEquals(0, parser.getErrors().size());\n        Element ruby = doc.expectFirst(\"ruby\");\n        assertEquals(\n            \"<ruby><rp>(</rp><rt>Hello</rt><rt>Hello</rt><rp>)</rp></ruby>\",\n            TextUtil.stripNewlines(ruby.outerHtml()));\n    }\n\n    @Test void rubyScopeError() {\n        String html = \"<ruby><div><rp>Hello\";\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(2, errors.size());\n        Element ruby = doc.expectFirst(\"ruby\");\n        assertEquals(\n            \"<ruby><div><rp>Hello</rp></div></ruby>\",\n            TextUtil.stripNewlines(ruby.outerHtml()));\n        assertEquals(\"<1:16>: Unexpected StartTag token [<rp>] when in state [InBody]\", errors.get(0).toString());\n    }\n\n    @Test void errorOnEofIfOpen() {\n        String html = \"<div>\";\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(1, errors.size());\n        assertEquals(\"Unexpected EOF token [] when in state [InBody]\", errors.get(0).getErrorMessage());\n    }\n\n    @Test void NoErrorOnEofIfBodyOpen() {\n        String html = \"<body>\";\n        Parser parser = Parser.htmlParser();\n        parser.setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        ParseErrorList errors = parser.getErrors();\n        assertEquals(0, errors.size());\n    }\n\n    @Test void htmlClose() {\n        // https://github.com/jhy/jsoup/issues/1851\n        String html = \"<body><div>One</html>Two</div></body>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"OneTwo\", doc.expectFirst(\"body > div\").text());\n    }\n\n    @Test void largeTextareaContents() {\n        // https://github.com/jhy/jsoup/issues/1929\n        StringBuilder sb = new StringBuilder();\n        int num = 2000;\n        for (int i = 0; i <= num; i++) {\n            sb.append(\"\\n<text>foo</text>\\n\");\n        }\n        String textContent = sb.toString();\n        String sourceHtml = \"<textarea>\" + textContent + \"</textarea>\";\n\n        Document doc = Jsoup.parse(sourceHtml);\n        Element textArea = doc.expectFirst(\"textarea\");\n\n        assertEquals(textContent, textArea.wholeText());\n    }\n\n    @Test void svgParseTest() {\n        String html = \"<div><svg viewBox=2><foreignObject><p>One</p></foreignObject></svg></div>\";\n        Document doc = Jsoup.parse(html);\n\n        assertHtmlNamespace(doc);\n        Element div = doc.expectFirst(\"div\");\n        assertHtmlNamespace(div);\n\n        Element svg = doc.expectFirst(\"svg\");\n        assertTrue(svg.attributes().hasKey(\"viewBox\"));\n        assertSvgNamespace(svg);\n        assertSvgNamespace(doc.expectFirst(\"foreignObject\"));\n        assertHtmlNamespace(doc.expectFirst(\"p\"));\n\n        String serialized = div.html();\n        assertEquals(\"<svg viewBox=\\\"2\\\">\\n\" +\n            \" <foreignObject>\\n\" +\n            \"  <p>One</p>\\n\" +\n            \" </foreignObject>\\n\" +\n            \"</svg>\", serialized);\n    }\n\n    @Test void mathParseText() {\n        String html = \"<div><math><mi><p>One</p><svg><text>Blah</text></svg></mi><ms></ms></div>\";\n        Document doc = Jsoup.parse(html);\n\n        assertHtmlNamespace(doc.expectFirst(\"div\"));\n        assertMathNamespace(doc.expectFirst(\"math\"));\n        assertMathNamespace(doc.expectFirst(\"mi\"));\n        assertHtmlNamespace(doc.expectFirst(\"p\"));\n        assertSvgNamespace(doc.expectFirst(\"svg\"));\n        assertSvgNamespace(doc.expectFirst(\"text\"));\n        assertMathNamespace(doc.expectFirst(\"ms\"));\n\n        String serialized = doc.expectFirst(\"div\").html();\n        assertEquals(\"<math>\\n\" +\n            \" <mi>\\n\" +\n            \"  <p>One</p>\\n\" +\n            \"  <svg>\\n\" +\n            \"   <text>Blah</text>\\n\" +\n            \"  </svg></mi><ms></ms>\\n\" +\n            \"</math>\", serialized);\n    }\n\n    private static void assertHtmlNamespace(Element el) {\n        assertEquals(Parser.NamespaceHtml, el.tag().namespace());\n    }\n\n    private static void assertSvgNamespace(Element el) {\n        assertEquals(Parser.NamespaceSvg, el.tag().namespace());\n    }\n\n    private static void assertMathNamespace(Element el) {\n        assertEquals(Parser.NamespaceMathml, el.tag().namespace());\n    }\n\n    @Test void mathSvgStyleTest() {\n        String html = \"<style><img></style><math><svg><style><img></img></style></svg></math>\";\n        Document doc = Jsoup.parse(html);\n\n        Element htmlStyle = doc.expectFirst(\"style\");\n        assertHtmlNamespace(htmlStyle);\n        assertEquals(\"<img>\", htmlStyle.data()); // that's not an element, it's data (textish)\n\n        Element svgStyle = doc.expectFirst(\"svg style\");\n        assertMathNamespace(svgStyle); // in inherited math namespace as not an HTML integration point\n        Element styleImg = svgStyle.expectFirst(\"img\");\n        assertHtmlNamespace(styleImg); // this one is an img tag - in foreign to html elements\n\n        assertMathNamespace(doc.expectFirst(\"svg\"));\n        assertMathNamespace(doc.expectFirst(\"math\"));\n    }\n\n    @Test void xmlnsAttributeError() {\n        String html = \"<p><svg></svg></body>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(10);\n        Document doc = Jsoup.parse(html, parser);\n        assertEquals(0, doc.parser().getErrors().size());\n\n        String html2 = \"<html xmlns='http://www.w3.org/1999/xhtml'><p xmlns='http://www.w3.org/1999/xhtml'><i xmlns='xhtml'></i></body>\";\n        Document doc2 = Jsoup.parse(html2, parser);\n        assertEquals(1, doc2.parser().getErrors().size());\n        assertEquals(\"Invalid xmlns attribute [xhtml] on tag [i]\", parser.getErrors().get(0).getErrorMessage());\n    }\n\n    @Test void mathAnnotationSvg() {\n        String html = \"<math><svg>\"; // not in annotation, svg will be in math ns\n        Document doc = Jsoup.parse(html);\n        assertMathNamespace(doc.expectFirst(\"math\"));\n        assertMathNamespace(doc.expectFirst(\"svg\"));\n\n        String html2 = \"<math><annotation-xml><svg>\"; // svg will be in svg ns\n        Document doc2 = Jsoup.parse(html2);\n        assertMathNamespace(doc2.expectFirst(\"math\"));\n        assertMathNamespace(doc2.expectFirst(\"annotation-xml\"));\n        assertSvgNamespace(doc2.expectFirst(\"svg\"));\n    }\n\n    @Test void mathHtmlIntegrationPoint() {\n        String html = \"<math><div>Hello\";\n        Document doc = Jsoup.parse(html);\n        assertMathNamespace(doc.expectFirst(\"math\"));\n        assertHtmlNamespace(doc.expectFirst(\"div\"));\n\n        String html2 = \"<math><divv>Hello\";\n        Document doc2 = Jsoup.parse(html2);\n        assertMathNamespace(doc2.expectFirst(\"math\"));\n        assertMathNamespace(doc2.expectFirst(\"divv\"));\n\n        String html3 = \"<math><annotation-xml><divv>Hello\";\n        Document doc3 = Jsoup.parse(html3);\n        assertMathNamespace(doc3.expectFirst(\"math\"));\n        assertMathNamespace(doc3.expectFirst(\"annotation-xml\"));\n        assertMathNamespace(doc3.expectFirst(\"divv\"));\n\n        String html4 = \"<math><annotation-xml encoding=text/html><divv>Hello\";\n        Document doc4 = Jsoup.parse(html4);\n        assertMathNamespace(doc4.expectFirst(\"math\"));\n        assertMathNamespace(doc4.expectFirst(\"annotation-xml\"));\n        assertHtmlNamespace(doc4.expectFirst(\"divv\"));\n    }\n\n    @Test void parseEmojiFromMultipointEncoded() {\n        String html = \"<img multi='&#55357;&#56495;' single='&#128175;' hexsingle='&#x1f4af;'>\";\n        Document document = Jsoup.parse(html);\n        Element img = document.expectFirst(\"img\");\n        assertEquals(\"\\uD83D\\uDCAF\", img.attr(\"multi\"));\n        assertEquals(\"\\uD83D\\uDCAF\", img.attr(\"single\"));\n        assertEquals(\"\\uD83D\\uDCAF\", img.attr(\"hexsingle\"));\n\n        assertEquals(\"<img multi=\\\"\\uD83D\\uDCAF\\\" single=\\\"\\uD83D\\uDCAF\\\" hexsingle=\\\"\\uD83D\\uDCAF\\\">\", img.outerHtml());\n\n        img.ownerDocument().outputSettings().charset(\"ascii\");\n        assertEquals(\"<img multi=\\\"&#x1f4af;\\\" single=\\\"&#x1f4af;\\\" hexsingle=\\\"&#x1f4af;\\\">\", img.outerHtml());\n    }\n\n    @Test void tableInPInQuirksMode() {\n        // https://github.com/jhy/jsoup/issues/2197\n        String html = \"<p><span><table><tbody><tr><td><span>Hello table data</span></td></tr></tbody></table></span></p>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(Document.QuirksMode.quirks, doc.quirksMode());\n        assertEquals(\n            \"<p><span><table><tbody><tr><td><span>Hello table data</span></td></tr></tbody></table></span></p>\", // quirks, allows table in p\n            TextUtil.normalizeSpaces(doc.body().html())\n        );\n\n        // doctype set, no quirks\n        html =\"<!DOCTYPE html><p><span><table><tbody><tr><td><span>Hello table data</span></td></tr></tbody></table></span></p>\";\n        doc = Jsoup.parse(html);\n        assertEquals(Document.QuirksMode.noQuirks, doc.quirksMode());\n        assertEquals(\n            \"<p><span></span></p><table><tbody><tr><td><span>Hello table data</span></td></tr></tbody></table><p></p>\", // no quirks, p gets closed\n            TextUtil.normalizeSpaces(doc.body().html())\n        );\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java.XmlTreeBuilderTest", "name": "XmlTreeBuilderTest", "file_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java", "superclasses": "", "methods": ["[void]testSimpleXmlParse()", "[void]testPopToClose()", "[void]testCommentAndDocType()", "[void]testSupplyParserToJsoupClass()", "[void]testSupplyParserToConnection()", "[void]testSupplyParserToDataStream()", "[void]testDoesNotForceSelfClosingKnownTags()", "[void]handlesXmlDeclarationAsDeclaration()", "[void]xmlFragment()", "[void]xmlParseDefaultsToHtmlOutputSyntax()", "[void]testDoesHandleEOFInTag()", "[void]testDetectCharsetEncodingDeclaration()", "[void]testParseDeclarationAttributes()", "[void]testParseDeclarationWithoutAttributes()", "[void]caseSensitiveDeclaration()", "[void]testCreatesValidProlog()", "[void]preservesCaseByDefault()", "[void]appendPreservesCaseByDefault()", "[void]disablesPrettyPrintingByDefault()", "[void]canNormalizeCase()", "[void]normalizesDiscordantTags()", "[void]roundTripsCdata()", "[void]cdataPreservesWhiteSpace()", "[void]handlesDodgyXmlDecl()", "[void]handlesLTinScript()", "[void]dropsDuplicateAttributes()", "[void]readerClosedAfterParse()", "[void]xmlParserEnablesXmlOutputAndEscapes()", "[void]xmlSyntaxEscapesLtInAttributes()", "[void]xmlOutputCorrectsInvalidAttributeNames()", "[void]customTagsAreFlyweights()", "[void]rootHasXmlSettings()", "[void]xmlNamespace()"], "method_uris": ["src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java.XmlTreeBuilderTest.[void]assertXmlNamespace(Element)"], "overrides": null, "attributes": [], "class_docstring": "\nTests XmlTreeBuilder.\n\n@author Jonathan Hedley\n", "original_string": "public class XmlTreeBuilderTest {\n    @Test\n    public void testSimpleXmlParse() {\n        String xml = \"<doc id=2 href='/bar'>Foo <br /><link>One</link><link>Two</link></doc>\";\n        XmlTreeBuilder tb = new XmlTreeBuilder();\n        Document doc = tb.parse(xml, \"http://foo.com/\");\n        assertEquals(\"<doc id=\\\"2\\\" href=\\\"/bar\\\">Foo <br /><link>One</link><link>Two</link></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n        assertEquals(doc.getElementById(\"2\").absUrl(\"href\"), \"http://foo.com/bar\");\n    }\n\n    @Test\n    public void testPopToClose() {\n        // test: </val> closes Two, </bar> ignored\n        String xml = \"<doc><val>One<val>Two</val></bar>Three</doc>\";\n        XmlTreeBuilder tb = new XmlTreeBuilder();\n        Document doc = tb.parse(xml, \"http://foo.com/\");\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void testCommentAndDocType() {\n        String xml = \"<!DOCTYPE HTML><!-- a comment -->One <qux />Two\";\n        XmlTreeBuilder tb = new XmlTreeBuilder();\n        Document doc = tb.parse(xml, \"http://foo.com/\");\n        assertEquals(\"<!DOCTYPE HTML><!-- a comment -->One <qux />Two\",\n                TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void testSupplyParserToJsoupClass() {\n        String xml = \"<doc><val>One<val>Two</val></bar>Three</doc>\";\n        Document doc = Jsoup.parse(xml, \"http://foo.com/\", Parser.xmlParser());\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Disabled\n    @Test\n    public void testSupplyParserToConnection() throws IOException {\n        String xmlUrl = \"http://direct.infohound.net/tools/jsoup-xml-test.xml\";\n\n        // parse with both xml and html parser, ensure different\n        Document xmlDoc = Jsoup.connect(xmlUrl).parser(Parser.xmlParser()).get();\n        Document htmlDoc = Jsoup.connect(xmlUrl).parser(Parser.htmlParser()).get();\n        Document autoXmlDoc = Jsoup.connect(xmlUrl).get(); // check connection auto detects xml, uses xml parser\n\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(xmlDoc.html()));\n        assertNotEquals(htmlDoc, xmlDoc);\n        assertEquals(xmlDoc, autoXmlDoc);\n        assertEquals(1, htmlDoc.select(\"head\").size()); // html parser normalises\n        assertEquals(0, xmlDoc.select(\"head\").size()); // xml parser does not\n        assertEquals(0, autoXmlDoc.select(\"head\").size()); // xml parser does not\n    }\n\n    @Test\n    public void testSupplyParserToDataStream() throws IOException, URISyntaxException {\n        File xmlFile = new File(XmlTreeBuilder.class.getResource(\"/htmltests/xml-test.xml\").toURI());\n        InputStream inStream = new FileInputStream(xmlFile);\n        Document doc = Jsoup.parse(inStream, null, \"http://foo.com\", Parser.xmlParser());\n        assertEquals(\"<doc><val>One<val>Two</val>Three</val></doc>\",\n                TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void testDoesNotForceSelfClosingKnownTags() {\n        // html will force \"<br>one</br>\" to logically \"<br />One<br />\". XML should be stay \"<br>one</br> -- don't recognise tag.\n        Document htmlDoc = Jsoup.parse(\"<br>one</br>\");\n        assertEquals(\"<br>\\none\\n<br>\", htmlDoc.body().html());\n\n        Document xmlDoc = Jsoup.parse(\"<br>one</br>\", \"\", Parser.xmlParser());\n        assertEquals(\"<br>one</br>\", xmlDoc.html());\n    }\n\n    @Test public void handlesXmlDeclarationAsDeclaration() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<?xml encoding=\\\"UTF-8\\\"?><body>One</body><!-- comment -->\",doc.outerHtml());\n        assertEquals(\"#declaration\", doc.childNode(0).nodeName());\n        assertEquals(\"#comment\", doc.childNode(2).nodeName());\n    }\n\n    @Test public void xmlFragment() {\n        String xml = \"<one src='/foo/' />Two<three><four /></three>\";\n        List<Node> nodes = Parser.parseXmlFragment(xml, \"http://example.com/\");\n        assertEquals(3, nodes.size());\n\n        assertEquals(\"http://example.com/foo/\", nodes.get(0).absUrl(\"src\"));\n        assertEquals(\"one\", nodes.get(0).nodeName());\n        assertEquals(\"Two\", ((TextNode)nodes.get(1)).text());\n    }\n\n    @Test public void xmlParseDefaultsToHtmlOutputSyntax() {\n        Document doc = Jsoup.parse(\"x\", \"\", Parser.xmlParser());\n        assertEquals(Syntax.xml, doc.outputSettings().syntax());\n    }\n\n    @Test\n    public void testDoesHandleEOFInTag() {\n        String html = \"<img src=asdf onerror=\\\"alert(1)\\\" x=\";\n        Document xmlDoc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<img src=\\\"asdf\\\" onerror=\\\"alert(1)\\\" x=\\\"\\\"></img>\", xmlDoc.html());\n    }\n\n    @Test\n    public void testDetectCharsetEncodingDeclaration() throws IOException, URISyntaxException {\n        File xmlFile = new File(XmlTreeBuilder.class.getResource(\"/htmltests/xml-charset.xml\").toURI());\n        InputStream inStream = new FileInputStream(xmlFile);\n        Document doc = Jsoup.parse(inStream, null, \"http://example.com/\", Parser.xmlParser());\n        assertEquals(\"ISO-8859-1\", doc.charset().name());\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?><data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>\",\n            TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void testParseDeclarationAttributes() {\n        String xml = \"<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);\n        assertEquals(\"1\", decl.attr(\"version\"));\n        assertEquals(\"UTF-8\", decl.attr(\"encoding\"));\n        assertEquals(\"else\", decl.attr(\"something\"));\n        assertEquals(\"version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"\", decl.getWholeDeclaration());\n        assertEquals(\"<?xml version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"?>\", decl.outerHtml());\n    }\n\n    @Test\n    public void testParseDeclarationWithoutAttributes() {\n        String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<?myProcessingInstruction My Processing instruction.?>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        XmlDeclaration decl = (XmlDeclaration) doc.childNode(2);\n        assertEquals(\"myProcessingInstruction\", decl.name());\n        assertTrue(decl.hasAttr(\"My\"));\n        assertEquals(\"<?myProcessingInstruction My Processing instruction.?>\", decl.outerHtml());\n    }\n\n    @Test\n    public void caseSensitiveDeclaration() {\n        String xml = \"<?XML version='1' encoding='UTF-8' something='else'?>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(\"<?XML version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"?>\", doc.outerHtml());\n    }\n\n    @Test\n    public void testCreatesValidProlog() {\n        Document document = Document.createShell(\"\");\n        document.outputSettings().syntax(Syntax.xml);\n        document.charset(StandardCharsets.UTF_8);\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n            \"<html>\\n\" +\n            \" <head></head>\\n\" +\n            \" <body></body>\\n\" +\n            \"</html>\", document.outerHtml());\n    }\n\n    @Test\n    public void preservesCaseByDefault() {\n        String xml = \"<CHECK>One</CHECK><TEST ID=1>Check</TEST>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(\"<CHECK>One</CHECK><TEST ID=\\\"1\\\">Check</TEST>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void appendPreservesCaseByDefault() {\n        String xml = \"<One>One</One>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        Elements one = doc.select(\"One\");\n        one.append(\"<Two ID=2>Two</Two>\");\n        assertEquals(\"<One>One<Two ID=\\\"2\\\">Two</Two></One>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void disablesPrettyPrintingByDefault() {\n        String xml = \"\\n\\n<div><one>One</one><one>\\n Two</one>\\n</div>\\n \";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(xml, doc.html());\n    }\n\n    @Test\n    public void canNormalizeCase() {\n        String xml = \"<TEST ID=1>Check</TEST>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser().settings(ParseSettings.htmlDefault));\n        assertEquals(\"<test id=\\\"1\\\">Check</test>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void normalizesDiscordantTags() {\n        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);\n        Document document = Jsoup.parse(\"<div>test</DIV><p></p>\", \"\", parser);\n        assertEquals(\"<div>test</div><p></p>\", document.html());\n        // was failing -> toString() = \"<div>\\n test\\n <p></p>\\n</div>\"\n    }\n\n    @Test public void roundTripsCdata() {\n        String xml = \"<div id=1><![CDATA[\\n<html>\\n <foo><&amp;]]></div>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n\n        Element div = doc.getElementById(\"1\");\n        assertEquals(\"<html>\\n <foo><&amp;\", div.text());\n        assertEquals(0, div.children().size());\n        assertEquals(1, div.childNodeSize()); // no elements, one text node\n\n        assertEquals(\"<div id=\\\"1\\\"><![CDATA[\\n<html>\\n <foo><&amp;]]></div>\", div.outerHtml());\n\n        CDataNode cdata = (CDataNode) div.textNodes().get(0);\n        assertEquals(\"\\n<html>\\n <foo><&amp;\", cdata.text());\n    }\n\n    @Test public void cdataPreservesWhiteSpace() {\n        String xml = \"<script type=\\\"text/javascript\\\">//<![CDATA[\\n\\n  foo();\\n//]]></script>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(xml, doc.outerHtml());\n\n        assertEquals(\"//\\n\\n  foo();\\n//\", doc.selectFirst(\"script\").text());\n    }\n\n    @Test\n    public void handlesDodgyXmlDecl() {\n        String xml = \"<?xml version='1.0'><val>One</val>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        assertEquals(\"One\", doc.select(\"val\").text());\n    }\n\n    @Test\n    public void handlesLTinScript() {\n        // https://github.com/jhy/jsoup/issues/1139\n        String html = \"<script> var a=\\\"<?\\\"; var b=\\\"?>\\\"; </script>\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<script> var a=\\\"<!--?\\\"; var b=\\\"?-->\\\"; </script>\", doc.html()); // converted from pseudo xmldecl to comment\n    }\n\n    @Test public void dropsDuplicateAttributes() {\n        // case sensitive, so should drop Four and Five\n        String html = \"<p One=One ONE=Two one=Three One=Four ONE=Five two=Six two=Seven Two=Eight>Text</p>\";\n        Parser parser = Parser.xmlParser().setTrackErrors(10);\n        Document doc = parser.parseInput(html, \"\");\n\n        assertEquals(\"<p One=\\\"One\\\" ONE=\\\"Two\\\" one=\\\"Three\\\" two=\\\"Six\\\" Two=\\\"Eight\\\">Text</p>\", doc.selectFirst(\"p\").outerHtml());\n    }\n\n    @Test public void readerClosedAfterParse() {\n        Document doc = Jsoup.parse(\"Hello\", \"\", Parser.xmlParser());\n        TreeBuilder treeBuilder = doc.parser().getTreeBuilder();\n        assertNull(treeBuilder.reader);\n        assertNull(treeBuilder.tokeniser);\n    }\n\n    @Test public void xmlParserEnablesXmlOutputAndEscapes() {\n        // Test that when using the XML parser, the output mode and escape mode default to XHTML entities\n        // https://github.com/jhy/jsoup/issues/1420\n        Document doc = Jsoup.parse(\"<p one='&lt;two&gt;&copy'>Three</p>\", \"\", Parser.xmlParser());\n        assertEquals(doc.outputSettings().syntax(), Syntax.xml);\n        assertEquals(doc.outputSettings().escapeMode(), Entities.EscapeMode.xhtml);\n        assertEquals(\"<p one=\\\"&lt;two>\u00a9\\\">Three</p>\", doc.html()); // only the < should be escaped\n    }\n\n    @Test public void xmlSyntaxEscapesLtInAttributes() {\n        // Regardless of the entity escape mode, make sure < is escaped in attributes when in XML\n        Document doc = Jsoup.parse(\"<p one='&lt;two&gt;&copy'>Three</p>\", \"\", Parser.xmlParser());\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n        doc.outputSettings().charset(\"ascii\"); // to make sure &copy; is output\n        assertEquals(doc.outputSettings().syntax(), Syntax.xml);\n        assertEquals(\"<p one=\\\"&lt;two>&copy;\\\">Three</p>\", doc.html());\n    }\n\n    @Test void xmlOutputCorrectsInvalidAttributeNames() {\n        String xml = \"<body style=\\\"color: red\\\" \\\" name\\\"><div =\\\"\\\"></div></body>\";\n        Document doc = Jsoup.parse(xml, Parser.xmlParser());\n        assertEquals(Syntax.xml, doc.outputSettings().syntax());\n\n        String out = doc.html();\n        assertEquals(\"<body style=\\\"color: red\\\" _=\\\"\\\" name_=\\\"\\\"><div _=\\\"\\\"></div></body>\", out);\n    }\n\n    @Test void customTagsAreFlyweights() {\n        String xml = \"<foo>Foo</foo><foo>Foo</foo><FOO>FOO</FOO><FOO>FOO</FOO>\";\n        Document doc = Jsoup.parse(xml, Parser.xmlParser());\n        Elements els = doc.children();\n\n        Tag t1 = els.get(0).tag();\n        Tag t2 = els.get(1).tag();\n        Tag t3 = els.get(2).tag();\n        Tag t4 = els.get(3).tag();\n        assertEquals(\"foo\", t1.getName());\n        assertEquals(\"FOO\", t3.getName());\n        assertSame(t1, t2);\n        assertSame(t3, t4);\n    }\n\n    @Test void rootHasXmlSettings() {\n        Document doc = Jsoup.parse(\"<foo>\", Parser.xmlParser());\n        ParseSettings settings = doc.parser().settings();\n        assertTrue(settings.preserveTagCase());\n        assertTrue(settings.preserveAttributeCase());\n        assertEquals(Parser.NamespaceXml, doc.parser().defaultNamespace());\n    }\n\n    @Test void xmlNamespace() {\n        String xml = \"<foo><bar><div><svg><math>Qux</bar></foo>\";\n        Document doc = Jsoup.parse(xml, Parser.xmlParser());\n\n        assertXmlNamespace(doc);\n        Elements els = doc.select(\"*\");\n        for (Element el : els) {\n            assertXmlNamespace(el);\n        }\n\n        Document clone = doc.clone();\n        assertXmlNamespace(clone);\n        assertXmlNamespace(clone.expectFirst(\"bar\"));\n\n        Document shallow = doc.shallowClone();\n        assertXmlNamespace(shallow);\n    }\n\n    private static void assertXmlNamespace(Element el) {\n        assertEquals(Parser.NamespaceXml, el.tag().namespace(), String.format(\"Element %s not in XML namespace\", el.tagName()));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/TokeniserStateTest.java.TokeniserStateTest", "name": "TokeniserStateTest", "file_path": "src/test/java/org/jsoup/parser/TokeniserStateTest.java", "superclasses": "", "methods": ["[void]ensureSearchArraysAreSorted()", "[void]testCharacterReferenceInRcdata()", "[void]testBeforeTagName()", "[void]testEndTagOpen()", "[void]testRcdataLessthanSign()", "[void]testRCDATAEndTagName()", "[void]testCommentEndCoverage()", "[void]testCommentEndBangCoverage()", "[void]testPublicIdentifiersWithWhitespace()", "[void]testSystemIdentifiersWithWhitespace()", "[void]testPublicAndSystemIdentifiersWithWhitespace()", "[void]handlesLessInTagThanAsNewTag()", "[void]testUnconsumeAtBufferBoundary()", "[void]testUnconsumeAfterBufferUp()", "[void]testOpeningAngleBracketInsteadOfAttribute()", "[void]testMalformedSelfClosingTag()", "[void]testOpeningAngleBracketInTagName()", "[void]rcData()", "[void]plaintext()", "[void]nullInTag()", "[void]attributeValUnquoted()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TokeniserStateTest {\n\n    final char[] whiteSpace = { '\\t', '\\n', '\\r', '\\f', ' ' };\n    final char[] quote = { '\\'', '\"' };\n\n    @Test\n    public void ensureSearchArraysAreSorted() {\n        char[][] arrays = {\n            TokeniserState.attributeNameCharsSorted,\n            TokeniserState.attributeValueUnquoted\n        };\n\n        for (char[] array : arrays) {\n            char[] copy = Arrays.copyOf(array, array.length);\n            Arrays.sort(array);\n            assertArrayEquals(array, copy);\n        }\n    }\n\n    @Test\n    public void testCharacterReferenceInRcdata() {\n        String body = \"<textarea>You&I</textarea>\";\n        Document doc = Jsoup.parse(body);\n        Elements els = doc.select(\"textarea\");\n        assertEquals(\"You&I\", els.text());\n    }\n\n    @Test\n    public void testBeforeTagName() {\n        for (char c : whiteSpace) {\n            String body = String.format(\"<div%c>test</div>\", c);\n            Document doc = Jsoup.parse(body);\n            Elements els = doc.select(\"div\");\n            assertEquals(\"test\", els.text());\n        }\n    }\n\n    @Test\n    public void testEndTagOpen() {\n        String body;\n        Document doc;\n        Elements els;\n\n        body = \"<div>hello world</\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"div\");\n        assertEquals(\"hello world</\", els.text());\n\n        body = \"<div>hello world</div>\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"div\");\n        assertEquals(\"hello world\", els.text());\n\n        body = \"<div>fake</></div>\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"div\");\n        assertEquals(\"fake\", els.text());\n\n        body = \"<div>fake</?</div>\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"div\");\n        assertEquals(\"fake\", els.text());\n    }\n\n    @Test\n    public void testRcdataLessthanSign() {\n        String body;\n        Document doc;\n        Elements els;\n\n        body = \"<textarea><fake></textarea>\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"textarea\");\n        assertEquals(\"<fake>\", els.text());\n\n        body = \"<textarea><open\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"textarea\");\n        assertEquals(\"\", els.text());\n\n        body = \"<textarea>hello world</?fake</textarea>\";\n        doc = Jsoup.parse(body);\n        els = doc.select(\"textarea\");\n        assertEquals(\"hello world</?fake\", els.text());\n    }\n\n    @Test\n    public void testRCDATAEndTagName() {\n        for (char c : whiteSpace) {\n            String body = String.format(\"<textarea>data</textarea%c>\", c);\n            Document doc = Jsoup.parse(body);\n            Elements els = doc.select(\"textarea\");\n            assertEquals(\"data\", els.text());\n        }\n    }\n\n    @Test\n    public void testCommentEndCoverage() {\n        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --! --- --><p>Hello</p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        Element body = doc.body();\n        Comment comment = (Comment) body.childNode(1);\n        assertEquals(\" <table><tr><td></table> --! --- \", comment.getData());\n        Element p = body.child(1);\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n    }\n\n    @Test\n    public void testCommentEndBangCoverage() {\n        String html = \"<html><head></head><body><img src=foo><!-- <table><tr><td></table> --!---!>--><p>Hello</p></body></html>\";\n        Document doc = Jsoup.parse(html);\n\n        Element body = doc.body();\n        Comment comment = (Comment) body.childNode(1);\n        assertEquals(\" <table><tr><td></table> --!-\", comment.getData());\n        Element p = body.child(1);\n        TextNode text = (TextNode) p.childNode(0);\n        assertEquals(\"Hello\", text.getWholeText());\n    }\n\n    @Test\n    public void testPublicIdentifiersWithWhitespace() {\n        String expectedOutput = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.0//EN\\\">\";\n        for (char q : quote) {\n            for (char ws : whiteSpace) {\n                String[] htmls = {\n                        String.format(\"<!DOCTYPE html%cPUBLIC %c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html %cPUBLIC %c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html PUBLIC%c%c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html PUBLIC %c%c-//W3C//DTD HTML 4.0//EN%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c%c>\", q, q, ws),\n                        String.format(\"<!DOCTYPE html PUBLIC%c-//W3C//DTD HTML 4.0//EN%c%c>\", q, q, ws)\n                    };\n                for (String html : htmls) {\n                    Document doc = Jsoup.parse(html);\n                    assertEquals(expectedOutput, doc.childNode(0).outerHtml());\n                }\n            }\n        }\n    }\n\n    @Test\n    public void testSystemIdentifiersWithWhitespace() {\n        String expectedOutput = \"<!DOCTYPE html SYSTEM \\\"http://www.w3.org/TR/REC-html40/strict.dtd\\\">\";\n        for (char q : quote) {\n            for (char ws : whiteSpace) {\n                String[] htmls = {\n                        String.format(\"<!DOCTYPE html%cSYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html %cSYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html SYSTEM%c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html SYSTEM %c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", ws, q, q),\n                        String.format(\"<!DOCTYPE html SYSTEM %chttp://www.w3.org/TR/REC-html40/strict.dtd%c%c>\", q, q, ws),\n                        String.format(\"<!DOCTYPE html SYSTEM%chttp://www.w3.org/TR/REC-html40/strict.dtd%c%c>\", q, q, ws)\n                    };\n                for (String html : htmls) {\n                    Document doc = Jsoup.parse(html);\n                    assertEquals(expectedOutput, doc.childNode(0).outerHtml());\n                }\n            }\n        }\n    }\n\n    @Test\n    public void testPublicAndSystemIdentifiersWithWhitespace() {\n        String expectedOutput = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.0//EN\\\"\"\n                + \" \\\"http://www.w3.org/TR/REC-html40/strict.dtd\\\">\";\n    \tfor (char q : quote) {\n            for (char ws : whiteSpace) {\n                String[] htmls = {\n                        String.format(\"<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c\"\n                                + \"%c%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", q, q, ws, q, q),\n                        String.format(\"<!DOCTYPE html PUBLIC %c-//W3C//DTD HTML 4.0//EN%c\"\n                                + \"%chttp://www.w3.org/TR/REC-html40/strict.dtd%c>\", q, q, q, q)\n                    };\n                for (String html : htmls) {\n                    Document doc = Jsoup.parse(html);\n                    assertEquals(expectedOutput, doc.childNode(0).outerHtml());\n                }\n            }\n        }\n    }\n\n    @Test public void handlesLessInTagThanAsNewTag() {\n        // out of spec, but clear author intent\n        String html = \"<p\\n<p<div id=one <span>Two\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<p></p><p></p><div id=\\\"one\\\"><span>Two</span></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testUnconsumeAtBufferBoundary() {\n        String triggeringSnippet = \"<a href=\\\"\\\"foo\";\n        char[] padding = new char[CharacterReader.RefillPoint - triggeringSnippet.length() + 2]; // The \"foo\" part must be just at the limit.\n        Arrays.fill(padding, ' ');\n        String paddedSnippet = String.valueOf(padding) + triggeringSnippet;\n        ParseErrorList errorList = ParseErrorList.tracking(1);\n\n        Parser.parseFragment(paddedSnippet, null, \"\", errorList);\n\n        assertEquals(CharacterReader.RefillPoint - 1, errorList.get(0).getPosition());\n    }\n\n    @Test\n    public void testUnconsumeAfterBufferUp() {\n        // test for after consume() a bufferUp occurs (look-forward) but then attempts to unconsume. Would throw a \"No buffer left to unconsume\"\n        String triggeringSnippet = \"<title>One <span>Two\";\n        char[] padding = new char[CharacterReader.RefillPoint - triggeringSnippet.length() + 8]; // The \"<span\" part must be just at the limit. The \"containsIgnoreCase\" scan does a bufferUp, losing the unconsume\n        Arrays.fill(padding, ' ');\n        String paddedSnippet = String.valueOf(padding) + triggeringSnippet;\n        ParseErrorList errorList = ParseErrorList.tracking(1);\n        Parser.parseFragment(paddedSnippet, null, \"\", errorList);\n        // just asserting we don't get a WTF on unconsume\n    }\n\n    @Test\n    public void testOpeningAngleBracketInsteadOfAttribute() {\n        String triggeringSnippet = \"<html <\";\n        ParseErrorList errorList = ParseErrorList.tracking(1);\n\n        Parser.parseFragment(triggeringSnippet, null, \"\", errorList);\n\n        assertEquals(6, errorList.get(0).getPosition());\n    }\n\n    @Test\n    public void testMalformedSelfClosingTag() {\n        String triggeringSnippet = \"<html /ouch\";\n        ParseErrorList errorList = ParseErrorList.tracking(1);\n\n        Parser.parseFragment(triggeringSnippet, null, \"\", errorList);\n\n        assertEquals(7, errorList.get(0).getPosition());\n    }\n\n    @Test\n    public void testOpeningAngleBracketInTagName() {\n        String triggeringSnippet = \"<html<\";\n        ParseErrorList errorList = ParseErrorList.tracking(1);\n\n        Parser.parseFragment(triggeringSnippet, null, \"\", errorList);\n\n        assertEquals(5, errorList.get(0).getPosition());\n    }\n\n    @Test\n    public void rcData() {\n        Document doc = Jsoup.parse(\"<title>One \\0Two</title>\");\n        assertEquals(\"One \ufffdTwo\", doc.title());\n    }\n\n    @Test\n    public void plaintext() {\n        Document doc = Jsoup.parse(\"<div>One<plaintext><div>Two</plaintext>\\0no < Return\");\n        assertEquals(\"<html><head></head><body><div>One<plaintext>&lt;div&gt;Two&lt;/plaintext&gt;\ufffdno &lt; Return</plaintext></div></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test\n    public void nullInTag() {\n        Document doc = Jsoup.parse(\"<di\\0v>One</di\\0v>Two\");\n        assertEquals(\"<di\ufffdv>\\n One\\n</di\ufffdv>Two\", doc.body().html());\n    }\n\n    @Test\n    public void attributeValUnquoted() {\n        Document doc = Jsoup.parse(\"<p name=foo&lt;bar>\");\n        Element p = doc.selectFirst(\"p\");\n        assertEquals(\"foo<bar\", p.attr(\"name\"));\n\n        doc = Jsoup.parse(\"<p foo=\");\n        assertEquals(\"<p foo></p>\", doc.body().html());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "final char[] whiteSpace = { '\\t', '\\n', '\\r', '\\f', ' ' };", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "char[]", "name": "whiteSpace = { '\\t', '\\n', '\\r', '\\f', ' ' }", "syntax_pass": true}, {"attribute_expression": "final char[] quote = { '\\'', '\"' };", "docstring": "", "modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "type": "char[]", "name": "quote = { '\\'', '\"' }", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/parser/StreamParserTest.java.StreamParserTest", "name": "StreamParserTest", "file_path": "src/test/java/org/jsoup/parser/StreamParserTest.java", "superclasses": "", "methods": ["[void]canStream()", "[void]canStreamXml()", "[void]canIterate()", "[void]canReuse()", "[void]canStopAndCompleteAndReuse()", "[void]select()", "[void]canRemoveFromDom()", "[void]canRemoveWithIterator()", "[void]canSelectWithHas()", "[void]canSelectWithSibling()", "[void]canLoopOnSelectNext()", "[void]worksWithXmlParser()", "[void]closedOnStreamDrained()", "[void]closedOnIteratorDrained()", "[void]closedOnComplete()", "[void]closedOnTryWithResources()", "[void]doesNotReadPastParse()", "[void]canParseFileReader()", "[void]canParseFile()", "[void]canCleanlyConsumePortionOfUrl()", "[void]canStreamFragment()", "[void]canIterateFragment()", "[void]canSelectAndCompleteFragment()", "[void]canStreamFragmentXml()"], "method_uris": ["src/test/java/org/jsoup/parser/StreamParserTest.java.StreamParserTest.[void]trackSeen(Element,StringBuilder)", "src/test/java/org/jsoup/parser/StreamParserTest.java.StreamParserTest.[StreamParser]basic()", "src/test/java/org/jsoup/parser/StreamParserTest.java.StreamParserTest.[boolean]isClosed(StreamParser)", "src/test/java/org/jsoup/parser/StreamParserTest.java.StreamParserTest.[CharacterReader]getReader(StreamParser)"], "overrides": null, "attributes": [], "class_docstring": "\nTests for the StreamParser. There are also some tests in {@link org.jsoup.integration.ConnectTest}.\n", "original_string": "class StreamParserTest {\n\n    @Test\n    void canStream() {\n        String html = \"<title>Test</title></head><div id=1>D1</div><div id=2>D2<p id=3><span>P One</p><p id=4>P Two</p></div><div id=5>D3<p id=6>P three</p>\";\n        try (StreamParser parser = new StreamParser(Parser.htmlParser()).parse(html, \"\")) {\n            StringBuilder seen;\n            seen = new StringBuilder();\n            parser.stream().forEachOrdered(el -> trackSeen(el, seen));\n            assertEquals(\"title[Test];head+;div#1[D1]+;span[P One];p#3+;p#4[P Two];div#2[D2]+;p#6[P three];div#5[D3];body;html;#root;\", seen.toString());\n            // checks expected order, and the + indicates that element had a next sibling at time of emission\n        }\n    }\n\n    @Test\n    void canStreamXml() {\n        String html = \"<outmost><DIV id=1>D1</DIV><div id=2>D2<p id=3><span>P One</p><p id=4>P Two</p></div><div id=5>D3<p id=6>P three</p>\";\n        try (StreamParser parser = new StreamParser(Parser.xmlParser()).parse(html, \"\")) {\n            StringBuilder seen;\n            seen = new StringBuilder();\n            parser.stream().forEachOrdered(el -> trackSeen(el, seen));\n            assertEquals(\"DIV#1[D1]+;span[P One];p#3+;p#4[P Two];div#2[D2]+;p#6[P three];div#5[D3];outmost;#root;\", seen.toString());\n            // checks expected order, and the + indicates that element had a next sibling at time of emission\n        }\n    }\n\n    @Test void canIterate() {\n        // same as stream, just a different interface\n        String html = \"<title>Test</title></head><div id=1>D1</div><div id=2>D2<p id=3><span>P One</p><p id=4>P Two</p></div><div id=5>D3<p id=6>P three</p>\";\n        StreamParser parser = new StreamParser(Parser.htmlParser()).parse(html, \"\");\n        StringBuilder seen = new StringBuilder();\n\n        Iterator<Element> it = parser.iterator();\n        while (it.hasNext()) {\n            trackSeen(it.next(), seen);\n        }\n\n        assertEquals(\"title[Test];head+;div#1[D1]+;span[P One];p#3+;p#4[P Two];div#2[D2]+;p#6[P three];div#5[D3];body;html;#root;\", seen.toString());\n        // checks expected order, and the + indicates that element had a next sibling at time of emission\n    }\n\n    @Test void canReuse() {\n        StreamParser parser = new StreamParser(Parser.htmlParser());\n        String html1 = \"<p>One<p>Two\";\n        parser.parse(html1, \"\");\n\n        StringBuilder seen = new StringBuilder();\n        parser.stream().forEach(el -> trackSeen(el, seen));\n        assertEquals(\"head+;p[One]+;p[Two];body;html;#root;\", seen.toString());\n\n        String html2 = \"<div>Three<div>Four</div></div>\";\n        StringBuilder seen2 = new StringBuilder();\n        parser.parse(html2, \"\");\n        parser.stream().forEach(el -> trackSeen(el, seen2));\n        assertEquals(\"head+;div[Four];div[Three];body;html;#root;\", seen2.toString());\n\n        // re-run without a new parse should be empty\n        StringBuilder seen3 = new StringBuilder();\n        parser.stream().forEach(el -> trackSeen(el, seen3));\n        assertEquals(\"\", seen3.toString());\n    }\n\n    @Test void canStopAndCompleteAndReuse() throws IOException {\n        StreamParser parser = new StreamParser(Parser.htmlParser());\n        String html1 = \"<p>One<p>Two\";\n        parser.parse(html1, \"\");\n\n        Element p = parser.expectFirst(\"p\");\n        assertEquals(\"One\", p.text());\n        parser.stop();\n\n        Iterator<Element> it = parser.iterator();\n        assertFalse(it.hasNext());\n        assertThrows(NoSuchElementException.class, it::next);\n\n        Element p2 = parser.selectNext(\"p\");\n        assertNull(p2);\n\n        Document completed = parser.complete();\n        Elements ps = completed.select(\"p\");\n        assertEquals(2, ps.size());\n        assertEquals(\"One\", ps.get(0).text());\n        assertEquals(\"Two\", ps.get(1).text());\n\n        // can reuse\n        parser.parse(\"<div>DIV\", \"\");\n        Element div = parser.expectFirst(\"div\");\n        assertEquals(\"DIV\", div.text());\n    }\n\n    static void trackSeen(Element el, StringBuilder actual) {\n        actual.append(el.tagName());\n        if (el.hasAttr(\"id\"))\n            actual.append(\"#\").append(el.id());\n        if (!el.ownText().isEmpty())\n            actual.append(\"[\").append(el.ownText()).append(\"]\");\n        if (el.nextElementSibling() != null)\n            actual.append(\"+\");\n\n        actual.append(\";\");\n    }\n\n    @Test void select() throws IOException {\n        String html = \"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\";\n        StreamParser parser = new StreamParser(Parser.htmlParser()).parse(html, \"\");\n\n        Element title = parser.expectFirst(\"title\");\n        assertEquals(\"One\", title.text());\n\n        Document partialDoc = title.ownerDocument();\n        assertNotNull(partialDoc);\n        // at this point, we should have one P with no text - as title was emitted on P head\n        Elements ps = partialDoc.select(\"p\");\n        assertEquals(1, ps.size());\n        assertEquals(\"\", ps.get(0).text());\n        assertSame(partialDoc, parser.document());\n\n        Element title2 = parser.selectFirst(\"title\");\n        assertSame(title2, title);\n\n        Element p1 = parser.expectNext(\"p\");\n        assertEquals(\"P One\", p1.text());\n\n        Element p2 = parser.expectNext(\"p\");\n        assertEquals(\"P Two\", p2.text());\n\n        Element pNone = parser.selectNext(\"p\");\n        assertNull(pNone);\n    }\n\n    @Test void canRemoveFromDom() {\n        String html = \"<div>One</div><div>DESTROY</div><div>Two</div>\";\n        StreamParser parser = new StreamParser(Parser.htmlParser()).parse(html, \"\");\n        parser.parse(html, \"\");\n\n        parser.stream().forEach(\n            el -> {\n                if (el.ownText().equals(\"DESTROY\"))\n                    el.remove();\n            });\n\n        Document doc = parser.document();\n        Elements divs = doc.select(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"One Two\", divs.text());\n    }\n\n    @Test void canRemoveWithIterator() {\n        String html = \"<div>One</div><div>DESTROY</div><div>Two</div>\";\n        StreamParser parser = new StreamParser(Parser.htmlParser()).parse(html, \"\");\n        parser.parse(html, \"\");\n\n        Iterator<Element> it = parser.iterator();\n        while (it.hasNext()) {\n            Element el = it.next();\n            if (el.ownText().equals(\"DESTROY\"))\n                it.remove(); // we know el.remove() works, from above test\n        }\n\n        Document doc = parser.document();\n        Elements divs = doc.select(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"One Two\", divs.text());\n    }\n\n    @Test void canSelectWithHas() throws IOException {\n        StreamParser parser = basic();\n\n        Element el = parser.expectNext(\"div:has(p)\");\n        assertEquals(\"Two\", el.text());\n    }\n\n    @Test void canSelectWithSibling() throws IOException {\n        StreamParser parser = basic();\n\n        Element el = parser.expectNext(\"div:first-of-type\");\n        assertEquals(\"One\", el.text());\n\n        Element el2 = parser.selectNext(\"div:first-of-type\");\n        assertNull(el2);\n    }\n\n    @Test void canLoopOnSelectNext() throws IOException {\n        StreamParser streamer = new StreamParser(Parser.htmlParser()).parse(\"<div><p>One<p>Two<p>Thr</div>\", \"\");\n\n        int count = 0;\n        Element e;\n        while ((e = streamer.selectNext(\"p\")) != null) {\n            assertEquals(3, e.text().length()); // has a body\n            e.remove();\n            count++;\n        }\n\n        assertEquals(3, count);\n        assertEquals(0, streamer.document().select(\"p\").size()); // removed all during iter\n\n        assertTrue(isClosed(streamer)); // read to the end\n    }\n\n    @Test void worksWithXmlParser() throws IOException {\n        StreamParser streamer = new StreamParser(Parser.xmlParser()).parse(\"<div><p>One</p><p>Two</p><p>Thr</p></div>\", \"\");\n\n        int count = 0;\n        Element e;\n        while ((e = streamer.selectNext(\"p\")) != null) {\n            assertEquals(3, e.text().length()); // has a body\n            e.remove();\n            count++;\n        }\n\n        assertEquals(3, count);\n        assertEquals(0, streamer.document().select(\"p\").size()); // removed all during iter\n\n        assertTrue(isClosed(streamer)); // read to the end\n    }\n\n    @Test void closedOnStreamDrained() {\n        StreamParser streamer = basic();\n        assertFalse(isClosed(streamer));\n        long count = streamer.stream().count();\n        assertEquals(7, count);\n\n        assertTrue(isClosed(streamer));\n    }\n\n    @Test void closedOnIteratorDrained() {\n        StreamParser streamer = basic();\n\n        int count = 0;\n        Iterator<Element> it = streamer.iterator();\n        while (it.hasNext()) {\n            it.next();\n            count++;\n        }\n        assertEquals(7, count);\n        assertTrue(isClosed(streamer));\n    }\n\n    @Test void closedOnComplete() throws IOException {\n        StreamParser streamer = basic();\n        Document doc = streamer.complete();\n        assertTrue(isClosed(streamer));\n    }\n\n    @Test void closedOnTryWithResources() {\n        StreamParser copy;\n        try(StreamParser streamer = basic()) {\n            copy = streamer;\n            assertFalse(isClosed(copy));\n        }\n        assertTrue(isClosed(copy));\n    }\n\n    static StreamParser basic() {\n        String html = \"<div>One</div><div><p>Two</div>\";\n        StreamParser parser = new StreamParser(Parser.htmlParser()).parse(html, \"\");\n        parser.parse(html, \"\");\n        return parser;\n    }\n\n    static boolean isClosed(StreamParser streamer) {\n        // a bit of a back door in!\n        return getReader(streamer) == null;\n    }\n\n     private static CharacterReader getReader(StreamParser streamer) {\n        return streamer.document().parser().getTreeBuilder().reader;\n    }\n\n    @Test void doesNotReadPastParse() throws IOException {\n        StreamParser streamer = basic();\n        Element div = streamer.expectFirst(\"div\");\n\n        // we should have read the sibling div, but not yet its children p\n        Element sib = div.nextElementSibling();\n        assertNotNull(sib);\n        assertEquals(\"div\", sib.tagName());\n        assertEquals(0, sib.childNodeSize());\n\n        // the Reader should be at \"<p>\" because we haven't consumed it\n        assertTrue(getReader(streamer).matches(\"<p>Two\"));\n    }\n\n    @Test void canParseFileReader() throws IOException {\n        File file = ParseTest.getFile(\"/htmltests/large.html\");\n\n        // can't use FileReader from Java 11 here\n        InputStreamReader input = new InputStreamReader(Files.newInputStream(file.toPath()), StandardCharsets.UTF_8);\n        BufferedReader reader = new BufferedReader(input);\n        StreamParser streamer = new StreamParser(Parser.htmlParser()).parse(reader, file.getAbsolutePath());\n\n        Element last = null, e;\n        while ((e = streamer.selectNext(\"p\")) != null) {\n            last = e;\n        }\n        assertTrue(last.text().startsWith(\"VESTIBULUM\"));\n\n        // the reader should be closed as streamer is closed on completion of read\n        assertTrue(isClosed(streamer));\n\n        assertThrows(IOException.class, reader::ready); // ready() checks isOpen and throws\n    }\n\n    @Test void canParseFile() throws IOException {\n        File file = ParseTest.getFile(\"/htmltests/large.html\");\n        StreamParser streamer = DataUtil.streamParser(file.toPath(), StandardCharsets.UTF_8, \"\", Parser.htmlParser());\n\n        Element last = null, e;\n        while ((e = streamer.selectNext(\"p\")) != null) {\n            last = e;\n        }\n        assertTrue(last.text().startsWith(\"VESTIBULUM\"));\n\n        // the reader should be closed as streamer is closed on completion of read\n        assertTrue(isClosed(streamer));\n    }\n\n    @Test void canCleanlyConsumePortionOfUrl() throws IOException {\n        // test that we can get just the head section of large.html, and only read the minimum required from the URL\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n\n        AtomicReference<Float> seenPercent = new AtomicReference<>(0.0f);\n        StreamParser parserRef;\n\n        Connection con = Jsoup.connect(url)\n            .onResponseProgress((processed, total, percent, response) -> {\n                //System.out.println(\"Processed: \" + processed + \" Total: \" + total + \" Percent: \" + percent);\n                seenPercent.set(percent);\n            });\n\n        Connection.Response response = con.execute();\n        try (StreamParser parser = response.streamParser()) {\n            parserRef = parser;\n            // get the head section\n            Element head = parser.selectFirst(\"head\");\n            Element title = head.expectFirst(\"title\");\n            assertEquals(\"Large HTML\", title.text());\n        }\n        // now that we've left the try, the stream parser and the response bodystream should be closed\n        assertTrue(isClosed(parserRef));\n\n        // test that we didn't read all of the stream\n        assertTrue(seenPercent.get() > 0.0f);\n        assertTrue(seenPercent.get() < 100.0f);\n        // not sure of a good way to assert the bufferedInputReader buf (as held by ConstrainableInputStream in Response.BodyStream) is null. But it is via StreamParser.close.\n    }\n\n    // Fragments\n\n    @Test\n    void canStreamFragment() {\n        String html = \"<tr id=1><td>One</td><tr id=2><td>Two</td></tr><tr id=3><td>Three</td></tr>\";\n        Element context = new Element(\"table\");\n\n        try (StreamParser parser = new StreamParser(Parser.htmlParser()).parseFragment(html, context, \"\")) {\n            StringBuilder seen = new StringBuilder();\n            parser.stream().forEachOrdered(el -> trackSeen(el, seen));\n            assertEquals(\"td[One];tr#1+;td[Two];tr#2+;td[Three];tr#3;tbody;table;#root;\", seen.toString());\n            // checks expected order, and the + indicates that element had a next sibling at time of emission\n            // note that we don't get a full doc, just the fragment (and the context at the end of the stack)\n\n            assertTrue(isClosed(parser)); // as read to completion\n        }\n    }\n\n    @Test void canIterateFragment() {\n        // same as stream, just a different interface\n        String html = \"<tr id=1><td>One</td><tr id=2><td>Two</td></tr><tr id=3><td>Three</td></tr>\"; // missing </tr>, following <tr> infers it\n        Element context = new Element(\"table\");\n\n        try(StreamParser parser = new StreamParser(Parser.htmlParser()).parseFragment(html, context, \"\")) {\n            StringBuilder seen = new StringBuilder();\n\n            Iterator<Element> it = parser.iterator();\n            while (it.hasNext()) {\n                trackSeen(it.next(), seen);\n            }\n\n            assertEquals(\"td[One];tr#1+;td[Two];tr#2+;td[Three];tr#3;tbody;table;#root;\", seen.toString());\n            // checks expected order, and the + indicates that element had a next sibling at time of emission\n            // note that we don't get a full doc, just the fragment (and the context at the end of the stack)\n\n            assertTrue(isClosed(parser)); // as read to completion\n        }\n    }\n\n    @Test\n    void canSelectAndCompleteFragment() throws IOException {\n        String html = \"<tr id=1><td>One</td><tr id=2><td>Two</td></tr><tr id=3><td>Three</td></tr>\";\n        Element context = new Element(\"table\");\n\n        try (StreamParser parser = new StreamParser(Parser.htmlParser()).parseFragment(html, context, \"\")) {\n            Element first = parser.expectNext(\"td\");\n            assertEquals(\"One\", first.ownText());\n\n            Element el = parser.expectNext(\"td\");\n            assertEquals(\"Two\", el.ownText());\n\n            el = parser.expectNext(\"td\");\n            assertEquals(\"Three\", el.ownText());\n\n            el = parser.selectNext(\"td\");\n            assertNull(el);\n\n            List<Node> nodes = parser.completeFragment();\n            assertEquals(1, nodes.size()); // should be the inferred tbody\n            Node tbody = nodes.get(0);\n            assertEquals(\"tbody\", tbody.nodeName());\n            List<Node> trs = tbody.childNodes();\n            assertEquals(3, trs.size()); // should be the three TRs\n            assertSame(trs.get(0).childNode(0), first); // tr -> td\n\n            assertSame(parser.document(), first.ownerDocument()); // the shell document for this fragment\n        }\n    }\n\n    @Test\n    void canStreamFragmentXml() throws IOException {\n        String html = \"<tr id=1><td>One</td></tr><tr id=2><td>Two</td></tr><tr id=3><td>Three</td></tr>\";\n        Element context = new Element(\"Other\");\n\n        try (StreamParser parser = new StreamParser(Parser.xmlParser()).parseFragment(html, context, \"\")) {\n            StringBuilder seen = new StringBuilder();\n            parser.stream().forEachOrdered(el -> trackSeen(el, seen));\n            assertEquals(\"td[One];tr#1+;td[Two];tr#2+;td[Three];tr#3;#root;\", seen.toString());\n            // checks expected order, and the + indicates that element had a next sibling at time of emission\n            // note that we don't get a full doc, just the fragment\n\n            assertTrue(isClosed(parser)); // as read to completion\n\n            List<Node> nodes = parser.completeFragment();\n            assertEquals(3, nodes.size());\n            assertEquals(\"tr\", nodes.get(0).nodeName());\n        }\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/PositionTest.java.PositionTest", "name": "PositionTest", "file_path": "src/test/java/org/jsoup/parser/PositionTest.java", "superclasses": "", "methods": ["[void]parserTrackDefaults()", "[void]tracksPosition()", "[void]tracksExpectedPoppedElements()", "[void]tracksImplicitPoppedElements()", "[void]tracksMarkup()", "[void]tracksDataNodes()", "[void]tracksXml()", "[void]tracksFromFetch()", "[void]tracksFromXmlFetch()", "[void]tracksTableMovedText()", "[void]tracksClosingHtmlTagsInXml()", "[void]tracksClosingHeadingTags()", "[void]tracksAttributes()", "[void]tracksAttributesAcrossLines()", "[void]trackAttributePositionInFirstElement()", "[void]trackAttributePositionWithCase()", "[void]trackAttributesPositionsDedupes()", "[void]trackAttributesPositionsDirectionalDedupes()", "[void]tracksFrag()", "[void]tracksAfterPSelfClose()", "[void]tracksFirstTextnode()", "[void]updateKeyMaintainsRangeLc()", "[void]tracksDocument()", "[void]tracksDocumentXml()", "[void]updateKeyMaintainsRangeUc()"], "method_uris": ["src/test/java/org/jsoup/parser/PositionTest.java.PositionTest.[void]accumulatePositions(Node,StringBuilder)", "src/test/java/org/jsoup/parser/PositionTest.java.PositionTest.[void]printRange(Node)", "src/test/java/org/jsoup/parser/PositionTest.java.PositionTest.[void]accumulateAttributePositions(Node,StringBuilder)", "src/test/java/org/jsoup/parser/PositionTest.java.PositionTest.[void]accumulatePositions(Attribute,StringBuilder)"], "overrides": null, "attributes": [], "class_docstring": "\nFunctional tests for the Position tracking behavior (across nodes, treebuilder, etc.)\n", "original_string": "class PositionTest {\n    static Parser TrackingHtmlParser = Parser.htmlParser().setTrackPosition(true);\n    static Parser TrackingXmlParser = Parser.xmlParser().setTrackPosition(true);\n\n    @Test void parserTrackDefaults() {\n        Parser htmlParser = Parser.htmlParser();\n        assertFalse(htmlParser.isTrackPosition());\n        htmlParser.setTrackPosition(true);\n        assertTrue(htmlParser.isTrackPosition());\n\n        Parser xmlParser = Parser.xmlParser();\n        assertFalse(xmlParser.isTrackPosition());\n        xmlParser.setTrackPosition(true);\n        assertTrue(xmlParser.isTrackPosition());\n    }\n\n    @Test void tracksPosition() {\n        String content = \"<p id=1\\n class=foo>\\n<span>Hello\\n &reg;\\n there &copy.</span> now.\\n <!-- comment --> \";\n        Document doc = Jsoup.parse(content, TrackingHtmlParser);\n\n        Element html = doc.expectFirst(\"html\");\n        Element body = doc.expectFirst(\"body\");\n        Element p = doc.expectFirst(\"p\");\n        Element span = doc.expectFirst(\"span\");\n        TextNode text = (TextNode) span.firstChild();\n        assertNotNull(text);\n        TextNode now = (TextNode) span.nextSibling();\n        assertNotNull(now);\n        Comment comment = (Comment) now.nextSibling();\n        assertNotNull(comment);\n\n        // implicit\n        assertTrue(body.sourceRange().isTracked());\n        assertTrue(body.endSourceRange().isTracked());\n        assertTrue(body.sourceRange().isImplicit());\n        assertTrue(body.endSourceRange().isImplicit());\n        Range htmlRange = html.sourceRange();\n        assertEquals(\"1,1:0-1,1:0\", htmlRange.toString());\n        assertEquals(htmlRange, body.sourceRange());\n        assertEquals(html.endSourceRange(), body.endSourceRange());\n\n\n        Range pRange = p.sourceRange();\n        assertEquals(\"1,1:0-2,12:19\", pRange.toString());\n        assertFalse(pRange.isImplicit());\n        assertTrue(p.endSourceRange().isImplicit());\n        assertEquals(\"6,19:83-6,19:83\", p.endSourceRange().toString());\n        assertEquals(p.endSourceRange(), html.endSourceRange());\n\n        // no explicit P closer\n        Range pEndRange = p.endSourceRange();\n        assertTrue(pEndRange.isTracked());\n        assertTrue(pEndRange.isImplicit());\n\n        Range.Position pStart = pRange.start();\n        assertTrue(pStart.isTracked());\n        assertEquals(0, pStart.pos());\n        assertEquals(1, pStart.columnNumber());\n        assertEquals(1, pStart.lineNumber());\n        assertEquals(\"1,1:0\", pStart.toString());\n\n        Range.Position pEnd = pRange.end();\n        assertTrue(pStart.isTracked());\n        assertEquals(19, pEnd.pos());\n        assertEquals(12, pEnd.columnNumber());\n        assertEquals(2, pEnd.lineNumber());\n        assertEquals(\"2,12:19\", pEnd.toString());\n\n        assertEquals(\"3,1:20\", span.sourceRange().start().toString());\n        assertEquals(\"3,7:26\", span.sourceRange().end().toString());\n\n        // span end tag\n        Range spanEnd = span.endSourceRange();\n        assertTrue(spanEnd.isTracked());\n        assertEquals(\"5,14:52-5,21:59\", spanEnd.toString());\n\n        String wholeText = text.getWholeText();\n        assertEquals(\"Hello\\n \u00ae\\n there \u00a9.\", wholeText);\n        String textOrig = \"Hello\\n &reg;\\n there &copy.\";\n        Range textRange = text.sourceRange();\n        assertEquals(textRange.end().pos() -  textRange.start().pos(), textOrig.length());\n        assertEquals(\"3,7:26\", textRange.start().toString());\n        assertEquals(\"5,14:52\", textRange.end().toString());\n\n        assertEquals(\"6,2:66\", comment.sourceRange().start().toString());\n        assertEquals(\"6,18:82\", comment.sourceRange().end().toString());\n    }\n\n    @Test void tracksExpectedPoppedElements() {\n        // When TreeBuilder hits a direct .pop(), vs popToClose(..)\n        String html = \"<html><head><meta></head><body><img><p>One</p><p>Two</p></body></html>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        StringBuilder track = new StringBuilder();\n        doc.expectFirst(\"html\").stream().forEach(el -> {\n            accumulatePositions(el, track);\n            assertTrue(el.sourceRange().isTracked(), el.tagName());\n            assertTrue(el.endSourceRange().isTracked(), el.tagName());\n            assertFalse(el.sourceRange().isImplicit(), el.tagName());\n            assertFalse(el.endSourceRange().isImplicit(), el.tagName());\n        });\n        assertEquals(\"html:0-6~63-70; head:6-12~18-25; meta:12-18~12-18; body:25-31~56-63; img:31-36~31-36; p:36-39~42-46; p:46-49~52-56; \", track.toString());\n\n        StringBuilder textTrack = new StringBuilder();\n        doc.nodeStream(TextNode.class).forEach(text -> accumulatePositions(text, textTrack));\n        assertEquals(\"#text:39-42; #text:49-52; \", textTrack.toString());\n    }\n\n    static void accumulatePositions(Node node, StringBuilder sb) {\n        sb\n            .append(node.nodeName())\n            .append(':')\n            .append(node.sourceRange().startPos())\n            .append('-')\n            .append(node.sourceRange().endPos());\n\n        if (node instanceof Element) {\n            Element el = (Element) node;\n            sb\n                .append(\"~\")\n                .append(el.endSourceRange().startPos())\n                .append('-')\n                .append(el.endSourceRange().endPos());\n        }\n        sb.append(\"; \");\n    }\n\n    @Test void tracksImplicitPoppedElements() {\n        // When TreeBuilder hits a direct .pop(), vs popToClose(..)\n        String html = \"<meta><img><p>One<p>Two<p>Three\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        StringBuilder track = new StringBuilder();\n        doc.expectFirst(\"html\").stream().forEach(el -> {\n            assertTrue(el.sourceRange().isTracked());\n            assertTrue(el.endSourceRange().isTracked());\n            accumulatePositions(el, track);\n        });\n\n        assertTrue(doc.expectFirst(\"p\").endSourceRange().isImplicit());\n        assertFalse(doc.expectFirst(\"meta\").endSourceRange().isImplicit());\n        assertEquals(\"html:0-0~31-31; head:0-0~6-6; meta:0-6~0-6; body:6-6~31-31; img:6-11~6-11; p:11-14~17-17; p:17-20~23-23; p:23-26~31-31; \", track.toString());\n    }\n    private void printRange(Node node) {\n        if (node instanceof Element) {\n            Element el = (Element) node;\n            System.out.println(el.tagName() + \"\\t\"\n                + el.sourceRange().start().pos() + \"-\" + el.sourceRange().end().pos()\n                + \"\\t... \"\n                + el.endSourceRange().start().pos() + \"-\" + el.endSourceRange().end().pos()\n            );\n        } else {\n            System.out.println(node.nodeName() + \"\\t\"\n                + node.sourceRange().start().pos() + \"-\" + node.sourceRange().end().pos()\n            );\n        }\n    }\n\n    @Test void tracksMarkup() {\n        String html = \"<!doctype\\nhtml>\\n<title>jsoup &copy;\\n2022</title><body>\\n<![CDATA[\\n<jsoup>\\n]]>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        DocumentType doctype = doc.documentType();\n        assertNotNull(doctype);\n        assertEquals(\"html\", doctype.name());\n        assertEquals(\"1,1:0-2,6:15\", doctype.sourceRange().toString());\n\n        Element title = doc.expectFirst(\"title\");\n        TextNode titleText = (TextNode) title.firstChild();\n        assertNotNull(titleText);\n        assertEquals(\"jsoup \u00a9\\n2022\", title.text());\n        assertEquals(titleText.getWholeText(), title.text());\n        assertEquals(\"3,1:16-3,8:23\", title.sourceRange().toString());\n        assertEquals(\"3,8:23-4,5:40\", titleText.sourceRange().toString());\n\n        CDataNode cdata = (CDataNode) doc.body().childNode(1);\n        assertEquals(\"\\n<jsoup>\\n\", cdata.text());\n        assertEquals(\"5,1:55-7,4:76\", cdata.sourceRange().toString());\n    }\n\n    @Test void tracksDataNodes() {\n        String html = \"<head>\\n<script>foo;\\nbar()\\n5 <= 4;</script>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        Element script = doc.expectFirst(\"script\");\n        assertNotNull(script);\n        assertEquals(\"2,1:7-2,9:15\", script.sourceRange().toString());\n        DataNode data = (DataNode) script.firstChild();\n        assertNotNull(data);\n        assertEquals(\"2,9:15-4,8:33\", data.sourceRange().toString());\n    }\n\n    @Test void tracksXml() {\n        String xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<!doctype html>\\n<rss url=foo>\\nXML\\n</rss>\\n<!-- comment -->\";\n        Document doc = Jsoup.parse(xml, TrackingXmlParser);\n\n        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);\n        assertEquals(\"1,1:0-1,39:38\", decl.sourceRange().toString());\n\n        DocumentType doctype = (DocumentType) doc.childNode(2);\n        assertEquals(\"2,1:39-2,16:54\", doctype.sourceRange().toString());\n\n        Element rss = doc.firstElementChild();\n        assertNotNull(rss);\n        assertEquals(\"3,1:55-3,14:68\", rss.sourceRange().toString());\n        assertEquals(\"5,1:73-5,7:79\", rss.endSourceRange().toString());\n\n        TextNode text = (TextNode) rss.firstChild();\n        assertNotNull(text);\n        assertEquals(\"3,14:68-5,1:73\", text.sourceRange().toString());\n\n        Comment comment = (Comment) rss.nextSibling().nextSibling();\n        assertEquals(\"6,1:80-6,17:96\", comment.sourceRange().toString());\n    }\n\n    @Test void tracksFromFetch() throws IOException {\n        String url = FileServlet.urlTo(\"/htmltests/large.html\"); // 280 K\n        Document doc = Jsoup.connect(url).parser(TrackingHtmlParser).get();\n\n        Element firstP = doc.expectFirst(\"p\");\n        assertNotNull(firstP);\n        assertEquals(\"4,1:53-4,4:56\", firstP.sourceRange().toString());\n\n        Element p = doc.expectFirst(\"#xy\");\n        assertNotNull(p);\n        assertEquals(\"1000,1:279646-1000,10:279655\", p.sourceRange().toString());\n        assertEquals(\"1000,567:280212-1000,571:280216\", p.endSourceRange().toString());\n\n        TextNode text = (TextNode) p.firstChild();\n        assertNotNull(text);\n        assertEquals(\"1000,10:279655-1000,357:280002\", text.sourceRange().toString());\n    }\n\n    @Test void tracksFromXmlFetch() throws IOException {\n        String url = FileServlet.urlTo(\"/htmltests/test-rss.xml\");\n        Document doc = Jsoup.connect(url).parser(TrackingXmlParser).get();\n\n        Element item = doc.expectFirst(\"item + item\");\n        assertNotNull(item);\n        assertEquals(\"13,5:496-13,11:502\", item.sourceRange().toString());\n        assertEquals(\"17,5:779-17,12:786\", item.endSourceRange().toString());\n    }\n\n    @Test void tracksTableMovedText() {\n        String html = \"<table>foo<tr>bar<td>baz</td>qux</tr>coo</table>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        StringBuilder track = new StringBuilder();\n        List<TextNode> textNodes = doc.nodeStream(TextNode.class)\n            .peek(node -> accumulatePositions(node, track))\n            .collect(Collectors.toList());\n\n        assertEquals(5, textNodes.size());\n        assertEquals(\"foo\", textNodes.get(0).text());\n        assertEquals(\"bar\", textNodes.get(1).text());\n        assertEquals(\"baz\", textNodes.get(2).text());\n        assertEquals(\"qux\", textNodes.get(3).text());\n        assertEquals(\"coo\", textNodes.get(4).text());\n\n        assertEquals(\"#text:7-10; #text:14-17; #text:21-24; #text:29-32; #text:37-40; \", track.toString());\n    }\n\n    @Test void tracksClosingHtmlTagsInXml() {\n        // verifies https://github.com/jhy/jsoup/issues/1935\n        String xml = \"<p>One</p><title>Two</title><data>Three</data>\";\n        Document doc = Jsoup.parse(xml, TrackingXmlParser);\n        Elements els = doc.children();\n        for (Element el : els) {\n            assertTrue(el.sourceRange().isTracked());\n            assertTrue(el.endSourceRange().isTracked());\n        }\n    }\n\n    @Test void tracksClosingHeadingTags() {\n        // https://github.com/jhy/jsoup/issues/1987\n        String html = \"<h1>One</h1><h2>Two</h2><h10>Ten</h10>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        Elements els = doc.body().children();\n        for (Element el : els) {\n            assertTrue(el.sourceRange().isTracked());\n            assertTrue(el.endSourceRange().isTracked());\n        }\n\n        Element h2 = doc.expectFirst(\"h2\");\n        assertEquals(\"1,13:12-1,17:16\", h2.sourceRange().toString());\n        assertEquals(\"1,20:19-1,25:24\", h2.endSourceRange().toString());\n    }\n\n    @Test void tracksAttributes() {\n        String html = \"<div one=\\\"Hello there\\\" id=1 class=foo attr1 = \\\"bar &amp; qux\\\" attr2='val &gt x' attr3=\\\"\\\" attr4 attr5>Text\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        Element div = doc.expectFirst(\"div\");\n\n        StringBuilder track = new StringBuilder();\n        for (Attribute attr : div.attributes()) {\n\n            Range.AttributeRange attrRange = attr.sourceRange();\n            assertTrue(attrRange.nameRange().isTracked());\n            assertTrue(attrRange.valueRange().isTracked());\n            assertSame(attrRange, div.attributes().sourceRange(attr.getKey()));\n\n            assertFalse(attrRange.nameRange().isImplicit());\n            if (attr.getValue().isEmpty())\n                assertTrue(attrRange.valueRange().isImplicit());\n            else\n                assertFalse(attrRange.valueRange().isImplicit());\n\n            accumulatePositions(attr, track);\n        }\n\n        assertEquals(\"one:5-8=10-21; id:23-25=26-27; class:28-33=34-37; attr1:38-43=47-60; attr2:62-67=69-78; attr3:80-85=85-85; attr4:89-94=94-94; attr5:95-100=100-100; \", track.toString());\n    }\n\n    @Test void tracksAttributesAcrossLines() {\n        String html = \"<div one=\\\"Hello\\nthere\\\" \\nid=1 \\nclass=\\nfoo\\nattr5>Text\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n\n        Element div = doc.expectFirst(\"div\");\n\n        StringBuilder track = new StringBuilder();\n        for (Attribute attr : div.attributes()) {\n            Range.AttributeRange attrRange = attr.sourceRange();\n            assertTrue(attrRange.nameRange().isTracked());\n            assertTrue(attrRange.valueRange().isTracked());\n            assertSame(attrRange, div.attributes().sourceRange(attr.getKey()));\n            assertFalse(attrRange.nameRange().isImplicit());\n            if (attr.getValue().isEmpty())\n                assertTrue(attrRange.valueRange().isImplicit());\n            else\n                assertFalse(attrRange.valueRange().isImplicit());\n            accumulatePositions(attr, track);\n        }\n\n        String value = div.attributes().get(\"class\");\n        assertEquals(\"foo\", value);\n        Range.AttributeRange foo = div.attributes().sourceRange(\"class\");\n        assertEquals(\"4,1:30-4,6:35=5,1:37-5,4:40\", foo.toString());\n\n        assertEquals(\"one:5-8=10-21; id:24-26=27-28; class:30-35=37-40; attr5:41-46=46-46; \", track.toString());\n    }\n\n    @Test void trackAttributePositionInFirstElement() {\n        String html = \"<html lang=en class=dark><p hidden></p></html>\";\n\n        Document htmlDoc = Jsoup.parse(html, TrackingHtmlParser);\n        StringBuilder htmlPos = new StringBuilder();\n        htmlDoc.expectFirst(\"html\").nodeStream().forEach(node -> {\n            accumulatePositions(node, htmlPos);\n            accumulateAttributePositions(node, htmlPos);\n        });\n\n        assertEquals(\"html:0-25~39-46; lang:6-10=11-13; class:14-19=20-24; head:25-25~25-25; body:25-25~46-46; p:25-35~35-39; hidden:28-34=34-34; \", htmlPos.toString());\n\n        Document xmlDoc = Jsoup.parse(html, TrackingXmlParser);\n        StringBuilder xmlPos = new StringBuilder();\n        xmlDoc.expectFirst(\"html\").nodeStream().forEach(node -> {\n            accumulatePositions(node, xmlPos);\n            accumulateAttributePositions(node, xmlPos);\n        });\n\n        assertEquals(\"html:0-25~39-46; lang:6-10=11-13; class:14-19=20-24; p:25-35~35-39; hidden:28-34=34-34; \", xmlPos.toString());\n    }\n\n    @Test void trackAttributePositionWithCase() {\n        String pomXml = \"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\">\\n\" +\n            \"    <modelVersion>4.0.0</modelVersion>\";\n\n        Document htmlDoc = Jsoup.parse(pomXml, TrackingHtmlParser);\n        StringBuilder htmlPos = new StringBuilder();\n        htmlDoc.expectFirst(\"html\").nodeStream().forEach(node -> {\n            accumulatePositions(node, htmlPos);\n            accumulateAttributePositions(node, htmlPos);\n        });\n\n        assertEquals(\"html:0-0~243-243; head:0-0~0-0; body:0-0~243-243; project:0-204~243-243; xmlns:9-14=16-49; xmlns:xsi:51-60=62-103; xsi:schemalocation:105-123=125-202; #text:204-209; modelversion:209-223~228-243; #text:223-228; \", htmlPos.toString());\n\n        Document xmlDoc = Jsoup.parse(pomXml, TrackingXmlParser);\n        StringBuilder xmlPos = new StringBuilder();\n        xmlDoc.expectFirst(\"project\").nodeStream().forEach(node -> {\n            accumulatePositions(node, xmlPos);\n            accumulateAttributePositions(node, xmlPos);\n        });\n\n        assertEquals(\"project:0-204~243-243; xmlns:9-14=16-49; xmlns:xsi:51-60=62-103; xsi:schemaLocation:105-123=125-202; #text:204-209; modelVersion:209-223~228-243; #text:223-228; \", xmlPos.toString());\n\n        Document xmlDocLc = Jsoup.parse(pomXml, Parser.xmlParser().setTrackPosition(true).settings(new ParseSettings(false, false)));\n        StringBuilder xmlPosLc = new StringBuilder();\n        xmlDocLc.expectFirst(\"project\").nodeStream().forEach(node -> {\n            accumulatePositions(node, xmlPosLc);\n            accumulateAttributePositions(node, xmlPosLc);\n        });\n\n        assertEquals(\"project:0-204~243-243; xmlns:9-14=16-49; xmlns:xsi:51-60=62-103; xsi:schemalocation:105-123=125-202; #text:204-209; modelversion:209-223~228-243; #text:223-228; \", xmlPosLc.toString());\n    }\n\n\n    @Test void trackAttributesPositionsDedupes() {\n        String html = \"<p id=1 id=2 Id=3 Id=4 id=5 Id=6>\";\n        Document      htmlDoc   = Jsoup.parse(html, TrackingHtmlParser);\n        Document      htmlDocUc = Jsoup.parse(html, Parser.htmlParser().setTrackPosition(true).settings(new ParseSettings(true, true)));\n        Document      xmlDoc    = Jsoup.parse(html, TrackingXmlParser);\n        Document      xmlDocLc  = Jsoup.parse(html, Parser.xmlParser().setTrackPosition(true).settings(new ParseSettings(false, false)));\n\n        StringBuilder htmlPos   = new StringBuilder();\n        StringBuilder htmlUcPos = new StringBuilder();\n        StringBuilder xmlPos    = new StringBuilder();\n        StringBuilder xmlLcPos  = new StringBuilder();\n\n        accumulateAttributePositions(htmlDoc   .expectFirst(\"p\"), htmlPos);\n        accumulateAttributePositions(htmlDocUc .expectFirst(\"p\"), htmlUcPos);\n        accumulateAttributePositions(xmlDoc    .expectFirst(\"p\"), xmlPos);\n        accumulateAttributePositions(xmlDocLc  .expectFirst(\"p\"), xmlLcPos);\n\n        assertEquals(\"id:3-5=6-7; \", htmlPos   .toString());\n        assertEquals(\"id:3-5=6-7; Id:13-15=16-17; \", htmlUcPos .toString());\n        assertEquals(\"id:3-5=6-7; Id:13-15=16-17; \", xmlPos    .toString());\n        assertEquals(\"id:3-5=6-7; \", xmlLcPos .toString());\n    }\n\n    @Test void trackAttributesPositionsDirectionalDedupes() {\n        String html = \"<p Id=1 id=2 Id=3 Id=4 id=5 Id=6>\";\n        Document      htmlDoc   = Jsoup.parse(html, TrackingHtmlParser);\n        Document      htmlDocUc = Jsoup.parse(html, Parser.htmlParser().setTrackPosition(true).settings(new ParseSettings(true, true)));\n        Document      xmlDoc    = Jsoup.parse(html, TrackingXmlParser);\n        Document      xmlDocLc  = Jsoup.parse(html, Parser.xmlParser().setTrackPosition(true).settings(new ParseSettings(false, false)));\n\n        StringBuilder htmlPos   = new StringBuilder();\n        StringBuilder htmlUcPos = new StringBuilder();\n        StringBuilder xmlPos    = new StringBuilder();\n        StringBuilder xmlLcPos  = new StringBuilder();\n\n        accumulateAttributePositions(htmlDoc   .expectFirst(\"p\"), htmlPos);\n        accumulateAttributePositions(htmlDocUc .expectFirst(\"p\"), htmlUcPos);\n        accumulateAttributePositions(xmlDoc    .expectFirst(\"p\"), xmlPos);\n        accumulateAttributePositions(xmlDocLc  .expectFirst(\"p\"), xmlLcPos);\n\n        assertEquals(\"id:3-5=6-7; \", htmlPos   .toString());\n        assertEquals(\"Id:3-5=6-7; id:8-10=11-12; \", htmlUcPos .toString());\n        assertEquals(\"Id:3-5=6-7; id:8-10=11-12; \", xmlPos    .toString());\n        assertEquals(\"id:3-5=6-7; \", xmlLcPos .toString());\n    }\n\n    @Test void tracksFrag() {\n        // https://github.com/jhy/jsoup/issues/2068\n        String html = \"<h1 id=1>One</h1>\\n<h2 id=2>Two</h2><h10>Ten</h10>\";\n        Document shellDoc = Document.createShell(\"\");\n\n        List<Node> nodes = TrackingHtmlParser.parseFragmentInput(html, shellDoc.body(), shellDoc.baseUri());\n        StringBuilder track = new StringBuilder();\n\n        // nodes is the top level nodes - want to descend to check all tracked OK\n        nodes.forEach(node -> node.nodeStream().forEach(descend -> {\n            accumulatePositions(descend, track);\n            accumulateAttributePositions(descend, track);\n        }));\n\n        assertEquals(\"h1:0-9~12-17; id:4-6=7-8; #text:9-12; #text:17-18; h2:18-27~30-35; id:22-24=25-26; #text:27-30; h10:35-40~43-49; #text:40-43; \", track.toString());\n    }\n\n    @Test void tracksAfterPSelfClose() {\n        // https://github.com/jhy/jsoup/issues/2175\n        String html = \"foo<p/>bar &amp; 2\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n        StringBuilder track = new StringBuilder();\n        doc.body().forEachNode(node -> accumulatePositions(node, track));\n        assertEquals(\"body:0-0~18-18; #text:0-3; p:3-7~3-7; #text:7-18; \", track.toString());\n    }\n\n    @Test void tracksFirstTextnode() {\n        // https://github.com/jhy/jsoup/issues/2106\n        String html = \"foo<p></p>bar<p></p><div><b>baz</b></div>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n        StringBuilder track = new StringBuilder();\n        doc.body().forEachNode(node -> accumulatePositions(node, track));\n        assertEquals(\"body:0-0~41-41; #text:0-3; p:3-6~6-10; #text:10-13; p:13-16~16-20; div:20-25~35-41; b:25-28~31-35; #text:28-31; \", track.toString());\n    }\n\n    @Test void updateKeyMaintainsRangeLc() {\n        String html = \"<p xsi:CLASS=On>One</p>\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n        Element p = doc.expectFirst(\"p\");\n        Attribute attr = p.attribute(\"xsi:class\");\n        assertNotNull(attr);\n\n        String expectedRange = \"1,4:3-1,13:12=1,14:13-1,16:15\";\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        attr.setKey(\"class\");\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        assertEquals(\"class=\\\"On\\\"\", attr.html());\n    }\n\n    @Test void tracksDocument() {\n        String html = \"<!doctype html><title>Foo</title><p>Bar.\";\n        Document doc = Jsoup.parse(html, TrackingHtmlParser);\n        StringBuilder track = new StringBuilder();\n        doc.forEachNode(node -> accumulatePositions(node, track));\n        assertEquals(\"#document:0-0~40-40; #doctype:0-15; html:15-15~40-40; head:15-15~33-33; title:15-22~15-33; #text:22-25; body:33-33~40-40; p:33-36~40-40; #text:36-40; \", track.toString());\n    }\n\n    @Test void tracksDocumentXml() {\n        String html = \"<!doctype html><title>Foo</title><p>Bar.\";\n        Document doc = Jsoup.parse(html, TrackingXmlParser);\n        StringBuilder track = new StringBuilder();\n        doc.forEachNode(node -> accumulatePositions(node, track));\n        assertEquals(\"#document:0-0~40-40; #doctype:0-15; title:15-22~25-33; #text:22-25; p:33-36~40-40; #text:36-40; \", track.toString());\n    }\n\n    @Test void updateKeyMaintainsRangeUc() {\n        String html = \"<p xsi:CLASS=On>One</p>\";\n        Document doc = Jsoup.parse(html, TrackingXmlParser);\n        Element p = doc.expectFirst(\"p\");\n        Attribute attr = p.attribute(\"xsi:CLASS\");\n        assertNotNull(attr);\n\n        String expectedRange = \"1,4:3-1,13:12=1,14:13-1,16:15\";\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        attr.setKey(\"class\");\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        assertEquals(\"class=\\\"On\\\"\", attr.html());\n\n        attr.setKey(\"CLASSY\");\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        assertEquals(\"CLASSY=\\\"On\\\"\", attr.html());\n\n        attr.setValue(\"To\");\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        assertEquals(\"CLASSY=\\\"To\\\"\", attr.html());\n\n        assertEquals(\"<p CLASSY=\\\"To\\\">One</p>\", p.outerHtml());\n\n        p.attr(\"CLASSY\", \"Tree\");\n        assertEquals(expectedRange, attr.sourceRange().toString());\n        assertEquals(\"CLASSY=\\\"To\\\"\", attr.html()); // changes in this direction do not get to the attribute as it's not connected that way\n\n        Attribute attr2 = p.attribute(\"CLASSY\");\n        assertEquals(\"CLASSY=\\\"Tree\\\"\", attr2.html());\n        assertEquals(expectedRange, attr2.sourceRange().toString());\n    }\n\n    static void accumulateAttributePositions(Node node, StringBuilder sb) {\n        if (node instanceof LeafNode) return; // leafnode pseudo attributes are not tracked\n        for (Attribute attribute : node.attributes()) {\n            accumulatePositions(attribute, sb);\n        }\n    }\n\n    static void accumulatePositions(Attribute attr, StringBuilder sb) {\n        Range.AttributeRange range = attr.sourceRange();\n\n        sb\n            .append(attr.getKey())\n            .append(':')\n            .append(range.nameRange().startPos())\n            .append('-')\n            .append(range.nameRange().endPos())\n\n            .append('=')\n            .append(range.valueRange().startPos())\n            .append('-')\n            .append(range.valueRange().endPos());\n\n        sb.append(\"; \");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "static Parser TrackingHtmlParser = Parser.htmlParser().setTrackPosition(true);", "docstring": "", "modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "type": "Parser", "name": "TrackingHtmlParser = Parser.htmlParser().setTrackPosition(true)", "syntax_pass": true}, {"attribute_expression": "static Parser TrackingXmlParser = Parser.xmlParser().setTrackPosition(true);", "docstring": "", "modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "type": "Parser", "name": "TrackingXmlParser = Parser.xmlParser().setTrackPosition(true)", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/parser/TagTest.java.TagTest", "name": "TagTest", "file_path": "src/test/java/org/jsoup/parser/TagTest.java", "superclasses": "", "methods": ["[void]isCaseSensitive()", "[void]trims()", "[void]equality()", "[void]divSemantics()", "[void]pSemantics()", "[void]imgSemantics()", "[void]defaultSemantics()", "[void]valueOfChecksNotNull()", "[void]valueOfChecksNotEmpty()", "[void]knownTags()", "[void]knownSvgNamespace()", "[void]unknownTagNamespace()"], "method_uris": ["src/test/java/org/jsoup/parser/TagTest.java.TagTest.[void]canBeInsensitive(Locale)"], "overrides": null, "attributes": [], "class_docstring": "\nTag tests.\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class TagTest {\n    @Test public void isCaseSensitive() {\n        Tag p1 = Tag.valueOf(\"P\");\n        Tag p2 = Tag.valueOf(\"p\");\n        assertNotEquals(p1, p2);\n    }\n\n    @MultiLocaleTest\n    public void canBeInsensitive(Locale locale) {\n        Locale.setDefault(locale);\n\n        Tag script1 = Tag.valueOf(\"script\", ParseSettings.htmlDefault);\n        Tag script2 = Tag.valueOf(\"SCRIPT\", ParseSettings.htmlDefault);\n        assertSame(script1, script2);\n    }\n\n    @Test public void trims() {\n        Tag p1 = Tag.valueOf(\"p\");\n        Tag p2 = Tag.valueOf(\" p \");\n        assertEquals(p1, p2);\n    }\n\n    @Test public void equality() {\n        Tag p1 = Tag.valueOf(\"p\");\n        Tag p2 = Tag.valueOf(\"p\");\n        assertEquals(p1, p2);\n        assertSame(p1, p2);\n    }\n\n    @Test public void divSemantics() {\n        Tag div = Tag.valueOf(\"div\");\n\n        assertTrue(div.isBlock());\n        assertTrue(div.formatAsBlock());\n    }\n\n    @Test public void pSemantics() {\n        Tag p = Tag.valueOf(\"p\");\n\n        assertTrue(p.isBlock());\n        assertFalse(p.formatAsBlock());\n    }\n\n    @Test public void imgSemantics() {\n        Tag img = Tag.valueOf(\"img\");\n        assertTrue(img.isInline());\n        assertTrue(img.isSelfClosing());\n        assertFalse(img.isBlock());\n    }\n\n    @Test public void defaultSemantics() {\n        Tag foo = Tag.valueOf(\"FOO\"); // not defined\n        Tag foo2 = Tag.valueOf(\"FOO\");\n\n        assertEquals(foo, foo2);\n        assertTrue(foo.isInline());\n        assertTrue(foo.formatAsBlock());\n    }\n\n    @Test public void valueOfChecksNotNull() {\n        assertThrows(IllegalArgumentException.class, () -> Tag.valueOf(null));\n    }\n\n    @Test public void valueOfChecksNotEmpty() {\n        assertThrows(IllegalArgumentException.class, () -> Tag.valueOf(\" \"));\n    }\n\n    @Test public void knownTags() {\n        assertTrue(Tag.isKnownTag(\"div\"));\n        assertFalse(Tag.isKnownTag(\"explain\"));\n    }\n\n    @Test public void knownSvgNamespace() {\n        Tag svgHtml = Tag.valueOf(\"svg\"); // no namespace specified, defaults to html, so not the known tag\n        Tag svg = Tag.valueOf(\"svg\", Parser.NamespaceSvg, ParseSettings.htmlDefault);\n\n        assertEquals(Parser.NamespaceHtml, svgHtml.namespace());\n        assertEquals(Parser.NamespaceSvg, svg.namespace());\n\n        assertFalse(svgHtml.isBlock()); // generated\n        assertTrue(svg.isBlock()); // known\n    }\n\n    @Test public void unknownTagNamespace() {\n        Tag fooHtml = Tag.valueOf(\"foo\"); // no namespace specified, defaults to html\n        Tag foo = Tag.valueOf(\"foo\", Parser.NamespaceSvg, ParseSettings.htmlDefault);\n\n        assertEquals(Parser.NamespaceHtml, fooHtml.namespace());\n        assertEquals(Parser.NamespaceSvg, foo.namespace());\n\n        assertFalse(fooHtml.isBlock()); // generated\n        assertFalse(foo.isBlock()); // generated\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/ParserTest.java.ParserTest", "name": "ParserTest", "file_path": "src/test/java/org/jsoup/parser/ParserTest.java", "superclasses": "", "methods": ["[void]unescapeEntities()", "[void]unescapeEntitiesHandlesLargeInput()", "[void]testUtf8()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParserTest {\n\n    @Test\n    public void unescapeEntities() {\n        String s = Parser.unescapeEntities(\"One &amp; Two\", false);\n        assertEquals(\"One & Two\", s);\n    }\n\n    @Test\n    public void unescapeEntitiesHandlesLargeInput() {\n        StringBuilder longBody = new StringBuilder(500000);\n        do {\n            longBody.append(\"SomeNonEncodedInput\");\n        } while (longBody.length() < 64 * 1024);\n\n        String body = longBody.toString();\n        assertEquals(body, Parser.unescapeEntities(body, false));\n    }\n\n    @Test\n    public void testUtf8() throws IOException {\n        // testcase for https://github.com/jhy/jsoup/issues/1557. no repro.\n        Document parsed = Jsoup.parse(new ByteArrayInputStream(\"<p>H\\u00E9llo, w\\u00F6rld!\".getBytes(StandardCharsets.UTF_8)), null, \"\");\n        String text = parsed.selectFirst(\"p\").wholeText();\n        assertEquals(text, \"H\\u00E9llo, w\\u00F6rld!\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/ParserIT.java.ParserIT", "name": "ParserIT", "file_path": "src/test/java/org/jsoup/parser/ParserIT.java", "superclasses": "", "methods": ["[void]testIssue1251()", "[void]handlesDeepStack()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nLonger running Parser tests.\n", "original_string": "public class ParserIT {\n    @Test\n    @Disabled // disabled by default now, as there more specific unconsume tests\n    public void testIssue1251() {\n        // https://github.com/jhy/jsoup/issues/1251\n        StringBuilder str = new StringBuilder(\"<a href=\\\"\\\"ca\");\n        for (int countSpaces = 0; countSpaces < 100000; countSpaces++) {\n            try {\n                Parser.htmlParser().setTrackErrors(1).parseInput(str.toString(), \"\");\n            } catch (Exception e) {\n                throw new AssertionError(\"failed at length \" + str.length(), e);\n            }\n            str.insert(countSpaces, ' ');\n        }\n    }\n\n    @Test\n    public void handlesDeepStack() {\n        // inspired by http://sv.stargate.wikia.com/wiki/M2J and https://github.com/jhy/jsoup/issues/955\n        // I didn't put it in the integration tests, because explorer and intellij kept dieing trying to preview/index it\n\n        // Arrange\n        StringBuilder longBody = new StringBuilder(500000);\n        for (int i = 0; i < 25000; i++) {\n            longBody.append(i).append(\"<dl><dd>\");\n        }\n        for (int i = 0; i < 25000; i++) {\n            longBody.append(i).append(\"</dd></dl>\");\n        }\n\n        // Act\n        long start = System.currentTimeMillis();\n        Document doc = Parser.parseBodyFragment(longBody.toString(), \"\");\n\n        // Assert\n        assertEquals(2, doc.body().childNodeSize());\n        assertEquals(25000, doc.select(\"dd\").size());\n        assertTrue(System.currentTimeMillis() - start < 20000); // I get ~ 1.5 seconds, but others have reported slower\n        // was originally much longer, or stack overflow.\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/AttributeParseTest.java.AttributeParseTest", "name": "AttributeParseTest", "file_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java", "superclasses": "", "methods": ["[void]parsesRoughAttributeString()", "[void]handlesNewLinesAndReturns()", "[void]parsesEmptyString()", "[void]canStartWithEq()", "[void]strictAttributeUnescapes()", "[void]moreAttributeUnescapes()", "[void]parsesBooleanAttributes()", "[void]dropsSlashFromAttributeName()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nTest suite for attribute parser.\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class AttributeParseTest {\n\n    @Test public void parsesRoughAttributeString() {\n        String html = \"<a id=\\\"123\\\" class=\\\"baz = 'bar'\\\" style = 'border: 2px'qux zim foo = 12 mux=18 />\";\n        // should be: <id=123>, <class=baz = 'bar'>, <qux=>, <zim=>, <foo=12>, <mux.=18>\n\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(7, attr.size());\n        assertEquals(\"123\", attr.get(\"id\"));\n        assertEquals(\"baz = 'bar'\", attr.get(\"class\"));\n        assertEquals(\"border: 2px\", attr.get(\"style\"));\n        assertEquals(\"\", attr.get(\"qux\"));\n        assertEquals(\"\", attr.get(\"zim\"));\n        assertEquals(\"12\", attr.get(\"foo\"));\n        assertEquals(\"18\", attr.get(\"mux\"));\n    }\n\n    @Test public void handlesNewLinesAndReturns() {\n        String html = \"<a\\r\\nfoo='bar\\r\\nqux'\\r\\nbar\\r\\n=\\r\\ntwo>One</a>\";\n        Element el = Jsoup.parse(html).select(\"a\").first();\n        assertEquals(2, el.attributes().size());\n        assertEquals(\"bar\\r\\nqux\", el.attr(\"foo\")); // currently preserves newlines in quoted attributes. todo confirm if should.\n        assertEquals(\"two\", el.attr(\"bar\"));\n    }\n\n    @Test public void parsesEmptyString() {\n        String html = \"<a />\";\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(0, attr.size());\n    }\n\n    @Test public void canStartWithEq() {\n        String html = \"<a =empty />\";\n        // TODO this is the weirdest thing in the spec - why not consider this an attribute with an empty name, not where name is '='?\n        // am I reading it wrong? https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state\n        Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n        Attributes attr = el.attributes();\n        assertEquals(1, attr.size());\n        assertTrue(attr.hasKey(\"=empty\"));\n        assertEquals(\"\", attr.get(\"=empty\"));\n    }\n\n    @Test public void strictAttributeUnescapes() {\n        String html = \"<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>\";\n        Elements els = Jsoup.parse(html).select(\"a\");\n        assertEquals(\"?foo=bar&mid&lt=true\", els.first().attr(\"href\"));\n        assertEquals(\"?foo=bar<qux&lg=1\", els.last().attr(\"href\"));\n    }\n\n    @Test public void moreAttributeUnescapes() {\n        String html = \"<a href='&wr_id=123&mid-size=true&ok=&wr'>Check</a>\";\n        Elements els = Jsoup.parse(html).select(\"a\");\n        assertEquals(\"&wr_id=123&mid-size=true&ok=&wr\", els.first().attr(\"href\"));\n    }\n\n    @Test public void parsesBooleanAttributes() {\n        String html = \"<a normal=\\\"123\\\" boolean empty=\\\"\\\"></a>\";\n        Element el = Jsoup.parse(html).select(\"a\").first();\n\n        assertEquals(\"123\", el.attr(\"normal\"));\n        assertEquals(\"\", el.attr(\"boolean\"));\n        assertEquals(\"\", el.attr(\"empty\"));\n\n        List<Attribute> attributes = el.attributes().asList();\n        assertEquals(3, attributes.size(), \"There should be 3 attribute present\");\n\n        assertEquals(html, el.outerHtml()); // vets boolean syntax\n    }\n\n    @Test public void dropsSlashFromAttributeName() {\n        String html = \"<img /onerror='doMyJob'/>\";\n        Document doc = Jsoup.parse(html);\n        assertFalse(doc.select(\"img[onerror]\").isEmpty(), \"SelfClosingStartTag ignores last character\");\n        assertEquals(\"<img onerror=\\\"doMyJob\\\">\", doc.body().html());\n\n        doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<img onerror=\\\"doMyJob\\\" />\", doc.html());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/parser/TokenQueueTest.java.TokenQueueTest", "name": "TokenQueueTest", "file_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java", "superclasses": "", "methods": ["[void]chompBalanced()", "[void]chompEscapedBalanced()", "[void]chompBalancedMatchesAsMuchAsPossible()", "[void]unescape()", "[void]unescape_2()", "[void]escapeCssIdentifier()", "[void]chompToIgnoreCase()", "[void]addFirst()", "[void]consumeToIgnoreSecondCallTest()", "[void]testNestedQuotes()", "[void]chompBalancedThrowIllegalArgumentException()", "[void]testQuotedPattern()", "[void]consumeEscapedTag()", "[void]consumeEscapedId()"], "method_uris": ["src/test/java/org/jsoup/parser/TokenQueueTest.java.TokenQueueTest.[void]validateNestedQuotes(String,String)"], "overrides": null, "attributes": [], "class_docstring": "\nToken queue tests.\n", "original_string": "public class TokenQueueTest {\n    @Test public void chompBalanced() {\n        TokenQueue tq = new TokenQueue(\":contains(one (two) three) four\");\n        String pre = tq.consumeTo(\"(\");\n        String guts = tq.chompBalanced('(', ')');\n        String remainder = tq.remainder();\n\n        assertEquals(\":contains\", pre);\n        assertEquals(\"one (two) three\", guts);\n        assertEquals(\" four\", remainder);\n    }\n\n    @Test public void chompEscapedBalanced() {\n        TokenQueue tq = new TokenQueue(\":contains(one (two) \\\\( \\\\) \\\\) three) four\");\n        String pre = tq.consumeTo(\"(\");\n        String guts = tq.chompBalanced('(', ')');\n        String remainder = tq.remainder();\n\n        assertEquals(\":contains\", pre);\n        assertEquals(\"one (two) \\\\( \\\\) \\\\) three\", guts);\n        assertEquals(\"one (two) ( ) ) three\", TokenQueue.unescape(guts));\n        assertEquals(\" four\", remainder);\n    }\n\n    @Test public void chompBalancedMatchesAsMuchAsPossible() {\n        TokenQueue tq = new TokenQueue(\"unbalanced(something(or another)) else\");\n        tq.consumeTo(\"(\");\n        String match = tq.chompBalanced('(', ')');\n        assertEquals(\"something(or another)\", match);\n    }\n\n    @Test public void unescape() {\n        assertEquals(\"one ( ) \\\\\", TokenQueue.unescape(\"one \\\\( \\\\) \\\\\\\\\"));\n    }\n\n    @Test public void unescape_2() {\n        assertEquals(\"\\\\&\", TokenQueue.unescape(\"\\\\\\\\\\\\&\"));\n    }\n\n    @Test public void escapeCssIdentifier() {\n        assertEquals(\"one\\\\#two\\\\.three\\\\/four\\\\\\\\five\", TokenQueue.escapeCssIdentifier(\"one#two.three/four\\\\five\"));\n    }\n\n    @Test public void chompToIgnoreCase() {\n        String t = \"<textarea>one < two </TEXTarea>\";\n        TokenQueue tq = new TokenQueue(t);\n        String data = tq.chompToIgnoreCase(\"</textarea\");\n        assertEquals(\"<textarea>one < two \", data);\n\n        tq = new TokenQueue(\"<textarea> one two < three </oops>\");\n        data = tq.chompToIgnoreCase(\"</textarea\");\n        assertEquals(\"<textarea> one two < three </oops>\", data);\n    }\n\n    @Test public void addFirst() {\n        TokenQueue tq = new TokenQueue(\"One Two\");\n        tq.consumeWord();\n        tq.addFirst(\"Three\");\n        assertEquals(\"Three Two\", tq.remainder());\n    }\n\n\n    @Test public void consumeToIgnoreSecondCallTest() {\n        String t = \"<textarea>one < two </TEXTarea> third </TEXTarea>\";\n        TokenQueue tq = new TokenQueue(t);\n        String data = tq.chompToIgnoreCase(\"</textarea>\");\n        assertEquals(\"<textarea>one < two \", data);\n\n        data = tq.chompToIgnoreCase(\"</textarea>\");\n        assertEquals(\" third \", data);\n    }\n\n    @Test public void testNestedQuotes() {\n        validateNestedQuotes(\"<html><body><a id=\\\"identifier\\\" onclick=\\\"func('arg')\\\" /></body></html>\", \"a[onclick*=\\\"('arg\\\"]\");\n        validateNestedQuotes(\"<html><body><a id=\\\"identifier\\\" onclick=func('arg') /></body></html>\", \"a[onclick*=\\\"('arg\\\"]\");\n        validateNestedQuotes(\"<html><body><a id=\\\"identifier\\\" onclick='func(\\\"arg\\\")' /></body></html>\", \"a[onclick*='(\\\"arg']\");\n        validateNestedQuotes(\"<html><body><a id=\\\"identifier\\\" onclick=func(\\\"arg\\\") /></body></html>\", \"a[onclick*='(\\\"arg']\");\n    }\n\n    private static void validateNestedQuotes(String html, String selector) {\n        assertEquals(\"#identifier\", Jsoup.parse(html).select(selector).first().cssSelector());\n    }\n\n    @Test\n    public void chompBalancedThrowIllegalArgumentException() {\n        try {\n            TokenQueue tq = new TokenQueue(\"unbalanced(something(or another)) else\");\n            tq.consumeTo(\"(\");\n            tq.chompBalanced('(', '+');\n            fail(\"should have thrown IllegalArgumentException\");\n        } catch (IllegalArgumentException expected) {\n            assertEquals(\"Did not find balanced marker at 'something(or another)) else'\", expected.getMessage());\n        }\n    }\n\n    @Test\n    public void testQuotedPattern() {\n        final Document doc = Jsoup.parse(\"<div>\\\\) foo1</div><div>( foo2</div><div>1) foo3</div>\");\n        assertEquals(\"\\n\\\\) foo1\",doc.select(\"div:matches(\" + Pattern.quote(\"\\\\)\") + \")\").get(0).childNode(0).toString());\n        assertEquals(\"\\n( foo2\",doc.select(\"div:matches(\" + Pattern.quote(\"(\") + \")\").get(0).childNode(0).toString());\n        assertEquals(\"\\n1) foo3\",doc.select(\"div:matches(\" + Pattern.quote(\"1)\") + \")\").get(0).childNode(0).toString());\n    }\n\n    @Test public void consumeEscapedTag() {\n        TokenQueue q = new TokenQueue(\"p\\\\\\\\p p\\\\.p p\\\\:p p\\\\!p\");\n\n        assertEquals(\"p\\\\p\", q.consumeElementSelector());\n        assertTrue(q.consumeWhitespace());\n\n        assertEquals(\"p.p\", q.consumeElementSelector());\n        assertTrue(q.consumeWhitespace());\n\n        assertEquals(\"p:p\", q.consumeElementSelector());\n        assertTrue(q.consumeWhitespace());\n\n        assertEquals(\"p!p\", q.consumeElementSelector());\n        assertTrue(q.isEmpty());\n    }\n\n    @Test public void consumeEscapedId() {\n        TokenQueue q = new TokenQueue(\"i\\\\.d i\\\\\\\\d\");\n\n        assertEquals(\"i.d\", q.consumeCssIdentifier());\n        assertTrue(q.consumeWhitespace());\n\n        assertEquals(\"i\\\\d\", q.consumeCssIdentifier());\n        assertTrue(q.isEmpty());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/safety/CleanerTest.java.CleanerTest", "name": "CleanerTest", "file_path": "src/test/java/org/jsoup/safety/CleanerTest.java", "superclasses": "", "methods": ["[void]simpleBehaviourTest()", "[void]simpleBehaviourTest2()", "[void]basicBehaviourTest()", "[void]basicWithImagesTest()", "[void]testRelaxed()", "[void]testRemoveTags()", "[void]testRemoveAttributes()", "[void]allAttributes()", "[void]removeProtocols()", "[void]testRemoveEnforcedAttributes()", "[void]testRemoveProtocols()", "[void]testDropComments()", "[void]testDropXmlProc()", "[void]testDropScript()", "[void]testDropImageScript()", "[void]testCleanJavascriptHref()", "[void]testCleanAnchorProtocol()", "[void]testDropsUnknownTags()", "[void]testHandlesEmptyAttributes()", "[void]testIsValidBodyHtml()", "[void]testIsValidDocument()", "[void]resolvesRelativeLinks()", "[void]preservesRelativeLinksIfConfigured()", "[void]dropsUnresolvableRelativeLinks()", "[void]dropsConcealedJavascriptProtocolWhenRelativesLinksEnabled()", "[void]dropsConcealedJavascriptProtocolWhenRelativesLinksDisabled()", "[void]handlesCustomProtocols()", "[void]handlesAllPseudoTag()", "[void]addsTagOnAttributesIfNotSet()", "[void]supplyOutputSettings()", "[void]handlesFramesets()", "[void]cleansInternationalText()", "[void]testScriptTagInSafeList()", "[void]bailsIfRemovingProtocolThatsNotSet()", "[void]handlesControlCharactersAfterTagName()", "[void]handlesAttributesWithNoValue()", "[void]handlesNoHrefAttribute()", "[void]handlesNestedQuotesInAttribute()", "[void]copiesOutputSettings()", "[void]preservesSourcePositionViaUserData()", "[void]cleansCaseSensitiveElements(boolean)"], "method_uris": ["src/test/java/org/jsoup/safety/CleanerTest.java.CleanerTest.[void]safeListedProtocolShouldBeRetained(Locale)"], "overrides": null, "attributes": [], "class_docstring": "\nTests for the cleaner.\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class CleanerTest {\n    @Test public void simpleBehaviourTest() {\n        String h = \"<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.simpleText());\n\n        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void simpleBehaviourTest2() {\n        String h = \"Hello <b>there</b>!\";\n        String cleanHtml = Jsoup.clean(h, Safelist.simpleText());\n\n        assertEquals(\"Hello <b>there</b>!\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void basicBehaviourTest() {\n        String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basic());\n\n        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"http://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void basicWithImagesTest() {\n        String h = \"<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basicWithImages());\n        assertEquals(\"<p><img src=\\\"http://example.com/\\\" alt=\\\"Image\\\"></p><p><img></p>\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void testRelaxed() {\n        String h = \"<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void testRemoveTags() {\n        String h = \"<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basic().removeTags(\"a\"));\n\n        assertEquals(\"<p>Nice</p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void testRemoveAttributes() {\n        String h = \"<div><p>Nice</p><blockquote cite='http://example.com/quotations'>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basic().removeAttributes(\"blockquote\", \"cite\"));\n\n        assertEquals(\"<p>Nice</p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test void allAttributes() {\n        String h = \"<div class=foo data=true><p class=bar>Text</p></div><blockquote cite='https://example.com'>Foo\";\n        Safelist safelist = Safelist.relaxed();\n        safelist.addAttributes(\":all\", \"class\");\n        safelist.addAttributes(\"div\", \"data\");\n\n        String clean1 = Jsoup.clean(h, safelist);\n        assertEquals(\"<div class=\\\"foo\\\" data=\\\"true\\\"><p class=\\\"bar\\\">Text</p></div><blockquote cite=\\\"https://example.com\\\">Foo</blockquote>\", TextUtil.stripNewlines(clean1));\n\n        safelist.removeAttributes(\":all\", \"class\", \"cite\");\n\n        String clean2 = Jsoup.clean(h, safelist);\n        assertEquals(\"<div data=\\\"true\\\"><p>Text</p></div><blockquote>Foo</blockquote>\", TextUtil.stripNewlines(clean2));\n    }\n\n    @Test void removeProtocols() {\n        String h = \"<a href='any://example.com'>Link</a>\";\n        Safelist safelist = Safelist.relaxed();\n        String clean1 = Jsoup.clean(h, safelist);\n        assertEquals(\"<a>Link</a>\", clean1);\n\n        safelist.removeProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\");\n        String clean2 = Jsoup.clean(h, safelist); // all removed means any will work\n        assertEquals(\"<a href=\\\"any://example.com\\\">Link</a>\", clean2);\n    }\n\n    @Test public void testRemoveEnforcedAttributes() {\n        String h = \"<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basic().removeEnforcedAttribute(\"a\", \"rel\"));\n\n        assertEquals(\"<p><a href=\\\"http://nice.com\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void testRemoveProtocols() {\n        String h = \"<p>Contact me <a href='mailto:info@example.com'>here</a></p>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basic().removeProtocols(\"a\", \"href\", \"ftp\", \"mailto\"));\n\n        assertEquals(\"<p>Contact me <a rel=\\\"nofollow\\\">here</a></p>\",\n                TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @MultiLocaleTest\n    public void safeListedProtocolShouldBeRetained(Locale locale) {\n        Locale.setDefault(locale);\n\n        Safelist safelist = Safelist.none()\n                .addTags(\"a\")\n                .addAttributes(\"a\", \"href\")\n                .addProtocols(\"a\", \"href\", \"something\");\n\n        String cleanHtml = Jsoup.clean(\"<a href=\\\"SOMETHING://x\\\"></a>\", safelist);\n\n        assertEquals(\"<a href=\\\"SOMETHING://x\\\"></a>\", TextUtil.stripNewlines(cleanHtml));\n    }\n\n    @Test public void testDropComments() {\n        String h = \"<p>Hello<!-- no --></p>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"<p>Hello</p>\", cleanHtml);\n    }\n\n    @Test public void testDropXmlProc() {\n        String h = \"<?import namespace=\\\"xss\\\"><p>Hello</p>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"<p>Hello</p>\", cleanHtml);\n    }\n\n    @Test public void testDropScript() {\n        String h = \"<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"\", cleanHtml);\n    }\n\n    @Test public void testDropImageScript() {\n        String h = \"<IMG SRC=\\\"javascript:alert('XSS')\\\">\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"<img>\", cleanHtml);\n    }\n\n    @Test public void testCleanJavascriptHref() {\n        String h = \"<A HREF=\\\"javascript:document.location='http://www.google.com/'\\\">XSS</A>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"<a>XSS</a>\", cleanHtml);\n    }\n\n    @Test public void testCleanAnchorProtocol() {\n        String validAnchor = \"<a href=\\\"#valid\\\">Valid anchor</a>\";\n        String invalidAnchor = \"<a href=\\\"#anchor with spaces\\\">Invalid anchor</a>\";\n\n        // A Safelist that does not allow anchors will strip them out.\n        String cleanHtml = Jsoup.clean(validAnchor, Safelist.relaxed());\n        assertEquals(\"<a>Valid anchor</a>\", cleanHtml);\n\n        cleanHtml = Jsoup.clean(invalidAnchor, Safelist.relaxed());\n        assertEquals(\"<a>Invalid anchor</a>\", cleanHtml);\n\n        // A Safelist that allows them will keep them.\n        Safelist relaxedWithAnchor = Safelist.relaxed().addProtocols(\"a\", \"href\", \"#\");\n\n        cleanHtml = Jsoup.clean(validAnchor, relaxedWithAnchor);\n        assertEquals(validAnchor, cleanHtml);\n\n        // An invalid anchor is never valid.\n        cleanHtml = Jsoup.clean(invalidAnchor, relaxedWithAnchor);\n        assertEquals(\"<a>Invalid anchor</a>\", cleanHtml);\n    }\n\n    @Test public void testDropsUnknownTags() {\n        String h = \"<p><custom foo=true>Test</custom></p>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.relaxed());\n        assertEquals(\"<p>Test</p>\", cleanHtml);\n    }\n\n    @Test public void testHandlesEmptyAttributes() {\n        String h = \"<img alt=\\\"\\\" src= unknown=''>\";\n        String cleanHtml = Jsoup.clean(h, Safelist.basicWithImages());\n        assertEquals(\"<img alt=\\\"\\\">\", cleanHtml);\n    }\n\n    @Test public void testIsValidBodyHtml() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        assertTrue(Jsoup.isValid(ok, Safelist.basic()));\n        assertTrue(Jsoup.isValid(ok1, Safelist.basic()));\n        assertFalse(Jsoup.isValid(nok1, Safelist.basic()));\n        assertFalse(Jsoup.isValid(nok2, Safelist.basic()));\n        assertFalse(Jsoup.isValid(nok3, Safelist.basic()));\n        assertFalse(Jsoup.isValid(nok4, Safelist.basic()));\n        assertFalse(Jsoup.isValid(nok5, Safelist.basic()));\n        assertFalse(Jsoup.isValid(nok6, Safelist.basic()));\n        assertFalse(Jsoup.isValid(ok, Safelist.none()));\n        assertFalse(Jsoup.isValid(nok7, Safelist.basic()));\n    }\n\n    @Test public void testIsValidDocument() {\n        String ok = \"<html><head></head><body><p>Hello</p></body><html>\";\n        String nok = \"<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>\";\n\n        Safelist relaxed = Safelist.relaxed();\n        Cleaner cleaner = new Cleaner(relaxed);\n        Document okDoc = Jsoup.parse(ok);\n        assertTrue(cleaner.isValid(okDoc));\n        assertFalse(cleaner.isValid(Jsoup.parse(nok)));\n        assertFalse(new Cleaner(Safelist.none()).isValid(okDoc));\n    }\n\n    @Test public void resolvesRelativeLinks() {\n        String html = \"<a href='/foo'>Link</a><img src='/bar'>\";\n        String clean = Jsoup.clean(html, \"http://example.com/\", Safelist.basicWithImages());\n        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a><img src=\\\"http://example.com/bar\\\">\", clean);\n    }\n\n    @Test public void preservesRelativeLinksIfConfigured() {\n        String html = \"<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>\";\n        String clean = Jsoup.clean(html, \"http://example.com/\", Safelist.basicWithImages().preserveRelativeLinks(true));\n        assertEquals(\"<a href=\\\"/foo\\\" rel=\\\"nofollow\\\">Link</a><img src=\\\"/bar\\\"> <img>\", clean);\n    }\n\n    @Test public void dropsUnresolvableRelativeLinks() {\n        String html = \"<a href='/foo'>Link</a>\";\n        String clean = Jsoup.clean(html, Safelist.basic());\n        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", clean);\n    }\n\n    @Test void dropsConcealedJavascriptProtocolWhenRelativesLinksEnabled() {\n        Safelist safelist = Safelist.basic().preserveRelativeLinks(true);\n        String html = \"<a href=\\\"&#0013;ja&Tab;va&Tab;script&#0010;:alert(1)\\\">Link</a>\";\n        String clean = Jsoup.clean(html, \"https://\", safelist);\n        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", clean);\n\n        String colon = \"<a href=\\\"ja&Tab;va&Tab;script&colon;alert(1)\\\">Link</a>\";\n        String cleanColon = Jsoup.clean(colon, \"https://\", safelist);\n        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", cleanColon);\n    }\n\n    @Test void dropsConcealedJavascriptProtocolWhenRelativesLinksDisabled() {\n        Safelist safelist = Safelist.basic().preserveRelativeLinks(false);\n        String html = \"<a href=\\\"ja&Tab;vas&#0013;cript:alert(1)\\\">Link</a>\";\n        String clean = Jsoup.clean(html, \"https://\", safelist);\n        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", clean);\n    }\n\n    @Test public void handlesCustomProtocols() {\n        String html = \"<img src='cid:12345' /> <img src='data:gzzt' />\";\n        String dropped = Jsoup.clean(html, Safelist.basicWithImages());\n        assertEquals(\"<img> <img>\", dropped);\n\n        String preserved = Jsoup.clean(html, Safelist.basicWithImages().addProtocols(\"img\", \"src\", \"cid\", \"data\"));\n        assertEquals(\"<img src=\\\"cid:12345\\\"> <img src=\\\"data:gzzt\\\">\", preserved);\n    }\n\n    @Test public void handlesAllPseudoTag() {\n        String html = \"<p class='foo' src='bar'><a class='qux'>link</a></p>\";\n        Safelist safelist = new Safelist()\n                .addAttributes(\":all\", \"class\")\n                .addAttributes(\"p\", \"style\")\n                .addTags(\"p\", \"a\");\n\n        String clean = Jsoup.clean(html, safelist);\n        assertEquals(\"<p class=\\\"foo\\\"><a class=\\\"qux\\\">link</a></p>\", clean);\n    }\n\n    @Test public void addsTagOnAttributesIfNotSet() {\n        String html = \"<p class='foo' src='bar'>One</p>\";\n        Safelist safelist = new Safelist()\n            .addAttributes(\"p\", \"class\");\n        // ^^ safelist does not have explicit tag add for p, inferred from add attributes.\n        String clean = Jsoup.clean(html, safelist);\n        assertEquals(\"<p class=\\\"foo\\\">One</p>\", clean);\n    }\n\n    @Test public void supplyOutputSettings() {\n        // test that one can override the default document output settings\n        Document.OutputSettings os = new Document.OutputSettings();\n        os.prettyPrint(false);\n        os.escapeMode(Entities.EscapeMode.extended);\n        os.charset(\"ascii\");\n\n        String html = \"<div><p>&bernou;</p></div>\";\n        String customOut = Jsoup.clean(html, \"http://foo.com/\", Safelist.relaxed(), os);\n        String defaultOut = Jsoup.clean(html, \"http://foo.com/\", Safelist.relaxed());\n        assertNotSame(defaultOut, customOut);\n\n        assertEquals(\"<div><p>&Bscr;</p></div>\", customOut); // entities now prefers shorted names if aliased\n        assertEquals(\"<div>\\n\" +\n            \" <p>\u212c</p>\\n\" +\n            \"</div>\", defaultOut);\n\n        os.charset(\"ASCII\");\n        os.escapeMode(Entities.EscapeMode.base);\n        String customOut2 = Jsoup.clean(html, \"http://foo.com/\", Safelist.relaxed(), os);\n        assertEquals(\"<div><p>&#x212c;</p></div>\", customOut2);\n    }\n\n    @Test public void handlesFramesets() {\n        String dirty = \"<html><head><script></script><noscript></noscript></head><frameset><frame src=\\\"foo\\\" /><frame src=\\\"foo\\\" /></frameset></html>\";\n        String clean = Jsoup.clean(dirty, Safelist.basic());\n        assertEquals(\"\", clean); // nothing good can come out of that\n\n        Document dirtyDoc = Jsoup.parse(dirty);\n        Document cleanDoc = new Cleaner(Safelist.basic()).clean(dirtyDoc);\n        assertNotNull(cleanDoc);\n        assertEquals(0, cleanDoc.body().childNodeSize());\n    }\n\n    @Test public void cleansInternationalText() {\n        assertEquals(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Jsoup.clean(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Safelist.none()));\n    }\n\n    @Test\n    public void testScriptTagInSafeList() {\n        Safelist safelist = Safelist.relaxed();\n        safelist.addTags( \"script\" );\n        assertTrue( Jsoup.isValid(\"Hello<script>alert('Doh')</script>World !\", safelist) );\n    }\n\n    @Test\n    public void bailsIfRemovingProtocolThatsNotSet() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            // a case that came up on the email list\n            Safelist w = Safelist.none();\n\n            // note no add tag, and removing protocol without adding first\n            w.addAttributes(\"a\", \"href\");\n            w.removeProtocols(\"a\", \"href\", \"javascript\"); // with no protocols enforced, this was a noop. Now validates.\n        });\n    }\n\n    @Test public void handlesControlCharactersAfterTagName() {\n        String html = \"<a/\\06>\";\n        String clean = Jsoup.clean(html, Safelist.basic());\n        assertEquals(\"<a rel=\\\"nofollow\\\"></a>\", clean);\n    }\n\n    @Test public void handlesAttributesWithNoValue() {\n        // https://github.com/jhy/jsoup/issues/973\n        String clean = Jsoup.clean(\"<a href>Clean</a>\", Safelist.basic());\n\n        assertEquals(\"<a rel=\\\"nofollow\\\">Clean</a>\", clean);\n    }\n\n    @Test public void handlesNoHrefAttribute() {\n        String dirty = \"<a>One</a> <a href>Two</a>\";\n        Safelist relaxedWithAnchor = Safelist.relaxed().addProtocols(\"a\", \"href\", \"#\");\n        String clean = Jsoup.clean(dirty, relaxedWithAnchor);\n        assertEquals(\"<a>One</a> <a>Two</a>\", clean);\n    }\n\n    @Test public void handlesNestedQuotesInAttribute() {\n        // https://github.com/jhy/jsoup/issues/1243 - no repro\n        String orig = \"<div style=\\\"font-family: 'Calibri'\\\">Will (not) fail</div>\";\n        Safelist allow = Safelist.relaxed()\n            .addAttributes(\"div\", \"style\");\n\n        String clean = Jsoup.clean(orig, allow);\n        boolean isValid = Jsoup.isValid(orig, allow);\n\n        assertEquals(orig, TextUtil.stripNewlines(clean)); // only difference is pretty print wrap & indent\n        assertTrue(isValid);\n    }\n\n    @Test public void copiesOutputSettings() {\n        Document orig = Jsoup.parse(\"<p>test<br></p>\");\n        orig.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        orig.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n        Safelist safelist = Safelist.none().addTags(\"p\", \"br\");\n\n        Document result = new Cleaner(safelist).clean(orig);\n        assertEquals(Document.OutputSettings.Syntax.xml, result.outputSettings().syntax());\n        assertEquals(\"<p>test<br /></p>\", result.body().html());\n    }\n\n    @Test void preservesSourcePositionViaUserData() {\n        Document orig = Jsoup.parse(\"<script>xss</script>\\n <p id=1>Hello</p>\", Parser.htmlParser().setTrackPosition(true));\n        Element p = orig.expectFirst(\"p\");\n        Range origRange = p.sourceRange();\n        assertEquals(\"2,2:22-2,10:30\", origRange.toString());\n        assertEquals(\"1,1:0-1,1:0\", orig.sourceRange().toString());\n        assertEquals(\"2,19:39-2,19:39\", orig.endSourceRange().toString());\n\n        Range.AttributeRange attributeRange = p.attributes().sourceRange(\"id\");\n        assertEquals(\"2,5:25-2,7:27=2,8:28-2,9:29\", attributeRange.toString());\n\n        Document clean = new Cleaner(Safelist.relaxed().addAttributes(\"p\", \"id\")).clean(orig);\n        Element cleanP = clean.expectFirst(\"p\");\n        assertEquals(\"1\", cleanP.id());\n        Range cleanRange = cleanP.sourceRange();\n        assertEquals(origRange, cleanRange);\n        assertEquals(p.endSourceRange(), cleanP.endSourceRange());\n        assertEquals(attributeRange, cleanP.attributes().sourceRange(\"id\"));\n    }\n\n    @ParameterizedTest @ValueSource(booleans = {true, false})\n    void cleansCaseSensitiveElements(boolean preserveCase) {\n        // https://github.com/jhy/jsoup/issues/2049\n        String html = \"<svg><feMerge baseFrequency=2><feMergeNode kernelMatrix=1 /><feMergeNode><clipPath /></feMergeNode><feMergeNode />\";\n        String[] tags = {\"svg\", \"feMerge\", \"feMergeNode\", \"clipPath\"};\n        String[] attrs = {\"kernelMatrix\", \"baseFrequency\"};\n\n        if (!preserveCase) {\n            tags = Arrays.stream(tags).map(String::toLowerCase).toArray(String[]::new);\n            attrs = Arrays.stream(attrs).map(String::toLowerCase).toArray(String[]::new);\n        }\n\n        Safelist safelist = Safelist.none().addTags(tags).addAttributes(\":all\", attrs);\n        String clean = Jsoup.clean(html, safelist);\n        String expected = \"<svg>\\n\" +\n            \" <feMerge baseFrequency=\\\"2\\\">\\n\" +\n            \"  <feMergeNode kernelMatrix=\\\"1\\\" />\\n\" +\n            \"  <feMergeNode>\\n\" +\n            \"   <clipPath />\\n\" +\n            \"  </feMergeNode>\\n\" +\n            \"  <feMergeNode />\\n\" +\n            \" </feMerge>\\n\" +\n            \"</svg>\";\n        assertEquals(expected, clean);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/safety/SafelistTest.java.SafelistTest", "name": "SafelistTest", "file_path": "src/test/java/org/jsoup/safety/SafelistTest.java", "superclasses": "", "methods": ["[void]testCopyConstructor_noSideEffectOnTags()", "[void]testCopyConstructor_noSideEffectOnAttributes()", "[void]testCopyConstructor_noSideEffectOnEnforcedAttributes()", "[void]testCopyConstructor_noSideEffectOnProtocols()", "[void]noscriptIsBlocked()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SafelistTest {\n    private static final String TEST_TAG = \"testTag\";\n    private static final String TEST_ATTRIBUTE = \"testAttribute\";\n    private static final String TEST_SCHEME = \"valid-scheme\";\n    private static final String TEST_VALUE = TEST_SCHEME + \"://testValue\";\n\n    @Test\n    public void testCopyConstructor_noSideEffectOnTags() {\n        Safelist safelist1 = Safelist.none().addTags(TEST_TAG);\n        Safelist safelist2 = new Safelist(safelist1);\n        safelist1.addTags(\"invalidTag\");\n\n        assertFalse(safelist2.isSafeTag(\"invalidTag\"));\n    }\n\n    @Test\n    public void testCopyConstructor_noSideEffectOnAttributes() {\n        Safelist safelist1 = Safelist.none().addAttributes(TEST_TAG, TEST_ATTRIBUTE);\n        Safelist safelist2 = new Safelist(safelist1);\n        safelist1.addAttributes(TEST_TAG, \"invalidAttribute\");\n\n        assertFalse(safelist2.isSafeAttribute(TEST_TAG, null, new Attribute(\"invalidAttribute\", TEST_VALUE)));\n    }\n\n    @Test\n    public void testCopyConstructor_noSideEffectOnEnforcedAttributes() {\n        Safelist safelist1 = Safelist.none().addEnforcedAttribute(TEST_TAG, TEST_ATTRIBUTE, TEST_VALUE);\n        Safelist safelist2 = new Safelist(safelist1);\n        safelist1.addEnforcedAttribute(TEST_TAG, TEST_ATTRIBUTE, \"invalidValue\");\n\n        for (Attribute enforcedAttribute : safelist2.getEnforcedAttributes(TEST_TAG)) {\n            assertNotEquals(\"invalidValue\", enforcedAttribute.getValue());\n        }\n    }\n\n    @Test\n    public void testCopyConstructor_noSideEffectOnProtocols() {\n        final String invalidScheme = \"invalid-scheme\";\n        Safelist safelist1 = Safelist.none()\n                .addAttributes(TEST_TAG, TEST_ATTRIBUTE)\n                .addProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);\n        Safelist safelist2 = new Safelist(safelist1);\n        safelist1.addProtocols(TEST_TAG, TEST_ATTRIBUTE, invalidScheme);\n\n        Attributes attributes = new Attributes();\n        Attribute invalidAttribute = new Attribute(TEST_ATTRIBUTE, invalidScheme + \"://someValue\");\n        attributes.put(invalidAttribute);\n        Element invalidElement = new Element(Tag.valueOf(TEST_TAG), \"\", attributes);\n\n        assertFalse(safelist2.isSafeAttribute(TEST_TAG, invalidElement, invalidAttribute));\n    }\n\n    @Test\n    void noscriptIsBlocked() {\n        boolean threw = false;\n        Safelist safelist = null;\n        try {\n            safelist = Safelist.none().addTags(\"NOSCRIPT\");\n        } catch (ValidationException validationException) {\n            threw = true;\n            assertTrue(validationException.getMessage().contains(\"unsupported\"));\n        }\n        assertTrue(threw);\n        assertNull(safelist);\n    }\n\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String TEST_TAG = \"testTag\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "TEST_TAG = \"testTag\"", "syntax_pass": true}, {"attribute_expression": "private static final String TEST_ATTRIBUTE = \"testAttribute\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "TEST_ATTRIBUTE = \"testAttribute\"", "syntax_pass": true}, {"attribute_expression": "private static final String TEST_SCHEME = \"valid-scheme\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "TEST_SCHEME = \"valid-scheme\"", "syntax_pass": true}, {"attribute_expression": "private static final String TEST_VALUE = TEST_SCHEME + \"://testValue\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "TEST_VALUE = TEST_SCHEME + \"://testValue\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/internal/SoftPoolTest.java.SoftPoolTest", "name": "SoftPoolTest", "file_path": "src/test/java/org/jsoup/internal/SoftPoolTest.java", "superclasses": "", "methods": ["[void]testSoftLocalPool()", "[void]testSoftReferenceBehavior()", "[void]testBorrowFromEmptyPool()", "[void]testReleaseMoreThanMaxIdle()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SoftPoolTest {\n\n    private static final int BufSize = 12;\n    private static final int NumThreads = 5;\n    private static final int NumObjects = 3;\n\n    @Test\n    public void testSoftLocalPool() throws InterruptedException {\n        SoftPool<char[]> softLocalPool = new SoftPool<>(() -> new char[BufSize]);\n\n        ExecutorService executorService = Executors.newFixedThreadPool(NumThreads);\n        CountDownLatch latch = new CountDownLatch(NumThreads);\n\n        Set<char[]> allBuffers = new HashSet<>();\n        Set<char[]>[] threadLocalBuffers = new Set[NumThreads];\n\n        for (int i = 0; i < NumThreads; i++) {\n            threadLocalBuffers[i] = new HashSet<>();\n        }\n\n        AtomicInteger threadCount = new AtomicInteger();\n\n        Runnable task = () -> {\n            try {\n                int threadIndex = threadCount.getAndIncrement();\n                Set<char[]> localBuffers = new HashSet<>();\n                // First borrow\n                for (int i = 0; i < NumObjects; i++) {\n                    char[] buffer = softLocalPool.borrow();\n                    assertEquals(BufSize, buffer.length);\n                    localBuffers.add(buffer);\n                }\n\n                // Release buffers back to the pool\n                for (char[] buffer : localBuffers) {\n                    softLocalPool.release(buffer);\n                }\n\n                // Borrow again and ensure buffers are reused\n                for (int i = 0; i < NumObjects; i++) {\n                    char[] buffer = softLocalPool.borrow();\n                    assertTrue(localBuffers.contains(buffer), \"Buffer was not reused in the same thread\");\n                    threadLocalBuffers[threadIndex].add(buffer);\n                }\n\n                synchronized (allBuffers) {\n                    allBuffers.addAll(threadLocalBuffers[threadIndex]);\n                }\n            } finally {\n                latch.countDown();\n            }\n        };\n\n        // Run the tasks\n        for (int i = 0; i < NumThreads; i++) {\n            executorService.submit(task::run);\n        }\n\n        // Wait for all threads to complete\n        latch.await();\n        executorService.shutdown();\n\n        // Ensure no buffers are shared between threads\n        Set<char[]> uniqueBuffers = new HashSet<>();\n        for (Set<char[]> bufferSet : threadLocalBuffers) {\n            for (char[] buffer : bufferSet) {\n                assertTrue(uniqueBuffers.add(buffer), \"Buffer was shared between threads\");\n            }\n        }\n    }\n\n    @Test\n    public void testSoftReferenceBehavior() {\n        SoftPool<char[]> softLocalPool = new SoftPool<>(() -> new char[BufSize]);\n\n        // Borrow and release an object\n        char[] buffer = softLocalPool.borrow();\n        assertEquals(BufSize, buffer.length);\n        softLocalPool.release(buffer);\n\n        // Fake a GC\n        softLocalPool.threadLocalStack.get().clear();\n\n        // Ensure the object is garbage collected\n        assertNull(softLocalPool.threadLocalStack.get().get());\n\n        char[] second = softLocalPool.borrow();\n        // should be different, but same size\n        assertNotEquals(buffer, second);\n        assertEquals(BufSize, second.length);\n    }\n\n    @Test\n    public void testBorrowFromEmptyPool() {\n        SoftPool<char[]> softLocalPool = new SoftPool<>(() -> new char[BufSize]);\n\n        // Borrow from an empty pool\n        char[] buffer = softLocalPool.borrow();\n        assertNotNull(buffer, \"Borrowed null from an empty pool\");\n        assertEquals(BufSize, buffer.length);\n    }\n\n    @Test\n    public void testReleaseMoreThanMaxIdle() {\n        SoftPool<char[]> softLocalPool = new SoftPool<>(() -> new char[BufSize]);\n\n        // Borrow more than MaxIdle objects\n        List<char[]> borrowedBuffers = new ArrayList<>();\n        for (int i = 0; i < SoftPool.MaxIdle + 5; i++) {\n            char[] buffer = softLocalPool.borrow();\n            borrowedBuffers.add(buffer);\n        }\n\n        // Release all borrowed objects back to the pool\n        for (char[] buffer : borrowedBuffers) {\n            softLocalPool.release(buffer);\n        }\n\n        // Ensure the pool size does not exceed MaxIdle\n        Stack<char[]> stack = softLocalPool.getStack();\n        assertTrue(stack.size() <= SoftPool.MaxIdle, \"Pool size exceeded MaxIdle limit\");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int BufSize = 12;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "BufSize = 12", "syntax_pass": true}, {"attribute_expression": "private static final int NumThreads = 5;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "NumThreads = 5", "syntax_pass": true}, {"attribute_expression": "private static final int NumObjects = 3;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "NumObjects = 3", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/internal/StringUtilTest.java.StringUtilTest", "name": "StringUtilTest", "file_path": "src/test/java/org/jsoup/internal/StringUtilTest.java", "superclasses": "", "methods": ["[void]join()", "[void]padding()", "[void]paddingInACan()", "[void]isBlank()", "[void]isNumeric()", "[void]isWhitespace()", "[void]normaliseWhiteSpace()", "[void]normaliseWhiteSpaceHandlesHighSurrogates()", "[void]resolvesRelativeUrls()", "[void]stripsControlCharsFromUrls()", "[void]allowsSpaceInUrl()", "[void]isAscii()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class StringUtilTest {\n\n    @Test\n    public void join() {\n        assertEquals(\"\", StringUtil.join(Collections.singletonList(\"\"), \" \"));\n        assertEquals(\"one\", StringUtil.join(Collections.singletonList(\"one\"), \" \"));\n        assertEquals(\"one two three\", StringUtil.join(Arrays.asList(\"one\", \"two\", \"three\"), \" \"));\n    }\n\n    @Test public void padding() {\n        assertEquals(\"\", StringUtil.padding(0));\n        assertEquals(\" \", StringUtil.padding(1));\n        assertEquals(\"  \", StringUtil.padding(2));\n        assertEquals(\"               \", StringUtil.padding(15));\n        assertEquals(\"                              \", StringUtil.padding(45)); // we default to tap out at 30\n\n        // memoization is up to 21 blocks (0 to 20 spaces) and exits early before min checks making maxPaddingWidth unused\n        assertEquals(\"\", StringUtil.padding(0, -1));\n        assertEquals(\"                    \", StringUtil.padding(20, -1));\n\n        // this test escapes memoization and continues through\n        assertEquals(\"                     \", StringUtil.padding(21, -1));\n\n        // this test escapes memoization and using unlimited length (-1) will allow requested spaces\n        assertEquals(\"                              \", StringUtil.padding(30, -1));\n        assertEquals(\"                                             \", StringUtil.padding(45, -1));\n\n        // we tap out at 0 for this test\n        assertEquals(\"\", StringUtil.padding(0, 0));\n\n        // as memoization is escaped, setting zero for max padding will not allow any requested width\n        assertEquals(\"\", StringUtil.padding(21, 0));\n\n        // we tap out at 30 for these tests making > 30 use 30\n        assertEquals(\"\", StringUtil.padding(0, 30));\n        assertEquals(\" \", StringUtil.padding(1, 30));\n        assertEquals(\"  \", StringUtil.padding(2, 30));\n        assertEquals(\"               \", StringUtil.padding(15, 30));\n        assertEquals(\"                              \", StringUtil.padding(45, 30));\n\n        // max applies regardless of memoized\n        assertEquals(5, StringUtil.padding(20, 5).length());\n    }\n\n    @Test public void paddingInACan() {\n        String[] padding = StringUtil.padding;\n        assertEquals(21, padding.length);\n        for (int i = 0; i < padding.length; i++) {\n            assertEquals(i, padding[i].length());\n        }\n    }\n\n    @Test public void isBlank() {\n        assertTrue(StringUtil.isBlank(null));\n        assertTrue(StringUtil.isBlank(\"\"));\n        assertTrue(StringUtil.isBlank(\"      \"));\n        assertTrue(StringUtil.isBlank(\"   \\r\\n  \"));\n\n        assertFalse(StringUtil.isBlank(\"hello\"));\n        assertFalse(StringUtil.isBlank(\"   hello   \"));\n    }\n\n    @Test public void isNumeric() {\n        assertFalse(StringUtil.isNumeric(null));\n        assertFalse(StringUtil.isNumeric(\" \"));\n        assertFalse(StringUtil.isNumeric(\"123 546\"));\n        assertFalse(StringUtil.isNumeric(\"hello\"));\n        assertFalse(StringUtil.isNumeric(\"123.334\"));\n\n        assertTrue(StringUtil.isNumeric(\"1\"));\n        assertTrue(StringUtil.isNumeric(\"1234\"));\n    }\n\n    @Test public void isWhitespace() {\n        assertTrue(StringUtil.isWhitespace('\\t'));\n        assertTrue(StringUtil.isWhitespace('\\n'));\n        assertTrue(StringUtil.isWhitespace('\\r'));\n        assertTrue(StringUtil.isWhitespace('\\f'));\n        assertTrue(StringUtil.isWhitespace(' '));\n\n        assertFalse(StringUtil.isWhitespace('\\u00a0'));\n        assertFalse(StringUtil.isWhitespace('\\u2000'));\n        assertFalse(StringUtil.isWhitespace('\\u3000'));\n    }\n\n    @Test public void normaliseWhiteSpace() {\n        assertEquals(\" \", normaliseWhitespace(\"    \\r \\n \\r\\n\"));\n        assertEquals(\" hello there \", normaliseWhitespace(\"   hello   \\r \\n  there    \\n\"));\n        assertEquals(\"hello\", normaliseWhitespace(\"hello\"));\n        assertEquals(\"hello there\", normaliseWhitespace(\"hello\\nthere\"));\n    }\n\n    @Test public void normaliseWhiteSpaceHandlesHighSurrogates() {\n        String test71540chars = \"\\ud869\\udeb2\\u304b\\u309a  1\";\n        String test71540charsExpectedSingleWhitespace = \"\\ud869\\udeb2\\u304b\\u309a 1\";\n\n        assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars));\n        String extractedText = Jsoup.parse(test71540chars).text();\n        assertEquals(test71540charsExpectedSingleWhitespace, extractedText);\n    }\n\n    @Test public void resolvesRelativeUrls() {\n        assertEquals(\"http://example.com/one/two?three\", resolve(\"http://example.com\", \"./one/two?three\"));\n        assertEquals(\"http://example.com/one/two?three\", resolve(\"http://example.com?one\", \"./one/two?three\"));\n        assertEquals(\"http://example.com/one/two?three#four\", resolve(\"http://example.com\", \"./one/two?three#four\"));\n        assertEquals(\"https://example.com/one\", resolve(\"http://example.com/\", \"https://example.com/one\"));\n        assertEquals(\"http://example.com/one/two.html\", resolve(\"http://example.com/two/\", \"../one/two.html\"));\n        assertEquals(\"https://example2.com/one\", resolve(\"https://example.com/\", \"//example2.com/one\"));\n        assertEquals(\"https://example.com:8080/one\", resolve(\"https://example.com:8080\", \"./one\"));\n        assertEquals(\"https://example2.com/one\", resolve(\"http://example.com/\", \"https://example2.com/one\"));\n        assertEquals(\"https://example.com/one\", resolve(\"wrong\", \"https://example.com/one\"));\n        assertEquals(\"https://example.com/one\", resolve(\"https://example.com/one\", \"\"));\n        assertEquals(\"\", resolve(\"wrong\", \"also wrong\"));\n        assertEquals(\"ftp://example.com/one\", resolve(\"ftp://example.com/two/\", \"../one\"));\n        assertEquals(\"ftp://example.com/one/two.c\", resolve(\"ftp://example.com/one/\", \"./two.c\"));\n        assertEquals(\"ftp://example.com/one/two.c\", resolve(\"ftp://example.com/one/\", \"two.c\"));\n        // examples taken from rfc3986 section 5.4.2\n        assertEquals(\"http://example.com/g\", resolve(\"http://example.com/b/c/d;p?q\", \"../../../g\"));\n        assertEquals(\"http://example.com/g\", resolve(\"http://example.com/b/c/d;p?q\", \"../../../../g\"));\n        assertEquals(\"http://example.com/g\", resolve(\"http://example.com/b/c/d;p?q\", \"/./g\"));\n        assertEquals(\"http://example.com/g\", resolve(\"http://example.com/b/c/d;p?q\", \"/../g\"));\n        assertEquals(\"http://example.com/b/c/g.\", resolve(\"http://example.com/b/c/d;p?q\", \"g.\"));\n        assertEquals(\"http://example.com/b/c/.g\", resolve(\"http://example.com/b/c/d;p?q\", \".g\"));\n        assertEquals(\"http://example.com/b/c/g..\", resolve(\"http://example.com/b/c/d;p?q\", \"g..\"));\n        assertEquals(\"http://example.com/b/c/..g\", resolve(\"http://example.com/b/c/d;p?q\", \"..g\"));\n        assertEquals(\"http://example.com/b/g\", resolve(\"http://example.com/b/c/d;p?q\", \"./../g\"));\n        assertEquals(\"http://example.com/b/c/g/\", resolve(\"http://example.com/b/c/d;p?q\", \"./g/.\"));\n        assertEquals(\"http://example.com/b/c/g/h\", resolve(\"http://example.com/b/c/d;p?q\", \"g/./h\"));\n        assertEquals(\"http://example.com/b/c/h\", resolve(\"http://example.com/b/c/d;p?q\", \"g/../h\"));\n        assertEquals(\"http://example.com/b/c/g;x=1/y\", resolve(\"http://example.com/b/c/d;p?q\", \"g;x=1/./y\"));\n        assertEquals(\"http://example.com/b/c/y\", resolve(\"http://example.com/b/c/d;p?q\", \"g;x=1/../y\"));\n        assertEquals(\"http://example.com/b/c/g?y/./x\", resolve(\"http://example.com/b/c/d;p?q\", \"g?y/./x\"));\n        assertEquals(\"http://example.com/b/c/g?y/../x\", resolve(\"http://example.com/b/c/d;p?q\", \"g?y/../x\"));\n        assertEquals(\"http://example.com/b/c/g#s/./x\", resolve(\"http://example.com/b/c/d;p?q\", \"g#s/./x\"));\n        assertEquals(\"http://example.com/b/c/g#s/../x\", resolve(\"http://example.com/b/c/d;p?q\", \"g#s/../x\"));\n    }\n\n    @Test void stripsControlCharsFromUrls() {\n        // should resovle to an absolute url:\n        assertEquals(\"foo:bar\", resolve(\"\\nhttps://\\texample.com/\", \"\\r\\nfo\\to:ba\\br\"));\n    }\n\n    @Test void allowsSpaceInUrl() {\n        assertEquals(\"https://example.com/foo bar/\", resolve(\"HTTPS://example.com/example/\", \"../foo bar/\"));\n    }\n\n    @Test\n    void isAscii() {\n        assertTrue(StringUtil.isAscii(\"\"));\n        assertTrue(StringUtil.isAscii(\"example.com\"));\n        assertTrue(StringUtil.isAscii(\"One Two\"));\n        assertFalse(StringUtil.isAscii(\"\ud83e\uddd4\"));\n        assertFalse(StringUtil.isAscii(\"\u6d4b\u8bd5\"));\n        assertFalse(StringUtil.isAscii(\"\u6d4b\u8bd5.com\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/ElementIT.java.ElementIT", "name": "ElementIT", "file_path": "src/test/java/org/jsoup/nodes/ElementIT.java", "superclasses": "", "methods": ["[void]testFastReparent()", "[void]testFastReparentExistingContent()", "[void]hasTextNoOverflow()", "[void]dataNoOverflow()", "[void]parentsNoOverflow()", "[void]wrapNoOverflow()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ElementIT {\n    @Test\n    public void testFastReparent() {\n        StringBuilder htmlBuf = new StringBuilder();\n        int rows = 300000;\n        for (int i = 1; i <= rows; i++) {\n            htmlBuf\n                .append(\"<p>El-\")\n                .append(i)\n                .append(\"</p>\");\n        }\n        String html = htmlBuf.toString();\n        Document doc = Jsoup.parse(html);\n        long start = System.currentTimeMillis();\n\n        Element wrapper = new Element(\"div\");\n        List<Node> childNodes = doc.body().childNodes();\n        wrapper.insertChildren(0, childNodes);\n\n        long runtime = System.currentTimeMillis() - start;\n        assertEquals(rows, wrapper.childNodes.size());\n        assertEquals(rows, childNodes.size()); // child nodes is a wrapper, so still there\n        assertEquals(0, doc.body().childNodes().size()); // but on a fresh look, all gone\n\n        doc.body().empty().appendChild(wrapper);\n        Element wrapperAcutal = doc.body().children().get(0);\n        assertEquals(wrapper, wrapperAcutal);\n        assertEquals(\"El-1\", wrapperAcutal.children().get(0).text());\n        assertEquals(\"El-\" + rows, wrapperAcutal.children().get(rows - 1).text());\n        assertTrue(runtime <= 10000);\n    }\n\n    @Test\n    public void testFastReparentExistingContent() {\n        StringBuilder htmlBuf = new StringBuilder();\n        int rows = 300000;\n        for (int i = 1; i <= rows; i++) {\n            htmlBuf\n                .append(\"<p>El-\")\n                .append(i)\n                .append(\"</p>\");\n        }\n        String html = htmlBuf.toString();\n        Document doc = Jsoup.parse(html);\n        long start = System.currentTimeMillis();\n\n        Element wrapper = new Element(\"div\");\n        wrapper.append(\"<p>Prior Content</p>\");\n        wrapper.append(\"<p>End Content</p>\");\n        assertEquals(2, wrapper.childNodes.size());\n\n        List<Node> childNodes = doc.body().childNodes();\n        wrapper.insertChildren(1, childNodes);\n\n        long runtime = System.currentTimeMillis() - start;\n        assertEquals(rows + 2, wrapper.childNodes.size());\n        assertEquals(rows, childNodes.size()); // child nodes is a wrapper, so still there\n        assertEquals(0, doc.body().childNodes().size()); // but on a fresh look, all gone\n\n        doc.body().empty().appendChild(wrapper);\n        Element wrapperAcutal = doc.body().children().get(0);\n        assertEquals(wrapper, wrapperAcutal);\n        assertEquals(\"Prior Content\", wrapperAcutal.children().get(0).text());\n        assertEquals(\"El-1\", wrapperAcutal.children().get(1).text());\n\n        assertEquals(\"El-\" + rows, wrapperAcutal.children().get(rows).text());\n        assertEquals(\"End Content\", wrapperAcutal.children().get(rows + 1).text());\n\n        assertTrue(runtime <= 10000);\n    }\n\n    // These overflow tests take a couple seconds to run, so are in the slow tests\n    @Test void hasTextNoOverflow() {\n        // hasText() was recursive, so could overflow\n        Document doc = new Document(\"https://example.com/\");\n        Element el = doc.body();\n        for (int i = 0; i <= 50000; i++) {\n            el = el.appendElement(\"p\");\n        }\n        assertFalse(doc.hasText());\n        el.text(\"Hello\");\n        assertTrue(doc.hasText());\n        assertEquals(el.text(), doc.text());\n    }\n\n    @Test void dataNoOverflow() {\n        // data() was recursive, so could overflow\n        Document doc = new Document(\"https://example.com/\");\n        Element el = doc.body();\n        for (int i = 0; i <= 50000; i++) {\n            el = el.appendElement(\"p\");\n        }\n        Element script = el.appendElement(\"script\");\n        script.text(\"script\"); // holds data nodes, so inserts as data, not text\n        assertFalse(script.hasText());\n        assertEquals(\"script\", script.data());\n        assertEquals(el.data(), doc.data());\n    }\n\n    @Test void parentsNoOverflow() {\n        // parents() was recursive, so could overflow\n        Document doc = new Document(\"https://example.com/\");\n        Element el = doc.body();\n        int num = 50000;\n        for (int i = 0; i <= num; i++) {\n            el = el.appendElement(\"p\");\n        }\n        Elements parents = el.parents();\n        assertEquals(num+2, parents.size()); // +2 for html and body\n        assertEquals(doc, el.ownerDocument());\n    }\n\n    @Test void wrapNoOverflow() {\n        // deepChild was recursive, so could overflow if presented with a fairly insane wrap\n        Document doc = new Document(\"https://example.com/\");\n        Element el = doc.body().appendElement(\"p\");\n        int num = 50000;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= num; i++) {\n            sb.append(\"<div>\");\n        }\n        el.wrap(sb.toString());\n        String html = doc.body().html();\n        assertTrue(html.startsWith(\"<div>\"));\n        assertEquals(num + 3, el.parents().size());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/LeafNodeTest.java.LeafNodeTest", "name": "LeafNodeTest", "file_path": "src/test/java/org/jsoup/nodes/LeafNodeTest.java", "superclasses": "", "methods": ["[void]doesNotGetAttributesTooEasily()"], "method_uris": ["src/test/java/org/jsoup/nodes/LeafNodeTest.java.LeafNodeTest.[boolean]hasAnyAttributes(Node)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class LeafNodeTest {\n\n    @Test\n    public void doesNotGetAttributesTooEasily() {\n        // test to make sure we're not setting attributes on all nodes right away\n        String body = \"<p>One <!-- Two --> Three<![CDATA[Four]]></p>\";\n        Document doc = Jsoup.parse(body);\n        assertTrue(hasAnyAttributes(doc)); // should have one - the base uri on the doc\n\n        Element html = doc.child(0);\n        assertFalse(hasAnyAttributes(html));\n\n        String s = doc.outerHtml();\n        assertFalse(hasAnyAttributes(html));\n\n        Elements els = doc.select(\"p\");\n        Element p = els.first();\n        assertEquals(1, els.size());\n        assertFalse(hasAnyAttributes(html));\n\n        els = doc.select(\"p.none\");\n        assertFalse(hasAnyAttributes(html));\n\n        String id = p.id();\n        assertEquals(\"\", id);\n        assertFalse(p.hasClass(\"Foobs\"));\n        assertFalse(hasAnyAttributes(html));\n\n        p.addClass(\"Foobs\");\n        assertTrue(p.hasClass(\"Foobs\"));\n        assertTrue(hasAnyAttributes(html));\n        assertTrue(hasAnyAttributes(p));\n\n        Attributes attributes = p.attributes();\n        assertTrue(attributes.hasKey(\"class\"));\n        p.clearAttributes();\n        assertFalse(hasAnyAttributes(p));\n        assertFalse(hasAnyAttributes(html));\n        assertFalse(attributes.hasKey(\"class\"));\n    }\n\n    private boolean hasAnyAttributes(Node node) {\n        final boolean[] found = new boolean[1];\n        node.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                if (node.hasAttributes()) {\n                    found[0] = true;\n                    return FilterResult.STOP;\n                } else {\n                    return FilterResult.CONTINUE;\n                }\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        });\n        return found[0];\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/NodeTest.java.NodeTest", "name": "NodeTest", "file_path": "src/test/java/org/jsoup/nodes/NodeTest.java", "superclasses": "", "methods": ["[void]handlesBaseUri()", "[void]setBaseUriIsRecursive()", "[void]handlesAbsPrefix()", "[void]handlesAbsOnImage()", "[void]handlesAbsPrefixOnHasAttr()", "[void]literalAbsPrefix()", "[void]handleAbsOnFileUris()", "[void]handleAbsOnLocalhostFileUris()", "[void]handlesAbsOnProtocolessAbsoluteUris()", "[void]absHandlesRelativeQuery()", "[void]absHandlesDotFromIndex()", "[void]handlesAbsOnUnknownProtocols()", "[void]testRemove()", "[void]removeOnOrphanIsNoop()", "[void]testReplace()", "[void]ownerDocument()", "[void]root()", "[void]before()", "[void]beforeShuffle()", "[void]after()", "[void]afterShuffle()", "[void]unwrap()", "[void]unwrapNoChildren()", "[void]traverse()", "[void]forEachNode()", "[void]orphanNodeReturnsNullForSiblingElements()", "[void]nodeIsNotASiblingOfItself()", "[void]childNodesCopy()", "[void]supportsClone()", "[void]changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive()", "[void]clonedNodesHaveOwnerDocsAndIndependentSettings()", "[void]firstAndLastChild()", "[void]nodeName()", "[void]elementIs()", "[void]svgElementIs()"], "method_uris": ["src/test/java/org/jsoup/nodes/NodeTest.java.NodeTest.[Attributes]getAttributesCaseInsensitive(Element)", "src/test/java/org/jsoup/nodes/NodeTest.java.NodeTest.[Attributes]singletonAttributes()"], "overrides": null, "attributes": [], "class_docstring": "\nTests Nodes\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class NodeTest {\n    @Test public void handlesBaseUri() {\n        Tag tag = Tag.valueOf(\"a\");\n        Attributes attribs = new Attributes();\n        attribs.put(\"relHref\", \"/foo\");\n        attribs.put(\"absHref\", \"http://bar/qux\");\n\n        Element noBase = new Element(tag, \"\", attribs);\n        assertEquals(\"\", noBase.absUrl(\"relHref\")); // with no base, should NOT fallback to href attrib, whatever it is\n        assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); // no base but valid attrib, return attrib\n\n        Element withBase = new Element(tag, \"http://foo/\", attribs);\n        assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); // construct abs from base + rel\n        assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); // href is abs, so returns that\n        assertEquals(\"\", withBase.absUrl(\"noval\"));\n\n        Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs);\n        assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n        assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing\n    }\n\n    @Test public void setBaseUriIsRecursive() {\n        Document doc = Jsoup.parse(\"<div><p></p></div>\");\n        String baseUri = \"https://jsoup.org\";\n        doc.setBaseUri(baseUri);\n\n        assertEquals(baseUri, doc.baseUri());\n        assertEquals(baseUri, doc.select(\"div\").first().baseUri());\n        assertEquals(baseUri, doc.select(\"p\").first().baseUri());\n    }\n\n    @Test public void handlesAbsPrefix() {\n        Document doc = Jsoup.parse(\"<a href=/foo>Hello</a>\", \"https://jsoup.org/\");\n        Element a = doc.select(\"a\").first();\n        assertEquals(\"/foo\", a.attr(\"href\"));\n        assertEquals(\"https://jsoup.org/foo\", a.attr(\"abs:href\"));\n        assertTrue(a.hasAttr(\"abs:href\"));\n    }\n\n    @Test public void handlesAbsOnImage() {\n        Document doc = Jsoup.parse(\"<p><img src=\\\"/rez/osi_logo.png\\\" /></p>\", \"https://jsoup.org/\");\n        Element img = doc.select(\"img\").first();\n        assertEquals(\"https://jsoup.org/rez/osi_logo.png\", img.attr(\"abs:src\"));\n        assertEquals(img.absUrl(\"src\"), img.attr(\"abs:src\"));\n    }\n\n    @Test public void handlesAbsPrefixOnHasAttr() {\n        // 1: no abs url; 2: has abs url\n        Document doc = Jsoup.parse(\"<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org/'>Two</a>\");\n        Element one = doc.select(\"#1\").first();\n        Element two = doc.select(\"#2\").first();\n\n        assertFalse(one.hasAttr(\"abs:href\"));\n        assertTrue(one.hasAttr(\"href\"));\n        assertEquals(\"\", one.absUrl(\"href\"));\n\n        assertTrue(two.hasAttr(\"abs:href\"));\n        assertTrue(two.hasAttr(\"href\"));\n        assertEquals(\"https://jsoup.org/\", two.absUrl(\"href\"));\n    }\n\n    @Test public void literalAbsPrefix() {\n        // if there is a literal attribute \"abs:xxx\", don't try and make absolute.\n        Document doc = Jsoup.parse(\"<a abs:href='odd'>One</a>\");\n        Element el = doc.select(\"a\").first();\n        assertTrue(el.hasAttr(\"abs:href\"));\n        assertEquals(\"odd\", el.attr(\"abs:href\"));\n    }\n\n    @Test public void handleAbsOnFileUris() {\n        Document doc = Jsoup.parse(\"<a href='password'>One/a><a href='/var/log/messages'>Two</a>\", \"file:/etc/\");\n        Element one = doc.select(\"a\").first();\n        assertEquals(\"file:/etc/password\", one.absUrl(\"href\"));\n        Element two = doc.select(\"a\").get(1);\n        assertEquals(\"file:/var/log/messages\", two.absUrl(\"href\"));\n    }\n\n    @Test\n    public void handleAbsOnLocalhostFileUris() {\n        Document doc = Jsoup.parse(\"<a href='password'>One/a><a href='/var/log/messages'>Two</a>\", \"file://localhost/etc/\");\n        Element one = doc.select(\"a\").first();\n        assertEquals(\"file://localhost/etc/password\", one.absUrl(\"href\"));\n    }\n\n    @Test\n    public void handlesAbsOnProtocolessAbsoluteUris() {\n        Document doc1 = Jsoup.parse(\"<a href='//example.net/foo'>One</a>\", \"http://example.com/\");\n        Document doc2 = Jsoup.parse(\"<a href='//example.net/foo'>One</a>\", \"https://example.com/\");\n\n        Element one = doc1.select(\"a\").first();\n        Element two = doc2.select(\"a\").first();\n\n        assertEquals(\"http://example.net/foo\", one.absUrl(\"href\"));\n        assertEquals(\"https://example.net/foo\", two.absUrl(\"href\"));\n\n        Document doc3 = Jsoup.parse(\"<img src=//www.google.com/images/errors/logo_sm.gif alt=Google>\", \"https://google.com\");\n        assertEquals(\"https://www.google.com/images/errors/logo_sm.gif\", doc3.select(\"img\").attr(\"abs:src\"));\n    }\n\n    /*\n    Test for an issue with Java's abs URL handler.\n     */\n    @Test public void absHandlesRelativeQuery() {\n        Document doc = Jsoup.parse(\"<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>\", \"https://jsoup.org/path/file?bar\");\n\n        Element a1 = doc.select(\"a\").first();\n        assertEquals(\"https://jsoup.org/path/file?foo\", a1.absUrl(\"href\"));\n\n        Element a2 = doc.select(\"a\").get(1);\n        assertEquals(\"https://jsoup.org/path/bar.html?foo\", a2.absUrl(\"href\"));\n    }\n\n    @Test public void absHandlesDotFromIndex() {\n        Document doc = Jsoup.parse(\"<a href='./one/two.html'>One</a>\", \"http://example.com\");\n        Element a1 = doc.select(\"a\").first();\n        assertEquals(\"http://example.com/one/two.html\", a1.absUrl(\"href\"));\n    }\n\n    @Test public void handlesAbsOnUnknownProtocols() {\n        // https://github.com/jhy/jsoup/issues/1610\n        // URL would throw on unknown protocol tel: as no stream handler is registered\n\n        String[] urls = {\"mailto:example@example.com\", \"tel:867-5309\"}; // mail has a handler, tel doesn't\n        for (String url : urls) {\n            Attributes attr = new Attributes().put(\"href\", url);\n            Element noBase = new Element(Tag.valueOf(\"a\"), null, attr);\n            assertEquals(url, noBase.absUrl(\"href\"));\n\n            Element withBase = new Element(Tag.valueOf(\"a\"), \"http://example.com/\", attr);\n            assertEquals(url, withBase.absUrl(\"href\"));\n        }\n    }\n\n    @Test public void testRemove() {\n        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n        Element p = doc.select(\"p\").first();\n        p.childNode(0).remove();\n\n        assertEquals(\"two three\", p.text());\n        assertEquals(\"<span>two</span> three\", TextUtil.stripNewlines(p.html()));\n    }\n\n    @Test void removeOnOrphanIsNoop() {\n        // https://github.com/jhy/jsoup/issues/1898\n        Element node = new Element(\"div\");\n        assertNull(node.parentNode());\n        node.remove();\n        assertNull(node.parentNode());\n    }\n\n    @Test public void testReplace() {\n        Document doc = Jsoup.parse(\"<p>One <span>two</span> three</p>\");\n        Element p = doc.select(\"p\").first();\n        Element insert = doc.createElement(\"em\").text(\"foo\");\n        p.childNode(1).replaceWith(insert);\n\n        assertEquals(\"One <em>foo</em> three\", p.html());\n    }\n\n    @Test public void ownerDocument() {\n        Document doc = Jsoup.parse(\"<p>Hello\");\n        Element p = doc.select(\"p\").first();\n        assertSame(p.ownerDocument(), doc);\n        assertSame(doc.ownerDocument(), doc);\n        assertNull(doc.parent());\n    }\n\n    @Test public void root() {\n        Document doc = Jsoup.parse(\"<div><p>Hello\");\n        Element p = doc.select(\"p\").first();\n        Node root = p.root();\n        assertSame(doc, root);\n        assertNull(root.parent());\n        assertSame(doc.root(), doc);\n        assertSame(doc.root(), doc.ownerDocument());\n\n        Element standAlone = new Element(Tag.valueOf(\"p\"), \"\");\n        assertNull(standAlone.parent());\n        assertSame(standAlone.root(), standAlone);\n        assertNull(standAlone.ownerDocument());\n    }\n\n    @Test public void before() {\n        Document doc = Jsoup.parse(\"<p>One <b>two</b> three</p>\");\n        Element newNode = new Element(Tag.valueOf(\"em\"), \"\");\n        newNode.appendText(\"four\");\n\n        doc.select(\"b\").first().before(newNode);\n        assertEquals(\"<p>One <em>four</em><b>two</b> three</p>\", doc.body().html());\n\n        doc.select(\"b\").first().before(\"<i>five</i>\");\n        assertEquals(\"<p>One <em>four</em><i>five</i><b>two</b> three</p>\", doc.body().html());\n    }\n\n    @Test void beforeShuffle() {\n        // https://github.com/jhy/jsoup/issues/1898\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element div = doc.select(\"div\").get(0);\n        Elements ps = doc.select(\"p\");\n        Element p1 = ps.get(0);\n        Element p2 = ps.get(1);\n        Element p3 = ps.get(2);\n\n        p2.before(p1);\n        p3.before(p2);\n        // ^ should be no-ops, they are already before\n        assertEquals(\"One Two Three\", div.text());\n\n        p2.before(p1);\n        p1.before(p3);\n        assertEquals(\"Three One Two\", div.text());\n    }\n\n    @Test public void after() {\n        Document doc = Jsoup.parse(\"<p>One <b>two</b> three</p>\");\n        Element newNode = new Element(Tag.valueOf(\"em\"), \"\");\n        newNode.appendText(\"four\");\n\n        doc.select(\"b\").first().after(newNode);\n        assertEquals(\"<p>One <b>two</b><em>four</em> three</p>\", doc.body().html());\n\n        doc.select(\"b\").first().after(\"<i>five</i>\");\n        assertEquals(\"<p>One <b>two</b><i>five</i><em>four</em> three</p>\", doc.body().html());\n    }\n\n    @Test void afterShuffle() {\n        // https://github.com/jhy/jsoup/issues/1898\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element div = doc.select(\"div\").get(0);\n        Elements ps = doc.select(\"p\");\n        Element p1 = ps.get(0);\n        Element p2 = ps.get(1);\n        Element p3 = ps.get(2);\n\n        p1.after(p2);\n        p2.after(p3);\n        // ^ should be no-ops, they are already before\n        assertEquals(\"One Two Three\", div.text());\n\n        p3.after(p1);\n        p1.after(p2);\n        assertEquals(\"Three One Two\", div.text());\n    }\n\n    @Test public void unwrap() {\n        Document doc = Jsoup.parse(\"<div>One <span>Two <b>Three</b></span> Four</div>\");\n        Element span = doc.select(\"span\").first();\n        Node twoText = span.childNode(0);\n        Node node = span.unwrap();\n\n        assertEquals(\"<div>One Two <b>Three</b> Four</div>\", TextUtil.stripNewlines(doc.body().html()));\n        assertTrue(node instanceof TextNode);\n        assertEquals(\"Two \", ((TextNode) node).text());\n        assertEquals(node, twoText);\n        assertEquals(node.parent(), doc.select(\"div\").first());\n    }\n\n    @Test public void unwrapNoChildren() {\n        Document doc = Jsoup.parse(\"<div>One <span></span> Two</div>\");\n        Element span = doc.select(\"span\").first();\n        Node node = span.unwrap();\n        assertEquals(\"<div>One  Two</div>\", TextUtil.stripNewlines(doc.body().html()));\n        assertNull(node);\n    }\n\n    @Test public void traverse() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n        final StringBuilder accum = new StringBuilder();\n        doc.select(\"div\").first().traverse(new NodeVisitor() {\n            @Override\n            public void head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n            }\n\n            @Override\n            public void tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n            }\n        });\n        assertEquals(\"<div><p><#text></#text></p></div>\", accum.toString());\n    }\n\n    @Test public void forEachNode() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div><div id=1>Gone<p></div>\");\n        doc.forEachNode(node -> {\n            if (node instanceof TextNode) {\n                TextNode textNode = (TextNode) node;\n                if (textNode.text().equals(\"There\")) {\n                    textNode.text(\"There Now\");\n                    textNode.after(\"<p>Another\");\n                }\n            } else if (node.attr(\"id\").equals(\"1\"))\n                node.remove();\n        });\n        assertEquals(\"<div><p>Hello</p></div><div>There Now<p>Another</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void orphanNodeReturnsNullForSiblingElements() {\n        Node node = new Element(Tag.valueOf(\"p\"), \"\");\n        Element el = new Element(Tag.valueOf(\"p\"), \"\");\n\n        assertEquals(0, node.siblingIndex());\n        assertEquals(0, node.siblingNodes().size());\n\n        assertNull(node.previousSibling());\n        assertNull(node.nextSibling());\n\n        assertEquals(0, el.siblingElements().size());\n        assertNull(el.previousElementSibling());\n        assertNull(el.nextElementSibling());\n    }\n\n    @Test public void nodeIsNotASiblingOfItself() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());\n        List<Node> nodes = p2.siblingNodes();\n        assertEquals(2, nodes.size());\n        assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());\n        assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());\n    }\n\n    @Test public void childNodesCopy() {\n        Document doc = Jsoup.parse(\"<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>\");\n        Element div1 = doc.select(\"#1\").first();\n        Element div2 = doc.select(\"#2\").first();\n        List<Node> divChildren = div1.childNodesCopy();\n        assertEquals(5, divChildren.size());\n        TextNode tn1 = (TextNode) div1.childNode(0);\n        TextNode tn2 = (TextNode) divChildren.get(0);\n        tn2.text(\"Text 1 updated\");\n        assertEquals(\"Text 1 \", tn1.text());\n        div2.insertChildren(-1, divChildren);\n        assertEquals(\"<div id=\\\"1\\\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\\\"2\\\">Text 1 updated\"\n            +\"<p>One</p> Text 2 <p>Two</p><p>Three</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test public void supportsClone() {\n        Document doc = org.jsoup.Jsoup.parse(\"<div class=foo>Text</div>\");\n        Element el = doc.select(\"div\").first();\n        assertTrue(el.hasClass(\"foo\"));\n\n        Element elClone = doc.clone().select(\"div\").first();\n        assertTrue(elClone.hasClass(\"foo\"));\n        assertEquals(\"Text\", elClone.text());\n\n        el.removeClass(\"foo\");\n        el.text(\"None\");\n        assertFalse(el.hasClass(\"foo\"));\n        assertTrue(elClone.hasClass(\"foo\"));\n        assertEquals(\"None\", el.text());\n        assertEquals(\"Text\", elClone.text());\n    }\n\n    @Test public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive() {\n        Document document = Jsoup.parse(\"<INPUT id=\\\"foo\\\" NAME=\\\"foo\\\" VALUE=\\\"\\\">\");\n        Element inputElement = document.select(\"#foo\").first();\n\n        inputElement.attr(\"value\",\"bar\");\n\n        assertEquals(singletonAttributes(), getAttributesCaseInsensitive(inputElement));\n    }\n\n    private Attributes getAttributesCaseInsensitive(Element element) {\n        Attributes matches = new Attributes();\n        for (Attribute attribute : element.attributes()) {\n            if (attribute.getKey().equalsIgnoreCase(\"value\")) {\n                matches.put(attribute);\n            }\n        }\n        return matches;\n    }\n\n    private Attributes singletonAttributes() {\n        Attributes attributes = new Attributes();\n        attributes.put(\"value\", \"bar\");\n        return attributes;\n    }\n\n    @Test void clonedNodesHaveOwnerDocsAndIndependentSettings() {\n        // https://github.com/jhy/jsoup/issues/763\n        Document doc = Jsoup.parse(\"<div>Text</div><div>Two</div>\");\n        doc.outputSettings().prettyPrint(false);\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        TextNode text = (TextNode) div.childNode(0);\n        assertNotNull(text);\n\n        TextNode textClone = text.clone();\n        Document docClone = textClone.ownerDocument();\n        assertNotNull(docClone);\n        assertFalse(docClone.outputSettings().prettyPrint());\n        assertNotSame(doc, docClone);\n\n        doc.outputSettings().prettyPrint(true);\n        assertTrue(doc.outputSettings().prettyPrint());\n        assertFalse(docClone.outputSettings().prettyPrint());\n        assertEquals(1, docClone.childNodes().size()); // check did not get the second div as the owner's children\n        assertEquals(textClone, docClone.childNode(0)); // note not the head or the body -- not normalized\n    }\n\n    @Test\n    void firstAndLastChild() {\n        String html = \"<div>One <span>Two</span> <a href></a> Three</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.selectFirst(\"div\");\n        Element a = doc.selectFirst(\"a\");\n        assertNotNull(div);\n        assertNotNull(a);\n\n        // nodes\n        TextNode first = (TextNode) div.firstChild();\n        assertEquals(\"One \", first.text());\n\n        TextNode last = (TextNode) div.lastChild();\n        assertEquals(\" Three\", last.text());\n\n        assertNull(a.firstChild());\n        assertNull(a.lastChild());\n\n        // elements\n        Element firstEl = div.firstElementChild();\n        assertEquals(\"span\", firstEl.tagName());\n\n        Element lastEl = div.lastElementChild();\n        assertEquals(\"a\", lastEl.tagName());\n\n        assertNull(a.firstElementChild());\n        assertNull(a.lastElementChild());\n\n        assertNull(firstEl.firstElementChild());\n        assertNull(firstEl.lastElementChild());\n    }\n\n    @Test void nodeName() {\n        Element div = new Element(\"DIV\");\n        assertEquals(\"DIV\", div.tagName());\n        assertEquals(\"DIV\", div.nodeName());\n        assertEquals(\"div\", div.normalName());\n        assertTrue(div.nameIs(\"div\"));\n\n        TextNode text = new TextNode(\"Some Text\");\n        assertEquals(\"#text\", text.nodeName());\n        assertEquals(\"#text\", text.normalName());\n    }\n\n    @Test void elementIs() {\n        String html = \"<div><p>One</p>\";\n        Document doc = Jsoup.parse(html);\n\n        Element p = doc.expectFirst(\"p\");\n        TextNode text = (TextNode) p.childNode(0);\n\n        assertTrue(text.parentElementIs(\"p\", NamespaceHtml));\n        assertFalse(text.parentElementIs(\"div\", NamespaceHtml));\n        assertFalse(text.parentElementIs(\"p\", NamespaceXml));\n\n        assertTrue(p.parentElementIs(\"div\", NamespaceHtml));\n        assertTrue(p.elementIs(\"p\", NamespaceHtml));\n        assertTrue(p.nameIs(\"p\"));\n        assertFalse(p.nameIs(\"P\"));\n    }\n\n    @Test void svgElementIs() {\n        String html = \"<div><svg><path>1,2,3</path></svg></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Element svg = doc.expectFirst(\"svg\");\n        assertTrue(svg.nameIs(\"svg\"));\n        assertFalse(svg.elementIs(\"svg\", NamespaceHtml));\n        assertTrue(svg.elementIs(\"svg\", NamespaceSvg));\n\n        TextNode data = (TextNode) svg.childNode(0).childNode(0);\n        assertTrue(data.parentElementIs(\"path\", NamespaceSvg));\n        assertTrue(data.parentNameIs(\"path\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/AttributesTest.java.AttributesTest", "name": "AttributesTest", "file_path": "src/test/java/org/jsoup/nodes/AttributesTest.java", "superclasses": "", "methods": ["[void]html()", "[void]testIteratorRemovable()", "[void]testIteratorUpdateable()", "[void]testIteratorHasNext()", "[void]testIterator()", "[void]testIteratorSkipsInternal()", "[void]iteratorThrows()", "[void]testListSkipsInternal()", "[void]htmlSkipsInternals()", "[void]testIteratorEmpty()", "[void]testIteratorRemove()", "[void]testIteratorRemoveConcurrentException()", "[void]removeCaseSensitive()", "[void]testSetKeyConsistency()", "[void]testBoolean()", "[void]testSizeWhenHasInternal()", "[void]testBooleans()", "[void]booleanNullAttributesConsistent()", "[void]booleanEmptyString()", "[void]booleanCaseInsensitive()", "[void]equalsIsOrderInsensitive()", "[void]cloneAttributes()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nTests for Attributes.\n\n@author Jonathan Hedley\n", "original_string": "public class AttributesTest {\n\n    @Test\n    public void html() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n\n        assertEquals(3, a.size());\n        assertTrue(a.hasKey(\"Tot\"));\n        assertTrue(a.hasKey(\"Hello\"));\n        assertTrue(a.hasKey(\"data-name\"));\n        assertFalse(a.hasKey(\"tot\"));\n        assertTrue(a.hasKeyIgnoreCase(\"tot\"));\n        assertEquals(\"There\", a.getIgnoreCase(\"hEllo\"));\n\n        Map<String, String> dataset = a.dataset();\n        assertEquals(1, dataset.size());\n        assertEquals(\"Jsoup\", dataset.get(\"name\"));\n        assertEquals(\"\", a.get(\"tot\"));\n        assertEquals(\"a&p\", a.get(\"Tot\"));\n        assertEquals(\"a&p\", a.getIgnoreCase(\"tot\"));\n\n        assertEquals(\" Tot=\\\"a&amp;p\\\" Hello=\\\"There\\\" data-name=\\\"Jsoup\\\"\", a.html());\n        assertEquals(a.html(), a.toString());\n    }\n\n    @Test\n    public void testIteratorRemovable() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n        assertTrue(a.hasKey(\"Tot\"));\n\n        Iterator<Attribute> iterator = a.iterator();\n        Attribute attr = iterator.next();\n        assertEquals(\"Tot\", attr.getKey());\n        iterator.remove();\n        assertEquals(2, a.size());\n        attr = iterator.next();\n        assertEquals(\"Hello\", attr.getKey());\n        assertEquals(\"There\", attr.getValue());\n\n        // make sure that's flowing to the underlying attributes object\n        assertEquals(2, a.size());\n        assertEquals(\"There\", a.get(\"Hello\"));\n        assertFalse(a.hasKey(\"Tot\"));\n    }\n\n    @Test\n    public void testIteratorUpdateable() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"Hello\", \"There\");\n\n        assertFalse(a.hasKey(\"Foo\"));\n        Iterator<Attribute> iterator = a.iterator();\n        Attribute attr = iterator.next();\n        attr.setKey(\"Foo\");\n        attr = iterator.next();\n        attr.setKey(\"Bar\");\n        attr.setValue(\"Qux\");\n\n        assertEquals(\"a&p\", a.get(\"Foo\"));\n        assertEquals(\"Qux\", a.get(\"Bar\"));\n        assertFalse(a.hasKey(\"Tot\"));\n        assertFalse(a.hasKey(\"Hello\"));\n    }\n\n    @Test public void testIteratorHasNext() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"1\");\n        a.put(\"Hello\", \"2\");\n        a.put(\"data-name\", \"3\");\n\n        int seen = 0;\n        for (Attribute attribute : a) {\n            seen++;\n            assertEquals(String.valueOf(seen), attribute.getValue());\n        }\n        assertEquals(3, seen);\n    }\n\n    @Test\n    public void testIterator() {\n        Attributes a = new Attributes();\n        String[][] datas = {{\"Tot\", \"raul\"},\n            {\"Hello\", \"pismuth\"},\n            {\"data-name\", \"Jsoup\"}};\n        for (String[] atts : datas) {\n            a.put(atts[0], atts[1]);\n        }\n\n        Iterator<Attribute> iterator = a.iterator();\n        assertTrue(iterator.hasNext());\n        int i = 0;\n        for (Attribute attribute : a) {\n            assertEquals(datas[i][0], attribute.getKey());\n            assertEquals(datas[i][1], attribute.getValue());\n            i++;\n        }\n        assertEquals(datas.length, i);\n    }\n\n    @Test\n    public void testIteratorSkipsInternal() {\n        Attributes a = new Attributes();\n        a.put(\"One\", \"One\");\n        a.put(Attributes.internalKey(\"baseUri\"), \"example.com\");\n        a.put(\"Two\", \"Two\");\n        a.put(Attributes.internalKey(\"another\"), \"example.com\");\n\n        Iterator<Attribute> it = a.iterator();\n        assertTrue(it.hasNext());\n        assertEquals(\"One\", it.next().getKey());\n        assertTrue(it.hasNext());\n        assertEquals(\"Two\", it.next().getKey());\n        assertFalse(it.hasNext());\n\n        int seen = 0;\n        for (Attribute attribute : a) {\n            seen++;\n        }\n        assertEquals(2, seen);\n    }\n\n    @Test void iteratorThrows() {\n        Attributes attrs = new Attributes();\n        attrs.put(\"One\", \"one\").put(\"Two\", \"two\");\n\n        Iterator<Attribute> it = attrs.iterator();\n        int seen = 0;\n        while (it.hasNext()) {\n            it.next();\n            seen++;\n        }\n        assertFalse(it.hasNext());\n        assertEquals(2, seen);\n\n        boolean threw = false;\n        try {\n            Attribute next = it.next();\n            assertNotNull(next); // not hit\n        } catch (NoSuchElementException e) {\n            threw = true;\n        }\n        assertTrue(threw);\n    }\n\n    @Test\n    public void testListSkipsInternal() {\n        Attributes a = new Attributes();\n        a.put(\"One\", \"One\");\n        a.put(Attributes.internalKey(\"baseUri\"), \"example.com\");\n        a.put(\"Two\", \"Two\");\n        a.put(Attributes.internalKey(\"another\"), \"example.com\");\n\n        List<Attribute> attributes = a.asList();\n        assertEquals(2, attributes.size());\n        assertEquals(\"One\", attributes.get(0).getKey());\n        assertEquals(\"Two\", attributes.get(1). getKey());\n    }\n\n    @Test public void htmlSkipsInternals() {\n        Attributes a = new Attributes();\n        a.put(\"One\", \"One\");\n        a.put(Attributes.internalKey(\"baseUri\"), \"example.com\");\n        a.put(\"Two\", \"Two\");\n        a.put(Attributes.internalKey(\"another\"), \"example.com\");\n\n        assertEquals(\" One=\\\"One\\\" Two=\\\"Two\\\"\", a.html());\n    }\n\n    @Test\n    public void testIteratorEmpty() {\n        Attributes a = new Attributes();\n\n        Iterator<Attribute> iterator = a.iterator();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorRemove() {\n        String html = \"<div 1=1 2=2 3=3 4=4>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.expectFirst(\"div\");\n        Attributes attrs = el.attributes();\n\n        Iterator<Attribute> iter = attrs.iterator();\n        int seen = 0;\n        while (iter.hasNext()) {\n            seen++;\n            Attribute attr = iter.next();\n            iter.remove();\n        }\n        assertEquals(4, seen);\n        assertEquals(0, attrs.size());\n        assertEquals(0, el.attributesSize());\n    }\n\n    @Test\n    public void testIteratorRemoveConcurrentException() {\n        String html = \"<div 1=1 2=2 3=3 4=4>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.expectFirst(\"div\");\n        Attributes attrs = el.attributes();\n\n        Iterator<Attribute> iter = attrs.iterator();\n        int seen = 0;\n        boolean threw = false;\n        try {\n            while (iter.hasNext()) {\n                seen++;\n                Attribute next = iter.next();\n                el.removeAttr(next.getKey());\n            }\n        } catch (ConcurrentModificationException e) {\n            threw = true;\n        }\n\n        assertEquals(1, seen);\n        assertTrue(threw);\n    }\n\n    @Test\n    public void removeCaseSensitive() {\n        Attributes a = new Attributes();\n        a.put(\"Tot\", \"a&p\");\n        a.put(\"tot\", \"one\");\n        a.put(\"Hello\", \"There\");\n        a.put(\"hello\", \"There\");\n        a.put(\"data-name\", \"Jsoup\");\n\n        assertEquals(5, a.size());\n        a.remove(\"Tot\");\n        a.remove(\"Hello\");\n        assertEquals(3, a.size());\n        assertTrue(a.hasKey(\"tot\"));\n        assertFalse(a.hasKey(\"Tot\"));\n    }\n\n    @Test\n    public void testSetKeyConsistency() {\n        Attributes a = new Attributes();\n        a.put(\"a\", \"a\");\n        for(Attribute at : a) {\n            at.setKey(\"b\");\n        }\n        assertFalse(a.hasKey(\"a\"), \"Attribute 'a' not correctly removed\");\n        assertTrue(a.hasKey(\"b\"), \"Attribute 'b' not present after renaming\");\n    }\n\n    @Test\n    public void testBoolean() {\n        Attributes ats = new Attributes();\n        ats.put(\"a\", \"a\");\n        ats.put(\"B\", \"b\");\n        ats.put(\"c\", null);\n\n        assertTrue(ats.hasDeclaredValueForKey(\"a\"));\n        assertFalse(ats.hasDeclaredValueForKey(\"A\"));\n        assertTrue(ats.hasDeclaredValueForKeyIgnoreCase(\"A\"));\n\n        assertFalse(ats.hasDeclaredValueForKey(\"c\"));\n        assertFalse(ats.hasDeclaredValueForKey(\"C\"));\n        assertFalse(ats.hasDeclaredValueForKeyIgnoreCase(\"C\"));\n    }\n\n    @Test public void testSizeWhenHasInternal() {\n        Attributes a = new Attributes();\n        a.put(\"One\", \"One\");\n        a.put(\"Two\", \"Two\");\n        assertEquals(2, a.size());\n\n        a.put(Attributes.internalKey(\"baseUri\"), \"example.com\");\n        a.put(Attributes.internalKey(\"another\"), \"example.com\");\n        a.put(Attributes.internalKey(\"last\"), \"example.com\");\n        a.remove(Attributes.internalKey(\"last\"));\n\n        assertEquals(4, a.size());\n        assertEquals(2, a.asList().size()); // excluded from lists\n    }\n\n    @Test public void testBooleans() {\n        // want unknown=null, and known like async=null, async=\"\", and async=async to collapse\n        String html = \"<a foo bar=\\\"\\\" async=async qux=qux defer=deferring ismap inert=\\\"\\\">\";\n        Element el = Jsoup.parse(html).selectFirst(\"a\");\n        assertEquals(\" foo bar=\\\"\\\" async qux=\\\"qux\\\" defer=\\\"deferring\\\" ismap inert\", el.attributes().html());\n\n    }\n\n    @Test public void booleanNullAttributesConsistent() {\n        Attributes attributes = new Attributes();\n        attributes.put(\"key\", null);\n        Attribute attribute = attributes.iterator().next();\n\n        assertEquals(\"key\", attribute.html());\n        assertEquals(\" key\", attributes.html());\n    }\n\n    @Test public void booleanEmptyString() {\n        Attributes attributes = new Attributes();\n        attributes.put(\"checked\", \"\");\n        Attribute attribute = attributes.iterator().next();\n\n        assertEquals(\"checked\", attribute.html());\n        assertEquals(\" checked\", attributes.html());\n    }\n\n    @Test public void booleanCaseInsensitive() {\n        Attributes attributes = new Attributes();\n        attributes.put(\"checked\", \"CHECKED\");\n        Attribute attribute = attributes.iterator().next();\n\n        assertEquals(\"checked\", attribute.html());\n        assertEquals(\" checked\", attributes.html());\n    }\n\n    @Test public void equalsIsOrderInsensitive() {\n        Attributes one = new Attributes()\n            .add(\"Key1\", \"Val1\")\n            .add(\"Key2\", \"Val2\")\n            .add(\"Key3\", null);\n\n        Attributes two = new Attributes()\n            .add(\"Key1\", \"Val1\")\n            .add(\"Key2\", \"Val2\")\n            .add(\"Key3\", null);\n\n        Attributes three = new Attributes()\n            .add(\"Key2\", \"Val2\")\n            .add(\"Key3\", null)\n            .add(\"Key1\", \"Val1\");\n\n        Attributes four = new Attributes()\n            .add(\"Key1\", \"Val1\")\n            .add(\"Key2\", \"Val2\")\n            .add(\"Key3\", null)\n            .add(\"Key4\", \"Val4\");\n\n        assertEquals(one, one.clone());\n        assertEquals(one, two);\n        assertEquals(two, two);\n        assertEquals(one, three);\n        assertEquals(two, three);\n        assertEquals(three, three);\n        assertEquals(three, three.clone());\n        assertEquals(four, four);\n        assertEquals(four, four.clone());\n        assertNotEquals(one, four);\n    }\n\n    @Test void cloneAttributes() {\n        Attributes one = new Attributes()\n            .add(\"Key1\", \"Val1\")\n            .add(\"Key2\", \"Val2\")\n            .add(\"Key3\", null);\n        Attributes two = one.clone();\n        assertEquals(3, two.size());\n        assertEquals(\"Val2\", two.get(\"Key2\"));\n        assertEquals(one, two);\n\n        two.add(\"Key4\", \"Val4\");\n        assertEquals(4, two.size());\n        assertEquals(3, one.size());\n        assertNotEquals(one, two);\n\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/CommentTest.java.CommentTest", "name": "CommentTest", "file_path": "src/test/java/org/jsoup/nodes/CommentTest.java", "superclasses": "", "methods": ["[void]nodeName()", "[void]getData()", "[void]testToString()", "[void]testHtmlNoPretty()", "[void]stableIndentInBlock()", "[void]testClone()", "[void]isXmlDeclaration()", "[void]asXmlDeclaration()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CommentTest {\n    private Comment comment = new Comment(\" This is one heck of a comment! \");\n    private Comment decl = new Comment(\"?xml encoding='ISO-8859-1'?\");\n\n    @Test\n    public void nodeName() {\n        assertEquals(\"#comment\", comment.nodeName());\n    }\n\n    @Test\n    public void getData() {\n        assertEquals(\" This is one heck of a comment! \", comment.getData());\n    }\n\n    @Test\n    public void testToString() {\n        assertEquals(\"<!-- This is one heck of a comment! -->\", comment.toString());\n\n        Document doc = Jsoup.parse(\"<div><!-- comment--></div>\");\n        assertEquals(\"<div>\\n <!-- comment-->\\n</div>\", doc.body().html());\n\n        doc = Jsoup.parse(\"<p>One<!-- comment -->Two</p>\");\n        assertEquals(\"<p>One<!-- comment -->Two</p>\", doc.body().html());\n        assertEquals(\"OneTwo\", doc.text());\n    }\n\n    @Test\n    public void testHtmlNoPretty() {\n        Document doc = Jsoup.parse(\"<!-- a simple comment -->\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<!-- a simple comment --><html><head></head><body></body></html>\", doc.html());\n        Node node = doc.childNode(0);\n        Comment c1 = (Comment) node;\n        assertEquals(\"<!-- a simple comment -->\", c1.outerHtml());\n    }\n\n    @Test void stableIndentInBlock() {\n        String html = \"<div><!-- comment --> Text</div><p><!-- comment --> Text</p>\";\n        Document doc = Jsoup.parse(html);\n        String out = doc.body().html();\n        assertEquals(\"<div>\\n\" +\n            \" <!-- comment --> Text\\n\" +\n            \"</div>\\n\" +\n            \"<p><!-- comment --> Text</p>\", out);\n\n        Document doc2 = Jsoup.parse(out);\n        String out2 = doc2.body().html();\n        assertEquals(out, out2);\n    }\n\n    @Test\n    public void testClone() {\n        Comment c1 = comment.clone();\n        assertNotSame(comment, c1);\n        assertEquals(comment.getData(), comment.getData());\n        c1.setData(\"New\");\n        assertEquals(\"New\", c1.getData());\n        assertNotEquals(c1.getData(), comment.getData());\n    }\n\n    @Test\n    public void isXmlDeclaration() {\n        assertFalse(comment.isXmlDeclaration());\n        assertTrue(decl.isXmlDeclaration());\n    }\n\n    @Test\n    public void asXmlDeclaration() {\n        XmlDeclaration xmlDeclaration = decl.asXmlDeclaration();\n        assertNotNull(xmlDeclaration);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private Comment comment = new Comment(\" This is one heck of a comment! \");", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Comment", "name": "comment = new Comment(\" This is one heck of a comment! \")", "syntax_pass": true}, {"attribute_expression": "private Comment decl = new Comment(\"?xml encoding='ISO-8859-1'?\");", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Comment", "name": "decl = new Comment(\"?xml encoding='ISO-8859-1'?\")", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/nodes/DocumentTest.java.DocumentTest", "name": "DocumentTest", "file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java", "superclasses": "", "methods": ["[void]setTextPreservesDocumentStructure()", "[void]testTitles()", "[void]testOutputEncoding()", "[void]testXhtmlReferences()", "[void]testNormalisesStructure()", "[void]accessorsWillNormalizeStructure()", "[void]accessorsAreCaseInsensitive()", "[void]testClone()", "[void]testBasicIndent()", "[void]testClonesDeclarations()", "[void]testLocation()", "[void]testLocationFromString()", "[void]testHtmlAndXmlSyntax()", "[void]htmlParseDefaultsToHtmlOutputSyntax()", "[void]testHtmlAppendable()", "[void]testOverflowClone()", "[void]DocumentsWithSameContentAreEqual()", "[void]DocumentsWithSameContentAreVerifiable()", "[void]testMetaCharsetUpdateUtf8()", "[void]testMetaCharsetUpdateIso8859()", "[void]testMetaCharsetUpdateNoCharset()", "[void]testMetaCharsetUpdateDisabled()", "[void]testMetaCharsetUpdateDisabledNoChanges()", "[void]testMetaCharsetUpdateEnabledAfterCharsetChange()", "[void]testMetaCharsetUpdateCleanup()", "[void]testMetaCharsetUpdateXmlUtf8()", "[void]testMetaCharsetUpdateXmlIso8859()", "[void]testMetaCharsetUpdateXmlNoCharset()", "[void]testMetaCharsetUpdateXmlDisabled()", "[void]testMetaCharsetUpdateXmlDisabledNoChanges()", "[void]testMetaCharsetUpdatedDisabledPerDefault()", "[void]testShiftJisRoundtrip()", "[void]parseAndHtmlOnDifferentThreads()", "[void]testDocumentTypeGet()", "[void]framesetSupportsBodyMethod()", "[void]forms()", "[void]expectForm()"], "method_uris": ["src/test/java/org/jsoup/nodes/DocumentTest.java.DocumentTest.[Document]createHtmlDocument(String)", "src/test/java/org/jsoup/nodes/DocumentTest.java.DocumentTest.[Document]createXmlDocument(String,String,boolean)"], "overrides": null, "attributes": [], "class_docstring": "\nTests for Document.\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class DocumentTest {\n    private static final String charsetUtf8 = \"UTF-8\";\n    private static final String charsetIso8859 = \"ISO-8859-1\";\n\n\n    @Test public void setTextPreservesDocumentStructure() {\n        Document doc = Jsoup.parse(\"<p>Hello</p>\");\n        doc.text(\"Replaced\");\n        assertEquals(\"Replaced\", doc.text());\n        assertEquals(\"Replaced\", doc.body().text());\n        assertEquals(1, doc.select(\"head\").size());\n    }\n\n    @Test public void testTitles() {\n        Document noTitle = Jsoup.parse(\"<p>Hello</p>\");\n        Document withTitle = Jsoup.parse(\"<title>First</title><title>Ignore</title><p>Hello</p>\");\n\n        assertEquals(\"\", noTitle.title());\n        noTitle.title(\"Hello\");\n        assertEquals(\"Hello\", noTitle.title());\n        assertEquals(\"Hello\", noTitle.select(\"title\").first().text());\n\n        assertEquals(\"First\", withTitle.title());\n        withTitle.title(\"Hello\");\n        assertEquals(\"Hello\", withTitle.title());\n        assertEquals(\"Hello\", withTitle.select(\"title\").first().text());\n\n        Document normaliseTitle = Jsoup.parse(\"<title>   Hello\\nthere   \\n   now   \\n\");\n        assertEquals(\"Hello there now\", normaliseTitle.title());\n    }\n\n    @Test public void testOutputEncoding() {\n        Document doc = Jsoup.parse(\"<p title=\u03c0>\u03c0 & < > </p>\");\n        // default is utf-8\n        assertEquals(\"<p title=\\\"\u03c0\\\">\u03c0 &amp; &lt; &gt;</p>\", doc.body().html());\n        assertEquals(\"UTF-8\", doc.outputSettings().charset().name());\n\n        doc.outputSettings().charset(\"ascii\");\n        assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());\n        assertEquals(\"<p title=\\\"&#x3c0;\\\">&#x3c0; &amp; &lt; &gt;</p>\", doc.body().html());\n\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n        assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt;</p>\", doc.body().html());\n    }\n\n    @Test public void testXhtmlReferences() {\n        Document doc = Jsoup.parse(\"&lt; &gt; &amp; &quot; &apos; &times;\");\n        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n        assertEquals(\"&lt; &gt; &amp; \\\" ' \u00d7\", doc.body().html());\n    }\n\n    @Test public void testNormalisesStructure() {\n        Document doc = Jsoup.parse(\"<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>\");\n        assertEquals(\"<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void accessorsWillNormalizeStructure() {\n        Document doc = new Document(\"\");\n        assertEquals(\"\", doc.html());\n\n        Element body = doc.body();\n        assertEquals(\"body\", body.tagName());\n        Element head = doc.head();\n        assertEquals(\"head\", head.tagName());\n        assertEquals(\"<html><head></head><body></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test public void accessorsAreCaseInsensitive() {\n        Parser parser = Parser.htmlParser().settings(ParseSettings.preserveCase);\n        Document doc = parser.parseInput(\"<!DOCTYPE html><HTML><HEAD><TITLE>SHOUTY</TITLE></HEAD><BODY>HELLO</BODY></HTML>\", \"\");\n\n        Element body = doc.body();\n        assertEquals(\"BODY\", body.tagName());\n        assertEquals(\"body\", body.normalName());\n        Element head = doc.head();\n        assertEquals(\"HEAD\", head.tagName());\n        assertEquals(\"body\", body.normalName());\n\n        Element root = doc.selectFirst(\"html\");\n        assertEquals(\"HTML\", root.tagName());\n        assertEquals(\"html\", root.normalName());\n        assertEquals(\"SHOUTY\", doc.title());\n    }\n\n    @Test public void testClone() {\n        Document doc = Jsoup.parse(\"<title>Hello</title> <p>One<p>Two\");\n        Document clone = doc.clone();\n\n        assertEquals(\"<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>\", TextUtil.stripNewlines(clone.html()));\n        clone.title(\"Hello there\");\n        clone.expectFirst(\"p\").text(\"One more\").attr(\"id\", \"1\");\n        assertEquals(\"<html><head><title>Hello there</title></head><body><p id=\\\"1\\\">One more</p><p>Two</p></body></html>\", TextUtil.stripNewlines(clone.html()));\n        assertEquals(\"<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n    }\n\n    @Test void testBasicIndent() {\n        Document doc = Jsoup.parse(\"<title>Hello</title> <p>One<p>Two\");\n        String expect = \"<html>\\n <head>\\n  <title>Hello</title>\\n </head>\\n <body>\\n  <p>One</p>\\n  <p>Two</p>\\n </body>\\n</html>\";\n        assertEquals(expect, doc.html());\n    }\n\n    @Test public void testClonesDeclarations() {\n        Document doc = Jsoup.parse(\"<!DOCTYPE html><html><head><title>Doctype test\");\n        Document clone = doc.clone();\n\n        assertEquals(doc.html(), clone.html());\n        assertEquals(\"<!doctype html><html><head><title>Doctype test</title></head><body></body></html>\",\n                TextUtil.stripNewlines(clone.html()));\n    }\n\n    @Test public void testLocation() throws IOException {\n        // tests location vs base href\n        File in = ParseTest.getFile(\"/htmltests/basehref.html\");\n        Document doc = Jsoup.parse(in, \"UTF-8\", \"http://example.com/\");\n        String location = doc.location();\n        String baseUri = doc.baseUri();\n        assertEquals(\"http://example.com/\", location);\n        assertEquals(\"https://example.com/path/file.html?query\", baseUri);\n        assertEquals(\"./anotherfile.html\", doc.expectFirst(\"a\").attr(\"href\"));\n        assertEquals(\"https://example.com/path/anotherfile.html\", doc.expectFirst(\"a\").attr(\"abs:href\"));\n    }\n\n    @Test public void testLocationFromString() {\n        Document doc = Jsoup.parse(\"<p>Hello\");\n        assertEquals(\"\", doc.location());\n    }\n\n    @Test public void testHtmlAndXmlSyntax() {\n        String h = \"<!DOCTYPE html><body><img async checked='checked' src='&<>\\\"'>&lt;&gt;&amp;&quot;<foo />bar\";\n        Document doc = Jsoup.parse(h);\n\n        doc.outputSettings().syntax(Syntax.html);\n        assertEquals(\"<!doctype html>\\n\" +\n                \"<html>\\n\" +\n                \" <head></head>\\n\" +\n                \" <body>\\n\" +\n                \"  <img async checked src=\\\"&amp;<>&quot;\\\">&lt;&gt;&amp;\\\"<foo />bar\\n\" +\n                \" </body>\\n\" +\n                \"</html>\", doc.html());\n\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        assertEquals(\"<!DOCTYPE html>\\n\" +\n                \"<html>\\n\" +\n                \" <head></head>\\n\" +\n                \" <body>\\n\" +\n                \"  <img async=\\\"\\\" checked=\\\"checked\\\" src=\\\"&amp;&lt;>&quot;\\\" />&lt;&gt;&amp;\\\"<foo />bar\\n\" +\n                \" </body>\\n\" +\n                \"</html>\", doc.html());\n    }\n\n    @Test public void htmlParseDefaultsToHtmlOutputSyntax() {\n        Document doc = Jsoup.parse(\"x\");\n        assertEquals(Syntax.html, doc.outputSettings().syntax());\n    }\n\n    @Test public void testHtmlAppendable() {\n    \tString htmlContent = \"<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>\";\n    \tDocument document = Jsoup.parse(htmlContent);\n    \tOutputSettings outputSettings = new OutputSettings();\n\n    \toutputSettings.prettyPrint(false);\n    \tdocument.outputSettings(outputSettings);\n    \tassertEquals(htmlContent, document.html(new StringWriter()).toString());\n    }\n\n    @Test public void testOverflowClone() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"<head><base href='https://jsoup.org/'>\");\n        for (int i = 0; i < 100000; i++) {\n            sb.append(\"<div>\");\n        }\n        sb.append(\"<p>Hello <a href='/example.html'>there</a>\");\n\n        Document doc = Jsoup.parse(sb.toString());\n\n        String expectedLink = \"https://jsoup.org/example.html\";\n        assertEquals(expectedLink, doc.selectFirst(\"a\").attr(\"abs:href\"));\n        Document clone = doc.clone();\n        doc.hasSameValue(clone);\n        assertEquals(expectedLink, clone.selectFirst(\"a\").attr(\"abs:href\"));\n    }\n\n    @Test public void DocumentsWithSameContentAreEqual() {\n        Document docA = Jsoup.parse(\"<div/>One\");\n        Document docB = Jsoup.parse(\"<div/>One\");\n        Document docC = Jsoup.parse(\"<div/>Two\");\n\n        assertNotEquals(docA, docB);\n        assertEquals(docA, docA);\n        assertEquals(docA.hashCode(), docA.hashCode());\n        assertNotEquals(docA.hashCode(), docC.hashCode());\n    }\n\n    @Test public void DocumentsWithSameContentAreVerifiable() {\n        Document docA = Jsoup.parse(\"<div/>One\");\n        Document docB = Jsoup.parse(\"<div/>One\");\n        Document docC = Jsoup.parse(\"<div/>Two\");\n\n        assertTrue(docA.hasSameValue(docB));\n        assertFalse(docA.hasSameValue(docC));\n    }\n\n    @Test\n    public void testMetaCharsetUpdateUtf8() {\n        final Document doc = createHtmlDocument(\"changeThis\");\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n\n        final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlCharsetUTF8, doc.toString());\n\n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertEquals(charsetUtf8, doc.charset().name());\n        assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateIso8859() {\n        final Document doc = createHtmlDocument(\"changeThis\");\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n\n        final String htmlCharsetISO = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlCharsetISO, doc.toString());\n\n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertEquals(charsetIso8859, doc.charset().name());\n        assertEquals(charsetIso8859, selectedElement.attr(\"charset\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateNoCharset() {\n        final Document docNoCharset = Document.createShell(\"\");\n        docNoCharset.updateMetaCharsetElement(true);\n        docNoCharset.charset(Charset.forName(charsetUtf8));\n\n        assertEquals(charsetUtf8, docNoCharset.select(\"meta[charset]\").first().attr(\"charset\"));\n\n        final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlCharsetUTF8, docNoCharset.toString());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateDisabled() {\n        final Document docDisabled = Document.createShell(\"\");\n\n        final String htmlNoCharset = \"<html>\\n\" +\n                                        \" <head></head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n        assertEquals(htmlNoCharset, docDisabled.toString());\n        assertNull(docDisabled.select(\"meta[charset]\").first());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateDisabledNoChanges() {\n        final Document doc = createHtmlDocument(\"dontTouch\");\n\n        final String htmlCharset = \"<html>\\n\" +\n                                    \" <head>\\n\" +\n                                    \"  <meta charset=\\\"dontTouch\\\">\\n\" +\n                                    \"  <meta name=\\\"charset\\\" content=\\\"dontTouch\\\">\\n\" +\n                                    \" </head>\\n\" +\n                                    \" <body></body>\\n\" +\n                                    \"</html>\";\n        assertEquals(htmlCharset, doc.toString());\n\n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertNotNull(selectedElement);\n        assertEquals(\"dontTouch\", selectedElement.attr(\"charset\"));\n\n        selectedElement = doc.select(\"meta[name=charset]\").first();\n        assertNotNull(selectedElement);\n        assertEquals(\"dontTouch\", selectedElement.attr(\"content\"));\n    }\n\n    @Test\n    public void testMetaCharsetUpdateEnabledAfterCharsetChange() {\n        final Document doc = createHtmlDocument(\"dontTouch\");\n        doc.charset(Charset.forName(charsetUtf8));\n\n        Element selectedElement = doc.select(\"meta[charset]\").first();\n        assertEquals(charsetUtf8, selectedElement.attr(\"charset\"));\n        assertTrue(doc.select(\"meta[name=charset]\").isEmpty());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateCleanup() {\n        final Document doc = createHtmlDocument(\"dontTouch\");\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n\n        final String htmlCharsetUTF8 = \"<html>\\n\" +\n                                        \" <head>\\n\" +\n                                        \"  <meta charset=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n                                        \" </head>\\n\" +\n                                        \" <body></body>\\n\" +\n                                        \"</html>\";\n\n        assertEquals(htmlCharsetUTF8, doc.toString());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateXmlUtf8() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n\n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetUTF8, doc.toString());\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, doc.charset().name());\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateXmlIso8859() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n\n        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetISO, doc.toString());\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetIso8859, doc.charset().name());\n        assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\n        assertEquals(doc.charset(), doc.outputSettings().charset());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateXmlNoCharset() {\n        final Document doc = createXmlDocument(\"1.0\", \"none\", false);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n\n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        assertEquals(xmlCharsetUTF8, doc.toString());\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n    }\n\n    @Test\n    public void testMetaCharsetUpdateXmlDisabled() {\n        final Document doc = createXmlDocument(\"none\", \"none\", false);\n\n        final String xmlNoCharset = \"<root>\\n\" +\n                                    \" node\\n\" +\n                                    \"</root>\";\n        assertEquals(xmlNoCharset, doc.toString());\n    }\n\n    @Test\n    public void testMetaCharsetUpdateXmlDisabledNoChanges() {\n        final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n\n        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\"?>\\n\" +\n                                    \"<root>\\n\" +\n                                    \" node\\n\" +\n                                    \"</root>\";\n        assertEquals(xmlCharset, doc.toString());\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));\n        assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));\n    }\n\n    @Test\n    public void testMetaCharsetUpdatedDisabledPerDefault() {\n        final Document doc = createHtmlDocument(\"none\");\n        assertFalse(doc.updateMetaCharsetElement());\n    }\n\n    private Document createHtmlDocument(String charset) {\n        final Document doc = Document.createShell(\"\");\n        doc.head().appendElement(\"meta\").attr(\"charset\", charset);\n        doc.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", charset);\n\n        return doc;\n    }\n\n    private Document createXmlDocument(String version, String charset, boolean addDecl) {\n        final Document doc = new Document(\"\");\n        doc.appendElement(\"root\").text(\"node\");\n        doc.outputSettings().syntax(Syntax.xml);\n\n        if(addDecl) {\n            XmlDeclaration decl = new XmlDeclaration(\"xml\", false);\n            decl.attr(\"version\", version);\n            decl.attr(\"encoding\", charset);\n            doc.prependChild(decl);\n        }\n\n        return doc;\n    }\n\n    @Test\n    public void testShiftJisRoundtrip() throws Exception {\n        String input =\n                \"<html>\"\n                        +   \"<head>\"\n                        +     \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=Shift_JIS\\\" />\"\n                        +   \"</head>\"\n                        +   \"<body>\"\n                        +     \"before&nbsp;after\"\n                        +   \"</body>\"\n                        + \"</html>\";\n        InputStream is = new ByteArrayInputStream(input.getBytes(StandardCharsets.US_ASCII));\n\n        Document doc = Jsoup.parse(is, null, \"http://example.com\");\n        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);\n\n        String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());\n\n        assertFalse(output.contains(\"?\"), \"Should not have contained a '?'.\");\n        assertTrue(output.contains(\"&#xa0;\") || output.contains(\"&nbsp;\"),\n                \"Should have contained a '&#xa0;' or a '&nbsp;'.\");\n    }\n\n    @Test public void parseAndHtmlOnDifferentThreads() throws InterruptedException {\n        String html = \"<p>Alrighty then it's not \\uD83D\\uDCA9. <span>Next</span></p>\"; // \ud83d\udca9\n        String asci = \"<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>\";\n\n        final Document doc = Jsoup.parse(html);\n        final String[] out = new String[1];\n        final Elements p = doc.select(\"p\");\n        assertEquals(html, p.outerHtml());\n\n        Thread thread = new Thread(() -> {\n            out[0] = p.outerHtml();\n            doc.outputSettings().charset(StandardCharsets.US_ASCII);\n        });\n        thread.start();\n        thread.join();\n\n        assertEquals(html, out[0]);\n        assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset());\n        assertEquals(asci, p.outerHtml());\n    }\n\n    @Test public void testDocumentTypeGet() {\n        String html = \"\\n\\n<!-- comment -->  <!doctype html><p>One</p>\";\n        Document doc = Jsoup.parse(html);\n        DocumentType documentType = doc.documentType();\n        assertNotNull(documentType);\n        assertEquals(\"html\", documentType.name());\n    }\n\n    @Test public void framesetSupportsBodyMethod() {\n        String html = \"<html><head><title>Frame Test</title></head><frameset id=id><frame src=foo.html></frameset>\";\n        Document doc = Jsoup.parse(html);\n        Element head = doc.head();\n        assertNotNull(head);\n        assertEquals(\"Frame Test\", doc.title());\n\n        // Frameset docs per html5 spec have no body element - but instead a frameset elelemt\n        assertNull(doc.selectFirst(\"body\"));\n        Element frameset = doc.selectFirst(\"frameset\");\n        assertNotNull(frameset);\n\n        // the body() method returns body or frameset and does not otherwise modify the document\n        // doing it in body() vs parse keeps the html close to original for round-trip option\n        Element body = doc.body();\n        assertNotNull(body);\n        assertSame(frameset, body);\n        assertEquals(\"frame\", body.child(0).tagName());\n\n        assertNull(doc.selectFirst(\"body\")); // did not vivify a body element\n\n        String expected = \"<html>\\n\" +\n            \" <head>\\n\" +\n            \"  <title>Frame Test</title>\\n\" +\n            \" </head>\\n\" +\n            \" <frameset id=\\\"id\\\">\\n\" +\n            \"  <frame src=\\\"foo.html\\\">\\n\" +\n            \" </frameset>\\n\" +\n            \"</html>\";\n        assertEquals(expected, doc.html());\n    }\n\n    @Test void forms() {\n        String html = \"<body><form id=1><input name=foo></form><form id=2><input name=bar>\";\n        Document doc = Jsoup.parse(html);\n\n        List<FormElement> forms = doc.forms();\n        assertEquals(2, forms.size());\n        FormElement form = forms.get(1);\n        assertEquals(1, form.elements().size());\n        assertEquals(\"bar\", form.elements().first().attr(\"name\"));\n\n        String emptyHtml = \"<body>\";\n        Document emptyDoc = Jsoup.parse(emptyHtml);\n        assertEquals(0, emptyDoc.forms().size());\n    }\n\n    @Test void expectForm() {\n        String html = \"<body><div name=form></div><form id=1 name=form><input name=foo></form><form id=2><input name=bar>\";\n        Document doc = Jsoup.parse(html);\n\n        // test finds first <form>\n        FormElement formEl1 = doc.expectForm(\"[name=form]\");\n        assertEquals(\"1\", formEl1.id()); // and not the div\n\n        FormElement formEl2 = doc.expectForm(\"form\");\n        assertEquals(\"1\", formEl2.id());\n\n        FormElement formEl3 = doc.expectForm(\"form:has([name=bar])\");\n        assertEquals(\"2\", formEl3.id());\n\n        boolean threw = false;\n        try {\n            FormElement nix = doc.expectForm(\"div\");\n        } catch (IllegalArgumentException e) {\n            threw = true;\n        }\n        assertTrue(threw);\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String charsetUtf8 = \"UTF-8\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "charsetUtf8 = \"UTF-8\"", "syntax_pass": true}, {"attribute_expression": "private static final String charsetIso8859 = \"ISO-8859-1\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "charsetIso8859 = \"ISO-8859-1\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/nodes/NodeIteratorTest.java.NodeIteratorTest", "name": "NodeIteratorTest", "file_path": "src/test/java/org/jsoup/nodes/NodeIteratorTest.java", "superclasses": "", "methods": ["[void]canIterateNodes()", "[void]hasNextIsPure()", "[void]iterateSubTree()", "[void]canRestart()", "[void]canIterateJustOneSibling()", "[void]canIterateFirstEmptySibling()", "[void]canRemoveViaIterator()", "[void]canRemoveViaNode()", "[void]canReplace()", "[void]canWrap()", "[void]canFilterForElements()", "[void]canFilterForTextNodes()", "[void]canModifyFilteredElements()"], "method_uris": ["src/test/java/org/jsoup/nodes/NodeIteratorTest.java.NodeIteratorTest.[void]assertIterates(NodeIterator<T>,String)", "src/test/java/org/jsoup/nodes/NodeIteratorTest.java.NodeIteratorTest.[void]assertContents(Element,String)", "src/test/java/org/jsoup/nodes/NodeIteratorTest.java.NodeIteratorTest.[void]trackSeen(Node,StringBuilder)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class NodeIteratorTest {\n    String html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div>\";\n\n    @Test void canIterateNodes() {\n        Document doc = Jsoup.parse(html);\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        assertIterates(it, \"#root;html;head;body;div#1;p;One;p;Two;div#2;p;Three;p;Four;\");\n        // todo - need to review that the Document object #root holds the html element as child. Why not have document root == html element?\n        assertFalse(it.hasNext());\n\n        boolean threw = false;\n        try {\n            it.next();\n        } catch (NoSuchElementException e) {\n            threw = true;\n        }\n        assertTrue(threw);\n    }\n\n    @Test void hasNextIsPure() {\n        Document doc = Jsoup.parse(html);\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        assertTrue(it.hasNext());\n        assertTrue(it.hasNext());\n        assertIterates(it, \"#root;html;head;body;div#1;p;One;p;Two;div#2;p;Three;p;Four;\");\n        assertFalse(it.hasNext());\n    }\n\n    @Test void iterateSubTree() {\n        Document doc = Jsoup.parse(html);\n\n        Element div1 = doc.expectFirst(\"div#1\");\n        NodeIterator<Node> it = NodeIterator.from(div1);\n        assertIterates(it, \"div#1;p;One;p;Two;\");\n        assertFalse(it.hasNext());\n\n        Element div2 = doc.expectFirst(\"div#2\");\n        NodeIterator<Node> it2 = NodeIterator.from(div2);\n        assertIterates(it2, \"div#2;p;Three;p;Four;\");\n        assertFalse(it2.hasNext());\n    }\n\n    @Test void canRestart() {\n        Document doc = Jsoup.parse(html);\n\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        assertIterates(it, \"#root;html;head;body;div#1;p;One;p;Two;div#2;p;Three;p;Four;\");\n\n        it.restart(doc.expectFirst(\"div#2\"));\n        assertIterates(it, \"div#2;p;Three;p;Four;\");\n    }\n\n    @Test void canIterateJustOneSibling() {\n        Document doc = Jsoup.parse(html);\n        Element p2 = doc.expectFirst(\"p:contains(Two)\");\n        assertEquals(\"Two\", p2.text());\n\n        NodeIterator<Node> it = NodeIterator.from(p2);\n        assertIterates(it, \"p;Two;\");\n\n        NodeIterator<Element> elIt = new NodeIterator<>(p2, Element.class);\n        Element found = elIt.next();\n        assertSame(p2, found);\n        assertFalse(elIt.hasNext());\n    }\n\n    @Test void canIterateFirstEmptySibling() {\n        Document doc = Jsoup.parse(\"<div><p id=1></p><p id=2>.</p><p id=3>..</p>\");\n        Element p1 = doc.expectFirst(\"p#1\");\n        assertEquals(\"\", p1.ownText());\n\n        NodeIterator<Node> it = NodeIterator.from(p1);\n        assertTrue(it.hasNext());\n        Node node = it.next();\n        assertSame(p1, node);\n        assertFalse(it.hasNext());\n    }\n\n    @Test void canRemoveViaIterator() {\n        String html = \"<div id=out1><div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div></div><div id=out2>Out2\";\n        Document doc = Jsoup.parse(html);\n\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        StringBuilder seen = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            if (node.attr(\"id\").equals(\"1\"))\n                it.remove();\n            trackSeen(node, seen);\n        }\n        assertEquals(\"#root;html;head;body;div#out1;div#1;div#2;p;Three;p;Four;div#out2;Out2;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#out1;div#2;p;Three;p;Four;div#out2;Out2;\");\n\n        it = NodeIterator.from(doc);\n        seen = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            if (node.attr(\"id\").equals(\"2\"))\n                it.remove();\n            trackSeen(node, seen);\n        }\n        assertEquals(\"#root;html;head;body;div#out1;div#2;div#out2;Out2;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#out1;div#out2;Out2;\");\n    }\n\n    @Test void canRemoveViaNode() {\n        String html = \"<div id=out1><div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div></div><div id=out2>Out2\";\n        Document doc = Jsoup.parse(html);\n\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        StringBuilder seen = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            if (node.attr(\"id\").equals(\"1\"))\n                node.remove();\n            trackSeen(node, seen);\n        }\n        assertEquals(\"#root;html;head;body;div#out1;div#1;div#2;p;Three;p;Four;div#out2;Out2;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#out1;div#2;p;Three;p;Four;div#out2;Out2;\");\n\n        it = NodeIterator.from(doc);\n        seen = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            if (node.attr(\"id\").equals(\"2\"))\n                node.remove();\n            trackSeen(node, seen);\n        }\n        assertEquals(\"#root;html;head;body;div#out1;div#2;div#out2;Out2;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#out1;div#out2;Out2;\");\n    }\n\n    @Test void canReplace() {\n        String html = \"<div id=out1><div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div></div><div id=out2>Out2\";\n        Document doc = Jsoup.parse(html);\n\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        StringBuilder seen = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            trackSeen(node, seen);\n            if (node.attr(\"id\").equals(\"1\")) {\n                node.replaceWith(new Element(\"span\").text(\"Foo\"));\n            }\n        }\n        assertEquals(\"#root;html;head;body;div#out1;div#1;span;Foo;div#2;p;Three;p;Four;div#out2;Out2;\", seen.toString());\n        // ^^ we don't see <p>One, do see the replaced in <span>, and the subsequent nodes\n        assertContents(doc, \"#root;html;head;body;div#out1;span;Foo;div#2;p;Three;p;Four;div#out2;Out2;\");\n\n        it = NodeIterator.from(doc);\n        seen = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            trackSeen(node, seen);\n            if (node.attr(\"id\").equals(\"2\")) {\n                node.replaceWith(new Element(\"span\").text(\"Bar\"));\n            }\n        }\n        assertEquals(\"#root;html;head;body;div#out1;span;Foo;div#2;span;Bar;div#out2;Out2;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#out1;span;Foo;span;Bar;div#out2;Out2;\");\n    }\n\n    @Test void canWrap() {\n        Document doc = Jsoup.parse(html);\n        NodeIterator<Node> it = NodeIterator.from(doc);\n        boolean sawInner = false;\n        while (it.hasNext()) {\n            Node node = it.next();\n            if (node.attr(\"id\").equals(\"1\")) {\n                node.wrap(\"<div id=outer>\");\n            }\n            if (node instanceof TextNode && ((TextNode) node).text().equals(\"One\"))\n                sawInner = true;\n        }\n        assertContents(doc, \"#root;html;head;body;div#outer;div#1;p;One;p;Two;div#2;p;Three;p;Four;\");\n        assertTrue(sawInner);\n    }\n\n    @Test void canFilterForElements() {\n        Document doc = Jsoup.parse(html);\n        NodeIterator<Element> it = new NodeIterator<>(doc, Element.class);\n\n        StringBuilder seen = new StringBuilder();\n        while (it.hasNext()) {\n            Element el = it.next();\n            assertNotNull(el);\n            trackSeen(el, seen);\n        }\n\n        assertEquals(\"#root;html;head;body;div#1;p;p;div#2;p;p;\", seen.toString());\n    }\n\n    @Test void canFilterForTextNodes() {\n        Document doc = Jsoup.parse(html);\n        NodeIterator<TextNode> it = new NodeIterator<>(doc, TextNode.class);\n\n        StringBuilder seen = new StringBuilder();\n        while (it.hasNext()) {\n            TextNode text = it.next();\n            assertNotNull(text);\n            trackSeen(text, seen);\n        }\n\n        assertEquals(\"One;Two;Three;Four;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#1;p;One;p;Two;div#2;p;Three;p;Four;\");\n    }\n\n    @Test void canModifyFilteredElements() {\n        Document doc = Jsoup.parse(html);\n        NodeIterator<Element> it = new NodeIterator<>(doc, Element.class);\n\n        StringBuilder seen = new StringBuilder();\n        while (it.hasNext()) {\n            Element el = it.next();\n            if (!el.ownText().isEmpty())\n                el.text(el.ownText() + \"++\");\n            trackSeen(el, seen);\n        }\n\n        assertEquals(\"#root;html;head;body;div#1;p;p;div#2;p;p;\", seen.toString());\n        assertContents(doc, \"#root;html;head;body;div#1;p;One++;p;Two++;div#2;p;Three++;p;Four++;\");\n    }\n\n    static <T extends Node> void assertIterates(NodeIterator<T> it, String expected) {\n        Node previous = null;\n        StringBuilder actual = new StringBuilder();\n        while (it.hasNext()) {\n            Node node = it.next();\n            assertNotNull(node);\n            assertNotSame(previous, node);\n\n            trackSeen(node, actual);\n            previous = node;\n        }\n        assertEquals(expected, actual.toString());\n    }\n\n    static void assertContents(Element el, String expected) {\n        NodeIterator<Node> it = NodeIterator.from(el);\n        assertIterates(it, expected);\n    }\n\n    static void trackSeen(Node node, StringBuilder actual) {\n        if (node instanceof Element) {\n            Element el = (Element) node;\n            actual.append(el.tagName());\n            if (el.hasAttr(\"id\"))\n                actual.append(\"#\").append(el.id());\n        }\n        else if (node instanceof TextNode)\n            actual.append(((TextNode) node).text());\n        else\n            actual.append(node.nodeName());\n        actual.append(\";\");\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "String html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div>\";", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "String", "name": "html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div>\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/nodes/DataNodeTest.java.DataNodeTest", "name": "DataNodeTest", "file_path": "src/test/java/org/jsoup/nodes/DataNodeTest.java", "superclasses": "", "methods": ["[void]xmlOutputScriptWithCData()", "[void]xmlOutputScriptWithoutCData()", "[void]xmlOutputStyleWithCData()", "[void]xmlOutputStyleWithoutCData()", "[void]xmlOutputOtherWithCData()", "[void]xmlOutputOtherWithoutCData()", "[void]xmlOutputOrphanWithoutCData()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DataNodeTest {\n\n    @Test\n    public void xmlOutputScriptWithCData() throws IOException {\n        DataNode node = new DataNode(\"//<![CDATA[\\nscript && <> data]]>\");\n        node.parentNode = new Element(\"script\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"//<![CDATA[\\nscript && <> data]]>\", accum.toString());\n    }\n\n    @Test\n    public void xmlOutputScriptWithoutCData() throws IOException {\n        DataNode node = new DataNode(\"script && <> data\");\n        node.parentNode = new Element(\"script\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"//<![CDATA[\\nscript && <> data\\n//]]>\", accum.toString());\n    }\n\n    @Test\n    public void xmlOutputStyleWithCData() throws IOException {\n        DataNode node = new DataNode(\"/*<![CDATA[*/\\nstyle && <> data]]>\");\n        node.parentNode = new Element(\"style\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"/*<![CDATA[*/\\nstyle && <> data]]>\", accum.toString());\n    }\n\n    @Test\n    public void xmlOutputStyleWithoutCData() throws IOException {\n        DataNode node = new DataNode(\"style && <> data\");\n        node.parentNode = new Element(\"style\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"/*<![CDATA[*/\\nstyle && <> data\\n/*]]>*/\", accum.toString());\n    }\n\n    @Test\n    public void xmlOutputOtherWithCData() throws IOException {\n        DataNode node = new DataNode(\"<![CDATA[other && <> data]]>\");\n        node.parentNode = new Element(\"other\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"<![CDATA[other && <> data]]>\", accum.toString());\n    }\n\n    @Test\n    public void xmlOutputOtherWithoutCData() throws IOException {\n        DataNode node = new DataNode(\"other && <> data\");\n        node.parentNode = new Element(\"other\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"<![CDATA[other && <> data]]>\", accum.toString());\n    }\n\n    @Test\n    public void xmlOutputOrphanWithoutCData() throws IOException {\n        DataNode node = new DataNode(\"other && <> data\");\n        StringBuilder accum = new StringBuilder();\n        node.outerHtmlHead(accum, 0, new Document.OutputSettings().syntax(Document.OutputSettings.Syntax.xml));\n        assertEquals(\"<![CDATA[other && <> data]]>\", accum.toString());\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/NodeStreamTest.java.NodeStreamTest", "name": "NodeStreamTest", "file_path": "src/test/java/org/jsoup/nodes/NodeStreamTest.java", "superclasses": "", "methods": ["[void]canStream()", "[void]canStreamParallel()", "[void]canFindFirst()", "[void]canFilter()", "[void]canRemove()", "[void]elementStream()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class NodeStreamTest {\n\n    String html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div>\";\n\n\n    @Test void canStream() {\n        Document doc = Jsoup.parse(html);\n        StringBuilder seen = new StringBuilder();\n        Stream<Node> stream = doc.nodeStream();\n        stream.forEachOrdered(node -> trackSeen(node, seen));\n        assertEquals(\"#root;html;head;body;div#1;p;One;p;Two;div#2;p;Three;p;Four;\", seen.toString());\n    }\n\n    @Test void canStreamParallel() {\n        Document doc = Jsoup.parse(html);\n        long count = doc.nodeStream().parallel().count();\n        assertEquals(14, count);\n    }\n\n    @Test void canFindFirst() {\n        Document doc = Jsoup.parse(html);\n        Optional<Node> first = doc.nodeStream().findFirst();\n        assertTrue(first.isPresent());\n        assertSame(doc, first.get());\n    }\n\n    @Test void canFilter() {\n        Document doc = Jsoup.parse(html);\n        StringBuilder seen = new StringBuilder();\n\n        doc.nodeStream()\n            .filter(node -> node instanceof TextNode)\n            .forEach(node -> trackSeen(node, seen));\n\n        assertEquals(\"One;Two;Three;Four;\", seen.toString());\n    }\n\n    @Test void canRemove() {\n        String html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div><div id=3><p>Five\";\n        Document doc = Jsoup.parse(html);\n\n        doc.nodeStream()\n            .filter(node -> node instanceof Element)\n                .filter(node -> node.attr(\"id\").equals(\"1\") || node.attr(\"id\").equals(\"2\"))\n                    .forEach(Node::remove);\n\n        assertContents(doc, \"#root;html;head;body;div#3;p;Five;\");\n    }\n\n    @Test void elementStream() {\n        Document doc = Jsoup.parse(html);\n        StringBuilder seen = new StringBuilder();\n        Stream<Element> stream = doc.stream();\n        stream.forEachOrdered(node -> trackSeen(node, seen));\n        assertEquals(\"#root;html;head;body;div#1;p;p;div#2;p;p;\", seen.toString());\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "String html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div>\";", "docstring": "", "modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "type": "String", "name": "html = \"<div id=1><p>One<p>Two</div><div id=2><p>Three<p>Four</div>\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java.DocumentTypeTest", "name": "DocumentTypeTest", "file_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java", "superclasses": "", "methods": ["[void]constructorValidationOkWithBlankName()", "[void]constructorValidationThrowsExceptionOnNulls()", "[void]constructorValidationOkWithBlankPublicAndSystemIds()", "[void]outerHtmlGeneration()", "[void]testRoundTrip()"], "method_uris": ["src/test/java/org/jsoup/nodes/DocumentTypeTest.java.DocumentTypeTest.[String]htmlOutput(String)", "src/test/java/org/jsoup/nodes/DocumentTypeTest.java.DocumentTypeTest.[String]xmlOutput(String)"], "overrides": null, "attributes": [], "class_docstring": "\nTests for the DocumentType node\n\n@author Jonathan Hedley, http://jonathanhedley.com/\n", "original_string": "public class DocumentTypeTest {\n    @Test\n    public void constructorValidationOkWithBlankName() {\n        new DocumentType(\"\",\"\", \"\");\n    }\n\n    @Test\n    public void constructorValidationThrowsExceptionOnNulls() {\n        assertThrows(IllegalArgumentException.class, () -> new DocumentType(\"html\", null, null));\n    }\n\n    @Test\n    public void constructorValidationOkWithBlankPublicAndSystemIds() {\n        new DocumentType(\"html\",\"\", \"\");\n    }\n\n    @Test public void outerHtmlGeneration() {\n        DocumentType html5 = new DocumentType(\"html\", \"\", \"\");\n        assertEquals(\"<!doctype html>\", html5.outerHtml());\n\n        DocumentType publicDocType = new DocumentType(\"html\", \"-//IETF//DTD HTML//\", \"\");\n        assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//IETF//DTD HTML//\\\">\", publicDocType.outerHtml());\n\n        DocumentType systemDocType = new DocumentType(\"html\", \"\", \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\");\n        assertEquals(\"<!DOCTYPE html SYSTEM \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\", systemDocType.outerHtml());\n\n        DocumentType combo = new DocumentType(\"notHtml\", \"--public\", \"--system\");\n        assertEquals(\"<!DOCTYPE notHtml PUBLIC \\\"--public\\\" \\\"--system\\\">\", combo.outerHtml());\n        assertEquals(\"notHtml\", combo.name());\n        assertEquals(\"--public\", combo.publicId());\n        assertEquals(\"--system\", combo.systemId());\n    }\n\n    @Test public void testRoundTrip() {\n        String base = \"<!DOCTYPE html>\";\n        assertEquals(\"<!doctype html>\", htmlOutput(base));\n        assertEquals(base, xmlOutput(base));\n\n        String publicDoc = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n        assertEquals(publicDoc, htmlOutput(publicDoc));\n        assertEquals(publicDoc, xmlOutput(publicDoc));\n\n        String systemDoc = \"<!DOCTYPE html SYSTEM \\\"exampledtdfile.dtd\\\">\";\n        assertEquals(systemDoc, htmlOutput(systemDoc));\n        assertEquals(systemDoc, xmlOutput(systemDoc));\n\n        String legacyDoc = \"<!DOCTYPE html SYSTEM \\\"about:legacy-compat\\\">\";\n        assertEquals(legacyDoc, htmlOutput(legacyDoc));\n        assertEquals(legacyDoc, xmlOutput(legacyDoc));\n    }\n\n    private String htmlOutput(String in) {\n        DocumentType type = (DocumentType) Jsoup.parse(in).childNode(0);\n        return type.outerHtml();\n    }\n\n    private String xmlOutput(String in) {\n        return Jsoup.parse(in, \"\", Parser.xmlParser()).childNode(0).outerHtml();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/EntitiesTest.java.EntitiesTest", "name": "EntitiesTest", "file_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java", "superclasses": "", "methods": ["[void]escape()", "[void]escapeDefaults()", "[void]escapedSupplementary()", "[void]unescapeMultiChars()", "[void]xhtml()", "[void]getByName()", "[void]escapeSupplementaryCharacter()", "[void]notMissingMultis()", "[void]notMissingSupplementals()", "[void]unescape()", "[void]strictUnescape()", "[void]caseSensitive()", "[void]quoteReplacements()", "[void]letterDigitEntities()", "[void]noSpuriousDecodes()", "[void]escapesGtInXmlAttributesButNotInHtml()", "[void]controlCharactersAreEscaped()", "[void]escapeByClonedOutputSettings()", "[void]parseHtmlEncodedEmojiMultipoint()", "[void]parseHtmlEncodedEmoji()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class EntitiesTest {\n    @Test public void escape() {\n        // escape is maximal (as in the escapes cover use in both text and attributes; vs Element.html() which checks if attribute or text and minimises escapes\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb ' \\\"\";\n        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n        String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n        String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(xhtml));\n        String escapedUtfFull = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(extended));\n        String escapedUtfMin = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(xhtml));\n\n        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo; &apos; &quot;\", escapedAscii);\n        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo; &apos; &quot;\", escapedAsciiFull);\n        assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb; &#x27; &quot;\", escapedAsciiXhtml);\n        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb &apos; &quot;\", escapedUtfFull);\n        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb &#x27; &quot;\", escapedUtfMin);\n        // odd that it's defined as aring in base but angst in full\n\n        // round trip\n        assertEquals(text, Entities.unescape(escapedAscii));\n        assertEquals(text, Entities.unescape(escapedAsciiFull));\n        assertEquals(text, Entities.unescape(escapedAsciiXhtml));\n        assertEquals(text, Entities.unescape(escapedUtfFull));\n        assertEquals(text, Entities.unescape(escapedUtfMin));\n    }\n\n    @Test public void escapeDefaults() {\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb ' \\\"\";\n        String escaped = Entities.escape(text);\n        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb &apos; &quot;\", escaped);\n    }\n\n    @Test public void escapedSupplementary() {\n        String text = \"\\uD835\\uDD59\";\n        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n        assertEquals(\"&#x1d559;\", escapedAscii);\n        String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n        assertEquals(\"&hopf;\", escapedAsciiFull);\n        String escapedUtf= Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(extended));\n        assertEquals(text, escapedUtf);\n    }\n\n    @Test public void unescapeMultiChars() {\n        String text = \"&NestedGreaterGreater; &nGg; &nGt; &nGtv; &Gt; &gg;\"; // gg is not combo, but 8811 could conflict with NestedGreaterGreater or others\n        String un = \"\u226b \u22d9\u0338 \u226b\u20d2 \u226b\u0338 \u226b \u226b\";\n        assertEquals(un, Entities.unescape(text));\n        String escaped = Entities.escape(un, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n        assertEquals(\"&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;\", escaped);\n        assertEquals(un, Entities.unescape(escaped));\n    }\n\n    @Test public void xhtml() {\n        assertEquals(38, xhtml.codepointForName(\"amp\"));\n        assertEquals(62, xhtml.codepointForName(\"gt\"));\n        assertEquals(60, xhtml.codepointForName(\"lt\"));\n        assertEquals(34, xhtml.codepointForName(\"quot\"));\n\n        assertEquals(\"amp\", xhtml.nameForCodepoint(38));\n        assertEquals(\"gt\", xhtml.nameForCodepoint(62));\n        assertEquals(\"lt\", xhtml.nameForCodepoint(60));\n        assertEquals(\"quot\", xhtml.nameForCodepoint(34));\n    }\n\n    @Test public void getByName() {\n        assertEquals(\"\u226b\u20d2\", Entities.getByName(\"nGt\"));\n        assertEquals(\"fj\", Entities.getByName(\"fjlig\"));\n        assertEquals(\"\u226b\", Entities.getByName(\"gg\"));\n        assertEquals(\"\u00a9\", Entities.getByName(\"copy\"));\n    }\n\n    @Test public void escapeSupplementaryCharacter() {\n        String text = new String(Character.toChars(135361));\n        String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n        assertEquals(\"&#x210c1;\", escapedAscii);\n        String escapedUtf = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n        assertEquals(text, escapedUtf);\n    }\n\n    @Test public void notMissingMultis() {\n        String text = \"&nparsl;\";\n        String un = \"\\u2AFD\\u20E5\";\n        assertEquals(un, Entities.unescape(text));\n    }\n\n    @Test public void notMissingSupplementals() {\n        String text = \"&npolint; &qfr;\";\n        String un = \"\u2a14 \\uD835\\uDD2E\"; // \ud835\udd2e\n        assertEquals(un, Entities.unescape(text));\n    }\n\n    @Test public void unescape() {\n        String text = \"Hello &AElig; &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;\";\n        assertEquals(\"Hello \u00c6 &<> \u00ae \u00c5 &angst \u03c0 \u03c0 \u65b0 there &! \u00be \u00a9 \u00a9\", Entities.unescape(text));\n\n        assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n    }\n\n    @Test public void strictUnescape() { // for attributes, enforce strict unescaping (must look like &#xxx; , not just &#xxx)\n        String text = \"Hello &amp= &amp;\";\n        assertEquals(\"Hello &amp= &\", Entities.unescape(text, true));\n        assertEquals(\"Hello &= &\", Entities.unescape(text));\n        assertEquals(\"Hello &= &\", Entities.unescape(text, false));\n    }\n\n\n    @Test public void caseSensitive() {\n        String unescaped = \"\u00dc \u00fc & &\";\n        assertEquals(\"&Uuml; &uuml; &amp; &amp;\",\n                Entities.escape(unescaped, new OutputSettings().charset(\"ascii\").escapeMode(extended)));\n\n        String escaped = \"&Uuml; &uuml; &amp; &AMP\";\n        assertEquals(\"\u00dc \u00fc & &\", Entities.unescape(escaped));\n    }\n\n    @Test public void quoteReplacements() {\n        String escaped = \"&#92; &#36;\";\n        String unescaped = \"\\\\ $\";\n\n        assertEquals(unescaped, Entities.unescape(escaped));\n    }\n\n    @Test public void letterDigitEntities() {\n        String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().charset(\"ascii\");\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;\", p.html());\n        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.text());\n        doc.outputSettings().charset(\"UTF-8\");\n        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.html());\n    }\n\n    @Test public void noSpuriousDecodes() {\n        String string = \"http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2\";\n        assertEquals(string, Entities.unescape(string));\n    }\n\n    @Test public void escapesGtInXmlAttributesButNotInHtml() {\n        // https://github.com/jhy/jsoup/issues/528 - < is OK in HTML attribute values, but not in XML\n\n\n        String docHtml = \"<a title='<p>One</p>'>One</a>\";\n        Document doc = Jsoup.parse(docHtml);\n        Element element = doc.select(\"a\").first();\n\n        doc.outputSettings().escapeMode(base);\n        assertEquals(\"<a title=\\\"<p>One</p>\\\">One</a>\", element.outerHtml());\n\n        doc.outputSettings().escapeMode(xhtml);\n        assertEquals(\"<a title=\\\"&lt;p>One&lt;/p>\\\">One</a>\", element.outerHtml());\n    }\n\n    @Test public void controlCharactersAreEscaped() {\n        // https://github.com/jhy/jsoup/issues/1556\n        // we escape ascii control characters in both HTML and XML for compatibility. Required in XML and probably\n        // easier to read in HTML\n        String input = \"<a foo=\\\"&#x1b;esc&#x7;bell\\\">Text &#x1b; &#x7;</a>\";\n        Document doc = Jsoup.parse(input);\n        assertEquals(input, doc.body().html());\n\n        Document xml = Jsoup.parse(input, \"\", Parser.xmlParser());\n        assertEquals(input, xml.html());\n    }\n    \n    @Test public void escapeByClonedOutputSettings() {\n        OutputSettings outputSettings = new OutputSettings();\n        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\";\n        OutputSettings clone1 = outputSettings.clone();\n        OutputSettings clone2 = outputSettings.clone();\n\n        String escaped1 = assertDoesNotThrow(() -> Entities.escape(text, clone1));\n        String escaped2 = assertDoesNotThrow(() -> Entities.escape(text, clone2));\n        assertEquals(escaped1, escaped2);\n    }\n\n    @Test void parseHtmlEncodedEmojiMultipoint() {\n        String emoji = Parser.unescapeEntities(\"&#55357;&#56495;\", false); // \ud83d\udcaf\n        assertEquals(\"\\uD83D\\uDCAF\", emoji);\n    }\n\n    @Test void parseHtmlEncodedEmoji() {\n        String emoji = Parser.unescapeEntities(\"&#128175;\", false); // \ud83d\udcaf\n        assertEquals(\"\\uD83D\\uDCAF\", emoji);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/AttributeTest.java.AttributeTest", "name": "AttributeTest", "file_path": "src/test/java/org/jsoup/nodes/AttributeTest.java", "superclasses": "", "methods": ["[void]html()", "[void]testWithSupplementaryCharacterInAttributeKeyAndValue()", "[void]validatesKeysNotEmpty()", "[void]validatesKeysNotEmptyViaSet()", "[void]booleanAttributesAreEmptyStringValues()", "[void]settersOnOrphanAttribute()", "[void]hasValue()", "[void]canSetValueToNull()", "[void]booleanAttributesAreNotCaseSensitive()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AttributeTest {\n    @Test\n    public void html() {\n        Attribute attr = new Attribute(\"key\", \"value &\");\n        assertEquals(\"key=\\\"value &amp;\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }\n\n    @Test public void testWithSupplementaryCharacterInAttributeKeyAndValue() {\n        String s = new String(Character.toChars(135361));\n        Attribute attr = new Attribute(s, \"A\" + s + \"B\");\n        assertEquals(s + \"=\\\"A\" + s + \"B\\\"\", attr.html());\n        assertEquals(attr.html(), attr.toString());\n    }\n\n    @Test public void validatesKeysNotEmpty() {\n        assertThrows(IllegalArgumentException.class, () -> new Attribute(\" \", \"Check\"));\n    }\n\n    @Test public void validatesKeysNotEmptyViaSet() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Attribute attr = new Attribute(\"One\", \"Check\");\n            attr.setKey(\" \");\n        });\n    }\n\n    @Test public void booleanAttributesAreEmptyStringValues() {\n        Document doc = Jsoup.parse(\"<div hidden>\");\n        Attributes attributes = doc.body().child(0).attributes();\n        assertEquals(\"\", attributes.get(\"hidden\"));\n\n        Attribute first = attributes.iterator().next();\n        assertEquals(\"hidden\", first.getKey());\n        assertEquals(\"\", first.getValue());\n        assertFalse(first.hasDeclaredValue());\n        assertTrue(Attribute.isBooleanAttribute(first.getKey()));\n    }\n\n    @Test public void settersOnOrphanAttribute() {\n        Attribute attr = new Attribute(\"one\", \"two\");\n        attr.setKey(\"three\");\n        String oldVal = attr.setValue(\"four\");\n        assertEquals(\"two\", oldVal);\n        assertEquals(\"three\", attr.getKey());\n        assertEquals(\"four\", attr.getValue());\n        assertNull(attr.parent);\n    }\n\n    @Test public void hasValue() {\n        Attribute a1 = new Attribute(\"one\", \"\");\n        Attribute a2 = new Attribute(\"two\", null);\n        Attribute a3 = new Attribute(\"thr\", \"thr\");\n\n        assertTrue(a1.hasDeclaredValue());\n        assertFalse(a2.hasDeclaredValue());\n        assertTrue(a3.hasDeclaredValue());\n    }\n\n    @Test public void canSetValueToNull() {\n        Attribute attr = new Attribute(\"one\", \"val\");\n        String oldVal = attr.setValue(null);\n        assertEquals(\"one\", attr.html());\n        assertEquals(\"val\", oldVal);\n\n        oldVal = attr.setValue(\"foo\");\n        assertEquals(\"\", oldVal); // string, not null\n    }\n\n    @Test void booleanAttributesAreNotCaseSensitive() {\n        // https://github.com/jhy/jsoup/issues/1656\n        assertTrue(Attribute.isBooleanAttribute(\"required\"));\n        assertTrue(Attribute.isBooleanAttribute(\"REQUIRED\"));\n        assertTrue(Attribute.isBooleanAttribute(\"rEQUIREd\"));\n        assertFalse(Attribute.isBooleanAttribute(\"random string\"));\n\n        String html = \"<a href=autofocus REQUIRED>One</a>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<a href=\\\"autofocus\\\" required>One</a>\", doc.selectFirst(\"a\").outerHtml());\n\n        Document doc2 = Jsoup.parse(html, Parser.htmlParser().settings(ParseSettings.preserveCase));\n        assertEquals(\"<a href=\\\"autofocus\\\" REQUIRED>One</a>\", doc2.selectFirst(\"a\").outerHtml());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/ElementTest.java.ElementTest", "name": "ElementTest", "file_path": "src/test/java/org/jsoup/nodes/ElementTest.java", "superclasses": "", "methods": ["[void]testId()", "[void]testSetId()", "[void]getElementsByTagName()", "[void]getNamespacedElementsByTag()", "[void]testGetElementById()", "[void]testGetText()", "[void]testGetChildText()", "[void]testNormalisesText()", "[void]testKeepsPreText()", "[void]testKeepsPreTextInCode()", "[void]testKeepsPreTextAtDepth()", "[void]doesNotWrapBlocksInPre()", "[void]testBrHasSpace()", "[void]testBrHasSpaceCaseSensitive()", "[void]textHasSpacesAfterBlock()", "[void]testWholeText()", "[void]wholeTextRuns()", "[void]buttonTextHasSpace()", "[void]testGetSiblings()", "[void]nextElementSibling()", "[void]prevElementSibling()", "[void]testGetSiblingsWithDuplicateContent()", "[void]testFirstElementSiblingOnOrphan()", "[void]testFirstAndLastSiblings()", "[void]testGetParents()", "[void]testElementSiblingIndex()", "[void]testElementSiblingIndexSameContent()", "[void]testGetElementsWithClass()", "[void]testGetElementsWithAttribute()", "[void]testGetElementsWithAttributeDash()", "[void]testGetElementsWithAttributeValue()", "[void]testClassDomMethods()", "[void]testHasClassDomMethods()", "[void]testClassUpdates()", "[void]testOuterHtml()", "[void]testInnerHtml()", "[void]testFormatHtml()", "[void]testFormatOutline()", "[void]testSetIndent()", "[void]testIndentLevel()", "[void]testNotPretty()", "[void]testNotPrettyWithEnDashBody()", "[void]testPrettyWithEnDashBody()", "[void]testPrettyAndOutlineWithEnDashBody()", "[void]testBasicFormats()", "[void]testEmptyElementFormatHtml()", "[void]testNoIndentOnScriptAndStyle()", "[void]testContainerOutput()", "[void]testSetText()", "[void]testAddNewElement()", "[void]testAddBooleanAttribute()", "[void]testAppendRowToTable()", "[void]testPrependRowToTable()", "[void]testPrependElement()", "[void]testAddNewText()", "[void]testPrependText()", "[void]testThrowsOnAddNullText()", "[void]testThrowsOnPrependNullText()", "[void]testAddNewHtml()", "[void]testPrependNewHtml()", "[void]prependNodes()", "[void]appendNodes()", "[void]testSetHtml()", "[void]testSetHtmlTitle()", "[void]testWrap()", "[void]testWrapNoop()", "[void]testWrapOnOrphan()", "[void]testWrapArtificialStructure()", "[void]before()", "[void]after()", "[void]testWrapWithRemainder()", "[void]testWrapWithSimpleRemainder()", "[void]testHasText()", "[void]dataset()", "[void]parentlessToString()", "[void]orphanDivToString()", "[void]testClone()", "[void]testClonesClassnames()", "[void]testShallowClone()", "[void]testTagNameSet()", "[void]testHtmlContainsOuter()", "[void]testGetTextNodes()", "[void]testManipulateTextNodes()", "[void]testGetDataNodes()", "[void]elementIsNotASiblingOfItself()", "[void]testChildThrowsIndexOutOfBoundsOnMissing()", "[void]moveByAppend()", "[void]insertChildrenArgumentValidation()", "[void]insertChildrenAtPosition()", "[void]insertChildrenAsCopy()", "[void]testCssPath()", "[void]testCssPathDuplicateIds()", "[void]cssSelectorEscaped()", "[void]cssEscapedAmp()", "[void]cssSelectorEscapedClass()", "[void]testClassNames()", "[void]testHashAndEqualsAndValue()", "[void]testRelativeUrls()", "[void]testRelativeIdnUrls()", "[void]appendMustCorrectlyMoveChildrenInsideOneParentElement()", "[void]testHashcodeIsStableWithContentChanges()", "[void]testNamespacedElements()", "[void]testChainedRemoveAttributes()", "[void]testLoopedRemoveAttributes()", "[void]testIs()", "[void]testEvalMethods()", "[void]testClosest()", "[void]elementByTagName()", "[void]testChildrenElements()", "[void]testShadowElementsAreUpdated()", "[void]classNamesAndAttributeNameIsCaseInsensitive()", "[void]testAppendTo()", "[void]testNormalizesNbspInText()", "[void]testNormalizesInvisiblesInText()", "[void]testRemoveBeforeIndex()", "[void]testRemoveAfterIndex()", "[void]whiteSpaceClassElement()", "[void]testNextElementSiblingAfterClone()", "[void]testRemovingEmptyClassAttributeWhenLastClassRemoved()", "[void]booleanAttributeOutput()", "[void]textHasSpaceAfterBlockTags()", "[void]textHasSpaceBetweenDivAndCenterTags()", "[void]testNextElementSiblings()", "[void]testPreviousElementSiblings()", "[void]testClearAttributes()", "[void]testRemoveAttr()", "[void]testRoot()", "[void]testTraverse()", "[void]testTraverseLambda()", "[void]testFilterCallReturnsElement()", "[void]testFilterAsLambda()", "[void]testForEach()", "[void]doesntDeleteZWJWhenNormalizingText()", "[void]testReparentSeperateNodes()", "[void]testNotActuallyAReparent()", "[void]testChildSizeWithMixedContent()", "[void]isBlock()", "[void]testScriptTextHtmlSetAsData()", "[void]testShallowCloneToString()", "[void]styleHtmlRoundTrips()", "[void]moveChildren()", "[void]moveChildrenToOuter()", "[void]appendChildren()", "[void]prependChildren()", "[void]loopMoveChildren()", "[void]accessorsDoNotVivifyAttributes()", "[void]childNodesAccessorDoesNotVivify()", "[void]emptyChildrenElementsIsModifiable()", "[void]attributeSizeDoesNotAutoVivify()", "[void]clonedElementsHaveOwnerDocsAndIndependentSettings()", "[void]prettySerializationRoundTrips(Document.OutputSettings)", "[void]prettyPrintScriptsDoesNotGrowOnRepeat()", "[void]elementBrText()", "[void]wrapTextAfterBr()", "[void]prettyprintBrInBlock()", "[void]prettyprintBrWhenNotFirstChild()", "[void]preformatFlowsToChildTextNodes()", "[void]inlineInBlockShouldIndent()", "[void]testExpectFirst()", "[void]testExpectFirstMessage()", "[void]testExpectFirstMessageDoc()", "[void]spanRunsMaintainSpace()", "[void]doctypeIsPrettyPrinted()", "[void]textnodeInBlockIndent()", "[void]stripTrailing()", "[void]elementIndentAndSpaceTrims()", "[void]divAInlineable()", "[void]noDanglingSpaceAfterCustomElement()", "[void]spanInBlockTrims()", "[void]replaceWithSelf()", "[void]select()", "[void]insertChildrenValidation()", "[void]cssSelectorNoDoc()", "[void]cssSelectorNoParent()", "[void]cssSelectorDoesntStackOverflow()", "[void]cssSelectorWithBracket()", "[void]cssSelectorUnbalanced()", "[void]cssSelectorWithAsterisk()", "[void]cssSelectorWithPipe()", "[void]orphanSiblings()", "[void]getElementsByAttributeStarting()", "[void]getElementsByAttributeValueNot()", "[void]getElementsByAttributeValueStarting()", "[void]getElementsByAttributeValueEnding()", "[void]getElementsByAttributeValueContaining()", "[void]getElementsByAttributeValueMatchingPattern()", "[void]getElementsByAttributeValueMatching()", "[void]getElementsByAttributeValueMatchingValidation()", "[void]getElementsByIndexEquals()", "[void]getElementsContainingText()", "[void]getElementsContainingOwnText()", "[void]getElementsMatchingTextValidation()", "[void]getElementsMatchingText()", "[void]getElementsMatchingOwnText()", "[void]getElementsMatchingOwnTextValidation()", "[void]hasText()", "[void]dataInCdataNode()", "[void]datanodesOutputCdataInXhtml()", "[void]datanodesOutputExistingCdataInXhtml()", "[void]outerHtmlAppendable()", "[void]rubyInline()", "[void]nestedFormatAsInlinePrintsAsBlock()", "[void]emptyDetachesChildren()", "[void]emptyAndAddPreviousChild()", "[void]emptyAndAddPreviousDescendant()", "[void]xmlSyntaxSetsEscapeMode()", "[void]attribute()"], "method_uris": ["src/test/java/org/jsoup/nodes/ElementTest.java.ElementTest.[void]validateScriptContents(String,Element)", "src/test/java/org/jsoup/nodes/ElementTest.java.ElementTest.[void]validateXmlScriptContents(Element)", "src/test/java/org/jsoup/nodes/ElementTest.java.ElementTest.[Stream<Document.OutputSettings>]testOutputSettings()"], "overrides": null, "attributes": [], "class_docstring": "\nTests for Element (DOM stuff mostly).\n\n@author Jonathan Hedley", "original_string": "public class ElementTest {\n    private final String reference = \"<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>\";\n\n    private static void validateScriptContents(String src, Element el) {\n        assertEquals(\"\", el.text()); // it's not text\n        assertEquals(\"\", el.ownText());\n        assertEquals(\"\", el.wholeText());\n        assertEquals(src, el.html());\n        assertEquals(src, el.data());\n    }\n\n    private static void validateXmlScriptContents(Element el) {\n        assertEquals(\"var foo = 5 < 2; var bar = 1 && 2;\", el.text());\n        assertEquals(\"var foo = 5 < 2; var bar = 1 && 2;\", el.ownText());\n        assertEquals(\"var foo = 5 < 2;\\nvar bar = 1 && 2;\", el.wholeText());\n        assertEquals(\"var foo = 5 &lt; 2;\\nvar bar = 1 &amp;&amp; 2;\", el.html());\n        assertEquals(\"\", el.data());\n    }\n\n    @Test\n    public void testId() {\n        Document doc = Jsoup.parse(\"<div id=Foo>\");\n        Element el = doc.selectFirst(\"div\");\n        assertEquals(\"Foo\", el.id());\n    }\n\n    @Test\n    public void testSetId() {\n        Document doc = Jsoup.parse(\"<div id=Boo>\");\n        Element el = doc.selectFirst(\"div\");\n        el.id(\"Foo\");\n        assertEquals(\"Foo\", el.id());\n    }\n\n    @Test\n    public void getElementsByTagName() {\n        Document doc = Jsoup.parse(reference);\n        List<Element> divs = doc.getElementsByTag(\"div\");\n        assertEquals(2, divs.size());\n        assertEquals(\"div1\", divs.get(0).id());\n        assertEquals(\"div2\", divs.get(1).id());\n\n        List<Element> ps = doc.getElementsByTag(\"p\");\n        assertEquals(2, ps.size());\n        assertEquals(\"Hello\", ((TextNode) ps.get(0).childNode(0)).getWholeText());\n        assertEquals(\"Another \", ((TextNode) ps.get(1).childNode(0)).getWholeText());\n        List<Element> ps2 = doc.getElementsByTag(\"P\");\n        assertEquals(ps, ps2);\n\n        List<Element> imgs = doc.getElementsByTag(\"img\");\n        assertEquals(\"foo.png\", imgs.get(0).attr(\"src\"));\n\n        List<Element> empty = doc.getElementsByTag(\"wtf\");\n        assertEquals(0, empty.size());\n    }\n\n    @Test\n    public void getNamespacedElementsByTag() {\n        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div>\");\n        Elements els = doc.getElementsByTag(\"abc:def\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.first().id());\n        assertEquals(\"abc:def\", els.first().tagName());\n    }\n\n    @Test\n    public void testGetElementById() {\n        Document doc = Jsoup.parse(reference);\n        Element div = doc.getElementById(\"div1\");\n        assertEquals(\"div1\", div.id());\n        assertNull(doc.getElementById(\"none\"));\n\n        Document doc2 = Jsoup.parse(\"<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>\");\n        Element div2 = doc2.getElementById(\"2\");\n        assertEquals(\"div\", div2.tagName()); // not the span\n        Element span = div2.child(0).getElementById(\"2\"); // called from <p> context should be span\n        assertEquals(\"span\", span.tagName());\n    }\n\n    @Test\n    public void testGetText() {\n        Document doc = Jsoup.parse(reference);\n        assertEquals(\"Hello Another element\", doc.text());\n        assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n    }\n\n    @Test\n    public void testGetChildText() {\n        Document doc = Jsoup.parse(\"<p>Hello <b>there</b> now\");\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"Hello there now\", p.text());\n        assertEquals(\"Hello now\", p.ownText());\n    }\n\n    @Test\n    public void testNormalisesText() {\n        String h = \"<p>Hello<p>There.</p> \\n <p>Here <b>is</b> \\n s<b>om</b>e text.\";\n        Document doc = Jsoup.parse(h);\n        String text = doc.text();\n        assertEquals(\"Hello There. Here is some text.\", text);\n    }\n\n    @Test\n    public void testKeepsPreText() {\n        String h = \"<p>Hello \\n \\n there.</p> <div><pre>  What's \\n\\n  that?</pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there.   What's \\n\\n  that?\", doc.text());\n    }\n\n    @Test\n    public void testKeepsPreTextInCode() {\n        String h = \"<pre><code>code\\n\\ncode</code></pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"<pre><code>code\\n\\ncode</code></pre>\", doc.body().html());\n    }\n\n    @Test\n    public void testKeepsPreTextAtDepth() {\n        String h = \"<pre><code><span><b>code\\n\\ncode</b></span></code></pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"code\\n\\ncode\", doc.text());\n        assertEquals(\"<pre><code><span><b>code\\n\\ncode</b></span></code></pre>\", doc.body().html());\n    }\n\n    @Test void doesNotWrapBlocksInPre() {\n        // https://github.com/jhy/jsoup/issues/1891\n        String h = \"<pre><span><foo><div>TEST\\n TEST</div></foo></span></pre>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"TEST\\n TEST\", doc.wholeText());\n        assertEquals(h, doc.body().html());\n    }\n\n    @Test\n    public void testBrHasSpace() {\n        Document doc = Jsoup.parse(\"<p>Hello<br>there</p>\");\n        assertEquals(\"Hello there\", doc.text());\n        assertEquals(\"Hello there\", doc.select(\"p\").first().ownText());\n\n        doc = Jsoup.parse(\"<p>Hello <br> there</p>\");\n        assertEquals(\"Hello there\", doc.text());\n    }\n\n    @Test\n    public void testBrHasSpaceCaseSensitive() {\n        Document doc = Jsoup.parse(\"<p>Hello<br>there<BR>now</p>\", Parser.htmlParser().settings(ParseSettings.preserveCase));\n        assertEquals(\"Hello there now\", doc.text());\n        assertEquals(\"Hello there now\", doc.select(\"p\").first().ownText());\n\n        doc = Jsoup.parse(\"<p>Hello <br> there <BR> now</p>\");\n        assertEquals(\"Hello there now\", doc.text());\n    }\n\n    @Test public void textHasSpacesAfterBlock() {\n        Document doc = Jsoup.parse(\"<div>One</div><div>Two</div><span>Three</span><p>Fou<i>r</i></p>\");\n        String text = doc.text();\n        String wholeText = doc.wholeText();\n\n        assertEquals(\"One Two Three Four\", text);\n        assertEquals(\"OneTwoThreeFour\",wholeText);\n\n        assertEquals(\"OneTwo\",Jsoup.parse(\"<span>One</span><span>Two</span>\").text());\n    }\n\n    @Test\n    public void testWholeText() {\n        Document doc = Jsoup.parse(\"<p> Hello\\nthere &nbsp;  </p>\");\n        assertEquals(\" Hello\\nthere \u00a0  \", doc.wholeText());\n\n        doc = Jsoup.parse(\"<p>Hello  \\n  there</p>\");\n        assertEquals(\"Hello  \\n  there\", doc.wholeText());\n\n        doc = Jsoup.parse(\"<p>Hello  <div>\\n  there</div></p>\");\n        assertEquals(\"Hello  \\n  there\", doc.wholeText());\n    }\n\n    @Test void wholeTextRuns() {\n        Document doc = Jsoup.parse(\"<div><p id=1></p><p id=2> </p><p id=3>.  </p>\");\n\n        Element p1 = doc.expectFirst(\"#1\");\n        Element p2 = doc.expectFirst(\"#2\");\n        Element p3 = doc.expectFirst(\"#3\");\n\n        assertEquals(\"\", p1.wholeText());\n        assertEquals(\" \", p2.wholeText());\n        assertEquals(\".  \", p3.wholeText());\n    }\n\n    @Test void buttonTextHasSpace() {\n        // https://github.com/jhy/jsoup/issues/2105\n        Document doc = Jsoup.parse(\"<html><button>Reply</button><button>All</button></html>\");\n        String text = doc.body().text();\n        String wholetext = doc.body().wholeText();\n\n        assertEquals(\"Reply All\", text);\n        assertEquals(\"ReplyAll\", wholetext);\n    }\n\n    @Test\n    public void testGetSiblings() {\n        Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\");\n        Element p = doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n        assertNull(p.lastElementSibling().nextElementSibling());\n        assertNull(p.firstElementSibling().previousElementSibling());\n    }\n\n    @Test public void nextElementSibling() {\n        Document doc = Jsoup.parse(\"<p>One</p>Two<p>Three</p>\");\n        Element el = doc.expectFirst(\"p\");\n        assertNull(el.previousElementSibling());\n        Element next = el.nextElementSibling();\n        assertNotNull(next);\n        assertEquals(\"Three\", next.text());\n        assertNull(next.nextElementSibling());\n    }\n\n    @Test public void prevElementSibling() {\n        Document doc = Jsoup.parse(\"<p>One</p>Two<p>Three</p>\");\n        Element el = doc.expectFirst(\"p:contains(Three)\");\n        assertNull(el.nextElementSibling());\n        Element prev = el.previousElementSibling();\n        assertNotNull(prev);\n        assertEquals(\"One\", prev.text());\n        assertNull(prev.previousElementSibling());\n    }\n\n    @Test\n    public void testGetSiblingsWithDuplicateContent() {\n        Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>\");\n        Element p = doc.getElementById(\"1\");\n        assertEquals(\"there\", p.text());\n        assertEquals(\"Hello\", p.previousElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().text());\n        assertEquals(\"this\", p.nextElementSibling().nextElementSibling().text());\n        assertEquals(\"is\", p.nextElementSibling().nextElementSibling().nextElementSibling().text());\n        assertEquals(\"Hello\", p.firstElementSibling().text());\n        assertEquals(\"element\", p.lastElementSibling().text());\n    }\n\n    @Test\n    public void testFirstElementSiblingOnOrphan() {\n        Element p = new Element(\"p\");\n        assertSame(p, p.firstElementSibling());\n        assertSame(p, p.lastElementSibling());\n    }\n\n    @Test\n    public void testFirstAndLastSiblings() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three\");\n        Element div = doc.expectFirst(\"div\");\n        Element one = div.child(0);\n        Element two = div.child(1);\n        Element three = div.child(2);\n\n        assertSame(one, one.firstElementSibling());\n        assertSame(one, two.firstElementSibling());\n        assertSame(three, three.lastElementSibling());\n        assertSame(three, two.lastElementSibling());\n        assertNull(one.previousElementSibling());\n        assertNull(three.nextElementSibling());\n    }\n\n    @Test\n    public void testGetParents() {\n        Document doc = Jsoup.parse(\"<div><p>Hello <span>there</span></div>\");\n        Element span = doc.select(\"span\").first();\n        Elements parents = span.parents();\n\n        assertEquals(4, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n        assertEquals(\"body\", parents.get(2).tagName());\n        assertEquals(\"html\", parents.get(3).tagName());\n\n        Element orphan = new Element(\"p\");\n        Elements none = orphan.parents();\n        assertEquals(0, none.size());\n    }\n\n    @Test\n    public void testElementSiblingIndex() {\n        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(0, ps.get(0).elementSiblingIndex());\n        assertEquals(1, ps.get(1).elementSiblingIndex());\n        assertEquals(2, ps.get(2).elementSiblingIndex());\n    }\n\n    @Test\n    public void testElementSiblingIndexSameContent() {\n        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>One</p>...<p>One</p>\");\n        Elements ps = doc.select(\"p\");\n        assertEquals(0, ps.get(0).elementSiblingIndex());\n        assertEquals(1, ps.get(1).elementSiblingIndex());\n        assertEquals(2, ps.get(2).elementSiblingIndex());\n    }\n\n    @Test\n    public void testGetElementsWithClass() {\n        Document doc = Jsoup.parse(\"<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>\");\n\n        List<Element> els = doc.getElementsByClass(\"mellow\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"span\", els.get(1).tagName());\n\n        List<Element> els2 = doc.getElementsByClass(\"yellow\");\n        assertEquals(2, els2.size());\n        assertEquals(\"div\", els2.get(0).tagName());\n        assertEquals(\"b\", els2.get(1).tagName());\n\n        List<Element> none = doc.getElementsByClass(\"solo\");\n        assertEquals(0, none.size());\n    }\n\n    @Test\n    public void testGetElementsWithAttribute() {\n        Document doc = Jsoup.parse(\"<div style='bold'><p title=qux><p><b style></b></p></div>\");\n        List<Element> els = doc.getElementsByAttribute(\"style\");\n        assertEquals(2, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n        assertEquals(\"b\", els.get(1).tagName());\n\n        List<Element> none = doc.getElementsByAttribute(\"class\");\n        assertEquals(0, none.size());\n    }\n\n    @Test\n    public void testGetElementsWithAttributeDash() {\n        Document doc = Jsoup.parse(\"<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>\");\n        Elements meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n        assertEquals(1, meta.size());\n        assertEquals(\"1\", meta.first().id());\n    }\n\n    @Test\n    public void testGetElementsWithAttributeValue() {\n        Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n        List<Element> els = doc.getElementsByAttributeValue(\"style\", \"bold\");\n        assertEquals(1, els.size());\n        assertEquals(\"div\", els.get(0).tagName());\n\n        List<Element> none = doc.getElementsByAttributeValue(\"style\", \"none\");\n        assertEquals(0, none.size());\n    }\n\n    @Test\n    public void testClassDomMethods() {\n        Document doc = Jsoup.parse(\"<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>\");\n        List<Element> els = doc.getElementsByAttribute(\"class\");\n        Element span = els.get(0);\n        assertEquals(\"mellow yellow\", span.className());\n        assertTrue(span.hasClass(\"mellow\"));\n        assertTrue(span.hasClass(\"yellow\"));\n        Set<String> classes = span.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"mellow\"));\n        assertTrue(classes.contains(\"yellow\"));\n\n        assertEquals(\"\", doc.className());\n        classes = doc.classNames();\n        assertEquals(0, classes.size());\n        assertFalse(doc.hasClass(\"mellow\"));\n    }\n\n    @Test\n    public void testHasClassDomMethods() {\n        Tag tag = Tag.valueOf(\"a\");\n        Attributes attribs = new Attributes();\n        Element el = new Element(tag, \"\", attribs);\n\n        attribs.put(\"class\", \"toto\");\n        boolean hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \" toto\");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \"toto \");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \"\\ttoto \");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \"  toto \");\n        hasClass = el.hasClass(\"toto\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \"ab\");\n        hasClass = el.hasClass(\"toto\");\n        assertFalse(hasClass);\n\n        attribs.put(\"class\", \"     \");\n        hasClass = el.hasClass(\"toto\");\n        assertFalse(hasClass);\n\n        attribs.put(\"class\", \"tototo\");\n        hasClass = el.hasClass(\"toto\");\n        assertFalse(hasClass);\n\n        attribs.put(\"class\", \"raulpismuth  \");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \" abcd  raulpismuth efgh \");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \" abcd efgh raulpismuth\");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n\n        attribs.put(\"class\", \" abcd efgh raulpismuth \");\n        hasClass = el.hasClass(\"raulpismuth\");\n        assertTrue(hasClass);\n    }\n\n    @Test\n    public void testClassUpdates() {\n        Document doc = Jsoup.parse(\"<div class='mellow yellow'></div>\");\n        Element div = doc.select(\"div\").first();\n\n        div.addClass(\"green\");\n        assertEquals(\"mellow yellow green\", div.className());\n        div.removeClass(\"red\"); // noop\n        div.removeClass(\"yellow\");\n        assertEquals(\"mellow green\", div.className());\n        div.toggleClass(\"green\").toggleClass(\"red\");\n        assertEquals(\"mellow red\", div.className());\n    }\n\n    @Test\n    public void testOuterHtml() {\n        Document doc = Jsoup.parse(\"<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there\");\n        assertEquals(\"<html><head></head><body><div title=\\\"Tags &amp;c.\\\"><img src=\\\"foo.png\\\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>\",\n            TextUtil.stripNewlines(doc.outerHtml()));\n    }\n\n    @Test\n    public void testInnerHtml() {\n        Document doc = Jsoup.parse(\"<div>\\n <p>Hello</p> </div>\");\n        assertEquals(\"<p>Hello</p>\", doc.getElementsByTag(\"div\").get(0).html());\n    }\n\n    @Test\n    public void testFormatHtml() {\n        Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n        assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>Hello <span>jsoup <span>users</span></span></p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n    }\n\n    @Test\n    public void testFormatOutline() {\n        Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n        doc.outputSettings().outline(true);\n        assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>\\n    Hello \\n    <span>\\n     jsoup \\n     <span>users</span>\\n    </span>\\n   </p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n    }\n\n    @Test\n    public void testSetIndent() {\n        Document doc = Jsoup.parse(\"<div><p>Hello\\nthere</p></div>\");\n        doc.outputSettings().indentAmount(0);\n        assertEquals(\"<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>\", doc.html());\n    }\n\n    @Test void testIndentLevel() {\n        // deep to test default and extended max\n        StringBuilder divs = new StringBuilder();\n        for (int i = 0; i < 40; i++) {\n            divs.append(\"<div>\");\n        }\n        divs.append(\"Foo\");\n        Document doc = Jsoup.parse(divs.toString());\n        Document.OutputSettings settings = doc.outputSettings();\n\n        int defaultMax = 30;\n        assertEquals(defaultMax, settings.maxPaddingWidth());\n        String html = doc.html();\n        assertTrue(html.contains(\"                              <div>\\n\" +\n            \"                              Foo\\n\" +\n            \"                              </div>\"));\n\n        settings.maxPaddingWidth(32);\n        assertEquals(32, settings.maxPaddingWidth());\n        html = doc.html();\n        assertTrue(html.contains(\"                                <div>\\n\" +\n            \"                                Foo\\n\" +\n            \"                                </div>\"));\n\n        settings.maxPaddingWidth(-1);\n        assertEquals(-1, settings.maxPaddingWidth());\n        html = doc.html();\n        assertTrue(html.contains(\"                                         <div>\\n\" +\n            \"                                          Foo\\n\" +\n            \"                                         </div>\"));\n    }\n\n    @Test\n    public void testNotPretty() {\n        Document doc = Jsoup.parse(\"<div>   \\n<p>Hello\\n there\\n</p></div>\");\n        doc.outputSettings().prettyPrint(false);\n        assertEquals(\"<html><head></head><body><div>   \\n<p>Hello\\n there\\n</p></div></body></html>\", doc.html());\n\n        Element div = doc.select(\"div\").first();\n        assertEquals(\"   \\n<p>Hello\\n there\\n</p>\", div.html());\n    }\n\n    @Test\n    public void testNotPrettyWithEnDashBody() {\n        String html = \"<div><span>1:15</span>&ndash;<span>2:15</span>&nbsp;p.m.</div>\";\n        Document document = Jsoup.parse(html);\n        document.outputSettings().prettyPrint(false);\n\n        assertEquals(\"<div><span>1:15</span>\u2013<span>2:15</span>&nbsp;p.m.</div>\", document.body().html());\n    }\n\n    @Test\n    public void testPrettyWithEnDashBody() {\n        String html = \"<div><span>1:15</span>&ndash;<span>2:15</span>&nbsp;p.m.</div>\";\n        Document document = Jsoup.parse(html);\n\n        assertEquals(\"<div>\\n <span>1:15</span>\u2013<span>2:15</span>&nbsp;p.m.\\n</div>\", document.body().html());\n    }\n\n    @Test\n    public void testPrettyAndOutlineWithEnDashBody() {\n        String html = \"<div><span>1:15</span>&ndash;<span>2:15</span>&nbsp;p.m.</div>\";\n        Document document = Jsoup.parse(html);\n        document.outputSettings().outline(true);\n\n        assertEquals(\"<div>\\n <span>1:15</span>\\n \u2013\\n <span>2:15</span>\\n &nbsp;p.m.\\n</div>\", document.body().html());\n    }\n\n    @Test\n    public void testBasicFormats() {\n        String html = \"<span>0</span>.<div><span>1</span>-<span>2</span><p><span>3</span>-<span>4</span><div>5</div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\n            \"<span>0</span>.\\n\" +\n                \"<div>\\n\" +\n                \" <span>1</span>-<span>2</span>\\n\" +\n                \" <p><span>3</span>-<span>4</span></p>\\n\" +\n                \" <div>\\n\" +\n                \"  5\\n\" +\n                \" </div>\\n\" +\n                \"</div>\", doc.body().html());\n    }\n\n    @Test\n    public void testEmptyElementFormatHtml() {\n        // don't put newlines into empty blocks\n        Document doc = Jsoup.parse(\"<section><div></div></section>\");\n        assertEquals(\"<section>\\n <div></div>\\n</section>\", doc.select(\"section\").first().outerHtml());\n    }\n\n    @Test\n    public void testNoIndentOnScriptAndStyle() {\n        // don't newline+indent closing </script> and </style> tags\n        Document doc = Jsoup.parse(\"<script>one\\ntwo</script>\\n<style>three\\nfour</style>\");\n        assertEquals(\"<script>one\\ntwo</script>\\n<style>three\\nfour</style>\", doc.head().html());\n    }\n\n    @Test\n    public void testContainerOutput() {\n        Document doc = Jsoup.parse(\"<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>\");\n        assertEquals(\"<title>Hello there</title>\", doc.select(\"title\").first().outerHtml());\n        assertEquals(\"<div>\\n <p>Hello</p>\\n <p>there</p>\\n</div>\", doc.select(\"div\").first().outerHtml());\n        assertEquals(\"<div>\\n <p>Hello</p>\\n <p>there</p>\\n</div>\\n<div>\\n Another\\n</div>\", doc.select(\"body\").first().html());\n    }\n\n    @Test\n    public void testSetText() {\n        String h = \"<div id=1>Hello <p>there <b>now</b></p></div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"Hello there now\", doc.text()); // need to sort out node whitespace\n        assertEquals(\"there now\", doc.select(\"p\").get(0).text());\n\n        Element div = doc.getElementById(\"1\").text(\"Gone\");\n        assertEquals(\"Gone\", div.text());\n        assertEquals(0, doc.select(\"p\").size());\n    }\n\n    @Test\n    public void testAddNewElement() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendElement(\"p\").text(\"there\");\n        div.appendElement(\"P\").attr(\"CLASS\", \"second\").text(\"now\");\n        // manually specifying tag and attributes should maintain case based on parser settings\n        assertEquals(\"<html><head></head><body><div id=\\\"1\\\"><p>Hello</p><p>there</p><p class=\\\"second\\\">now</p></div></body></html>\",\n            TextUtil.stripNewlines(doc.html()));\n\n        // check sibling index (with short circuit on reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }\n\n    @Test\n    public void testAddBooleanAttribute() {\n        Element div = new Element(Tag.valueOf(\"div\"), \"\");\n\n        div.attr(\"true\", true);\n\n        div.attr(\"false\", \"value\");\n        div.attr(\"false\", false);\n\n        assertTrue(div.hasAttr(\"true\"));\n        assertEquals(\"\", div.attr(\"true\"));\n\n        List<Attribute> attributes = div.attributes().asList();\n        assertEquals(1, attributes.size(), \"There should be one attribute\");\n        assertFalse(div.hasAttr(\"false\"));\n\n        assertEquals(\"<div true></div>\", div.outerHtml());\n    }\n\n    @Test\n    public void testAppendRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"tbody\").first();\n        table.append(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testPrependRowToTable() {\n        Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n        Element table = doc.select(\"tbody\").first();\n        table.prepend(\"<tr><td>2</td></tr>\");\n\n        assertEquals(\"<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps = doc.select(\"tr\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }\n\n    @Test\n    public void testPrependElement() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependElement(\"p\").text(\"Before\");\n        assertEquals(\"Before\", div.child(0).text());\n        assertEquals(\"Hello\", div.child(1).text());\n    }\n\n    @Test\n    public void testAddNewText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.appendText(\" there & now >\");\n        assertEquals (\"Hello there & now >\", div.text());\n        assertEquals(\"<p>Hello</p> there &amp; now &gt;\", TextUtil.stripNewlines(div.html()));\n    }\n\n    @Test\n    public void testPrependText() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prependText(\"there & now > \");\n        assertEquals(\"there & now > Hello\", div.text());\n        assertEquals(\"there &amp; now &gt; <p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n    }\n\n    @Test\n    public void testThrowsOnAddNullText() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n            Element div = doc.getElementById(\"1\");\n            div.appendText(null);\n        });\n    }\n\n    @Test\n    public void testThrowsOnPrependNullText() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n            Element div = doc.getElementById(\"1\");\n            div.prependText(null);\n        });\n    }\n\n    @Test\n    public void testAddNewHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.append(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>Hello</p><p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (no reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }\n\n    @Test\n    public void testPrependNewHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.prepend(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>there</p><p>now</p><p>Hello</p>\", TextUtil.stripNewlines(div.html()));\n\n        // check sibling index (reindexChildren):\n        Elements ps = doc.select(\"p\");\n        for (int i = 0; i < ps.size(); i++) {\n            assertEquals(i, ps.get(i).siblingIndex);\n        }\n    }\n\n    @Test void prependNodes() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element p = doc.expectFirst(\"p\");\n        p.prepend(\"Text <!-- comment --> \");\n        assertEquals(\"Text <!-- comment --> Hello\", TextUtil.stripNewlines(p.html()));\n    }\n\n    @Test void appendNodes() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element p = doc.expectFirst(\"p\");\n        p.append(\" Text <!-- comment -->\");\n        assertEquals(\"Hello Text <!-- comment -->\", TextUtil.stripNewlines(p.html()));\n    }\n\n    @Test\n    public void testSetHtml() {\n        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n        Element div = doc.getElementById(\"1\");\n        div.html(\"<p>there</p><p>now</p>\");\n        assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n    }\n\n    @Test\n    public void testSetHtmlTitle() {\n        Document doc = Jsoup.parse(\"<html><head id=2><title id=1></title></head></html>\");\n\n        Element title = doc.getElementById(\"1\");\n        title.html(\"good\");\n        assertEquals(\"good\", title.html());\n        title.html(\"<i>bad</i>\");\n        assertEquals(\"&lt;i&gt;bad&lt;/i&gt;\", title.html());\n\n        Element head = doc.getElementById(\"2\");\n        head.html(\"<title><i>bad</i></title>\");\n        assertEquals(\"<title>&lt;i&gt;bad&lt;/i&gt;</title>\", head.html());\n    }\n\n    @Test\n    public void testWrap() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p = doc.select(\"p\").first();\n        p.wrap(\"<div class='head'></div>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        Element ret = p.wrap(\"<div><div class=foo></div><p>What?</p></div>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><div><div class=\\\"foo\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\",\n            TextUtil.stripNewlines(doc.body().html()));\n\n        assertEquals(ret, p);\n    }\n\n    @Test\n    public void testWrapNoop() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n        Node p = doc.select(\"p\").first();\n        Node wrapped = p.wrap(\"Some junk\");\n        assertSame(p, wrapped);\n        assertEquals(\"<div><p>Hello</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n        // should be a NOOP\n    }\n\n    @Test\n    public void testWrapOnOrphan() {\n        Element orphan = new Element(\"span\").text(\"Hello!\");\n        assertFalse(orphan.hasParent());\n        Element wrapped = orphan.wrap(\"<div></div> There!\");\n        assertSame(orphan, wrapped);\n        assertTrue(orphan.hasParent()); // should now be in the DIV\n        assertNotNull(orphan.parent());\n        assertEquals(\"div\", orphan.parent().tagName());\n        assertEquals(\"<div>\\n <span>Hello!</span>\\n</div>\", orphan.parent().outerHtml());\n    }\n\n    @Test\n    public void testWrapArtificialStructure() {\n        // div normally couldn't get into a p, but explicitly want to wrap\n        Document doc = Jsoup.parse(\"<p>Hello <i>there</i> now.\");\n        Element i = doc.selectFirst(\"i\");\n        i.wrap(\"<div id=id1></div> quite\");\n        assertEquals(\"div\", i.parent().tagName());\n        assertEquals(\"<p>Hello <div id=\\\"id1\\\"><i>there</i></div> quite now.</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void before() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.before(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        doc.select(\"p\").last().before(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void after() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n        Element p1 = doc.select(\"p\").first();\n        p1.after(\"<div>one</div><div>two</div>\");\n        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        doc.select(\"p\").last().after(\"<p>Three</p><!-- four -->\");\n        assertEquals(\"<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testWrapWithRemainder() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n        Element p = doc.select(\"p\").first();\n        p.wrap(\"<div class='head'></div><p>There!</p>\");\n        assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p></div><p>There!</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testWrapWithSimpleRemainder() {\n        Document doc = Jsoup.parse(\"<p>Hello\");\n        Element p = doc.selectFirst(\"p\");\n        Element body = p.parent();\n        assertNotNull(body);\n        assertEquals(\"body\", body.tagName());\n\n        p.wrap(\"<div></div> There\");\n        Element div = p.parent();\n        assertNotNull(div);\n        assertEquals(\"div\", div.tagName());\n        assertSame(div, p.parent());\n        assertSame(body, div.parent());\n\n        assertEquals(\"<div><p>Hello</p></div> There\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testHasText() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p><p></p></div>\");\n        Element div = doc.select(\"div\").first();\n        Elements ps = doc.select(\"p\");\n\n        assertTrue(div.hasText());\n        assertTrue(ps.first().hasText());\n        assertFalse(ps.last().hasText());\n    }\n\n    @Test\n    public void dataset() {\n        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>\");\n        Element div = doc.select(\"div\").first();\n        Map<String, String> dataset = div.dataset();\n        Attributes attributes = div.attributes();\n\n        // size, get, set, add, remove\n        assertEquals(2, dataset.size());\n        assertEquals(\"jsoup\", dataset.get(\"name\"));\n        assertEquals(\"jar\", dataset.get(\"package\"));\n\n        dataset.put(\"name\", \"jsoup updated\");\n        dataset.put(\"language\", \"java\");\n        dataset.remove(\"package\");\n\n        assertEquals(2, dataset.size());\n        assertEquals(4, attributes.size());\n        assertEquals(\"jsoup updated\", attributes.get(\"data-name\"));\n        assertEquals(\"jsoup updated\", dataset.get(\"name\"));\n        assertEquals(\"java\", attributes.get(\"data-language\"));\n        assertEquals(\"java\", dataset.get(\"language\"));\n\n        attributes.put(\"data-food\", \"bacon\");\n        assertEquals(3, dataset.size());\n        assertEquals(\"bacon\", dataset.get(\"food\"));\n\n        attributes.put(\"data-\", \"empty\");\n        assertNull(dataset.get(\"\")); // data- is not a data attribute\n\n        Element p = doc.select(\"p\").first();\n        assertEquals(0, p.dataset().size());\n\n    }\n\n    @Test\n    public void parentlessToString() {\n        Document doc = Jsoup.parse(\"<img src='foo'>\");\n        Element img = doc.select(\"img\").first();\n        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n\n        img.remove(); // lost its parent\n        assertEquals(\"<img src=\\\"foo\\\">\", img.toString());\n    }\n\n    @Test\n    public void orphanDivToString() {\n        Element orphan = new Element(\"div\").id(\"foo\").text(\"Hello\");\n        assertEquals(\"<div id=\\\"foo\\\">\\n Hello\\n</div>\", orphan.toString());\n    }\n\n    @Test\n    public void testClone() {\n        Document doc = Jsoup.parse(\"<div><p>One<p><span>Two</div>\");\n\n        Element p = doc.select(\"p\").get(1);\n        Element clone = p.clone();\n\n        assertNotNull(clone.parentNode); // should be a cloned document just containing this clone\n        assertEquals(1, clone.parentNode.childNodeSize());\n        assertSame(clone.ownerDocument(), clone.parentNode);\n\n        assertEquals(0, clone.siblingIndex);\n        assertEquals(1, p.siblingIndex);\n        assertNotNull(p.parent());\n\n        clone.append(\"<span>Three\");\n        assertEquals(\"<p><span>Two</span><span>Three</span></p>\", TextUtil.stripNewlines(clone.outerHtml()));\n        assertEquals(\"<div><p>One</p><p><span>Two</span></p></div>\", TextUtil.stripNewlines(doc.body().html())); // not modified\n\n        doc.body().appendChild(clone); // adopt\n        assertNotNull(clone.parent());\n        assertEquals(\"<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testClonesClassnames() {\n        Document doc = Jsoup.parse(\"<div class='one two'></div>\");\n        Element div = doc.select(\"div\").first();\n        Set<String> classes = div.classNames();\n        assertEquals(2, classes.size());\n        assertTrue(classes.contains(\"one\"));\n        assertTrue(classes.contains(\"two\"));\n\n        Element copy = div.clone();\n        Set<String> copyClasses = copy.classNames();\n        assertEquals(2, copyClasses.size());\n        assertTrue(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"two\"));\n        copyClasses.add(\"three\");\n        copyClasses.remove(\"one\");\n\n        assertTrue(classes.contains(\"one\"));\n        assertFalse(classes.contains(\"three\"));\n        assertFalse(copyClasses.contains(\"one\"));\n        assertTrue(copyClasses.contains(\"three\"));\n\n        assertEquals(\"\", div.html());\n        assertEquals(\"\", copy.html());\n    }\n\n    @Test\n    public void testShallowClone() {\n        String base = \"http://example.com/\";\n        Document doc = Jsoup.parse(\"<div id=1 class=one><p id=2 class=two>One\", base);\n        Element d = doc.selectFirst(\"div\");\n        Element p = doc.selectFirst(\"p\");\n        TextNode t = p.textNodes().get(0);\n\n        Element d2 = d.shallowClone();\n        Element p2 = p.shallowClone();\n        TextNode t2 = (TextNode) t.shallowClone();\n\n        assertEquals(1, d.childNodeSize());\n        assertEquals(0, d2.childNodeSize());\n\n        assertEquals(1, p.childNodeSize());\n        assertEquals(0, p2.childNodeSize());\n\n        assertEquals(\"\", p2.text());\n        assertEquals(\"One\", t2.text());\n\n        assertEquals(\"two\", p2.className());\n        p2.removeClass(\"two\");\n        assertEquals(\"two\", p.className());\n\n        d2.append(\"<p id=3>Three\");\n        assertEquals(1, d2.childNodeSize());\n        assertEquals(\"Three\", d2.text());\n        assertEquals(\"One\", d.text());\n        assertEquals(base, d2.baseUri());\n    }\n\n    @Test\n    public void testTagNameSet() {\n        Document doc = Jsoup.parse(\"<div><i>Hello</i>\");\n        doc.select(\"i\").first().tagName(\"em\");\n        assertEquals(0, doc.select(\"i\").size());\n        assertEquals(1, doc.select(\"em\").size());\n        assertEquals(\"<em>Hello</em>\", doc.select(\"div\").first().html());\n    }\n\n    @Test\n    public void testHtmlContainsOuter() {\n        Document doc = Jsoup.parse(\"<title>Check</title> <div>Hello there</div>\");\n        doc.outputSettings().indentAmount(0);\n        assertTrue(doc.html().contains(doc.select(\"title\").outerHtml()));\n        assertTrue(doc.html().contains(doc.select(\"div\").outerHtml()));\n    }\n\n    @Test\n    public void testGetTextNodes() {\n        Document doc = Jsoup.parse(\"<p>One <span>Two</span> Three <br> Four</p>\");\n        List<TextNode> textNodes = doc.select(\"p\").first().textNodes();\n\n        assertEquals(3, textNodes.size());\n        assertEquals(\"One \", textNodes.get(0).text());\n        assertEquals(\" Three \", textNodes.get(1).text());\n        assertEquals(\" Four\", textNodes.get(2).text());\n\n        assertEquals(0, doc.select(\"br\").first().textNodes().size());\n    }\n\n    @Test\n    public void testManipulateTextNodes() {\n        Document doc = Jsoup.parse(\"<p>One <span>Two</span> Three <br> Four</p>\");\n        Element p = doc.select(\"p\").first();\n        List<TextNode> textNodes = p.textNodes();\n\n        textNodes.get(1).text(\" three-more \");\n        textNodes.get(2).splitText(3).text(\"-ur\");\n\n        assertEquals(\"One Two three-more Fo-ur\", p.text());\n        assertEquals(\"One three-more Fo-ur\", p.ownText());\n        assertEquals(4, p.textNodes().size()); // grew because of split\n    }\n\n    @Test\n    public void testGetDataNodes() {\n        Document doc = Jsoup.parse(\"<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>\");\n        Element script = doc.select(\"script\").first();\n        Element style = doc.select(\"style\").first();\n        Element p = doc.select(\"p\").first();\n\n        List<DataNode> scriptData = script.dataNodes();\n        assertEquals(1, scriptData.size());\n        assertEquals(\"One Two\", scriptData.get(0).getWholeData());\n\n        List<DataNode> styleData = style.dataNodes();\n        assertEquals(1, styleData.size());\n        assertEquals(\"Three Four\", styleData.get(0).getWholeData());\n\n        List<DataNode> pData = p.dataNodes();\n        assertEquals(0, pData.size());\n    }\n\n    @Test\n    public void elementIsNotASiblingOfItself() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());\n        Elements els = p2.siblingElements();\n        assertEquals(2, els.size());\n        assertEquals(\"<p>One</p>\", els.get(0).outerHtml());\n        assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());\n    }\n\n    @Test\n    public void testChildThrowsIndexOutOfBoundsOnMissing() {\n        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p></div>\");\n        Element div = doc.select(\"div\").first();\n\n        assertEquals(2, div.children().size());\n        assertEquals(\"One\", div.child(0).text());\n\n        try {\n            div.child(3);\n            fail(\"Should throw index out of bounds\");\n        } catch (IndexOutOfBoundsException e) {\n        }\n    }\n\n    @Test\n    public void moveByAppend() {\n        // test for https://github.com/jhy/jsoup/issues/239\n        // can empty an element and append its children to another element\n        Document doc = Jsoup.parse(\"<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Element div2 = doc.select(\"div\").get(1);\n\n        assertEquals(4, div1.childNodeSize());\n        List<Node> children = div1.childNodes();\n        assertEquals(4, children.size());\n\n        div2.insertChildren(0, children);\n\n        assertEquals(4, children.size()); // children is NOT backed by div1.childNodes but a wrapper, so should still be 4 (but re-parented)\n        assertEquals(0, div1.childNodeSize());\n        assertEquals(4, div2.childNodeSize());\n        assertEquals(\"<div id=\\\"1\\\"></div>\\n<div id=\\\"2\\\">\\n Text \\n <p>One</p> Text \\n <p>Two</p>\\n</div>\",\n            doc.body().html());\n    }\n\n    @Test\n    public void insertChildrenArgumentValidation() {\n        Document doc = Jsoup.parse(\"<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Element div2 = doc.select(\"div\").get(1);\n        List<Node> children = div1.childNodes();\n\n        try {\n            div2.insertChildren(6, children);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n\n        try {\n            div2.insertChildren(-5, children);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n\n        try {\n            div2.insertChildren(0, (Collection<? extends Node>) null);\n            fail();\n        } catch (IllegalArgumentException e) {\n        }\n    }\n\n    @Test\n    public void insertChildrenAtPosition() {\n        Document doc = Jsoup.parse(\"<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Elements p1s = div1.select(\"p\");\n        Element div2 = doc.select(\"div\").get(1);\n\n        assertEquals(2, div2.childNodeSize());\n        div2.insertChildren(-1, p1s);\n        assertEquals(2, div1.childNodeSize()); // moved two out\n        assertEquals(4, div2.childNodeSize());\n        assertEquals(3, p1s.get(1).siblingIndex()); // should be last\n\n        List<Node> els = new ArrayList<>();\n        Element el1 = new Element(Tag.valueOf(\"span\"), \"\").text(\"Span1\");\n        Element el2 = new Element(Tag.valueOf(\"span\"), \"\").text(\"Span2\");\n        TextNode tn1 = new TextNode(\"Text4\");\n        els.add(el1);\n        els.add(el2);\n        els.add(tn1);\n\n        assertNull(el1.parent());\n        div2.insertChildren(-2, els);\n        assertEquals(div2, el1.parent());\n        assertEquals(7, div2.childNodeSize());\n        assertEquals(3, el1.siblingIndex());\n        assertEquals(4, el2.siblingIndex());\n        assertEquals(5, tn1.siblingIndex());\n    }\n\n    @Test\n    public void insertChildrenAsCopy() {\n        Document doc = Jsoup.parse(\"<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>\");\n        Element div1 = doc.select(\"div\").get(0);\n        Element div2 = doc.select(\"div\").get(1);\n        Elements ps = doc.select(\"p\").clone();\n        ps.first().text(\"One cloned\");\n        div2.insertChildren(-1, ps);\n\n        assertEquals(4, div1.childNodeSize()); // not moved -- cloned\n        assertEquals(2, div2.childNodeSize());\n        assertEquals(\"<div id=\\\"1\\\">Text <p>One</p> Text <p>Two</p></div><div id=\\\"2\\\"><p>One cloned</p><p>Two</p></div>\",\n            TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testCssPath() {\n        Document doc = Jsoup.parse(\"<div id=\\\"id1\\\">A</div><div>B</div><div class=\\\"c1 c2\\\">C</div>\");\n        Element divA = doc.select(\"div\").get(0);\n        Element divB = doc.select(\"div\").get(1);\n        Element divC = doc.select(\"div\").get(2);\n        assertEquals(divA.cssSelector(), \"#id1\");\n        assertEquals(divB.cssSelector(), \"html > body > div:nth-child(2)\");\n        assertEquals(divC.cssSelector(), \"html > body > div.c1.c2\");\n\n        assertSame(divA, doc.select(divA.cssSelector()).first());\n        assertSame(divB, doc.select(divB.cssSelector()).first());\n        assertSame(divC, doc.select(divC.cssSelector()).first());\n    }\n\n    @Test\n    public void testCssPathDuplicateIds() {\n        // https://github.com/jhy/jsoup/issues/1147 - multiple elements with same ID, use the non-ID form\n        Document doc = Jsoup.parse(\"<article><div id=dupe>A</div><div id=dupe>B</div><div id=dupe class=c1>\");\n        Element divA = doc.select(\"div\").get(0);\n        Element divB = doc.select(\"div\").get(1);\n        Element divC = doc.select(\"div\").get(2);\n\n        assertEquals(divA.cssSelector(), \"html > body > article > div:nth-child(1)\");\n        assertEquals(divB.cssSelector(), \"html > body > article > div:nth-child(2)\");\n        assertEquals(divC.cssSelector(), \"html > body > article > div.c1\");\n\n        assertSame(divA, doc.select(divA.cssSelector()).first());\n        assertSame(divB, doc.select(divB.cssSelector()).first());\n        assertSame(divC, doc.select(divC.cssSelector()).first());\n    }\n\n    @Test public void cssSelectorEscaped() {\n        // https://github.com/jhy/jsoup/issues/1742\n        Document doc = Jsoup.parse(\"<p\\\\p>One</p\\\\p> <p id='one.two'>Two</p> <p class='one.two:three/four'>Three</p>\");\n        Element one = doc.expectFirst(\"p\\\\\\\\p\");\n        Elements ps = doc.select(\"p\");\n        Element two = ps.get(0);\n        Element three = ps.get(1);\n\n        String oneSelect = one.cssSelector();\n        assertEquals(\"html > body > p\\\\\\\\p\", oneSelect);\n        assertEquals(one, doc.expectFirst(oneSelect));\n\n        String twoSelect = two.cssSelector();\n        assertEquals(\"#one\\\\.two\", twoSelect);\n        assertEquals(two, doc.expectFirst(twoSelect));\n\n        String threeSelect = three.cssSelector();\n        assertEquals(\"html > body > p.one\\\\.two\\\\:three\\\\/four\", threeSelect);\n        assertEquals(three, doc.expectFirst(threeSelect));\n    }\n\n    @Test public void cssEscapedAmp() {\n        Document doc = Jsoup.parse(\"<p class='\\\\&'>One</p>\");\n        Element one = doc.expectFirst(\".\\\\\\\\\\\\&\"); // tested matches js querySelector\n        assertEquals(\"One\", one.text());\n\n        String q = one.cssSelector();\n        assertEquals(\"html > body > p.\\\\\\\\\\\\&\", q);\n        assertEquals(one, doc.expectFirst(q));\n    }\n\n    @Test public void cssSelectorEscapedClass() {\n        // example in https://github.com/jhy/jsoup/issues/838\n        String html = \"<div class='B\\\\&W\\\\?'><div class=test>Text</div></div>\";\n        Document parse = Jsoup.parse(html);\n        Element el = parse.expectFirst(\".test\");\n        assertEquals(\"Text\", el.text());\n\n        String q = el.cssSelector();\n        assertEquals(\"html > body > div.B\\\\\\\\\\\\&W\\\\\\\\\\\\? > div.test\", q);\n        Element found = parse.expectFirst(q);\n        assertEquals(found, el);\n    }\n\n    @Test\n    public void testClassNames() {\n        Document doc = Jsoup.parse(\"<div class=\\\"c1 c2\\\">C</div>\");\n        Element div = doc.select(\"div\").get(0);\n\n        assertEquals(\"c1 c2\", div.className());\n\n        final Set<String> set1 = div.classNames();\n        final Object[] arr1 = set1.toArray();\n        assertEquals(2, arr1.length);\n        assertEquals(\"c1\", arr1[0]);\n        assertEquals(\"c2\", arr1[1]);\n\n        // Changes to the set should not be reflected in the Elements getters\n        set1.add(\"c3\");\n        assertEquals(2, div.classNames().size());\n        assertEquals(\"c1 c2\", div.className());\n\n        // Update the class names to a fresh set\n        final Set<String> newSet = new LinkedHashSet<>(3);\n        newSet.addAll(set1);\n        newSet.add(\"c3\");\n\n        div.classNames(newSet);\n\n        assertEquals(\"c1 c2 c3\", div.className());\n\n        final Set<String> set2 = div.classNames();\n        final Object[] arr2 = set2.toArray();\n        assertEquals(3, arr2.length);\n        assertEquals(\"c1\", arr2[0]);\n        assertEquals(\"c2\", arr2[1]);\n        assertEquals(\"c3\", arr2[2]);\n    }\n\n    @Test\n    public void testHashAndEqualsAndValue() {\n        // .equals and hashcode are identity. value is content.\n\n        String doc1 = \"<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\" +\n            \"<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\";\n\n        Document doc = Jsoup.parse(doc1);\n        Elements els = doc.select(\"p\");\n\n        /*\n        for (Element el : els) {\n            System.out.println(el.hashCode() + \" - \" + el.outerHtml());\n        }\n\n        0 1534787905 - <p class=\"one\">One</p>\n        1 1534787905 - <p class=\"one\">One</p>\n        2 1539683239 - <p class=\"one\">Two</p>\n        3 1535455211 - <p class=\"two\">One</p>\n        4 1534787905 - <p class=\"one\">One</p>\n        5 1534787905 - <p class=\"one\">One</p>\n        6 1539683239 - <p class=\"one\">Two</p>\n        7 1535455211 - <p class=\"two\">One</p>\n        */\n        assertEquals(8, els.size());\n        Element e0 = els.get(0);\n        Element e1 = els.get(1);\n        Element e2 = els.get(2);\n        Element e3 = els.get(3);\n        Element e4 = els.get(4);\n        Element e5 = els.get(5);\n        Element e6 = els.get(6);\n        Element e7 = els.get(7);\n\n        assertEquals(e0, e0);\n        assertTrue(e0.hasSameValue(e1));\n        assertTrue(e0.hasSameValue(e4));\n        assertTrue(e0.hasSameValue(e5));\n        assertNotEquals(e0, e2);\n        assertFalse(e0.hasSameValue(e2));\n        assertFalse(e0.hasSameValue(e3));\n        assertFalse(e0.hasSameValue(e6));\n        assertFalse(e0.hasSameValue(e7));\n\n        assertEquals(e0.hashCode(), e0.hashCode());\n        assertNotEquals(e0.hashCode(), (e2.hashCode()));\n        assertNotEquals(e0.hashCode(), (e3).hashCode());\n        assertNotEquals(e0.hashCode(), (e6).hashCode());\n        assertNotEquals(e0.hashCode(), (e7).hashCode());\n    }\n\n    @Test\n    public void testRelativeUrls() {\n        String html = \"<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a> <a>Six</a> <a href=''>Seven</a>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/bar/\");\n        Elements els = doc.select(\"a\");\n\n        assertEquals(\"http://example.com/bar/one.html\", els.get(0).absUrl(\"href\"));\n        assertEquals(\"http://example.com/bar/two.html\", els.get(1).absUrl(\"href\"));\n        assertEquals(\"http://example.com/three.html\", els.get(2).absUrl(\"href\"));\n        assertEquals(\"http://example2.com/four/\", els.get(3).absUrl(\"href\"));\n        assertEquals(\"https://example2.com/five/\", els.get(4).absUrl(\"href\"));\n        assertEquals(\"\", els.get(5).absUrl(\"href\"));\n        assertEquals(\"http://example.com/bar/\", els.get(6).absUrl(\"href\"));\n    }\n\n    @Test\n    public void testRelativeIdnUrls() {\n        String idn = \"https://www.\u6d4b\u8bd5.\u6d4b\u8bd5/\";\n        String idnFoo = idn + \"foo.html?bar\";\n\n        Document doc = Jsoup.parse(\"<a href=''>One</a><a href='/bar.html?qux'>Two</a>\", idnFoo);\n        Elements els = doc.select(\"a\");\n        Element one = els.get(0);\n        Element two = els.get(1);\n        String hrefOne = one.absUrl(\"href\");\n        String hrefTwo = two.absUrl(\"href\");\n        assertEquals(idnFoo, hrefOne);\n        assertEquals(\"https://www.\u6d4b\u8bd5.\u6d4b\u8bd5/bar.html?qux\", hrefTwo);\n    }\n\n    @Test\n    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {\n        Document doc = new Document(\"\");\n        Element body = doc.appendElement(\"body\");\n        body.appendElement(\"div1\");\n        body.appendElement(\"div2\");\n        final Element div3 = body.appendElement(\"div3\");\n        div3.text(\"Check\");\n        final Element div4 = body.appendElement(\"div4\");\n\n        ArrayList<Element> toMove = new ArrayList<>();\n        toMove.add(div3);\n        toMove.add(div4);\n\n        body.insertChildren(0, toMove);\n\n        String result = doc.toString().replaceAll(\"\\\\s+\", \"\");\n        assertEquals(\"<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>\", result);\n    }\n\n    @Test\n    public void testHashcodeIsStableWithContentChanges() {\n        Element root = new Element(Tag.valueOf(\"root\"), \"\");\n\n        HashSet<Element> set = new HashSet<>();\n        // Add root node:\n        set.add(root);\n\n        root.appendChild(new Element(Tag.valueOf(\"a\"), \"\"));\n        assertTrue(set.contains(root));\n    }\n\n    @Test\n    public void testNamespacedElements() {\n        // Namespaces with ns:tag in HTML must be translated to ns|tag in CSS.\n        String html = \"<html><body><fb:comments /></body></html>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/bar/\");\n        Elements els = doc.select(\"fb|comments\");\n        assertEquals(1, els.size());\n        assertEquals(\"html > body > fb|comments\", els.get(0).cssSelector());\n    }\n\n    @Test\n    public void testChainedRemoveAttributes() {\n        String html = \"<a one two three four>Text</a>\";\n        Document doc = Jsoup.parse(html);\n        Element a = doc.select(\"a\").first();\n        a\n            .removeAttr(\"zero\")\n            .removeAttr(\"one\")\n            .removeAttr(\"two\")\n            .removeAttr(\"three\")\n            .removeAttr(\"four\")\n            .removeAttr(\"five\");\n        assertEquals(\"<a>Text</a>\", a.outerHtml());\n    }\n\n    @Test\n    public void testLoopedRemoveAttributes() {\n        String html = \"<a one two three four>Text</a><p foo>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        for (Element el : doc.getAllElements()) {\n            el.clearAttributes();\n        }\n\n        assertEquals(\"<a>Text</a>\\n<p>Two</p>\", doc.body().html());\n    }\n\n    @Test\n    public void testIs() {\n        String html = \"<div><p>One <a class=big>Two</a> Three</p><p>Another</p>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.select(\"p\").first();\n\n        assertTrue(p.is(\"p\"));\n        assertFalse(p.is(\"div\"));\n        assertTrue(p.is(\"p:has(a)\"));\n        assertFalse(p.is(\"a\")); // does not descend\n        assertTrue(p.is(\"p:first-child\"));\n        assertFalse(p.is(\"p:last-child\"));\n        assertTrue(p.is(\"*\"));\n        assertTrue(p.is(\"div p\"));\n\n        Element q = doc.select(\"p\").last();\n        assertTrue(q.is(\"p\"));\n        assertTrue(q.is(\"p ~ p\"));\n        assertTrue(q.is(\"p + p\"));\n        assertTrue(q.is(\"p:last-child\"));\n        assertFalse(q.is(\"p a\"));\n        assertFalse(q.is(\"a\"));\n    }\n\n    @Test\n    public void testEvalMethods() {\n        Document doc = Jsoup.parse(\"<div><p>One <a class=big>Two</a> Three</p><p>Another</p>\");\n        Element p = doc.selectFirst(QueryParser.parse((\"p\")));\n        assertEquals(\"One Three\", p.ownText());\n\n        assertTrue(p.is(QueryParser.parse(\"p\")));\n        Evaluator aEval = QueryParser.parse(\"a\");\n        assertFalse(p.is(aEval));\n\n        Element a = p.selectFirst(aEval);\n        assertEquals(\"div\", a.closest(QueryParser.parse(\"div:has( > p)\")).tagName());\n        Element body = p.closest(QueryParser.parse(\"body\"));\n        assertEquals(\"body\", body.nodeName());\n    }\n\n    @Test\n    public void testClosest() {\n        String html = \"<article>\\n\" +\n            \"  <div id=div-01>Here is div-01\\n\" +\n            \"    <div id=div-02>Here is div-02\\n\" +\n            \"      <div id=div-03>Here is div-03</div>\\n\" +\n            \"    </div>\\n\" +\n            \"  </div>\\n\" +\n            \"</article>\";\n\n        Document doc = Jsoup.parse(html);\n        Element el = doc.selectFirst(\"#div-03\");\n        assertEquals(\"Here is div-03\", el.text());\n        assertEquals(\"div-03\", el.id());\n\n        assertEquals(\"div-02\", el.closest(\"#div-02\").id());\n        assertEquals(el, el.closest(\"div div\")); // closest div in a div is itself\n        assertEquals(\"div-01\", el.closest(\"article > div\").id());\n        assertEquals(\"article\", el.closest(\":not(div)\").tagName());\n        assertNull(el.closest(\"p\"));\n    }\n\n    @Test\n    public void elementByTagName() {\n        Element a = new Element(\"P\");\n        assertEquals(\"P\", a.tagName());\n    }\n\n    @Test\n    public void testChildrenElements() {\n        String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.select(\"div\").first();\n        Element p = doc.select(\"p\").first();\n        Element span = doc.select(\"span\").first();\n        Element foo = doc.select(\"foo\").first();\n        Element img = doc.select(\"img\").first();\n\n        Elements docChildren = div.children();\n        assertEquals(2, docChildren.size());\n        assertEquals(\"<p><a>One</a></p>\", docChildren.get(0).outerHtml());\n        assertEquals(\"<p><a>Two</a></p>\", docChildren.get(1).outerHtml());\n        assertEquals(3, div.childNodes().size());\n        assertEquals(\"Three\", div.childNodes().get(2).outerHtml());\n\n        assertEquals(1, p.children().size());\n        assertEquals(\"One\", p.children().text());\n\n        assertEquals(0, span.children().size());\n        assertEquals(1, span.childNodes().size());\n        assertEquals(\"Four\", span.childNodes().get(0).outerHtml());\n\n        assertEquals(0, foo.children().size());\n        assertEquals(0, foo.childNodes().size());\n        assertEquals(0, img.children().size());\n        assertEquals(0, img.childNodes().size());\n    }\n\n    @Test\n    public void testShadowElementsAreUpdated() {\n        String html = \"<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.select(\"div\").first();\n        Elements els = div.children();\n        List<Node> nodes = div.childNodes();\n\n        assertEquals(2, els.size()); // the two Ps\n        assertEquals(3, nodes.size()); // the \"Three\" textnode\n\n        Element p3 = new Element(\"p\").text(\"P3\");\n        Element p4 = new Element(\"p\").text(\"P4\");\n        div.insertChildren(1, p3);\n        div.insertChildren(3, p4);\n        Elements els2 = div.children();\n\n        // first els should not have changed\n        assertEquals(2, els.size());\n        assertEquals(4, els2.size());\n\n        assertEquals(\"<p><a>One</a></p>\\n\" +\n            \"<p>P3</p>\\n\" +\n            \"<p><a>Two</a></p>\\n\" +\n            \"<p>P4</p>Three\", div.html());\n        assertEquals(\"P3\", els2.get(1).text());\n        assertEquals(\"P4\", els2.get(3).text());\n\n        p3.after(\"<span>Another</span\");\n\n        Elements els3 = div.children();\n        assertEquals(5, els3.size());\n        assertEquals(\"span\", els3.get(2).tagName());\n        assertEquals(\"Another\", els3.get(2).text());\n\n        assertEquals(\"<p><a>One</a></p>\\n\" +\n            \"<p>P3</p><span>Another</span>\\n\" +\n            \"<p><a>Two</a></p>\\n\" +\n            \"<p>P4</p>Three\", div.html());\n    }\n\n    @Test\n    public void classNamesAndAttributeNameIsCaseInsensitive() {\n        String html = \"<p Class='SomeText AnotherText'>One</p>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"SomeText AnotherText\", p.className());\n        assertTrue(p.classNames().contains(\"SomeText\"));\n        assertTrue(p.classNames().contains(\"AnotherText\"));\n        assertTrue(p.hasClass(\"SomeText\"));\n        assertTrue(p.hasClass(\"sometext\"));\n        assertTrue(p.hasClass(\"AnotherText\"));\n        assertTrue(p.hasClass(\"anothertext\"));\n\n        Element p1 = doc.select(\".SomeText\").first();\n        Element p2 = doc.select(\".sometext\").first();\n        Element p3 = doc.select(\"[class=SomeText AnotherText]\").first();\n        Element p4 = doc.select(\"[Class=SomeText AnotherText]\").first();\n        Element p5 = doc.select(\"[class=sometext anothertext]\").first();\n        Element p6 = doc.select(\"[class=SomeText AnotherText]\").first();\n        Element p7 = doc.select(\"[class^=sometext]\").first();\n        Element p8 = doc.select(\"[class$=nothertext]\").first();\n        Element p9 = doc.select(\"[class^=sometext]\").first();\n        Element p10 = doc.select(\"[class$=AnotherText]\").first();\n\n        assertEquals(\"One\", p1.text());\n        assertEquals(p1, p2);\n        assertEquals(p1, p3);\n        assertEquals(p1, p4);\n        assertEquals(p1, p5);\n        assertEquals(p1, p6);\n        assertEquals(p1, p7);\n        assertEquals(p1, p8);\n        assertEquals(p1, p9);\n        assertEquals(p1, p10);\n    }\n\n    @Test\n    public void testAppendTo() {\n        String parentHtml = \"<div class='a'></div>\";\n        String childHtml = \"<div class='b'></div><p>Two</p>\";\n\n        Document parentDoc = Jsoup.parse(parentHtml);\n        Element parent = parentDoc.body();\n        Document childDoc = Jsoup.parse(childHtml);\n\n        Element div = childDoc.select(\"div\").first();\n        Element p = childDoc.select(\"p\").first();\n        Element appendTo1 = div.appendTo(parent);\n        assertEquals(div, appendTo1);\n\n        Element appendTo2 = p.appendTo(div);\n        assertEquals(p, appendTo2);\n\n        assertEquals(\"<div class=\\\"a\\\"></div>\\n<div class=\\\"b\\\">\\n <p>Two</p>\\n</div>\", parentDoc.body().html());\n        assertEquals(\"\", childDoc.body().html()); // got moved out\n    }\n\n    @Test\n    public void testNormalizesNbspInText() {\n        String escaped = \"You can't always get what you&nbsp;want.\";\n        String withNbsp = \"You can't always get what you\u00a0want.\"; // there is an nbsp char in there\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        assertEquals(\"You can't always get what you want.\", p.text()); // text is normalized\n\n        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml()); // html / whole text keeps &nbsp;\n        assertEquals(withNbsp, p.textNodes().get(0).getWholeText());\n        assertEquals(160, withNbsp.charAt(29));\n\n        Element matched = doc.select(\"p:contains(get what you want)\").first();\n        assertEquals(\"p\", matched.nodeName());\n        assertTrue(matched.is(\":containsOwn(get what you want)\"));\n    }\n\n    @Test\n    public void testNormalizesInvisiblesInText() {\n        String escaped = \"This&shy;is&#x200b;one&shy;long&shy;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u00ADlong\\u00ADword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        assertEquals(\"Thisisonelongword\", p.text()); // text is normalized\n        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml()); // html / whole text keeps &shy etc;\n        assertEquals(decoded, p.textNodes().get(0).getWholeText());\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        assertEquals(\"p\", matched.nodeName());\n        assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));\n\n    }\n\n    @Test\n    public void testRemoveBeforeIndex() {\n        Document doc = Jsoup.parse(\n            \"<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>\",\n            \"\");\n        Element body = doc.select(\"body\").first();\n        Elements elems = body.select(\"p:matchesOwn(XXX)\");\n        Element xElem = elems.first();\n        Elements beforeX = xElem.parent().getElementsByIndexLessThan(xElem.elementSiblingIndex());\n\n        for (Element p : beforeX) {\n            p.remove();\n        }\n\n        assertEquals(\"<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>\", TextUtil.stripNewlines(body.outerHtml()));\n    }\n\n    @Test\n    public void testRemoveAfterIndex() {\n        Document doc2 = Jsoup.parse(\n            \"<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>\",\n            \"\");\n        Element body = doc2.select(\"body\").first();\n        Elements elems = body.select(\"p:matchesOwn(XXX)\");\n        Element xElem = elems.first();\n        Elements afterX = xElem.parent().getElementsByIndexGreaterThan(xElem.elementSiblingIndex());\n\n        for (Element p : afterX) {\n            p.remove();\n        }\n\n        assertEquals(\"<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>\", TextUtil.stripNewlines(body.outerHtml()));\n    }\n\n    @Test\n    public void whiteSpaceClassElement() {\n        Tag tag = Tag.valueOf(\"a\");\n        Attributes attribs = new Attributes();\n        Element el = new Element(tag, \"\", attribs);\n\n        attribs.put(\"class\", \"abc \");\n        boolean hasClass = el.hasClass(\"ab\");\n        assertFalse(hasClass);\n    }\n\n    @Test\n    public void testNextElementSiblingAfterClone() {\n        // via https://github.com/jhy/jsoup/issues/951\n        String html = \"<!DOCTYPE html><html lang=\\\"en\\\"><head></head><body><div>Initial element</div></body></html>\";\n        String expectedText = \"New element\";\n        String cloneExpect = \"New element in clone\";\n\n        Document original = Jsoup.parse(html);\n        Document clone = original.clone();\n\n        Element originalElement = original.body().child(0);\n        originalElement.after(\"<div>\" + expectedText + \"</div>\");\n        Element originalNextElementSibling = originalElement.nextElementSibling();\n        Element originalNextSibling = (Element) originalElement.nextSibling();\n        assertEquals(expectedText, originalNextElementSibling.text());\n        assertEquals(expectedText, originalNextSibling.text());\n\n        Element cloneElement = clone.body().child(0);\n        cloneElement.after(\"<div>\" + cloneExpect + \"</div>\");\n        Element cloneNextElementSibling = cloneElement.nextElementSibling();\n        Element cloneNextSibling = (Element) cloneElement.nextSibling();\n        assertEquals(cloneExpect, cloneNextElementSibling.text());\n        assertEquals(cloneExpect, cloneNextSibling.text());\n    }\n\n    @Test\n    public void testRemovingEmptyClassAttributeWhenLastClassRemoved() {\n        // https://github.com/jhy/jsoup/issues/947\n        Document doc = Jsoup.parse(\"<img class=\\\"one two\\\" />\");\n        Element img = doc.select(\"img\").first();\n        img.removeClass(\"one\");\n        img.removeClass(\"two\");\n        assertFalse(doc.body().html().contains(\"class=\\\"\\\"\"));\n    }\n\n    @Test\n    public void booleanAttributeOutput() {\n        Document doc = Jsoup.parse(\"<img src=foo noshade='' nohref async=async autofocus=false>\");\n        Element img = doc.selectFirst(\"img\");\n\n        assertEquals(\"<img src=\\\"foo\\\" noshade nohref async autofocus=\\\"false\\\">\", img.outerHtml());\n    }\n\n    @Test\n    public void textHasSpaceAfterBlockTags() {\n        Document doc = Jsoup.parse(\"<div>One</div>Two\");\n        assertEquals(\"One Two\", doc.text());\n    }\n\n    @Test\n    public void textHasSpaceBetweenDivAndCenterTags() {\n        Document doc = Jsoup.parse(\"<div>One</div><div>Two</div><center>Three</center><center>Four</center>\");\n        assertEquals(\"One Two Three Four\", doc.text());\n    }\n\n    @Test\n    public void testNextElementSiblings() {\n        Document doc = Jsoup.parse(\"<ul id='ul'>\" +\n            \"<li id='a'>a</li>\" +\n            \"<li id='b'>b</li>\" +\n            \"<li id='c'>c</li>\" +\n            \"</ul> Not An Element but a node\" +\n            \"<div id='div'>\" +\n            \"<li id='d'>d</li>\" +\n            \"</div>\");\n\n        Element element = doc.getElementById(\"a\");\n        Elements elementSiblings = element.nextElementSiblings();\n        assertNotNull(elementSiblings);\n        assertEquals(2, elementSiblings.size());\n        assertEquals(\"b\", elementSiblings.get(0).id());\n        assertEquals(\"c\", elementSiblings.get(1).id());\n\n        Element element1 = doc.getElementById(\"b\");\n        List<Element> elementSiblings1 = element1.nextElementSiblings();\n        assertNotNull(elementSiblings1);\n        assertEquals(1, elementSiblings1.size());\n        assertEquals(\"c\", elementSiblings1.get(0).id());\n\n        Element element2 = doc.getElementById(\"c\");\n        List<Element> elementSiblings2 = element2.nextElementSiblings();\n        assertEquals(0, elementSiblings2.size());\n\n        Element ul = doc.getElementById(\"ul\");\n        List<Element> elementSiblings3 = ul.nextElementSiblings();\n        assertNotNull(elementSiblings3);\n        assertEquals(1, elementSiblings3.size());\n        assertEquals(\"div\", elementSiblings3.get(0).id());\n\n        Element div = doc.getElementById(\"div\");\n        List<Element> elementSiblings4 = div.nextElementSiblings();\n        assertEquals(0, elementSiblings4.size());\n    }\n\n    @Test\n    public void testPreviousElementSiblings() {\n        Document doc = Jsoup.parse(\"<ul id='ul'>\" +\n            \"<li id='a'>a</li>\" +\n            \"<li id='b'>b</li>\" +\n            \"<li id='c'>c</li>\" +\n            \"</ul>\" +\n            \"<div id='div'>\" +\n            \"<li id='d'>d</li>\" +\n            \"</div>\");\n\n        Element element = doc.getElementById(\"b\");\n        Elements elementSiblings = element.previousElementSiblings();\n        assertNotNull(elementSiblings);\n        assertEquals(1, elementSiblings.size());\n        assertEquals(\"a\", elementSiblings.get(0).id());\n\n        Element element1 = doc.getElementById(\"a\");\n        List<Element> elementSiblings1 = element1.previousElementSiblings();\n        assertEquals(0, elementSiblings1.size());\n\n        Element element2 = doc.getElementById(\"c\");\n        List<Element> elementSiblings2 = element2.previousElementSiblings();\n        assertNotNull(elementSiblings2);\n        assertEquals(2, elementSiblings2.size());\n        assertEquals(\"b\", elementSiblings2.get(0).id());\n        assertEquals(\"a\", elementSiblings2.get(1).id());\n\n        Element ul = doc.getElementById(\"ul\");\n        List<Element> elementSiblings3 = ul.previousElementSiblings();\n        assertEquals(0, elementSiblings3.size());\n    }\n\n    @Test\n    public void testClearAttributes() {\n        Element el = new Element(\"a\").attr(\"href\", \"http://example.com\").text(\"Hello\");\n        assertEquals(\"<a href=\\\"http://example.com\\\">Hello</a>\", el.outerHtml());\n        Element el2 = el.clearAttributes(); // really just force testing the return type is Element\n        assertSame(el, el2);\n        assertEquals(\"<a>Hello</a>\", el2.outerHtml());\n    }\n\n    @Test\n    public void testRemoveAttr() {\n        Element el = new Element(\"a\")\n            .attr(\"href\", \"http://example.com\")\n            .attr(\"id\", \"1\")\n            .text(\"Hello\");\n        assertEquals(\"<a href=\\\"http://example.com\\\" id=\\\"1\\\">Hello</a>\", el.outerHtml());\n        Element el2 = el.removeAttr(\"href\"); // really just force testing the return type is Element\n        assertSame(el, el2);\n        assertEquals(\"<a id=\\\"1\\\">Hello</a>\", el2.outerHtml());\n    }\n\n    @Test\n    public void testRoot() {\n        Element el = new Element(\"a\");\n        el.append(\"<span>Hello</span>\");\n        assertEquals(\"<a><span>Hello</span></a>\", el.outerHtml());\n        Element span = el.selectFirst(\"span\");\n        assertNotNull(span);\n        Element el2 = span.root();\n        assertSame(el, el2);\n\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three\");\n        Element div = doc.selectFirst(\"div\");\n        assertSame(doc, div.root());\n        assertSame(doc, div.ownerDocument());\n    }\n\n    @Test\n    public void testTraverse() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three\");\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        final AtomicInteger counter = new AtomicInteger(0);\n\n        Element div2 = div.traverse(new NodeVisitor() {\n\n            @Override\n            public void head(Node node, int depth) {\n                counter.incrementAndGet();\n            }\n\n            @Override\n            public void tail(Node node, int depth) {\n\n            }\n        });\n\n        assertEquals(7, counter.get());\n        assertEquals(div2, div);\n    }\n\n    @Test void testTraverseLambda() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three\");\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        final AtomicInteger counter = new AtomicInteger(0);\n\n        Element div2 = div.traverse((node, depth) -> counter.incrementAndGet());\n\n        assertEquals(7, counter.get());\n        assertEquals(div2, div);\n    }\n\n    @Test\n    public void testFilterCallReturnsElement() {\n        // doesn't actually test the filter so much as the return type for Element. See node.nodeFilter for an actual test\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three\");\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        Element div2 = div.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        });\n\n        assertSame(div, div2);\n    }\n\n    @Test void testFilterAsLambda() {\n        Document doc = Jsoup.parse(\"<div><p>One<p id=2>Two<p>Three\");\n        doc.filter((node, depth) -> node.attr(\"id\").equals(\"2\")\n            ? NodeFilter.FilterResult.REMOVE\n            : NodeFilter.FilterResult.CONTINUE);\n\n        assertEquals(\"<div><p>One</p><p>Three</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test void testForEach() {\n        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div><div id=1>Gone<p></div>\");\n        doc.forEach(el -> {\n            if (el.id().equals(\"1\"))\n                el.remove();\n            else if (el.text().equals(\"There\")) {\n                el.text(\"There Now\");\n                el.append(\"<p>Another</p>\");\n            }\n        });\n        assertEquals(\"<div><p>Hello</p></div><div>There Now<p>Another</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void doesntDeleteZWJWhenNormalizingText() {\n        String text = \"\\uD83D\\uDC69\\u200D\\uD83D\\uDCBB\\uD83E\\uDD26\\uD83C\\uDFFB\\u200D\\u2642\\uFE0F\";\n\n        Document doc = Jsoup.parse(\"<p>\" + text + \"</p><div>One&zwj;Two</div>\");\n        Element p = doc.selectFirst(\"p\");\n        Element d = doc.selectFirst(\"div\");\n\n        assertEquals(12, p.text().length());\n        assertEquals(text, p.text());\n        assertEquals(7, d.text().length());\n        assertEquals(\"One\\u200DTwo\", d.text());\n        Element found = doc.selectFirst(\"div:contains(One\\u200DTwo)\");\n        assertTrue(found.hasSameValue(d));\n    }\n\n    @Test\n    public void testReparentSeperateNodes() {\n        String html = \"<div><p>One<p>Two\";\n        Document doc = Jsoup.parse(html);\n        Element new1 = new Element(\"p\").text(\"Three\");\n        Element new2 = new Element(\"p\").text(\"Four\");\n\n        doc.body().insertChildren(-1, new1, new2);\n        assertEquals(\"<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>\", TextUtil.stripNewlines(doc.body().html()));\n\n        // note that these get moved from the above - as not copied\n        doc.body().insertChildren(0, new1, new2);\n        assertEquals(\"<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        doc.body().insertChildren(0, new2.clone(), new1.clone());\n        assertEquals(\"<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n\n        // shifted to end\n        doc.body().appendChild(new1);\n        assertEquals(\"<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>\", TextUtil.stripNewlines(doc.body().html()));\n    }\n\n    @Test\n    public void testNotActuallyAReparent() {\n        // prep\n        String html = \"<div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.selectFirst(\"div\");\n        Element new1 = new Element(\"p\").text(\"One\");\n        Element new2 = new Element(\"p\").text(\"Two\");\n        div.addChildren(new1, new2);\n\n        assertEquals(\"<div><p>One</p><p>Two</p></div>\", TextUtil.stripNewlines(div.outerHtml()));\n\n        // and the issue setup:\n        Element new3 = new Element(\"p\").text(\"Three\");\n        Element wrap = new Element(\"nav\");\n        wrap.addChildren(0, new1, new3);\n\n        assertEquals(\"<nav><p>One</p><p>Three</p></nav>\", TextUtil.stripNewlines(wrap.outerHtml()));\n        div.addChildren(wrap);\n        // now should be that One moved into wrap, leaving Two in div.\n\n        assertEquals(\"<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>\", TextUtil.stripNewlines(div.outerHtml()));\n        assertEquals(\"<div><p>Two</p><nav><p>One</p><p>Three</p></nav></div>\", TextUtil.stripNewlines(div.outerHtml()));\n    }\n\n    @Test\n    public void testChildSizeWithMixedContent() {\n        Document doc = Jsoup.parse(\"<table><tbody>\\n<tr>\\n<td>15:00</td>\\n<td>sport</td>\\n</tr>\\n</tbody></table>\");\n        Element row = doc.selectFirst(\"table tbody tr\");\n        assertEquals(2, row.childrenSize());\n        assertEquals(5, row.childNodeSize());\n    }\n\n    @Test\n    public void isBlock() {\n        String html = \"<div><p><span>Hello</span>\";\n        Document doc = Jsoup.parse(html);\n        assertTrue(doc.selectFirst(\"div\").isBlock());\n        assertTrue(doc.selectFirst(\"p\").isBlock());\n        assertFalse(doc.selectFirst(\"span\").isBlock());\n    }\n\n    @Test\n    public void testScriptTextHtmlSetAsData() {\n        String src = \"var foo = 5 < 2;\\nvar bar = 1 && 2;\";\n        String html = \"<script>\" + src + \"</script>\";\n        Document doc = Jsoup.parse(html);\n        Element el = doc.selectFirst(\"script\");\n        assertNotNull(el);\n\n        validateScriptContents(src, el);\n\n        src = \"var foo = 4 < 2;\\nvar bar > 1 && 2;\";\n        el.html(src);\n        validateScriptContents(src, el);\n\n        // special case for .text (in HTML; in XML will just be regular text)\n        el.text(src);\n        validateScriptContents(src, el);\n\n        // XML, no special treatment, get escaped correctly\n        Document xml = Parser.xmlParser().parseInput(html, \"\");\n        Element xEl = xml.selectFirst(\"script\");\n        assertNotNull(xEl);\n        src = \"var foo = 5 < 2;\\nvar bar = 1 && 2;\";\n        String escaped = \"var foo = 5 &lt; 2;\\nvar bar = 1 &amp;&amp; 2;\";\n        validateXmlScriptContents(xEl);\n        xEl.text(src);\n        validateXmlScriptContents(xEl);\n        xEl.html(src);\n        validateXmlScriptContents(xEl);\n\n        assertEquals(\"<script>var foo = 4 < 2;\\nvar bar > 1 && 2;</script>\", el.outerHtml());\n        assertEquals(\"<script>\" + escaped + \"</script>\", xEl.outerHtml()); // escaped in xml as no special treatment\n\n    }\n\n    @Test\n    public void testShallowCloneToString() {\n        // https://github.com/jhy/jsoup/issues/1410\n        Document doc = Jsoup.parse(\"<p><i>Hello</i></p>\");\n        Element p = doc.selectFirst(\"p\");\n        Element i = doc.selectFirst(\"i\");\n        String pH = p.shallowClone().toString();\n        String iH = i.shallowClone().toString();\n\n        assertEquals(\"<p></p>\", pH); // shallow, so no I\n        assertEquals(\"<i></i>\", iH);\n\n        assertEquals(p.outerHtml(), p.toString());\n        assertEquals(i.outerHtml(), i.toString());\n    }\n\n    @Test\n    public void styleHtmlRoundTrips() {\n        String styleContents = \"foo < bar > qux {color:white;}\";\n        String html = \"<head><style>\" + styleContents + \"</style></head>\";\n        Document doc = Jsoup.parse(html);\n\n        Element head = doc.head();\n        Element style = head.selectFirst(\"style\");\n        assertNotNull(style);\n        assertEquals(styleContents, style.html());\n        style.html(styleContents);\n        assertEquals(styleContents, style.html());\n        assertEquals(\"\", style.text());\n        style.text(styleContents); // pushes the HTML, not the Text\n        assertEquals(\"\", style.text());\n        assertEquals(styleContents, style.html());\n    }\n\n    @Test\n    public void moveChildren() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div><div></div>\");\n        Elements divs = doc.select(\"div\");\n        Element a = divs.get(0);\n        Element b = divs.get(1);\n\n        b.insertChildren(-1, a.childNodes());\n\n        assertEquals(\"<div></div>\\n<div>\\n <p>One</p>\\n <p>Two</p>\\n <p>Three</p>\\n</div>\",\n            doc.body().html());\n    }\n\n    @Test\n    public void moveChildrenToOuter() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div><div></div>\");\n        Elements divs = doc.select(\"div\");\n        Element a = divs.get(0);\n        Element b = doc.body();\n\n        b.insertChildren(-1, a.childNodes());\n\n        assertEquals(\"<div></div>\\n<div></div>\\n<p>One</p>\\n<p>Two</p>\\n<p>Three</p>\",\n            doc.body().html());\n    }\n\n    @Test\n    public void appendChildren() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div><div><p>Four</div>\");\n        Elements divs = doc.select(\"div\");\n        Element a = divs.get(0);\n        Element b = divs.get(1);\n\n        b.appendChildren(a.childNodes());\n\n        assertEquals(\"<div></div>\\n<div>\\n <p>Four</p>\\n <p>One</p>\\n <p>Two</p>\\n <p>Three</p>\\n</div>\",\n            doc.body().html());\n    }\n\n    @Test\n    public void prependChildren() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div><div><p>Four</div>\");\n        Elements divs = doc.select(\"div\");\n        Element a = divs.get(0);\n        Element b = divs.get(1);\n\n        b.prependChildren(a.childNodes());\n\n        assertEquals(\"<div></div>\\n<div>\\n <p>One</p>\\n <p>Two</p>\\n <p>Three</p>\\n <p>Four</p>\\n</div>\",\n            doc.body().html());\n    }\n\n    @Test\n    public void loopMoveChildren() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div><div><p>Four</div>\");\n        Elements divs = doc.select(\"div\");\n        Element a = divs.get(0);\n        Element b = divs.get(1);\n\n        Element outer = b.parent();\n        assertNotNull(outer);\n        for (Node node : a.childNodes()) {\n            outer.appendChild(node);\n        }\n\n        assertEquals(\"<div></div>\\n<div>\\n <p>Four</p>\\n</div>\\n<p>One</p>\\n<p>Two</p>\\n<p>Three</p>\",\n            doc.body().html());\n    }\n\n    @Test\n    public void accessorsDoNotVivifyAttributes() throws NoSuchFieldException, IllegalAccessException {\n        // internally, we don't want to create empty Attribute objects unless actually used for something\n        Document doc = Jsoup.parse(\"<div><p><a href=foo>One</a>\");\n        Element div = doc.selectFirst(\"div\");\n        Element p = doc.selectFirst(\"p\");\n        Element a = doc.selectFirst(\"a\");\n\n        // should not create attributes\n        assertEquals(\"\", div.attr(\"href\"));\n        p.removeAttr(\"href\");\n\n        Elements hrefs = doc.select(\"[href]\");\n        assertEquals(1, hrefs.size());\n\n        assertFalse(div.hasAttributes());\n        assertFalse(p.hasAttributes());\n        assertTrue(a.hasAttributes());\n    }\n\n    @Test\n    public void childNodesAccessorDoesNotVivify() {\n        Document doc = Jsoup.parse(\"<p></p>\");\n        Element p = doc.selectFirst(\"p\");\n        assertFalse(p.hasChildNodes());\n\n        assertEquals(0, p.childNodeSize());\n        assertEquals(0, p.childrenSize());\n\n        List<Node> childNodes = p.childNodes();\n        assertEquals(0, childNodes.size());\n\n        Elements children = p.children();\n        assertEquals(0, children.size());\n\n        assertFalse(p.hasChildNodes());\n    }\n\n    @Test void emptyChildrenElementsIsModifiable() {\n        // using unmodifiable empty in childElementList as short circuit, but people may be modifying Elements.\n        Element p = new Element(\"p\");\n        Elements els = p.children();\n        assertEquals(0, els.size());\n        els.add(new Element(\"a\"));\n        assertEquals(1, els.size());\n    }\n\n    @Test public void attributeSizeDoesNotAutoVivify() {\n        Document doc = Jsoup.parse(\"<p></p>\");\n        Element p = doc.selectFirst(\"p\");\n        assertNotNull(p);\n        assertFalse(p.hasAttributes());\n        assertEquals(0, p.attributesSize());\n        assertFalse(p.hasAttributes());\n\n        p.attr(\"foo\", \"bar\");\n        assertEquals(1, p.attributesSize());\n        assertTrue(p.hasAttributes());\n\n        p.removeAttr(\"foo\");\n        assertEquals(0, p.attributesSize());\n    }\n\n    @Test void clonedElementsHaveOwnerDocsAndIndependentSettings() {\n        // https://github.com/jhy/jsoup/issues/763\n        Document doc = Jsoup.parse(\"<div>Text</div><div>Two</div>\");\n        doc.outputSettings().prettyPrint(false);\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        Node text = div.childNode(0);\n        assertNotNull(text);\n\n        Element divClone = div.clone();\n        Document docClone = divClone.ownerDocument();\n        assertNotNull(docClone);\n        assertFalse(docClone.outputSettings().prettyPrint());\n        assertNotSame(doc, docClone);\n        assertSame(docClone, divClone.childNode(0).ownerDocument());\n        // the cloned text has same owner doc as the cloned div\n\n        doc.outputSettings().prettyPrint(true);\n        assertTrue(doc.outputSettings().prettyPrint());\n        assertFalse(docClone.outputSettings().prettyPrint());\n        assertEquals(1, docClone.children().size()); // check did not get the second div as the owner's children\n        assertEquals(divClone, docClone.child(0)); // note not the head or the body -- not normalized\n    }\n\n    private static Stream<Document.OutputSettings> testOutputSettings() {\n        return Stream.of(\n            new Document.OutputSettings().prettyPrint(true).indentAmount(4),\n            new Document.OutputSettings().prettyPrint(true).indentAmount(1),\n            new Document.OutputSettings().prettyPrint(true).indentAmount(4).outline(true),\n            new Document.OutputSettings().prettyPrint(false)\n        );\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"testOutputSettings\")\n    void prettySerializationRoundTrips(Document.OutputSettings settings) {\n        // https://github.com/jhy/jsoup/issues/1688\n        // tests that repeated html() and parse() does not accumulate errant spaces / newlines\n        Document doc = Jsoup.parse(\"<div>\\nFoo\\n<p>\\nBar\\nqux</p></div>\\n<script>\\n alert('Hello!');\\n</script>\");\n        doc.outputSettings(settings);\n        String html = doc.html();\n        Document doc2 = Jsoup.parse(html);\n        doc2.outputSettings(settings);\n        String html2 = doc2.html();\n\n        assertEquals(html, html2);\n    }\n\n    @Test void prettyPrintScriptsDoesNotGrowOnRepeat() {\n        Document doc = Jsoup.parse(\"<div>\\nFoo\\n<p>\\nBar\\nqux</p></div>\\n<script>\\n alert('Hello!');\\n</script>\");\n        Document.OutputSettings settings = doc.outputSettings();\n        settings\n            .prettyPrint(true)\n            .outline(true)\n            .indentAmount(4)\n            ;\n\n        String html = doc.html();\n        Document doc2 = Jsoup.parse(html);\n        doc2.outputSettings(settings);\n        String html2 = doc2.html();\n        assertEquals(html, html2);\n    }\n\n    @Test void elementBrText() {\n        // testcase for https://github.com/jhy/jsoup/issues/1437\n        String html = \"<p>Hello<br>World</p>\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().prettyPrint(false); // otherwise html serializes as Hello<br>\\n World.\n        Element p = doc.select(\"p\").first();\n        assertNotNull(p);\n        assertEquals(html, p.outerHtml());\n        assertEquals(\"Hello World\", p.text());\n        assertEquals(\"Hello\\nWorld\", p.wholeText());\n    }\n\n    @Test void wrapTextAfterBr() {\n        // https://github.com/jhy/jsoup/issues/1858\n        String html = \"<p>Hello<br>there<br>now.</p>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<p>Hello<br>\\n there<br>\\n now.</p>\", doc.body().html());\n    }\n\n    @Test void prettyprintBrInBlock() {\n        String html = \"<div><br> </div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<div>\\n <br>\\n</div>\", doc.body().html()); // not div\\n br\\n \\n/div\n    }\n\n    @Test void prettyprintBrWhenNotFirstChild() {\n        // https://github.com/jhy/jsoup/issues/1911\n        String h = \"<div><p><br>Foo</p><br></div>\";\n        Document doc = Jsoup.parse(h);\n        assertEquals(\"<div>\\n\" +\n            \" <p><br>\\n  Foo</p>\\n\" +\n            \" <br>\\n\" +\n            \"</div>\", doc.body().html());\n        // br gets wrapped if in div, but not in p (block vs inline), but always wraps after\n    }\n\n    @Test void preformatFlowsToChildTextNodes() {\n        // https://github.com/jhy/jsoup/issues/1776\n        String html = \"<div><pre>One\\n<span>\\nTwo</span>\\n <span>  \\nThree</span>\\n <span>Four <span>Five</span>\\n  Six\\n</pre>\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().indentAmount(2).prettyPrint(true);\n\n        Element div = doc.selectFirst(\"div\");\n        assertNotNull(div);\n        String actual = div.outerHtml();\n        String expect = \"<div>\\n\" +\n            \"  <pre>One\\n\" +\n            \"<span>\\n\" +\n            \"Two</span>\\n\" +\n            \" <span>  \\n\" +\n            \"Three</span>\\n\" +\n            \" <span>Four <span>Five</span>\\n\" +\n            \"  Six\\n\" +\n            \"</span></pre>\\n\" +\n            \"</div>\";\n        assertEquals(expect, actual);\n\n        String expectText = \"One\\n\" +\n            \"\\n\" +\n            \"Two\\n\" +\n            \"   \\n\" +\n            \"Three\\n\" +\n            \" Four Five\\n\" +\n            \"  Six\\n\";\n        assertEquals(expectText, div.wholeText());\n\n        String expectOwn = \"One\\n\" +\n            \"\\n\" +\n            \" \\n\" +\n            \" \";\n        assertEquals(expectOwn, div.child(0).wholeOwnText());\n    }\n\n    @Test void inlineInBlockShouldIndent() {\n        // was inconsistent between <div>\\n<span> and <div><span> - former would print inline, latter would wrap(!)\n        String html = \"<div>One <span>Hello</span><span>!</span></div><div>\\n<span>There</span></div><div> <span>Now</span></div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\n            \"<div>\\n\" +\n                \" One <span>Hello</span><span>!</span>\\n\" +\n                \"</div>\\n\" +\n                \"<div>\\n\" +\n                \" <span>There</span>\\n\" +\n                \"</div>\\n\" +\n                \"<div>\\n\" +\n                \" <span>Now</span>\\n\" +\n                \"</div>\",\n            doc.body().html());\n    }\n\n    @Test void testExpectFirst() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two <span>Three</span> <span>Four</span>\");\n\n        Element span = doc.expectFirst(\"span\");\n        assertEquals(\"Three\", span.text());\n\n        assertNull(doc.selectFirst(\"div\"));\n        boolean threw = false;\n        try {\n            Element div = doc.expectFirst(\"div\");\n        } catch (IllegalArgumentException e) {\n            threw = true;\n        }\n        assertTrue(threw);\n    }\n\n    @Test void testExpectFirstMessage() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two <span>Three</span> <span>Four</span>\");\n        boolean threw = false;\n        Element p = doc.expectFirst(\"P\");\n        try {\n            Element span = p.expectFirst(\"span.doesNotExist\");\n        } catch (ValidationException e) {\n            threw = true;\n            assertEquals(\"No elements matched the query 'span.doesNotExist' on element 'p'.\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n\n    @Test void testExpectFirstMessageDoc() {\n        Document doc = Jsoup.parse(\"<p>One</p><p>Two <span>Three</span> <span>Four</span>\");\n        boolean threw = false;\n        Element p = doc.expectFirst(\"P\");\n        try {\n            Element span = doc.expectFirst(\"span.doesNotExist\");\n        } catch (ValidationException e) {\n            threw = true;\n            assertEquals(\"No elements matched the query 'span.doesNotExist' in the document.\", e.getMessage());\n        }\n        assertTrue(threw);\n    }\n\n    @Test void spanRunsMaintainSpace() {\n        // https://github.com/jhy/jsoup/issues/1787\n        Document doc = Jsoup.parse(\"<p><span>One</span>\\n<span>Two</span>\\n<span>Three</span></p>\");\n        String text = \"One Two Three\";\n        Element body = doc.body();\n        assertEquals(text, body.text());\n\n        Element p = doc.expectFirst(\"p\");\n        String html = p.html();\n        p.html(html);\n        assertEquals(text, body.text());\n\n        assertEquals(\"<p><span>One</span> <span>Two</span> <span>Three</span></p>\", body.html());\n    }\n\n    @Test void doctypeIsPrettyPrinted() {\n        // resolves underlying issue raised in https://github.com/jhy/jsoup/pull/1664\n        Document doc1 = Jsoup.parse(\"<!--\\nlicense\\n-->\\n \\n<!doctype html>\\n<html>\");\n        Document doc2 = Jsoup.parse(\"\\n  <!doctype html><html>\");\n        Document doc3 = Jsoup.parse(\"<!doctype html>\\n<html>\");\n        Document doc4 = Jsoup.parse(\"\\n<!doctype html>\\n<html>\");\n        Document doc5 = Jsoup.parse(\"\\n<!--\\n comment \\n -->  <!doctype html>\\n<html>\");\n        Document doc6 = Jsoup.parse(\"<!--\\n comment \\n -->  <!doctype html>\\n<html>\");\n\n        assertEquals(\"<!--\\nlicense\\n-->\\n<!doctype html>\\n<html>\\n <head></head>\\n <body></body>\\n</html>\", doc1.html());\n        doc1.outputSettings().prettyPrint(false);\n        assertEquals(\"<!--\\nlicense\\n--><!doctype html>\\n<html><head></head><body></body></html>\", doc1.html());\n        // note that the whitespace between the comment and the doctype is not retained, in Initial state\n\n        assertEquals(\"<!doctype html>\\n<html>\\n <head></head>\\n <body></body>\\n</html>\", doc2.html());\n        assertEquals(\"<!doctype html>\\n<html>\\n <head></head>\\n <body></body>\\n</html>\", doc3.html());\n        assertEquals(\"<!doctype html>\\n<html>\\n <head></head>\\n <body></body>\\n</html>\", doc4.html());\n        assertEquals(\"<!--\\n comment \\n -->\\n<!doctype html>\\n<html>\\n <head></head>\\n <body></body>\\n</html>\", doc5.html());\n        assertEquals(\"<!--\\n comment \\n -->\\n<!doctype html>\\n<html>\\n <head></head>\\n <body></body>\\n</html>\", doc6.html());\n    }\n\n    @Test void textnodeInBlockIndent() {\n        String html =\"<div>\\n{{ msg }} \\n </div>\\n<div>\\n{{ msg }} \\n </div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<div>\\n {{ msg }}\\n</div>\\n<div>\\n {{ msg }}\\n</div>\", doc.body().html());\n    }\n\n    @Test void stripTrailing() {\n        String html = \"<p> This <span>is </span>fine. </p>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<p>This <span>is </span>fine.</p>\", doc.body().html());\n    }\n\n    @Test void elementIndentAndSpaceTrims() {\n        String html = \"<body><div> <p> One Two </p> <a>  Hello </a><p>\\nSome text \\n</p>\\n </div>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<div>\\n\" +\n            \" <p>One Two</p><a> Hello </a>\\n\" +\n            \" <p>Some text</p>\\n\" +\n            \"</div>\", doc.body().html());\n    }\n\n    @Test void divAInlineable() {\n        String html = \"<body><div> <a>Text</a>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<div>\\n\" +\n            \" <a>Text</a>\\n\" +\n            \"</div>\", doc.body().html());\n    }\n\n    @Test void noDanglingSpaceAfterCustomElement() {\n        // https://github.com/jhy/jsoup/issues/1852\n        String html = \"<bar><p/>\\n</bar>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(\"<bar>\\n <p></p>\\n</bar>\", doc.body().html());\n\n        html = \"<foo>\\n  <bar />\\n</foo>\";\n        doc = Jsoup.parse(html);\n        assertEquals(\"<foo>\\n <bar />\\n</foo>\", doc.body().html());\n    }\n\n    @Test void spanInBlockTrims() {\n        String html = \"<p>Lorem ipsum</p>\\n<span>Thanks</span>\";\n        Document doc = Jsoup.parse(html);\n        String outHtml = doc.body().html();\n        assertEquals(\"<p>Lorem ipsum</p><span>Thanks</span>\", outHtml);\n    }\n\n    @Test void replaceWithSelf() {\n        // https://github.com/jhy/jsoup/issues/1843\n        Document doc = Jsoup.parse(\"<p>One<p>Two\");\n        Elements ps = doc.select(\"p\");\n        Element first = ps.first();\n\n        assertNotNull(first);\n        first.replaceWith(first);\n        assertEquals(ps.get(1), first.nextSibling());\n        assertEquals(\"<p>One</p>\\n<p>Two</p>\", first.parent().html());\n    }\n\n    @Test void select() {\n        Evaluator eval = QueryParser.parse(\"div\");\n        Document doc = Jsoup.parse(reference);\n        Elements els = doc.select(\"div\");\n        Elements els2 = doc.select(eval);\n        assertEquals(els, els2);\n    }\n\n    @Test void insertChildrenValidation() {\n        Document doc = Jsoup.parse(reference);\n        Element div = doc.expectFirst(\"div\");\n        Throwable ex = assertThrows(ValidationException.class, () -> div.insertChildren(20, new Element(\"div\")));\n        assertEquals(\"Insert position out of bounds.\", ex.getMessage());\n    }\n\n    @Test void cssSelectorNoDoc() {\n        Element el = new Element(\"div\");\n        el.id(\"one\");\n        assertEquals(\"#one\", el.cssSelector());\n    }\n\n    @Test void cssSelectorNoParent() {\n        Element el = new Element(\"div\");\n        assertEquals(\"div\", el.cssSelector());\n    }\n\n    @Test void cssSelectorDoesntStackOverflow() {\n        // https://github.com/jhy/jsoup/issues/2001\n        Element element = new Element(\"element\");\n        Element root = element;\n\n        // Create a long chain of elements\n        for (int i = 0; i < 5000; i++) {\n            Element elem2 = new Element(\"element\" + i);\n            element.appendChild(elem2);\n            element = elem2;\n        }\n\n        String selector = element.cssSelector(); // would overflow in cssSelector parent() recurse\n        Evaluator eval = QueryParser.parse(selector);\n\n        assertEquals(eval.toString(), selector);\n        assertTrue(selector.startsWith(\"element > element0 >\"));\n        assertTrue(selector.endsWith(\"8 > element4999\"));\n\n        Elements elements = root.select(selector); // would overflow in nested And ImmediateParent chain eval\n        assertEquals(1, elements.size());\n        assertEquals(element, elements.first());\n    }\n\n    @Test void cssSelectorWithBracket() {\n        // https://github.com/jhy/jsoup/issues/2146\n        Document doc = Jsoup.parse(\"<div class='a[foo]'>One</div><div class='b[bar]'>Two</div>\");\n        Element div = doc.expectFirst(\"div\");\n        String selector = div.cssSelector();\n        assertEquals(\"html > body > div.a\\\\[foo\\\\]\", selector); // would fail with \"Did not find balanced marker\", consumeSubquery was not handling escapes\n\n        Elements selected = doc.select(selector);\n        assertEquals(1, selected.size());\n        assertEquals(selected.first(), div);\n    }\n\n    @Test void cssSelectorUnbalanced() {\n        // https://github.com/jhy/jsoup/issues/2146\n        Document doc = Jsoup.parse(\"<div class='a(foo'>One</div><div class='a-bar'>Two</div>\");\n        Element div = doc.expectFirst(\"div\");\n        String selector = div.cssSelector();\n        assertEquals(\"html > body > div.a\\\\(foo\", selector);\n\n        Elements selected = doc.select(selector);\n        assertEquals(1, selected.size());\n        assertEquals(selected.first(), div);\n    }\n\n    @Test void cssSelectorWithAsterisk() {\n        // https://github.com/jhy/jsoup/issues/2169\n        Document doc = Jsoup.parse(\"<div class='vds-items_flex-end [&amp;_>_*:first-child]:vds-pt_0'>One</div><div class='vds-items_flex-end'>Two</div>\");\n        Element div = doc.expectFirst(\"div\");\n        String selector = div.cssSelector();\n        assertEquals(\"html > body > div.vds-items_flex-end.\\\\[\\\\&_\\\\>_\\\\*\\\\:first-child\\\\]\\\\:vds-pt_0\", selector);\n\n        Elements selected = doc.select(selector);\n        assertEquals(1, selected.size());\n        assertEquals(selected.first(), div);\n    }\n\n    @Test void cssSelectorWithPipe() {\n        // https://github.com/jhy/jsoup/issues/1998\n        Document doc = Jsoup.parse(\"<div><span class='|'>One</div>\");\n        Element span = doc.expectFirst(\"div span\");\n        String selector = span.cssSelector();\n        assertEquals(\"html > body > div > span.\\\\|\", selector);\n        Elements selected = doc.select(selector);\n        assertSelectedOwnText(selected, \"One\");\n    }\n\n    @Test void orphanSiblings() {\n        Element el = new Element(\"div\");\n        assertEquals(0, el.siblingElements().size());\n        assertEquals(0, el.nextElementSiblings().size());\n        assertEquals(0, el.previousElementSiblings().size());\n        assertNull(el.nextElementSibling());\n        assertNull(el.previousElementSibling());\n    }\n\n    @Test void getElementsByAttributeStarting() {\n        Document doc = Jsoup.parse(\"<div data-one=1 data-two=2 id=1><p data-one=3 id=2>Text</div><div>\");\n        Elements els = doc.getElementsByAttributeStarting(\" data- \");\n        assertEquals(2, els.size());\n        assertEquals(\"1\", els.get(0).id());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(0, doc.getElementsByAttributeStarting(\"not-data\").size());\n    }\n\n    @Test void getElementsByAttributeValueNot() {\n        Document doc = Jsoup.parse(\"<div data-one=1 data-two=2 id=1><p data-one=3 id=2>Text</div><div id=3>\");\n        Elements els = doc.body().getElementsByAttributeValueNot(\"data-one\", \"1\");\n        assertEquals(3, els.size()); // the body, p, and last div\n        assertEquals(\"body\", els.get(0).normalName());\n        assertEquals(\"2\", els.get(1).id());\n        assertEquals(\"3\", els.get(2).id());\n    }\n\n    @Test void getElementsByAttributeValueStarting() {\n        Document doc = Jsoup.parse(\"<a href=one1></a><a href=one2></a><a href=else</a>\");\n        Elements els = doc.getElementsByAttributeValueStarting(\"href\", \"one\");\n        assertEquals(2, els.size());\n        assertEquals(\"one1\", els.get(0).attr(\"href\"));\n        assertEquals(\"one2\", els.get(1).attr(\"href\"));\n    }\n\n    @Test void getElementsByAttributeValueEnding() {\n        Document doc = Jsoup.parse(\"<a href=1one></a><a href=2one></a><a href=else</a>\");\n        Elements els = doc.getElementsByAttributeValueEnding(\"href\", \"one\");\n        assertEquals(2, els.size());\n        assertEquals(\"1one\", els.get(0).attr(\"href\"));\n        assertEquals(\"2one\", els.get(1).attr(\"href\"));\n    }\n\n    @Test void getElementsByAttributeValueContaining() {\n        Document doc = Jsoup.parse(\"<a href=1one></a><a href=2one></a><a href=else</a>\");\n        Elements els = doc.getElementsByAttributeValueContaining(\"href\", \"on\");\n        assertEquals(2, els.size());\n        assertEquals(\"1one\", els.get(0).attr(\"href\"));\n        assertEquals(\"2one\", els.get(1).attr(\"href\"));\n    }\n\n    @Test void getElementsByAttributeValueMatchingPattern() {\n        Document doc = Jsoup.parse(\"<a href=1one></a><a href=2one></a><a href=else</a>\");\n        Elements els = doc.getElementsByAttributeValueMatching(\"href\", Pattern.compile(\"^\\\\d\\\\w+\"));\n        assertEquals(2, els.size());\n        assertEquals(\"1one\", els.get(0).attr(\"href\"));\n        assertEquals(\"2one\", els.get(1).attr(\"href\"));\n    }\n\n    @Test void getElementsByAttributeValueMatching() {\n        Document doc = Jsoup.parse(\"<a href=1one></a><a href=2one></a><a href=else</a>\");\n        Elements els = doc.getElementsByAttributeValueMatching(\"href\", \"^\\\\d\\\\w+\");\n        assertEquals(2, els.size());\n        assertEquals(\"1one\", els.get(0).attr(\"href\"));\n        assertEquals(\"2one\", els.get(1).attr(\"href\"));\n    }\n\n    @Test void getElementsByAttributeValueMatchingValidation() {\n        Document doc = Jsoup.parse(reference);\n        Throwable ex = assertThrows(IllegalArgumentException.class,\n            () -> doc.getElementsByAttributeValueMatching(\"key\", \"\\\\x\"));\n        assertEquals(\"Pattern syntax error: \\\\x\", ex.getMessage());\n    }\n\n    @Test void getElementsByIndexEquals() {\n        Document doc = Jsoup.parse(\"<a href=1one></a><a href=2one></a><a href=else</a>\");\n        Elements els = doc.body().getElementsByIndexEquals(1);\n        assertEquals(2, els.size());\n        assertEquals(\"body\", els.get(0).normalName());\n        assertEquals(\"2one\", els.get(1).attr(\"href\"));\n    }\n\n    @Test void getElementsContainingText() {\n        Document doc = Jsoup.parse(\"<div id=1>One</div><div>Two</div>\");\n        Elements els = doc.body().getElementsContainingText(\"one\");\n        assertEquals(2, els.size());\n        assertEquals(\"body\", els.get(0).normalName());\n        assertEquals(\"1\", els.get(1).id());\n    }\n\n    @Test void getElementsContainingOwnText() {\n        Document doc = Jsoup.parse(\"<div id=1>One</div><div>Two</div>\");\n        Elements els = doc.body().getElementsContainingOwnText(\"one\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.get(0).id());\n    }\n\n    @Test void getElementsMatchingTextValidation() {\n        Document doc = Jsoup.parse(reference);\n        Throwable ex = assertThrows(IllegalArgumentException.class,\n            () -> doc.getElementsMatchingText(\"\\\\x\"));\n        assertEquals(\"Pattern syntax error: \\\\x\", ex.getMessage());\n    }\n\n    @Test void getElementsMatchingText() {\n        Document doc = Jsoup.parse(\"<div id=1>One</div><div>Two</div>\");\n        Elements els = doc.body().getElementsMatchingText(\"O\\\\w+\");\n        assertEquals(2, els.size());\n        assertEquals(\"body\", els.get(0).normalName());\n        assertEquals(\"1\", els.get(1).id());\n    }\n\n    @Test void getElementsMatchingOwnText() {\n        Document doc = Jsoup.parse(\"<div id=1>One</div><div>Two</div>\");\n        Elements els = doc.body().getElementsMatchingOwnText(\"O\\\\w+\");\n        assertEquals(1, els.size());\n        assertEquals(\"1\", els.get(0).id());\n    }\n\n    @Test void getElementsMatchingOwnTextValidation() {\n        Document doc = Jsoup.parse(reference);\n        Throwable ex = assertThrows(IllegalArgumentException.class,\n            () -> doc.getElementsMatchingOwnText(\"\\\\x\"));\n        assertEquals(\"Pattern syntax error: \\\\x\", ex.getMessage());\n    }\n\n    @Test void hasText() {\n        Document doc = Jsoup.parse(\"<div id=1><p><i>One</i></p></div><div id=2>Two</div><div id=3><script>data</script> </div>\");\n        assertTrue(doc.getElementById(\"1\").hasText());\n        assertTrue(doc.getElementById(\"2\").hasText());\n        assertFalse(doc.getElementById(\"3\").hasText());\n    }\n\n    @Test void dataInCdataNode() {\n        Element el = new Element(\"div\");\n        CDataNode cdata = new CDataNode(\"Some CData\");\n        el.appendChild(cdata);\n        assertEquals(\"Some CData\", el.data());\n\n        Document parse = Jsoup.parse(\"One <![CDATA[Hello]]>\");\n        assertEquals(\"Hello\", parse.data());\n    }\n\n    @Test void datanodesOutputCdataInXhtml() {\n        String html = \"<p><script>1 && 2</script><style>3 && 4</style> 5 &amp;&amp; 6</p>\";\n        Document doc = Jsoup.parse(html); // parsed as HTML\n        String out = TextUtil.normalizeSpaces(doc.body().html());\n        assertEquals(html, out);\n        Element scriptEl = doc.expectFirst(\"script\");\n        DataNode scriptDataNode = (DataNode) scriptEl.childNode(0);\n        assertEquals(\"1 && 2\", scriptDataNode.getWholeData());\n\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        Element p = doc.expectFirst(\"p\");\n        String xml = p.html();\n        assertEquals(\n            \"<script>//<![CDATA[\\n\" +\n                \"1 && 2\\n\" +\n                \"//]]></script>\\n\" +\n                \"<style>/*<![CDATA[*/\\n\" +\n                \"3 && 4\\n\" +\n                \"/*]]>*/</style> 5 &amp;&amp; 6\",\n            xml);\n\n        Document xmlDoc = Jsoup.parse(xml, Parser.xmlParser());\n        assertEquals(xml, xmlDoc.html());\n        Element scriptXmlEl = xmlDoc.expectFirst(\"script\");\n        TextNode scriptText = (TextNode) scriptXmlEl.childNode(0);\n        assertEquals(\"//\", scriptText.getWholeText());\n        CDataNode scriptCdata = (CDataNode) scriptXmlEl.childNode(1);\n        assertEquals(\"\\n1 && 2\\n//\", scriptCdata.text());\n    }\n\n    @Test void datanodesOutputExistingCdataInXhtml() {\n        String html = \"<p><script>//<![CDATA[\\n1 && 2\\n//]]></script><style>\\n/*<![CDATA[*/3 && 4\\n/*]]>*/</style> 5 &amp;&amp; 6</p>\";;\n        Document doc = Jsoup.parse(html); // parsed as HTML\n        String out = TextUtil.normalizeSpaces(doc.body().html());\n        assertEquals(\"<p><script>//<![CDATA[1 && 2//]]></script><style>/*<![CDATA[*/3 && 4/*]]>*/</style> 5 &amp;&amp; 6</p>\", out);\n        Element scriptEl = doc.expectFirst(\"script\");\n        DataNode scriptDataNode = (DataNode) scriptEl.childNode(0);\n        assertEquals(\"//<![CDATA[\\n\" +\n            \"1 && 2\\n\" +\n            \"//]]>\", scriptDataNode.getWholeData());\n\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        Element p = doc.expectFirst(\"p\");\n        String xml = p.html();\n        assertEquals(\n            \"<script>//<![CDATA[\\n\" +\n                \"1 && 2\\n\" +\n                \"//]]></script>\\n\" +\n                \"<style>\\n\" +\n                \"/*<![CDATA[*/3 && 4\\n\" +\n                \"/*]]>*/</style> 5 &amp;&amp; 6\",\n            xml);\n\n        Document xmlDoc = Jsoup.parse(xml, Parser.xmlParser());\n        assertEquals(xml, xmlDoc.html());\n        Element scriptXmlEl = xmlDoc.expectFirst(\"script\");\n        TextNode scriptText = (TextNode) scriptXmlEl.childNode(0);\n        assertEquals(\"//\", scriptText.getWholeText());\n        CDataNode scriptCdata = (CDataNode) scriptXmlEl.childNode(1);\n        assertEquals(\"\\n1 && 2\\n//\", scriptCdata.text());\n    }\n\n    @Test void outerHtmlAppendable() {\n        // tests not string builder flow\n        Document doc = Jsoup.parse(\"<div>One</div>\");\n        StringBuffer buffer = new StringBuffer();\n        doc.body().outerHtml(buffer);\n        assertEquals(\"\\n<body>\\n <div>\\n  One\\n </div>\\n</body>\", buffer.toString());\n        StringBuilder builder = new StringBuilder();\n        doc.body().outerHtml(builder);\n        assertEquals(\"<body>\\n <div>\\n  One\\n </div>\\n</body>\", builder.toString());\n    }\n\n    @Test void rubyInline() {\n        String html = \"<ruby>T<rp>(</rp><rtc>!</rtc><rt>)</rt></ruby>\";\n        Document doc = Jsoup.parse(html);\n        assertEquals(html, doc.body().html());\n    }\n\n    @Test void nestedFormatAsInlinePrintsAsBlock() {\n        // https://github.com/jhy/jsoup/issues/1926\n        String h = \"        <table>\\n\" +\n            \"            <tr>\\n\" +\n            \"                <td>\\n\" +\n            \"                    <p style=\\\"display:inline;\\\">A</p>\\n\" +\n            \"                    <p style=\\\"display:inline;\\\">B</p>\\n\" +\n            \"                </td>\\n\" +\n            \"            </tr>\\n\" +\n            \"        </table>\";\n        Document doc = Jsoup.parse(h);\n        String out = doc.body().html();\n        assertEquals(\"<table>\\n\" +\n            \" <tbody>\\n\" +\n            \"  <tr>\\n\" +\n            \"   <td>\\n\" +\n            \"    <p style=\\\"display:inline;\\\">A</p>\\n\" +\n            \"    <p style=\\\"display:inline;\\\">B</p></td>\\n\" +\n            \"  </tr>\\n\" +\n            \" </tbody>\\n\" +\n            \"</table>\", out);\n        // todo - I would prefer the </td> to wrap down there - but need to reimplement pretty printer to simplify and track indented state\n    }\n\n    @Test void emptyDetachesChildren() {\n        String html = \"<div><p>One<p>Two</p>Three</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.expectFirst(\"div\");\n        assertEquals(3, div.childNodeSize());\n\n        List<Node> childNodes = div.childNodes();\n\n        div.empty();\n        assertEquals(0, div.childNodeSize());\n        assertEquals(3, childNodes.size()); // copied before removing\n        for (Node childNode : childNodes) {\n            assertNull(childNode.parentNode);\n        }\n\n        Element p = (Element) childNodes.get(0);\n        assertEquals(p, p.childNode(0).parentNode()); // TextNode \"One\" still has parent p, as detachment is only on div element\n    }\n\n    @Test void emptyAndAddPreviousChild() {\n        String html = \"<div><p>One<p>Two<p>Three</div>\";\n        Document doc = Jsoup.parse(html);\n        Element div = doc.expectFirst(\"div\");\n        Element p = div.expectFirst(\"p\");\n        div\n            .empty()\n            .appendChild(p);\n\n        assertEquals(\"<p>One</p>\", div.html());\n    }\n\n    @Test void emptyAndAddPreviousDescendant() {\n        String html = \"<header><div><p>One<p>Two<p>Three</div></header>\";\n        Document doc = Jsoup.parse(html);\n        Element header = doc.expectFirst(\"header\");\n        Element p = header.expectFirst(\"p\");\n        header\n            .empty()\n            .appendChild(p);\n\n        assertEquals(\"<p>One</p>\", header.html());\n    }\n\n    @Test void xmlSyntaxSetsEscapeMode() {\n        String html = \"Foo&nbsp;&Succeeds;\";\n        Document doc = Jsoup.parse(html);\n        doc.outputSettings().charset(\"ascii\"); // so we can see the zws\n        assertEquals(\"Foo&nbsp;&#x227b;\", doc.body().html());\n\n        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\n        String out = doc.body().html();\n        assertEquals(\"Foo&#xa0;&#x227b;\", out);\n\n        // can set back if desired\n        doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n        assertEquals(\"Foo&nbsp;&succ;\", doc.body().html()); // succ is alias for Succeeds, and first hit in entities\n    }\n\n    @Test void attribute() {\n        String html = \"<p CLASS='yes'>One</p>\";\n        Document doc = Jsoup.parse(html);\n        Element p = doc.expectFirst(\"p\");\n        Attribute attr = p.attribute(\"class\"); // HTML parse lower-cases names\n        assertNotNull(attr);\n        assertEquals(\"class\", attr.getKey());\n        assertEquals(\"yes\", attr.getValue());\n        assertFalse(attr.sourceRange().nameRange().start().isTracked()); // tracking disabled\n\n        assertNull(p.attribute(\"CLASS\")); // no such key\n\n        attr.setKey(\"CLASS\"); // set preserves input case\n        attr.setValue(\"YES\");\n\n        assertEquals(\"<p CLASS=\\\"YES\\\">One</p>\", p.outerHtml());\n        assertEquals(\"CLASS=\\\"YES\\\"\", attr.html());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String reference = \"<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "reference = \"<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>\"", "syntax_pass": true}]}, {"uris": "src/test/java/org/jsoup/nodes/FormElementTest.java.FormElementTest", "name": "FormElementTest", "file_path": "src/test/java/org/jsoup/nodes/FormElementTest.java", "superclasses": "", "methods": ["[void]hasAssociatedControls()", "[void]createsFormData()", "[void]formDataUsesFirstAttribute()", "[void]createsSubmitableConnection()", "[void]actionWithNoValue()", "[void]actionWithNoBaseUri()", "[void]formsAddedAfterParseAreFormElements()", "[void]controlsAddedAfterParseAreLinkedWithForms()", "[void]usesOnForCheckboxValueIfNoValueSet()", "[void]adoptedFormsRetainInputs()", "[void]removeFormElement()", "[void]formSubmissionCarriesCookiesFromSession()", "[void]formElementsAreLive()"], "method_uris": ["src/test/java/org/jsoup/nodes/FormElementTest.java.FormElementTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "\nTests for FormElement\n\n@author Jonathan Hedley\n", "original_string": "public class FormElementTest {\n    @BeforeAll\n    public static void setUp() {\n        TestServer.start();\n    }\n\n    @Test public void hasAssociatedControls() {\n        //\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\"\n        String html = \"<form id=1><button id=1><fieldset id=2 /><input id=3><keygen id=4><object id=5><output id=6>\" +\n                \"<select id=7><option></select><textarea id=8><p id=9>\";\n        Document doc = Jsoup.parse(html);\n\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        assertEquals(8, form.elements().size());\n    }\n\n    @Test public void createsFormData() {\n        String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n                \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n                \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n                \"<input name='ten' value='text' disabled>\" +\n                \"<input name='eleven' value='text' type='button'>\" +\n                \"<input name='twelve' value='text' type='image'>\" +\n                \"</form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n\n        assertEquals(6, data.size());\n        assertEquals(\"one=two\", data.get(0).toString());\n        assertEquals(\"three=four\", data.get(1).toString());\n        assertEquals(\"three=five\", data.get(2).toString());\n        assertEquals(\"six=seven\", data.get(3).toString());\n        assertEquals(\"seven=on\", data.get(4).toString()); // set\n        assertEquals(\"eight=on\", data.get(5).toString()); // default\n        // nine should not appear, not checked checkbox\n        // ten should not appear, disabled\n        // eleven should not appear, button\n    }\n\n    @Test public void formDataUsesFirstAttribute() {\n        String html = \"<form><input name=test value=foo name=test2 value=bar>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.selectFirst(\"form\");\n        assertEquals(\"test=foo\", form.formData().get(0).toString());\n    }\n\n    @Test public void createsSubmitableConnection() {\n        String html = \"<form action='/search'><input name='q'></form>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/\");\n        doc.select(\"[name=q]\").attr(\"value\", \"jsoup\");\n\n        FormElement form = ((FormElement) doc.select(\"form\").first());\n        Connection con = form.submit();\n\n        assertEquals(Connection.Method.GET, con.request().method());\n        assertEquals(\"http://example.com/search\", con.request().url().toExternalForm());\n        List<Connection.KeyVal> dataList = (List<Connection.KeyVal>) con.request().data();\n        assertEquals(\"q=jsoup\", dataList.get(0).toString());\n\n        doc.select(\"form\").attr(\"method\", \"post\");\n        Connection con2 = form.submit();\n        assertEquals(Connection.Method.POST, con2.request().method());\n    }\n\n    @Test public void actionWithNoValue() {\n        String html = \"<form><input name='q'></form>\";\n        Document doc = Jsoup.parse(html, \"http://example.com/\");\n        FormElement form = ((FormElement) doc.select(\"form\").first());\n        Connection con = form.submit();\n\n        assertEquals(\"http://example.com/\", con.request().url().toExternalForm());\n    }\n\n    @Test public void actionWithNoBaseUri() {\n        String html = \"<form><input name='q'></form>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = ((FormElement) doc.select(\"form\").first());\n\n\n        boolean threw = false;\n        try {\n            form.submit();\n        } catch (IllegalArgumentException e) {\n            threw = true;\n            assertEquals(\"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\",\n                    e.getMessage());\n        }\n        assertTrue(threw);\n    }\n\n    @Test public void formsAddedAfterParseAreFormElements() {\n        Document doc = Jsoup.parse(\"<body />\");\n        doc.body().html(\"<form action='http://example.com/search'><input name='q' value='search'>\");\n        Element formEl = doc.select(\"form\").first();\n        assertTrue(formEl instanceof FormElement);\n\n        FormElement form = (FormElement) formEl;\n        assertEquals(1, form.elements().size());\n    }\n\n    @Test public void controlsAddedAfterParseAreLinkedWithForms() {\n        Document doc = Jsoup.parse(\"<body />\");\n        doc.body().html(\"<form />\");\n\n        Element formEl = doc.select(\"form\").first();\n        formEl.append(\"<input name=foo value=bar>\");\n\n        assertTrue(formEl instanceof FormElement);\n        FormElement form = (FormElement) formEl;\n        assertEquals(1, form.elements().size());\n\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(\"foo=bar\", data.get(0).toString());\n    }\n\n    @Test public void usesOnForCheckboxValueIfNoValueSet() {\n        Document doc = Jsoup.parse(\"<form><input type=checkbox checked name=foo></form>\");\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(\"on\", data.get(0).value());\n        assertEquals(\"foo\", data.get(0).key());\n    }\n\n    @Test public void adoptedFormsRetainInputs() {\n        // test for https://github.com/jhy/jsoup/issues/249\n        String html = \"<html>\\n\" +\n                \"<body>  \\n\" +\n                \"  <table>\\n\" +\n                \"      <form action=\\\"/hello.php\\\" method=\\\"post\\\">\\n\" +\n                \"      <tr><td>User:</td><td> <input type=\\\"text\\\" name=\\\"user\\\" /></td></tr>\\n\" +\n                \"      <tr><td>Password:</td><td> <input type=\\\"password\\\" name=\\\"pass\\\" /></td></tr>\\n\" +\n                \"      <tr><td><input type=\\\"submit\\\" name=\\\"login\\\" value=\\\"login\\\" /></td></tr>\\n\" +\n                \"   </form>\\n\" +\n                \"  </table>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.select(\"form\").first();\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(3, data.size());\n        assertEquals(\"user\", data.get(0).key());\n        assertEquals(\"pass\", data.get(1).key());\n        assertEquals(\"login\", data.get(2).key());\n    }\n\n    @Test public void removeFormElement() {\n        String html = \"<html>\\n\" +\n                \"  <body> \\n\" +\n                \"      <form action=\\\"/hello.php\\\" method=\\\"post\\\">\\n\" +\n                \"      User:<input type=\\\"text\\\" name=\\\"user\\\" />\\n\" +\n                \"      Password:<input type=\\\"password\\\" name=\\\"pass\\\" />\\n\" +\n                \"      <input type=\\\"submit\\\" name=\\\"login\\\" value=\\\"login\\\" />\\n\" +\n                \"   </form>\\n\" +\n                \"  </body>\\n\" +\n                \"</html>  \";\n        Document doc = Jsoup.parse(html);\n        FormElement form = (FormElement) doc.selectFirst(\"form\");\n        Element pass = form.selectFirst(\"input[name=pass]\");\n        pass.remove();\n\n        List<Connection.KeyVal> data = form.formData();\n        assertEquals(2, data.size());\n        assertEquals(\"user\", data.get(0).key());\n        assertEquals(\"login\", data.get(1).key());\n        assertNull(doc.selectFirst(\"input[name=pass]\"));\n    }\n\n    @Test public void formSubmissionCarriesCookiesFromSession() throws IOException {\n        String echoUrl = EchoServlet.Url; // this is a dirty hack to initialize the EchoServlet(!)\n        Document cookieDoc = Jsoup.connect(CookieServlet.Url)\n            .data(CookieServlet.SetCookiesParam, \"1\")\n            .get();\n        Document formDoc = cookieDoc.connection().newRequest() // carries cookies from above set\n            .url(FileServlet.urlTo(\"/htmltests/upload-form.html\"))\n            .get();\n        FormElement form = formDoc.select(\"form\").forms().get(0);\n        Document echo = form.submit().post();\n\n        assertEquals(echoUrl, echo.location());\n        Elements els = echo.select(\"th:contains(Cookie: One)\");\n        // ensure that the cookies are there and in path-specific order (two with same name)\n        assertEquals(\"EchoServlet\", els.get(0).nextElementSibling().text());\n        assertEquals(\"Root\", els.get(1).nextElementSibling().text());\n\n        // make sure that the session following kept unique requests\n        assertTrue(cookieDoc.connection().response().url().toExternalForm().contains(\"CookieServlet\"));\n        assertTrue(formDoc.connection().response().url().toExternalForm().contains(\"upload-form\"));\n        assertTrue(echo.connection().response().url().toExternalForm().contains(\"EchoServlet\"));\n    }\n\n    @Test void formElementsAreLive() {\n        final String html = \"<html><body><form><div id=d1><input id=foo name=foo value=none></div><input id=bar name=bar value=one></form></body></html>\";\n        final Document doc = Jsoup.parse(html);\n        doc.select(\"#d1\").remove();\n        final FormElement form = (FormElement) doc.selectFirst(\"form\");\n        form.appendElement(\"input\").attr(\"id\", \"baz\").attr(\"name\", \"baz\").attr(\"value\", \"two\");\n        SelectorTest.assertSelectedIds(form.elements(), \"bar\", \"baz\");\n\n        List<Connection.KeyVal> keyVals = form.formData();\n        assertEquals(\"one\", keyVals.get(0).value());\n        assertEquals(\"two\", keyVals.get(1).value());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/org/jsoup/nodes/TextNodeTest.java.TextNodeTest", "name": "TextNodeTest", "file_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java", "superclasses": "", "methods": ["[void]testBlank()", "[void]testTextBean()", "[void]testSplitText()", "[void]testSplitAnEmbolden()", "[void]testSplitTextValidation()", "[void]testWithSupplementaryCharacter()", "[void]testLeadNodesHaveNoChildren()", "[void]testSpaceNormalise()", "[void]testClone()", "[void]testCloneAfterAttributesHit()", "[void]testHasTextWhenIterating()", "[void]createFromEncoded()", "[void]normaliseWhitespace()", "[void]stripLeadingWhitespace()", "[void]leafNodeAttributes()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "\nTest TextNodes\n\n@author Jonathan Hedley, jonathan@hedley.net", "original_string": "public class TextNodeTest {\n    @Test public void testBlank() {\n        TextNode one = new TextNode(\"\");\n        TextNode two = new TextNode(\"     \");\n        TextNode three = new TextNode(\"  \\n\\n   \");\n        TextNode four = new TextNode(\"Hello\");\n        TextNode five = new TextNode(\"  \\nHello \");\n\n        assertTrue(one.isBlank());\n        assertTrue(two.isBlank());\n        assertTrue(three.isBlank());\n        assertFalse(four.isBlank());\n        assertFalse(five.isBlank());\n    }\n\n    @Test public void testTextBean() {\n        Document doc = Jsoup.parse(\"<p>One <span>two &amp;</span> three &amp;</p>\");\n        Element p = doc.select(\"p\").first();\n\n        Element span = doc.select(\"span\").first();\n        assertEquals(\"two &\", span.text());\n        TextNode spanText = (TextNode) span.childNode(0);\n        assertEquals(\"two &\", spanText.text());\n\n        TextNode tn = (TextNode) p.childNode(2);\n        assertEquals(\" three &\", tn.text());\n\n        tn.text(\" POW!\");\n        assertEquals(\"One <span>two &amp;</span> POW!\", TextUtil.stripNewlines(p.html()));\n\n        tn.attr(tn.nodeName(), \"kablam &\");\n        assertEquals(\"kablam &\", tn.text());\n        assertEquals(\"One <span>two &amp;</span>kablam &amp;\", TextUtil.stripNewlines(p.html()));\n    }\n\n    @Test public void testSplitText() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.select(\"div\").first();\n        TextNode tn = (TextNode) div.childNode(0);\n        TextNode tail = tn.splitText(6);\n        assertEquals(\"Hello \", tn.getWholeText());\n        assertEquals(\"there\", tail.getWholeText());\n        tail.text(\"there!\");\n        assertEquals(\"Hello there!\", div.text());\n        assertSame(tn.parent(), tail.parent());\n    }\n\n    @Test public void testSplitAnEmbolden() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.select(\"div\").first();\n        TextNode tn = (TextNode) div.childNode(0);\n        TextNode tail = tn.splitText(6);\n        tail.wrap(\"<b></b>\");\n\n        assertEquals(\"Hello <b>there</b>\", TextUtil.stripNewlines(div.html())); // not great that we get \\n<b>there there... must correct\n    }\n\n    @Test void testSplitTextValidation() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.expectFirst(\"div\");\n        TextNode tn = (TextNode) div.childNode(0);\n        Throwable ex = assertThrows(ValidationException.class,\n            () -> tn.splitText(-5));\n        assertEquals(\"Split offset must be not be negative\", ex.getMessage());\n\n        ex = assertThrows(ValidationException.class,\n            () -> tn.splitText(500));\n        assertEquals(\"Split offset must not be greater than current text length\", ex.getMessage());\n    }\n\n    @Test public void testWithSupplementaryCharacter(){\n        Document doc = Jsoup.parse(new String(Character.toChars(135361)));\n        TextNode t = doc.body().textNodes().get(0);\n        assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim());\n    }\n\n    @Test public void testLeadNodesHaveNoChildren() {\n        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n        Element div = doc.select(\"div\").first();\n        TextNode tn = (TextNode) div.childNode(0);\n        List<Node> nodes = tn.childNodes();\n        assertEquals(0, nodes.size());\n    }\n\n    @Test public void testSpaceNormalise() {\n        // https://github.com/jhy/jsoup/issues/1309\n        String whole = \"Two  spaces\";\n        String norm = \"Two spaces\";\n        TextNode tn = new TextNode(whole); // there are 2 spaces between the words\n        assertEquals(whole, tn.getWholeText());\n        assertEquals(norm, tn.text());\n        assertEquals(norm, tn.outerHtml());\n        assertEquals(norm, tn.toString());\n\n        Element el = new Element(\"p\");\n        el.appendChild(tn); // this used to change the context\n        //tn.setParentNode(el); // set any parent\n        assertEquals(whole, tn.getWholeText());\n        assertEquals(norm, tn.text());\n        assertEquals(norm, tn.outerHtml());\n        assertEquals(norm, tn.toString());\n\n        assertEquals(\"<p>\" + norm + \"</p>\", el.outerHtml());\n        assertEquals(norm, el.html());\n        assertEquals(whole, el.wholeText());\n    }\n\n    @Test\n    public void testClone() {\n        // https://github.com/jhy/jsoup/issues/1176\n        TextNode x = new TextNode(\"zzz\");\n        TextNode y = x.clone();\n\n        assertNotSame(x, y);\n        assertEquals(x.outerHtml(), y.outerHtml());\n\n        y.text(\"yyy\");\n        assertNotEquals(x.outerHtml(), y.outerHtml());\n        assertEquals(\"zzz\", x.text());\n\n        x.attributes(); // already cloned so no impact\n        y.text(\"xxx\");\n        assertEquals(\"zzz\", x.text());\n        assertEquals(\"xxx\", y.text());\n    }\n\n    @Test\n    public void testCloneAfterAttributesHit() {\n        // https://github.com/jhy/jsoup/issues/1176\n        TextNode x = new TextNode(\"zzz\");\n        x.attributes(); // moves content from leafnode value to attributes, which were missed in clone\n        TextNode y = x.clone();\n        y.text(\"xxx\");\n        assertEquals(\"zzz\", x.text());\n        assertEquals(\"xxx\", y.text());\n    }\n\n    @Test\n    public void testHasTextWhenIterating() {\n        // https://github.com/jhy/jsoup/issues/1170\n        Document doc = Jsoup.parse(\"<div>One <p>Two <p>Three\");\n        boolean foundFirst = false;\n        for (Element el : doc.getAllElements()) {\n            for (Node node : el.childNodes()) {\n                if (node instanceof TextNode) {\n                    TextNode textNode = (TextNode) node;\n                    assertFalse(StringUtil.isBlank(textNode.text()));\n                    if (!foundFirst) {\n                        foundFirst = true;\n                        assertEquals(\"One \", textNode.text());\n                        assertEquals(\"One \", textNode.getWholeText());\n                    }\n                }\n            }\n        }\n        assertTrue(foundFirst);\n    }\n\n    @Test void createFromEncoded() {\n        TextNode tn = TextNode.createFromEncoded(\"&lt;One&gt;\");\n        assertEquals(\"<One>\", tn.text());\n    }\n\n    @Test void normaliseWhitespace() {\n        assertEquals(\" One Two \", TextNode.normaliseWhitespace(\"  One \\n Two\\n\"));\n    }\n\n    @Test void stripLeadingWhitespace() {\n        assertEquals(\"One Two  \", TextNode.stripLeadingWhitespace(\"\\n One Two  \"));\n    }\n\n    // Lead Node tests\n    @Test void leafNodeAttributes() {\n        TextNode t = new TextNode(\"First\");\n\n        // will hit the !hasAttributes flow\n        t.attr(t.nodeName(), \"One\");\n        assertEquals(\"One\", t.attr(t.nodeName()));\n        assertFalse(t.hasAttributes());\n\n        Attributes attr = t.attributes();\n        assertEquals(1, attr.asList().size()); // vivifies 'One' as an attribute\n        assertEquals(\"One\", attr.get(t.nodeName()));\n        t.coreValue(\"Two\");\n        assertEquals(\"Two\", t.text());\n\n        // arbitrary attributes\n        assertFalse(t.hasAttr(\"foo\"));\n        t.attr(\"foo\", \"bar\");\n        assertTrue(t.hasAttr(\"foo\"));\n        t.removeAttr(\"foo\");\n        assertFalse(t.hasAttr(\"foo\"));\n\n        assertEquals(\"\", t.baseUri());\n        t.attr(\"href\", \"/foo.html\");\n        assertEquals(\"\", t.absUrl(\"href\")); // cannot abs\n\n        Element p = new Element(\"p\");\n        p.doSetBaseUri(\"https://example.com/\");\n        p.appendChild(t);\n        assertEquals(\"https://example.com/foo.html\", t.absUrl(\"href\"));\n\n        assertEquals(0, t.childNodeSize());\n        assertSame(t, t.empty());\n        assertEquals(0, t.ensureChildNodes().size());\n\n        TextNode clone = t.clone();\n        assertTrue(t.hasSameValue(clone));\n        assertEquals(\"/foo.html\", clone.attr(\"href\"));\n        assertEquals(\"Two\", clone.text());\n    }\n}", "super_interfaces": [], "fields": []}]