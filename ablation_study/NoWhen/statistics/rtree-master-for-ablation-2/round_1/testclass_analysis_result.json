[{"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_addTest.java", "testclass_name": "Util_addTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import org.junit.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.Assert.assertEquals;"], "name": "Util_addTest", "description": "Unit test for the Util.add method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["Util.add(List<Integer>,Integer)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of an element to a list using the Util.add method."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java", "testclass_name": "RTree_searchTest", "dependencies": ["package com.github.davidmoten.rtree;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import com.github.davidmoten.rtree.geometry.Point;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import rx.Observable;", "import rx.functions.Func2;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import static org.mockito.Mockito.*;"], "name": "RTree_searchTest", "description": "Unit tests for the search functionality of the RTree class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSearch", "primary_tested": ["RTree.search(Point,double,Func2)"], "external_dependencies": {"modules": ["RTree", "Point", "Geometries", "Observable", "Func2"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the search functionality of the RTree class, verifying that the result is an empty observable when no entries are present."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/Geometries_rectangleGeographicTest.java", "testclass_name": "Geometries_rectangleGeographicTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;"], "name": "Geometries_rectangleGeographicTest", "description": "Unit tests for the rectangleGeographic method in the Geometries class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRectangleGeographicNormalCase", "primary_tested": ["Geometries.rectangleGeographic(float,float,float,float)"], "external_dependencies": {"modules": ["Geometries", "Rectangle"]}, "category": "unit", "description": "Tests the normal case of creating a geographic rectangle."}, {"name": "testRectangleGeographicCrossingLongitudeBoundary", "primary_tested": ["Geometries.rectangleGeographic(float,float,float,float)"], "external_dependencies": {"modules": ["Geometries", "Rectangle"]}, "category": "unit", "description": "Tests the case where the rectangle crosses the longitude boundary."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "testclass_name": "Line2D_linesIntersectTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "Line2D_linesIntersectTest", "description": "Unit tests for the Line2D.linesIntersect method, which checks if two lines intersect.", "test_cases": [{"name": "testLinesIntersect_IntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the linesIntersect method with intersecting lines."}, {"name": "testLinesIntersect_NonIntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the linesIntersect method with non-intersecting lines."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "testclass_name": "ObjectsHelper_asClassTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;", "import java.util.Optional;"], "name": "ObjectsHelper_asClassTest", "description": "Unit tests for the ObjectsHelper.asClass method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAsClassWithNullObject", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with a null object."}, {"name": "testAsClassWithIncorrectClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with an object of an incorrect class."}, {"name": "testAsClassWithCorrectClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with an object of the correct class."}, {"name": "coverPrivateConstructor", "primary_tested": ["ObjectsHelper.instantiateForTestCoveragePurposesOnly()"], "external_dependencies": {"modules": ["ObjectsHelper"]}, "category": "unit", "description": "Tests the instantiation of ObjectsHelper for test coverage purposes."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java", "testclass_name": "ImmutableStack_popTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.*;", "import org.junit.Test;"], "name": "ImmutableStack_popTest", "description": "Unit tests for the pop functionality of the ImmutableStack class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPopOnNonEmptyStack", "primary_tested": ["ImmutableStack.pop()"], "associated_methods": ["ImmutableStack.isEmpty()", "ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pop functionality on a non-empty stack, ensuring the stack is not empty after popping and the correct element is peeked."}, {"name": "testPopOnSingleElementStack", "primary_tested": ["ImmutableStack.pop()"], "associated_methods": ["ImmutableStack.isEmpty()"], "external_dependencies": {"modules": ["ImmutableStack", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pop functionality on a stack with a single element, ensuring the stack becomes empty after popping."}, {"name": "testPopOnEmptyStack", "primary_tested": ["ImmutableStack.pop()"], "external_dependencies": {"modules": ["ImmutableStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pop functionality on an empty stack, expecting a RuntimeException to be thrown."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java", "testclass_name": "Line2D_ptSegDistSqTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;"], "name": "Line2D_ptSegDistSqTest", "description": "Unit tests for the ptSegDistSq method in the Line2D class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testPtSegDistSqPointOnSideOfX1Y1", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point on the side of (x1, y1)."}, {"name": "testPtSegDistSqPointOnSideOfX2Y2", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point on the side of (x2, y2)."}, {"name": "testPtSegDistSqPointBetweenX1Y1AndX2Y2", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point between (x1, y1) and (x2, y2)."}, {"name": "testPtSegDistSqPointExactlyOnLine", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point exactly on the line."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "testclass_name": "Util_removeTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import org.junit.Test;"], "name": "Util_removeTest", "description": "Unit tests for the Util.remove method, which removes specified elements from a list.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRemoveAllElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of all elements from a list."}, {"name": "testRemoveSomeElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of some elements from a list."}, {"name": "testRemoveNoElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collections", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of no elements from a list."}, {"name": "testRemoveElementsFromEmptyList", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collections", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of elements from an empty list."}, {"name": "testRemoveNonExistentElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of non-existent elements from a list."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java", "testclass_name": "BoundedPriorityQueue_asOrderedListTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue.create;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.junit.Before;", "import org.junit.Test;"], "name": "BoundedPriorityQueue_asOrderedListTest", "description": "Unit tests for the asOrderedList method of BoundedPriorityQueue.", "class_members": {"variables": [{"name": "comparator", "type": "static final Comparator<Integer>"}, {"name": "queue", "type": "BoundedPriorityQueue<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAsOrderedListWithEmptyQueue", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue is empty."}, {"name": "testAsOrderedListWithSingleElement", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains a single element."}, {"name": "testAsOrderedListWithMultipleElements", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains multiple elements."}, {"name": "testAsOrderedListWithUnsortedElements", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains unsorted elements."}]}]