[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\npublic class RTree_addTest {\n\n    private RTree<Object, Geometry> rTree;\n    private Context<Object, Geometry> context;\n    private Node<Object, Geometry> mockNode;\n    private Entry<Object, Geometry> mockEntry;\n\n    @Before\n    public void setUp() {\n        context = mock(Context.class);\n        mockNode = mock(Node.class);\n        mockEntry = mock(Entry.class);\n        rTree = new RTree<>(Optional.of(mockNode), 1, context);\n    }\n\n    @Test\n    public void testAddWhenRootIsPresentAndNodesSizeIsOne() {\n        List<Node<Object, Geometry>> nodes = mock(List.class);\n        when(nodes.size()).thenReturn(1);\n        when(mockNode.add(mockEntry)).thenReturn(nodes);\n        when(nodes.get(0)).thenReturn(mockNode);\n\n        RTree<Object, Geometry> result = rTree.add(mockEntry);\n\n        assertEquals(2, result.size());\n        assertEquals(context, result.context());\n    }\n\n    @Test\n    public void testAddWhenRootIsPresentAndNodesSizeIsGreaterThanOne() {\n        List<Node<Object, Geometry>> nodes = mock(List.class);\n        when(nodes.size()).thenReturn(2);\n        when(mockNode.add(mockEntry)).thenReturn(nodes);\n        Node<Object, Geometry> newNode = mock(Node.class);\n        when(context.factory().createNonLeaf(nodes, context)).thenReturn(newNode);\n\n        RTree<Object, Geometry> result = rTree.add(mockEntry);\n\n        assertEquals(2, result.size());\n        assertEquals(context, result.context());\n    }\n\n    @Test\n    public void testAddWhenRootIsNotPresent() {\n        rTree = new RTree<>(Optional.empty(), 0, context);\n        Leaf<Object, Geometry> leaf = mock(Leaf.class);\n        when(context.factory().createLeaf(Mockito.anyList(), eq(context))).thenReturn(leaf);\n\n        RTree<Object, Geometry> result = rTree.add(mockEntry);\n\n        assertEquals(1, result.size());\n        assertEquals(context, result.context());\n    }\n}\n"}]