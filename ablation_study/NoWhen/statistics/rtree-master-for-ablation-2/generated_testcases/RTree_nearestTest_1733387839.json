[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Point;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\n\nimport rx.Observable;\n\npublic class RTree_nearestTest {\n\n    private RTree<String, Point> tree;\n    private static final Point SYDNEY = Geometries.point(151.2094, -33.8688);\n    private static final Point CANBERRA = Geometries.point(149.1244, -35.2809);\n    private static final Point BRISBANE = Geometries.point(153.0251, -27.4698);\n\n    @Before\n    public void setUp() {\n        tree = RTree.star().create();\n        tree = tree.add(\"Sydney\", SYDNEY);\n        tree = tree.add(\"Canberra\", CANBERRA);\n        tree = tree.add(\"Brisbane\", BRISBANE);\n    }\n\n    @Test\n    public void testNearestWithinDistance() {\n        Rectangle searchArea = Geometries.rectangle(149.1244, -35.2809, 149.1244, -35.2809);\n        double maxDistance = 300; // km\n        int maxCount = 1;\n\n        List<Entry<String, Point>> result = tree.nearest(searchArea, maxDistance, maxCount)\n                .toList().toBlocking().single();\n\n        assertEquals(1, result.size());\n        assertEquals(\"Canberra\", result.get(0).value());\n    }\n\n    @Test\n    public void testNearestWithMaxCount() {\n        Rectangle searchArea = Geometries.rectangle(149.1244, -35.2809, 149.1244, -35.2809);\n        double maxDistance = 1000; // km\n        int maxCount = 2;\n\n        List<Entry<String, Point>> result = tree.nearest(searchArea, maxDistance, maxCount)\n                .toList().toBlocking().single();\n\n        assertEquals(2, result.size());\n        assertTrue(result.stream().anyMatch(e -> e.value().equals(\"Sydney\")));\n        assertTrue(result.stream().anyMatch(e -> e.value().equals(\"Canberra\")));\n    }\n\n    @Test\n    public void testNearestWithNoMatches() {\n        Rectangle searchArea = Geometries.rectangle(149.1244, -35.2809, 149.1244, -35.2809);\n        double maxDistance = 50; // km\n        int maxCount = 1;\n\n        List<Entry<String, Point>> result = tree.nearest(searchArea, maxDistance, maxCount)\n                .toList().toBlocking().single();\n\n        assertTrue(result.isEmpty());\n    }\n}\n"}]