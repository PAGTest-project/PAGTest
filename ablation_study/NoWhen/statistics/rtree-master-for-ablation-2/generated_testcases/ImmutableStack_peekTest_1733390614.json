[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal.util;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.util.Iterator;\nimport org.junit.Test;\n\npublic class ImmutableStack_peekTest {\n\n    @Test\n    public void testPeekOnNonEmptyStack() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\");\n        stack = stack.push(\"second\");\n        assertEquals(\"second\", stack.peek());\n    }\n\n    @Test\n    public void testPeekOnEmptyStack() {\n        ImmutableStack<String> stack = ImmutableStack.empty();\n        assertEquals(null, stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterPush() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\");\n        stack = stack.push(\"second\");\n        assertEquals(\"second\", stack.peek());\n        stack = stack.push(\"third\");\n        assertEquals(\"third\", stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterPop() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\");\n        stack = stack.push(\"second\");\n        stack = stack.push(\"third\");\n        stack = stack.pop();\n        assertEquals(\"second\", stack.peek());\n    }\n\n    @Test\n    public void testPeekWithMultiplePushesAndPops() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\");\n        stack = stack.push(\"second\");\n        stack = stack.push(\"third\");\n        assertEquals(\"third\", stack.peek());\n        stack = stack.pop();\n        assertEquals(\"second\", stack.peek());\n        stack = stack.pop();\n        assertEquals(\"first\", stack.peek());\n    }\n}\n"}]