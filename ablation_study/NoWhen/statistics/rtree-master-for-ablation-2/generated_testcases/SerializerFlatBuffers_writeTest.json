[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Point;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport com.github.davidmoten.rtree.internal.LeafDefault;\nimport com.github.davidmoten.rtree.internal.NonLeafDefault;\nimport com.google.flatbuffers.FlatBufferBuilder;\nimport com.github.davidmoten.rtree.fbs.generated.Tree_;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\n\npublic class SerializerFlatBuffers_writeTest {\n\n    private SerializerFlatBuffers<Object, Point> serializer;\n    private RTree<Object, Point> tree;\n\n    @Before\n    public void setUp() {\n        serializer = new SerializerFlatBuffers<>(null, null);\n        tree = RTree.create();\n    }\n\n    @Test\n    public void testWriteWithEmptyTree() throws IOException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(tree, os);\n        byte[] bytes = os.toByteArray();\n        ByteBuffer bb = ByteBuffer.wrap(bytes);\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(0, t.size());\n        assertTrue(t.root() == 0);\n    }\n\n    @Test\n    public void testWriteWithSingleLeafNode() throws IOException {\n        Entry<Object, Point> entry = new Entry<>(new Object(), Geometries.point(1, 2));\n        tree = tree.add(entry);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(tree, os);\n        byte[] bytes = os.toByteArray();\n        ByteBuffer bb = ByteBuffer.wrap(bytes);\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(1, t.size());\n        Node_ node = t.root();\n        assertTrue(node != null);\n        assertEquals(0, node.childrenLength());\n    }\n\n    @Test\n    public void testWriteWithNonLeafNode() throws IOException {\n        Entry<Object, Point> entry1 = new Entry<>(new Object(), Geometries.point(1, 2));\n        Entry<Object, Point> entry2 = new Entry<>(new Object(), Geometries.point(3, 4));\n        tree = tree.add(entry1).add(entry2);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(tree, os);\n        byte[] bytes = os.toByteArray();\n        ByteBuffer bb = ByteBuffer.wrap(bytes);\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(2, t.size());\n        Node_ node = t.root();\n        assertTrue(node != null);\n        assertEquals(2, node.childrenLength());\n    }\n\n    @Test\n    public void testWriteWithCustomContext() throws IOException {\n        Context<Object, Point> context = new Context<>(3, 7, null, null, null);\n        tree = RTree.create(context);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(tree, os);\n        byte[] bytes = os.toByteArray();\n        ByteBuffer bb = ByteBuffer.wrap(bytes);\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(3, t.context().minChildren());\n        assertEquals(7, t.context().maxChildren());\n    }\n}\n"}]