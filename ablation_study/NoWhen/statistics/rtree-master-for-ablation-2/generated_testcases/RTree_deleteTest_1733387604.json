[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\nimport rx.Observable;\nimport rx.functions.Func2;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RTree_deleteTest {\n\n    @Mock\n    private RTree<Object, Geometry> mockTree;\n\n    @Mock\n    private Entry<Object, Geometry> mockEntry1;\n\n    @Mock\n    private Entry<Object, Geometry> mockEntry2;\n\n    @Test\n    public void testDelete() {\n        // Given\n        List<Entry<Object, Geometry>> entries = Arrays.asList(mockEntry1, mockEntry2);\n        Observable<Entry<Object, Geometry>> observableEntries = Observable.from(entries);\n\n        RTree<Object, Geometry> resultTree1 = mock(RTree.class);\n        RTree<Object, Geometry> resultTree2 = mock(RTree.class);\n\n        when(mockTree.delete(mockEntry1, true)).thenReturn(resultTree1);\n        when(mockTree.delete(mockEntry2, true)).thenReturn(resultTree2);\n\n        // When\n        Observable<RTree<Object, Geometry>> result = mockTree.delete(observableEntries, true);\n\n        // Then\n        result.toList().subscribe(trees -> {\n            assertEquals(2, trees.size());\n            assertEquals(resultTree1, trees.get(0));\n            assertEquals(resultTree2, trees.get(1));\n            verify(mockTree, times(1)).delete(mockEntry1, true);\n            verify(mockTree, times(1)).delete(mockEntry2, true);\n        });\n    }\n}\n"}]