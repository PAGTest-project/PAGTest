[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.InternalStructure;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.SelectorRStar;\nimport com.github.davidmoten.rtree.SplitterRStar;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport com.github.davidmoten.rtree.fbs.generated.Tree_;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.google.flatbuffers.FlatBufferBuilder;\n\npublic class SerializerFlatBuffers_readTest {\n\n    private SerializerFlatBuffers<Object, Geometry> serializer;\n\n    @Before\n    public void setUp() {\n        serializer = new SerializerFlatBuffers<>(null, null);\n    }\n\n    @Test\n    public void testReadWithEmptyTree() throws IOException {\n        FlatBufferBuilder builder = new FlatBufferBuilder();\n        int treeOffset = Tree_.createTree_(builder, 0, 0, 0);\n        Tree_.finishTree_Buffer(builder, treeOffset);\n        byte[] bytes = builder.sizedByteArray();\n\n        RTree<Object, Geometry> result = serializer.read(new ByteArrayInputStream(bytes), bytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(result.root().isEmpty());\n        assertEquals(0, result.size());\n    }\n\n    @Test\n    public void testReadWithNonEmptyTree() throws IOException {\n        FlatBufferBuilder builder = new FlatBufferBuilder();\n        int contextOffset = Context_.createContext_(builder, 2, 4, 0, 0);\n        int nodeOffset = Node_.createNode_(builder, 0, 0, 0);\n        int treeOffset = Tree_.createTree_(builder, contextOffset, nodeOffset, 1);\n        Tree_.finishTree_Buffer(builder, treeOffset);\n        byte[] bytes = builder.sizedByteArray();\n\n        RTree<Object, Geometry> result = serializer.read(new ByteArrayInputStream(bytes), bytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(result.root().isPresent());\n        assertEquals(1, result.size());\n    }\n\n    @Test\n    public void testReadWithNonLeafNode() throws IOException {\n        FlatBufferBuilder builder = new FlatBufferBuilder();\n        int contextOffset = Context_.createContext_(builder, 2, 4, 0, 0);\n        int childNodeOffset = Node_.createNode_(builder, 0, 0, 0);\n        int[] childrenOffsets = new int[] { childNodeOffset };\n        int childrenVectorOffset = Node_.createChildrenVector(builder, childrenOffsets);\n        int nodeOffset = Node_.createNode_(builder, 0, childrenVectorOffset, 0);\n        int treeOffset = Tree_.createTree_(builder, contextOffset, nodeOffset, 1);\n        Tree_.finishTree_Buffer(builder, treeOffset);\n        byte[] bytes = builder.sizedByteArray();\n\n        RTree<Object, Geometry> result = serializer.read(new ByteArrayInputStream(bytes), bytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(result.root().isPresent());\n        assertEquals(1, result.size());\n        Node<Object, Geometry> root = result.root().get();\n        assertTrue(root instanceof NonLeafFlatBuffers);\n    }\n\n    @Test\n    public void testReadWithLeafNode() throws IOException {\n        FlatBufferBuilder builder = new FlatBufferBuilder();\n        int contextOffset = Context_.createContext_(builder, 2, 4, 0, 0);\n        int nodeOffset = Node_.createNode_(builder, 0, 0, 0);\n        int treeOffset = Tree_.createTree_(builder, contextOffset, nodeOffset, 1);\n        Tree_.finishTree_Buffer(builder, treeOffset);\n        byte[] bytes = builder.sizedByteArray();\n\n        RTree<Object, Geometry> result = serializer.read(new ByteArrayInputStream(bytes), bytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(result.root().isPresent());\n        assertEquals(1, result.size());\n        Node<Object, Geometry> root = result.root().get();\n        assertTrue(root instanceof LeafFlatBuffers);\n    }\n}\n"}]