[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree;\n\nimport com.github.davidmoten.rtree.geometry.HasGeometry;\nimport com.github.davidmoten.rtree.geometry.ListPair;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\npublic class SplitterRStar_splitTest {\n\n    @Test\n    public void testSplitWithValidInput() {\n        SplitterRStar splitter = new SplitterRStar();\n        List<HasGeometry> items = Arrays.asList(\n                new MockHasGeometry(1.0, 2.0, 3.0, 4.0),\n                new MockHasGeometry(2.0, 3.0, 4.0, 5.0),\n                new MockHasGeometry(3.0, 4.0, 5.0, 6.0)\n        );\n        int minSize = 1;\n\n        ListPair<HasGeometry> result = splitter.split(items, minSize);\n\n        assertNotNull(result);\n        assertEquals(2, result.group1().size() + result.group2().size());\n    }\n\n    private static class MockHasGeometry implements HasGeometry {\n        private final double x1, y1, x2, y2;\n\n        public MockHasGeometry(double x1, double y1, double x2, double y2) {\n            this.x1 = x1;\n            this.y1 = y1;\n            this.x2 = x2;\n            this.y2 = y2;\n        }\n\n        @Override\n        public Geometry geometry() {\n            return new Geometry() {\n                @Override\n                public Rectangle mbr() {\n                    return new Rectangle() {\n                        @Override\n                        public double x1() {\n                            return x1;\n                        }\n\n                        @Override\n                        public double y1() {\n                            return y1;\n                        }\n\n                        @Override\n                        public double x2() {\n                            return x2;\n                        }\n\n                        @Override\n                        public double y2() {\n                            return y2;\n                        }\n\n                        @Override\n                        public double intersectionArea(Rectangle r) {\n                            return 0;\n                        }\n                    };\n                }\n            };\n        }\n    }\n\n    private interface Geometry {\n        Rectangle mbr();\n    }\n\n    private interface Rectangle {\n        double x1();\n        double y1();\n        double x2();\n        double y2();\n        double intersectionArea(Rectangle r);\n    }\n}\n"}]