{"file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.extension.ParameterContext;", "import org.junit.jupiter.api.function.Executable;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.converter.ArgumentConversionException;", "import org.junit.jupiter.params.converter.ArgumentConverter;", "import org.junit.jupiter.params.converter.ConvertWith;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.yaml.snakeyaml.Yaml;", "import java.io.IOException;", "import java.io.InputStream;", "import java.lang.reflect.Type;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.List;", "import java.util.Locale;", "import java.util.stream.Collectors;", "import static java.nio.file.Files.newDirectoryStream;", "import static java.nio.file.Files.newInputStream;", "import static java.util.Arrays.asList;", "import static java.util.Collections.singletonList;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.equalTo;", "import static org.hamcrest.core.Is.is;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "CucumberExpressionTest", "description": "Test suite for CucumberExpression functionality, including acceptance tests and various type matching tests.", "class_members": {"variables": [{"name": "parameterTypeRegistry", "type": "ParameterTypeRegistry"}], "methods": [{"name": "acceptance_tests_pass", "signature": "static List<Path> acceptance_tests_pass() throws IOException"}, {"name": "match", "signature": "private List<?> match(String expr, String text, Type... typeHints)"}, {"name": "match", "signature": "private List<?> match(String expr, String text, Locale locale, Type... typeHints)"}, {"name": "match", "signature": "private List<?> match(String expr, String text, ParameterTypeRegistry parameterTypeRegistry, Type... typeHints)"}], "nested_classes": [{"name": "Expectation", "description": "Class representing the expected outcome for acceptance tests"}, {"name": "Converter", "description": "Class implementing ArgumentConverter to convert YAML files to Expectation objects"}]}, "fixtures": [], "test_cases": [{"name": "acceptance_tests_pass", "primary_tested": ["CucumberExpression.match(String)"], "associated_methods": ["CustomMatchers.equalOrCloseTo(List<?>)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "Argument", "CustomMatchers", "CucumberExpressionException"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}], "project_specific_resources": ["Converter.convert(Object, ParameterContext)"]}, "category": "acceptance", "description": "Tests the matching functionality of CucumberExpression against various expectations defined in YAML files."}, {"name": "exposes_source", "primary_tested": ["CucumberExpression.getSource()"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests that the CucumberExpression exposes its source correctly."}, {"name": "matches_anonymous_parameter_type_with_hint", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of an anonymous parameter type with a type hint."}, {"name": "documents_match_arguments", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "Argument"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the documentation of match arguments in CucumberExpression."}, {"name": "matches_byte", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a byte type in CucumberExpression."}, {"name": "matches_short", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a short type in CucumberExpression."}, {"name": "matches_long", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a long type in CucumberExpression."}, {"name": "matches_biginteger", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a BigInteger type in CucumberExpression."}, {"name": "matches_bigdecimal", "primary_tested": ["CucumberExpression.match(String, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a BigDecimal type in CucumberExpression."}, {"name": "matches_double_with_comma_for_locale_using_comma", "primary_tested": ["CucumberExpression.match(String, Locale, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a double type with a comma for a locale using a comma in CucumberExpression."}, {"name": "matches_float_with_zero", "primary_tested": ["CucumberExpression.match(String, Locale, Type...)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests the matching of a float type with zero in CucumberExpression."}, {"name": "unmatched_optional_groups_have_null_values", "primary_tested": ["CucumberExpression.match(String, Type...)"], "associated_methods": ["ParameterTypeRegistry.defineParameterType(ParameterType<?>)"], "external_dependencies": {"modules": ["CucumberExpression", "ParameterTypeRegistry", "ParameterType", "TypeReference", "CaptureGroupTransformer"], "class_members": [{"name": "parameterTypeRegistry", "type": "variable"}]}, "category": "unit", "description": "Tests that unmatched optional groups in CucumberExpression have null values."}]}