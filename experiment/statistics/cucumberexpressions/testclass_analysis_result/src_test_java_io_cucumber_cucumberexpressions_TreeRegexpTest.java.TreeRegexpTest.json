{"file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.regex.Pattern;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "TreeRegexpTest", "description": "Unit tests for the TreeRegexp class, which handles regular expressions and their groups.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "exposes_group_source", "primary_tested": ["TreeRegexp.getGroupBuilder()"], "associated_methods": ["GroupBuilder.getSource()"], "external_dependencies": {"modules": ["TreeRegexp", "GroupBuilder", "ArrayList", "List"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly exposes the source of its groups."}, {"name": "builds_tree", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getChildren()", "Group.getValue()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly builds a tree structure from a given regex pattern."}, {"name": "ignores_question_mark_colon_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly ignores non-capturing groups denoted by ?:."}, {"name": "ignores_question_mark_exclamation_mark_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly ignores non-capturing groups denoted by ?!."}, {"name": "ignores_question_mark_equal_sign_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly ignores non-capturing groups denoted by ?=."}, {"name": "ignores_question_mark_less_than_equal_sign_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly ignores non-capturing groups denoted by ?<=."}, {"name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly ignores non-capturing groups denoted by ?<!."}, {"name": "ignores_question_mark_greater_then_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly ignores non-capturing groups denoted by ?>."}, {"name": "matches_named_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly matches named capturing groups."}, {"name": "matches_optional_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly matches optional groups."}, {"name": "matches_nested_groups", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly matches nested groups."}, {"name": "captures_non_capturing_groups_with_capturing_groups_inside", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly captures non-capturing groups with capturing groups inside."}, {"name": "detects_multiple_non_capturing_groups", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly detects multiple non-capturing groups."}, {"name": "works_with_escaped_backslash", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles escaped backslashes in regex patterns."}, {"name": "works_with_slash_which_doesnt_need_escaping_in_java", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles slashes in regex patterns, which do not need escaping in Java."}, {"name": "works_digit_and_word", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly matches digits and words in regex patterns."}, {"name": "captures_start_and_end", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()", "Group.getStart()", "Group.getEnd()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly captures the start and end positions of matched groups."}, {"name": "doesnt_consider_parenthesis_in_character_class_as_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class does not consider parentheses within character classes as groups."}, {"name": "works_with_flags", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles regex patterns with flags."}, {"name": "works_with_inline_flags", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles regex patterns with inline flags."}, {"name": "works_with_non_capturing_inline_flags", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles regex patterns with non-capturing inline flags."}, {"name": "empty_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles empty capturing groups."}, {"name": "empty_non_capturing_group", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles empty non-capturing groups."}, {"name": "empty_look_ahead", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()", "Group.getChildren()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly handles empty look-ahead groups."}, {"name": "uses_loaded_pattern_compiler_service", "primary_tested": ["TreeRegexp.match(String)"], "associated_methods": ["Group.getValue()"], "external_dependencies": {"modules": ["TreeRegexp", "Group", "PatternCompilerProvider", "Pattern"], "class_members": []}, "category": "unit", "description": "Tests that the TreeRegexp class correctly uses a loaded pattern compiler service."}]}