{"file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.util.Locale;", "import static java.util.Collections.singleton;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ExpressionFactoryTest", "description": "Unit tests for the ExpressionFactory class, which creates different types of expressions based on input strings.", "class_members": {"methods": [{"name": "assertRegularExpression", "signature": "void assertRegularExpression(String expressionString)"}, {"name": "assertRegularExpression", "signature": "void assertRegularExpression(String expectedSource, String expressionString)"}, {"name": "assertCucumberExpression", "signature": "void assertCucumberExpression(String expressionString)"}, {"name": "assertExpression", "signature": "void assertExpression(Class<? extends Expression> expectedClass, String expectedSource, String expressionString)"}, {"name": "createExpression", "signature": "Expression createExpression(String expressionString)"}]}, "test_cases": [{"name": "creates_cucumber_expression_for_empty", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression for an empty string."}, {"name": "creates_cucumber_expression_by_default", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the default creation of a Cucumber expression for a string."}, {"name": "creates_regular_expression_for_anchors", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a regular expression for a string with anchors."}, {"name": "creates_regular_expression_for_slashes", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String,String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a regular expression for a string with slashes."}, {"name": "creates_cucumber_expression_for_parenthesis_with_alpha", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression for a string with alphabetic characters inside parentheses."}, {"name": "creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression for a string with escaped parentheses and regex symbols."}, {"name": "creates_cucumber_expression_for_escaped_parenthesis_with_alpha", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression for a string with escaped parentheses and alphabetic characters."}, {"name": "creates_cucumber_expression_for_parenthesis_with_regex_symbols", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertCucumberExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpression"], "class_members": [{"name": "assertCucumberExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Cucumber expression for a string with regex symbols inside parentheses."}, {"name": "creates_cucumber_expression_for_only_begin_anchor", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a regular expression for a string with only a begin anchor."}, {"name": "creates_cucumber_expression_for_only_end_anchor", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a regular expression for a string with only an end anchor."}, {"name": "creates_regular_expression_for_slashed_anchors", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertRegularExpression(String,String)"], "external_dependencies": {"modules": ["ExpressionFactory", "RegularExpression"], "class_members": [{"name": "assertRegularExpression", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a regular expression for a string with slashed anchors."}, {"name": "explains_cukexp_regexp_mix", "primary_tested": ["ExpressionFactory.createExpression(String)"], "associated_methods": ["ExpressionFactoryTest.assertThrows(Class<T>,Executable)"], "external_dependencies": {"modules": ["ExpressionFactory", "CucumberExpressionException"], "class_members": [{"name": "assertThrows", "type": "method"}]}, "category": "unit", "description": "Tests the handling of a mix of Cucumber expression and regular expression syntax, expecting an exception."}]}