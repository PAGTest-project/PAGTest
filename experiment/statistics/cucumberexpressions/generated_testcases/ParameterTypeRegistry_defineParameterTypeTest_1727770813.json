[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ParameterTypeRegistry_defineParameterTypeTest {\n    private ParameterTypeRegistry registry;\n\n    @BeforeEach\n    public void setUp() {\n        registry = new ParameterTypeRegistry(Locale.ENGLISH);\n    }\n\n    @Test\n    public void testDefineParameterTypeWithDuplicateName() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"name\", \".*\", String.class, (s) -> s, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"name\", \".*\", String.class, (s) -> s, false, false);\n\n        registry.defineParameterType(parameterType1);\n        assertThrows(DuplicateTypeNameException.class, () -> registry.defineParameterType(parameterType2));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithAnonymousDuplicateName() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"\", \".*\", String.class, (s) -> s, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"\", \".*\", String.class, (s) -> s, false, false);\n\n        registry.defineParameterType(parameterType1);\n        assertThrows(DuplicateTypeNameException.class, () -> registry.defineParameterType(parameterType2));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithPreferentialConflict() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"name1\", \".*\", String.class, (s) -> s, false, true);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"name2\", \".*\", String.class, (s) -> s, false, true);\n\n        registry.defineParameterType(parameterType1);\n        assertThrows(CucumberExpressionException.class, () -> registry.defineParameterType(parameterType2));\n    }\n\n    @Test\n    public void testDefineParameterTypeSuccess() {\n        ParameterType<String> parameterType = new ParameterType<>(\"name\", \".*\", String.class, (s) -> s, false, false);\n        assertDoesNotThrow(() -> registry.defineParameterType(parameterType));\n    }\n}\n"}]