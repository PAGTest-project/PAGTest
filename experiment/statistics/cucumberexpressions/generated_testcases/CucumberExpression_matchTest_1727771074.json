[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.*;\n\npublic class CucumberExpression_matchTest {\n\n    @Test\n    public void testMatch_SuccessfulMatch() {\n        // Given\n        String text = \"some text\";\n        Type[] typeHints = {String.class};\n\n        TreeRegexp treeRegexp = mock(TreeRegexp.class);\n        Group group = mock(Group.class);\n        ParameterTypeRegistry parameterTypeRegistry = mock(ParameterTypeRegistry.class);\n        ParameterByTypeTransformer defaultTransformer = mock(ParameterByTypeTransformer.class);\n        ParameterType<?> parameterType = mock(ParameterType.class);\n\n        when(treeRegexp.match(text)).thenReturn(group);\n        when(parameterTypeRegistry.getDefaultParameterTransformer()).thenReturn(defaultTransformer);\n        when(parameterType.isAnonymous()).thenReturn(false);\n\n        CucumberExpression cucumberExpression = new CucumberExpression(\"expression\", parameterTypeRegistry) {\n            @Override\n            public List<Argument<?>> match(String text, Type... typeHints) {\n                this.treeRegexp = treeRegexp;\n                this.parameterTypes.add(parameterType);\n                return super.match(text, typeHints);\n            }\n        };\n\n        // When\n        List<Argument<?>> result = cucumberExpression.match(text, typeHints);\n\n        // Then\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testMatch_NoMatch() {\n        // Given\n        String text = \"some text\";\n        Type[] typeHints = {String.class};\n\n        TreeRegexp treeRegexp = mock(TreeRegexp.class);\n        ParameterTypeRegistry parameterTypeRegistry = mock(ParameterTypeRegistry.class);\n\n        when(treeRegexp.match(text)).thenReturn(null);\n\n        CucumberExpression cucumberExpression = new CucumberExpression(\"expression\", parameterTypeRegistry) {\n            @Override\n            public List<Argument<?>> match(String text, Type... typeHints) {\n                this.treeRegexp = treeRegexp;\n                return super.match(text, typeHints);\n            }\n        };\n\n        // When\n        List<Argument<?>> result = cucumberExpression.match(text, typeHints);\n\n        // Then\n        assertNull(result);\n    }\n}\n"}]