[{"strategy": "retry", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Type;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.Locale;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BuiltInParameterTransformer_transformTest {\n\n    private BuiltInParameterTransformer transformer;\n\n    @BeforeEach\n    void setUp() {\n        transformer = new BuiltInParameterTransformer(Locale.ENGLISH);\n    }\n\n    @Test\n    void testTransformStringToBigDecimal() {\n        String fromValue = \"123.45\";\n        Type toValueType = BigDecimal.class;\n        Object result = transformer.transform(fromValue, toValueType);\n        assertEquals(new BigDecimal(\"123.45\"), result);\n    }\n\n    @Test\n    void testTransformStringToOptionalBigDecimal() {\n        String fromValue = \"123.45\";\n        Type toValueType = new ParameterizedTypeImpl(Optional.class, new Type[]{BigDecimal.class});\n        Object result = transformer.transform(fromValue, toValueType);\n        assertEquals(Optional.of(new BigDecimal(\"123.45\")), result);\n    }\n\n    @Test\n    void testTransformStringToUnsupportedType() {\n        String fromValue = \"test\";\n        Type toValueType = this.getClass();\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.transform(fromValue, toValueType);\n        });\n    }\n\n    @Test\n    void testTransformNullValue() {\n        String fromValue = null;\n        Type toValueType = BigDecimal.class;\n        Object result = transformer.transform(fromValue, toValueType);\n        assertNull(result);\n    }\n\n    @Test\n    void testTransformStringToEnum() {\n        String fromValue = \"VALUE1\";\n        Type toValueType = TestEnum.class;\n        Object result = transformer.transform(fromValue, toValueType);\n        assertEquals(TestEnum.VALUE1, result);\n    }\n\n    private enum TestEnum {\n        VALUE1, VALUE2\n    }\n\n    private static class ParameterizedTypeImpl implements java.lang.reflect.ParameterizedType {\n        private final Type rawType;\n        private final Type[] typeArguments;\n\n        public ParameterizedTypeImpl(Type rawType, Type[] typeArguments) {\n            this.rawType = rawType;\n            this.typeArguments = typeArguments;\n        }\n\n        @Override\n        public Type[] getActualTypeArguments() {\n            return typeArguments;\n        }\n\n        @Override\n        public Type getRawType() {\n            return rawType;\n        }\n\n        @Override\n        public Type getOwnerType() {\n            return null;\n        }\n    }\n}\n"}]