{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/RegularExpression.java.RegularExpression", "class_docstring": "", "superclasses": "", "super_interfaces": ["Expression"], "methods": [{"method_name": "RegularExpression", "description": "Constructor that initializes the regular expression, parameter type registry, and creates a TreeRegexp instance.", "expected_testcases": [{"testcase_name": "ValidInitialization", "description": "Initialize with a valid Pattern and ParameterTypeRegistry, expecting no exceptions and proper initialization of all fields."}, {"testcase_name": "NullPattern", "description": "Initialize with a null Pattern, expecting a NullPointerException or similar exception."}, {"testcase_name": "NullParameterTypeRegistry", "description": "Initialize with a null ParameterTypeRegistry, expecting a NullPointerException or similar exception."}]}, {"method_name": "match", "description": "Matches the input text against the regular expression and returns a list of arguments based on the captured groups and type hints.", "expected_testcases": [{"testcase_name": "MatchWithValidText", "description": "Provide a valid text that matches the regular expression, expecting a list of arguments with the correct types."}, {"testcase_name": "MatchWithInvalidText", "description": "Provide a text that does not match the regular expression, expecting a null return value."}, {"testcase_name": "MatchWithEmptyText", "description": "Provide an empty text, expecting a null return value if the regular expression does not match empty strings."}, {"testcase_name": "MatchWithTypeHints", "description": "Provide a text that matches the regular expression and type hints, expecting the arguments to be of the hinted types."}, {"testcase_name": "MatchWithoutTypeHints", "description": "Provide a text that matches the regular expression without type hints, expecting the arguments to be of default types (e.g., String)."}, {"testcase_name": "MatchWithConflictingTypeHints", "description": "Provide a text that matches the regular expression and conflicting type hints, expecting the parameter type associated with the regular expression to be used."}, {"testcase_name": "MatchWithStrongTypeHint", "description": "Provide a text that matches the regular expression and a strong type hint, expecting the strong type hint to be used."}]}, {"method_name": "getRegexp", "description": "Returns the regular expression pattern used by this instance.", "expected_testcases": [{"testcase_name": "GetRegexpAfterInitialization", "description": "Call getRegexp after initialization, expecting the same Pattern object that was passed to the constructor."}]}, {"method_name": "getSource", "description": "Returns the source string of the regular expression pattern.", "expected_testcases": [{"testcase_name": "GetSourceAfterInitialization", "description": "Call getSource after initialization, expecting the same string pattern that was passed to the constructor."}]}], "overrides": null, "class_name": "RegularExpression", "description": "Class responsible for handling regular expressions and matching them against input text, using a parameter type registry to determine the types of captured groups."}