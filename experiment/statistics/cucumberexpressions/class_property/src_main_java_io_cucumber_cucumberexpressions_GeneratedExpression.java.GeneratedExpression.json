{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/GeneratedExpression.java.GeneratedExpression", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "GeneratedExpression", "description": "Constructor that initializes the expression template and parameter types.", "expected_testcases": []}, {"method_name": "isJavaKeyword", "description": "Private static method that checks if a given string is a Java keyword using binary search and a collator for English locale.", "expected_testcases": [{"testcase_name": "ValidJavaKeyword", "description": "Check if 'abstract' is recognized as a Java keyword, expecting true."}, {"testcase_name": "InvalidJavaKeyword", "description": "Check if 'notakeyword' is recognized as a Java keyword, expecting false."}, {"testcase_name": "CaseSensitivity", "description": "Check if 'Abstract' (with different case) is recognized as a Java keyword, expecting false."}]}, {"method_name": "getSource", "description": "Public method that generates the source code by formatting the expression template with the parameter type names.", "expected_testcases": [{"testcase_name": "SingleParameter", "description": "Generate source with a single parameter type, expecting the template to be formatted with that single parameter name."}, {"testcase_name": "MultipleParameters", "description": "Generate source with multiple parameter types, expecting the template to be formatted with all parameter names in sequence."}, {"testcase_name": "EmptyParameters", "description": "Generate source with no parameter types, expecting the template to be formatted with an empty array."}]}, {"method_name": "getParameterName", "description": "Private method that generates a unique parameter name based on the type name, ensuring it does not conflict with Java keywords and handles duplicates by appending a count.", "expected_testcases": [{"testcase_name": "UniqueTypeName", "description": "Generate a parameter name for a unique type name, expecting the name to be the same as the type name."}, {"testcase_name": "DuplicateTypeName", "description": "Generate a parameter name for a type name that has been used before, expecting the name to have a count appended."}, {"testcase_name": "JavaKeywordConflict", "description": "Generate a parameter name that is a Java keyword, expecting the name to have a count appended."}]}, {"method_name": "getParameterNames", "description": "Public method that generates a list of unique parameter names for the parameter types.", "expected_testcases": [{"testcase_name": "UniqueParameterNames", "description": "Generate parameter names for a list of unique parameter types, expecting each name to be unique and not a Java keyword."}, {"testcase_name": "DuplicateParameterNames", "description": "Generate parameter names for a list of parameter types with duplicates, expecting each name to be unique and not a Java keyword, with counts appended for duplicates."}, {"testcase_name": "EmptyParameterTypes", "description": "Generate parameter names for an empty list of parameter types, expecting an empty list."}]}, {"method_name": "getParameterTypes", "description": "Public method that returns the list of parameter types.", "expected_testcases": [{"testcase_name": "NonEmptyParameterTypes", "description": "Return the list of parameter types when it is non-empty, expecting the list to match the input."}, {"testcase_name": "EmptyParameterTypes", "description": "Return the list of parameter types when it is empty, expecting an empty list."}]}], "overrides": null, "class_name": "GeneratedExpression", "description": "Class responsible for generating expressions based on a template and a list of parameter types. It ensures that generated parameter names do not conflict with Java keywords and handles duplicate type names by appending a count."}