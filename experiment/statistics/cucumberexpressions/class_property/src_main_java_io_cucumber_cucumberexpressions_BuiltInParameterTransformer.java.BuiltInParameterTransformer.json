{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer.java.BuiltInParameterTransformer", "class_docstring": "", "superclasses": "", "super_interfaces": ["ParameterByTypeTransformer"], "methods": [{"method_name": "transform", "description": "Transforms a string value into an object of the specified type. Delegates the actual transformation to the doTransform method.", "expected_testcases": [{"testcase_name": "TransformToOptional", "description": "Test transforming a string into an Optional type, expecting the string to be wrapped in an Optional."}, {"testcase_name": "TransformToUnsupportedType", "description": "Test transforming a string into an unsupported type, expecting an IllegalArgumentException to be thrown."}, {"testcase_name": "TransformNullString", "description": "Test transforming a null string, expecting a null result."}]}, {"method_name": "doTransform", "description": "Performs the actual transformation of a string value into the specified type. Handles various types including primitives, wrappers, BigInteger, BigDecimal, enums, and more.", "expected_testcases": [{"testcase_name": "TransformToString", "description": "Test transforming a string into a String type, expecting the same string as the result."}, {"testcase_name": "TransformToCharacter", "description": "Test transforming a single character string into a Character type, expecting the character as the result."}, {"testcase_name": "TransformToBigInteger", "description": "Test transforming a numeric string into a BigInteger type, expecting a BigInteger object as the result."}, {"testcase_name": "TransformToBigDecimal", "description": "Test transforming a numeric string into a BigDecimal type, expecting a BigDecimal object as the result."}, {"testcase_name": "TransformToPrimitiveAndWrapperTypes", "description": "Test transforming a numeric string into various primitive and wrapper types (Byte, Short, Integer, Long, Float, Double), expecting the corresponding type as the result."}, {"testcase_name": "TransformToBoolean", "description": "Test transforming a string into a Boolean type, expecting a Boolean object as the result."}, {"testcase_name": "TransformToEnum", "description": "Test transforming a string into an Enum type, expecting the corresponding enum constant as the result."}, {"testcase_name": "TransformToInvalidEnum", "description": "Test transforming a string into an Enum type with an invalid value, expecting a CucumberExpressionException to be thrown."}, {"testcase_name": "TransformToUnsupportedType", "description": "Test transforming a string into an unsupported type, expecting an IllegalArgumentException to be thrown."}]}, {"method_name": "getOptionalGenericType", "description": "Determines the generic type of an Optional if the provided type is an Optional. Returns null otherwise.", "expected_testcases": [{"testcase_name": "GetOptionalGenericTypeForOptional", "description": "Test getting the generic type for an Optional type, expecting the generic type to be returned."}, {"testcase_name": "GetOptionalGenericTypeForNonOptional", "description": "Test getting the generic type for a non-Optional type, expecting null to be returned."}]}, {"method_name": "createIllegalArgumentException", "description": "Creates an IllegalArgumentException with a specific error message indicating that the transformation is not supported for the given type.", "expected_testcases": [{"testcase_name": "CreateIllegalArgumentException", "description": "Test creating an IllegalArgumentException, expecting an IllegalArgumentException with the correct error message to be created."}]}], "overrides": null, "class_name": "BuiltInParameterTransformer", "description": "A final class that implements the ParameterByTypeTransformer interface, responsible for transforming string values into various types based on the provided Type."}