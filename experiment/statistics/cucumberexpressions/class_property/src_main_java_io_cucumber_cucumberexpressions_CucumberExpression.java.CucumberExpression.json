{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/CucumberExpression.java.CucumberExpression", "class_docstring": "", "superclasses": "", "super_interfaces": ["Expression"], "methods": [{"method_name": "CucumberExpression", "description": "Constructor that initializes the CucumberExpression object by parsing the given expression and creating a corresponding TreeRegexp object.", "expected_testcases": [{"testcase_name": "ValidExpression", "description": "Create a CucumberExpression with a valid expression string, expecting the object to be initialized correctly with the provided expression and parameter type registry."}, {"testcase_name": "InvalidExpression", "description": "Attempt to create a CucumberExpression with an invalid expression string, expecting an exception to be thrown during parsing."}]}, {"method_name": "rewriteToRegex", "description": "Rewrites the given AST node into a regular expression pattern based on the node type.", "expected_testcases": [{"testcase_name": "TextNode", "description": "Pass a TEXT_NODE to rewriteToRegex, expecting the method to return the escaped text of the node."}, {"testcase_name": "OptionalNode", "description": "Pass an OPTIONAL_NODE to rewriteToRegex, expecting the method to return a regex pattern representing the optional parts."}, {"testcase_name": "AlternationNode", "description": "Pass an ALTERNATION_NODE to rewriteToRegex, expecting the method to return a regex pattern representing the alternation."}, {"testcase_name": "AlternativeNode", "description": "Pass an ALTERNATIVE_NODE to rewriteToRegex, expecting the method to return a regex pattern representing the alternatives."}, {"testcase_name": "ParameterNode", "description": "Pass a PARAMETER_NODE to rewriteToRegex, expecting the method to return a regex pattern representing the parameter type."}, {"testcase_name": "ExpressionNode", "description": "Pass an EXPRESSION_NODE to rewriteToRegex, expecting the method to return a regex pattern representing the entire expression."}, {"testcase_name": "InvalidNodeType", "description": "Pass an unsupported node type to rewriteToRegex, expecting an IllegalArgumentException to be thrown."}]}, {"method_name": "match", "description": "Matches the given text against the parsed Cucumber expression and returns a list of arguments if the match is successful.", "expected_testcases": [{"testcase_name": "SuccessfulMatch", "description": "Pass a text that matches the Cucumber expression, expecting a list of arguments to be returned."}, {"testcase_name": "NoMatch", "description": "Pass a text that does not match the Cucumber expression, expecting null to be returned."}, {"testcase_name": "MatchWithTypeHints", "description": "Pass a text that matches the Cucumber expression along with type hints, expecting the arguments to be transformed according to the type hints."}]}, {"method_name": "getSource", "description": "Returns the original source expression string used to create the CucumberExpression object.", "expected_testcases": [{"testcase_name": "GetSource", "description": "Call getSource on a CucumberExpression object, expecting the original expression string to be returned."}]}, {"method_name": "getRegexp", "description": "Returns the compiled regular expression pattern derived from the Cucumber expression.", "expected_testcases": [{"testcase_name": "GetRegexp", "description": "Call getRegexp on a CucumberExpression object, expecting the compiled regex pattern to be returned."}]}], "overrides": null, "class_name": "CucumberExpression", "description": "Class responsible for parsing and matching Cucumber expressions, converting them into regular expressions and handling parameter types."}