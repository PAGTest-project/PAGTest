{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/CucumberExpressionParser.java.CucumberExpressionParser", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "parse", "description": "Parses a given Cucumber expression string into a structured representation (Node). It tokenizes the expression and then applies the appropriate parsers to construct the AST (Abstract Syntax Tree).", "expected_testcases": [{"testcase_name": "ValidCucumberExpression", "description": "Parse a valid Cucumber expression with a mix of text, parameters, and optionals, expecting a successful parsing with a correctly structured Node returned."}, {"testcase_name": "EmptyExpression", "description": "Parse an empty Cucumber expression, expecting a successful parsing with an empty Node returned."}, {"testcase_name": "InvalidExpression", "description": "Parse an invalid Cucumber expression that contains syntax errors, expecting an exception to be thrown."}, {"testcase_name": "ExpressionWithAlternation", "description": "Parse a Cucumber expression that includes alternation, expecting a successful parsing with the alternation correctly represented in the Node structure."}]}, {"method_name": "parseBetween", "description": "Helper method that parses tokens between specified begin and end tokens, using a list of sub-parsers to handle the content within the boundaries.", "expected_testcases": [{"testcase_name": "ValidContentBetweenTokens", "description": "Parse valid content between specified begin and end tokens, expecting a successful parsing with the content correctly structured in the Node."}, {"testcase_name": "MissingEndToken", "description": "Attempt to parse content where the end token is missing, expecting an exception to be thrown."}, {"testcase_name": "EmptyContentBetweenTokens", "description": "Parse empty content between specified begin and end tokens, expecting a successful parsing with an empty Node returned."}]}, {"method_name": "parseTokensUntil", "description": "Helper method that parses tokens until any of the specified end tokens are encountered.", "expected_testcases": [{"testcase_name": "ValidTokensUntilEnd", "description": "Parse tokens until a specified end token is encountered, expecting a successful parsing with the tokens correctly structured in the Node."}, {"testcase_name": "NoEndTokenFound", "description": "Attempt to parse tokens where none of the specified end tokens are found, expecting an exception to be thrown."}, {"testcase_name": "EmptyTokensUntilEnd", "description": "Parse empty tokens until a specified end token is encountered, expecting a successful parsing with an empty Node returned."}]}, {"method_name": "parseToken", "description": "Helper method that attempts to parse a single token using a list of parsers.", "expected_testcases": [{"testcase_name": "ValidTokenParsing", "description": "Parse a valid token using the appropriate parser, expecting a successful parsing with the token correctly structured in the Node."}, {"testcase_name": "NoEligibleParsers", "description": "Attempt to parse a token with no eligible parsers, expecting an exception to be thrown."}]}, {"method_name": "lookingAtAny", "description": "Helper method that checks if the current token matches any of the specified token types.", "expected_testcases": [{"testcase_name": "TokenMatchesOneType", "description": "Check if a token matches one of the specified types, expecting a true result."}, {"testcase_name": "TokenMatchesNoneType", "description": "Check if a token matches none of the specified types, expecting a false result."}]}, {"method_name": "lookingAt", "description": "Helper method that checks if the current token matches the specified token type.", "expected_testcases": [{"testcase_name": "TokenMatchesType", "description": "Check if a token matches the specified type, expecting a true result."}, {"testcase_name": "TokenDoesNotMatchType", "description": "Check if a token does not match the specified type, expecting a false result."}]}, {"method_name": "splitAlternatives", "description": "Helper method that splits a list of nodes representing an alternation into separate alternatives based on the separator nodes.", "expected_testcases": [{"testcase_name": "ValidAlternativesSplit", "description": "Split a list of nodes representing an alternation with valid separators, expecting the alternatives to be correctly split and structured."}, {"testcase_name": "NoSeparators", "description": "Attempt to split a list of nodes with no separators, expecting the list to remain unchanged."}]}, {"method_name": "createAlternativeNodes", "description": "Helper method that creates alternative nodes from a list of alternatives and their corresponding separators.", "expected_testcases": [{"testcase_name": "ValidAlternativesCreation", "description": "Create alternative nodes from a list of valid alternatives and separators, expecting the alternatives to be correctly structured."}, {"testcase_name": "EmptyAlternatives", "description": "Attempt to create alternative nodes from an empty list of alternatives, expecting an empty list of nodes."}]}], "overrides": null, "class_name": "CucumberExpressionParser", "description": "Class responsible for parsing Cucumber expressions, which are used to define patterns for matching step definitions in Cucumber tests."}