{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry.java.ParameterTypeRegistry", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "ParameterTypeRegistry", "description": "Constructor that initializes the registry with built-in parameter types and sets up the default parameter transformer based on the provided locale.", "expected_testcases": [{"testcase_name": "InitializationWithDefaultLocale", "description": "Test the constructor with the default locale, expecting all built-in parameter types to be defined correctly."}, {"testcase_name": "InitializationWithCustomLocale", "description": "Test the constructor with a custom locale, expecting the float regex to be localized correctly."}]}, {"method_name": "defineParameterType", "description": "Defines a new parameter type in the registry, handling duplicate type names and regex conflicts.", "expected_testcases": [{"testcase_name": "DefineNewParameterType", "description": "Define a new parameter type, expecting it to be added to the registry without errors."}, {"testcase_name": "DuplicateTypeName", "description": "Attempt to define a parameter type with a name that already exists, expecting a DuplicateTypeNameException."}, {"testcase_name": "PreferentialParameterTypeConflict", "description": "Attempt to define two preferential parameter types with the same regex, expecting a CucumberExpressionException."}]}, {"method_name": "getDefaultParameterTransformer", "description": "Retrieves the default parameter transformer used by the registry.", "expected_testcases": [{"testcase_name": "GetDefaultParameterTransformer", "description": "Retrieve the default parameter transformer, expecting it to match the one set during initialization."}]}, {"method_name": "setDefaultParameterTransformer", "description": "Sets a new default parameter transformer for the registry.", "expected_testcases": [{"testcase_name": "SetNewDefaultParameterTransformer", "description": "Set a new default parameter transformer, expecting the registry to use the new transformer for subsequent operations."}]}, {"method_name": "lookupByTypeName", "description": "Looks up a parameter type by its name.", "expected_testcases": [{"testcase_name": "LookupExistingParameterType", "description": "Lookup an existing parameter type by name, expecting the correct parameter type to be returned."}, {"testcase_name": "LookupNonExistingParameterType", "description": "Lookup a non-existing parameter type by name, expecting null to be returned."}]}, {"method_name": "lookupByRegexp", "description": "Looks up a parameter type by its regex pattern, handling ambiguity if multiple types match the same pattern.", "expected_testcases": [{"testcase_name": "LookupByUniqueRegex", "description": "Lookup a parameter type by a unique regex pattern, expecting the correct parameter type to be returned."}, {"testcase_name": "LookupByAmbiguousRegex", "description": "Lookup a parameter type by a regex pattern that matches multiple types, expecting an AmbiguousParameterTypeException."}]}, {"method_name": "getParameterTypes", "description": "Retrieves all parameter types currently defined in the registry.", "expected_testcases": [{"testcase_name": "GetAllParameterTypes", "description": "Retrieve all parameter types, expecting a collection of all defined parameter types."}]}], "overrides": null, "class_name": "ParameterTypeRegistry", "description": "Class responsible for managing and defining parameter types used in Cucumber expressions, including their regex patterns and transformations."}