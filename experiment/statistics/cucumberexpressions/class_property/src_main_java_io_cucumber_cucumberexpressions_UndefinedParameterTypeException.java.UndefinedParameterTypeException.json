{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/UndefinedParameterTypeException.java.UndefinedParameterTypeException", "class_docstring": "", "superclasses": "CucumberExpressionException", "super_interfaces": [], "methods": [{"method_name": "UndefinedParameterTypeException", "description": "Constructor that initializes the exception with a message and the name of the undefined parameter type.", "expected_testcases": [{"testcase_name": "ValidInitialization", "description": "Initialize the exception with a valid message and parameter type name, expecting the exception to be created without errors."}, {"testcase_name": "EmptyMessage", "description": "Initialize the exception with an empty message and a valid parameter type name, expecting the exception to be created without errors."}, {"testcase_name": "EmptyParameterTypeName", "description": "Initialize the exception with a valid message and an empty parameter type name, expecting the exception to be created without errors."}]}, {"method_name": "getUndefinedParameterTypeName", "description": "Returns the name of the undefined parameter type.", "expected_testcases": [{"testcase_name": "ValidParameterTypeName", "description": "Get the parameter type name after initializing the exception with a valid name, expecting the correct name to be returned."}, {"testcase_name": "EmptyParameterTypeName", "description": "Get the parameter type name after initializing the exception with an empty name, expecting an empty string to be returned."}]}, {"method_name": "createUndefinedParameterType", "description": "Creates an exception for an undefined parameter type, including detailed error message generation.", "expected_testcases": [{"testcase_name": "ValidNodeAndExpression", "description": "Create an exception with a valid node, expression, and parameter type name, expecting the exception to be created with the correct message."}, {"testcase_name": "NullNode", "description": "Create an exception with a null node, expecting a NullPointerException or similar error to be thrown."}, {"testcase_name": "EmptyExpression", "description": "Create an exception with an empty expression, expecting the exception to be created with the correct message."}]}, {"method_name": "createMissingEndToken", "description": "Creates an exception for a missing end token in the expression.", "expected_testcases": [{"testcase_name": "ValidTokens", "description": "Create an exception with valid begin and end tokens, expecting the exception to be created with the correct message."}, {"testcase_name": "NullCurrentToken", "description": "Create an exception with a null current token, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createAlternationNotAllowedInOptional", "description": "Creates an exception for an alternation not allowed within an optional.", "expected_testcases": [{"testcase_name": "ValidToken", "description": "Create an exception with a valid token, expecting the exception to be created with the correct message."}, {"testcase_name": "NullToken", "description": "Create an exception with a null token, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createTheEndOfLineCanNotBeEscaped", "description": "Creates an exception for attempting to escape the end of a line.", "expected_testcases": [{"testcase_name": "ValidExpression", "description": "Create an exception with a valid expression, expecting the exception to be created with the correct message."}, {"testcase_name": "EmptyExpression", "description": "Create an exception with an empty expression, expecting the exception to be created with the correct message."}]}, {"method_name": "createAlternativeMayNotBeEmpty", "description": "Creates an exception for an empty alternative in the expression.", "expected_testcases": [{"testcase_name": "ValidNode", "description": "Create an exception with a valid node, expecting the exception to be created with the correct message."}, {"testcase_name": "NullNode", "description": "Create an exception with a null node, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createParameterIsNotAllowedInOptional", "description": "Creates an exception for a parameter type not allowed within an optional.", "expected_testcases": [{"testcase_name": "ValidNode", "description": "Create an exception with a valid node, expecting the exception to be created with the correct message."}, {"testcase_name": "NullNode", "description": "Create an exception with a null node, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createOptionalIsNotAllowedInOptional", "description": "Creates an exception for an optional not allowed within another optional.", "expected_testcases": [{"testcase_name": "ValidNode", "description": "Create an exception with a valid node, expecting the exception to be created with the correct message."}, {"testcase_name": "NullNode", "description": "Create an exception with a null node, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createOptionalMayNotBeEmpty", "description": "Creates an exception for an empty optional in the expression.", "expected_testcases": [{"testcase_name": "ValidNode", "description": "Create an exception with a valid node, expecting the exception to be created with the correct message."}, {"testcase_name": "NullNode", "description": "Create an exception with a null node, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createAlternativeMayNotExclusivelyContainOptionals", "description": "Creates an exception for an alternative that exclusively contains optionals.", "expected_testcases": [{"testcase_name": "ValidNode", "description": "Create an exception with a valid node, expecting the exception to be created with the correct message."}, {"testcase_name": "NullNode", "description": "Create an exception with a null node, expecting a NullPointerException or similar error to be thrown."}]}, {"method_name": "createCantEscape", "description": "Creates an exception for attempting to escape an invalid character.", "expected_testcases": [{"testcase_name": "ValidIndex", "description": "Create an exception with a valid index, expecting the exception to be created with the correct message."}, {"testcase_name": "OutOfBoundsIndex", "description": "Create an exception with an index out of bounds, expecting the exception to be created with the correct message."}]}, {"method_name": "createInvalidParameterTypeName", "description": "Creates an exception for an invalid parameter type name.", "expected_testcases": [{"testcase_name": "ValidName", "description": "Create an exception with a valid name, expecting the exception to be created with the correct message."}, {"testcase_name": "InvalidName", "description": "Create an exception with an invalid name, expecting the exception to be created with the correct message."}]}, {"method_name": "message", "description": "Generates a detailed error message for the exception.", "expected_testcases": [{"testcase_name": "ValidInputs", "description": "Generate a message with valid inputs, expecting the correct detailed message to be returned."}, {"testcase_name": "InvalidIndex", "description": "Generate a message with an invalid index, expecting the correct detailed message to be returned."}]}, {"method_name": "pointAt", "description": "Generates a pointer string to indicate the position of the error in the expression.", "expected_testcases": [{"testcase_name": "ValidNode", "description": "Generate a pointer with a valid node, expecting the correct pointer string to be returned."}, {"testcase_name": "NullNode", "description": "Generate a pointer with a null node, expecting a NullPointerException or similar error to be thrown."}]}], "overrides": null, "class_name": "UndefinedParameterTypeException", "description": "This class extends CucumberExpressionException and is used to handle exceptions related to undefined parameter types in Cucumber expressions."}