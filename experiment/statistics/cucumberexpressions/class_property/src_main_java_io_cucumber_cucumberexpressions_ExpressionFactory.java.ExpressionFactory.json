{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/ExpressionFactory.java.ExpressionFactory", "class_docstring": "\nCreates a {@link CucumberExpression} or {@link RegularExpression} from a {@link String}\nusing heuristics. This is particularly useful for languages that don't have a\nliteral syntax for regular expressions. In Java, a regular expression has to be represented as a String.\n\n A string that starts with `^` and/or ends with `$` (or written in script style, i.e. starting with `/` \n and ending with `/`) is considered a regular expression.\n Everything else is considered a Cucumber expression.\n", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "createExpression", "description": "Creates an expression object based on the input string. It determines whether to create a RegularExpression or a CucumberExpression by checking the first and last characters of the input string.", "expected_testcases": [{"testcase_name": "EmptyString", "description": "Test with an empty string input. Expecting a CucumberExpression object to be created."}, {"testcase_name": "RegularExpressionWithAnchors", "description": "Test with an input string starting with '^' or ending with '$'. Expecting a RegularExpression object to be created."}, {"testcase_name": "RegularExpressionWithSlashes", "description": "Test with an input string enclosed in slashes (e.g., '/pattern/'). Expecting a RegularExpression object to be created."}, {"testcase_name": "CucumberExpression", "description": "Test with a regular input string that does not match the conditions for RegularExpression. Expecting a CucumberExpression object to be created."}, {"testcase_name": "InvalidRegularExpression", "description": "Test with an input string that is an invalid regular expression. Expecting a PatternSyntaxException to be thrown."}, {"testcase_name": "CucumberExpressionWithAnchors", "description": "Test with an input string containing anchors (^ or $) but not starting or ending with them. Expecting a CucumberExpressionException to be thrown."}]}, {"method_name": "createRegularExpressionWithAnchors", "description": "A private helper method that creates a RegularExpression object from a string that may contain anchors (^ or $). It handles PatternSyntaxException and checks for Cucumber Expression patterns.", "expected_testcases": []}], "overrides": null, "class_name": "ExpressionFactory", "description": "Class responsible for creating different types of expressions based on the input string. It can create RegularExpression or CucumberExpression objects depending on the content of the input string."}