{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/PatternCompilerProvider.java.PatternCompilerProvider", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "getCompiler", "description": "Synchronized method that returns a PatternCompiler instance. It loads the PatternCompiler using the ServiceLoader if it hasn't been loaded yet.", "expected_testcases": [{"testcase_name": "SinglePatternCompilerFound", "description": "Test when a single PatternCompiler is found by the ServiceLoader. Expect the method to return the found PatternCompiler instance."}, {"testcase_name": "NoPatternCompilerFound", "description": "Test when no PatternCompiler is found by the ServiceLoader. Expect the method to return a DefaultPatternCompiler instance."}, {"testcase_name": "MultiplePatternCompilersFound", "description": "Test when multiple PatternCompilers are found by the ServiceLoader. Expect the method to throw an IllegalStateException with a message listing all found compilers."}, {"testcase_name": "ConcurrentAccess", "description": "Test concurrent access to the getCompiler method. Expect the method to handle concurrent calls without race conditions or inconsistent states."}]}, {"method_name": "findPatternCompiler", "description": "Helper method that iterates over the provided iterator to find and set the PatternCompiler service. If multiple compilers are found, it throws an exception.", "expected_testcases": [{"testcase_name": "SinglePatternCompilerFound", "description": "Test when the iterator contains a single PatternCompiler. Expect the service to be set to this compiler."}, {"testcase_name": "NoPatternCompilerFound", "description": "Test when the iterator is empty. Expect the service to be set to a DefaultPatternCompiler instance."}, {"testcase_name": "MultiplePatternCompilersFound", "description": "Test when the iterator contains multiple PatternCompilers. Expect the method to throw an IllegalStateException with a message listing all found compilers."}]}, {"method_name": "throwMoreThanOneCompilerException", "description": "Private helper method that throws an IllegalStateException if more than one PatternCompiler is found. It collects all found compilers and includes them in the exception message.", "expected_testcases": []}], "overrides": null, "class_name": "PatternCompilerProvider", "description": "A utility class responsible for providing a PatternCompiler instance. It ensures that only one PatternCompiler is loaded from the service loader, or defaults to a DefaultPatternCompiler if none are found."}