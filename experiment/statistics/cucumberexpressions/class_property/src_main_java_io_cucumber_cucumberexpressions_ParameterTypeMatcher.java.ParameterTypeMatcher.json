{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/ParameterTypeMatcher.java.ParameterTypeMatcher", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "ParameterTypeMatcher", "description": "Constructor that initializes the ParameterTypeMatcher with a ParameterType, a Matcher, and a String.", "expected_testcases": []}, {"method_name": "isWhitespaceOrPunctuationOrSymbol", "description": "Private static method that checks if a character is a whitespace, punctuation, or symbol.", "expected_testcases": [{"testcase_name": "WhitespaceCharacter", "description": "Test with a whitespace character, expecting true."}, {"testcase_name": "PunctuationCharacter", "description": "Test with a punctuation character, expecting true."}, {"testcase_name": "SymbolCharacter", "description": "Test with a symbol character, expecting true."}, {"testcase_name": "AlphabetCharacter", "description": "Test with an alphabet character, expecting false."}, {"testcase_name": "DigitCharacter", "description": "Test with a digit character, expecting false."}]}, {"method_name": "advanceToAndFind", "description": "Method that advances the matcher to a new position and finds matches, checking for word boundaries.", "expected_testcases": [{"testcase_name": "MatchFoundWithWordBoundaries", "description": "Test with a text that has a match with word boundaries on both sides, expecting true."}, {"testcase_name": "MatchFoundWithoutWordBoundaries", "description": "Test with a text that has a match without word boundaries on both sides, expecting false."}, {"testcase_name": "NoMatchFound", "description": "Test with a text that does not have any match, expecting false."}, {"testcase_name": "EmptyGroupMatch", "description": "Test with a text that has a match but the group is empty, expecting false."}]}, {"method_name": "groupHasWordBoundaryOnBothSides", "description": "Private method that checks if the current match has word boundaries on both sides.", "expected_testcases": []}, {"method_name": "groupHasLeftWordBoundary", "description": "Private method that checks if the current match has a word boundary on the left side.", "expected_testcases": []}, {"method_name": "groupHasRightWordBoundary", "description": "Private method that checks if the current match has a word boundary on the right side.", "expected_testcases": []}, {"method_name": "start", "description": "Method that returns the start position of the current match.", "expected_testcases": [{"testcase_name": "ValidMatchStart", "description": "Test with a valid match, expecting the correct start position."}, {"testcase_name": "NoMatchStart", "description": "Test with no match, expecting an exception or default value."}]}, {"method_name": "group", "description": "Method that returns the matched group.", "expected_testcases": [{"testcase_name": "ValidMatchGroup", "description": "Test with a valid match, expecting the correct matched group."}, {"testcase_name": "NoMatchGroup", "description": "Test with no match, expecting an exception or default value."}]}, {"method_name": "compareTo", "description": "Method that compares this ParameterTypeMatcher with another one based on start position, group length, and parameter type weight.", "expected_testcases": [{"testcase_name": "DifferentStartPositions", "description": "Test with different start positions, expecting comparison based on start position."}, {"testcase_name": "SameStartPositionsDifferentGroupLengths", "description": "Test with same start positions but different group lengths, expecting comparison based on group length."}, {"testcase_name": "SameStartPositionsSameGroupLengthsDifferentWeights", "description": "Test with same start positions, same group lengths but different parameter type weights, expecting comparison based on weight."}, {"testcase_name": "SameStartPositionsSameGroupLengthsSameWeights", "description": "Test with same start positions, same group lengths, and same parameter type weights, expecting zero comparison result."}]}, {"method_name": "getParameterType", "description": "Method that returns the ParameterType associated with this matcher.", "expected_testcases": [{"testcase_name": "GetParameterType", "description": "Test to retrieve the ParameterType, expecting the correct ParameterType object."}]}, {"method_name": "toString", "description": "Method that returns a string representation of the ParameterType's type.", "expected_testcases": [{"testcase_name": "ToStringRepresentation", "description": "Test to retrieve the string representation, expecting the correct string."}]}], "overrides": null, "class_name": "ParameterTypeMatcher", "description": "A class that matches parameter types using a Matcher and provides comparison functionality for sorting."}