{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/CucumberExpressionException.java.CucumberExpressionException", "class_docstring": "", "superclasses": "RuntimeException", "super_interfaces": [], "methods": [{"method_name": "CucumberExpressionException", "description": "Constructor that initializes the exception with a message.", "expected_testcases": [{"testcase_name": "InitializeWithMessage", "description": "Create an instance of CucumberExpressionException with a specific message, expecting the message to be set correctly."}]}, {"method_name": "CucumberExpressionException", "description": "Constructor that initializes the exception with a message and a cause.", "expected_testcases": [{"testcase_name": "InitializeWithMessageAndCause", "description": "Create an instance of CucumberExpressionException with a specific message and a cause, expecting both the message and cause to be set correctly."}]}, {"method_name": "createMissingEndToken", "description": "Creates an exception for the case where a begin token does not have a matching end token.", "expected_testcases": [{"testcase_name": "MissingEndToken", "description": "Create an exception for a missing end token, providing an expression, begin token, end token, and current token, expecting the correct error message to be generated."}]}, {"method_name": "createAlternationNotAllowedInOptional", "description": "Creates an exception for the case where an alternation is used inside an optional.", "expected_testcases": [{"testcase_name": "AlternationInOptional", "description": "Create an exception for an alternation used inside an optional, providing an expression and current token, expecting the correct error message to be generated."}]}, {"method_name": "createTheEndOfLineCanNotBeEscaped", "description": "Creates an exception for the case where the end of the line is attempted to be escaped.", "expected_testcases": [{"testcase_name": "EndOfLineEscaped", "description": "Create an exception for attempting to escape the end of the line, providing an expression, expecting the correct error message to be generated."}]}, {"method_name": "createAlternativeMayNotBeEmpty", "description": "Creates an exception for the case where an alternative is empty.", "expected_testcases": [{"testcase_name": "EmptyAlternative", "description": "Create an exception for an empty alternative, providing a node and an expression, expecting the correct error message to be generated."}]}, {"method_name": "createParameterIsNotAllowedInOptional", "description": "Creates an exception for the case where a parameter is used inside an optional.", "expected_testcases": [{"testcase_name": "ParameterInOptional", "description": "Create an exception for a parameter used inside an optional, providing a node and an expression, expecting the correct error message to be generated."}]}, {"method_name": "createOptionalIsNotAllowedInOptional", "description": "Creates an exception for the case where an optional is nested inside another optional.", "expected_testcases": [{"testcase_name": "NestedOptional", "description": "Create an exception for an optional nested inside another optional, providing a node and an expression, expecting the correct error message to be generated."}]}, {"method_name": "createOptionalMayNotBeEmpty", "description": "Creates an exception for the case where an optional is empty.", "expected_testcases": [{"testcase_name": "EmptyOptional", "description": "Create an exception for an empty optional, providing a node and an expression, expecting the correct error message to be generated."}]}, {"method_name": "createAlternativeMayNotExclusivelyContainOptionals", "description": "Creates an exception for the case where an alternative exclusively contains optionals.", "expected_testcases": [{"testcase_name": "AlternativeWithOnlyOptionals", "description": "Create an exception for an alternative that exclusively contains optionals, providing a node and an expression, expecting the correct error message to be generated."}]}, {"method_name": "createCantEscape", "description": "Creates an exception for the case where an invalid character is attempted to be escaped.", "expected_testcases": [{"testcase_name": "InvalidEscapeCharacter", "description": "Create an exception for attempting to escape an invalid character, providing an expression and an index, expecting the correct error message to be generated."}]}, {"method_name": "createInvalidParameterTypeName", "description": "Creates an exception for the case where a parameter name contains invalid characters.", "expected_testcases": [{"testcase_name": "InvalidParameterName", "description": "Create an exception for an invalid parameter name, providing a name, expecting the correct error message to be generated."}]}, {"method_name": "createInvalidParameterTypeName", "description": "Creates an exception for the case where a parameter name contains invalid characters, with additional context from a token and expression.", "expected_testcases": [{"testcase_name": "InvalidParameterNameWithContext", "description": "Create an exception for an invalid parameter name with additional context, providing a token and an expression, expecting the correct error message to be generated."}]}, {"method_name": "message", "description": "Generates a detailed error message for a Cucumber expression issue.", "expected_testcases": [{"testcase_name": "GenerateErrorMessage", "description": "Generate an error message for a Cucumber expression issue, providing an index, expression, pointer, problem, and solution, expecting the correct formatted message to be returned."}]}, {"method_name": "pointAt", "description": "Generates a string that points to a specific location in the expression.", "expected_testcases": [{"testcase_name": "PointAtLocation", "description": "Generate a string that points to a specific location in the expression, providing a node, expecting the correct pointer string to be returned."}]}, {"method_name": "pointAt", "description": "Generates a string that points to a specific index in the expression.", "expected_testcases": [{"testcase_name": "PointAtIndex", "description": "Generate a string that points to a specific index in the expression, providing an index, expecting the correct pointer string to be returned."}]}], "overrides": null, "class_name": "CucumberExpressionException", "description": "Class responsible for handling exceptions related to Cucumber expressions, providing detailed error messages for various expression issues."}