{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/DuplicateTypeNameException.java.DuplicateTypeNameException", "class_docstring": "", "superclasses": "CucumberExpressionException", "super_interfaces": [], "methods": [{"method_name": "DuplicateTypeNameException", "description": "Constructor that initializes the exception with a specific message.", "expected_testcases": [{"testcase_name": "InstantiateWithMessage", "description": "Create an instance of DuplicateTypeNameException with a specific message, expecting the message to be correctly set."}]}, {"method_name": "createMissingEndToken", "description": "Creates a CucumberExpressionException indicating that a begin token does not have a matching end token.", "expected_testcases": [{"testcase_name": "MissingEndToken", "description": "Create an exception for a missing end token, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createAlternationNotAllowedInOptional", "description": "Creates a CucumberExpressionException indicating that an alternation is not allowed inside an optional.", "expected_testcases": [{"testcase_name": "AlternationInOptional", "description": "Create an exception for an alternation inside an optional, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createTheEndOfLineCanNotBeEscaped", "description": "Creates a CucumberExpressionException indicating that the end of line cannot be escaped.", "expected_testcases": [{"testcase_name": "EndOfLineEscaped", "description": "Create an exception for attempting to escape the end of line, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createAlternativeMayNotBeEmpty", "description": "Creates a CucumberExpressionException indicating that an alternative may not be empty.", "expected_testcases": [{"testcase_name": "EmptyAlternative", "description": "Create an exception for an empty alternative, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createParameterIsNotAllowedInOptional", "description": "Creates a CucumberExpressionException indicating that a parameter is not allowed inside an optional.", "expected_testcases": [{"testcase_name": "ParameterInOptional", "description": "Create an exception for a parameter inside an optional, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createOptionalIsNotAllowedInOptional", "description": "Creates a CucumberExpressionException indicating that an optional is not allowed inside another optional.", "expected_testcases": [{"testcase_name": "OptionalInOptional", "description": "Create an exception for an optional inside another optional, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createOptionalMayNotBeEmpty", "description": "Creates a CucumberExpressionException indicating that an optional must contain some text.", "expected_testcases": [{"testcase_name": "EmptyOptional", "description": "Create an exception for an empty optional, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createAlternativeMayNotExclusivelyContainOptionals", "description": "Creates a CucumberExpressionException indicating that an alternative may not exclusively contain optionals.", "expected_testcases": [{"testcase_name": "AlternativeWithOnlyOptionals", "description": "Create an exception for an alternative that only contains optionals, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createCantEscape", "description": "Creates a CucumberExpressionException indicating that only specific characters can be escaped.", "expected_testcases": [{"testcase_name": "InvalidEscapeCharacter", "description": "Create an exception for attempting to escape an invalid character, expecting the exception message to correctly describe the issue and provide a solution."}]}, {"method_name": "createInvalidParameterTypeName", "description": "Creates a CucumberExpressionException indicating that a parameter name contains invalid characters.", "expected_testcases": [{"testcase_name": "InvalidParameterName", "description": "Create an exception for an invalid parameter name, expecting the exception message to correctly describe the issue and provide a solution."}]}], "overrides": null, "class_name": "DuplicateTypeNameException", "description": "This class extends CucumberExpressionException and provides constructors and static methods to create specific types of CucumberExpressionException instances, each tailored to handle different error scenarios in Cucumber expressions."}