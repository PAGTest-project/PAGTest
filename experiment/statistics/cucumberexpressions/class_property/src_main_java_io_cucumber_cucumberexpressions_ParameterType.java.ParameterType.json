{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/ParameterType.java.ParameterType", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "checkParameterTypeName", "description": "Validates the given parameter type name to ensure it does not contain illegal characters.", "expected_testcases": [{"testcase_name": "ValidParameterName", "description": "Test with a valid parameter name that does not contain any illegal characters, expecting no exception to be thrown."}, {"testcase_name": "InvalidParameterName", "description": "Test with an invalid parameter name containing illegal characters, expecting a CucumberExpressionException to be thrown."}, {"testcase_name": "EmptyParameterName", "description": "Test with an empty parameter name, expecting no exception to be thrown as it is considered valid."}]}, {"method_name": "isValidParameterTypeName", "description": "Checks if the given parameter type name is valid by ensuring it does not contain illegal characters after unescaping.", "expected_testcases": [{"testcase_name": "ValidParameterName", "description": "Test with a valid parameter name that does not contain any illegal characters, expecting the method to return true."}, {"testcase_name": "InvalidParameterName", "description": "Test with an invalid parameter name containing illegal characters, expecting the method to return false."}, {"testcase_name": "EmptyParameterName", "description": "Test with an empty parameter name, expecting the method to return true as it is considered valid."}]}, {"method_name": "createAnonymousParameterType", "description": "Creates an anonymous parameter type with the given regular expression.", "expected_testcases": [{"testcase_name": "ValidRegexp", "description": "Test with a valid regular expression, expecting an anonymous ParameterType object to be created without exceptions."}, {"testcase_name": "InvalidRegexp", "description": "Test with an invalid regular expression, expecting an exception to be thrown during the creation of the ParameterType object."}]}, {"method_name": "fromEnum", "description": "Creates a ParameterType from an Enum class, using the enum constants as the regular expression.", "expected_testcases": [{"testcase_name": "ValidEnum", "description": "Test with a valid Enum class, expecting a ParameterType object to be created without exceptions."}, {"testcase_name": "EmptyEnum", "description": "Test with an Enum class with no constants, expecting a ParameterType object to be created without exceptions but with an empty regular expression."}]}, {"method_name": "transform", "description": "Transforms a list of captured group values into the specified type using the transformer.", "expected_testcases": [{"testcase_name": "SingleCaptureGroup", "description": "Test with a single capture group, expecting the transformer to successfully transform the value without exceptions."}, {"testcase_name": "MultipleCaptureGroups", "description": "Test with multiple capture groups, expecting a CucumberExpressionException to be thrown if the transformer is not a CaptureGroupTransformer."}, {"testcase_name": "AnonymousParameterTypeWithMultipleGroups", "description": "Test with an anonymous parameter type and multiple capture groups, expecting a CucumberExpressionException to be thrown."}]}, {"method_name": "compareTo", "description": "Compares this ParameterType with another based on preference for regular expression match and name.", "expected_testcases": [{"testcase_name": "PreferentialParameterType", "description": "Test comparing a preferential parameter type with a non-preferential one, expecting a negative comparison result."}, {"testcase_name": "NonPreferentialParameterType", "description": "Test comparing a non-preferential parameter type with a preferential one, expecting a positive comparison result."}, {"testcase_name": "SamePreferenceDifferentName", "description": "Test comparing two parameter types with the same preference but different names, expecting a comparison result based on name."}]}, {"method_name": "weight", "description": "Returns a weight for this parameter type, which is higher for Integer types.", "expected_testcases": [{"testcase_name": "IntegerType", "description": "Test with an Integer type, expecting the method to return a weight of 1000."}, {"testcase_name": "NonIntegerType", "description": "Test with a non-Integer type, expecting the method to return a weight of 0."}]}], "overrides": null, "class_name": "ParameterType", "description": "A class that represents a parameter type in Cucumber expressions, which includes functionality for validating parameter names, creating anonymous parameter types, and transforming captured groups into specific types."}