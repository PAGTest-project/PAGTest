{"class_uri": "src/main/java/io/cucumber/cucumberexpressions/Ast.java.Ast", "class_docstring": "", "superclasses": "", "super_interfaces": [], "methods": [{"method_name": "Node.start", "description": "Returns the start position of the node in the source.", "expected_testcases": [{"testcase_name": "StartPosition", "description": "Create a Node with a known start position and verify that the start() method returns this position."}]}, {"method_name": "Node.end", "description": "Returns the end position of the node in the source.", "expected_testcases": [{"testcase_name": "EndPosition", "description": "Create a Node with a known end position and verify that the end() method returns this position."}]}, {"method_name": "Node.nodes", "description": "Returns the list of child nodes of this node.", "expected_testcases": [{"testcase_name": "EmptyNodesList", "description": "Create a Node with no child nodes and verify that the nodes() method returns an empty list."}, {"testcase_name": "NonEmptyNodesList", "description": "Create a Node with several child nodes and verify that the nodes() method returns a list containing these nodes."}]}, {"method_name": "Node.type", "description": "Returns the type of the node.", "expected_testcases": [{"testcase_name": "NodeType", "description": "Create a Node with a specific type and verify that the type() method returns this type."}]}, {"method_name": "Node.text", "description": "Returns the text representation of the node, either from its token or by concatenating the text of its child nodes.", "expected_testcases": [{"testcase_name": "TextFromToken", "description": "Create a Node with a token and verify that the text() method returns the token's text."}, {"testcase_name": "TextFromChildNodes", "description": "Create a Node with child nodes and verify that the text() method returns the concatenated text of these child nodes."}]}, {"method_name": "Node.toString", "description": "Returns a string representation of the node, including its type, start and end positions, token, and child nodes.", "expected_testcases": [{"testcase_name": "ToStringWithToken", "description": "Create a Node with a token and verify that the toString() method returns a string representation including the token."}, {"testcase_name": "ToStringWithChildNodes", "description": "Create a Node with child nodes and verify that the toString() method returns a string representation including these child nodes."}]}, {"method_name": "Node.equals", "description": "Compares this node to another object for equality.", "expected_testcases": [{"testcase_name": "EqualNodes", "description": "Create two Nodes with identical properties and verify that the equals() method returns true."}, {"testcase_name": "UnequalNodes", "description": "Create two Nodes with different properties and verify that the equals() method returns false."}]}, {"method_name": "Node.hashCode", "description": "Returns a hash code value for the node.", "expected_testcases": [{"testcase_name": "HashCodeConsistency", "description": "Create a Node and verify that the hashCode() method returns consistent values across multiple invocations."}]}, {"method_name": "Token.start", "description": "Returns the start position of the token in the source.", "expected_testcases": [{"testcase_name": "TokenStartPosition", "description": "Create a Token with a known start position and verify that the start() method returns this position."}]}, {"method_name": "Token.end", "description": "Returns the end position of the token in the source.", "expected_testcases": [{"testcase_name": "TokenEndPosition", "description": "Create a Token with a known end position and verify that the end() method returns this position."}]}, {"method_name": "Token.equals", "description": "Compares this token to another object for equality.", "expected_testcases": [{"testcase_name": "EqualTokens", "description": "Create two Tokens with identical properties and verify that the equals() method returns true."}, {"testcase_name": "UnequalTokens", "description": "Create two Tokens with different properties and verify that the equals() method returns false."}]}, {"method_name": "Token.hashCode", "description": "Returns a hash code value for the token.", "expected_testcases": [{"testcase_name": "TokenHashCodeConsistency", "description": "Create a Token and verify that the hashCode() method returns consistent values across multiple invocations."}]}, {"method_name": "Token.toString", "description": "Returns a string representation of the token, including its type, start and end positions, and text.", "expected_testcases": [{"testcase_name": "TokenToString", "description": "Create a Token and verify that the toString() method returns a string representation including its type, start and end positions, and text."}]}, {"method_name": "Token.canEscape", "description": "Determines if a given token can be escaped.", "expected_testcases": [{"testcase_name": "CanEscapeWhitespace", "description": "Pass a whitespace character to canEscape() and verify that it returns true."}, {"testcase_name": "CanEscapeSpecialCharacters", "description": "Pass a special character (e.g., escapeCharacter, alternationCharacter) to canEscape() and verify that it returns true."}, {"testcase_name": "CannotEscapeRegularCharacter", "description": "Pass a regular character to canEscape() and verify that it returns false."}]}, {"method_name": "Token.typeOf", "description": "Determines the type of a given token.", "expected_testcases": [{"testcase_name": "TypeOfWhitespace", "description": "Pass a whitespace character to typeOf() and verify that it returns Type.WHITE_SPACE."}, {"testcase_name": "TypeOfSpecialCharacter", "description": "Pass a special character (e.g., alternationCharacter) to typeOf() and verify that it returns the corresponding Type (e.g., Type.ALTERNATION)."}, {"testcase_name": "TypeOfRegularCharacter", "description": "Pass a regular character to typeOf() and verify that it returns Type.TEXT."}]}, {"method_name": "Token.isEscapeCharacter", "description": "Determines if a given token is the escape character.", "expected_testcases": [{"testcase_name": "IsEscapeCharacter", "description": "Pass the escape character to isEscapeCharacter() and verify that it returns true."}, {"testcase_name": "IsNotEscapeCharacter", "description": "Pass a non-escape character to isEscapeCharacter() and verify that it returns false."}]}], "overrides": null, "class_name": "Ast", "description": "Class responsible for representing an Abstract Syntax Tree (AST) with nodes and tokens, each having specific types and positions."}