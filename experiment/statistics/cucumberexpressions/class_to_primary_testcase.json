{"Argument": [{"method_name": "build(List<Group>,List<ParameterType<?>>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}], "ParameterTypeRegistry": [{"method_name": "defineParameterType(ParameterType)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/EnumParameterTypeTest.java", "testclass_name": "EnumParameterTypeTest", "testcase_name": "converts_to_enum"}, {"method_name": "defineParameterType(ParameterType)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java", "testclass_name": "GenericParameterTypeTest", "testcase_name": "transforms_to_a_list_of_string"}, {"method_name": "defineParameterType(ParameterType)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp"}, {"method_name": "defineParameterType(ParameterType)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "does_not_allow_anonymous_parameter_type_to_be_registered"}, {"method_name": "defineParameterType(ParameterType)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_detected_for_type_name"}, {"method_name": "defineParameterType(ParameterType)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_not_detected_for_type"}, {"method_name": "lookupByRegexp(String,Pattern,String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "looks_up_preferential_parameter_type_by_regexp"}, {"method_name": "lookupByRegexp(String,Pattern,String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential"}, {"method_name": "setDefaultParameterTransformer(ParameterByTypeTransformer)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java", "testclass_name": "ParameterTypeRegistry_setDefaultParameterTransformerTest", "testcase_name": "testSetDefaultParameterTransformer"}], "CucumberExpression": [{"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/EnumParameterTypeTest.java", "testclass_name": "EnumParameterTypeTest", "testcase_name": "converts_to_enum"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java", "testclass_name": "GenericParameterTypeTest", "testcase_name": "transforms_to_a_list_of_string"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_custom_parameter_type"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_multiple_capture_groups"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "defers_transformation_until_queried_from_argument"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_not_detected_for_regexp"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "acceptance_tests_pass"}, {"method_name": "getRegexp()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTransformationTest.java", "testclass_name": "CucumberExpressionTransformationTest", "testcase_name": "acceptance_tests_pass"}, {"method_name": "getRegexp()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getRegexpTest.java", "testclass_name": "CucumberExpression_getRegexpTest", "testcase_name": "testGetRegexp"}, {"method_name": "getSource()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "exposes_source"}, {"method_name": "getSource()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getSourceTest.java", "testclass_name": "CucumberExpression_getSourceTest", "testcase_name": "testGetSource"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_anonymous_parameter_type_with_hint"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "documents_match_arguments"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_byte"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_short"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_long"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_biginteger"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_bigdecimal"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_double_with_comma_for_locale_using_comma"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "matches_float_with_zero"}, {"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "unmatched_optional_groups_have_null_values"}, {"method_name": "match(String,Type[])", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_matchTest.java", "testclass_name": "CucumberExpression_matchTest", "testcase_name": "testMatch_SuccessfulMatch"}, {"method_name": "match(String,Type[])", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_matchTest.java", "testclass_name": "CucumberExpression_matchTest", "testcase_name": "testMatch_NoMatch"}], "Expression": [{"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "parse_decimal_numbers_in_english"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "parse_decimal_numbers_in_german"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "parse_decimal_numbers_in_canadian_french"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "testclass_name": "ParameterTypeRegistryTest", "testcase_name": "parse_decimal_numbers_in_norwegian"}], "RegularExpression": [{"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_RegularExpression_arguments_with_custom_parameter_type_without_name"}, {"method_name": "getRegexp()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getRegexpTest.java", "testclass_name": "RegularExpression_getRegexpTest", "testcase_name": "testGetRegexp"}, {"method_name": "match(String,Class,Class,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "warns_when_anonymous_parameter_has_multiple_capture_groups"}, {"method_name": "getSource()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getSourceTest.java", "testclass_name": "RegularExpression_getSourceTest", "testcase_name": "testGetSource"}], "TreeRegexp": [{"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "builds_tree"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_colon_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_exclamation_mark_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_equal_sign_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_equal_sign_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_greater_then_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_named_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_optional_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_nested_groups"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_non_capturing_groups_with_capturing_groups_inside"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "detects_multiple_non_capturing_groups"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_escaped_backslash"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_slash_which_doesnt_need_escaping_in_java"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_digit_and_word"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "doesnt_consider_parenthesis_in_character_class_as_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_flags"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_inline_flags"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_non_capturing_inline_flags"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_non_capturing_group"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_look_ahead"}, {"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "uses_loaded_pattern_compiler_service"}, {"method_name": "getGroupBuilder()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "exposes_group_source"}, {"method_name": "getGroupBuilder()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexp_getGroupBuilderTest.java", "testclass_name": "TreeRegexp_getGroupBuilderTest", "testcase_name": "testGetGroupBuilder"}], "ParameterType": [{"method_name": "getName()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java", "testclass_name": "ParameterTypeComparatorTest", "testcase_name": "sorts_parameter_types_by_preferential_then_name"}, {"method_name": "getName()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getNameTest.java", "testclass_name": "ParameterType_getNameTest", "testcase_name": "testGetName"}, {"method_name": "<init>(String,String,Class,Transformer,boolean,boolean)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "throws_exception_for_illegal_character_in_parameter_name"}, {"method_name": "weight()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java", "testclass_name": "ParameterType_weightTest", "testcase_name": "testWeightForIntegerClass"}, {"method_name": "weight()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java", "testclass_name": "ParameterType_weightTest", "testcase_name": "testWeightForNonIntegerType"}, {"method_name": "getType()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getTypeTest.java", "testclass_name": "ParameterType_getTypeTest", "testcase_name": "getType_returnsCorrectType"}, {"method_name": "preferForRegexpMatch()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java", "testclass_name": "ParameterType_preferForRegexpMatchTest", "testcase_name": "testPreferForRegexpMatch_True"}, {"method_name": "preferForRegexpMatch()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java", "testclass_name": "ParameterType_preferForRegexpMatchTest", "testcase_name": "testPreferForRegexpMatch_False"}, {"method_name": "useRegexpMatchAsStrongTypeHint()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java", "testclass_name": "ParameterType_useRegexpMatchAsStrongTypeHintTest", "testcase_name": "testUseRegexpMatchAsStrongTypeHintTrue"}, {"method_name": "useRegexpMatchAsStrongTypeHint()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java", "testclass_name": "ParameterType_useRegexpMatchAsStrongTypeHintTest", "testcase_name": "testUseRegexpMatchAsStrongTypeHintFalse"}, {"method_name": "getRegexps()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getRegexpsTest.java", "testclass_name": "ParameterType_getRegexpsTest", "testcase_name": "testGetRegexps"}, {"method_name": "useForSnippets()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java", "testclass_name": "ParameterType_useForSnippetsTest", "testcase_name": "testUseForSnippetsTrue"}, {"method_name": "useForSnippets()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java", "testclass_name": "ParameterType_useForSnippetsTest", "testcase_name": "testUseForSnippetsFalse"}], "CucumberExpressionParser": [{"method_name": "parse(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java", "testclass_name": "CucumberExpressionParserTest", "testcase_name": "acceptance_tests_pass"}], "RegexpUtils": [{"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "testclass_name": "RegexpUtilsTest", "testcase_name": "escape_regex_characters"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "testclass_name": "RegexpUtilsTest", "testcase_name": "escape_all_regexp_characters"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "testclass_name": "RegexpUtilsTest", "testcase_name": "escape_escaped_regexp_characters"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "testclass_name": "RegexpUtilsTest", "testcase_name": "do_not_escape_when_there_is_nothing_to_escape"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "testclass_name": "RegexpUtilsTest", "testcase_name": "gives_no_error_for_unicode_characters"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "testclass_name": "RegexpUtils_escapeRegexTest", "testcase_name": "testEscapeRegex_NoSpecialChars"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "testclass_name": "RegexpUtils_escapeRegexTest", "testcase_name": "testEscapeRegex_WithSpecialChars"}, {"method_name": "escapeRegex(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "testclass_name": "RegexpUtils_escapeRegexTest", "testcase_name": "testEscapeRegex_AllSpecialChars"}], "CucumberExpressionTokenizer": [{"method_name": "tokenize(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java", "testclass_name": "CucumberExpressionTokenizerTest", "testcase_name": "acceptance_tests_pass"}], "CombinatorialGeneratedExpressionFactory": [{"method_name": "generateExpressions()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java", "testclass_name": "CombinatorialGeneratedExpressionFactoryTest", "testcase_name": "generates_multiple_expressions"}], "PatternCompilerProvider": [{"method_name": "findPatternCompiler(Iterator<PatternCompiler>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "use_default_compiler_if_none_registered"}, {"method_name": "findPatternCompiler(Iterator<PatternCompiler>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "use_found_pattern_compiler_if_one_provided"}, {"method_name": "findPatternCompiler(Iterator<PatternCompiler>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "throws_error_if_more_than_one_pattern_compiler"}], "NumberParser": [{"method_name": "parseFloat(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "testclass_name": "NumberParserTest", "testcase_name": "can_parse_float"}, {"method_name": "parseFloat(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "testclass_name": "NumberParserTest", "testcase_name": "can_parse_negative"}, {"method_name": "parseDouble(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "testclass_name": "NumberParserTest", "testcase_name": "can_parse_double"}, {"method_name": "parseBigDecimal(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "testclass_name": "NumberParserTest", "testcase_name": "can_parse_big_decimals"}], "BuiltInParameterTransformer": [{"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "simple_object_mapper_only_supports_class_types"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "simple_object_mapper_only_supports_some_optional_types"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "simple_object_mapper_only_supports_some_generic_types"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_transform_optional_generic_string"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_transform_optional_generic_integer"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "testclass_name": "BuiltInParameterTransformer_transformTest", "testcase_name": "testTransformStringToBigDecimal"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "testclass_name": "BuiltInParameterTransformer_transformTest", "testcase_name": "testTransformStringToOptionalBigDecimal"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "testclass_name": "BuiltInParameterTransformer_transformTest", "testcase_name": "testTransformStringToUnsupportedType"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "testclass_name": "BuiltInParameterTransformer_transformTest", "testcase_name": "testTransformNullValue"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "testclass_name": "BuiltInParameterTransformer_transformTest", "testcase_name": "testTransformStringToEnum"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "simple_object_mapper_only_supports_some_class_types"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_throw_exception_for_unknown_enum_values"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_transform_boolean"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_transform_char"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_throw_exception_for_empty_string_with_type_char"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_throw_exception_for_nonsingelchar_string_with_type_char"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "testclass_name": "BuiltInParameterTransformerTest", "testcase_name": "should_transform_optional"}], "ParameterByTypeTransformer": [{"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_null_to_optional_generic"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_optional_string"}, {"method_name": "transform(String,Type)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_optional_integer"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_null_to_null"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_null_to_optional"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_string"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_object"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_big_integer"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_big_decimal"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_byte"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_short"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_integer"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_long"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_float"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_double"}, {"method_name": "transform(String,Class)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "testclass_name": "ParameterByTypeTransformerTest", "testcase_name": "should_convert_to_enum"}], "ExpressionFactory": [{"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_empty"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_by_default"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_anchors"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_slashes"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_parenthesis_with_alpha"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_escaped_parenthesis_with_alpha"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_parenthesis_with_regex_symbols"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_only_begin_anchor"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_only_end_anchor"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_slashed_anchors"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "explains_cukexp_regexp_mix"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "testclass_name": "ExpressionFactory_createExpressionTest", "testcase_name": "testCreateExpression_EmptyString"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "testclass_name": "ExpressionFactory_createExpressionTest", "testcase_name": "testCreateExpression_RegularExpressionWithAnchors"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "testclass_name": "ExpressionFactory_createExpressionTest", "testcase_name": "testCreateExpression_RegularExpressionWithSlashes"}, {"method_name": "createExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "testclass_name": "ExpressionFactory_createExpressionTest", "testcase_name": "testCreateExpression_CucumberExpression"}]}