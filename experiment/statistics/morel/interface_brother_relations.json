[{"uris": "src/main/java/net/hydromatic/morel/eval/Describer.java.Describer", "name": "Describer", "methods": ["[Describer]start(String,Consumer<Detail>)"], "implementations": ["src/main/java/net/hydromatic/morel/eval/DescriberImpl.java.DescriberImpl"]}, {"uris": "src/main/java/net/hydromatic/morel/eval/Code.java.Code", "name": "Code", "methods": ["[Object]eval(EvalEnv)", "[boolean]isConstant()"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/eval/Applicable.java.Applicable", "name": "Applicable", "methods": ["[Object]apply(EvalEnv,Object)", "[Code]asCode()"], "implementations": ["src/main/java/net/hydromatic/morel/eval/Closure.java.Closure"]}, {"uris": "src/main/java/net/hydromatic/morel/eval/File.java.File", "name": "File", "methods": ["[File]expand()", "[File]discoverField(TypeSystem,String)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/eval/EvalEnv.java.EvalEnv", "name": "EvalEnv", "methods": ["[Object]getOpt(String)", "[EvalEnv]bind(String,Object)", "[MutableEvalEnv]bindMutable(String)", "Pat)", "[MutableEvalEnv]bindMutableArray(List<String>)", "[void]visit(BiConsumer<String, Object>)", "[Map<String, Object>]valueMap()", "[EvalEnv]fix()"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/eval/Describable.java.Describable", "name": "Describable", "methods": ["[Describer]describe(Describer)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/eval/MutableEvalEnv.java.MutableEvalEnv", "name": "MutableEvalEnv", "methods": ["[void]set(Object)", "[boolean]setOpt(Object)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/compile/CompiledStatement.java.CompiledStatement", "name": "CompiledStatement", "methods": ["[void]eval(Session,Environment,Consumer<String>,Consumer<Binding>)", "[Type]getType()"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/compile/Tracer.java.Tracer", "name": "Tracer", "methods": ["Decl)", "[void]onPlan(Code)", "[void]onResult(Object)", "[void]onWarnings(List<Throwable>)", "[boolean]onException(Throwable)", "TypeException)", "[boolean]handleCompileException(CompileException)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/compile/Macro.java.Macro", "name": "Macro", "methods": ["Exp]expand(TypeSystem,Environment,Type)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/util/MorelException.java.MorelException", "name": "MorelException", "methods": ["[Pos]pos()", "[StringBuilder]describeTo(StringBuilder)"], "implementations": ["src/main/java/net/hydromatic/morel/compile/CompileException.java.CompileException"]}, {"uris": "src/main/java/net/hydromatic/morel/util/PairList.java.PairList", "name": "PairList", "methods": ["[PairList<T, U>]of()", "[PairList<T, U>]of(T,U)", "[PairList<T, U>]copyOf(T,U)", "[PairList<T, U>]withCapacity(int)", "[PairList<T, U>]backedBy(List<@Nullable Object>)", "[PairList<T, U>]of(Map<T, U>)", "[Builder<T, U>]builder()", "[void]add(T,U)", "[void]add(int,T,U)", "[boolean]addAll(PairList<T, U>)", "[boolean]addAll(int,PairList<T, U>)", "Entry<T, U>)", "Entry<T, U>]set(int,T,U)", "Entry<T, U>]remove(int)", "[T]left(int)", "[U]right(int)", "[List<T>]leftList()", "[List<U>]rightList()", "[void]forEach(BiConsumer<T, U>)", "[void]forEachIndexed(IndexedBiConsumer<T, U>)", "[ImmutableMap<T, U>]toImmutableMap()", "[ImmutablePairList<T, U>]immutable()", "[List<R>]transform(BiFunction<T, U, R>)", "[ImmutableList<R>]transform2(BiFunction<T, U, R>)", "[boolean]anyMatch(BiPredicate<T, U>)", "[boolean]allMatch(BiPredicate<T, U>)", "[int]firstMatch(BiPredicate<T, U>)", "[boolean]noMatch(BiPredicate<T, U>)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/util/ImmutablePairList.java.ImmutablePairList", "name": "ImmutablePairList", "methods": ["[ImmutablePairList<T, U>]of()", "[ImmutablePairList<T, U>]of(T,U)", "[PairList<T, U>]copyOf(T,U)", "Entry<T, U>>)", "[ImmutablePairList<T, U>]immutable()"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/type/RecordLikeType.java.RecordLikeType", "name": "RecordLikeType", "methods": ["[SortedMap<String, Type>]argNameTypes()", "[List<Type>]argTypes()", "[Type]argType(int)", "[TypedValue]asTypedValue()"], "implementations": ["src/main/java/net/hydromatic/morel/type/TupleType.java.TupleType", "src/main/java/net/hydromatic/morel/type/RecordType.java.RecordType"]}, {"uris": "src/main/java/net/hydromatic/morel/type/Type.java.Type", "name": "Type", "methods": ["[Key]key()", "[String]moniker()", "[Op]op()", "[Type]copy(TypeSystem,UnaryOperator<Type>)", "[R]accept(TypeVisitor<R>)", "[Type]substitute(TypeSystem,List<? extends Type>)", "[boolean]isProgressive()", "[boolean]isFinite()"], "implementations": ["src/main/java/net/hydromatic/morel/type/TypeVar.java.TypeVar"]}, {"uris": "src/main/java/net/hydromatic/morel/type/NamedType.java.NamedType", "name": "NamedType", "methods": ["[String]name()"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/type/TypedValue.java.TypedValue", "name": "TypedValue", "methods": ["[V]valueAs(Class<V>)", "[V]fieldValueAs(String,Class<V>)", "[V]fieldValueAs(int,Class<V>)", "Key]typeKey()", "[TypedValue]discoverField(TypeSystem,String)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/foreign/Converter.java.Converter", "name": "Converter", "methods": [], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/foreign/DataSet.java.DataSet", "name": "DataSet", "methods": ["[ForeignValue]foreignValue(Calcite)"], "implementations": []}, {"uris": "src/main/java/net/hydromatic/morel/foreign/ForeignValue.java.ForeignValue", "name": "ForeignValue", "methods": ["[Type]type(TypeSystem)", "[Object]value()"], "implementations": ["src/main/java/net/hydromatic/morel/foreign/CalciteForeignValue.java.CalciteForeignValue"]}, {"uris": "src/main/java/net/hydromatic/morel/parse/MorelParser.java.MorelParser", "name": "MorelParser", "methods": ["[Pos]pos()", "[void]zero(String)"], "implementations": ["target/generated-sources/javacc/net/hydromatic/morel/parse/MorelParserImpl.java.MorelParserImpl"]}, {"uris": "target/generated-sources/javacc/net/hydromatic/morel/parse/MorelParserImplConstants.java.MorelParserImplConstants", "name": "MorelParserImplConstants", "methods": [], "implementations": ["target/generated-sources/javacc/net/hydromatic/morel/parse/MorelParserImpl.java.MorelParserImpl", "target/generated-sources/javacc/net/hydromatic/morel/parse/MorelParserImplTokenManager.java.MorelParserImplTokenManager"]}]