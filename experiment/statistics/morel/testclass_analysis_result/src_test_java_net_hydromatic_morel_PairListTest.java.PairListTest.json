{"file_path": "src/test/java/net/hydromatic/morel/PairListTest.java", "testclass_name": "PairListTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.util.ImmutablePairList;", "import net.hydromatic.morel.util.MapEntry;", "import net.hydromatic.morel.util.Pair;", "import net.hydromatic.morel.util.PairList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.junit.jupiter.api.Test;", "import java.util.AbstractList;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.Map;", "import java.util.RandomAccess;", "import java.util.function.BiPredicate;", "import static org.hamcrest.CoreMatchers.instanceOf;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.CoreMatchers.startsWith;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.empty;", "import static org.hamcrest.Matchers.hasSize;", "import static org.hamcrest.Matchers.hasToString;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;"], "name": "PairListTest", "description": "Unit tests for the PairList class, which is a list of pairs.", "class_members": {"methods": [{"name": "left", "signature": "<T, U> List<T> left(List<? extends Map.Entry<? extends T, ? extends U>> pairs)"}, {"name": "right", "signature": "<T, U> List<U> right(List<? extends Map.Entry<? extends T, ? extends U>> pairs)"}, {"name": "validate", "signature": "<T, U> void validate(PairList<T, U> pairList, List<? extends Map.Entry<T, U>> list)"}]}, "test_cases": [{"name": "testPairList", "primary_tested": ["PairList.add(T,U)", "PairList.add(Pair<T,U>)", "PairList.add(int,Pair<T,U>)", "PairList.add(int,T,U)", "PairList.remove(int)", "PairList.clear()", "PairList.addAll(PairList)", "PairList.addAll(int,PairList)", "PairList.immutable()", "PairList.set(int,Pair<T,U>)", "PairList.set(int,T,U)"], "associated_methods": ["PairList.isEmpty()", "PairList.size()", "PairList.leftList()", "PairList.rightList()", "PairList.left(int)", "PairList.right(int)", "PairList.forEach(Consumer)", "PairList.forEach(BiConsumer)", "PairList.forEachIndexed(TriConsumer)", "PairList.toImmutableMap()"], "external_dependencies": {"modules": ["PairList", "Pair", "Map.Entry", "ArrayList", "ImmutablePairList", "UnsupportedOperationException"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)", "PairList.immutable()"]}, "category": "unit", "description": "Tests various methods of the PairList class, including adding, removing, clearing, and converting to immutable."}, {"name": "testAddAll", "primary_tested": ["PairList.addAll(PairList)", "PairList.addAll(int,PairList)"], "associated_methods": ["PairList.size()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "ImmutablePairList", "ImmutableList", "MapEntry"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)", "PairList.immutable()"]}, "category": "unit", "description": "Tests the addAll method of the PairList class, including adding from different types of PairLists."}, {"name": "testPairListOfMap", "primary_tested": ["PairList.of(Map)", "PairList.toImmutableMap()"], "associated_methods": ["PairList.isEmpty()", "PairList.size()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "ImmutableMap", "Map.Entry", "ArrayList", "Collections"], "project_specific_resources": ["PairList.of(Map)", "PairList.toImmutableMap()"]}, "category": "unit", "description": "Tests the creation of a PairList from a map and converting it back to an immutable map."}, {"name": "testPairListWithCapacity", "primary_tested": ["PairList.withCapacity(int)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()", "PairList.add(T,U)", "PairList.remove(int)"], "external_dependencies": {"modules": ["PairList", "Map.Entry"], "project_specific_resources": ["PairList.withCapacity(int)"]}, "category": "unit", "description": "Tests the creation of a PairList with a specified capacity and its basic operations."}, {"name": "testPairListOf", "primary_tested": ["PairList.of()", "PairList.copyOf(T,U,T,U)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "IllegalArgumentException"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)"]}, "category": "unit", "description": "Tests the creation of PairLists with different numbers of arguments."}, {"name": "testTransform", "primary_tested": ["PairList.transform(BiFunction)", "PairList.transform2(BiFunction)", "PairList.anyMatch(BiPredicate)", "PairList.allMatch(BiPredicate)", "PairList.noMatch(BiPredicate)", "PairList.firstMatch(BiPredicate)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "ImmutablePairList", "ImmutableList", "Arrays", "BiPredicate"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)", "PairList.immutable()"]}, "category": "unit", "description": "Tests the transformation and matching methods of the PairList class."}, {"name": "testBuilder", "primary_tested": ["PairList.Builder.build()", "PairList.Builder.add(T,U)"], "associated_methods": ["PairList.isEmpty()", "PairList.size()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "Pair"], "project_specific_resources": ["PairList.builder()"]}, "category": "unit", "description": "Tests the builder pattern for creating PairLists."}]}