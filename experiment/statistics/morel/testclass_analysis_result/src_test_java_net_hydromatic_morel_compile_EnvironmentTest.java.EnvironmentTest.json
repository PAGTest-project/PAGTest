{"file_path": "src/test/java/net/hydromatic/morel/compile/EnvironmentTest.java", "testclass_name": "EnvironmentTest", "dependencies": ["package net.hydromatic.morel.compile;", "import net.hydromatic.morel.type.PrimitiveType;", "import com.google.common.collect.ImmutableSet;", "import org.hamcrest.CustomTypeSafeMatcher;", "import org.hamcrest.Matcher;", "import org.junit.jupiter.api.Test;", "import java.util.Set;", "import java.util.concurrent.atomic.AtomicInteger;", "import static net.hydromatic.morel.ast.CoreBuilder.core;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsInstanceOf.instanceOf;"], "name": "EnvironmentTest", "description": "Tests the behavior of the Environment class, particularly the binding and optimization of sub-environments.", "class_members": {"methods": [{"name": "checkOptimizeSubEnvironment", "signature": "void checkOptimizeSubEnvironment(Environment e0)"}, {"name": "hasEnvLength", "signature": "Matcher<Environment> hasEnvLength(int i)"}]}, "test_cases": [{"name": "testOptimizeSubEnvironment", "primary_tested": ["Environments.bind(IdPat,Object)", "Environments.bindAll(Iterable)"], "associated_methods": ["Environment.getValueMap()", "Environment.visit(Consumer)"], "external_dependencies": {"modules": ["Environments", "Environment", "PrimitiveType", "ImmutableSet", "CustomTypeSafeMatcher", "Matcher", "AtomicInteger"], "class_members": [{"name": "checkOptimizeSubEnvironment", "type": "method"}, {"name": "hasEnvLength", "type": "method"}], "project_specific_resources": ["CoreBuilder.core.idPat(PrimitiveType,String,int)"]}, "category": "unit", "description": "Tests the optimization of sub-environments by binding values and checking the environment's depth and value map."}]}