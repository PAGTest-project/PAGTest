{"file_path": "src/test/java/net/hydromatic/morel/InlineTest.java", "testclass_name": "InlineTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Unit;", "import org.junit.jupiter.api.Test;", "import static net.hydromatic.morel.Matchers.isCode;", "import static net.hydromatic.morel.Matchers.isUnordered;", "import static net.hydromatic.morel.Matchers.list;", "import static net.hydromatic.morel.Matchers.whenAppliedTo;", "import static net.hydromatic.morel.Ml.ml;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.Matchers.hasToString;"], "name": "InlineTest", "description": "Tests for inlining and analyzing expressions in the Morel language.", "class_members": {"variables": [], "methods": [{"name": "checkInlineChained", "signature": "private void checkInlineChained(int n)"}, {"name": "gen", "signature": "private String gen(int i, int n)"}, {"name": "v", "signature": "private String v(int i)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAnalyze", "primary_tested": ["Ml.ml(String).assertAnalyze(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the analysis of a Morel expression and checks if the result matches the expected map."}, {"name": "testInline", "primary_tested": ["Ml.ml(String).assertPlan(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a simple function and checks if the generated plan matches the expected code."}, {"name": "testInlineFn", "primary_tested": ["Ml.ml(String).assertPlan(Matcher)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a function with a nested function and checks if the generated plan and evaluation match the expected results."}, {"name": "testInlineFnUnit", "primary_tested": ["Ml.ml(String).assertEval(Matcher)", "Ml.ml(String).assertCore(int, Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a function with a unit parameter and checks if the evaluation and core representation match the expected results."}, {"name": "testLetAtomic", "primary_tested": ["Ml.ml(String).assertEval(Matcher)", "Ml.ml(String).assertCore(int, Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a variable with an atomic value and checks if the evaluation and core representation match the expected results."}, {"name": "testInlineChained", "primary_tested": ["Ml.ml(String).assertEval(Matcher)"], "associated_methods": ["InlineTest.checkInlineChained(int)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [{"name": "checkInlineChained", "type": "method"}], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a deeply nested expression and checks if the evaluation matches the expected results."}, {"name": "testFromPredicate", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a predicate inside a 'where' clause and checks if the core representation and evaluation match the expected results."}, {"name": "testFromView", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a view function and checks if the core representation and evaluation match the expected results."}, {"name": "testMapFilterToFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the conversion of 'map' and 'filter' expressions to a 'from' expression and checks if the core representation and evaluation match the expected results."}, {"name": "testFilterMapFilterMapToFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the conversion of nested 'filter' and 'map' expressions to a 'from' expression and checks if the core representation and evaluation match the expected results."}, {"name": "testFromFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the conversion of nested 'from' expressions and checks if the core representation and evaluation match the expected results."}, {"name": "testFromEmptyFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the conversion of an empty 'from' expression and checks if the core representation and evaluation match the expected results."}, {"name": "testInlineCase", "primary_tested": ["Ml.ml(String).assertCore(int, Matcher)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a singleton 'case' expression and checks if the core representation and evaluation match the expected results."}, {"name": "testInlineCase2", "primary_tested": ["Ml.ml(String).assertCore(int, Matcher)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a singleton 'case' expression with a tuple and checks if the core representation and evaluation match the expected results."}]}