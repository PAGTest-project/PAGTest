{"file_path": "src/test/java/net/hydromatic/morel/ShellTest.java", "testclass_name": "ShellTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Prop;", "import net.hydromatic.morel.foreign.ForeignValue;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.hamcrest.Matcher;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.File;", "import java.io.IOException;", "import java.io.Reader;", "import java.io.StringReader;", "import java.io.StringWriter;", "import java.util.Collections;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.function.UnaryOperator;", "import static net.hydromatic.morel.TestUtils.findDirectory;", "import static net.hydromatic.morel.TestUtils.plus;", "import static org.hamcrest.CoreMatchers.anyOf;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.StringContains.containsString;", "import static org.junit.jupiter.api.Assumptions.assumeTrue;", "import static java.nio.charset.StandardCharsets.UTF_8;", "import static java.util.Objects.requireNonNull;"], "name": "ShellTest", "description": "Unit tests for the Shell class, focusing on various input scenarios and configurations.", "class_members": {"variables": [], "methods": [{"name": "fixture", "signature": "static Fixture fixture()"}, {"name": "pauseForTenMilliseconds", "signature": "static void pauseForTenMilliseconds()"}, {"name": "assumeNotInCi", "signature": "static void assumeNotInCi()"}, {"name": "getUseDirectory", "signature": "static File getUseDirectory()"}, {"name": "is2", "signature": "private Matcher<String> is2(String expected)"}], "nested_classes": [{"name": "Fixture", "description": "Interface for testing the shell."}, {"name": "FixtureImpl", "description": "Implementation of Fixture."}]}, "fixtures": [], "test_cases": [{"name": "testShell", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Collections", "StringContains"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with empty input and checks for the presence of the 'morel version' string in the output."}, {"name": "testShellNoBanner", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "StringContains"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with empty input and banner disabled, checking for a specific output string."}, {"name": "testOneLine", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with a single line of input and checks the output for correctness."}, {"name": "testTwoLines", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with a continued line of input and checks the output for correctness."}, {"name": "testReal", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with input involving real numbers and checks the output for correctness."}, {"name": "testEmptyLines", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with lines that are comments, empty, or contain only a semicolon, and checks the output for correctness."}, {"name": "testSingleLineComment", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with a single-line comment followed by a line of input and checks the output for correctness."}, {"name": "testSingleLineCommentWithQuote", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with a single-line comment containing a quote followed by a line of input and checks the output for correctness."}, {"name": "testMultiLineLet", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with a 'let' statement spread over multiple lines and checks the output for correctness."}, {"name": "testUse", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the 'use' function in the Shell and checks the output for correctness."}, {"name": "testMatchWarning", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell for a warning scenario and checks the output for correctness."}, {"name": "testUseEmpty", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the 'use' function in the Shell with an empty file and checks the output for correctness."}, {"name": "testUseMissing", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the 'use' function in the Shell with a missing file and checks the output for correctness."}, {"name": "testUseSelfReferential", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers", "Assumptions"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}, {"name": "is2", "type": "method"}]}, "category": "unit", "description": "Tests the 'use' function in the Shell with a self-referential file and checks the output for correctness."}, {"name": "testRaw", "primary_tested": ["Main.run()"], "external_dependencies": {"modules": ["Main", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests a script running in raw mode using the Main class and checks the output for correctness."}, {"name": "testStringDepth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with various string depth settings and checks the output for correctness."}, {"name": "testPrintDepth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with various print depth settings and checks the output for correctness."}, {"name": "testPrintLength", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with various print length settings and checks the output for correctness."}, {"name": "testLineWidth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "CoreMatchers"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with various line width settings and checks the output for correctness."}]}