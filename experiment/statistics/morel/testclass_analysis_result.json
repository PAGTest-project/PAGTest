[
    {
        "file_path": "src/test/java/net/hydromatic/morel/compile/EnvironmentTest.java",
        "testclass_name": "EnvironmentTest",
        "dependencies": [
            "package net.hydromatic.morel.compile;",
            "import net.hydromatic.morel.type.PrimitiveType;",
            "import com.google.common.collect.ImmutableSet;",
            "import org.hamcrest.CustomTypeSafeMatcher;",
            "import org.hamcrest.Matcher;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Set;",
            "import java.util.concurrent.atomic.AtomicInteger;",
            "import static net.hydromatic.morel.ast.CoreBuilder.core;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.core.Is.is;",
            "import static org.hamcrest.core.IsInstanceOf.instanceOf;"
        ],
        "name": "EnvironmentTest",
        "description": "Tests the behavior of the Environment class, particularly the binding and optimization of sub-environments.",
        "class_members": {
            "methods": [
                {
                    "name": "checkOptimizeSubEnvironment",
                    "signature": "void checkOptimizeSubEnvironment(Environment e0)"
                },
                {
                    "name": "hasEnvLength",
                    "signature": "Matcher<Environment> hasEnvLength(int i)"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testOptimizeSubEnvironment",
                "primary_tested": [
                    "Environments.bind(IdPat,Object)",
                    "Environments.bindAll(Iterable)"
                ],
                "associated_methods": [
                    "Environment.getValueMap()",
                    "Environment.visit(Consumer)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Environments",
                        "Environment",
                        "PrimitiveType",
                        "ImmutableSet",
                        "CustomTypeSafeMatcher",
                        "Matcher",
                        "AtomicInteger"
                    ],
                    "class_members": [
                        {
                            "name": "checkOptimizeSubEnvironment",
                            "type": "method"
                        },
                        {
                            "name": "hasEnvLength",
                            "type": "method"
                        }
                    ],
                    "project_specific_resources": [
                        "CoreBuilder.core.idPat(PrimitiveType,String,int)"
                    ]
                },
                "category": "unit",
                "description": "Tests the optimization of sub-environments by binding values and checking the environment's depth and value map."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/SatTest.java",
        "testclass_name": "SatTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.util.Sat;",
            "import net.hydromatic.morel.util.Sat.Term;",
            "import net.hydromatic.morel.util.Sat.Variable;",
            "import com.google.common.collect.ImmutableMap;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Map;",
            "import static org.hamcrest.CoreMatchers.notNullValue;",
            "import static org.hamcrest.CoreMatchers.nullValue;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.Matchers.hasToString;",
            "import static org.hamcrest.core.Is.is;"
        ],
        "name": "SatTest",
        "description": "Unit tests for the Sat class, focusing on the construction and solving of boolean formulas.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testBuild",
                "primary_tested": [
                    "Sat.solve(Term)"
                ],
                "associated_methods": [
                    "Sat.variable(String)",
                    "Sat.or(Term...)",
                    "Sat.not(Term)",
                    "Sat.and(Term...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Sat",
                        "Sat.Variable",
                        "Sat.Term",
                        "ImmutableMap"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the construction and solving of a 3SAT formula with a known solution."
            },
            {
                "name": "testTrue",
                "primary_tested": [
                    "Sat.solve(Term)"
                ],
                "associated_methods": [
                    "Sat.and(Term...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Sat",
                        "Sat.Term",
                        "ImmutableMap"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the solving of a true term (and with zero arguments)."
            },
            {
                "name": "testFalse",
                "primary_tested": [
                    "Sat.solve(Term)"
                ],
                "associated_methods": [
                    "Sat.or(Term...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Sat",
                        "Sat.Term",
                        "ImmutableMap"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the solving of a false term (or with zero arguments)."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/CalciteTest.java",
        "testclass_name": "CalciteTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.foreign.Calcite;",
            "import net.hydromatic.morel.foreign.CalciteForeignValue;",
            "import net.hydromatic.morel.foreign.ForeignValue;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableMap;",
            "import org.apache.calcite.adapter.java.ReflectiveSchema;",
            "import org.apache.calcite.schema.Schema;",
            "import org.apache.calcite.schema.SchemaPlus;",
            "import org.junit.jupiter.api.Test;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.ByteArrayOutputStream;",
            "import java.io.InputStream;",
            "import java.io.PrintStream;",
            "import java.util.Map;",
            "import static org.apache.calcite.util.Util.toLinux;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.core.Is.is;"
        ],
        "name": "CalciteTest",
        "description": "Tests the functionality of the CalciteForeignValue class, specifically focusing on nested schemas and their representation as fields.",
        "class_members": {
            "variables": [
                {
                    "name": "debug",
                    "type": "final boolean"
                }
            ],
            "methods": [],
            "nested_classes": [
                {
                    "name": "UserSchema",
                    "description": "Java object that will, via reflection, become the 'user' schema."
                },
                {
                    "name": "User",
                    "description": "Row in the 'users' table."
                },
                {
                    "name": "TaskSchema",
                    "description": "Java object that will, via reflection, become the 'task' schema."
                },
                {
                    "name": "Task",
                    "description": "Row in the 'tasks' table."
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testNestedSchema",
                "primary_tested": [
                    "CalciteForeignValue.value()"
                ],
                "associated_methods": [
                    "Calcite.withDataSets(Map<String, DataSet>)",
                    "Calcite.foreignValues()",
                    "Main.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "net.hydromatic.morel.foreign.Calcite",
                        "net.hydromatic.morel.foreign.CalciteForeignValue",
                        "net.hydromatic.morel.foreign.ForeignValue",
                        "com.google.common.collect.ImmutableList",
                        "com.google.common.collect.ImmutableMap",
                        "org.apache.calcite.adapter.java.ReflectiveSchema",
                        "org.apache.calcite.schema.Schema",
                        "org.apache.calcite.schema.SchemaPlus",
                        "java.io.ByteArrayInputStream",
                        "java.io.ByteArrayOutputStream",
                        "java.io.InputStream",
                        "java.io.PrintStream",
                        "java.util.Map",
                        "org.apache.calcite.util.Util",
                        "org.hamcrest.MatcherAssert",
                        "org.hamcrest.core.Is"
                    ],
                    "class_members": [
                        {
                            "name": "debug",
                            "type": "variable"
                        }
                    ],
                    "project_specific_resources": [
                        "Util.toLinux(String)"
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that if you create a CalciteForeignValue whose schema has nested schemas, those schemas appear as fields."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/ScriptTest.java",
        "testclass_name": "ScriptTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.eval.Prop;",
            "import net.hydromatic.morel.foreign.Calcite;",
            "import net.hydromatic.morel.foreign.ForeignValue;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableMap;",
            "import com.google.common.io.PatternFilenameFilter;",
            "import org.junit.jupiter.api.Test;",
            "import org.junit.jupiter.params.ParameterizedTest;",
            "import org.junit.jupiter.params.provider.Arguments;",
            "import org.junit.jupiter.params.provider.MethodSource;",
            "import java.io.File;",
            "import java.io.FilenameFilter;",
            "import java.io.Reader;",
            "import java.io.Writer;",
            "import java.lang.reflect.InvocationTargetException;",
            "import java.lang.reflect.Method;",
            "import java.net.URL;",
            "import java.util.LinkedHashMap;",
            "import java.util.List;",
            "import java.util.Map;",
            "import java.util.stream.Stream;",
            "import static net.hydromatic.morel.TestUtils.first;",
            "import static net.hydromatic.morel.TestUtils.n2u;",
            "import static net.hydromatic.morel.TestUtils.toCamelCase;",
            "import static net.hydromatic.morel.TestUtils.u2n;",
            "import static net.hydromatic.morel.TestUtils.urlToFile;",
            "import static org.hamcrest.CoreMatchers.notNullValue;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.junit.jupiter.api.Assertions.fail;"
        ],
        "name": "ScriptTest",
        "description": "Test suite for running scripts and checking their outputs.",
        "class_members": {
            "variables": [],
            "methods": [
                {
                    "name": "findMethod",
                    "signature": "private Method findMethod(String path)"
                },
                {
                    "name": "checkRun",
                    "signature": "protected void checkRun(String path) throws Exception"
                },
                {
                    "name": "data_",
                    "signature": "protected static Stream<Arguments> data_(String first)"
                }
            ],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "test",
                "primary_tested": [],
                "associated_methods": [
                    "ScriptTest.findMethod(String)",
                    "ScriptTest.checkRun(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.lang.reflect.Method",
                        "java.lang.reflect.InvocationTargetException",
                        "java.io.File",
                        "java.net.URL",
                        "com.google.common.collect.ImmutableList",
                        "com.google.common.collect.ImmutableMap",
                        "net.hydromatic.morel.eval.Prop",
                        "net.hydromatic.morel.foreign.Calcite",
                        "net.hydromatic.morel.foreign.ForeignValue",
                        "net.hydromatic.morel.TestUtils"
                    ],
                    "class_members": [],
                    "project_specific_resources": [
                        "TestUtils.toCamelCase(String)",
                        "TestUtils.urlToFile(URL)",
                        "TestUtils.reader(File)",
                        "TestUtils.printWriter(File)",
                        "TestUtils.diff(File, File)"
                    ]
                },
                "category": "integration",
                "fixtures_used": [],
                "description": "Runs a script and checks its output against a reference file."
            },
            {
                "name": "testScript",
                "primary_tested": [],
                "associated_methods": [
                    "ScriptTest.checkRun(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.io.File",
                        "net.hydromatic.morel.TestUtils"
                    ],
                    "class_members": [],
                    "project_specific_resources": [
                        "TestUtils.diff(File, File)"
                    ]
                },
                "category": "integration",
                "fixtures_used": [],
                "description": "Tests the script functionality by running a specific script and checking its output."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/compile/ExtentTest.java",
        "testclass_name": "ExtentTest",
        "dependencies": [
            "package net.hydromatic.morel.compile;",
            "import net.hydromatic.morel.ast.Core;",
            "import net.hydromatic.morel.ast.FromBuilder;",
            "import net.hydromatic.morel.type.ListType;",
            "import net.hydromatic.morel.type.PrimitiveType;",
            "import net.hydromatic.morel.type.RecordLikeType;",
            "import net.hydromatic.morel.type.RecordType;",
            "import net.hydromatic.morel.type.TypeSystem;",
            "import net.hydromatic.morel.util.ImmutablePairList;",
            "import net.hydromatic.morel.util.PairList;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableSet;",
            "import com.google.common.collect.ImmutableSortedMap;",
            "import org.junit.jupiter.api.Test;",
            "import java.math.BigDecimal;",
            "import java.util.List;",
            "import java.util.function.BiConsumer;",
            "import java.util.function.Consumer;",
            "import static net.hydromatic.morel.ast.CoreBuilder.core;",
            "import static org.apache.calcite.linq4j.tree.Expressions.list;",
            "import static org.hamcrest.CoreMatchers.instanceOf;",
            "import static org.hamcrest.CoreMatchers.notNullValue;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.Matchers.anEmptyMap;",
            "import static org.hamcrest.Matchers.empty;",
            "import static org.hamcrest.Matchers.hasSize;",
            "import static org.hamcrest.Matchers.hasToString;",
            "import static org.hamcrest.core.Is.is;"
        ],
        "name": "ExtentTest",
        "description": "Tests for the Extent class, focusing on various expression analysis and extent calculations.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": [
                {
                    "name": "Fixture",
                    "description": "Internal helper class providing setup and utility methods for tests."
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testConstant",
                "primary_tested": [
                    "Core.Exp#isConstant()"
                ],
                "associated_methods": [
                    "Fixture.intLiteral(int)",
                    "Core.intLiteral(BigDecimal)",
                    "Core.boolLiteral(boolean)",
                    "Core.charLiteral(char)",
                    "Core.realLiteral(float)",
                    "Core.stringLiteral(String)",
                    "Core.tuple(TypeSystem,Type,List<Core.Exp>)",
                    "Core.record(TypeSystem,PairList<String,Core.Exp>)",
                    "PairList.rightList()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "PairList",
                        "BigDecimal"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests whether an expression is constant."
            },
            {
                "name": "testEq",
                "primary_tested": [
                    "Core.equal(TypeSystem,Core.Exp,Core.Exp)"
                ],
                "associated_methods": [
                    "Fixture.intLiteral(int)",
                    "Core.idPat(Type,String,int)",
                    "Core.id(Core.IdPat)",
                    "Fixture.extent(Core.Pat,Core.Exp)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "PrimitiveType"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests a variable assigned a single value."
            },
            {
                "name": "testBetween",
                "primary_tested": [
                    "Core.andAlso(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.greaterThanOrEqualTo(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.lessThan(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.notEqual(TypeSystem,Core.Exp,Core.Exp)"
                ],
                "associated_methods": [
                    "Fixture.intLiteral(int)",
                    "Core.idPat(Type,String,int)",
                    "Core.id(Core.IdPat)",
                    "Fixture.extent(Core.Pat,Core.Exp)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "PrimitiveType",
                        "BigDecimal"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the extent calculation for a variable within a range and other conditions."
            },
            {
                "name": "testSubTrue",
                "primary_tested": [
                    "Core.andAlso(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.orElse(TypeSystem,Core.Exp,Core.Exp)"
                ],
                "associated_methods": [
                    "Fixture.checkSubTrue(Core.Exp,List<Core.Exp>,String)",
                    "Core.intLiteral(BigDecimal)",
                    "Core.id(Core.IdPat)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "BigDecimal"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the subTrue method for expression simplification."
            },
            {
                "name": "testFlatten",
                "primary_tested": [
                    "Core.andAlso(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.orElse(TypeSystem,Core.Exp,Core.Exp)"
                ],
                "associated_methods": [
                    "Fixture.checkFlatten(Core.Exp,String,String)",
                    "Core.intLiteral(BigDecimal)",
                    "Core.id(Core.IdPat)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "BigDecimal"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the flattening of AND and OR expressions."
            },
            {
                "name": "testAnalysis2c",
                "primary_tested": [
                    "FromBuilder.where(Core.Exp)",
                    "Core.elem(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.greaterThan(TypeSystem,Core.Exp,Core.Exp)"
                ],
                "associated_methods": [
                    "Fixture.extent(Core.Pat,Core.Exp)",
                    "Core.tuplePat(TypeSystem,List<Core.Pat>)",
                    "Core.idPat(Type,String,int)",
                    "Core.id(Core.IdPat)",
                    "Core.record(TypeSystem,PairList<String,Core.Exp>)",
                    "Core.intLiteral(BigDecimal)",
                    "Core.stringLiteral(String)",
                    "FromBuilder.scan(Core.Pat)",
                    "FromBuilder.build()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "PrimitiveType",
                        "BigDecimal",
                        "FromBuilder",
                        "PairList"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the analysis of a complex expression involving element checks and greater than conditions."
            },
            {
                "name": "testAnalysis2d",
                "primary_tested": [
                    "FromBuilder.where(Core.Exp)",
                    "Core.elem(TypeSystem,Core.Exp,Core.Exp)",
                    "Core.greaterThan(TypeSystem,Core.Exp,Core.Exp)"
                ],
                "associated_methods": [
                    "Fixture.extent(Core.Pat,Core.Exp)",
                    "Core.tuplePat(TypeSystem,List<Core.Pat>)",
                    "Core.idPat(Type,String,int)",
                    "Core.id(Core.IdPat)",
                    "Core.record(TypeSystem,PairList<String,Core.Exp>)",
                    "Core.intLiteral(BigDecimal)",
                    "Core.stringLiteral(String)",
                    "FromBuilder.scan(Core.Pat)",
                    "FromBuilder.build()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "TypeSystem",
                        "PrimitiveType",
                        "BigDecimal",
                        "FromBuilder",
                        "PairList"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the analysis of a complex expression involving element checks, greater than conditions, and string literals."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/PairListTest.java",
        "testclass_name": "PairListTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.util.ImmutablePairList;",
            "import net.hydromatic.morel.util.MapEntry;",
            "import net.hydromatic.morel.util.Pair;",
            "import net.hydromatic.morel.util.PairList;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableMap;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.AbstractList;",
            "import java.util.ArrayList;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.List;",
            "import java.util.Map;",
            "import java.util.RandomAccess;",
            "import java.util.function.BiPredicate;",
            "import static org.hamcrest.CoreMatchers.instanceOf;",
            "import static org.hamcrest.CoreMatchers.is;",
            "import static org.hamcrest.CoreMatchers.startsWith;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.Matchers.empty;",
            "import static org.hamcrest.Matchers.hasSize;",
            "import static org.hamcrest.Matchers.hasToString;",
            "import static org.junit.jupiter.api.Assertions.assertThrows;",
            "import static org.junit.jupiter.api.Assertions.fail;"
        ],
        "name": "PairListTest",
        "description": "Unit tests for the PairList class, which is a list of pairs.",
        "class_members": {
            "methods": [
                {
                    "name": "left",
                    "signature": "<T, U> List<T> left(List<? extends Map.Entry<? extends T, ? extends U>> pairs)"
                },
                {
                    "name": "right",
                    "signature": "<T, U> List<U> right(List<? extends Map.Entry<? extends T, ? extends U>> pairs)"
                },
                {
                    "name": "validate",
                    "signature": "<T, U> void validate(PairList<T, U> pairList, List<? extends Map.Entry<T, U>> list)"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testPairList",
                "primary_tested": [
                    "PairList.add(T,U)",
                    "PairList.add(Pair<T,U>)",
                    "PairList.add(int,Pair<T,U>)",
                    "PairList.add(int,T,U)",
                    "PairList.remove(int)",
                    "PairList.clear()",
                    "PairList.addAll(PairList)",
                    "PairList.addAll(int,PairList)",
                    "PairList.immutable()",
                    "PairList.set(int,Pair<T,U>)",
                    "PairList.set(int,T,U)"
                ],
                "associated_methods": [
                    "PairList.isEmpty()",
                    "PairList.size()",
                    "PairList.leftList()",
                    "PairList.rightList()",
                    "PairList.left(int)",
                    "PairList.right(int)",
                    "PairList.forEach(Consumer)",
                    "PairList.forEach(BiConsumer)",
                    "PairList.forEachIndexed(TriConsumer)",
                    "PairList.toImmutableMap()"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "Pair",
                        "Map.Entry",
                        "ArrayList",
                        "ImmutablePairList",
                        "UnsupportedOperationException"
                    ],
                    "project_specific_resources": [
                        "PairList.of()",
                        "PairList.copyOf(T,U,T,U)",
                        "PairList.immutable()"
                    ]
                },
                "category": "unit",
                "description": "Tests various methods of the PairList class, including adding, removing, clearing, and converting to immutable."
            },
            {
                "name": "testAddAll",
                "primary_tested": [
                    "PairList.addAll(PairList)",
                    "PairList.addAll(int,PairList)"
                ],
                "associated_methods": [
                    "PairList.size()",
                    "PairList.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "ImmutablePairList",
                        "ImmutableList",
                        "MapEntry"
                    ],
                    "project_specific_resources": [
                        "PairList.of()",
                        "PairList.copyOf(T,U,T,U)",
                        "PairList.immutable()"
                    ]
                },
                "category": "unit",
                "description": "Tests the addAll method of the PairList class, including adding from different types of PairLists."
            },
            {
                "name": "testPairListOfMap",
                "primary_tested": [
                    "PairList.of(Map)",
                    "PairList.toImmutableMap()"
                ],
                "associated_methods": [
                    "PairList.isEmpty()",
                    "PairList.size()",
                    "PairList.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "ImmutableMap",
                        "Map.Entry",
                        "ArrayList",
                        "Collections"
                    ],
                    "project_specific_resources": [
                        "PairList.of(Map)",
                        "PairList.toImmutableMap()"
                    ]
                },
                "category": "unit",
                "description": "Tests the creation of a PairList from a map and converting it back to an immutable map."
            },
            {
                "name": "testPairListWithCapacity",
                "primary_tested": [
                    "PairList.withCapacity(int)"
                ],
                "associated_methods": [
                    "PairList.size()",
                    "PairList.isEmpty()",
                    "PairList.toString()",
                    "PairList.add(T,U)",
                    "PairList.remove(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "Map.Entry"
                    ],
                    "project_specific_resources": [
                        "PairList.withCapacity(int)"
                    ]
                },
                "category": "unit",
                "description": "Tests the creation of a PairList with a specified capacity and its basic operations."
            },
            {
                "name": "testPairListOf",
                "primary_tested": [
                    "PairList.of()",
                    "PairList.copyOf(T,U,T,U)"
                ],
                "associated_methods": [
                    "PairList.size()",
                    "PairList.isEmpty()",
                    "PairList.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "IllegalArgumentException"
                    ],
                    "project_specific_resources": [
                        "PairList.of()",
                        "PairList.copyOf(T,U,T,U)"
                    ]
                },
                "category": "unit",
                "description": "Tests the creation of PairLists with different numbers of arguments."
            },
            {
                "name": "testTransform",
                "primary_tested": [
                    "PairList.transform(BiFunction)",
                    "PairList.transform2(BiFunction)",
                    "PairList.anyMatch(BiPredicate)",
                    "PairList.allMatch(BiPredicate)",
                    "PairList.noMatch(BiPredicate)",
                    "PairList.firstMatch(BiPredicate)"
                ],
                "associated_methods": [
                    "PairList.size()",
                    "PairList.isEmpty()",
                    "PairList.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "ImmutablePairList",
                        "ImmutableList",
                        "Arrays",
                        "BiPredicate"
                    ],
                    "project_specific_resources": [
                        "PairList.of()",
                        "PairList.copyOf(T,U,T,U)",
                        "PairList.immutable()"
                    ]
                },
                "category": "unit",
                "description": "Tests the transformation and matching methods of the PairList class."
            },
            {
                "name": "testBuilder",
                "primary_tested": [
                    "PairList.Builder.build()",
                    "PairList.Builder.add(T,U)"
                ],
                "associated_methods": [
                    "PairList.isEmpty()",
                    "PairList.size()",
                    "PairList.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "PairList",
                        "Pair"
                    ],
                    "project_specific_resources": [
                        "PairList.builder()"
                    ]
                },
                "category": "unit",
                "description": "Tests the builder pattern for creating PairLists."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/UtilTest.java",
        "testclass_name": "UtilTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.ast.Ast;",
            "import net.hydromatic.morel.ast.Pos;",
            "import net.hydromatic.morel.compile.BuiltIn;",
            "import net.hydromatic.morel.eval.Codes;",
            "import net.hydromatic.morel.type.PrimitiveType;",
            "import net.hydromatic.morel.type.RangeExtent;",
            "import net.hydromatic.morel.type.TypeSystem;",
            "import net.hydromatic.morel.util.Folder;",
            "import net.hydromatic.morel.util.MapList;",
            "import net.hydromatic.morel.util.Pair;",
            "import net.hydromatic.morel.util.Static;",
            "import net.hydromatic.morel.util.TailList;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableMap;",
            "import com.google.common.collect.ImmutableRangeSet;",
            "import com.google.common.collect.Lists;",
            "import com.google.common.collect.Range;",
            "import org.apache.calcite.runtime.FlatLists;",
            "import org.apache.calcite.util.ImmutableIntList;",
            "import org.apache.calcite.util.Util;",
            "import org.junit.jupiter.api.Test;",
            "import java.math.BigDecimal;",
            "import java.util.ArrayList;",
            "import java.util.Arrays;",
            "import java.util.Collection;",
            "import java.util.Collections;",
            "import java.util.HashSet;",
            "import java.util.List;",
            "import java.util.Objects;",
            "import java.util.Set;",
            "import java.util.function.BiConsumer;",
            "import java.util.function.Consumer;",
            "import java.util.function.Function;",
            "import java.util.function.Predicate;",
            "import static net.hydromatic.morel.ast.AstBuilder.ast;",
            "import static net.hydromatic.morel.eval.Codes.isNegative;",
            "import static net.hydromatic.morel.util.Ord.forEachIndexed;",
            "import static net.hydromatic.morel.util.Static.nextPowerOfTwo;",
            "import static net.hydromatic.morel.util.Static.transform;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.Matchers.hasToString;",
            "import static org.hamcrest.Matchers.instanceOf;",
            "import static org.hamcrest.Matchers.not;",
            "import static org.hamcrest.Matchers.notNullValue;",
            "import static org.hamcrest.core.Is.is;",
            "import static org.junit.jupiter.api.Assertions.fail;"
        ],
        "name": "UtilTest",
        "description": "Unit tests for various utility classes and methods in the Morel project.",
        "class_members": {
            "variables": [],
            "methods": [
                {
                    "name": "checkShorterThan",
                    "signature": "<E> void checkShorterThan(Iterable<E> iterable, int size)"
                }
            ],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testTailList",
                "primary_tested": [
                    "TailList.size()",
                    "TailList.get(int)",
                    "TailList.set(int,E)",
                    "TailList.add(int,E)",
                    "TailList.addAll(Collection)",
                    "TailList.clear()",
                    "TailList.isEmpty()"
                ],
                "external_dependencies": {
                    "modules": [
                        "ArrayList",
                        "TailList",
                        "Arrays"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the functionality of the TailList class, including size, get, set, add, addAll, clear, and isEmpty methods."
            },
            {
                "name": "testOrd",
                "primary_tested": [
                    "Ord.forEachIndexed(Iterable,BiConsumer)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "StringBuilder",
                        "Ord"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the forEachIndexed method from the Ord class, which iterates over a list with indices."
            },
            {
                "name": "testMapList",
                "primary_tested": [
                    "MapList.of(int,IntFunction)"
                ],
                "external_dependencies": {
                    "modules": [
                        "MapList",
                        "Arrays"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the creation and usage of a MapList, which is a list created by mapping a function over a range of indices."
            },
            {
                "name": "testFolder",
                "primary_tested": [
                    "Folder.start(List,Ast.Exp)",
                    "Folder.at(List,Ast.Exp)",
                    "Folder.cons(List,Ast.Exp)",
                    "Folder.combineAll(List)"
                ],
                "external_dependencies": {
                    "modules": [
                        "ArrayList",
                        "Folder",
                        "Ast",
                        "Pos"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the methods of the Folder class, which is used to combine AST expressions."
            },
            {
                "name": "testShorterThan",
                "primary_tested": [
                    "Static.shorterThan(Iterable,int)"
                ],
                "associated_methods": [
                    "checkShorterThan(Iterable,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "ImmutableIntList",
                        "HashSet",
                        "Collections",
                        "Util"
                    ],
                    "class_members": [
                        {
                            "name": "checkShorterThan",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the shorterThan method from the Static class, which checks if an iterable is shorter than a given size."
            },
            {
                "name": "testFind",
                "primary_tested": [
                    "Static.find(List,Predicate)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "Collections"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the find method from the Static class, which finds the index of the first element in a list that matches a predicate."
            },
            {
                "name": "testPos",
                "primary_tested": [
                    "Pos.split(String,char,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Pos"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the split method from the Pos class, which splits a string into a pair containing a substring and a Pos object representing a position in the file."
            },
            {
                "name": "testPower",
                "primary_tested": [
                    "Static.nextPowerOfTwo(int)"
                ],
                "external_dependencies": {
                    "modules": [],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the nextPowerOfTwo method from the Static class, which calculates the next power of two greater than or equal to a given integer."
            },
            {
                "name": "testTransform",
                "primary_tested": [
                    "Static.transform(List,Function)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "Collections"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the transform method from the Static class, which applies a function to each element of a list and returns the resulting list."
            },
            {
                "name": "testToString",
                "primary_tested": [
                    "Codes.floatToString(float)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Codes"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the floatToString method from the Codes class, which converts a float to a string with a specific format."
            },
            {
                "name": "testFloatBit",
                "primary_tested": [
                    "Codes.isNegative(float)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Codes"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the isNegative method from the Codes class, which checks if a float number is negative."
            },
            {
                "name": "testPairAllMatch",
                "primary_tested": [
                    "Pair.anyMatch(Iterable,Iterable,BiPredicate)",
                    "Pair.allMatch(Iterable,Iterable,BiPredicate)",
                    "Pair.noneMatch(Iterable,Iterable,BiPredicate)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "Collections",
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the anyMatch, allMatch, and noneMatch methods from the Pair class, which check if pairs of elements from two iterables match a given predicate."
            },
            {
                "name": "testRangeExtent",
                "primary_tested": [
                    "RangeExtent.iterable"
                ],
                "external_dependencies": {
                    "modules": [
                        "TypeSystem",
                        "BuiltIn",
                        "Range",
                        "ImmutableRangeSet",
                        "ImmutableList",
                        "Lists",
                        "FlatLists",
                        "RangeExtent",
                        "PrimitiveType"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the iterable property of the RangeExtent class, which provides an iterable over a range of values."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/InlineTest.java",
        "testclass_name": "InlineTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.eval.Unit;",
            "import org.junit.jupiter.api.Test;",
            "import static net.hydromatic.morel.Matchers.isCode;",
            "import static net.hydromatic.morel.Matchers.isUnordered;",
            "import static net.hydromatic.morel.Matchers.list;",
            "import static net.hydromatic.morel.Matchers.whenAppliedTo;",
            "import static net.hydromatic.morel.Ml.ml;",
            "import static org.hamcrest.CoreMatchers.is;",
            "import static org.hamcrest.Matchers.hasToString;"
        ],
        "name": "InlineTest",
        "description": "Tests for inlining and analyzing expressions in the Morel language.",
        "class_members": {
            "variables": [],
            "methods": [
                {
                    "name": "checkInlineChained",
                    "signature": "private void checkInlineChained(int n)"
                },
                {
                    "name": "gen",
                    "signature": "private String gen(int i, int n)"
                },
                {
                    "name": "v",
                    "signature": "private String v(int i)"
                }
            ],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAnalyze",
                "primary_tested": [
                    "Ml.ml(String).assertAnalyze(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the analysis of a Morel expression and checks if the result matches the expected map."
            },
            {
                "name": "testInline",
                "primary_tested": [
                    "Ml.ml(String).assertPlan(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a simple function and checks if the generated plan matches the expected code."
            },
            {
                "name": "testInlineFn",
                "primary_tested": [
                    "Ml.ml(String).assertPlan(Matcher)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a function with a nested function and checks if the generated plan and evaluation match the expected results."
            },
            {
                "name": "testInlineFnUnit",
                "primary_tested": [
                    "Ml.ml(String).assertEval(Matcher)",
                    "Ml.ml(String).assertCore(int, Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a function with a unit parameter and checks if the evaluation and core representation match the expected results."
            },
            {
                "name": "testLetAtomic",
                "primary_tested": [
                    "Ml.ml(String).assertEval(Matcher)",
                    "Ml.ml(String).assertCore(int, Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a variable with an atomic value and checks if the evaluation and core representation match the expected results."
            },
            {
                "name": "testInlineChained",
                "primary_tested": [
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "associated_methods": [
                    "InlineTest.checkInlineChained(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [
                        {
                            "name": "checkInlineChained",
                            "type": "method"
                        }
                    ],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a deeply nested expression and checks if the evaluation matches the expected results."
            },
            {
                "name": "testFromPredicate",
                "primary_tested": [
                    "Ml.ml(String).assertCoreString(Matcher...)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a predicate inside a 'where' clause and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testFromView",
                "primary_tested": [
                    "Ml.ml(String).assertCoreString(Matcher...)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a view function and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testMapFilterToFrom",
                "primary_tested": [
                    "Ml.ml(String).assertCoreString(Matcher...)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the conversion of 'map' and 'filter' expressions to a 'from' expression and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testFilterMapFilterMapToFrom",
                "primary_tested": [
                    "Ml.ml(String).assertCoreString(Matcher...)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the conversion of nested 'filter' and 'map' expressions to a 'from' expression and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testFromFrom",
                "primary_tested": [
                    "Ml.ml(String).assertCoreString(Matcher...)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the conversion of nested 'from' expressions and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testFromEmptyFrom",
                "primary_tested": [
                    "Ml.ml(String).assertCoreString(Matcher...)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the conversion of an empty 'from' expression and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testInlineCase",
                "primary_tested": [
                    "Ml.ml(String).assertCore(int, Matcher)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a singleton 'case' expression and checks if the core representation and evaluation match the expected results."
            },
            {
                "name": "testInlineCase2",
                "primary_tested": [
                    "Ml.ml(String).assertCore(int, Matcher)",
                    "Ml.ml(String).assertEval(Matcher)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Matchers",
                        "Ml"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "description": "Tests the inlining of a singleton 'case' expression with a tuple and checks if the core representation and evaluation match the expected results."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/FromBuilderTest.java",
        "testclass_name": "FromBuilderTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.ast.Ast;",
            "import net.hydromatic.morel.ast.Core;",
            "import net.hydromatic.morel.ast.FromBuilder;",
            "import net.hydromatic.morel.compile.Environments;",
            "import net.hydromatic.morel.type.Binding;",
            "import net.hydromatic.morel.type.PrimitiveType;",
            "import net.hydromatic.morel.type.Type;",
            "import net.hydromatic.morel.type.TypeSystem;",
            "import net.hydromatic.morel.util.PairList;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableSet;",
            "import org.junit.jupiter.api.Test;",
            "import java.math.BigDecimal;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.function.Function;",
            "import static net.hydromatic.morel.ast.CoreBuilder.core;",
            "import static org.hamcrest.CoreMatchers.is;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.Matchers.hasToString;"
        ],
        "name": "FromBuilderTest",
        "description": "Unit tests for the FromBuilder class, focusing on various scenarios involving nested and complex queries.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": [
                {
                    "name": "Fixture",
                    "description": "Internal helper class providing setup for test cases."
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testBasic",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.build()"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the basic functionality of the FromBuilder by scanning a list and building the query."
            },
            {
                "name": "testWhereOrder",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)",
                    "FromBuilder.order(Iterable<Core.OrderItem>)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of adding where and order clauses to the FromBuilder."
            },
            {
                "name": "testTrivialYield",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)",
                    "FromBuilder.yield_(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of adding a yield clause to the FromBuilder."
            },
            {
                "name": "testTrivialYield2",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)",
                    "FromBuilder.yield_(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of adding multiple scans and a yield clause to the FromBuilder."
            },
            {
                "name": "testTrivialYield3",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.yield_(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of adding a yield clause before a scan in the FromBuilder."
            },
            {
                "name": "testNested",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances and adding where clauses."
            },
            {
                "name": "testNested3",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances and adding where clauses, including simplification."
            },
            {
                "name": "testNested4",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances and adding where clauses, including simplification with tuple fields."
            },
            {
                "name": "testNestedSameName",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances with the same variable names and adding where clauses."
            },
            {
                "name": "testNested0",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.build()"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances with an empty inner FromBuilder."
            },
            {
                "name": "testNested2",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances with record patterns and adding where clauses."
            },
            {
                "name": "testNestedFromTuple",
                "primary_tested": [
                    "FromBuilder.scan(Core.Pat,Core.Exp)",
                    "FromBuilder.where(Core.Exp)",
                    "FromBuilder.yield_(Core.Exp)"
                ],
                "associated_methods": [
                    "FromBuilder.buildSimplify()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Core",
                        "FromBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "Fixture",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of nesting FromBuilder instances with tuple patterns and adding where and yield clauses."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/ShellTest.java",
        "testclass_name": "ShellTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.eval.Prop;",
            "import net.hydromatic.morel.foreign.ForeignValue;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableMap;",
            "import org.hamcrest.Matcher;",
            "import org.junit.jupiter.api.Test;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.ByteArrayOutputStream;",
            "import java.io.File;",
            "import java.io.IOException;",
            "import java.io.Reader;",
            "import java.io.StringReader;",
            "import java.io.StringWriter;",
            "import java.util.Collections;",
            "import java.util.LinkedHashMap;",
            "import java.util.List;",
            "import java.util.Map;",
            "import java.util.function.UnaryOperator;",
            "import static net.hydromatic.morel.TestUtils.findDirectory;",
            "import static net.hydromatic.morel.TestUtils.plus;",
            "import static org.hamcrest.CoreMatchers.anyOf;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.core.Is.is;",
            "import static org.hamcrest.core.StringContains.containsString;",
            "import static org.junit.jupiter.api.Assumptions.assumeTrue;",
            "import static java.nio.charset.StandardCharsets.UTF_8;",
            "import static java.util.Objects.requireNonNull;"
        ],
        "name": "ShellTest",
        "description": "Unit tests for the Shell class, focusing on various input scenarios and configurations.",
        "class_members": {
            "variables": [],
            "methods": [
                {
                    "name": "fixture",
                    "signature": "static Fixture fixture()"
                },
                {
                    "name": "pauseForTenMilliseconds",
                    "signature": "static void pauseForTenMilliseconds()"
                },
                {
                    "name": "assumeNotInCi",
                    "signature": "static void assumeNotInCi()"
                },
                {
                    "name": "getUseDirectory",
                    "signature": "static File getUseDirectory()"
                },
                {
                    "name": "is2",
                    "signature": "private Matcher<String> is2(String expected)"
                }
            ],
            "nested_classes": [
                {
                    "name": "Fixture",
                    "description": "Interface for testing the shell."
                },
                {
                    "name": "FixtureImpl",
                    "description": "Implementation of Fixture."
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testShell",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "Collections",
                        "StringContains"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with empty input and checks for the presence of the 'morel version' string in the output."
            },
            {
                "name": "testShellNoBanner",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "StringContains"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with empty input and banner disabled, checking for a specific output string."
            },
            {
                "name": "testOneLine",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with a single line of input and checks the output for correctness."
            },
            {
                "name": "testTwoLines",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with a continued line of input and checks the output for correctness."
            },
            {
                "name": "testReal",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with input involving real numbers and checks the output for correctness."
            },
            {
                "name": "testEmptyLines",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with lines that are comments, empty, or contain only a semicolon, and checks the output for correctness."
            },
            {
                "name": "testSingleLineComment",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with a single-line comment followed by a line of input and checks the output for correctness."
            },
            {
                "name": "testSingleLineCommentWithQuote",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with a single-line comment containing a quote followed by a line of input and checks the output for correctness."
            },
            {
                "name": "testMultiLineLet",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with a 'let' statement spread over multiple lines and checks the output for correctness."
            },
            {
                "name": "testUse",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the 'use' function in the Shell and checks the output for correctness."
            },
            {
                "name": "testMatchWarning",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell for a warning scenario and checks the output for correctness."
            },
            {
                "name": "testUseEmpty",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the 'use' function in the Shell with an empty file and checks the output for correctness."
            },
            {
                "name": "testUseMissing",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the 'use' function in the Shell with a missing file and checks the output for correctness."
            },
            {
                "name": "testUseSelfReferential",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers",
                        "Assumptions"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        },
                        {
                            "name": "assumeNotInCi",
                            "type": "method"
                        },
                        {
                            "name": "is2",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the 'use' function in the Shell with a self-referential file and checks the output for correctness."
            },
            {
                "name": "testRaw",
                "primary_tested": [
                    "Main.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Main",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests a script running in raw mode using the Main class and checks the output for correctness."
            },
            {
                "name": "testStringDepth",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with various string depth settings and checks the output for correctness."
            },
            {
                "name": "testPrintDepth",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with various print depth settings and checks the output for correctness."
            },
            {
                "name": "testPrintLength",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with various print length settings and checks the output for correctness."
            },
            {
                "name": "testLineWidth",
                "primary_tested": [
                    "Shell.run()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "CoreMatchers"
                    ],
                    "class_members": [
                        {
                            "name": "fixture",
                            "type": "method"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Shell with various line width settings and checks the output for correctness."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/AlgebraTest.java",
        "testclass_name": "AlgebraTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.eval.Prop;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.function.UnaryOperator;",
            "import java.util.stream.Stream;",
            "import static net.hydromatic.morel.Matchers.equalsOrdered;",
            "import static net.hydromatic.morel.Matchers.equalsUnordered;",
            "import static net.hydromatic.morel.Matchers.isCode;",
            "import static net.hydromatic.morel.Matchers.isFullyCalcite;",
            "import static net.hydromatic.morel.Matchers.list;",
            "import static net.hydromatic.morel.Ml.ml;",
            "import static org.hamcrest.core.Is.is;"
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/MainTest.java",
        "testclass_name": "MainTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import net.hydromatic.morel.ast.Ast;",
            "import net.hydromatic.morel.compile.CompileException;",
            "import net.hydromatic.morel.compile.TypeResolver;",
            "import net.hydromatic.morel.eval.Codes;",
            "import net.hydromatic.morel.eval.Prop;",
            "import net.hydromatic.morel.foreign.ForeignValue;",
            "import net.hydromatic.morel.parse.ParseException;",
            "import net.hydromatic.morel.type.DataType;",
            "import net.hydromatic.morel.type.TypeVar;",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableMap;",
            "import org.apache.calcite.util.Util;",
            "import org.hamcrest.CustomTypeSafeMatcher;",
            "import org.junit.jupiter.api.Disabled;",
            "import org.junit.jupiter.api.Test;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.ByteArrayOutputStream;",
            "import java.io.InputStream;",
            "import java.io.PrintStream;",
            "import java.math.BigDecimal;",
            "import java.util.Collections;",
            "import java.util.List;",
            "import java.util.Map;",
            "import static net.hydromatic.morel.Matchers.equalsOrdered;",
            "import static net.hydromatic.morel.Matchers.equalsUnordered;",
            "import static net.hydromatic.morel.Matchers.hasMoniker;",
            "import static net.hydromatic.morel.Matchers.hasTypeConstructors;",
            "import static net.hydromatic.morel.Matchers.instanceOfAnd;",
            "import static net.hydromatic.morel.Matchers.isCode;",
            "import static net.hydromatic.morel.Matchers.isCode2;",
            "import static net.hydromatic.morel.Matchers.isLiteral;",
            "import static net.hydromatic.morel.Matchers.isUnordered;",
            "import static net.hydromatic.morel.Matchers.list;",
            "import static net.hydromatic.morel.Matchers.map;",
            "import static net.hydromatic.morel.Matchers.throwsA;",
            "import static net.hydromatic.morel.Matchers.whenAppliedTo;",
            "import static net.hydromatic.morel.Ml.MatchCoverage.NON_EXHAUSTIVE;",
            "import static net.hydromatic.morel.Ml.MatchCoverage.OK;",
            "import static net.hydromatic.morel.Ml.MatchCoverage.REDUNDANT;",
            "import static net.hydromatic.morel.Ml.assertError;",
            "import static net.hydromatic.morel.Ml.ml;",
            "import static org.hamcrest.CoreMatchers.containsString;",
            "import static org.hamcrest.CoreMatchers.is;",
            "import static org.hamcrest.CoreMatchers.not;",
            "import static org.hamcrest.CoreMatchers.nullValue;",
            "import static org.hamcrest.CoreMatchers.startsWith;",
            "import static org.hamcrest.MatcherAssert.assertThat;",
            "import static org.hamcrest.Matchers.hasToString;"
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/ast/Pos_plusTest.java",
        "testclass_name": "Pos_plusTest",
        "dependencies": [
            "package net.hydromatic.morel.ast;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pos_plusTest",
        "description": "Unit tests for the plus method of the Pos class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testPlus",
                "primary_tested": [
                    "Pos.plus(Pos)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pos"
                    ]
                },
                "category": "unit",
                "description": "Tests the plus method of the Pos class, ensuring it correctly combines two Pos objects."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_rightTest.java",
        "testclass_name": "Pair_rightTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.Map;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Pair_rightTest",
        "description": "Unit test for the Pair.right method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testRight",
                "primary_tested": [
                    "Pair.right(List<Map.Entry<String,Integer>>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "List",
                        "Map"
                    ],
                    "project_specific_resources": [
                        "Pair.of(String,Integer)"
                    ]
                },
                "category": "unit",
                "description": "Tests the Pair.right method to ensure it correctly extracts the right values from a list of pairs."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_strTest.java",
        "testclass_name": "Static_strTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_strTest",
        "description": "Unit tests for the Static.str method.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testStr",
                "primary_tested": [
                    "Static.str(StringBuilder)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Static"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Static.str method to ensure it correctly converts a StringBuilder to a String and clears the StringBuilder."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipMutableTest.java",
        "testclass_name": "Pair_zipMutableTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Pair_zipMutableTest",
        "description": "Unit tests for the Pair.zipMutable method.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testZipMutable",
                "primary_tested": [
                    "Pair.zipMutable(List<Integer>,List<String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "List",
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the zipMutable functionality of the Pair class, ensuring that it correctly pairs elements from two lists."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_toMapTest.java",
        "testclass_name": "Pair_toMapTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.HashMap;",
            "import java.util.List;",
            "import java.util.Map;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Pair_toMapTest",
        "description": "Unit test for converting a list of pairs to a map.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testToMap",
                "primary_tested": [
                    "Pair.toMap(List<Pair<String,Integer>>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "HashMap",
                        "List",
                        "Map"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the conversion of a list of pairs to a map."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_leftTest.java",
        "testclass_name": "Pair_leftTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.Map;",
            "import java.util.AbstractMap;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Pair_leftTest",
        "description": "Unit tests for the Pair.left method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testLeft",
                "primary_tested": [
                    "Pair.left(List<Map.Entry<String,Integer>>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.util.Arrays",
                        "java.util.List",
                        "java.util.Map",
                        "java.util.AbstractMap",
                        "org.junit.jupiter.api.Assertions"
                    ],
                    "project_specific_resources": [
                        "Pair.left(List<Map.Entry<String,Integer>>)"
                    ]
                },
                "category": "unit",
                "description": "Tests the Pair.left method to ensure it correctly extracts the left elements from a list of pairs."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_forEachTest.java",
        "testclass_name": "Pair_forEachTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.function.BiConsumer;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Pair_forEachTest",
        "description": "Unit test for the forEach method in the Pair class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testForEach",
                "primary_tested": [
                    "Pair.forEach(List<Integer>,List<String>,BiConsumer<Integer,String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "List",
                        "BiConsumer",
                        "StringBuilder"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the forEach functionality of the Pair class, ensuring that it correctly appends key-value pairs to a StringBuilder."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_plusTest.java",
        "testclass_name": "Static_plusTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableMap;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.HashMap;",
            "import java.util.Map;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_plusTest",
        "description": "Unit tests for the Static.plus method which adds a key-value pair to a map.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testPlus",
                "primary_tested": [
                    "Static.plus(Map<String,Integer>,String,Integer)"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.ImmutableMap",
                        "java.util.HashMap",
                        "java.util.Map",
                        "net.hydromatic.morel.util.Static"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the Static.plus method to ensure it correctly adds a key-value pair to a map and returns the updated map."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_toImmutableListTest.java",
        "testclass_name": "Static_toImmutableListTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableList;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.stream.Stream;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_toImmutableListTest",
        "description": "Unit test for converting a Stream to an ImmutableList using Static.toImmutableList().",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testToImmutableList",
                "primary_tested": [
                    "Static.toImmutableList()"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.ImmutableList",
                        "java.util.Arrays",
                        "java.util.List",
                        "java.util.stream.Stream"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the conversion of a Stream to an ImmutableList using Static.toImmutableList()."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_minusTest.java",
        "testclass_name": "Static_minusTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableList;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_minusTest",
        "description": "Unit tests for the Static.minus method, which removes an element from a list.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testMinus_ElementPresent",
                "primary_tested": [
                    "Static.minus(List<String>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Static",
                        "Arrays"
                    ]
                },
                "category": "unit",
                "description": "Tests the Static.minus method when the element to be removed is present in the list."
            },
            {
                "name": "testMinus_ElementNotPresent",
                "primary_tested": [
                    "Static.minus(List<String>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Static",
                        "Arrays"
                    ]
                },
                "category": "unit",
                "description": "Tests the Static.minus method when the element to be removed is not present in the list."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/ast/Pos_splitTest.java",
        "testclass_name": "Pos_splitTest",
        "dependencies": [
            "package net.hydromatic.morel.ast;",
            "import net.hydromatic.morel.util.Pair;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pos_splitTest",
        "description": "Unit tests for the Pos.split method, which splits a string based on a delimiter and returns a Pair containing the split parts and their positions.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testSplit_ValidInput",
                "primary_tested": [
                    "Pos.split(String,char,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pos",
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the Pos.split method with valid input, ensuring it correctly splits the string and returns the expected Pair."
            },
            {
                "name": "testSplit_InvalidInput",
                "primary_tested": [
                    "Pos.split(String,char,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pos",
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the Pos.split method with invalid input, ensuring it throws an IllegalArgumentException with the expected message."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/TailList_clearTest.java",
        "testclass_name": "TailList_clearTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.ArrayList;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "TailList_clearTest",
        "description": "Unit test for the clear method of the TailList class.",
        "class_members": {
            "variables": [
                {
                    "name": "backingList",
                    "type": "List<Integer>"
                },
                {
                    "name": "tailList",
                    "type": "TailList<Integer>"
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testClear",
                "primary_tested": [
                    "TailList.clear()"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.util.ArrayList",
                        "java.util.List",
                        "TailList"
                    ],
                    "class_members": [
                        {
                            "name": "backingList",
                            "type": "variable"
                        },
                        {
                            "name": "tailList",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the clear functionality of the TailList class, ensuring that only the specified number of elements are retained in the backing list."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/type/RangeExtent_toStringTest.java",
        "testclass_name": "RangeExtent_toStringTest",
        "dependencies": [
            "package net.hydromatic.morel.type;",
            "import com.google.common.collect.ImmutableMap;",
            "import com.google.common.collect.ImmutableRangeSet;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "RangeExtent_toStringTest",
        "description": "Unit tests for the toString method of the RangeExtent class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testToStringUnbounded",
                "primary_tested": [
                    "RangeExtent.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Type",
                        "ImmutableMap"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the toString method of RangeExtent for an unbounded case."
            },
            {
                "name": "testToStringBounded",
                "primary_tested": [
                    "RangeExtent.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Type",
                        "ImmutableMap",
                        "ImmutableRangeSet"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the toString method of RangeExtent for a bounded case."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/ast/Pos_equalsTest.java",
        "testclass_name": "Pos_equalsTest",
        "dependencies": [
            "package net.hydromatic.morel.ast;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pos_equalsTest",
        "description": "Unit tests for the equals method in the Pos class.",
        "class_members": {
            "variables": [
                {
                    "name": "pos1",
                    "type": "Pos"
                },
                {
                    "name": "pos2",
                    "type": "Pos"
                },
                {
                    "name": "pos3",
                    "type": "Pos"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testEquals",
                "primary_tested": [
                    "Pos.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pos"
                    ],
                    "class_members": [
                        {
                            "name": "pos1",
                            "type": "variable"
                        },
                        {
                            "name": "pos2",
                            "type": "variable"
                        },
                        {
                            "name": "pos3",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method of the Pos class, including equality checks for the same object, equal objects, different objects, null, and different class types."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/ast/Pos_sumTest.java",
        "testclass_name": "Pos_sumTest",
        "dependencies": [
            "package net.hydromatic.morel.ast;",
            "import com.google.common.collect.Lists;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Pos_sumTest",
        "description": "Unit tests for the Pos.sum method, which sums positions from a list or iterable.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testSumWithList",
                "primary_tested": [
                    "Pos.sum(List<Pos>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.Lists",
                        "Pos"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Pos.sum method with a List of Pos objects."
            },
            {
                "name": "testSumWithIterable",
                "primary_tested": [
                    "Pos.sum(Iterable<Pos>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.Lists",
                        "Pos"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Pos.sum method with an Iterable of Pos objects."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachTest.java",
        "testclass_name": "Ord_forEachTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.function.ObjIntConsumer;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Ord_forEachTest",
        "description": "Unit test for the Ord.forEach method.",
        "class_members": {
            "variables": [
                {
                    "name": "list",
                    "type": "List<String>"
                },
                {
                    "name": "result",
                    "type": "StringBuilder"
                },
                {
                    "name": "consumer",
                    "type": "ObjIntConsumer<String>"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testForEach",
                "primary_tested": [
                    "Ord.forEach(List<String>,ObjIntConsumer<String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "List",
                        "ObjIntConsumer",
                        "Ord"
                    ],
                    "class_members": [
                        {
                            "name": "list",
                            "type": "variable"
                        },
                        {
                            "name": "result",
                            "type": "variable"
                        },
                        {
                            "name": "consumer",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Ord.forEach method by iterating over a list of strings and appending each element and its index to a StringBuilder."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_firstAndTest.java",
        "testclass_name": "Pair_firstAndTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.Iterator;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pair_firstAndTest",
        "description": "Unit tests for the Pair.firstAnd method, which generates pairs from an iterable.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testFirstAndWithNonEmptyIterable",
                "primary_tested": [
                    "Pair.firstAnd(Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "Collections",
                        "Iterator"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Pair.firstAnd method with a non-empty iterable, ensuring it generates the correct pairs."
            },
            {
                "name": "testFirstAndWithEmptyIterable",
                "primary_tested": [
                    "Pair.firstAnd(Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Collections",
                        "Iterator"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Pair.firstAnd method with an empty iterable, ensuring it does not generate any pairs."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_transformEagerTest.java",
        "testclass_name": "Static_transformEagerTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableList;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.function.Function;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_transformEagerTest",
        "description": "Unit tests for the Static.transformEager method, which transforms an iterable using a given function.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testTransformEagerWithEmptyIterable",
                "primary_tested": [
                    "Static.transformEager(Iterable<String>,Function<String,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Collections",
                        "ImmutableList",
                        "Static"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the transformEager method with an empty iterable, expecting an empty result."
            },
            {
                "name": "testTransformEagerWithNonEmptyIterable",
                "primary_tested": [
                    "Static.transformEager(Iterable<String>,Function<String,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "ImmutableList",
                        "Static"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the transformEager method with a non-empty iterable, expecting the transformed result based on the length of each string."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachIndexedTest.java",
        "testclass_name": "Ord_forEachIndexedTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.function.ObjIntConsumer;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Ord_forEachIndexedTest",
        "description": "Unit test for the forEachIndexed method in the Ord class.",
        "class_members": {
            "variables": [
                {
                    "name": "list",
                    "type": "List<String>"
                },
                {
                    "name": "result",
                    "type": "StringBuilder"
                },
                {
                    "name": "consumer",
                    "type": "ObjIntConsumer<String>"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testForEachIndexed",
                "primary_tested": [
                    "Ord.forEachIndexed(List<String>,ObjIntConsumer<String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.util.Arrays",
                        "java.util.List",
                        "java.util.function.ObjIntConsumer",
                        "net.hydromatic.morel.util.Ord"
                    ],
                    "class_members": [
                        {
                            "name": "list",
                            "type": "variable"
                        },
                        {
                            "name": "result",
                            "type": "variable"
                        },
                        {
                            "name": "consumer",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the forEachIndexed method of the Ord class by verifying that it correctly processes a list of strings and appends their indices and values to a StringBuilder."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_adjacentsTest.java",
        "testclass_name": "Pair_adjacentsTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.Iterator;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pair_adjacentsTest",
        "description": "Unit tests for the Pair.adjacents method, which generates pairs of adjacent elements from an iterable.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAdjacentsWithNonEmptyIterable",
                "primary_tested": [
                    "Pair.adjacents(Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "Collections",
                        "Iterator",
                        "List"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Pair.adjacents method with a non-empty iterable, ensuring it correctly generates pairs of adjacent elements."
            },
            {
                "name": "testAdjacentsWithEmptyIterable",
                "primary_tested": [
                    "Pair.adjacents(Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "Collections",
                        "Iterator",
                        "List"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the Pair.adjacents method with an empty iterable, ensuring it correctly handles the case where no pairs are generated."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_intersectTest.java",
        "testclass_name": "Static_intersectTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableList;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_intersectTest",
        "description": "Unit tests for the Static.intersect method, which computes the intersection of two lists.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testIntersect_NoCommonElements",
                "primary_tested": [
                    "Static.intersect(List<Integer>,Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "Collections",
                        "Static"
                    ]
                },
                "category": "unit",
                "description": "Tests the intersection functionality of the Static class when there are no common elements between the two lists."
            },
            {
                "name": "testIntersect_WithCommonElements",
                "primary_tested": [
                    "Static.intersect(List<Integer>,Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "ImmutableList",
                        "Static"
                    ]
                },
                "category": "unit",
                "description": "Tests the intersection functionality of the Static class when there are common elements between the two lists."
            },
            {
                "name": "testIntersect_AllCommonElements",
                "primary_tested": [
                    "Static.intersect(List<Integer>,Iterable<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "ImmutableList",
                        "Static"
                    ]
                },
                "category": "unit",
                "description": "Tests the intersection functionality of the Static class when all elements are common between the two lists."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_compareToTest.java",
        "testclass_name": "Pair_compareToTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pair_compareToTest",
        "description": "Unit tests for the compareTo method of the Pair class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCompareTo_DifferentLeft",
                "primary_tested": [
                    "Pair.compareTo(Pair)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the compareTo method when the left elements of the pairs are different."
            },
            {
                "name": "testCompareTo_SameLeftDifferentRight",
                "primary_tested": [
                    "Pair.compareTo(Pair)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the compareTo method when the left elements are the same but the right elements are different."
            },
            {
                "name": "testCompareTo_SameLeftSameRight",
                "primary_tested": [
                    "Pair.compareTo(Pair)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the compareTo method when both the left and right elements of the pairs are the same."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_shorterThanTest.java",
        "testclass_name": "Static_shorterThanTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableList;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collection;",
            "import static org.junit.jupiter.api.Assertions.assertFalse;",
            "import static org.junit.jupiter.api.Assertions.assertTrue;"
        ],
        "name": "Static_shorterThanTest",
        "description": "Unit tests for the Static.shorterThan method, which checks if a collection or iterable is shorter than a given number.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testShorterThanWithCollection",
                "primary_tested": [
                    "Static.shorterThan(Collection<Integer>,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Static",
                        "Arrays"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the shorterThan method with a Collection, checking if the collection is shorter than a given number."
            },
            {
                "name": "testShorterThanWithIterable",
                "primary_tested": [
                    "Static.shorterThan(Iterable<Integer>,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Static",
                        "ImmutableList"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the shorterThan method with an Iterable, checking if the iterable is shorter than a given number."
            },
            {
                "name": "testShorterThanWithNonPositiveN",
                "primary_tested": [
                    "Static.shorterThan(Iterable<Integer>,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Static",
                        "ImmutableList"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the shorterThan method with non-positive values for n, checking if the method correctly handles such cases."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_anyMatchTest.java",
        "testclass_name": "Pair_anyMatchTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.List;",
            "import java.util.function.BiPredicate;",
            "import static org.junit.jupiter.api.Assertions.assertFalse;",
            "import static org.junit.jupiter.api.Assertions.assertTrue;"
        ],
        "name": "Pair_anyMatchTest",
        "description": "Unit tests for the Pair.anyMatch method, which checks if any pair of elements from two lists matches a given predicate.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAnyMatch_True",
                "primary_tested": [
                    "Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "BiPredicate"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the Pair.anyMatch method with lists where at least one pair matches the predicate."
            },
            {
                "name": "testAnyMatch_False",
                "primary_tested": [
                    "Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "BiPredicate"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the Pair.anyMatch method with lists where no pairs match the predicate."
            },
            {
                "name": "testAnyMatch_EmptyIterables",
                "primary_tested": [
                    "Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Collections",
                        "BiPredicate"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the Pair.anyMatch method with empty lists, expecting no match."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipTest.java",
        "testclass_name": "Pair_zipTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pair_zipTest",
        "description": "Unit tests for the Pair.zip method, which zips two lists into a list of pairs.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testZipStrictEqualSizes",
                "primary_tested": [
                    "Pair.zip(List<Integer>,List<String>,boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "List",
                        "Pair<Integer, String>"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the zip functionality when both lists have equal sizes and strict mode is enabled."
            },
            {
                "name": "testZipStrictDifferentSizes",
                "primary_tested": [
                    "Pair.zip(List<Integer>,List<String>,boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "List",
                        "Pair<Integer, String>"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the zip functionality when lists have different sizes and strict mode is enabled, expecting an AssertionError."
            },
            {
                "name": "testZipNonStrict",
                "primary_tested": [
                    "Pair.zip(List<Integer>,List<String>,boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "List",
                        "Pair<Integer, String>"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the zip functionality when lists have different sizes and strict mode is disabled."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/compile/Extents_unionTest.java",
        "testclass_name": "Extents_unionTest",
        "dependencies": [
            "package net.hydromatic.morel.compile;",
            "import com.google.common.collect.ImmutableMap;",
            "import com.google.common.collect.ImmutableRangeSet;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.Map;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Extents_unionTest",
        "description": "Unit tests for the union functionality of Extents class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testUnionWithEmptyList",
                "primary_tested": [
                    "Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Extents",
                        "ImmutableMap",
                        "ImmutableRangeSet"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the union functionality of Extents with an empty list of maps."
            },
            {
                "name": "testUnionWithSingleMap",
                "primary_tested": [
                    "Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Extents",
                        "ImmutableMap",
                        "ImmutableRangeSet",
                        "com.google.common.collect.Range"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the union functionality of Extents with a single map."
            },
            {
                "name": "testUnionWithMultipleMaps",
                "primary_tested": [
                    "Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Extents",
                        "ImmutableMap",
                        "ImmutableRangeSet",
                        "com.google.common.collect.Range"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the union functionality of Extents with multiple maps."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/Shell_createTest.java",
        "testclass_name": "Shell_createTest",
        "dependencies": [
            "package net.hydromatic.morel;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.io.ByteArrayInputStream;",
            "import java.io.ByteArrayOutputStream;",
            "import java.io.IOException;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;"
        ],
        "name": "Shell_createTest",
        "description": "Unit tests for creating Shell instances with different configurations.",
        "class_members": {
            "variables": [
                {
                    "name": "shell",
                    "type": "Shell"
                },
                {
                    "name": "inputStream",
                    "type": "ByteArrayInputStream"
                },
                {
                    "name": "outputStream",
                    "type": "ByteArrayOutputStream"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testCreateShellWithDefaultConfig",
                "primary_tested": [
                    "Shell.create(List<String>,ByteArrayInputStream,ByteArrayOutputStream)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "ByteArrayInputStream",
                        "ByteArrayOutputStream",
                        "Arrays",
                        "List"
                    ],
                    "class_members": [
                        {
                            "name": "shell",
                            "type": "variable"
                        },
                        {
                            "name": "inputStream",
                            "type": "variable"
                        },
                        {
                            "name": "outputStream",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the creation of a Shell instance with default configuration."
            },
            {
                "name": "testCreateShellWithCustomConfig",
                "primary_tested": [
                    "Shell.create(List<String>,ByteArrayInputStream,ByteArrayOutputStream)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Shell",
                        "ByteArrayInputStream",
                        "ByteArrayOutputStream",
                        "Arrays",
                        "List"
                    ],
                    "class_members": [
                        {
                            "name": "shell",
                            "type": "variable"
                        },
                        {
                            "name": "inputStream",
                            "type": "variable"
                        },
                        {
                            "name": "outputStream",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the creation of a Shell instance with custom configuration."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Sat_variableTest.java",
        "testclass_name": "Sat_variableTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Sat_variableTest",
        "description": "Unit tests for the Sat.Variable class, focusing on variable creation, retrieval, and ID increment.",
        "class_members": {
            "variables": [
                {
                    "name": "sat",
                    "type": "Sat"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testVariableCreation",
                "primary_tested": [
                    "Sat.variable(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Sat"
                    ],
                    "class_members": [
                        {
                            "name": "sat",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the creation of a new Sat.Variable and verifies its properties."
            },
            {
                "name": "testVariableRetrieval",
                "primary_tested": [
                    "Sat.variable(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Sat"
                    ],
                    "class_members": [
                        {
                            "name": "sat",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the retrieval of an existing Sat.Variable and verifies that it returns the same instance."
            },
            {
                "name": "testVariableIdIncrement",
                "primary_tested": [
                    "Sat.variable(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Sat"
                    ],
                    "class_members": [
                        {
                            "name": "sat",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the increment of the ID property for each new Sat.Variable created."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Static_findTest.java",
        "testclass_name": "Static_findTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import com.google.common.collect.ImmutableList;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Collection;",
            "import java.util.Iterator;",
            "import java.util.List;",
            "import java.util.ListIterator;",
            "import java.util.function.Predicate;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Static_findTest",
        "description": "Unit tests for the Static.find method, which finds the index of an element in a list based on a predicate.",
        "class_members": {
            "nested_classes": [
                {
                    "name": "NonRandomAccessList",
                    "description": "Internal class implementing List interface with non-random access behavior."
                }
            ]
        },
        "test_cases": [
            {
                "name": "testFindRandomAccessList",
                "primary_tested": [
                    "Static.find(List<Integer>,Predicate<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.ImmutableList",
                        "java.util.function.Predicate",
                        "net.hydromatic.morel.util.Static"
                    ]
                },
                "category": "unit",
                "description": "Tests the Static.find method with a random access list."
            },
            {
                "name": "testFindNonRandomAccessList",
                "primary_tested": [
                    "Static.find(List<Integer>,Predicate<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.ImmutableList",
                        "java.util.function.Predicate",
                        "net.hydromatic.morel.util.Static"
                    ],
                    "class_members": [
                        {
                            "name": "NonRandomAccessList",
                            "type": "nested_class"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Static.find method with a non-random access list."
            },
            {
                "name": "testFindNoMatch",
                "primary_tested": [
                    "Static.find(List<Integer>,Predicate<Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "com.google.common.collect.ImmutableList",
                        "java.util.function.Predicate",
                        "net.hydromatic.morel.util.Static"
                    ]
                },
                "category": "unit",
                "description": "Tests the Static.find method when no matching element is found."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_equalsTest.java",
        "testclass_name": "Pair_equalsTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.AbstractMap;",
            "import java.util.Map;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Pair_equalsTest",
        "description": "Unit tests for the equals method in the Pair class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testEquals_SameInstance",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with the same instance."
            },
            {
                "name": "testEquals_DifferentInstanceSameValues",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with different instances but same values."
            },
            {
                "name": "testEquals_DifferentInstanceDifferentValues",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with different instances and different values."
            },
            {
                "name": "testEquals_NotInstanceOfMapEntry",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with an object that is not an instance of Map.Entry."
            },
            {
                "name": "testEquals_Null",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with a null object."
            },
            {
                "name": "testEquals_MapEntrySameValues",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Map.Entry"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with a Map.Entry having the same values."
            },
            {
                "name": "testEquals_MapEntryDifferentValues",
                "primary_tested": [
                    "Pair.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Map.Entry"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the equals method with a Map.Entry having different values."
            }
        ]
    },
    {
        "file_path": "src/test/java/net/hydromatic/morel/util/Pair_allMatchTest.java",
        "testclass_name": "Pair_allMatchTest",
        "dependencies": [
            "package net.hydromatic.morel.util;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.List;",
            "import java.util.function.BiPredicate;",
            "import static org.junit.jupiter.api.Assertions.assertFalse;",
            "import static org.junit.jupiter.api.Assertions.assertTrue;"
        ],
        "name": "Pair_allMatchTest",
        "description": "Unit tests for the Pair.allMatch method, which checks if all elements in two lists match based on a given predicate.",
        "class_members": {
            "variables": [
                {
                    "name": "ks",
                    "type": "List<Integer>"
                },
                {
                    "name": "vs",
                    "type": "List<Integer>"
                },
                {
                    "name": "predicate",
                    "type": "BiPredicate<Integer, Integer>"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testAllMatch_AllTrue",
                "primary_tested": [
                    "Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "BiPredicate"
                    ],
                    "class_members": [
                        {
                            "name": "ks",
                            "type": "variable"
                        },
                        {
                            "name": "vs",
                            "type": "variable"
                        },
                        {
                            "name": "predicate",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Pair.allMatch method with two lists where all elements match based on the predicate."
            },
            {
                "name": "testAllMatch_OneFalse",
                "primary_tested": [
                    "Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "BiPredicate"
                    ],
                    "class_members": [
                        {
                            "name": "ks",
                            "type": "variable"
                        },
                        {
                            "name": "vs",
                            "type": "variable"
                        },
                        {
                            "name": "predicate",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Pair.allMatch method with two lists where one element does not match based on the predicate."
            },
            {
                "name": "testAllMatch_DifferentLengths",
                "primary_tested": [
                    "Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Arrays",
                        "BiPredicate"
                    ],
                    "class_members": [
                        {
                            "name": "ks",
                            "type": "variable"
                        },
                        {
                            "name": "vs",
                            "type": "variable"
                        },
                        {
                            "name": "predicate",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Pair.allMatch method with two lists of different lengths."
            },
            {
                "name": "testAllMatch_EmptyLists",
                "primary_tested": [
                    "Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Pair",
                        "Collections",
                        "BiPredicate"
                    ],
                    "class_members": [
                        {
                            "name": "ks",
                            "type": "variable"
                        },
                        {
                            "name": "vs",
                            "type": "variable"
                        },
                        {
                            "name": "predicate",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the Pair.allMatch method with two empty lists."
            }
        ]
    }
]