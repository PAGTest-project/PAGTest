[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.type.RangeExtent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass Extents_isInfiniteTest {\n\n    @Test\n    void testIsInfinite_NonZExtent() {\n        Core.Exp exp = mock(Core.Exp.class);\n        when(exp.isCallTo(BuiltIn.Z_EXTENT)).thenReturn(false);\n\n        assertFalse(Extents.isInfinite(exp));\n    }\n\n    @Test\n    void testIsInfinite_ZExtentWithNullIterable() {\n        Core.Exp exp = mock(Core.Exp.class);\n        Core.Apply apply = mock(Core.Apply.class);\n        Core.Literal literal = mock(Core.Literal.class);\n        RangeExtent rangeExtent = mock(RangeExtent.class);\n\n        when(exp.isCallTo(BuiltIn.Z_EXTENT)).thenReturn(true);\n        when(exp).thenReturn(apply);\n        when(apply.arg).thenReturn(literal);\n        when(literal.unwrap(RangeExtent.class)).thenReturn(rangeExtent);\n        when(rangeExtent.iterable).thenReturn(null);\n\n        assertTrue(Extents.isInfinite(exp));\n    }\n\n    @Test\n    void testIsInfinite_ZExtentWithNonNullIterable() {\n        Core.Exp exp = mock(Core.Exp.class);\n        Core.Apply apply = mock(Core.Apply.class);\n        Core.Literal literal = mock(Core.Literal.class);\n        RangeExtent rangeExtent = mock(RangeExtent.class);\n\n        when(exp.isCallTo(BuiltIn.Z_EXTENT)).thenReturn(true);\n        when(exp).thenReturn(apply);\n        when(apply.arg).thenReturn(literal);\n        when(literal.unwrap(RangeExtent.class)).thenReturn(rangeExtent);\n        when(rangeExtent.iterable).thenReturn(mock(Iterable.class));\n\n        assertFalse(Extents.isInfinite(exp));\n    }\n}\n"}]