[{"strategy": "retry", "code": "\npackage net.hydromatic.morel;\n\nimport net.hydromatic.morel.compile.Environment;\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.eval.Session;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport static org.mockito.Mockito.*;\n\npublic class Main_runTest {\n\n    private Main main;\n    private BufferedReader mockIn;\n    private PrintWriter mockOut;\n    private Session mockSession;\n    private Map<String, Object> valueMap;\n\n    @BeforeEach\n    public void setUp() {\n        mockIn = mock(BufferedReader.class);\n        mockOut = mock(PrintWriter.class);\n        mockSession = mock(Session.class);\n        valueMap = new LinkedHashMap<>();\n        main = new Main(null, mockIn, mockOut, valueMap, null, false) {\n            @Override\n            public Session getSession() {\n                return mockSession;\n            }\n        };\n    }\n\n    @Test\n    public void testRun() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Environment env = Environments.env(typeSystem, mockSession, valueMap);\n        Consumer<String> echoLines = mock(Consumer.class);\n        Consumer<String> outLines = mock(Consumer.class);\n        Map<String, Binding> outBindings = new LinkedHashMap<>();\n        Shell mockShell = mock(Shell.class);\n\n        when(mockSession.withShell(any(Shell.class), any(Consumer.class), any(Consumer.class)))\n            .thenAnswer(invocation -> {\n                Consumer<Session> consumer = invocation.getArgument(2);\n                consumer.accept(mockSession);\n                return null;\n            });\n\n        // When\n        main.run();\n\n        // Then\n        verify(mockSession).withShell(any(Shell.class), any(Consumer.class), any(Consumer.class));\n        verify(mockOut).flush();\n    }\n}\n"}]