[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.compile;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableRangeSet;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass Extents_unionTest {\n\n    @Test\n    void testUnionWithEmptyList() {\n        List<Map<String, ImmutableRangeSet<Integer>>> rangeSetMaps = Arrays.asList();\n        Map<String, ImmutableRangeSet<Integer>> result = Extents.union(rangeSetMaps);\n        assertEquals(ImmutableMap.of(\"/\", ImmutableRangeSet.of()), result);\n    }\n\n    @Test\n    void testUnionWithSingleMap() {\n        ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.<Integer>builder().add(com.google.common.collect.Range.closed(1, 10)).build();\n        Map<String, ImmutableRangeSet<Integer>> singleMap = ImmutableMap.of(\"/\", rangeSet);\n        List<Map<String, ImmutableRangeSet<Integer>>> rangeSetMaps = Arrays.asList(singleMap);\n        Map<String, ImmutableRangeSet<Integer>> result = Extents.union(rangeSetMaps);\n        assertEquals(singleMap, result);\n    }\n\n    @Test\n    void testUnionWithMultipleMaps() {\n        ImmutableRangeSet<Integer> rangeSet1 = ImmutableRangeSet.<Integer>builder().add(com.google.common.collect.Range.closed(1, 10)).build();\n        ImmutableRangeSet<Integer> rangeSet2 = ImmutableRangeSet.<Integer>builder().add(com.google.common.collect.Range.closed(5, 15)).build();\n        Map<String, ImmutableRangeSet<Integer>> map1 = ImmutableMap.of(\"/\", rangeSet1);\n        Map<String, ImmutableRangeSet<Integer>> map2 = ImmutableMap.of(\"/\", rangeSet2);\n        List<Map<String, ImmutableRangeSet<Integer>>> rangeSetMaps = Arrays.asList(map1, map2);\n        Map<String, ImmutableRangeSet<Integer>> result = Extents.union(rangeSetMaps);\n        ImmutableRangeSet<Integer> expectedRangeSet = ImmutableRangeSet.<Integer>builder().add(com.google.common.collect.Range.closed(1, 15)).build();\n        assertEquals(ImmutableMap.of(\"/\", expectedRangeSet), result);\n    }\n}\n"}]