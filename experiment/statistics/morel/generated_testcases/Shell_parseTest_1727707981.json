[{"strategy": "generate", "code": "\npackage net.hydromatic.morel;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport net.hydromatic.morel.foreign.ForeignValue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class Shell_parseTest {\n\n    private Shell shell;\n\n    @BeforeEach\n    public void setUp() {\n        shell = new Shell(ConfigImpl.DEFAULT, null);\n    }\n\n    @Test\n    public void testParseWithBannerFalse() {\n        List<String> argList = ImmutableList.of(\"--banner=false\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(false, ((ConfigImpl) config).banner);\n    }\n\n    @Test\n    public void testParseWithTerminalDumb() {\n        List<String> argList = ImmutableList.of(\"--terminal=dumb\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(true, ((ConfigImpl) config).dumb);\n    }\n\n    @Test\n    public void testParseWithEcho() {\n        List<String> argList = ImmutableList.of(\"--echo\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(true, ((ConfigImpl) config).echo);\n    }\n\n    @Test\n    public void testParseWithHelp() {\n        List<String> argList = ImmutableList.of(\"--help\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(true, ((ConfigImpl) config).help);\n    }\n\n    @Test\n    public void testParseWithSystemFalse() {\n        List<String> argList = ImmutableList.of(\"--system=false\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(false, ((ConfigImpl) config).system);\n    }\n\n    @Test\n    public void testParseWithForeign() {\n        List<String> argList = ImmutableList.of(\"--foreign=com.example.TestClass\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        // Assuming instantiate method works correctly, we just check if the method is called\n        // and the valueMap is built correctly.\n        assertEquals(1, ((ConfigImpl) config).valueMap.size());\n    }\n\n    @Test\n    public void testParseWithDirectory() {\n        List<String> argList = ImmutableList.of(\"--directory=/test/dir\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(new File(\"/test/dir\"), ((ConfigImpl) config).directory);\n    }\n\n    @Test\n    public void testParseWithMaxUseDepth() {\n        List<String> argList = ImmutableList.of(\"--maxUseDepth=5\");\n        Config config = Shell.parse(ConfigImpl.DEFAULT, argList);\n        assertEquals(5, ((ConfigImpl) config).maxUseDepth);\n    }\n}\n"}]