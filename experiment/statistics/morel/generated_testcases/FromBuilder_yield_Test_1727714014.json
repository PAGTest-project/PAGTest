[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport com.google.common.collect.ImmutableList;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass FromBuilder_yield_Test {\n\n    @Test\n    void testYield_TUPLE_IDENTITY_Singleton() {\n        FromBuilder builder = new FromBuilder(new TypeSystem(), null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(\"x\")));\n        builder.bindings.add(new Binding(new Core.IdPat(\"x\"), null, null, false));\n        FromBuilder result = builder.yield_(false, null, exp);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_TUPLE_IDENTITY_NonSingleton() {\n        FromBuilder builder = new FromBuilder(new TypeSystem(), null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(\"x\"), new Core.Id(\"y\")));\n        builder.bindings.add(new Binding(new Core.IdPat(\"x\"), null, null, false));\n        builder.bindings.add(new Binding(new Core.IdPat(\"y\"), null, null, false));\n        FromBuilder result = builder.yield_(false, null, exp);\n        assertEquals(builder, result);\n    }\n\n    @Test\n    void testYield_TUPLE_RENAME_Singleton() {\n        FromBuilder builder = new FromBuilder(new TypeSystem(), null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(\"y\")));\n        builder.bindings.add(new Binding(new Core.IdPat(\"x\"), null, null, false));\n        FromBuilder result = builder.yield_(false, null, exp);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_TUPLE_RENAME_NonSingleton() {\n        FromBuilder builder = new FromBuilder(new TypeSystem(), null);\n        Core.Exp exp = new Core.Tuple(Core.Op.TUPLE, ImmutableList.of(new Core.Id(\"y\"), new Core.Id(\"z\")));\n        builder.bindings.add(new Binding(new Core.IdPat(\"x\"), null, null, false));\n        builder.bindings.add(new Binding(new Core.IdPat(\"y\"), null, null, false));\n        FromBuilder result = builder.yield_(false, null, exp);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfNotLastIndex);\n        assertEquals(Integer.MIN_VALUE, builder.removeIfLastIndex);\n    }\n\n    @Test\n    void testYield_ID_Singleton() {\n        FromBuilder builder = new FromBuilder(new TypeSystem(), null);\n        Core.Exp exp = new Core.Id(\"x\");\n        builder.bindings.add(new Binding(new Core.IdPat(\"x\"), null, null, false));\n        FromBuilder result = builder.yield_(false, null, exp);\n        assertEquals(builder, result);\n    }\n}\n"}]