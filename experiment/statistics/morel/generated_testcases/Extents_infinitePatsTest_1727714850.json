[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.ast.FromBuilder;\nimport net.hydromatic.morel.ast.Shuttle;\nimport net.hydromatic.morel.type.TypeSystem;\nimport net.hydromatic.morel.util.ImmutablePairList;\nimport net.hydromatic.morel.util.Ord;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Extents_infinitePatsTest {\n\n    @Test\n    public void testInfinitePatsWithInfiniteScan() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Core.Decl node = mock(Core.Decl.class);\n        Core.From from = mock(Core.From.class);\n        Core.Scan scan = mock(Core.Scan.class);\n        Core.Exp exp = mock(Core.Exp.class);\n        Core.FromStep step = mock(Core.FromStep.class);\n        List<Core.FromStep> steps = List.of(step);\n        Ord<Core.FromStep> ordStep = new Ord<>(0, step);\n        List<Ord<Core.FromStep>> ordSteps = List.of(ordStep);\n\n        when(node.accept(any(Shuttle.class))).thenReturn(from);\n        when(from.steps).thenReturn(steps);\n        when(step.e).thenReturn(scan);\n        when(scan.exp).thenReturn(exp);\n        when(Extents.isInfinite(exp)).thenReturn(true);\n        when(core.fromBuilder(typeSystem)).thenReturn(mock(FromBuilder.class));\n        when(skip(steps, 1)).thenReturn(List.of());\n        when(create(typeSystem, scan.pat, ImmutableSortedMap.of(), List.of(), ImmutablePairList.of())).thenReturn(mock(Extents.Analysis.class));\n\n        // When\n        Core.Decl result = Extents.infinitePats(typeSystem, node);\n\n        // Then\n        assertEquals(from, result);\n    }\n\n    @Test\n    public void testInfinitePatsWithoutInfiniteScan() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Core.Decl node = mock(Core.Decl.class);\n        Core.From from = mock(Core.From.class);\n        Core.Scan scan = mock(Core.Scan.class);\n        Core.Exp exp = mock(Core.Exp.class);\n        Core.FromStep step = mock(Core.FromStep.class);\n        List<Core.FromStep> steps = List.of(step);\n        Ord<Core.FromStep> ordStep = new Ord<>(0, step);\n        List<Ord<Core.FromStep>> ordSteps = List.of(ordStep);\n\n        when(node.accept(any(Shuttle.class))).thenReturn(from);\n        when(from.steps).thenReturn(steps);\n        when(step.e).thenReturn(scan);\n        when(scan.exp).thenReturn(exp);\n        when(Extents.isInfinite(exp)).thenReturn(false);\n\n        // When\n        Core.Decl result = Extents.infinitePats(typeSystem, node);\n\n        // Then\n        assertEquals(from, result);\n    }\n}\n"}]