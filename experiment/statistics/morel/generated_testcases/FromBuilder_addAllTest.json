[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FromBuilder_addAllTest {\n\n    private FromBuilder fromBuilder;\n    private TypeSystem typeSystem;\n\n    @BeforeEach\n    public void setUp() {\n        typeSystem = new TypeSystem();\n        fromBuilder = new FromBuilder(typeSystem, Environments.empty());\n    }\n\n    @Test\n    public void testAddAll() {\n        // Given\n        Core.FromStep step1 = new Core.FromStep(Op.SCAN, Arrays.asList(new Binding(\"id1\", typeSystem.createType(\"type1\")))) {\n            @Override\n            public void accept(Shuttle shuttle) {\n                // Implementation of accept method\n            }\n        };\n        Core.FromStep step2 = new Core.FromStep(Op.SCAN, Arrays.asList(new Binding(\"id2\", typeSystem.createType(\"type2\")))) {\n            @Override\n            public void accept(Shuttle shuttle) {\n                // Implementation of accept method\n            }\n        };\n        Iterable<Core.FromStep> steps = Arrays.asList(step1, step2);\n\n        // When\n        FromBuilder result = fromBuilder.addAll(steps);\n\n        // Then\n        assertEquals(2, fromBuilder.bindings().size());\n        assertEquals(\"id1\", fromBuilder.bindings().get(0).id.name);\n        assertEquals(\"id2\", fromBuilder.bindings().get(1).id.name);\n        assertEquals(result, fromBuilder);\n    }\n}\n"}]