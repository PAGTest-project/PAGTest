[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environment;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FromBuilder_whereTest {\n\n    private FromBuilder fromBuilder;\n    private TypeSystem typeSystem;\n    private Environment env;\n    private CoreBuilder core;\n\n    @BeforeEach\n    public void setUp() {\n        typeSystem = new TypeSystem();\n        env = Environment.create(typeSystem);\n        core = new CoreBuilder(typeSystem);\n        fromBuilder = new FromBuilder(typeSystem, env);\n    }\n\n    @Test\n    public void testWhereWithTrueCondition() {\n        Core.Exp trueCondition = core.boolLiteral(true);\n        FromBuilder result = fromBuilder.where(trueCondition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithFalseCondition() {\n        Core.Exp falseCondition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(falseCondition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithNonLiteralCondition() {\n        Core.Exp nonLiteralCondition = core.id(new Core.IdPat(typeSystem.getBaseType(Core.TypeFamily.INT), \"someId\", 0));\n        FromBuilder result = fromBuilder.where(nonLiteralCondition);\n        assertEquals(fromBuilder, result);\n    }\n}\n"}]