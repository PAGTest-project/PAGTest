{"file_path": "src/test/java/org/jsoup/nodes/ElementIT.java", "testclass_name": "ElementIT", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ElementIT", "description": "Integration tests for the Element class in the Jsoup library, focusing on performance and overflow scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFastReparent", "primary_tested": ["Element.insertChildren(int,List<Node>)"], "associated_methods": ["Element.childNodes.size()", "Element.body().childNodes().size()", "Element.body().empty()", "Element.body().appendChild(Element)", "Element.body().children().get(int)", "Element.children().get(int).text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the performance of reparenting a large number of child nodes into a new wrapper element."}, {"name": "testFastReparentExistingContent", "primary_tested": ["Element.insertChildren(int,List<Node>)"], "associated_methods": ["Element.childNodes.size()", "Element.body().childNodes().size()", "Element.body().empty()", "Element.body().appendChild(Element)", "Element.body().children().get(int)", "Element.children().get(int).text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the performance of reparenting a large number of child nodes into a new wrapper element that already contains some content."}, {"name": "hasTextNoOverflow", "primary_tested": ["Document.hasText()"], "associated_methods": ["Element.appendElement(String)", "Element.text(String)", "Document.text()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the hasText method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "dataNoOverflow", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendElement(String)", "Element.text(String)", "Document.data()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the data method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "parentsNoOverflow", "primary_tested": ["Element.parents()"], "associated_methods": ["Element.appendElement(String)", "Element.ownerDocument()"], "external_dependencies": {"modules": ["Document", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the parents method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "wrapNoOverflow", "primary_tested": ["Element.wrap(String)"], "associated_methods": ["Element.appendElement(String)", "Element.parents().size()", "Element.body().html()"], "external_dependencies": {"modules": ["Document", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the wrap method to ensure it does not overflow when handling a large number of nested elements."}]}