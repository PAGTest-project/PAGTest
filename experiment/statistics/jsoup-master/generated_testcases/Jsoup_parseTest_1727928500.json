[{"strategy": "generate", "code": "\npackage org.jsoup;\n\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.nodes.Document;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.net.URL;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class Jsoup_parseTest {\n\n    private URL mockUrl;\n    private HttpConnection mockConnection;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        mockUrl = new URL(\"http://example.com\");\n        mockConnection = mock(HttpConnection.class);\n        when(HttpConnection.connect(mockUrl)).thenReturn(mockConnection);\n    }\n\n    @Test\n    public void testParseSuccess() throws IOException {\n        Document mockDocument = mock(Document.class);\n        when(mockConnection.get()).thenReturn(mockDocument);\n\n        Document result = Jsoup.parse(mockUrl, 5000);\n        assertEquals(mockDocument, result);\n        verify(mockConnection).timeout(5000);\n        verify(mockConnection).get();\n    }\n\n    @Test\n    public void testParseIOException() throws IOException {\n        when(mockConnection.get()).thenThrow(new IOException(\"Connection error\"));\n\n        assertThrows(IOException.class, () -> {\n            Jsoup.parse(mockUrl, 5000);\n        });\n        verify(mockConnection).timeout(5000);\n        verify(mockConnection).get();\n    }\n}\n"}]