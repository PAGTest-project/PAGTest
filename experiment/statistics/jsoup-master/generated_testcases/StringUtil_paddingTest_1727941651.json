[{"strategy": "generate", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_paddingTest {\n\n    @Test\n    public void testPaddingWithMemoizedValue() {\n        assertEquals(\"   \", StringUtil.padding(3, 20));\n    }\n\n    @Test\n    public void testPaddingWithCustomWidth() {\n        assertEquals(\"     \", StringUtil.padding(5, 20));\n    }\n\n    @Test\n    public void testPaddingWithMaxPaddingWidth() {\n        assertEquals(\"                    \", StringUtil.padding(30, 20));\n    }\n\n    @Test\n    public void testPaddingWithUnlimitedWidth() {\n        assertEquals(\"          \", StringUtil.padding(10, -1));\n    }\n\n    @Test\n    public void testPaddingWithZeroWidth() {\n        assertEquals(\"\", StringUtil.padding(0, 20));\n    }\n\n    @Test\n    public void testPaddingWithNegativeWidth() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            StringUtil.padding(-1, 20);\n        });\n        assertEquals(\"width must be >= 0\", exception.getMessage());\n    }\n\n    @Test\n    public void testPaddingWithNegativeMaxPaddingWidth() {\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            StringUtil.padding(10, -2);\n        });\n        assertEquals(\"maxPaddingWidth must be >= -1\", exception.getMessage());\n    }\n}\n"}]