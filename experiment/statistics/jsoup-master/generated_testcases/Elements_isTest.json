[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass Elements_isTest {\n\n    @Test\n    void testIs_ElementMatchesQuery() {\n        // Given\n        Element mockElement = mock(Element.class);\n        Elements elements = new Elements(1);\n        elements.add(mockElement);\n        Evaluator mockEvaluator = mock(Evaluator.class);\n        QueryParser mockQueryParser = mock(QueryParser.class);\n        when(mockQueryParser.parse(\"query\")).thenReturn(mockEvaluator);\n        when(mockElement.is(mockEvaluator)).thenReturn(true);\n\n        // When\n        boolean result = elements.is(\"query\");\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    void testIs_NoElementMatchesQuery() {\n        // Given\n        Element mockElement = mock(Element.class);\n        Elements elements = new Elements(1);\n        elements.add(mockElement);\n        Evaluator mockEvaluator = mock(Evaluator.class);\n        QueryParser mockQueryParser = mock(QueryParser.class);\n        when(mockQueryParser.parse(\"query\")).thenReturn(mockEvaluator);\n        when(mockElement.is(mockEvaluator)).thenReturn(false);\n\n        // When\n        boolean result = elements.is(\"query\");\n\n        // Then\n        assertFalse(result);\n    }\n}\n"}]