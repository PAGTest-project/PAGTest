[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class FormElement_submitTest {\n\n    private FormElement formElement;\n    private Document mockDocument;\n    private Connection mockConnection;\n\n    @BeforeEach\n    public void setUp() {\n        formElement = new FormElement(Tag.valueOf(\"form\"), \"http://example.com\", null);\n        mockDocument = mock(Document.class);\n        mockConnection = mock(Connection.class);\n        when(mockDocument.connection()).thenReturn(mockConnection);\n        when(mockConnection.newRequest()).thenReturn(mockConnection);\n    }\n\n    @Test\n    public void testSubmitWithAction() {\n        formElement.attr(\"action\", \"/submit\");\n        formElement.attr(\"method\", \"POST\");\n        when(formElement.ownerDocument()).thenReturn(mockDocument);\n\n        Connection result = formElement.submit();\n\n        verify(mockConnection).url(\"http://example.com/submit\");\n        verify(mockConnection).method(Connection.Method.POST);\n        verify(mockConnection).data(formElement.formData());\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testSubmitWithoutAction() {\n        formElement.attr(\"method\", \"GET\");\n        when(formElement.ownerDocument()).thenReturn(mockDocument);\n\n        Connection result = formElement.submit();\n\n        verify(mockConnection).url(\"http://example.com\");\n        verify(mockConnection).method(Connection.Method.GET);\n        verify(mockConnection).data(formElement.formData());\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testSubmitWithInvalidAction() {\n        formElement.attr(\"action\", \"\");\n        when(formElement.ownerDocument()).thenReturn(mockDocument);\n\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            formElement.submit();\n        });\n\n        assertEquals(\"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\", exception.getMessage());\n    }\n}\n"}]