[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Node;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeTraversor_traverseTest {\n\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        doc = Jsoup.parse(\"<div><p>Hello</p><p>World</p></div>\");\n    }\n\n    @Test\n    public void testTraverse() {\n        final StringBuilder accum = new StringBuilder();\n        NodeTraversor.traverse(new NodeVisitor() {\n            @Override\n            public void head(Node node, int depth) {\n                accum.append(\"<\").append(node.nodeName()).append(\">\");\n            }\n\n            @Override\n            public void tail(Node node, int depth) {\n                accum.append(\"</\").append(node.nodeName()).append(\">\");\n            }\n        }, doc.body());\n\n        assertEquals(\"<body><div><p><#text></#text></p><p><#text></#text></p></div></body>\", accum.toString());\n    }\n\n    @Test\n    public void testTraverseWithNullVisitor() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            NodeTraversor.traverse((NodeVisitor) null, doc.body());\n        });\n    }\n\n    @Test\n    public void testTraverseWithNullRoot() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            NodeTraversor.traverse(new NodeVisitor() {\n                @Override\n                public void head(Node node, int depth) {}\n\n                @Override\n                public void tail(Node node, int depth) {}\n            }, (Node) null);\n        });\n    }\n}\n"}]