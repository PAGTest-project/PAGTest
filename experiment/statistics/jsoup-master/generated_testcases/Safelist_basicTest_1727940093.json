[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_basicTest {\n\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = Safelist.basic();\n    }\n\n    @Test\n    public void testBasicSafelistConfiguration() {\n        // Given\n        String[] expectedTags = {\n            \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n            \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\", \"sub\",\n            \"sup\", \"u\", \"ul\"\n        };\n        String[] expectedAttributesForA = {\"href\"};\n        String[] expectedAttributesForBlockquote = {\"cite\"};\n        String[] expectedAttributesForQ = {\"cite\"};\n        String[] expectedProtocolsForA = {\"ftp\", \"http\", \"https\", \"mailto\"};\n        String[] expectedProtocolsForBlockquote = {\"http\", \"https\"};\n        String[] expectedProtocolsForCite = {\"http\", \"https\"};\n\n        // When\n        Safelist basicSafelist = Safelist.basic();\n\n        // Then\n        for (String tag : expectedTags) {\n            assertTrue(basicSafelist.isSafeTag(tag));\n        }\n\n        Attributes enforcedAttributesForA = basicSafelist.getEnforcedAttributes(\"a\");\n        assertEquals(1, enforcedAttributesForA.size());\n        assertEquals(\"nofollow\", enforcedAttributesForA.get(\"rel\"));\n\n        for (String attr : expectedAttributesForA) {\n            assertTrue(basicSafelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(attr, \"\")));\n        }\n\n        for (String attr : expectedAttributesForBlockquote) {\n            assertTrue(basicSafelist.isSafeAttribute(\"blockquote\", new Element(Tag.valueOf(\"blockquote\"), \"\"), new Attribute(attr, \"\")));\n        }\n\n        for (String attr : expectedAttributesForQ) {\n            assertTrue(basicSafelist.isSafeAttribute(\"q\", new Element(Tag.valueOf(\"q\"), \"\"), new Attribute(attr, \"\")));\n        }\n\n        for (String protocol : expectedProtocolsForA) {\n            assertTrue(basicSafelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", protocol + \"://example.com\")));\n        }\n\n        for (String protocol : expectedProtocolsForBlockquote) {\n            assertTrue(basicSafelist.isSafeAttribute(\"blockquote\", new Element(Tag.valueOf(\"blockquote\"), \"\"), new Attribute(\"cite\", protocol + \"://example.com\")));\n        }\n\n        for (String protocol : expectedProtocolsForCite) {\n            assertTrue(basicSafelist.isSafeAttribute(\"cite\", new Element(Tag.valueOf(\"cite\"), \"\"), new Attribute(\"cite\", protocol + \"://example.com\")));\n        }\n    }\n}\n"}]