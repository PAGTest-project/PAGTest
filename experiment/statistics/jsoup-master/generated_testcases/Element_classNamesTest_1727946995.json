[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_classNamesTest {\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        element = new Element(\"div\");\n    }\n\n    @Test\n    public void testClassNamesWithSingleClass() {\n        element.addClass(\"class1\");\n        Set<String> classNames = element.classNames();\n        assertEquals(1, classNames.size());\n        assertTrue(classNames.contains(\"class1\"));\n    }\n\n    @Test\n    public void testClassNamesWithMultipleClasses() {\n        element.addClass(\"class1\");\n        element.addClass(\"class2\");\n        Set<String> classNames = element.classNames();\n        assertEquals(2, classNames.size());\n        assertTrue(classNames.contains(\"class1\"));\n        assertTrue(classNames.contains(\"class2\"));\n    }\n\n    @Test\n    public void testClassNamesWithEmptyClass() {\n        element.addClass(\"\");\n        Set<String> classNames = element.classNames();\n        assertEquals(0, classNames.size());\n    }\n\n    @Test\n    public void testClassNamesWithWhitespaceClass() {\n        element.addClass(\"   \");\n        Set<String> classNames = element.classNames();\n        assertEquals(0, classNames.size());\n    }\n\n    @Test\n    public void testClassNamesWithMixedClasses() {\n        element.addClass(\"class1\");\n        element.addClass(\"   \");\n        element.addClass(\"class2\");\n        Set<String> classNames = element.classNames();\n        assertEquals(2, classNames.size());\n        assertTrue(classNames.contains(\"class1\"));\n        assertTrue(classNames.contains(\"class2\"));\n    }\n}\n"}]