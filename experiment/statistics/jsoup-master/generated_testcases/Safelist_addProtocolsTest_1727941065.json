[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_addProtocolsTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testAddProtocols_validProtocols() {\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n\n        Attributes attributes = new Attributes();\n        Attribute validAttribute = new Attribute(\"href\", \"http://example.com\");\n        attributes.put(validAttribute);\n        Element validElement = new Element(Tag.valueOf(\"a\"), \"\", attributes);\n\n        assertTrue(safelist.isSafeAttribute(\"a\", validElement, validAttribute));\n    }\n\n    @Test\n    public void testAddProtocols_invalidProtocols() {\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n\n        Attributes attributes = new Attributes();\n        Attribute invalidAttribute = new Attribute(\"href\", \"ftp://example.com\");\n        attributes.put(invalidAttribute);\n        Element invalidElement = new Element(Tag.valueOf(\"a\"), \"\", attributes);\n\n        assertFalse(safelist.isSafeAttribute(\"a\", invalidElement, invalidAttribute));\n    }\n\n    @Test\n    public void testAddProtocols_emptyProtocol() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"href\", \"\");\n        });\n    }\n\n    @Test\n    public void testAddProtocols_nullProtocol() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"href\", (String) null);\n        });\n    }\n\n    @Test\n    public void testAddProtocols_nullProtocolsArray() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"href\", (String[]) null);\n        });\n    }\n\n    @Test\n    public void testAddProtocols_emptyTag() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"\", \"href\", \"http\");\n        });\n    }\n\n    @Test\n    public void testAddProtocols_emptyAttribute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addProtocols(\"a\", \"\", \"http\");\n        });\n    }\n}\n"}]