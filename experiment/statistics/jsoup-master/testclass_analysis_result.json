[{"file_path": "src/test/java/org/jsoup/integration/SafelistExtensionTest.java", "testclass_name": "SafelistExtensionTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Element;", "import org.jsoup.safety.Safelist;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SafelistExtensionTest", "description": "Integration tests for customizing safe tests using Safelist extensions.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "OpenSafelist", "description": "Custom Safelist class that allows tags and attributes starting with 'open'."}]}, "fixtures": [], "test_cases": [{"name": "canCustomizeSafeTests", "primary_tested": ["Jsoup.clean(String,Safelist)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "TextUtil", "Safelist", "OpenSafelist"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the customization of safe tests by allowing tags and attributes starting with 'open'."}]}, {"file_path": "src/test/java/org/jsoup/helper/ValidateTest.java", "testclass_name": "ValidateTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ValidateTest", "description": "Unit tests for the Validate class, focusing on validation methods like notNull and notNullParam.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNotNull", "primary_tested": ["Validate.notNull(Object)"], "external_dependencies": {"modules": ["Validate", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the notNull method of the Validate class to ensure it correctly handles non-null and null inputs."}, {"name": "stacktraceFiltersOutValidateClass", "primary_tested": ["Validate.notNull(Object)"], "associated_methods": ["ValidationException.getMessage()", "ValidationException.getStackTrace()"], "external_dependencies": {"modules": ["Validate", "ValidationException", "StackTraceElement"]}, "category": "unit", "description": "Tests that the stack trace of a ValidationException does not include the Validate class."}, {"name": "nonnullParam", "primary_tested": ["Validate.notNullParam(Object,String)"], "associated_methods": ["ValidationException.getMessage()"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests the notNullParam method of the Validate class to ensure it correctly handles null inputs and provides the correct error message."}]}, {"file_path": "src/test/java/org/jsoup/select/SelectorIT.java", "testclass_name": "SelectorIT", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SelectorIT", "description": "Integration test for multi-threaded selection using Jsoup.", "class_members": {"variables": [{"name": "html", "type": "final String"}, {"name": "eval", "type": "final Evaluator"}, {"name": "numThreads", "type": "int"}, {"name": "numThreadLoops", "type": "int"}, {"name": "catcher", "type": "SelectorIT.ThreadCatcher"}, {"name": "threads", "type": "Thread[]"}], "nested_classes": [{"name": "ThreadCatcher", "description": "Internal helper class to catch uncaught exceptions in threads"}]}, "test_cases": [{"name": "multiThreadHas", "primary_tested": ["Document.select(Evaluator)"], "associated_methods": ["Document.id()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Evaluator", "QueryParser", "Elements", "AtomicInteger", "Thread"], "class_members": [{"name": "html", "type": "variable"}, {"name": "eval", "type": "variable"}, {"name": "numThreads", "type": "variable"}, {"name": "numThreadLoops", "type": "variable"}, {"name": "catcher", "type": "variable"}, {"name": "threads", "type": "variable"}]}, "category": "integration", "description": "Tests the multi-threaded selection functionality of the Document class using Jsoup."}]}, {"file_path": "src/test/java/org/jsoup/integration/FuzzFixesTest.java", "testclass_name": "FuzzFixesTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.File;", "import java.io.IOException;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "FuzzFixesTest", "description": "Integration tests for Jsoup library, focusing on parsing HTML and XML documents.", "class_members": {"methods": [{"name": "testFiles", "signature": "private static Stream<File> testFiles()"}]}, "fixtures": [], "test_cases": [{"name": "blankAbsAttr", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of HTML with blank absolute attributes."}, {"name": "bookmark", "primary_tested": ["Jsoup.parse(String)", "Parser.xmlParser().parseInput(String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of HTML and XML documents with bookmark-like input."}, {"name": "testHtmlParse", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of HTML documents from files."}, {"name": "testXmlParse", "primary_tested": ["Jsoup.parse(File,String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Parser"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of XML documents from files."}]}, {"file_path": "src/test/java/org/jsoup/integration/FuzzFixesIT.java", "testclass_name": "FuzzFixesIT", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.File;", "import java.io.IOException;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "FuzzFixesIT", "description": "Integration tests for fuzz fixes in Jsoup HTML and XML parsing.", "class_members": {"variables": [{"name": "numIters", "type": "static int"}, {"name": "timeout", "type": "static int"}, {"name": "testDir", "type": "static File"}], "methods": [{"name": "testFiles", "signature": "private static Stream<File> testFiles()"}]}, "fixtures": [], "test_cases": [{"name": "testHtmlParse", "primary_tested": ["Jsoup.parse(File,String,String)"], "associated_methods": ["Document.location()"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Assertions"], "class_members": [{"name": "numIters", "type": "variable"}, {"name": "timeout", "type": "variable"}, {"name": "testDir", "type": "variable"}, {"name": "testFiles", "type": "method"}]}, "category": "integration", "fixtures_used": [], "description": "Tests the HTML parsing functionality of Jsoup with multiple iterations and a timeout."}, {"name": "testXmlParse", "primary_tested": ["Jsoup.parse(File,String,String,Parser)"], "associated_methods": ["Document.location()"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Parser", "Assertions"], "class_members": [{"name": "numIters", "type": "variable"}, {"name": "timeout", "type": "variable"}, {"name": "testDir", "type": "variable"}, {"name": "testFiles", "type": "method"}]}, "category": "integration", "fixtures_used": [], "description": "Tests the XML parsing functionality of Jsoup with multiple iterations and a timeout."}]}, {"file_path": "src/test/java/org/jsoup/integration/SessionIT.java", "testclass_name": "SessionIT", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.integration.servlets.SlowRider;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.io.UncheckedIOException;", "import java.util.Set;", "import java.util.concurrent.ConcurrentHashMap;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SessionIT", "description": "Integration tests for session management in Jsoup, focusing on multi-threaded scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ThreadCatcher", "description": "Internal helper class to catch and handle uncaught exceptions in threads."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "multiThread", "primary_tested": ["Connection.newRequest().url(String).get()"], "associated_methods": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "FileServlet", "ThreadCatcher"], "class_members": [{"name": "ThreadCatcher", "type": "nested_class"}], "project_specific_resources": ["FileServlet.urlTo(String)"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests multi-threaded execution of Jsoup session requests, ensuring each thread fetches and validates the document title."}, {"name": "multiThreadWithoutNewRequestBlowsUp", "primary_tested": ["Connection.url(String).get()"], "associated_methods": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "SlowRider", "ThreadCatcher"], "class_members": [{"name": "ThreadCatcher", "type": "nested_class"}], "project_specific_resources": ["SlowRider.Url", "SlowRider.MaxTimeParam"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests that multi-threaded execution without using .newRequest() results in a clear exception, ensuring thread safety."}, {"name": "multiThreadWithProgressListener", "primary_tested": ["Connection.newRequest().url(String).get()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "FileServlet", "ThreadCatcher"], "class_members": [{"name": "ThreadCatcher", "type": "nested_class"}], "project_specific_resources": ["FileServlet.urlTo(String)"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests multi-threaded execution with a progress listener, ensuring the listener handles multiple URLs and threads correctly."}]}, {"file_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java", "testclass_name": "AttributeParseTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Attributes;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "AttributeParseTest", "description": "Unit tests for parsing attributes in HTML elements using Jsoup.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "parsesRoughAttributeString", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes"]}, "category": "unit", "description": "Tests the parsing of a rough attribute string in an HTML element."}, {"name": "handlesNewLinesAndReturns", "primary_tested": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element"]}, "category": "unit", "description": "Tests the handling of new lines and returns in attribute values."}, {"name": "parsesEmptyString", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes"]}, "category": "unit", "description": "Tests the parsing of an empty attribute string in an HTML element."}, {"name": "canStartWithEq", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes"]}, "category": "unit", "description": "Tests the parsing of an attribute that starts with an equal sign."}, {"name": "strictAttributeUnescapes", "primary_tested": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"]}, "category": "unit", "description": "Tests the unescaping of attributes in strict mode."}, {"name": "moreAttributeUnescapes", "primary_tested": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"]}, "category": "unit", "description": "Tests the unescaping of more complex attribute values."}, {"name": "parsesBooleanAttributes", "primary_tested": ["Element.attr(String)", "Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes", "Attribute"]}, "category": "unit", "description": "Tests the parsing of boolean attributes in an HTML element."}, {"name": "dropsSlashFromAttributeName", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Parser"]}, "category": "unit", "description": "Tests the dropping of a slash from the attribute name in an HTML element."}]}, {"file_path": "src/test/java/org/jsoup/select/QueryParserTest.java", "testclass_name": "QueryParserTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import static org.jsoup.select.EvaluatorDebug.sexpr;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "QueryParserTest", "description": "Unit tests for the QueryParser class, focusing on parsing and evaluating CSS selectors.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConsumeSubQuery", "primary_tested": ["Document.select(String)"], "associated_methods": ["Document.text()"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the ability to select elements using CSS selectors and verify their text content."}, {"name": "testImmediateParentRun", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing of a CSS selector into an S-expression representing immediate parent relationships."}, {"name": "testOrGetsCorrectPrecedence", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the correct precedence of OR operations in CSS selector parsing."}, {"name": "testParsesMultiCorrectly", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing of a complex multi-part CSS selector into an S-expression."}, {"name": "exceptionOnUncloseAttribute", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing an unclosed attribute in a CSS selector."}, {"name": "testParsesSingleQuoteInContains", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing a CSS selector with an unclosed single quote in a contains pseudo-class."}, {"name": "exceptOnEmptySelector", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing an empty CSS selector."}, {"name": "exceptOnNullSelector", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing a null CSS selector."}, {"name": "okOnSpacesForeAndAft", "primary_tested": ["QueryParser.parse(String)"], "associated_methods": ["Evaluator.toString()"], "external_dependencies": {"modules": ["QueryParser", "Evaluator"], "class_members": []}, "category": "unit", "description": "Tests that the parser correctly handles CSS selectors with leading and trailing spaces."}, {"name": "structuralEvaluatorsToString", "primary_tested": ["QueryParser.parse(String)"], "associated_methods": ["Evaluator.toString()", "EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["QueryParser", "Evaluator", "EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing and string representation of structural evaluators in CSS selectors."}, {"name": "parsesOrAfterAttribute", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing of OR operations following an attribute selector in CSS selectors."}]}, {"file_path": "src/test/java/org/jsoup/parser/ParserIT.java", "testclass_name": "ParserIT", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ParserIT", "description": "Integration tests for the Parser class in the jsoup library.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIssue1251", "primary_tested": ["Parser.htmlParser().setTrackErrors(int).parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "StringBuilder"]}, "category": "integration", "description": "Tests the handling of a specific issue (Issue #1251) related to parsing large HTML strings with errors."}, {"name": "handlesDeepStack", "primary_tested": ["Parser.parseBodyFragment(String,String)"], "associated_methods": ["Document.body().childNodeSize()", "Document.select(String).size()"], "external_dependencies": {"modules": ["Parser", "Document", "StringBuilder"]}, "category": "integration", "description": "Tests the handling of deep stack scenarios by parsing a very large HTML body fragment and verifying the resulting document structure."}]}, {"file_path": "src/test/java/org/jsoup/nodes/LeafNodeTest.java", "testclass_name": "LeafNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.select.Elements;", "import org.jsoup.select.NodeFilter;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "LeafNodeTest", "description": "Tests to ensure that attributes are not set on all nodes right away.", "class_members": {"methods": [{"name": "hasAnyAttributes", "signature": "boolean hasAnyAttributes(Node node)"}]}, "fixtures": [], "test_cases": [{"name": "doesNotGetAttributesTooEasily", "primary_tested": ["Document.parse(String)", "Element.hasAttributes()", "Element.outerHtml()", "Elements.select(String)", "Element.id()", "Element.hasClass(String)", "Element.addClass(String)", "Element.clearAttributes()", "Attributes.hasKey(String)"], "associated_methods": ["Elements.first()", "Elements.size()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements", "Node", "Attributes"], "class_members": [{"name": "hasAnyAttributes", "type": "method"}]}, "category": "unit", "description": "Tests that attributes are not set on all nodes right away by parsing HTML, checking attributes, and manipulating classes."}]}, {"file_path": "src/test/java/org/jsoup/nodes/ElementIT.java", "testclass_name": "ElementIT", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ElementIT", "description": "Integration tests for the Element class in the Jsoup library, focusing on performance and overflow scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFastReparent", "primary_tested": ["Element.insertChildren(int,List<Node>)"], "associated_methods": ["Element.childNodes.size()", "Element.body().childNodes().size()", "Element.body().empty()", "Element.body().appendChild(Element)", "Element.body().children().get(int)", "Element.children().get(int).text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the performance of reparenting a large number of child nodes into a new wrapper element."}, {"name": "testFastReparentExistingContent", "primary_tested": ["Element.insertChildren(int,List<Node>)"], "associated_methods": ["Element.childNodes.size()", "Element.body().childNodes().size()", "Element.body().empty()", "Element.body().appendChild(Element)", "Element.body().children().get(int)", "Element.children().get(int).text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the performance of reparenting a large number of child nodes into a new wrapper element that already contains some content."}, {"name": "hasTextNoOverflow", "primary_tested": ["Document.hasText()"], "associated_methods": ["Element.appendElement(String)", "Element.text(String)", "Document.text()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the hasText method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "dataNoOverflow", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendElement(String)", "Element.text(String)", "Document.data()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the data method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "parentsNoOverflow", "primary_tested": ["Element.parents()"], "associated_methods": ["Element.appendElement(String)", "Element.ownerDocument()"], "external_dependencies": {"modules": ["Document", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the parents method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "wrapNoOverflow", "primary_tested": ["Element.wrap(String)"], "associated_methods": ["Element.appendElement(String)", "Element.parents().size()", "Element.body().html()"], "external_dependencies": {"modules": ["Document", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "overflow", "fixtures_used": [], "description": "Tests the wrap method to ensure it does not overflow when handling a large number of nested elements."}]}, {"file_path": "src/test/java/org/jsoup/parser/ParserTest.java", "testclass_name": "ParserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.IOException;", "import java.nio.charset.StandardCharsets;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ParserTest", "description": "Unit tests for the Parser class, focusing on entity unescaping and UTF-8 parsing.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "unescapeEntities", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the unescaping of HTML entities in a string."}, {"name": "unescapeEntitiesHandlesLargeInput", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the unescaping of HTML entities in a large input string."}, {"name": "testUtf8", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "associated_methods": ["Document.selectFirst(String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the parsing of UTF-8 encoded input stream to ensure correct character representation."}]}, {"file_path": "src/test/java/org/jsoup/parser/HtmlTreeBuilderTest.java", "testclass_name": "HtmlTreeBuilderTest", "dependencies": ["package org.jsoup.parser;", "import org.jspecify.annotations.NullMarked;", "import org.junit.jupiter.api.Test;", "import java.io.Reader;", "import java.lang.annotation.Annotation;", "import java.lang.reflect.Method;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "HtmlTreeBuilderTest", "description": "Unit tests for the HtmlTreeBuilder class, focusing on ensuring sorted arrays and non-null assertions.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "ensureSearchArraysAreSorted", "primary_tested": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "HtmlTreeBuilderStateTest.ensureSorted(List)"], "external_dependencies": {"modules": ["HtmlTreeBuilder", "HtmlTreeBuilderStateTest"], "project_specific_resources": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "HtmlTreeBuilderStateTest.ensureSorted(List)"]}, "category": "unit", "description": "Ensures that the search arrays in HtmlTreeBuilder are sorted."}, {"name": "nonnull", "primary_tested": ["HtmlTreeBuilder.parse(Reader,String,ParseErrorList)"], "external_dependencies": {"modules": ["HtmlTreeBuilder"]}, "category": "unit", "description": "Tests that passing null values to HtmlTreeBuilder.parse throws an IllegalArgumentException."}, {"name": "nonnullAssertions", "primary_tested": ["TreeBuilder.class.getPackage().getDeclaredAnnotations()"], "associated_methods": ["NullMarked.class.isAssignableFrom(Class)"], "external_dependencies": {"modules": ["TreeBuilder", "NullMarked"]}, "category": "unit", "description": "Tests that the TreeBuilder class has the NullMarked annotation."}]}, {"file_path": "src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java", "testclass_name": "HtmlTreeBuilderStateTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.parser.HtmlTreeBuilderState.Constants;", "import org.junit.jupiter.api.Test;", "import java.lang.reflect.Field;", "import java.lang.reflect.Modifier;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import static org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "HtmlTreeBuilderStateTest", "description": "Test suite for ensuring the correctness and consistency of HTML tree builder state constants and nested anchor elements.", "class_members": {"methods": [{"name": "findConstantArrays", "signature": "static List<Object[]> findConstantArrays(Class aClass)"}, {"name": "ensureSorted", "signature": "static void ensureSorted(List<Object[]> constants)"}]}, "fixtures": [], "test_cases": [{"name": "ensureArraysAreSorted", "primary_tested": ["Arrays.sort(Object[])"], "associated_methods": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "HtmlTreeBuilderStateTest.ensureSorted(List<Object[]>)"], "external_dependencies": {"modules": ["Arrays", "HtmlTreeBuilderState.Constants"], "class_members": [{"name": "findConstantArrays", "type": "method"}, {"name": "ensureSorted", "type": "method"}]}, "category": "unit", "description": "Ensures that the arrays of constants are sorted."}, {"name": "ensureTagSearchesAreKnownTags", "primary_tested": ["Tag.isKnownTag(String)"], "associated_methods": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "StringUtil.inSorted(String, String[])"], "external_dependencies": {"modules": ["HtmlTreeBuilderState.Constants", "Tag", "StringUtil"], "class_members": [{"name": "findConstantArrays", "type": "method"}]}, "category": "unit", "description": "Ensures that all tag names in the constants are known tags."}, {"name": "nestedAnchorElements01", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup"]}, "category": "unit", "description": "Tests the parsing of nested anchor elements in HTML."}, {"name": "nestedAnchorElements02", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup"]}, "category": "unit", "description": "Tests the parsing of nested anchor elements in HTML with additional div elements."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java", "testclass_name": "DocumentTypeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "DocumentTypeTest", "description": "Unit tests for the DocumentType class, focusing on constructor validation and outer HTML generation.", "class_members": {"methods": [{"name": "htmlOutput", "signature": "private String htmlOutput(String in)"}, {"name": "xmlOutput", "signature": "private String xmlOutput(String in)"}]}, "fixtures": [], "test_cases": [{"name": "constructorValidationOkWithBlankName", "primary_tested": ["DocumentType.DocumentType(String,String,String)"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests the DocumentType constructor with blank name, public ID, and system ID."}, {"name": "constructorValidationThrowsExceptionOnNulls", "primary_tested": ["DocumentType.DocumentType(String,String,String)"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests that the DocumentType constructor throws an IllegalArgumentException when given null public and system IDs."}, {"name": "constructorValidationOkWithBlankPublicAndSystemIds", "primary_tested": ["DocumentType.DocumentType(String,String,String)"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests the DocumentType constructor with a valid name and blank public and system IDs."}, {"name": "outerHtmlGeneration", "primary_tested": ["DocumentType.outerHtml()"], "associated_methods": ["DocumentType.name()", "DocumentType.publicId()", "DocumentType.systemId()"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests the generation of outer HTML for different DocumentType configurations."}, {"name": "testRoundTrip", "primary_tested": ["DocumentType.outerHtml()"], "associated_methods": ["Jsoup.parse(String)", "Jsoup.parse(String,String,Parser)", "DocumentType.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Parser", "DocumentType"], "class_members": [{"name": "htmlOutput", "type": "method"}, {"name": "xmlOutput", "type": "method"}]}, "category": "unit", "description": "Tests the round-trip parsing and generation of HTML for different DocumentType configurations."}]}, {"file_path": "src/test/java/org/jsoup/safety/SafelistTest.java", "testclass_name": "SafelistTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.helper.ValidationException;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Attributes;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SafelistTest", "description": "Unit tests for the Safelist class, focusing on the copy constructor and validation of tags, attributes, and protocols.", "class_members": {"variables": [{"name": "TEST_TAG", "type": "static final String"}, {"name": "TEST_ATTRIBUTE", "type": "static final String"}, {"name": "TEST_SCHEME", "type": "static final String"}, {"name": "TEST_VALUE", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testCopyConstructor_noSideEffectOnTags", "primary_tested": ["Safelist.addTags(String)"], "external_dependencies": {"modules": ["Safelist"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on tags."}, {"name": "testCopyConstructor_noSideEffectOnAttributes", "primary_tested": ["Safelist.addAttributes(String,String)"], "external_dependencies": {"modules": ["Safelist", "Attribute"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on attributes."}, {"name": "testCopyConstructor_noSideEffectOnEnforcedAttributes", "primary_tested": ["Safelist.addEnforcedAttribute(String,String,String)"], "associated_methods": ["Safelist.getEnforcedAttributes(String)"], "external_dependencies": {"modules": ["Safelist", "Attribute"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on enforced attributes."}, {"name": "testCopyConstructor_noSideEffectOnProtocols", "primary_tested": ["Safelist.addProtocols(String,String,String)"], "associated_methods": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Attribute", "Attributes", "Element", "Tag"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on protocols."}, {"name": "noscriptIsBlocked", "primary_tested": ["Safelist.addTags(String)"], "external_dependencies": {"modules": ["Safelist", "ValidationException"]}, "category": "unit", "description": "Tests that the 'NOSCRIPT' tag is blocked and throws a ValidationException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/AttributeTest.java", "testclass_name": "AttributeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "AttributeTest", "description": "Unit tests for the Attribute class in the Jsoup library, focusing on attribute handling and validation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "html", "primary_tested": ["Attribute.html()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the html method of the Attribute class to ensure it correctly formats the attribute string."}, {"name": "testWithSupplementaryCharacterInAttributeKeyAndValue", "primary_tested": ["Attribute.html()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the html method with supplementary characters in the attribute key and value."}, {"name": "validatesKeysNotEmpty", "primary_tested": ["Attribute.<init>(String,String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the Attribute constructor throws an IllegalArgumentException when the key is empty."}, {"name": "validatesKeysNotEmptyViaSet", "primary_tested": ["Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the setKey method throws an IllegalArgumentException when the key is empty."}, {"name": "booleanAttributesAreEmptyStringValues", "primary_tested": ["Attributes.get(String)", "Attribute.getKey()", "Attribute.getValue()", "Attribute.hasDeclaredValue()", "Attribute.isBooleanAttribute(String)"], "associated_methods": ["Document.body()", "Element.child(int)", "Element.attributes()", "Attributes.iterator()", "Attributes.iterator().next()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests that boolean attributes have empty string values and are correctly identified as boolean attributes."}, {"name": "settersOnOrphanAttribute", "primary_tested": ["Attribute.setKey(String)", "Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the setKey and setValue methods of the Attribute class."}, {"name": "hasValue", "primary_tested": ["Attribute.hasDeclaredValue()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the hasDeclaredValue method of the Attribute class to check if an attribute has a declared value."}, {"name": "canSetValueToNull", "primary_tested": ["Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the setValue method can set the value to null and that the html method handles it correctly."}, {"name": "booleanAttributesAreNotCaseSensitive", "primary_tested": ["Attribute.isBooleanAttribute(String)"], "associated_methods": ["Document.selectFirst(String)", "Element.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the isBooleanAttribute method is case-insensitive and that boolean attributes are correctly parsed in HTML."}]}, {"file_path": "src/test/java/org/jsoup/internal/SoftPoolTest.java", "testclass_name": "SoftPoolTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import java.util.Stack;", "import java.util.concurrent.CountDownLatch;", "import java.util.concurrent.ExecutorService;", "import java.util.concurrent.Executors;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SoftPoolTest", "description": "Unit tests for the SoftPool class, focusing on its behavior with thread-local pools and object borrowing/releasing.", "class_members": {"variables": [{"name": "BufSize", "type": "static final int"}, {"name": "NumThreads", "type": "static final int"}, {"name": "NumObjects", "type": "static final int"}]}, "test_cases": [{"name": "testSoftLocalPool", "primary_tested": ["SoftPool.borrow()", "SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool", "ExecutorService", "Executors", "CountDownLatch", "HashSet", "AtomicInteger"], "class_members": [{"name": "BufSize", "type": "variable"}, {"name": "NumThreads", "type": "variable"}, {"name": "NumObjects", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of the SoftPool with thread-local pools, ensuring buffers are borrowed, released, and reused correctly within threads."}, {"name": "testSoftReferenceBehavior", "primary_tested": ["SoftPool.borrow()", "SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool"], "class_members": [{"name": "BufSize", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of SoftPool when objects are borrowed, released, and then garbage collected, ensuring new objects are created after GC."}, {"name": "testBorrowFromEmptyPool", "primary_tested": ["SoftPool.borrow()"], "external_dependencies": {"modules": ["SoftPool"], "class_members": [{"name": "BufSize", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of SoftPool when borrowing from an empty pool, ensuring a new object is created."}, {"name": "testReleaseMoreThanMaxIdle", "primary_tested": ["SoftPool.borrow()", "SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool", "ArrayList"], "class_members": [{"name": "BufSize", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of SoftPool when releasing more objects than the MaxIdle limit, ensuring the pool size does not exceed the limit."}]}, {"file_path": "src/test/java/org/jsoup/integration/ConnectIT.java", "testclass_name": "ConnectIT", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.integration.servlets.SlowRider;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.StreamParser;", "import org.junit.jupiter.api.Test;", "import java.io.BufferedInputStream;", "import java.io.IOException;", "import java.io.UncheckedIOException;", "import java.net.SocketTimeoutException;", "import java.nio.ByteBuffer;", "import java.nio.charset.StandardCharsets;", "import java.util.concurrent.atomic.AtomicBoolean;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ConnectIT", "description": "Integration tests for Jsoup connection functionalities, focusing on handling timeouts, interruptions, and large file reads.", "class_members": {"variables": [{"name": "LargeHtmlSize", "type": "static final int"}], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "canInterruptBodyStringRead", "primary_tested": ["Jsoup.connect(String).timeout(int).execute()"], "associated_methods": ["Connection.Response.body()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the ability to interrupt a body string read operation."}, {"name": "canInterruptDocumentRead", "primary_tested": ["Jsoup.connect(String).timeout(int).execute()"], "associated_methods": ["Connection.Response.parse().text()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the ability to interrupt a document read operation."}, {"name": "canInterruptThenJoinASpawnedThread", "primary_tested": ["Jsoup.connect(String).timeout(int).get()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the ability to interrupt and join a spawned thread during a Jsoup connection."}, {"name": "totalTimeout", "primary_tested": ["Jsoup.connect(String).timeout(int).get()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the total timeout functionality of a Jsoup connection."}, {"name": "slowReadOk", "primary_tested": ["Jsoup.connect(String).data(String,String).get()"], "associated_methods": ["Document.selectFirst(String).text()"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "Document", "Element"], "class_members": []}, "category": "integration", "description": "Tests a slow read operation that completes within the request timeout."}, {"name": "infiniteReadSupported", "primary_tested": ["Jsoup.connect(String).timeout(int).data(String,String).get()"], "associated_methods": ["Document.selectFirst(String).text()"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "Document", "Element"], "class_members": []}, "category": "integration", "description": "Tests the support for infinite read operations in Jsoup connections."}, {"name": "streamParserUncheckedExceptionOnTimeoutInStream", "primary_tested": ["Jsoup.connect(String).data(String,String).timeout(int).execute().streamParser()"], "associated_methods": ["StreamParser.stream().count()"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "StreamParser", "UncheckedIOException", "IOException"], "class_members": []}, "category": "integration", "description": "Tests the unchecked exception handling when a timeout occurs during stream parsing."}, {"name": "streamParserCheckedExceptionOnTimeoutInSelect", "primary_tested": ["Jsoup.connect(String).data(String,String).timeout(int).execute().streamParser()"], "associated_methods": ["StreamParser.selectNext(String)"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "StreamParser", "IOException"], "class_members": []}, "category": "integration", "description": "Tests the checked exception handling when a timeout occurs during stream selection."}, {"name": "remainingAfterFirstRead", "primary_tested": ["Jsoup.connect(String).maxBodySize(int).execute().bodyStream()"], "associated_methods": ["DataUtil.readToByteBuffer(InputStream,int)", "BufferedInputStream.mark(int)", "BufferedInputStream.reset()"], "external_dependencies": {"modules": ["Jsoup", "FileServlet", "DataUtil", "BufferedInputStream", "ByteBuffer", "StandardCharsets"], "class_members": [{"name": "LargeHtmlSize", "type": "variable"}]}, "category": "integration", "description": "Tests reading the remaining data after an initial limited read."}, {"name": "noLimitAfterFirstRead", "primary_tested": ["Jsoup.connect(String).execute().bodyStream()"], "associated_methods": ["DataUtil.readToByteBuffer(InputStream,int)", "BufferedInputStream.mark(int)", "BufferedInputStream.reset()"], "external_dependencies": {"modules": ["Jsoup", "FileServlet", "DataUtil", "BufferedInputStream", "ByteBuffer", "StandardCharsets"], "class_members": [{"name": "LargeHtmlSize", "type": "variable"}]}, "category": "integration", "description": "Tests reading the full data after an initial limited read without a cap."}, {"name": "bodyStreamConstrainedViaBufferUp", "primary_tested": ["Jsoup.connect(String).maxBodySize(int).execute().bufferUp().bodyStream()"], "associated_methods": ["DataUtil.readToByteBuffer(InputStream,int)"], "external_dependencies": {"modules": ["Jsoup", "FileServlet", "DataUtil", "BufferedInputStream", "ByteBuffer"], "class_members": []}, "category": "integration", "description": "Tests constraining the body stream via buffer up operation."}]}, {"file_path": "src/test/java/org/jsoup/integration/SessionTest.java", "testclass_name": "SessionTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.CookieServlet;", "import org.jsoup.integration.servlets.EchoServlet;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SessionTest", "description": "Integration tests for session management and cookie handling in Jsoup.", "class_members": {"methods": [{"name": "keyEls", "signature": "private static Elements keyEls(String key, Document doc)"}, {"name": "keyText", "signature": "private static String keyText(String key, Document doc)"}, {"name": "assertCookieServlet", "signature": "private void assertCookieServlet(Document doc)"}, {"name": "assertEchoServlet", "signature": "private void assertEchoServlet(Document doc)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPathScopedCookies", "primary_tested": ["Jsoup.newSession()", "Connection.newRequest()", "Connection.get()", "Connection.response().cookies()"], "associated_methods": ["Document.select(String)", "Document.location()", "Elements.first().text()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "Elements", "CookieServlet", "EchoServlet"], "class_members": [{"name": "keyEls", "type": "method"}, {"name": "keyText", "type": "method"}, {"name": "assertCookieServlet", "type": "method"}, {"name": "assertEchoServlet", "type": "method"}]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests the handling of path-scoped cookies in a session, including setting, retrieving, and verifying cookies across different paths and servlets."}, {"name": "testPathScopedCookiesOnRedirect", "primary_tested": ["Jsoup.newSession()", "Connection.newRequest()", "Connection.get()", "Connection.data()"], "associated_methods": ["Document.location()", "Document.select(String)"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "Elements", "CookieServlet", "EchoServlet"], "class_members": [{"name": "assertEchoServlet", "type": "method"}, {"name": "assertCookieServlet", "type": "method"}]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests the handling of path-scoped cookies during redirects, ensuring cookies are correctly managed and verified across different servlets."}, {"name": "testCanChangeParsers", "primary_tested": ["Jsoup.newSession()", "Connection.newRequest()", "Connection.get()", "Connection.parser()"], "associated_methods": ["Document.html()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "Parser", "FileServlet"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests the ability to change parsers within a session, ensuring that different parsers (HTML and XML) are correctly applied and produce the expected results."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DataNodeTest.java", "testclass_name": "DataNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "DataNodeTest", "description": "Unit tests for the DataNode class, focusing on XML output with and without CDATA sections.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "xmlOutputScriptWithCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of a DataNode with CDATA section within a script element."}, {"name": "xmlOutputScriptWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of a DataNode without CDATA section within a script element."}, {"name": "xmlOutputStyleWithCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of a DataNode with CDATA section within a style element."}, {"name": "xmlOutputStyleWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of a DataNode without CDATA section within a style element."}, {"name": "xmlOutputOtherWithCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of a DataNode with CDATA section within an 'other' element."}, {"name": "xmlOutputOtherWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of a DataNode without CDATA section within an 'other' element."}, {"name": "xmlOutputOrphanWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XML output of an orphan DataNode without CDATA section."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeStreamTest.java", "testclass_name": "NodeStreamTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.Optional;", "import java.util.stream.Stream;", "import static org.jsoup.nodes.NodeIteratorTest.trackSeen;", "import static org.jsoup.nodes.NodeIteratorTest.assertContents;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeStreamTest", "description": "Unit tests for the NodeStream functionality in Jsoup.", "class_members": {"variables": [{"name": "html", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "canStream", "primary_tested": ["Document.nodeStream()"], "associated_methods": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Stream", "StringBuilder"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"]}, "category": "unit", "description": "Tests the ability to stream nodes from a parsed HTML document and track the nodes seen."}, {"name": "canStreamParallel", "primary_tested": ["Document.nodeStream()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Stream"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "description": "Tests the ability to stream nodes from a parsed HTML document in parallel and count the nodes."}, {"name": "canFindFirst", "primary_tested": ["Document.nodeStream()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Optional", "Stream"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "description": "Tests the ability to find the first node in a stream of nodes from a parsed HTML document."}, {"name": "canFilter", "primary_tested": ["Document.nodeStream()"], "associated_methods": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Stream", "StringBuilder", "TextNode"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"]}, "category": "unit", "description": "Tests the ability to filter nodes in a stream from a parsed HTML document to only include TextNodes and track the nodes seen."}, {"name": "canRemove", "primary_tested": ["Document.nodeStream()"], "associated_methods": ["Node.remove()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Stream", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.assertContents(Document,String)"]}, "category": "unit", "description": "Tests the ability to filter and remove specific nodes from a stream of nodes in a parsed HTML document."}, {"name": "elementStream", "primary_tested": ["Document.stream()"], "associated_methods": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Stream", "StringBuilder"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"]}, "category": "unit", "description": "Tests the ability to stream elements from a parsed HTML document and track the elements seen."}]}, {"file_path": "src/test/java/org/jsoup/integration/ParseTest.java", "testclass_name": "ParseTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.ParseErrorList;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.net.URISyntaxException;", "import java.net.URL;", "import java.nio.ByteBuffer;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.zip.GZIPInputStream;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ParseTest", "description": "Integration tests for parsing HTML documents using Jsoup.", "class_members": {"variables": [], "methods": [{"name": "getFile", "signature": "public static File getFile(String resourceName)"}, {"name": "getPath", "signature": "public static Path getPath(String resourceName)"}, {"name": "inputStreamFrom", "signature": "public static InputStream inputStreamFrom(String s)"}, {"name": "getFileAsString", "signature": "public static String getFileAsString(File file)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHtml5Charset", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "class_members": []}, "category": "integration", "description": "Tests the detection and application of HTML5 charset meta tags."}, {"name": "testBrokenHtml5CharsetWithASingleDoubleQuote", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "InputStream"], "class_members": []}, "category": "integration", "description": "Tests the handling of broken HTML5 charset meta tags with a single double quote."}, {"name": "testLowercaseUtf8Charset", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Element"], "class_members": []}, "category": "integration", "description": "Tests the detection and application of lowercase UTF-8 charset meta tags."}, {"name": "testXwiki", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of a specific XWiki document, ensuring correct handling of buffer marks."}, {"name": "testXwikiExpanded", "primary_tested": ["Jsoup.parse(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Parser", "ParseErrorList", "InputStream"], "class_members": []}, "category": "integration", "description": "Tests the parsing of a specific XWiki document with expanded content, ensuring correct handling of buffer marks and error tracking."}, {"name": "testWikiExpandedFromString", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of a specific XWiki document from a string, ensuring correct handling of buffer marks."}, {"name": "testWikiFromString", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of a specific XWiki document from a string, ensuring correct handling of buffer marks."}, {"name": "testFileParseNoCharsetMethod", "primary_tested": ["Jsoup.parse(File)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "class_members": []}, "category": "integration", "description": "Tests the parsing of a file without specifying a charset, ensuring default charset handling."}]}, {"file_path": "src/test/java/org/jsoup/nodes/CommentTest.java", "testclass_name": "CommentTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CommentTest", "description": "Unit tests for the Comment class in the Jsoup library, focusing on various functionalities like node name, data retrieval, string representation, XML declaration handling, and cloning.", "class_members": {"variables": [{"name": "comment", "type": "Comment"}, {"name": "decl", "type": "Comment"}]}, "test_cases": [{"name": "nodeName", "primary_tested": ["Comment.nodeName()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the node name functionality of the Comment class, ensuring it returns '#comment'."}, {"name": "getData", "primary_tested": ["Comment.getData()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the data retrieval functionality of the Comment class, ensuring it returns the correct comment data."}, {"name": "testToString", "primary_tested": ["Comment.toString()"], "associated_methods": ["Document.body().html()", "Document.text()"], "external_dependencies": {"modules": ["Comment", "Document", "Jsoup"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the string representation functionality of the Comment class, ensuring it returns the correct HTML comment format and interacts with Document parsing."}, {"name": "testHtmlNoPretty", "primary_tested": ["Document.html()"], "associated_methods": ["Document.outputSettings().prettyPrint(boolean)", "Node.childNode(int)", "Comment.outerHtml()"], "external_dependencies": {"modules": ["Document", "Jsoup", "Node", "Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the HTML output functionality of the Document class with pretty print disabled, ensuring it returns the correct HTML structure."}, {"name": "stableIndentInBlock", "primary_tested": ["Document.body().html()"], "associated_methods": ["Document.body().html()"], "external_dependencies": {"modules": ["Document", "Jsoup"]}, "category": "unit", "description": "Tests the stable indentation functionality in block elements, ensuring consistent HTML output after parsing."}, {"name": "testClone", "primary_tested": ["Comment.clone()"], "associated_methods": ["Comment.getData()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the cloning functionality of the Comment class, ensuring cloned instances are distinct and data can be modified independently."}, {"name": "isXmlDeclaration", "primary_tested": ["Comment.isXmlDeclaration()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}, {"name": "decl", "type": "variable"}]}, "category": "unit", "description": "Tests the XML declaration detection functionality of the Comment class, ensuring it correctly identifies XML declarations."}, {"name": "asXmlDeclaration", "primary_tested": ["Comment.asXmlDeclaration()"], "external_dependencies": {"modules": ["Comment", "XmlDeclaration"], "class_members": [{"name": "decl", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of a Comment to an XmlDeclaration, ensuring the conversion is successful."}]}, {"file_path": "src/test/java/org/jsoup/parser/TagTest.java", "testclass_name": "TagTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TagTest", "description": "Unit tests for the Tag class in the Jsoup parser, focusing on tag semantics, case sensitivity, and namespace handling.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isCaseSensitive", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation is case-sensitive."}, {"name": "canBeInsensitive", "primary_tested": ["Tag.valueOf(String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings", "Locale"]}, "category": "unit", "description": "Tests if the Tag creation can be case-insensitive based on the locale."}, {"name": "trims", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation trims whitespace from the input."}, {"name": "equality", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the equality of Tags created with the same input."}, {"name": "divSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isBlock()", "Tag.formatAsBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the semantic properties of the 'div' tag."}, {"name": "pSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isBlock()", "Tag.formatAsBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the semantic properties of the 'p' tag."}, {"name": "imgSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isInline()", "Tag.isSelfClosing()", "Tag.isBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the semantic properties of the 'img' tag."}, {"name": "defaultSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isInline()", "Tag.formatAsBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the default semantic properties for an undefined tag."}, {"name": "valueOfChecksNotNull", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation throws an exception for a null input."}, {"name": "valueOfChecksNotEmpty", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation throws an exception for an empty input."}, {"name": "knownTags", "primary_tested": ["Tag.isKnownTag(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the recognition of known tags."}, {"name": "knownSvgNamespace", "primary_tested": ["Tag.valueOf(String)", "Tag.namespace()"], "external_dependencies": {"modules": ["Tag", "Parser"]}, "category": "unit", "description": "Tests the namespace handling for known SVG tags."}, {"name": "unknownTagNamespace", "primary_tested": ["Tag.valueOf(String)", "Tag.namespace()"], "external_dependencies": {"modules": ["Tag", "Parser"]}, "category": "unit", "description": "Tests the namespace handling for unknown tags."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtilTest.java", "testclass_name": "StringUtilTest", "dependencies": ["package org.jsoup.internal;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import static org.jsoup.internal.StringUtil.normaliseWhitespace;", "import static org.jsoup.internal.StringUtil.resolve;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtilTest", "description": "Unit tests for StringUtil class, focusing on various string manipulation and validation methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "join", "primary_tested": ["StringUtil.join(List<String>,String)"], "external_dependencies": {"modules": ["StringUtil", "Collections", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the join functionality of StringUtil, ensuring it correctly concatenates list elements with a given delimiter."}, {"name": "padding", "primary_tested": ["StringUtil.padding(int)", "StringUtil.padding(int,int)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the padding functionality of StringUtil, ensuring it correctly generates strings of spaces with specified lengths."}, {"name": "paddingInACan", "primary_tested": ["StringUtil.padding"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the memoization of padding strings in StringUtil, ensuring the correct lengths are maintained."}, {"name": "isBlank", "primary_tested": ["StringUtil.isBlank(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isBlank functionality of StringUtil, ensuring it correctly identifies blank strings."}, {"name": "isNumeric", "primary_tested": ["StringUtil.isNumeric(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isNumeric functionality of StringUtil, ensuring it correctly identifies numeric strings."}, {"name": "isWhitespace", "primary_tested": ["StringUtil.isWhitespace(char)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isWhitespace functionality of StringUtil, ensuring it correctly identifies whitespace characters."}, {"name": "normaliseWhiteSpace", "primary_tested": ["StringUtil.normaliseWhitespace(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the normaliseWhitespace functionality of StringUtil, ensuring it correctly normalizes sequences of whitespace characters."}, {"name": "normaliseWhiteSpaceHandlesHighSurrogates", "primary_tested": ["StringUtil.normaliseWhitespace(String)"], "associated_methods": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["StringUtil", "Jsoup"], "class_members": []}, "category": "unit", "description": "Tests the normaliseWhitespace functionality of StringUtil with high surrogate characters, ensuring correct handling."}, {"name": "resolvesRelativeUrls", "primary_tested": ["StringUtil.resolve(String,String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the resolve functionality of StringUtil, ensuring it correctly resolves relative URLs."}, {"name": "stripsControlCharsFromUrls", "primary_tested": ["StringUtil.resolve(String,String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the resolve functionality of StringUtil, ensuring it correctly strips control characters from URLs."}, {"name": "allowsSpaceInUrl", "primary_tested": ["StringUtil.resolve(String,String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the resolve functionality of StringUtil, ensuring it correctly handles URLs with spaces."}, {"name": "isAscii", "primary_tested": ["StringUtil.isAscii(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isAscii functionality of StringUtil, ensuring it correctly identifies ASCII strings."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokeniserTest.java", "testclass_name": "TokeniserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.*;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.nio.charset.Charset;", "import java.util.Arrays;", "import static org.jsoup.parser.CharacterReader.BufferSize;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokeniserTest", "description": "Unit tests for the Tokeniser class in the Jsoup library, focusing on handling large inputs and specific character entities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "bufferUpInAttributeVal", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the handling of large attribute values in HTML parsing."}, {"name": "handleSuperLargeTagNames", "primary_tested": ["Parser.htmlParser().settings(ParseSettings).parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "ParseSettings", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the handling of very large tag names in HTML parsing."}, {"name": "handleSuperLargeAttributeName", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the handling of very large attribute names in HTML parsing."}, {"name": "handleLargeText", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the handling of large text content in HTML parsing."}, {"name": "handleLargeComment", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Comment"], "class_members": []}, "category": "unit", "description": "Tests the handling of large comment content in HTML parsing."}, {"name": "handleLargeCdata", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "TextNode"], "class_members": []}, "category": "unit", "description": "Tests the handling of large CDATA content in HTML parsing."}, {"name": "handleLargeTitle", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "TextNode"], "class_members": []}, "category": "unit", "description": "Tests the handling of large title content in HTML parsing."}, {"name": "cp1252Entities", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the parsing of specific CP1252 entities."}, {"name": "cp1252EntitiesProduceError", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document"], "class_members": []}, "category": "unit", "description": "Tests that parsing specific CP1252 entities produces an error."}, {"name": "cp1252SubstitutionTable", "primary_tested": [], "external_dependencies": {"modules": ["Tokeniser", "Charset"], "class_members": []}, "category": "unit", "description": "Tests the CP1252 substitution table for character encoding."}, {"name": "canParseVeryLongBogusComment", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "Comment"], "class_members": []}, "category": "unit", "description": "Tests the parsing of a very long bogus comment in HTML."}, {"name": "canParseCdataEndingAtEdgeOfBuffer", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "CDataNode"], "class_members": []}, "category": "unit", "description": "Tests the parsing of CDATA content ending at the edge of the buffer."}]}, {"file_path": "src/test/java/org/jsoup/select/TraversorTest.java", "testclass_name": "TraversorTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import java.util.concurrent.atomic.AtomicBoolean;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TraversorTest", "description": "Unit tests for the NodeTraversor class, focusing on various filtering and traversal scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "filterVisit", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Element", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the NodeTraversor filter method to ensure it correctly visits and processes nodes, accumulating their names in a specified format."}, {"name": "filterSkipChildren", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Element", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the NodeTraversor filter method to ensure it correctly skips the children of specified nodes (e.g., 'p' elements) while processing."}, {"name": "filterSkipEntirely", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Element", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the NodeTraversor filter method to ensure it correctly skips entire nodes (e.g., 'p' elements) while processing."}, {"name": "filterRemove", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Element", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the NodeTraversor filter method to ensure it correctly removes specified nodes (e.g., 'p' and 'b' elements) while processing."}, {"name": "filterStop", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Element", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the NodeTraversor filter method to ensure it correctly stops processing after encountering a specified node (e.g., 'p' element)."}, {"name": "replaceElement", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor"]}, "category": "unit", "description": "Tests the NodeTraversor traverse method to ensure it correctly replaces specified elements (e.g., 'i' elements) with new elements (e.g., 'u' elements) during traversal."}, {"name": "canAddChildren", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor"]}, "category": "unit", "description": "Tests the NodeTraversor traverse method to ensure it correctly adds children to specified elements (e.g., 'p' elements) during traversal."}, {"name": "canSpecifyOnlyHead", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeVisitor"]}, "category": "unit", "description": "Tests the NodeTraversor traverse method to ensure it correctly processes nodes when only the head method of the NodeVisitor is specified."}, {"name": "canRemoveDuringHead", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "TextNode", "NodeVisitor"]}, "category": "unit", "description": "Tests the NodeTraversor traverse method to ensure it correctly removes specified nodes (e.g., elements with 'id=1' and text nodes with text 'Three') during the head method of traversal."}, {"name": "elementFunctionalTraverse", "primary_tested": ["Element.traverse(NodeVisitor)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor", "AtomicInteger"]}, "category": "unit", "description": "Tests the Element traverse method to ensure it correctly processes nodes and tracks the depth of traversal."}, {"name": "seesDocRoot", "primary_tested": ["Document.traverse(NodeVisitor)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeVisitor", "AtomicBoolean"]}, "category": "unit", "description": "Tests the Document traverse method to ensure it correctly visits the root document node during traversal."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java", "testclass_name": "TokenQueueTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueueTest", "description": "Unit tests for TokenQueue class, focusing on various methods like chompBalanced, unescape, escapeCssIdentifier, and consume methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "chompBalanced", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)", "TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it correctly balances and consumes tokens."}, {"name": "chompEscapedBalanced", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)", "TokenQueue.remainder()", "TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method with escaped characters to ensure correct handling."}, {"name": "chompBalancedMatchesAsMuchAsPossible", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it matches as much as possible."}, {"name": "unescape", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the unescape method to ensure it correctly unescapes strings."}, {"name": "unescape_2", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the unescape method with a different set of escaped characters."}, {"name": "escapeCssIdentifier", "primary_tested": ["TokenQueue.escapeCssIdentifier(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the escapeCssIdentifier method to ensure it correctly escapes CSS identifiers."}, {"name": "chompToIgnoreCase", "primary_tested": ["TokenQueue.chompToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompToIgnoreCase method to ensure it correctly handles case-insensitive chomping."}, {"name": "addFirst", "primary_tested": ["TokenQueue.consumeWord()", "TokenQueue.addFirst(String)", "TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the addFirst method to ensure it correctly adds tokens to the front of the queue."}, {"name": "consumeToIgnoreSecondCallTest", "primary_tested": ["TokenQueue.chompToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompToIgnoreCase method to ensure it correctly handles multiple calls."}, {"name": "testNestedQuotes", "primary_tested": ["Jsoup.parse(String)", "Document.select(String)", "Element.cssSelector()"], "associated_methods": ["TokenQueueTest.validateNestedQuotes(String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of nested quotes in HTML attributes."}, {"name": "chompBalancedThrowIllegalArgumentException", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it throws an IllegalArgumentException when unbalanced."}, {"name": "testQuotedPattern", "primary_tested": ["Jsoup.parse(String)", "Document.select(String)", "Element.childNode(int)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of quoted patterns in HTML elements."}, {"name": "consumeEscapedTag", "primary_tested": ["TokenQueue.consumeElementSelector()", "TokenQueue.consumeWhitespace()", "TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the consumeElementSelector method with escaped tags."}, {"name": "consumeEscapedId", "primary_tested": ["TokenQueue.consumeCssIdentifier()", "TokenQueue.consumeWhitespace()", "TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the consumeCssIdentifier method with escaped identifiers."}]}, {"file_path": "src/test/java/org/jsoup/select/XpathTest.java", "testclass_name": "XpathTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import javax.xml.xpath.XPath;", "import javax.xml.xpath.XPathFactory;", "import javax.xml.xpath.XPathFactoryConfigurationException;", "import javax.xml.xpath.XPathFunctionResolver;", "import javax.xml.xpath.XPathVariableResolver;", "import java.util.List;", "import java.util.stream.Stream;", "import static org.jsoup.helper.W3CDom.XPathFactoryProperty;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "XpathTest", "description": "Unit tests for XPath functionality in Jsoup.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AlternateXpathFactory", "description": "Minimal, no-op implementation class to verify users can load a factory to support XPath 2.0 etc"}]}, "fixtures": [], "test_cases": [{"name": "supportsXpath", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality on a parsed HTML document."}, {"name": "supportsXpathFromElement", "primary_tested": ["Element.selectXpath(String)"], "associated_methods": ["Element.selectFirst(String)", "Element.tagName()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality starting from a specific element."}, {"name": "emptyElementsIfNoResults", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests that XPath selection returns empty elements if no results are found."}, {"name": "throwsSelectException", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Selector"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when an invalid XPath query is used."}, {"name": "supportsLocalname", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Parser"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality using local-name() in an XML document."}, {"name": "canDitchNamespaces", "primary_tested": ["Document.selectXpath(String)"], "associated_methods": ["Element.removeAttr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Parser"], "class_members": []}, "category": "unit", "description": "Tests the ability to remove namespaces and select elements using XPath."}, {"name": "cssAndXpathEquivalents", "primary_tested": ["Document.select(String)", "Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the equivalence of CSS and XPath selection methods."}, {"name": "canSelectTextNodes", "primary_tested": ["Document.selectXpath(String, Class)"], "external_dependencies": {"modules": ["Jsoup", "Document", "TextNode", "Node"], "class_members": []}, "category": "unit", "description": "Tests the ability to select text nodes using XPath."}, {"name": "selectByAttribute", "primary_tested": ["Document.selectXpath(String)"], "associated_methods": ["Elements.eachAttr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to select elements by attribute using XPath."}, {"name": "selectOutsideOfElementTree", "primary_tested": ["Document.selectXpath(String)", "Element.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to select elements outside of the current element's tree using XPath."}, {"name": "selectAncestorsOnContextElement", "primary_tested": ["Element.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to select ancestors on a context element using XPath."}, {"name": "canSupplyAlternateFactoryImpl", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "XPathFactoryProperty"], "class_members": []}, "category": "unit", "description": "Tests the ability to supply an alternate XPath factory implementation."}, {"name": "notNamespaceAware", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Parser"], "class_members": []}, "category": "unit", "description": "Tests that the XPath selection is not namespace-aware."}, {"name": "supportsPrefixes", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Parser"], "class_members": []}, "category": "unit", "description": "Tests the support for XPath prefixes and local-name() in XML documents."}]}, {"file_path": "src/test/java/org/jsoup/nodes/FormElementTest.java", "testclass_name": "FormElementTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.TestServer;", "import org.jsoup.integration.servlets.CookieServlet;", "import org.jsoup.integration.servlets.EchoServlet;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.select.Elements;", "import org.jsoup.select.SelectorTest;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FormElementTest", "description": "Tests for the FormElement class, focusing on form controls, form data creation, and form submission.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "hasAssociatedControls", "primary_tested": ["FormElement.elements()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the form element correctly identifies and counts associated controls."}, {"name": "createsFormData", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of form data from form elements, including handling of different input types."}, {"name": "formDataUsesFirstAttribute", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that form data uses the first attribute when multiple attributes with the same name are present."}, {"name": "createsSubmitableConnection", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a submitable connection from a form element, including handling of different request methods."}, {"name": "actionWithNoValue", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the form submission when the action attribute is not set, ensuring the base URI is used."}, {"name": "actionWithNoBaseUri", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the form submission when no base URI is set, ensuring an exception is thrown."}, {"name": "formsAddedAfterParseAreFormElements", "primary_tested": ["FormElement.elements()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that forms added after parsing are correctly identified as FormElements."}, {"name": "controlsAddedAfterParseAreLinkedWithForms", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that controls added after parsing are correctly linked with their forms."}, {"name": "usesOnForCheckboxValueIfNoValueSet", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that checkboxes without a value attribute use 'on' as the default value."}, {"name": "adoptedFormsRetainInputs", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that adopted forms retain their input elements."}, {"name": "removeFormElement", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of form elements and ensures they are no longer included in form data."}, {"name": "formSubmissionCarriesCookiesFromSession", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection", "Elements", "EchoServlet", "CookieServlet", "FileServlet"], "class_members": []}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests that form submission carries cookies from the session, ensuring correct session handling."}, {"name": "formElementsAreLive", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal", "SelectorTest"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that form elements are live and changes to the DOM are reflected in form data."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java", "testclass_name": "TextNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.helper.ValidationException;", "import org.jsoup.internal.StringUtil;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TextNodeTest", "description": "Unit tests for the TextNode class in the Jsoup library, focusing on various text manipulation and validation functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBlank", "primary_tested": ["TextNode.isBlank()"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the isBlank functionality of the TextNode to check if the text content is blank."}, {"name": "testTextBean", "primary_tested": ["TextNode.text()"], "associated_methods": ["TextNode.attr(String,String)", "TextNode.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the text extraction and manipulation functionalities of the TextNode within an HTML document context."}, {"name": "testSplitText", "primary_tested": ["TextNode.splitText(int)"], "associated_methods": ["TextNode.getWholeText()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests the splitText functionality of the TextNode to split the text content at a specified index."}, {"name": "testSplitAnEmbolden", "primary_tested": ["TextNode.splitText(int)", "TextNode.wrap(String)"], "associated_methods": ["TextNode.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the splitText and wrap functionalities of the TextNode to split and then wrap the text content with an HTML tag."}, {"name": "testSplitTextValidation", "primary_tested": ["TextNode.splitText(int)"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "ValidationException"], "class_members": []}, "category": "unit", "description": "Tests the validation of the splitText functionality of the TextNode to ensure it throws exceptions for invalid split indices."}, {"name": "testWithSupplementaryCharacter", "primary_tested": ["TextNode.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "TextNode"], "class_members": []}, "category": "unit", "description": "Tests the handling of supplementary characters in the TextNode."}, {"name": "testLeadNodesHaveNoChildren", "primary_tested": ["TextNode.childNodes()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests that TextNode instances do not have child nodes."}, {"name": "testSpaceNormalise", "primary_tested": ["TextNode.getWholeText()", "TextNode.text()", "TextNode.outerHtml()", "TextNode.toString()"], "external_dependencies": {"modules": ["TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests the normalization of spaces in the TextNode."}, {"name": "testClone", "primary_tested": ["TextNode.clone()"], "associated_methods": ["TextNode.text()", "TextNode.outerHtml()"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the TextNode to ensure the clone is independent."}, {"name": "testCloneAfterAttributesHit", "primary_tested": ["TextNode.clone()"], "associated_methods": ["TextNode.text()", "TextNode.attributes()"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the TextNode after accessing its attributes."}, {"name": "testHasTextWhenIterating", "primary_tested": ["TextNode.text()", "TextNode.getWholeText()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the presence of text in TextNode instances when iterating through elements."}, {"name": "createFromEncoded", "primary_tested": ["TextNode.createFromEncoded(String)"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the creation of a TextNode from encoded text."}, {"name": "normaliseWhitespace", "primary_tested": ["TextNode.normaliseWhitespace(String)"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the normalization of whitespace in a string."}, {"name": "stripLeadingWhitespace", "primary_tested": ["TextNode.stripLeadingWhitespace(String)"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the stripping of leading whitespace from a string."}, {"name": "leafNodeAttributes", "primary_tested": ["TextNode.attr(String,String)", "TextNode.hasAttributes()", "TextNode.attributes()", "TextNode.coreValue(String)", "TextNode.hasAttr(String)", "TextNode.removeAttr(String)", "TextNode.baseUri()", "TextNode.absUrl(String)", "TextNode.childNodeSize()", "TextNode.empty()", "TextNode.ensureChildNodes()", "TextNode.hasSameValue(TextNode)", "TextNode.clone()"], "external_dependencies": {"modules": ["TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests various attribute-related functionalities of the TextNode."}]}, {"file_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java", "testclass_name": "EntitiesTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.jsoup.nodes.Document.OutputSettings;", "import static org.jsoup.nodes.Entities.EscapeMode.*;", "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EntitiesTest", "description": "Unit tests for the Entities class, focusing on escape and unescape functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "escape", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the escape functionality of the Entities class with different escape modes and character sets."}, {"name": "escapeDefaults", "primary_tested": ["Entities.escape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the default escape functionality of the Entities class."}, {"name": "escapedSupplementary", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the escape functionality of the Entities class with supplementary characters."}, {"name": "unescapeMultiChars", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Entities class with multi-character entities."}, {"name": "xhtml", "primary_tested": ["EscapeMode.codepointForName(String)", "EscapeMode.nameForCodepoint(int)"], "external_dependencies": {"modules": ["EscapeMode"], "class_members": []}, "category": "unit", "description": "Tests the codepoint and name mapping functionalities of the xhtml escape mode."}, {"name": "getByName", "primary_tested": ["Entities.getByName(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the getByName functionality of the Entities class."}, {"name": "escapeSupplementaryCharacter", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the escape functionality of the Entities class with supplementary characters."}, {"name": "notMissingMultis", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Entities class with multi-character entities."}, {"name": "notMissingSupplementals", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Entities class with supplementary characters."}, {"name": "unescape", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Entities class with various entities."}, {"name": "strictUnescape", "primary_tested": ["Entities.unescape(String,boolean)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the strict unescape functionality of the Entities class for attributes."}, {"name": "caseSensitive", "primary_tested": ["Entities.escape(String,OutputSettings)", "Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the case sensitivity of the escape and unescape functionalities of the Entities class."}, {"name": "quoteReplacements", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Entities class with quote replacements."}, {"name": "letterDigitEntities", "primary_tested": ["Jsoup.parse(String)", "Document.outputSettings()", "Element.html()", "Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the parsing and output settings of letter and digit entities in HTML."}, {"name": "noSpuriousDecodes", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests that no spurious decoding occurs in the Entities class."}, {"name": "escapesGtInXmlAttributesButNotInHtml", "primary_tested": ["Jsoup.parse(String)", "Document.outputSettings()", "Element.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the escaping of '>' in XML attributes but not in HTML."}, {"name": "controlCharactersAreEscaped", "primary_tested": ["Jsoup.parse(String)", "Document.body().html()"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests that control characters are escaped in both HTML and XML."}, {"name": "escapeByClonedOutputSettings", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the escape functionality of the Entities class using cloned output settings."}, {"name": "parseHtmlEncodedEmojiMultipoint", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Parser class with multi-point HTML encoded emoji."}, {"name": "parseHtmlEncodedEmoji", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the unescape functionality of the Parser class with HTML encoded emoji."}]}, {"file_path": "src/test/java/org/jsoup/select/CssTest.java", "testclass_name": "CssTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CssTest", "description": "Unit tests for CSS selector functionalities in Jsoup.", "class_members": {"variables": [{"name": "html", "type": "Document"}, {"name": "htmlString", "type": "static String"}], "methods": [{"name": "check", "signature": "void check(Elements result, String... expectedContent)"}]}, "fixtures": ["initClass", "init"], "test_cases": [{"name": "firstChild", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :first-child pseudo-class selector."}, {"name": "lastChild", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :last-child pseudo-class selector."}, {"name": "nthChild_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-child pseudo-class selector with simple indices."}, {"name": "nthOfType_unknownTag", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-of-type pseudo-class selector with an unknown tag."}, {"name": "nthLastChild_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-child pseudo-class selector with simple indices."}, {"name": "nthOfType_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-of-type pseudo-class selector with simple indices."}, {"name": "nthLastOfType_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-of-type pseudo-class selector with simple indices."}, {"name": "nthChild_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-child pseudo-class selector with advanced patterns."}, {"name": "nthOfType_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-of-type pseudo-class selector with advanced patterns."}, {"name": "nthLastChild_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-child pseudo-class selector with advanced patterns."}, {"name": "nthLastOfType_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-of-type pseudo-class selector with advanced patterns."}, {"name": "firstOfType", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :first-of-type pseudo-class selector."}, {"name": "lastOfType", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :last-of-type pseudo-class selector."}, {"name": "empty", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :empty pseudo-class selector."}, {"name": "onlyChild", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :only-child pseudo-class selector."}, {"name": "onlyOfType", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :only-of-type pseudo-class selector."}, {"name": "root", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document", "Tag"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :root pseudo-class selector."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeIteratorTest.java", "testclass_name": "NodeIteratorTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeIteratorTest", "description": "Unit tests for the NodeIterator class, which iterates over nodes in a document.", "class_members": {"variables": [{"name": "html", "type": "String"}], "methods": [{"name": "assertIterates", "signature": "static <T extends Node> void assertIterates(NodeIterator<T> it, String expected)"}, {"name": "assertContents", "signature": "static void assertContents(Element el, String expected)"}, {"name": "trackSeen", "signature": "static void trackSeen(Node node, StringBuilder actual)"}]}, "fixtures": [], "test_cases": [{"name": "canIterateNodes", "primary_tested": ["NodeIterator.from(Document)"], "associated_methods": ["NodeIterator.hasNext()", "NodeIterator.next()", "NodeIterator.remove()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "NoSuchElementException"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over nodes in a document."}, {"name": "hasNextIsPure", "primary_tested": ["NodeIterator.hasNext()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the hasNext method of NodeIterator is pure and does not alter the state of the iterator."}, {"name": "iterateSubTree", "primary_tested": ["NodeIterator.from(Element)"], "associated_methods": ["Document.expectFirst(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over a subtree of nodes in a document."}, {"name": "canRestart", "primary_tested": ["NodeIterator.restart(Element)"], "associated_methods": ["Document.expectFirst(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the restart functionality of NodeIterator to iterate from a new starting point."}, {"name": "canIterateJustOneSibling", "primary_tested": ["NodeIterator.from(Element)"], "associated_methods": ["Document.expectFirst(String)", "Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over a single sibling node."}, {"name": "canIterateFirstEmptySibling", "primary_tested": ["NodeIterator.from(Element)"], "associated_methods": ["Document.expectFirst(String)", "Element.ownText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over an empty sibling node."}, {"name": "canRemoveViaIterator", "primary_tested": ["NodeIterator.remove()"], "associated_methods": ["Node.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal functionality of NodeIterator to remove nodes during iteration."}, {"name": "canRemoveViaNode", "primary_tested": ["Node.remove()"], "associated_methods": ["Node.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal functionality of Node to remove nodes during iteration."}, {"name": "canReplace", "primary_tested": ["Node.replaceWith(Node)"], "associated_methods": ["Node.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the replacement functionality of Node to replace nodes during iteration."}, {"name": "canWrap", "primary_tested": ["Node.wrap(String)"], "associated_methods": ["Node.attr(String)", "TextNode.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element", "TextNode"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the wrapping functionality of Node to wrap nodes during iteration."}, {"name": "canFilterForElements", "primary_tested": ["NodeIterator.from(Document, Class<Element>)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of NodeIterator to iterate over elements."}, {"name": "canFilterForTextNodes", "primary_tested": ["NodeIterator.from(Document, Class<TextNode>)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "TextNode"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of NodeIterator to iterate over text nodes."}, {"name": "canModifyFilteredElements", "primary_tested": ["Element.text(String)"], "associated_methods": ["Element.ownText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the modification functionality of NodeIterator to modify filtered elements."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokeniserStateTest.java", "testclass_name": "TokeniserStateTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TokeniserStateTest", "description": "Unit tests for TokeniserState class, focusing on various HTML parsing scenarios.", "class_members": {"variables": [{"name": "whiteSpace", "type": "final char[]"}, {"name": "quote", "type": "final char[]"}]}, "fixtures": [], "test_cases": [{"name": "ensureSearchArraysAreSorted", "primary_tested": ["Arrays.sort(char[])"], "associated_methods": ["Arrays.copyOf(char[],int)"], "external_dependencies": {"modules": ["Arrays"]}, "category": "unit", "description": "Ensures that the search arrays used in TokeniserState are sorted."}, {"name": "testCharacterReferenceInRcdata", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of character references within RCDATA."}, {"name": "testBeforeTagName", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of whitespace before tag names."}, {"name": "testEndTagOpen", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of end tag open states."}, {"name": "testRcdataLessthanSign", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of less-than signs in RCDATA."}, {"name": "testRCDATAEndTagName", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of end tag names in RCDATA."}, {"name": "testCommentEndCoverage", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Comment.getData()", "TextNode.getWholeText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Comment", "TextNode"]}, "category": "unit", "description": "Tests the coverage of comment end states."}, {"name": "testCommentEndBangCoverage", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Comment.getData()", "TextNode.getWholeText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Comment", "TextNode"]}, "category": "unit", "description": "Tests the coverage of comment end bang states."}, {"name": "testPublicIdentifiersWithWhitespace", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.childNode(int).outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the handling of public identifiers with whitespace."}, {"name": "testSystemIdentifiersWithWhitespace", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.childNode(int).outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the handling of system identifiers with whitespace."}, {"name": "testPublicAndSystemIdentifiersWithWhitespace", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.childNode(int).outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the handling of public and system identifiers with whitespace."}, {"name": "handlesLessInTagThanAsNewTag", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "TextUtil"]}, "category": "unit", "description": "Tests handling of less-than signs in tags as new tags."}, {"name": "testUnconsumeAtBufferBoundary", "primary_tested": ["Parser.parseFragment(String,Element,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests unconsuming at buffer boundary."}, {"name": "testUnconsumeAfterBufferUp", "primary_tested": ["Parser.parseFragment(String,Element,String,ParseErrorList)"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests unconsuming after buffer up."}, {"name": "testOpeningAngleBracketInsteadOfAttribute", "primary_tested": ["Parser.parseFragment(String,Element,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests handling of opening angle brackets instead of attributes."}, {"name": "testMalformedSelfClosingTag", "primary_tested": ["Parser.parseFragment(String,Element,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests handling of malformed self-closing tags."}, {"name": "testOpeningAngleBracketInTagName", "primary_tested": ["Parser.parseFragment(String,Element,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests handling of opening angle brackets in tag names."}, {"name": "rcData", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests handling of RCDATA."}, {"name": "plaintext", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "TextUtil"]}, "category": "unit", "description": "Tests handling of plaintext."}, {"name": "nullInTag", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.body().html()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests handling of null characters in tags."}, {"name": "attributeValUnquoted", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"]}, "category": "unit", "description": "Tests handling of unquoted attribute values."}]}, {"file_path": "src/test/java/org/jsoup/nodes/AttributesTest.java", "testclass_name": "AttributesTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.ConcurrentModificationException;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "AttributesTest", "description": "Unit tests for the Attributes class, focusing on attribute manipulation and iteration.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "html", "primary_tested": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.hasKey(String)", "Attributes.hasKeyIgnoreCase(String)", "Attributes.getIgnoreCase(String)", "Attributes.dataset()", "Attributes.get(String)", "Attributes.html()", "Attributes.toString()"], "external_dependencies": {"modules": ["Attributes", "Map"], "class_members": []}, "category": "unit", "description": "Tests the HTML representation and key handling of Attributes."}, {"name": "testIteratorRemovable", "primary_tested": ["Attributes.iterator()", "Attribute.getKey()", "Iterator.remove()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the removable iterator functionality of Attributes."}, {"name": "testIteratorUpdateable", "primary_tested": ["Attributes.iterator()", "Attribute.setKey(String)", "Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the updateable iterator functionality of Attributes."}, {"name": "testIteratorHasNext", "primary_tested": ["Attributes.iterator()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the hasNext functionality of the Attributes iterator."}, {"name": "testIterator", "primary_tested": ["Attributes.iterator()", "Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the basic iterator functionality of Attributes."}, {"name": "testIteratorSkipsInternal", "primary_tested": ["Attributes.iterator()", "Attribute.getKey()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests that the iterator skips internal attributes in Attributes."}, {"name": "iteratorThrows", "primary_tested": ["Attributes.iterator()", "Iterator.next()", "Iterator.hasNext()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests that the iterator throws NoSuchElementException when exhausted."}, {"name": "testListSkipsInternal", "primary_tested": ["Attributes.asList()", "Attribute.getKey()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "List"], "class_members": []}, "category": "unit", "description": "Tests that the list representation skips internal attributes in Attributes."}, {"name": "htmlSkipsInternals", "primary_tested": ["Attributes.html()"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests that the HTML representation skips internal attributes in Attributes."}, {"name": "testIteratorEmpty", "primary_tested": ["Attributes.iterator()", "Iterator.hasNext()"], "external_dependencies": {"modules": ["Attributes", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the iterator functionality on an empty Attributes object."}, {"name": "testIteratorRemove", "primary_tested": ["Attributes.iterator()", "Iterator.remove()"], "external_dependencies": {"modules": ["Attributes", "Iterator", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the remove functionality of the Attributes iterator."}, {"name": "testIteratorRemoveConcurrentException", "primary_tested": ["Attributes.iterator()", "Iterator.next()", "Element.removeAttr(String)"], "external_dependencies": {"modules": ["Attributes", "Iterator", "Document", "Element", "ConcurrentModificationException"], "class_members": []}, "category": "unit", "description": "Tests that the iterator throws ConcurrentModificationException when the underlying collection is modified."}, {"name": "removeCaseSensitive", "primary_tested": ["Attributes.put(String,String)", "Attributes.remove(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the case sensitivity of the remove method in Attributes."}, {"name": "testSetKeyConsistency", "primary_tested": ["Attributes.put(String,String)", "Attribute.setKey(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the consistency of setting keys in Attributes."}, {"name": "testBoolean", "primary_tested": ["Attributes.put(String,String)", "Attributes.hasDeclaredValueForKey(String)", "Attributes.hasDeclaredValueForKeyIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the boolean attribute handling in Attributes."}, {"name": "testSizeWhenHasInternal", "primary_tested": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.asList()"], "external_dependencies": {"modules": ["Attributes", "List"], "class_members": []}, "category": "unit", "description": "Tests the size calculation when Attributes contains internal keys."}, {"name": "testBooleans", "primary_tested": ["Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of boolean attributes in Attributes."}, {"name": "booleanNullAttributesConsistent", "primary_tested": ["Attributes.put(String,String)", "Attribute.html()", "Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the consistency of null boolean attributes in Attributes."}, {"name": "booleanEmptyString", "primary_tested": ["Attributes.put(String,String)", "Attribute.html()", "Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the handling of empty string boolean attributes in Attributes."}, {"name": "booleanCaseInsensitive", "primary_tested": ["Attributes.put(String,String)", "Attribute.html()", "Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the case insensitivity of boolean attributes in Attributes."}, {"name": "equalsIsOrderInsensitive", "primary_tested": ["Attributes.add(String,String)", "Attributes.clone()", "Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the order insensitivity of the equals method in Attributes."}, {"name": "cloneAttributes", "primary_tested": ["Attributes.add(String,String)", "Attributes.clone()", "Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of Attributes."}]}, {"file_path": "src/test/java/org/jsoup/helper/DataUtilTest.java", "testclass_name": "DataUtilTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.ControllableInputStream;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.nio.ByteBuffer;", "import java.nio.charset.Charset;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import static org.jsoup.integration.ParseTest.getFile;", "import static org.jsoup.integration.ParseTest.getPath;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DataUtilTest", "description": "Unit tests for DataUtil class, focusing on charset handling, BOM detection, and file parsing.", "class_members": {"variables": [], "methods": [{"name": "stream", "signature": "private ControllableInputStream stream(String data)"}, {"name": "stream", "signature": "private ControllableInputStream stream(String data, String charset)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the extraction of charset from content type strings."}, {"name": "testQuotedCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the extraction of charset from content type strings with quoted charset values."}, {"name": "discardsSpuriousByteOrderMark", "primary_tested": ["DataUtil.parseInputStream(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of BOM in HTML content."}, {"name": "discardsSpuriousByteOrderMarkWhenNoCharsetSet", "primary_tested": ["DataUtil.parseInputStream(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of BOM in HTML content when no charset is set."}, {"name": "shouldNotThrowExceptionOnEmptyCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the behavior when the charset is empty in the content type string."}, {"name": "shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the selection of the first charset when multiple charsets are specified in meta tags."}, {"name": "shouldCorrectCharsetForDuplicateCharsetString", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the correction of charset when the charset string is duplicated."}, {"name": "shouldReturnNullForIllegalCharsetNames", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the handling of illegal charset names in the content type string."}, {"name": "generatesMimeBoundaries", "primary_tested": ["DataUtil.mimeBoundary()"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the generation of MIME boundaries."}, {"name": "wrongMetaCharsetFallback", "primary_tested": ["DataUtil.parseInputStream(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the fallback behavior when the meta charset is incorrect."}, {"name": "secondMetaElementWithContentTypeContainsCharsetParameter", "primary_tested": ["DataUtil.parseInputStream(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of the second meta element with a charset parameter."}, {"name": "firstMetaElementWithCharsetShouldBeUsedForDecoding", "primary_tested": ["DataUtil.parseInputStream(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests that the first meta element with a charset should be used for decoding."}, {"name": "parseSequenceInputStream", "primary_tested": ["DataUtil.parseInputStream(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document", "SequenceInputStream", "ControllableInputStream"], "class_members": [{"name": "stream", "type": "method"}], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests parsing a sequence input stream."}, {"name": "supportsBOMinFiles", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for BOM in various encoding files."}, {"name": "streamerSupportsBOMinFiles", "primary_tested": ["DataUtil.streamParser(Path,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for BOM in various encoding files using stream parser."}, {"name": "supportsUTF8BOM", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM."}, {"name": "noExtraNULLBytes", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests that no extra NULL bytes are present in the parsed document."}, {"name": "supportsZippedUTF8BOM", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM in zipped files."}, {"name": "streamerSupportsZippedUTF8BOM", "primary_tested": ["DataUtil.streamParser(Path,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM in zipped files using stream parser."}, {"name": "supportsXmlCharsetDeclaration", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests support for XML charset declaration."}, {"name": "loadsGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzip file."}, {"name": "loadsGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzip file using Path."}, {"name": "loadsZGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzip file with .z suffix."}, {"name": "loadsZGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzip file with .z suffix using Path."}, {"name": "handlesFakeGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests handling of a file that is not actually gzipped."}, {"name": "handlesFakeGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests handling of a file that is not actually gzipped using Path."}, {"name": "handlesChunkedInputStream", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "VaryingReadInputStream"], "project_specific_resources": ["ParseTest.getFile(String)", "ParseTest.getFileAsString(File)", "ParseTest.inputStreamFrom(String)"]}, "category": "unit", "description": "Tests handling of a chunked input stream."}, {"name": "handlesUnlimitedRead", "primary_tested": ["DataUtil.readToByteBuffer(InputStream,int)"], "external_dependencies": {"modules": ["DataUtil", "VaryingReadInputStream"], "project_specific_resources": ["ParseTest.getFile(String)", "ParseTest.getFileAsString(File)", "ParseTest.inputStreamFrom(String)"]}, "category": "unit", "description": "Tests reading an unlimited amount of data from an input stream."}]}, {"file_path": "src/test/java/org/jsoup/helper/W3CDomTest.java", "testclass_name": "W3CDomTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Document;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.xml.sax.InputSource;", "import javax.xml.parsers.DocumentBuilder;", "import javax.xml.parsers.DocumentBuilderFactory;", "import javax.xml.parsers.ParserConfigurationException;", "import javax.xml.transform.OutputKeys;", "import javax.xml.xpath.XPathConstants;", "import javax.xml.xpath.XPathExpression;", "import javax.xml.xpath.XPathExpressionException;", "import javax.xml.xpath.XPathFactory;", "import java.io.ByteArrayInputStream;", "import java.io.File;", "import java.io.IOException;", "import java.io.StringReader;", "import java.nio.charset.StandardCharsets;", "import java.util.Locale;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "W3CDomTest", "description": "Tests for the W3CDom class, which converts Jsoup documents to W3C DOM documents.", "class_members": {"variables": [], "methods": [{"name": "parseXml", "signature": "private static Document parseXml(String xml, boolean nameSpaceAware)"}, {"name": "xpath", "signature": "private NodeList xpath(Document w3cDoc, String query) throws XPathExpressionException"}, {"name": "output", "signature": "private String output(String in, boolean modeHtml)"}, {"name": "assertEqualsIgnoreCase", "signature": "private void assertEqualsIgnoreCase(String want, String have)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "simpleConversion", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["Document.getElementsByTagName(String)", "Document.normalizeDocument()", "TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "NodeList", "TextUtil"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of a simple HTML document from Jsoup to W3C DOM and back, ensuring the structure and content are preserved."}, {"name": "namespacePreservation", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Node.getNamespaceURI()", "Node.getLocalName()", "Node.getNodeName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the preservation of namespaces during the conversion of a Jsoup document to W3C DOM, ensuring namespace information is correctly maintained."}, {"name": "handlesInvalidAttributeNames", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)"], "associated_methods": ["Element.hasAttr(String)", "W3CDom.asString(Document, Map<String, String>)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of invalid attribute names during the conversion of a Jsoup document to W3C DOM, ensuring the conversion process does not fail."}, {"name": "htmlInputDocMaintainsHtmlAttributeNames", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "TextUtil"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that HTML attribute names are maintained correctly when converting a Jsoup document to W3C DOM and back, ensuring Unicode attribute names are preserved."}, {"name": "xmlInputDocMaintainsHtmlAttributeNames", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "TextUtil"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that HTML attribute names are maintained correctly when converting a Jsoup document to W3C DOM and back, ensuring Unicode attribute names are preserved in XML syntax."}, {"name": "handlesInvalidTagAsText", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of invalid tags during the conversion of a Jsoup document to W3C DOM, ensuring invalid tags are treated as text."}, {"name": "canConvertToCustomDocument", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document, Document)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "DocumentBuilderFactory"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ability to convert a Jsoup document to a custom W3C DOM document, ensuring the conversion process works with custom document builders."}, {"name": "treatsUndeclaredNamespaceAsLocalName", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Node.getNamespaceURI()", "Node.getLocalName()", "Node.getNodeName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of undeclared namespaces during the conversion of a Jsoup document to W3C DOM, ensuring undeclared namespaces are treated as local names."}, {"name": "xmlnsXpathTest", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int)", "Node.getLocalName()", "Node.getNamespaceURI()", "Node.getPrefix()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XPath functionality with namespace-aware documents, ensuring XPath queries work correctly with namespaces."}, {"name": "xhtmlNoNamespace", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int)", "Node.getLocalName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the XPath functionality with non-namespace-aware documents, ensuring XPath queries work correctly without namespaces."}, {"name": "canDisableNamespaces", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int)", "Node.getLocalName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ability to disable namespaces during the conversion of a Jsoup document to W3C DOM, ensuring XPath queries work correctly without namespaces."}, {"name": "testRoundTripDoctype", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["TextUtil.normalizeSpaces(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "TextUtil"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the round-trip conversion of a document with different DOCTYPE declarations, ensuring the DOCTYPE is preserved correctly."}, {"name": "canOutputHtmlWithoutNamespace", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ability to output HTML without namespaces, ensuring the output is correctly formatted without namespace declarations."}, {"name": "convertsElementsAndMaintainsSource", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Node.getLocalName()", "Node.getUserData(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of elements from Jsoup to W3C DOM while maintaining the source information, ensuring the original Jsoup elements can be retrieved."}, {"name": "canXmlParseCdataNodes", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int)", "Node.getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of CDATA nodes in XML documents, ensuring CDATA sections are correctly handled during conversion."}, {"name": "handlesEmptyDoctype", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Document.getDoctype()", "Node.getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of an empty DOCTYPE during the conversion of a Jsoup document to W3C DOM, ensuring the conversion process does not fail."}, {"name": "testHtmlParseAttributesAreCaseInsensitive", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Document.getElementsByTagName(String)", "NodeList.getLength()", "NodeList.item(int)", "Element.getAttribute(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "NodeList", "Element"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the case-insensitivity of HTML attribute names during the parsing of a Jsoup document, ensuring attribute names are correctly matched regardless of case."}]}, {"file_path": "src/test/java/org/jsoup/parser/StreamParserTest.java", "testclass_name": "StreamParserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.BufferedReader;", "import java.io.File;", "import java.io.IOException;", "import java.io.InputStreamReader;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.concurrent.atomic.AtomicReference;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeTest.java", "testclass_name": "NodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.parser.Tag;", "import org.jsoup.select.Elements;", "import org.jsoup.select.NodeVisitor;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.jsoup.parser.Parser.*;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java", "testclass_name": "HttpConnectionTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.jsoup.integration.ParseTest;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.net.Authenticator;", "import java.net.MalformedURLException;", "import java.net.PasswordAuthentication;", "import java.net.URL;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Locale;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java", "testclass_name": "UrlConnectTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.UnsupportedMimeTypeException;", "import org.jsoup.helper.W3CDom;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.parser.HtmlTreeBuilder;", "import org.jsoup.parser.Parser;", "import org.jsoup.parser.XmlTreeBuilder;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.net.ConnectException;", "import java.net.InetSocketAddress;", "import java.net.Proxy;", "import java.net.URL;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java", "testclass_name": "CharacterReaderTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.StringUtil;", "import org.junit.jupiter.api.Test;", "import java.io.BufferedReader;", "import java.io.IOException;", "import java.io.StringReader;", "import java.io.UncheckedIOException;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java", "testclass_name": "DocumentTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.nodes.Document.OutputSettings;", "import org.jsoup.nodes.Document.OutputSettings.Syntax;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.nio.charset.Charset;", "import java.nio.charset.StandardCharsets;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/PositionTest.java", "testclass_name": "PositionTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.CDataNode;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.DataNode;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.DocumentType;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.LeafNode;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.Range;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.nodes.XmlDeclaration;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.List;", "import java.util.stream.Collectors;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java", "testclass_name": "XmlTreeBuilderTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.*;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.io.InputStream;", "import java.net.URISyntaxException;", "import java.nio.charset.StandardCharsets;", "import java.util.List;", "import static org.jsoup.nodes.Document.OutputSettings.Syntax;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "XmlTreeBuilderTest", "description": "Unit tests for the XmlTreeBuilder class, focusing on XML parsing and handling various XML structures and declarations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSimpleXmlParse", "primary_tested": ["XmlTreeBuilder.parse(String,String)"], "external_dependencies": {"modules": ["XmlTreeBuilder", "Document", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the basic XML parsing functionality, ensuring correct parsing and attribute handling."}, {"name": "testPopToClose", "primary_tested": ["XmlTreeBuilder.parse(String,String)"], "external_dependencies": {"modules": ["XmlTreeBuilder", "Document", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the handling of mismatched tags in XML parsing, ensuring correct closing of tags."}, {"name": "testCommentAndDocType", "primary_tested": ["XmlTreeBuilder.parse(String,String)"], "external_dependencies": {"modules": ["XmlTreeBuilder", "Document", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the handling of XML comments and DOCTYPE declarations during parsing."}, {"name": "testSupplyParserToJsoupClass", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the ability to supply a custom XML parser to the Jsoup class for parsing XML content."}, {"name": "testSupplyParserToConnection", "primary_tested": ["Jsoup.connect(String).parser(Parser).get()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the ability to supply a custom XML parser to a Jsoup connection for parsing remote XML content."}, {"name": "testSupplyParserToDataStream", "primary_tested": ["Jsoup.parse(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "File", "FileInputStream", "InputStream"], "class_members": []}, "category": "unit", "description": "Tests the ability to parse XML from a data stream using a custom XML parser."}, {"name": "testDoesNotForceSelfClosingKnownTags", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests that the XML parser does not force self-closing tags for known HTML tags."}, {"name": "handlesXmlDeclarationAsDeclaration", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the handling of XML declarations as valid XML nodes."}, {"name": "xmlFragment", "primary_tested": ["Parser.parseXmlFragment(String,String)"], "external_dependencies": {"modules": ["Parser", "Node", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the parsing of XML fragments and the handling of absolute URLs."}, {"name": "xmlParseDefaultsToHtmlOutputSyntax", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests that the XML parser defaults to HTML output syntax."}, {"name": "testDoesHandleEOFInTag", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the handling of EOF within tags during XML parsing."}, {"name": "testDetectCharsetEncodingDeclaration", "primary_tested": ["Jsoup.parse(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "File", "FileInputStream", "InputStream"], "class_members": []}, "category": "unit", "description": "Tests the detection of charset encoding declarations in XML files."}, {"name": "testParseDeclarationAttributes", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "XmlDeclaration"], "class_members": []}, "category": "unit", "description": "Tests the parsing of attributes in XML declarations."}, {"name": "testParseDeclarationWithoutAttributes", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "XmlDeclaration"], "class_members": []}, "category": "unit", "description": "Tests the parsing of XML declarations without attributes."}, {"name": "caseSensitiveDeclaration", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the case sensitivity of XML declarations."}, {"name": "testCreatesValidProlog", "primary_tested": ["Document.createShell(String)"], "external_dependencies": {"modules": ["Document", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the creation of a valid XML prolog in a document."}, {"name": "preservesCaseByDefault", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests that the XML parser preserves tag case by default."}, {"name": "appendPreservesCaseByDefault", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "Elements"], "class_members": []}, "category": "unit", "description": "Tests that appending elements preserves tag case by default."}, {"name": "disablesPrettyPrintingByDefault", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests that pretty printing is disabled by default in the XML parser."}, {"name": "canNormalizeCase", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "ParseSettings"], "class_members": []}, "category": "unit", "description": "Tests the ability to normalize tag case in the XML parser."}, {"name": "normalizesDiscordantTags", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "ParseSettings"], "class_members": []}, "category": "unit", "description": "Tests the normalization of discordant tags in the XML parser."}, {"name": "roundTripsCdata", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "Element", "CDataNode"], "class_members": []}, "category": "unit", "description": "Tests the round-tripping of CDATA sections in the XML parser."}, {"name": "cdataPreservesWhiteSpace", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests that whitespace is preserved in CDATA sections."}, {"name": "handlesDodgyXmlDecl", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the handling of malformed XML declarations."}, {"name": "handlesLTinScript", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the handling of '<' characters in script tags."}, {"name": "dropsDuplicateAttributes", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "TextUtil", "Element"], "class_members": []}, "category": "unit", "description": "Tests that duplicate attributes are dropped in the XML parser."}, {"name": "readerClosedAfterParse", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "TreeBuilder"], "class_members": []}, "category": "unit", "description": "Tests that the reader is closed after parsing."}, {"name": "xmlParserEnablesXmlOutputAndEscapes", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "Entities"], "class_members": []}, "category": "unit", "description": "Tests that the XML parser enables XML output and escapes entities correctly."}, {"name": "xmlSyntaxEscapesLtInAttributes", "primary_tested": ["Jsoup.parse(String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "Entities"], "class_members": []}, "category": "unit", "description": "Tests that '<' characters in attributes are escaped in XML syntax."}, {"name": "xmlOutputCorrectsInvalidAttributeNames", "primary_tested": ["Jsoup.parse(String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests that invalid attribute names are corrected in XML output."}, {"name": "customTagsAreFlyweights", "primary_tested": ["Jsoup.parse(String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "Elements", "Tag"], "class_members": []}, "category": "unit", "description": "Tests that custom tags are flyweights in the XML parser."}, {"name": "rootHasXmlSettings", "primary_tested": ["Jsoup.parse(String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "ParseSettings"], "class_members": []}, "category": "unit", "description": "Tests that the root element has XML settings."}, {"name": "xmlNamespace", "primary_tested": ["Jsoup.parse(String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser", "TextUtil", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the handling of XML namespaces."}]}, {"file_path": "src/test/java/org/jsoup/select/ElementsTest.java", "testclass_name": "ElementsTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.DataNode;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.junit.jupiter.api.Assertions.assertFalse;"]}, {"file_path": "src/test/java/org/jsoup/select/SelectorTest.java", "testclass_name": "SelectorTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import java.util.IdentityHashMap;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java", "testclass_name": "HtmlParserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.*;", "import org.jsoup.safety.Safelist;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.ByteArrayInputStream;", "import java.io.File;", "import java.io.IOException;", "import java.util.List;", "import java.util.stream.Stream;", "import static org.jsoup.parser.ParseSettings.preserveCase;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/safety/CleanerTest.java", "testclass_name": "CleanerTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.Jsoup;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Entities;", "import org.jsoup.nodes.Range;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.Arrays;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/nodes/ElementTest.java", "testclass_name": "ElementTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.helper.ValidationException;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.jsoup.parser.Tag;", "import org.jsoup.select.Elements;", "import org.jsoup.select.Evaluator;", "import org.jsoup.select.NodeFilter;", "import org.jsoup.select.NodeVisitor;", "import org.jsoup.select.QueryParser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.LinkedHashSet;", "import java.util.List;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.atomic.AtomicInteger;", "import java.util.regex.Pattern;", "import java.util.stream.Stream;", "import static org.jsoup.select.SelectorTest.assertSelectedOwnText;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/integration/ConnectTest.java", "testclass_name": "ConnectTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.HttpStatusException;", "import org.jsoup.Jsoup;", "import org.jsoup.Connection.Method;", "import org.jsoup.UnsupportedMimeTypeException;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.helper.W3CDom;", "import org.jsoup.integration.servlets.*;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.XmlDeclaration;", "import org.jsoup.parser.HtmlTreeBuilder;", "import org.jsoup.parser.Parser;", "import org.jsoup.parser.StreamParser;", "import org.jsoup.parser.XmlTreeBuilder;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import javax.servlet.http.HttpServletResponse;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.net.Authenticator;", "import java.net.MalformedURLException;", "import java.net.URL;", "import java.net.URLDecoder;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import java.util.List;", "import java.util.Map;", "import java.util.concurrent.atomic.AtomicBoolean;", "import java.util.concurrent.atomic.AtomicInteger;", "import java.util.stream.Stream;", "import static org.jsoup.helper.AuthenticationHandlerTest.MaxAttempts;", "import static org.jsoup.helper.HttpConnection.CONTENT_TYPE;", "import static org.jsoup.helper.HttpConnection.MULTIPART_FORM_DATA;", "import static org.jsoup.integration.UrlConnectTest.browserUa;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/select/QueryParser_toStringTest.java", "testclass_name": "QueryParser_toStringTest", "dependencies": ["package org.jsoup.select;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "QueryParser_toStringTest", "description": "Unit tests for the toString method of the QueryParser class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToString", "primary_tested": ["Evaluator.toString()"], "external_dependencies": {"modules": ["QueryParser", "Evaluator"]}, "category": "unit", "description": "Tests the toString method of the Evaluator class, ensuring it returns the correct string representation of the parsed query."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_removeAttrTest.java", "testclass_name": "Elements_removeAttrTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_removeAttrTest", "description": "Unit tests for the removeAttr method of the Elements class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemoveAttr", "primary_tested": ["Elements.removeAttr(String)"], "associated_methods": ["Element.hasAttr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of an attribute from multiple elements."}]}, {"file_path": "src/test/java/org/jsoup/helper/W3CDom_namespaceAwareTest.java", "testclass_name": "W3CDom_namespaceAwareTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Document;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "W3CDom_namespaceAwareTest", "description": "Unit tests for the namespace awareness functionality in the W3CDom class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNamespaceAware", "primary_tested": ["W3CDom.namespaceAware()"], "associated_methods": ["W3CDom.namespaceAware(boolean)"], "external_dependencies": {"modules": ["W3CDom"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the namespace awareness functionality of the W3CDom class by toggling the namespace awareness setting and verifying the state changes."}]}, {"file_path": "src/test/java/org/jsoup/parser/Tag_toStringTest.java", "testclass_name": "Tag_toStringTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Tag_toStringTest", "description": "Unit test for the toString method of the Tag class.", "class_members": {"variables": [{"name": "tag", "type": "Tag"}]}, "test_cases": [{"name": "testToString", "primary_tested": ["Tag.toString()"], "external_dependencies": {"modules": ["Tag"], "class_members": [{"name": "tag", "type": "variable"}]}, "category": "unit", "description": "Tests the toString method of the Tag class to ensure it returns the correct string representation of the tag."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_toggleClassTest.java", "testclass_name": "Elements_toggleClassTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_toggleClassTest", "description": "Unit tests for the toggleClass functionality of the Elements class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testToggleClass", "primary_tested": ["Elements.toggleClass(String)"], "associated_methods": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toggleClass functionality of the Elements class, ensuring that the class is toggled correctly on the elements."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_htmlTest.java", "testclass_name": "Elements_htmlTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_htmlTest", "description": "Unit tests for the html method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHtml", "primary_tested": ["Elements.html()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the html method of the Elements class to ensure it returns the correct HTML content."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_notTest.java", "testclass_name": "Elements_notTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_notTest", "description": "Unit tests for the 'not' method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNot", "primary_tested": ["Elements.not(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the 'not' method of the Elements class to ensure it excludes elements with a specific class."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_emptyTest.java", "testclass_name": "Elements_emptyTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_emptyTest", "description": "Unit tests for the empty functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmpty", "primary_tested": ["Elements.empty()"], "associated_methods": ["Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the empty functionality of the Elements class, ensuring that the text of each element is cleared."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_toStringTest.java", "testclass_name": "Elements_toStringTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_toStringTest", "description": "Unit tests for the toString method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToString", "primary_tested": ["Elements.toString()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Elements class to ensure it correctly formats the elements as a string."}]}, {"file_path": "src/test/java/org/jsoup/helper/Validate_isFalseTest.java", "testclass_name": "Validate_isFalseTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validate_isFalseTest", "description": "Unit tests for the Validate.isFalse method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIsFalse_withFalseValue", "primary_tested": ["Validate.isFalse(boolean)"], "external_dependencies": {"modules": ["Validate"]}, "category": "unit", "description": "Tests that no exception is thrown when Validate.isFalse is called with a false value."}, {"name": "testIsFalse_withTrueValue", "primary_tested": ["Validate.isFalse(boolean)"], "associated_methods": ["ValidationException.getMessage()"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests that a ValidationException is thrown with the correct message when Validate.isFalse is called with a true value."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_formsTest.java", "testclass_name": "Elements_formsTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.FormElement;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_formsTest", "description": "Unit tests for the forms functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testForms", "primary_tested": ["Elements.forms()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "FormElement"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the extraction of forms from a parsed HTML document."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_addClassTest.java", "testclass_name": "Elements_addClassTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_addClassTest", "description": "Unit tests for the addClass method in the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddClass", "primary_tested": ["Element.addClass(String)"], "associated_methods": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addClass functionality of the Elements class."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_removeIfTest.java", "testclass_name": "Elements_removeIfTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_removeIfTest", "description": "Unit tests for the removeIf method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}, {"name": "filter", "type": "Predicate<Element>"}]}, "test_cases": [{"name": "testRemoveIf", "primary_tested": ["Elements.removeIf(Predicate<Element>)"], "external_dependencies": {"modules": ["Elements", "Element", "Predicate", "Arrays"], "class_members": [{"name": "elements", "type": "variable"}, {"name": "filter", "type": "variable"}]}, "category": "unit", "description": "Tests the removeIf functionality of the Elements class, ensuring elements are correctly removed based on a predicate."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_removeClassTest.java", "testclass_name": "Elements_removeClassTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_removeClassTest", "description": "Unit tests for the removeClass functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveClass", "primary_tested": ["Elements.removeClass(String)"], "associated_methods": ["Elements.addClass(String)", "Elements.hasClass(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a class from an element and verifies the presence of another class."}]}, {"file_path": "src/test/java/org/jsoup/helper/Validate_isTrueTest.java", "testclass_name": "Validate_isTrueTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validate_isTrueTest", "description": "Unit tests for the Validate.isTrue method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIsTrue_withTrueValue", "primary_tested": ["Validate.isTrue(boolean)"], "external_dependencies": {"modules": ["Validate"]}, "category": "unit", "description": "Tests the Validate.isTrue method with a true value."}, {"name": "testIsTrue_withFalseValue", "primary_tested": ["Validate.isTrue(boolean)"], "associated_methods": ["ValidationException.getMessage()"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests the Validate.isTrue method with a false value, expecting a ValidationException."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_appendTest.java", "testclass_name": "Elements_appendTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_appendTest", "description": "Unit tests for the append functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAppend", "primary_tested": ["Elements.append(String)"], "associated_methods": ["Elements.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the append functionality of the Elements class by appending HTML content and verifying the resulting outer HTML."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_textTest.java", "testclass_name": "Elements_textTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_textTest", "description": "Unit tests for the text extraction functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testText", "primary_tested": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the text extraction functionality of the Elements class."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_unescapeEntitiesTest.java", "testclass_name": "Parser_unescapeEntitiesTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Parser_unescapeEntitiesTest", "description": "Unit tests for the unescapeEntities method in the Parser class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnescapeEntitiesInAttribute", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"]}, "category": "unit", "description": "Tests the unescapeEntities method with the inAttribute parameter set to true."}, {"name": "testUnescapeEntitiesInText", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"]}, "category": "unit", "description": "Tests the unescapeEntities method with the inAttribute parameter set to false."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_eachTextTest.java", "testclass_name": "Elements_eachTextTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_eachTextTest", "description": "Unit tests for the eachText method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEachText", "primary_tested": ["Elements.eachText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the eachText method of the Elements class to ensure it correctly extracts non-empty text nodes from a list of elements."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_tagNameTest.java", "testclass_name": "Elements_tagNameTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_tagNameTest", "description": "Unit tests for the tagName functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTagName", "primary_tested": ["Elements.tagName(String)"], "associated_methods": ["Element.tagName()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tagName functionality of the Elements class by setting the tag name to 'span' and verifying it."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_eachAttrTest.java", "testclass_name": "Elements_eachAttrTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_eachAttrTest", "description": "Unit tests for the eachAttr method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEachAttr", "primary_tested": ["Elements.eachAttr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the eachAttr method of the Elements class to ensure it correctly retrieves attributes from selected elements."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_clearTest.java", "testclass_name": "Elements_clearTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Elements_clearTest", "description": "Unit test for the clear method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}, {"name": "element1", "type": "Element"}, {"name": "element2", "type": "Element"}]}, "test_cases": [{"name": "testClear", "primary_tested": ["Elements.clear()"], "external_dependencies": {"modules": ["Elements", "Element"], "class_members": [{"name": "elements", "type": "variable"}, {"name": "element1", "type": "variable"}, {"name": "element2", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the Elements class, ensuring that all elements are removed and the collection is empty."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_beforeTest.java", "testclass_name": "Elements_beforeTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_beforeTest", "description": "Unit tests for the 'before' method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBefore", "primary_tested": ["Elements.before(String)"], "associated_methods": ["Elements.parents()", "Element.html()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the 'before' method of the Elements class by inserting HTML before each element and verifying the resulting HTML structure."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_prependTest.java", "testclass_name": "Elements_prependTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_prependTest", "description": "Unit tests for the prepend functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPrepend", "primary_tested": ["Elements.prepend(String)"], "associated_methods": ["Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prepend functionality of the Elements class by adding 'New ' to the beginning of each element's text and verifying the result."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_filterTest.java", "testclass_name": "Elements_filterTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_filterTest", "description": "Unit tests for the filter functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}, {"name": "nodeFilter", "type": "NodeFilter"}]}, "test_cases": [{"name": "testFilter", "primary_tested": ["Elements.filter(NodeFilter)"], "external_dependencies": {"modules": ["Elements", "Element", "NodeFilter", "FilterResult"], "class_members": [{"name": "elements", "type": "variable"}, {"name": "nodeFilter", "type": "variable"}]}, "category": "unit", "description": "Tests the filter functionality of the Elements class."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_wrapTest.java", "testclass_name": "Elements_wrapTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "Elements_wrapTest", "description": "Unit tests for the wrap functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}, {"name": "mockElement", "type": "Element"}]}, "test_cases": [{"name": "testWrap", "primary_tested": ["Element.wrap(String)"], "associated_methods": ["Elements.add(Element)", "Elements.wrap(String)"], "external_dependencies": {"modules": ["Elements", "Element", "org.mockito.Mockito"], "class_members": [{"name": "elements", "type": "variable"}, {"name": "mockElement", "type": "variable"}]}, "category": "unit", "description": "Tests the wrap functionality of the Elements class by wrapping a mock element with a div tag and verifying the wrap method was called on the mock element."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_cloneTest.java", "testclass_name": "Elements_cloneTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_cloneTest", "description": "Unit tests for the clone functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClone", "primary_tested": ["Elements.clone()"], "associated_methods": ["Elements.size()", "Elements.get(int)", "Element.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cloning functionality of the Elements class, ensuring the clone has the same size and contains the same elements."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_parseXmlFragmentTest.java", "testclass_name": "Parser_parseXmlFragmentTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Parser_parseXmlFragmentTest", "description": "Unit tests for parsing XML fragments using the Parser class.", "class_members": {"variables": [{"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testParseXmlFragment", "primary_tested": ["Parser.parseXmlFragment(String,String)"], "associated_methods": ["Node.nodeName()"], "external_dependencies": {"modules": ["Parser", "Node", "XmlTreeBuilder"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parsing of an XML fragment and verifies the resulting nodes."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_traverseTest.java", "testclass_name": "Elements_traverseTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_traverseTest", "description": "Unit tests for the traversal functionality of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTraverse", "primary_tested": ["Elements.traverse(NodeVisitor)"], "associated_methods": ["NodeVisitor.head(Node,int)", "NodeVisitor.tail(Node,int)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the traversal functionality of the Elements class using a custom NodeVisitor to count the number of Element nodes."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_hasClassTest.java", "testclass_name": "Elements_hasClassTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.List;"], "name": "Elements_hasClassTest", "description": "Unit tests for the hasClass method in the Elements class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHasClass_ClassExists", "primary_tested": ["Elements.hasClass(String)"], "external_dependencies": {"modules": ["Element", "Elements", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasClass method when the class exists in the element."}, {"name": "testHasClass_ClassDoesNotExist", "primary_tested": ["Elements.hasClass(String)"], "external_dependencies": {"modules": ["Element", "Elements", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasClass method when the class does not exist in the element."}]}, {"file_path": "src/test/java/org/jsoup/helper/Validate_notEmptyTest.java", "testclass_name": "Validate_notEmptyTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validate_notEmptyTest", "description": "Unit tests for the Validate.notEmpty method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNotEmpty_withNonEmptyString", "primary_tested": ["Validate.notEmpty(String)"], "external_dependencies": {"modules": ["Validate"]}, "category": "unit", "description": "Tests the Validate.notEmpty method with a non-empty string."}, {"name": "testNotEmpty_withNullString", "primary_tested": ["Validate.notEmpty(String)"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests the Validate.notEmpty method with a null string, expecting a ValidationException."}, {"name": "testNotEmpty_withEmptyString", "primary_tested": ["Validate.notEmpty(String)"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests the Validate.notEmpty method with an empty string, expecting a ValidationException."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_afterTest.java", "testclass_name": "Elements_afterTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_afterTest", "description": "Unit test for the 'after' method of the Elements class.", "class_members": {"variables": [{"name": "doc", "type": "Document"}, {"name": "elements", "type": "Elements"}, {"name": "html", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testAfter", "primary_tested": ["Elements.after(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": [{"name": "doc", "type": "variable"}, {"name": "elements", "type": "variable"}, {"name": "html", "type": "variable"}]}, "category": "unit", "description": "Tests the 'after' method of the Elements class to ensure it correctly appends HTML content after the selected elements."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_hasAttrTest.java", "testclass_name": "Elements_hasAttrTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_hasAttrTest", "description": "Unit tests for the hasAttr method in the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasAttrPresent", "primary_tested": ["Elements.hasAttr(String)"], "external_dependencies": {"modules": ["Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the hasAttr method returns true when the attribute is present."}, {"name": "testHasAttrNotPresent", "primary_tested": ["Elements.hasAttr(String)"], "external_dependencies": {"modules": ["Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the hasAttr method returns false when the attribute is not present."}]}, {"file_path": "src/test/java/org/jsoup/helper/Validate_ensureNotNullTest.java", "testclass_name": "Validate_ensureNotNullTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validate_ensureNotNullTest", "description": "Unit tests for the Validate.ensureNotNull method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEnsureNotNull_WithNonNullObject", "primary_tested": ["Validate.ensureNotNull(Object)"], "external_dependencies": {"modules": ["Validate", "Object"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ensureNotNull method with a non-null object."}, {"name": "testEnsureNotNull_WithNullObject", "primary_tested": ["Validate.ensureNotNull(Object)"], "external_dependencies": {"modules": ["Validate", "ValidationException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ensureNotNull method with a null object, expecting a ValidationException."}]}, {"file_path": "src/test/java/org/jsoup/helper/W3CDom_asStringTest.java", "testclass_name": "W3CDom_asStringTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Document;", "import org.w3c.dom.DocumentType;", "import javax.xml.parsers.DocumentBuilder;", "import javax.xml.parsers.DocumentBuilderFactory;", "import javax.xml.parsers.ParserConfigurationException;", "import javax.xml.transform.TransformerException;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "W3CDom_asStringTest", "description": "Unit tests for the W3CDom.asString method, focusing on different scenarios including properties and doctype handling.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAsString_withPropertiesAndDoctype", "primary_tested": ["W3CDom.asString(Document,Map<String,String>)"], "external_dependencies": {"modules": ["DocumentBuilderFactory", "DocumentBuilder", "Document", "DocumentType", "W3CDom", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the W3CDom.asString method with properties and doctype, ensuring the correct string representation is returned."}, {"name": "testAsString_transformerException", "primary_tested": ["W3CDom.asString(Document,Map<String,String>)"], "external_dependencies": {"modules": ["DocumentBuilderFactory", "DocumentBuilder", "Document", "W3CDom", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the W3CDom.asString method to ensure it throws an IllegalArgumentException when invalid properties are passed, simulating a TransformerException."}]}, {"file_path": "src/test/java/org/jsoup/helper/Validate_notEmptyParamTest.java", "testclass_name": "Validate_notEmptyParamTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validate_notEmptyParamTest", "description": "Unit tests for the Validate.notEmptyParam method, ensuring it correctly validates non-empty parameters.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNotEmptyParamValid", "primary_tested": ["Validate.notEmptyParam(String,String)"], "external_dependencies": {"modules": ["Validate"]}, "category": "unit", "description": "Tests that Validate.notEmptyParam does not throw an exception when a valid non-empty string is provided."}, {"name": "testNotEmptyParamNull", "primary_tested": ["Validate.notEmptyParam(String,String)"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests that Validate.notEmptyParam throws a ValidationException when a null string is provided."}, {"name": "testNotEmptyParamEmpty", "primary_tested": ["Validate.notEmptyParam(String,String)"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests that Validate.notEmptyParam throws a ValidationException when an empty string is provided."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_valTest.java", "testclass_name": "Elements_valTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Elements_valTest", "description": "Unit tests for the val() method in the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValWithElements", "primary_tested": ["Elements.val()"], "external_dependencies": {"modules": ["Elements", "Element"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the val() method when the Elements object contains an Element."}, {"name": "testValWithEmptyElements", "primary_tested": ["Elements.val()"], "external_dependencies": {"modules": ["Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the val() method when the Elements object is empty."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_setTreeBuilderTest.java", "testclass_name": "Parser_setTreeBuilderTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Parser_setTreeBuilderTest", "description": "Unit tests for the setTreeBuilder method in the Parser class.", "class_members": {"variables": [{"name": "parser", "type": "Parser"}, {"name": "mockTreeBuilder", "type": "TreeBuilder"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetTreeBuilder", "primary_tested": ["Parser.setTreeBuilder(TreeBuilder)"], "associated_methods": ["Parser.getTreeBuilder()"], "external_dependencies": {"modules": ["Parser", "TreeBuilder", "HtmlTreeBuilder", "XmlTreeBuilder"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "mockTreeBuilder", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setTreeBuilder method to ensure the TreeBuilder is updated correctly and the new TreeBuilder's parser reference is also updated."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_chompToTest.java", "testclass_name": "TokenQueue_chompToTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_chompToTest", "description": "Unit tests for the chompTo method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testChompToWithMatch", "primary_tested": ["TokenQueue.chompTo(String)"], "associated_methods": ["TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompTo method when a match is found in the TokenQueue."}, {"name": "testChompToWithoutMatch", "primary_tested": ["TokenQueue.chompTo(String)"], "associated_methods": ["TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompTo method when no match is found in the TokenQueue."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_attrTest.java", "testclass_name": "Elements_attrTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_attrTest", "description": "Unit tests for the 'attr' method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAttrWithExistingAttribute", "primary_tested": ["Elements.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the 'attr' method with an existing attribute."}, {"name": "testAttrWithNonExistingAttribute", "primary_tested": ["Elements.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the 'attr' method with a non-existing attribute."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_parseFragmentTest.java", "testclass_name": "Parser_parseFragmentTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Parser_parseFragmentTest", "description": "Unit tests for the parseFragment method of the Parser class.", "class_members": {"variables": [{"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testParseFragment", "primary_tested": ["Parser.parseFragment(String,Element,String)"], "associated_methods": ["Node.nodeName()", "Node.childNode(int)"], "external_dependencies": {"modules": ["Parser", "Element", "Node"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parseFragment method with a non-empty HTML fragment."}, {"name": "testParseFragmentWithEmptyString", "primary_tested": ["Parser.parseFragment(String,Element,String)"], "external_dependencies": {"modules": ["Parser", "Element"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parseFragment method with an empty HTML fragment."}]}, {"file_path": "src/test/java/org/jsoup/helper/W3CDom_fromJsoupTest.java", "testclass_name": "W3CDom_fromJsoupTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "W3CDom_fromJsoupTest", "description": "Unit tests for the W3CDom class's fromJsoup method.", "class_members": {"variables": [{"name": "w3cDom", "type": "W3CDom"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFromJsoupWithValidDocument", "primary_tested": ["W3CDom.fromJsoup(Document)"], "associated_methods": ["Document.getFirstChild()"], "external_dependencies": {"modules": ["Jsoup", "Document", "W3CDom"], "class_members": [{"name": "w3cDom", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the fromJsoup method with a valid Jsoup Document, ensuring the conversion to a W3C Document is correct."}, {"name": "testFromJsoupWithNullDocument", "primary_tested": ["W3CDom.fromJsoup(Document)"], "external_dependencies": {"modules": ["W3CDom"], "class_members": [{"name": "w3cDom", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the fromJsoup method with a null Jsoup Document, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_settingsTest.java", "testclass_name": "Parser_settingsTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Parser_settingsTest", "description": "Unit tests for the settings functionality of the Parser class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSettings", "primary_tested": ["Parser.settings(ParseSettings)"], "associated_methods": ["Parser.settings()"], "external_dependencies": {"modules": ["Parser", "HtmlTreeBuilder", "ParseSettings"]}, "category": "unit", "description": "Tests the settings functionality of the Parser class by updating and retrieving the settings."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeWhitespaceTest.java", "testclass_name": "TokenQueue_consumeWhitespaceTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_consumeWhitespaceTest", "description": "Unit tests for the consumeWhitespace method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConsumeWhitespace", "primary_tested": ["TokenQueue.consumeWhitespace()"], "associated_methods": ["TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeWhitespace method when there is whitespace to consume."}, {"name": "testConsumeWhitespaceNoWhitespace", "primary_tested": ["TokenQueue.consumeWhitespace()"], "associated_methods": ["TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the consumeWhitespace method when there is no whitespace to consume."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_simpleTextTest.java", "testclass_name": "Safelist_simpleTextTest", "dependencies": ["package org.jsoup.safety;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_simpleTextTest", "description": "Unit tests for the simpleText Safelist in Jsoup.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSimpleText", "primary_tested": ["Safelist.isSafeTag(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isSafeTag method of the simpleText Safelist to ensure it correctly identifies safe and unsafe tags."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_escapeCssIdentifierTest.java", "testclass_name": "TokenQueue_escapeCssIdentifierTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_escapeCssIdentifierTest", "description": "Unit tests for the escapeCssIdentifier method in the TokenQueue class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEscapeCssIdentifier", "primary_tested": ["TokenQueue.escapeCssIdentifier(String)"], "external_dependencies": {"modules": ["TokenQueue"]}, "category": "unit", "description": "Tests the escapeCssIdentifier method with a string containing special characters."}, {"name": "testEscapeCssIdentifierWithEscapedChars", "primary_tested": ["TokenQueue.escapeCssIdentifier(String)"], "external_dependencies": {"modules": ["TokenQueue"]}, "category": "unit", "description": "Tests the escapeCssIdentifier method with a string containing already escaped characters."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_isInvisibleCharTest.java", "testclass_name": "StringUtil_isInvisibleCharTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_isInvisibleCharTest", "description": "Unit tests for the StringUtil.isInvisibleChar method.", "test_cases": [{"name": "testIsInvisibleChar", "primary_tested": ["StringUtil.isInvisibleChar(int)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the functionality of the StringUtil.isInvisibleChar method to determine if specific characters are considered invisible."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_startsWithNewlineTest.java", "testclass_name": "StringUtil_startsWithNewlineTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_startsWithNewlineTest", "description": "Unit tests for the startsWithNewline method in the StringUtil class.", "test_cases": [{"name": "testStartsWithNewline", "primary_tested": ["StringUtil.startsWithNewline(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the startsWithNewline method of the StringUtil class for various scenarios including strings that start with a newline, do not start with a newline, an empty string, and a null string."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_unescapeTest.java", "testclass_name": "TokenQueue_unescapeTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_unescapeTest", "description": "Unit tests for the unescape functionality of the TokenQueue class.", "fixtures": ["setUp"], "test_cases": [{"name": "testUnescapeWithNoEscapes", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unescape functionality with no escape sequences."}, {"name": "testUnescapeWithSingleEscape", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unescape functionality with a single escape sequence."}, {"name": "testUnescapeWithConsecutiveEscapes", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unescape functionality with consecutive escape sequences."}, {"name": "testUnescapeWithMixedEscapes", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unescape functionality with mixed escape sequences."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_isActuallyWhitespaceTest.java", "testclass_name": "StringUtil_isActuallyWhitespaceTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_isActuallyWhitespaceTest", "description": "Unit tests for the isActuallyWhitespace method in the StringUtil class.", "test_cases": [{"name": "testIsActuallyWhitespace", "primary_tested": ["StringUtil.isActuallyWhitespace(char)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the isActuallyWhitespace method to ensure it correctly identifies various whitespace characters and non-whitespace characters."}]}, {"file_path": "src/test/java/org/jsoup/helper/W3CDom_convertTest.java", "testclass_name": "W3CDom_convertTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "W3CDom_convertTest", "description": "Unit tests for converting Jsoup Document to W3C Document using W3CDom.", "class_members": {"variables": [{"name": "w3cDom", "type": "W3CDom"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConvertDocument", "primary_tested": ["W3CDom.fromJsoup(Document)"], "associated_methods": ["Document.getElementsByTagName(String)", "Node.getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "Document", "W3CDom", "Node"], "class_members": [{"name": "w3cDom", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the conversion of a Jsoup Document to a W3C Document and verifies the content."}, {"name": "testConvertElement", "primary_tested": ["W3CDom.fromJsoup(Document)"], "associated_methods": ["Document.body()", "Element.child(int)", "Document.getElementsByTagName(String)", "Node.getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "Document", "W3CDom", "Node"], "class_members": [{"name": "w3cDom", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the conversion of a Jsoup Element to a W3C Document and verifies the content."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_isNumericTest.java", "testclass_name": "StringUtil_isNumericTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_isNumericTest", "description": "Unit tests for the isNumeric method in the StringUtil class.", "test_cases": [{"name": "testIsNumeric", "primary_tested": ["StringUtil.isNumeric(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the isNumeric method with various inputs including null, empty string, non-numeric string, numeric string, and numeric string with leading/trailing spaces."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_addFirstTest.java", "testclass_name": "TokenQueue_addFirstTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_addFirstTest", "description": "Unit tests for the addFirst method of the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddFirst", "primary_tested": ["TokenQueue.addFirst(String)"], "associated_methods": ["TokenQueue.toString()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addFirst method of the TokenQueue class by prepending a string and checking the resulting string representation."}]}, {"file_path": "src/test/java/org/jsoup/select/Elements_hasTextTest.java", "testclass_name": "Elements_hasTextTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Elements_hasTextTest", "description": "Unit tests for the hasText method of the Elements class.", "class_members": {"variables": [{"name": "elements", "type": "Elements"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasTextWithText", "primary_tested": ["Elements.hasText()"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasText method when the Elements object contains an Element with text."}, {"name": "testHasTextWithoutText", "primary_tested": ["Elements.hasText()"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasText method when the Elements object contains an Element without text."}, {"name": "testHasTextMixed", "primary_tested": ["Elements.hasText()"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": [{"name": "elements", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasText method when the Elements object contains a mix of Elements with and without text."}]}, {"file_path": "src/test/java/org/jsoup/select/NodeTraversor_traverseTest.java", "testclass_name": "NodeTraversor_traverseTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeTraversor_traverseTest", "description": "Unit tests for the NodeTraversor.traverse method.", "class_members": {"variables": [{"name": "doc", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTraverse", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeVisitor", "NodeTraversor"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the traversal functionality of NodeTraversor with a valid NodeVisitor and root node."}, {"name": "testTraverseWithNullVisitor", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeVisitor", "NodeTraversor"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the traversal functionality of NodeTraversor with a null NodeVisitor, expecting an IllegalArgumentException."}, {"name": "testTraverseWithNullRoot", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeVisitor", "NodeTraversor"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the traversal functionality of NodeTraversor with a null root node, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeToAnyTest.java", "testclass_name": "TokenQueue_consumeToAnyTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_consumeToAnyTest", "description": "Unit tests for the consumeToAny method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConsumeToAnyWithMatch", "primary_tested": ["TokenQueue.consumeToAny(String...)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeToAny method when there is a match in the TokenQueue."}, {"name": "testConsumeToAnyWithoutMatch", "primary_tested": ["TokenQueue.consumeToAny(String...)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeToAny method when there is no match in the TokenQueue."}, {"name": "testConsumeToAnyWithEmptyQueue", "primary_tested": ["TokenQueue.consumeToAny(String...)"], "associated_methods": ["TokenQueue.advance()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeToAny method when the TokenQueue is advanced and then checked for matches."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_normaliseWhitespaceTest.java", "testclass_name": "StringUtil_normaliseWhitespaceTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_normaliseWhitespaceTest", "description": "Unit test for the normaliseWhitespace method in StringUtil.", "class_members": {"variables": [{"name": "input", "type": "String"}, {"name": "expected", "type": "String"}]}, "test_cases": [{"name": "testNormaliseWhitespace", "primary_tested": ["StringUtil.normaliseWhitespace(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the normaliseWhitespace method of StringUtil to ensure it correctly normalises whitespace in a given string."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_rootTest.java", "testclass_name": "Element_rootTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Element_rootTest", "description": "Unit test for the root method of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRoot", "primary_tested": ["Element.root()"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the root method of the Element class to ensure it returns a non-null value."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_setTrackPositionTest.java", "testclass_name": "Parser_setTrackPositionTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Parser_setTrackPositionTest", "description": "Unit tests for the setTrackPosition method of the Parser class.", "class_members": {"variables": [{"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetTrackPositionTrue", "primary_tested": ["Parser.setTrackPosition(boolean)"], "associated_methods": ["Parser.isTrackPosition()"], "external_dependencies": {"modules": ["Parser"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setTrackPosition method with true as the parameter, ensuring that the position tracking is enabled and the method returns the same Parser instance."}, {"name": "testSetTrackPositionFalse", "primary_tested": ["Parser.setTrackPosition(boolean)"], "associated_methods": ["Parser.isTrackPosition()"], "external_dependencies": {"modules": ["Parser"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setTrackPosition method with false as the parameter, ensuring that the position tracking is disabled and the method returns the same Parser instance."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_attrTest.java", "testclass_name": "Element_attrTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_attrTest", "description": "Unit tests for the attr method of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAttr", "primary_tested": ["Element.attr(String,String)"], "associated_methods": ["Element.attributes()"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the attr method of the Element class to ensure it correctly sets and retrieves an attribute."}]}, {"file_path": "src/test/java/org/jsoup/select/NodeTraversor_filterTest.java", "testclass_name": "NodeTraversor_filterTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeTraversor_filterTest", "description": "Unit tests for the NodeTraversor filter functionality.", "class_members": {"variables": [{"name": "doc", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFilterStop", "primary_tested": ["NodeTraversor.filter(NodeFilter,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeFilter", "FilterResult"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the NodeTraversor filter functionality with a stop condition."}, {"name": "testFilterContinue", "primary_tested": ["NodeTraversor.filter(NodeFilter,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeFilter", "FilterResult"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the NodeTraversor filter functionality with a continue condition."}, {"name": "testFilterRemove", "primary_tested": ["NodeTraversor.filter(NodeFilter,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeFilter", "FilterResult"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the NodeTraversor filter functionality with a remove condition."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_appendNormalisedWhitespaceTest.java", "testclass_name": "StringUtil_appendNormalisedWhitespaceTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_appendNormalisedWhitespaceTest", "description": "Unit tests for the appendNormalisedWhitespace method in StringUtil.", "class_members": {"variables": [{"name": "accum", "type": "StringBuilder"}]}, "fixtures": [], "test_cases": [{"name": "testAppendNormalisedWhitespace", "primary_tested": ["StringUtil.appendNormalisedWhitespace(StringBuilder,String,boolean)"], "external_dependencies": {"modules": ["StringUtil", "StringBuilder"], "class_members": [{"name": "accum", "type": "variable"}]}, "category": "unit", "description": "Tests the appendNormalisedWhitespace method in StringUtil with various scenarios including normal strings, strings with leading and multiple internal whitespaces, strings with leading whitespace and stripLeading true, strings with only whitespace, and strings with invisible characters."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_matchChompTest.java", "testclass_name": "TokenQueue_matchChompTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_matchChompTest", "description": "Unit tests for the matchChomp method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMatchChomp_MatchFound", "primary_tested": ["TokenQueue.matchChomp(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the matchChomp method when a match is found."}, {"name": "testMatchChomp_MatchNotFound", "primary_tested": ["TokenQueue.matchChomp(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the matchChomp method when a match is not found."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_toStringTest.java", "testclass_name": "Attributes_toStringTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_toStringTest", "description": "Unit tests for the toString method of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToString", "primary_tested": ["Attributes.toString()"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Attributes class by adding key-value pairs and verifying the output string."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeToTest.java", "testclass_name": "TokenQueue_consumeToTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_consumeToTest", "description": "Unit tests for the consumeTo method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConsumeTo_SequenceFound", "primary_tested": ["TokenQueue.consumeTo(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeTo method when the sequence is found in the TokenQueue."}, {"name": "testConsumeTo_SequenceNotFound", "primary_tested": ["TokenQueue.consumeTo(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeTo method when the sequence is not found in the TokenQueue."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_toStringTest.java", "testclass_name": "Attribute_toStringTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_toStringTest", "description": "Unit tests for the toString method of the Attribute class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToString", "primary_tested": ["Attribute.toString()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of the Attribute class to ensure it correctly formats the attribute key and value, including handling special characters like '&'."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_textTest.java", "testclass_name": "Document_textTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_textTest", "description": "Unit tests for the text functionality of the Document class.", "class_members": {"variables": [{"name": "document", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testText", "primary_tested": ["Document.text(String)"], "associated_methods": ["Document.text()"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the text setting and retrieval functionality of the Document class."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_setTrackErrorsTest.java", "testclass_name": "Parser_setTrackErrorsTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Parser_setTrackErrorsTest", "description": "Unit tests for the setTrackErrors method in the Parser class.", "class_members": {"variables": [{"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetTrackErrorsWithPositiveMaxErrors", "primary_tested": ["Parser.setTrackErrors(int)"], "associated_methods": ["Parser.isTrackErrors()", "Parser.getErrors().getMaxSize()"], "external_dependencies": {"modules": ["Parser"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setTrackErrors method with a positive maximum number of errors."}, {"name": "testSetTrackErrorsWithZeroMaxErrors", "primary_tested": ["Parser.setTrackErrors(int)"], "associated_methods": ["Parser.isTrackErrors()", "Parser.getErrors().getMaxSize()"], "external_dependencies": {"modules": ["Parser"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setTrackErrors method with zero maximum number of errors."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNode_createFromEncodedTest.java", "testclass_name": "TextNode_createFromEncodedTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TextNode_createFromEncodedTest", "description": "Unit tests for the TextNode.createFromEncoded method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateFromEncoded", "primary_tested": ["TextNode.createFromEncoded(String)"], "associated_methods": ["TextNode.getWholeText()"], "external_dependencies": {"modules": ["TextNode"]}, "category": "unit", "description": "Tests the creation of a TextNode from encoded text and verifies the decoded text."}]}, {"file_path": "src/test/java/org/jsoup/internal/SoftPool_borrowTest.java", "testclass_name": "SoftPool_borrowTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Stack;", "import java.util.function.Supplier;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SoftPool_borrowTest", "description": "Unit tests for the borrow functionality of the SoftPool class.", "class_members": {"variables": [{"name": "softPool", "type": "SoftPool<char[]>"}, {"name": "BufSize", "type": "static final int"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBorrowFromEmptyPool", "primary_tested": ["SoftPool.borrow()"], "external_dependencies": {"modules": ["SoftPool"], "class_members": [{"name": "softPool", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests borrowing a buffer from an empty SoftPool."}, {"name": "testBorrowFromNonEmptyPool", "primary_tested": ["SoftPool.borrow()"], "associated_methods": ["SoftPool.release(char[])"], "external_dependencies": {"modules": ["SoftPool"], "class_members": [{"name": "softPool", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests borrowing a buffer from a non-empty SoftPool."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_isBlankTest.java", "testclass_name": "StringUtil_isBlankTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_isBlankTest", "description": "Unit tests for the isBlank method in the StringUtil class.", "test_cases": [{"name": "testIsBlank_NullString", "primary_tested": ["StringUtil.isBlank(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the isBlank method with a null string."}, {"name": "testIsBlank_EmptyString", "primary_tested": ["StringUtil.isBlank(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the isBlank method with an empty string."}, {"name": "testIsBlank_WhitespaceString", "primary_tested": ["StringUtil.isBlank(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the isBlank method with a string containing only whitespace characters."}, {"name": "testIsBlank_NonWhitespaceString", "primary_tested": ["StringUtil.isBlank(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests the isBlank method with a string containing non-whitespace characters."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_joinTest.java", "testclass_name": "StringUtil_joinTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "StringUtil_joinTest", "description": "Unit tests for the StringUtil.join method.", "fixtures": ["setUp"], "test_cases": [{"name": "testJoinEmptyIterator", "primary_tested": ["StringUtil.join(Iterator<String>,String)"], "external_dependencies": {"modules": ["Collections", "StringUtil"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the join functionality of StringUtil with an empty iterator."}, {"name": "testJoinSingleElementIterator", "primary_tested": ["StringUtil.join(Iterator<String>,String)"], "external_dependencies": {"modules": ["Collections", "StringUtil"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the join functionality of StringUtil with an iterator containing a single element."}, {"name": "testJoinMultipleElementsIterator", "primary_tested": ["StringUtil.join(Iterator<String>,String)"], "external_dependencies": {"modules": ["Arrays", "StringUtil"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the join functionality of StringUtil with an iterator containing multiple elements."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_joiningTest.java", "testclass_name": "StringUtil_joiningTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.stream.Collectors;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "StringUtil_joiningTest", "description": "Unit tests for the joining functionality of the StringUtil class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testJoiningWithDelimiter", "primary_tested": ["StringUtil.joining(String)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.stream.Collectors", "StringUtil"]}, "category": "unit", "description": "Tests the joining functionality of the StringUtil with a delimiter."}, {"name": "testJoiningWithEmptyList", "primary_tested": ["StringUtil.joining(String)"], "external_dependencies": {"modules": ["java.util.List", "java.util.stream.Collectors", "StringUtil"]}, "category": "unit", "description": "Tests the joining functionality of the StringUtil with an empty list."}, {"name": "testJoiningWithSingleElement", "primary_tested": ["StringUtil.joining(String)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.stream.Collectors", "StringUtil"]}, "category": "unit", "description": "Tests the joining functionality of the StringUtil with a single element list."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_matchesAnyTest.java", "testclass_name": "TokenQueue_matchesAnyTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_matchesAnyTest", "description": "Unit tests for the matchesAny method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMatchesAnyWithEmptyQueue", "primary_tested": ["TokenQueue.matchesAny(char,char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the matchesAny method with an empty queue."}, {"name": "testMatchesAnyWithMatchingCharacter", "primary_tested": ["TokenQueue.matchesAny(char,char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the matchesAny method with a matching character in the queue."}, {"name": "testMatchesAnyWithNonMatchingCharacter", "primary_tested": ["TokenQueue.matchesAny(char,char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the matchesAny method with a non-matching character in the queue."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_removeAttrTest.java", "testclass_name": "Element_removeAttrTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_removeAttrTest", "description": "Unit tests for the removeAttr method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAttr", "primary_tested": ["Element.removeAttr(String)"], "associated_methods": ["Element.hasAttr(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an attribute from an Element."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_htmlTest.java", "testclass_name": "Attribute_htmlTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.SerializationException;", "import org.jsoup.internal.StringUtil;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.IOException;"], "name": "Attribute_htmlTest", "description": "Unit tests for the html method in the Attribute class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHtml_NormalCase", "primary_tested": ["Attribute.html()"], "external_dependencies": {"modules": ["Attribute", "Document.OutputSettings"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the normal case of the html method in the Attribute class."}, {"name": "testHtml_IOException", "primary_tested": ["Attribute.html()"], "associated_methods": ["Attribute.html(Appendable,Document.OutputSettings)"], "external_dependencies": {"modules": ["Attribute", "Document.OutputSettings", "SerializationException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of IOException in the html method of the Attribute class."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsMatchingTextTest.java", "testclass_name": "Element_getElementsMatchingTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import org.jsoup.select.Elements;", "import java.util.regex.PatternSyntaxException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementsMatchingTextTest", "description": "Unit tests for the getElementsMatchingText method of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetElementsMatchingText_ValidRegex", "primary_tested": ["Element.getElementsMatchingText(String)"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getElementsMatchingText method with a valid regex pattern."}, {"name": "testGetElementsMatchingText_InvalidRegex", "primary_tested": ["Element.getElementsMatchingText(String)"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getElementsMatchingText method with an invalid regex pattern, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Comment_isXmlDeclarationTest.java", "testclass_name": "Comment_isXmlDeclarationTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Comment_isXmlDeclarationTest", "description": "Unit tests for the isXmlDeclaration method in the Comment class.", "class_members": {"variables": [{"name": "comment", "type": "Comment"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsXmlDeclarationTrue", "primary_tested": ["Comment.isXmlDeclaration()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the isXmlDeclaration method returns true when the comment data is an XML declaration."}, {"name": "testIsXmlDeclarationFalse", "primary_tested": ["Comment.isXmlDeclaration()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the isXmlDeclaration method returns false when the comment data is not an XML declaration."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_removeClassTest.java", "testclass_name": "Element_removeClassTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_removeClassTest", "description": "Unit tests for the removeClass functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveClassSuccess", "primary_tested": ["Element.removeClass(String)"], "associated_methods": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an existing class from the Element."}, {"name": "testRemoveClassNonExistent", "primary_tested": ["Element.removeClass(String)"], "associated_methods": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existent class from the Element."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DataNode_cloneTest.java", "testclass_name": "DataNode_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DataNode_cloneTest", "description": "Unit tests for the clone functionality of the DataNode class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["DataNode.clone()"], "external_dependencies": {"modules": ["DataNode"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the DataNode, ensuring that the cloned node has the same data but is a different object."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_isAsciiTest.java", "testclass_name": "StringUtil_isAsciiTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_isAsciiTest", "description": "Unit tests for the isAscii method in the StringUtil class.", "test_cases": [{"name": "testIsAscii_AllAsciiCharacters", "primary_tested": ["StringUtil.isAscii(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests that the isAscii method returns true for a string containing all ASCII characters."}, {"name": "testIsAscii_NonAsciiCharacter", "primary_tested": ["StringUtil.isAscii(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests that the isAscii method returns false for a string containing a non-ASCII character."}, {"name": "testIsAscii_EmptyString", "primary_tested": ["StringUtil.isAscii(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests that the isAscii method returns true for an empty string."}, {"name": "testIsAscii_NullString", "primary_tested": ["StringUtil.isAscii(String)"], "external_dependencies": {"modules": ["StringUtil"]}, "category": "unit", "description": "Tests that the isAscii method throws an IllegalArgumentException for a null string."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_idTest.java", "testclass_name": "Element_idTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_idTest", "description": "Unit tests for the id functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIdWithValidId", "primary_tested": ["Element.id(String)"], "associated_methods": ["Element.id()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a valid id on an Element and verifies the id is correctly retrieved."}, {"name": "testIdWithNullId", "primary_tested": ["Element.id(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a null id on an Element throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Comment_cloneTest.java", "testclass_name": "Comment_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Comment_cloneTest", "description": "Unit tests for the clone functionality of the Comment class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["Comment.clone()"], "external_dependencies": {"modules": ["Comment"]}, "category": "unit", "description": "Tests the cloning functionality of the Comment class, ensuring that the cloned object is not the same instance but has the same data."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNode_toStringTest.java", "testclass_name": "TextNode_toStringTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TextNode_toStringTest", "description": "Unit tests for the toString method of the TextNode class.", "class_members": {"variables": [{"name": "textNode", "type": "TextNode"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToString", "primary_tested": ["TextNode.toString()"], "external_dependencies": {"modules": ["TextNode"], "class_members": [{"name": "textNode", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the TextNode class to ensure it correctly formats the text."}]}, {"file_path": "src/test/java/org/jsoup/parser/Parser_parseBodyFragmentTest.java", "testclass_name": "Parser_parseBodyFragmentTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Parser_parseBodyFragmentTest", "description": "Unit tests for the Parser.parseBodyFragment method which parses HTML fragments into a Document object.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testParseBodyFragment", "primary_tested": ["Parser.parseBodyFragment(String,String)"], "associated_methods": ["Document.body()", "Element.childNodeSize()", "Element.childNode(int)", "Node.nodeName()", "TextNode.text()"], "external_dependencies": {"modules": ["Document", "Element", "Node", "TextNode"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a simple HTML fragment into a Document object and verifies the structure of the resulting Document."}, {"name": "testParseBodyFragmentWithEmptyBody", "primary_tested": ["Parser.parseBodyFragment(String,String)"], "associated_methods": ["Document.body()", "Element.childNodeSize()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of an empty HTML fragment into a Document object and verifies that the body has no child nodes."}, {"name": "testParseBodyFragmentWithMultipleNodes", "primary_tested": ["Parser.parseBodyFragment(String,String)"], "associated_methods": ["Document.body()", "Element.childNodeSize()", "Element.childNode(int)", "Node.nodeName()", "TextNode.text()"], "external_dependencies": {"modules": ["Document", "Element", "Node", "TextNode"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of an HTML fragment with multiple nodes into a Document object and verifies the structure of the resulting Document."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_appendTextTest.java", "testclass_name": "Element_appendTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_appendTextTest", "description": "Unit tests for the appendText method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAppendText", "primary_tested": ["Element.appendText(String)"], "associated_methods": ["Element.text()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the appendText method with a valid string input."}, {"name": "testAppendTextNull", "primary_tested": ["Element.appendText(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the appendText method with a null input, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/internal/SoftPool_releaseTest.java", "testclass_name": "SoftPool_releaseTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Stack;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SoftPool_releaseTest", "description": "Unit tests for the release functionality of the SoftPool class.", "class_members": {"variables": [{"name": "softPool", "type": "SoftPool<char[]>"}, {"name": "BufSize", "type": "static final int"}, {"name": "MaxIdle", "type": "static final int"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testReleaseWhenStackIsNotFull", "primary_tested": ["SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool", "Stack"], "class_members": [{"name": "softPool", "type": "variable"}, {"name": "BufSize", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the release functionality of the SoftPool when the stack is not full."}, {"name": "testReleaseWhenStackIsFull", "primary_tested": ["SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool", "Stack"], "class_members": [{"name": "softPool", "type": "variable"}, {"name": "BufSize", "type": "variable"}, {"name": "MaxIdle", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the release functionality of the SoftPool when the stack is full."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_traverseTest.java", "testclass_name": "Element_traverseTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.select.NodeVisitor;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Element_traverseTest", "description": "Unit tests for the traverse functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}], "nested_classes": [{"name": "NodeVisitorMock", "description": "Internal mock implementation of NodeVisitor for testing purposes."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTraverse", "primary_tested": ["Element.traverse(NodeVisitor)"], "associated_methods": ["Element.traverse(NodeVisitor)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeVisitor", "NodeVisitorMock"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the traverse functionality of the Element class using a mock NodeVisitor."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_getTest.java", "testclass_name": "Attributes_getTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_getTest", "description": "Unit tests for the get method in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["Attributes.get(String)"], "associated_methods": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of an existing key from the Attributes object."}, {"name": "testGetNonExistingKey", "primary_tested": ["Attributes.get(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a non-existing key from the Attributes object."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_attributeTest.java", "testclass_name": "Attributes_attributeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_attributeTest", "description": "Unit tests for the attribute retrieval functionality in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAttributeFound", "primary_tested": ["Attributes.attribute(String)"], "associated_methods": ["Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of an existing attribute from the Attributes object."}, {"name": "testAttributeNotFound", "primary_tested": ["Attributes.attribute(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a non-existent attribute from the Attributes object."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_closestTest.java", "testclass_name": "Element_closestTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.select.Evaluator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_closestTest", "description": "Unit tests for the Element.closest method in Jsoup.", "class_members": {"variables": [{"name": "element", "type": "Element"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testClosestWithMatchingEvaluator", "primary_tested": ["Element.closest(Evaluator)"], "associated_methods": ["Element.tagName()"], "external_dependencies": {"modules": ["Element", "Evaluator"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the closest method with an evaluator that matches the element's tag name."}, {"name": "testClosestWithNonMatchingEvaluator", "primary_tested": ["Element.closest(Evaluator)"], "associated_methods": ["Element.tagName()"], "external_dependencies": {"modules": ["Element", "Evaluator"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the closest method with an evaluator that does not match the element's tag name."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Entities_getByNameTest.java", "testclass_name": "Entities_getByNameTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Entities_getByNameTest", "description": "Unit tests for the Entities.getByName method.", "fixtures": ["setUp"], "test_cases": [{"name": "testGetByName_ExistingEntity", "primary_tested": ["Entities.getByName(String)"], "external_dependencies": {"modules": ["Entities"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getByName method for an existing entity."}, {"name": "testGetByName_NonExistingEntity", "primary_tested": ["Entities.getByName(String)"], "external_dependencies": {"modules": ["Entities"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getByName method for a non-existing entity."}, {"name": "testGetByName_MultiPointsEntity", "primary_tested": ["Entities.getByName(String)"], "external_dependencies": {"modules": ["Entities"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getByName method for an entity with multiple points."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_getEnforcedAttributesTest.java", "testclass_name": "Safelist_getEnforcedAttributesTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.nodes.Attributes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_getEnforcedAttributesTest", "description": "Unit tests for the getEnforcedAttributes method in the Safelist class.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetEnforcedAttributes_withEnforcedAttributes", "primary_tested": ["Safelist.getEnforcedAttributes(String)"], "associated_methods": ["Attributes.get(String)"], "external_dependencies": {"modules": ["Safelist", "Attributes"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getEnforcedAttributes method when there are enforced attributes."}, {"name": "testGetEnforcedAttributes_withoutEnforcedAttributes", "primary_tested": ["Safelist.getEnforcedAttributes(String)"], "associated_methods": ["Attributes.isEmpty()"], "external_dependencies": {"modules": ["Safelist", "Attributes"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getEnforcedAttributes method when there are no enforced attributes."}, {"name": "testGetEnforcedAttributes_afterRemovingEnforcedAttribute", "primary_tested": ["Safelist.getEnforcedAttributes(String)"], "associated_methods": ["Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Safelist", "Attributes"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getEnforcedAttributes method after removing an enforced attribute."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeToIgnoreCaseTest.java", "testclass_name": "TokenQueue_consumeToIgnoreCaseTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_consumeToIgnoreCaseTest", "description": "Unit tests for the consumeToIgnoreCase method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConsumeToIgnoreCase_MatchFound", "primary_tested": ["TokenQueue.consumeToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeToIgnoreCase method when a match is found."}, {"name": "testConsumeToIgnoreCase_NoMatchFound", "primary_tested": ["TokenQueue.consumeToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeToIgnoreCase method when no match is found."}, {"name": "testConsumeToIgnoreCase_CaseInsensitiveMatch", "primary_tested": ["TokenQueue.consumeToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consumeToIgnoreCase method when a case-insensitive match is found."}, {"name": "testConsumeToIgnoreCase_EmptyQueue", "primary_tested": ["TokenQueue.consumeToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the consumeToIgnoreCase method when the queue is empty."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeIterator_hasNextTest.java", "testclass_name": "NodeIterator_hasNextTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeIterator_hasNextTest", "description": "Unit tests for the hasNext method of the NodeIterator class.", "class_members": {"variables": [{"name": "rootNode", "type": "Node"}, {"name": "nodeIterator", "type": "NodeIterator<Node>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithNextNode", "primary_tested": ["NodeIterator.hasNext()"], "external_dependencies": {"modules": ["NodeIterator", "Node"], "class_members": [{"name": "nodeIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when there is a next node available."}, {"name": "testHasNextWithoutNextNode", "primary_tested": ["NodeIterator.hasNext()"], "associated_methods": ["NodeIterator.next()"], "external_dependencies": {"modules": ["NodeIterator", "Node"], "class_members": [{"name": "nodeIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when there is no next node available after consuming all nodes."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_relaxedTest.java", "testclass_name": "Safelist_relaxedTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Attributes;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_relaxedTest", "description": "Unit tests for the relaxed Safelist functionality in Jsoup.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRelaxedSafelist_isSafeTag", "primary_tested": ["Safelist.isSafeTag(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isSafeTag method of the relaxed Safelist to ensure it correctly identifies safe and unsafe tags."}, {"name": "testRelaxedSafelist_isSafeAttribute", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "associated_methods": ["Attributes.put(Attribute)", "Element.Element(Tag,String,Attributes)"], "external_dependencies": {"modules": ["Safelist", "Attributes", "Attribute", "Element", "Tag"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isSafeAttribute method of the relaxed Safelist to ensure it correctly identifies safe and unsafe attributes."}, {"name": "testRelaxedSafelist_getEnforcedAttributes", "primary_tested": ["Safelist.getEnforcedAttributes(String)"], "associated_methods": ["Attributes.isEmpty()"], "external_dependencies": {"modules": ["Safelist", "Attributes"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getEnforcedAttributes method of the relaxed Safelist to ensure it returns the correct enforced attributes."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_addTagsTest.java", "testclass_name": "Safelist_addTagsTest", "dependencies": ["package org.jsoup.safety;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_addTagsTest", "description": "Unit tests for the Safelist class's addTags method.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddTags_ValidTags", "primary_tested": ["Safelist.addTags(String[])"], "associated_methods": ["Safelist.isSafeTag(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of valid tags to the Safelist."}, {"name": "testAddTags_NullTags", "primary_tested": ["Safelist.addTags(String[])"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when null tags are passed to the addTags method."}, {"name": "testAddTags_EmptyTag", "primary_tested": ["Safelist.addTags(String[])"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when an empty tag is passed to the addTags method."}, {"name": "testAddTags_NoscriptTag", "primary_tested": ["Safelist.addTags(String[])"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when the 'noscript' tag is passed to the addTags method."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_textTest.java", "testclass_name": "Element_textTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.select.NodeTraversor;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Element_textTest", "description": "Unit tests for the text functionality of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testText", "primary_tested": ["Element.text()"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the text extraction functionality of the Element class."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_basicWithImagesTest.java", "testclass_name": "Safelist_basicWithImagesTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Attributes;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_basicWithImagesTest", "description": "Tests for the Safelist class with basic image handling.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBasicWithImages_AddsImgTag", "primary_tested": ["Safelist.isSafeTag(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the 'img' tag is considered safe by the Safelist."}, {"name": "testBasicWithImages_AddsImgAttributes", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "associated_methods": ["Element.attributes()", "Attributes.put(String,String)", "Element.attributes().addAll(Attributes)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attributes", "Attribute", "Tag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the 'img' tag attributes are considered safe by the Safelist."}, {"name": "testBasicWithImages_AddsImgProtocols", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "associated_methods": ["Element.attributes()", "Attributes.put(String,String)", "Element.attributes().addAll(Attributes)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attributes", "Attribute", "Tag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the 'img' tag protocols (http, https) are considered safe by the Safelist."}, {"name": "testBasicWithImages_InvalidProtocol", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "associated_methods": ["Element.attributes()", "Attributes.put(String,String)", "Element.attributes().addAll(Attributes)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attributes", "Attribute", "Tag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if an invalid protocol (ftp) for the 'img' tag is considered unsafe by the Safelist."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_removeTagsTest.java", "testclass_name": "Safelist_removeTagsTest", "dependencies": ["package org.jsoup.safety;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_removeTagsTest", "description": "Unit tests for the removeTags method of the Safelist class.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveTags_ValidTags", "primary_tested": ["Safelist.removeTags(String[])"], "associated_methods": ["Safelist.isSafeTag(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of valid tags from the Safelist."}, {"name": "testRemoveTags_InvalidTags", "primary_tested": ["Safelist.removeTags(String[])"], "associated_methods": ["Safelist.isSafeTag(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of invalid tags from the Safelist."}, {"name": "testRemoveTags_NullTags", "primary_tested": ["Safelist.removeTags(String[])"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the removeTags method when null tags are provided."}, {"name": "testRemoveTags_EmptyTags", "primary_tested": ["Safelist.removeTags(String[])"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the removeTags method when empty tags are provided."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_prependTextTest.java", "testclass_name": "Element_prependTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_prependTextTest", "description": "Unit tests for the prependText method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPrependText", "primary_tested": ["Element.prependText(String)"], "associated_methods": ["Element.text()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prependText method with a valid string input."}, {"name": "testPrependTextNull", "primary_tested": ["Element.prependText(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prependText method with a null input, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_removeTest.java", "testclass_name": "Attributes_removeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_removeTest", "description": "Unit tests for the remove functionality of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["Attributes.remove(String)"], "associated_methods": ["Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the Attributes."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["Attributes.remove(String)"], "associated_methods": ["Attributes.size()"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the Attributes, ensuring the size does not change."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_charsetTest.java", "testclass_name": "Document_charsetTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import java.nio.charset.Charset;", "import java.nio.charset.StandardCharsets;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Document_charsetTest", "description": "Unit tests for the charset functionality in the Document class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCharset", "primary_tested": ["Document.charset(Charset)"], "associated_methods": ["Document.updateMetaCharsetElement(boolean)", "Document.outputSettings(Document.OutputSettings)", "Document.OutputSettings.charset(Charset)"], "external_dependencies": {"modules": ["Document", "Document.OutputSettings", "Charset", "StandardCharsets"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the charset setting and retrieval functionality of the Document class."}]}, {"file_path": "src/test/java/org/jsoup/nodes/FormElement_cloneTest.java", "testclass_name": "FormElement_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import org.jsoup.parser.Tag;"], "name": "FormElement_cloneTest", "description": "Unit tests for the clone functionality of the FormElement class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["FormElement.clone()"], "external_dependencies": {"modules": ["Tag", "Attributes", "FormElement"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the FormElement class, ensuring that the cloned object is not the same instance but has the same properties."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNode_textTest.java", "testclass_name": "TextNode_textTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TextNode_textTest", "description": "Unit tests for the TextNode class's text method.", "class_members": {"variables": [{"name": "textNode", "type": "TextNode"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testText_SetText_ReturnsSameInstance", "primary_tested": ["TextNode.text(String)"], "external_dependencies": {"modules": ["TextNode"], "class_members": [{"name": "textNode", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting text on a TextNode returns the same instance."}, {"name": "testText_SetText_UpdatesCoreValue", "primary_tested": ["TextNode.text(String)"], "associated_methods": ["TextNode.getWholeText()"], "external_dependencies": {"modules": ["TextNode"], "class_members": [{"name": "textNode", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting text on a TextNode updates the core value."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueue_chompBalancedTest.java", "testclass_name": "TokenQueue_chompBalancedTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueue_chompBalancedTest", "description": "Unit tests for the chompBalanced method in the TokenQueue class.", "class_members": {"variables": [{"name": "tokenQueue", "type": "TokenQueue"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testChompBalancedSimple", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with a simple balanced input."}, {"name": "testChompBalancedNested", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with nested balanced input."}, {"name": "testChompBalancedUnbalanced", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with unbalanced input, expecting an exception."}, {"name": "testChompBalancedWithQuotes", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with balanced input containing quotes."}, {"name": "testChompBalancedWithEscapes", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with balanced input containing escaped characters."}, {"name": "testChompBalancedEmpty", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with an empty input."}, {"name": "testChompBalancedNoMatch", "primary_tested": ["TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": [{"name": "tokenQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the chompBalanced method with input that does not contain the specified delimiters."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_normalizeTest.java", "testclass_name": "Attributes_normalizeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_normalizeTest", "description": "Unit tests for the normalize functionality of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNormalizeWithInternalKey", "primary_tested": ["Attributes.normalize()"], "associated_methods": ["Attributes.put(String,String)", "Attributes.get(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the normalization functionality of the Attributes class with an internal key."}, {"name": "testNormalizeWithNonInternalKey", "primary_tested": ["Attributes.normalize()"], "associated_methods": ["Attributes.put(String,String)", "Attributes.get(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the normalization functionality of the Attributes class with a non-internal key."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_titleTest.java", "testclass_name": "Document_titleTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Document_titleTest", "description": "Unit tests for the Document class's title method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTitle_withTitleElement", "primary_tested": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the title method of the Document class when a title element is present in the HTML."}, {"name": "testTitle_withoutTitleElement", "primary_tested": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the title method of the Document class when no title element is present in the HTML."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_addClassTest.java", "testclass_name": "Element_addClassTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_addClassTest", "description": "Unit tests for the addClass method in the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddClassSuccess", "primary_tested": ["Element.addClass(String)"], "associated_methods": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of a class to an Element."}, {"name": "testAddClassNull", "primary_tested": ["Element.addClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of null input when adding a class to an Element, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_lastElementSiblingTest.java", "testclass_name": "Element_lastElementSiblingTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_lastElementSiblingTest", "description": "Unit tests for the lastElementSibling method in the Element class.", "class_members": {"variables": [{"name": "parent", "type": "Element"}, {"name": "child1", "type": "Element"}, {"name": "child2", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLastElementSiblingWithParent", "primary_tested": ["Element.lastElementSibling()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "parent", "type": "variable"}, {"name": "child1", "type": "variable"}, {"name": "child2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastElementSibling method when the element has a parent."}, {"name": "testLastElementSiblingWithoutParent", "primary_tested": ["Element.lastElementSibling()"], "associated_methods": ["Element.remove()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "child1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastElementSibling method when the element does not have a parent."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_nodeNameTest.java", "testclass_name": "Document_nodeNameTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_nodeNameTest", "description": "Unit test for the nodeName method of the Document class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNodeName", "primary_tested": ["Document.nodeName()"], "external_dependencies": {"modules": ["Document"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the nodeName method of the Document class to ensure it returns '#document'."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_cloneTest.java", "testclass_name": "Attributes_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_cloneTest", "description": "Unit tests for the clone functionality of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClone", "primary_tested": ["Attributes.clone()"], "associated_methods": ["Attributes.size()", "Attributes.get(String)", "Attributes.put(String,String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the cloning functionality of the Attributes class, verifying that the clone is an independent copy and modifications to the original do not affect the clone."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_normalNameTest.java", "testclass_name": "Element_normalNameTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Element_normalNameTest", "description": "Unit tests for the normalName method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNormalName", "primary_tested": ["Element.normalName()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the normalName method of the Element class to ensure it returns the expected normalized tag name."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_getKeyTest.java", "testclass_name": "Attribute_getKeyTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_getKeyTest", "description": "Unit tests for the getKey method of the Attribute class.", "class_members": {"variables": [{"name": "attribute", "type": "Attribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetKey", "primary_tested": ["Attribute.getKey()"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getKey method of the Attribute class to ensure it returns the correct key."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNode_cloneTest.java", "testclass_name": "TextNode_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TextNode_cloneTest", "description": "Unit tests for the clone functionality of the TextNode class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["TextNode.clone()"], "associated_methods": ["TextNode.getWholeText()"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the TextNode, ensuring that the cloned object is not the same instance but has the same text content."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_appendChildTest.java", "testclass_name": "Element_appendChildTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_appendChildTest", "description": "Unit tests for the appendChild method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAppendChild", "primary_tested": ["Element.appendChild(Node)"], "associated_methods": ["Element.childNodeSize()", "Element.child(int)", "Node.parent()", "Node.siblingIndex()"], "external_dependencies": {"modules": ["Element", "Node"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the appendChild method to ensure the child node is added correctly and the method returns the correct element."}, {"name": "testAppendChildNull", "primary_tested": ["Element.appendChild(Node)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the appendChild method to ensure it throws an IllegalArgumentException when a null child is provided."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_cloneTest.java", "testclass_name": "Attribute_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_cloneTest", "description": "Unit tests for the clone functionality of the Attribute class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["Attribute.clone()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the Attribute class, ensuring that the cloned object is equal to the original and has the same hash code."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_parentTest.java", "testclass_name": "Element_parentTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_parentTest", "description": "Unit tests for the parent functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testParentWithParentNode", "primary_tested": ["Element.parent()"], "associated_methods": ["Element.parentNode"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parent functionality of the Element class when it has a parent node."}, {"name": "testParentWithoutParentNode", "primary_tested": ["Element.parent()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parent functionality of the Element class when it does not have a parent node."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_forEachNodeTest.java", "testclass_name": "Element_forEachNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.concurrent.atomic.AtomicInteger;", "import java.util.function.Consumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Element_forEachNodeTest", "description": "Unit tests for the forEachNode method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testForEachNode", "primary_tested": ["Element.forEachNode(Consumer<? super Node>)"], "associated_methods": ["Element.tagName()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "AtomicInteger", "Consumer"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the forEachNode method of the Element class to ensure it correctly iterates over child nodes and counts specific elements."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_putTest.java", "testclass_name": "Attributes_putTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_putTest", "description": "Unit tests for the put method of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewKey", "primary_tested": ["Attributes.put(String,String)"], "associated_methods": ["Attributes.get(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when adding a new key-value pair to the Attributes."}, {"name": "testPutExistingKey", "primary_tested": ["Attributes.put(String,String)"], "associated_methods": ["Attributes.get(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when updating an existing key-value pair in the Attributes."}, {"name": "testPutNullKey", "primary_tested": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method when attempting to add a null key, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_previousElementSiblingTest.java", "testclass_name": "Element_previousElementSiblingTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_previousElementSiblingTest", "description": "Unit tests for the previousElementSibling method in the Element class.", "class_members": {"variables": [{"name": "parent", "type": "Element"}, {"name": "child1", "type": "Element"}, {"name": "child2", "type": "Element"}]}, "test_cases": [{"name": "testPreviousElementSibling", "primary_tested": ["Element.previousElementSibling()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "parent", "type": "variable"}, {"name": "child1", "type": "variable"}, {"name": "child2", "type": "variable"}]}, "category": "unit", "description": "Tests that the previousElementSibling method returns the correct sibling element."}, {"name": "testPreviousElementSiblingNoSibling", "primary_tested": ["Element.previousElementSibling()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "parent", "type": "variable"}, {"name": "child1", "type": "variable"}]}, "category": "unit", "description": "Tests that the previousElementSibling method returns null when there is no previous sibling."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_nextElementSiblingTest.java", "testclass_name": "Element_nextElementSiblingTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_nextElementSiblingTest", "description": "Unit tests for the nextElementSibling method in the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}, {"name": "siblingElement", "type": "Element"}, {"name": "parentElement", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextElementSiblingWithNoSibling", "primary_tested": ["Element.nextElementSibling()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextElementSibling method when there is no sibling element."}, {"name": "testNextElementSiblingWithNonElementSibling", "primary_tested": ["Element.nextElementSibling()"], "external_dependencies": {"modules": ["Element", "Node", "TextNode"], "class_members": [{"name": "element", "type": "variable"}, {"name": "parentElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextElementSibling method when the sibling is a non-element node."}, {"name": "testNextElementSiblingWithElementSibling", "primary_tested": ["Element.nextElementSibling()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}, {"name": "siblingElement", "type": "variable"}, {"name": "parentElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextElementSibling method when there is an element sibling."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_removeEnforcedAttributeTest.java", "testclass_name": "Safelist_removeEnforcedAttributeTest", "dependencies": ["package org.jsoup.safety;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_removeEnforcedAttributeTest", "description": "Unit tests for the removal of enforced attributes in the Safelist class.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveEnforcedAttribute_ExistingAttribute", "primary_tested": ["Safelist.removeEnforcedAttribute(String,String)"], "associated_methods": ["Safelist.getEnforcedAttributes(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing enforced attribute from the Safelist."}, {"name": "testRemoveEnforcedAttribute_NonExistingAttribute", "primary_tested": ["Safelist.removeEnforcedAttribute(String,String)"], "associated_methods": ["Safelist.getEnforcedAttributes(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing enforced attribute from the Safelist."}, {"name": "testRemoveEnforcedAttribute_NonExistingTag", "primary_tested": ["Safelist.removeEnforcedAttribute(String,String)"], "associated_methods": ["Safelist.getEnforcedAttributes(String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an enforced attribute from a non-existing tag in the Safelist."}, {"name": "testRemoveEnforcedAttribute_EmptyTagAndAttribute", "primary_tested": ["Safelist.removeEnforcedAttribute(String,String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an enforced attribute with empty tag and attribute names, expecting an IllegalArgumentException."}, {"name": "testRemoveEnforcedAttribute_NullTagAndAttribute", "primary_tested": ["Safelist.removeEnforcedAttribute(String,String)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an enforced attribute with null tag and attribute names, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_documentTypeTest.java", "testclass_name": "Document_documentTypeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.Parser;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_documentTypeTest", "description": "Unit tests for the DocumentType functionality within the Document class.", "class_members": {"variables": [{"name": "document", "type": "Document"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testDocumentTypeFound", "primary_tested": ["Document.documentType()"], "external_dependencies": {"modules": ["Document", "DocumentType"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the document type is correctly found and returned when appended to the document."}, {"name": "testDocumentTypeNotFound", "primary_tested": ["Document.documentType()"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the document type is correctly identified as not found when no document type is appended."}, {"name": "testDocumentTypeFoundAfterLeafNode", "primary_tested": ["Document.documentType()"], "external_dependencies": {"modules": ["Document", "DocumentType", "TextNode"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the document type is correctly found and returned even when appended after a leaf node (text node)."}]}, {"file_path": "src/test/java/org/jsoup/parser/Tag_valueOfTest.java", "testclass_name": "Tag_valueOfTest", "dependencies": ["package org.jsoup.parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Tag_valueOfTest", "description": "Unit tests for the Tag.valueOf method in the Jsoup parser.", "class_members": {"variables": [{"name": "settings", "type": "ParseSettings"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValueOfKnownTag", "primary_tested": ["Tag.valueOf(String,String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings"], "class_members": [{"name": "settings", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the valueOf method for a known tag, ensuring the tag is created and has the correct name and namespace."}, {"name": "testValueOfUnknownTag", "primary_tested": ["Tag.valueOf(String,String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings"], "class_members": [{"name": "settings", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the valueOf method for an unknown tag, ensuring the tag is created and has the correct name, namespace, and block status."}, {"name": "testValueOfPreserveTagCase", "primary_tested": ["Tag.valueOf(String,String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings"], "class_members": [{"name": "settings", "type": "variable"}]}, "category": "unit", "description": "Tests the valueOf method with settings to preserve tag case, ensuring the tag is created and has the correct name and namespace."}, {"name": "testValueOfNormalizeTag", "primary_tested": ["Tag.valueOf(String,String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings"], "class_members": [{"name": "settings", "type": "variable"}]}, "category": "unit", "description": "Tests the valueOf method with settings to normalize the tag, ensuring the tag is created and has the correct name and namespace."}, {"name": "testValueOfInvalidTagName", "primary_tested": ["Tag.valueOf(String,String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings"], "class_members": [{"name": "settings", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the valueOf method with an invalid tag name, ensuring an IllegalArgumentException is thrown."}, {"name": "testValueOfInvalidNamespace", "primary_tested": ["Tag.valueOf(String,String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings"], "class_members": [{"name": "settings", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the valueOf method with an invalid namespace, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_tagNameTest.java", "testclass_name": "Element_tagNameTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_tagNameTest", "description": "Unit tests for the tagName functionality of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTagName", "primary_tested": ["Element.tagName(String,String)"], "associated_methods": ["Tag.getName()", "Tag.namespace()"], "external_dependencies": {"modules": ["Element", "Tag"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tagName functionality of the Element class, ensuring the tag name and namespace are correctly set and retrieved."}, {"name": "testTagNameWithEmptyTagName", "primary_tested": ["Element.tagName(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tagName functionality of the Element class with an empty tag name, expecting an IllegalArgumentException."}, {"name": "testTagNameWithEmptyNamespace", "primary_tested": ["Element.tagName(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tagName functionality of the Element class with an empty namespace, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_elementSiblingIndexTest.java", "testclass_name": "Element_elementSiblingIndexTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "Element_elementSiblingIndexTest", "description": "Unit tests for the elementSiblingIndex method in the Element class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testElementSiblingIndex_NoParent", "primary_tested": ["Element.elementSiblingIndex()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "description": "Tests the elementSiblingIndex method when the element has no parent."}, {"name": "testElementSiblingIndex_WithParent", "primary_tested": ["Element.elementSiblingIndex()"], "associated_methods": ["Element.appendChild(Element)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "parent", "type": "variable"}, {"name": "child", "type": "variable"}]}, "category": "unit", "description": "Tests the elementSiblingIndex method when the element has a parent."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByAttributeTest.java", "testclass_name": "Element_getElementsByAttributeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementsByAttributeTest", "description": "Unit tests for the getElementsByAttribute method in the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetElementsByAttribute", "primary_tested": ["Element.getElementsByAttribute(String)"], "associated_methods": ["Elements.size()", "Elements.first()", "Element.attr(String)"], "external_dependencies": {"modules": ["Element", "Elements", "Document", "Jsoup"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementsByAttribute method to ensure it correctly retrieves elements by attribute and checks the attribute value."}, {"name": "testGetElementsByAttributeEmptyKey", "primary_tested": ["Element.getElementsByAttribute(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementsByAttribute method with an empty attribute key to ensure it throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_removeAttributesTest.java", "testclass_name": "Safelist_removeAttributesTest", "dependencies": ["package org.jsoup.safety;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import org.jsoup.nodes.Attribute;"], "name": "Safelist_removeAttributesTest", "description": "Unit tests for the removeAttributes method in the Safelist class.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAttributes_SingleTag", "primary_tested": ["Safelist.removeAttributes(String,String...)"], "associated_methods": ["Safelist.isSafeAttribute(String,String,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a single attribute from a specific tag."}, {"name": "testRemoveAttributes_AllTags", "primary_tested": ["Safelist.removeAttributes(String,String...)"], "associated_methods": ["Safelist.isSafeAttribute(String,String,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an attribute from all tags."}, {"name": "testRemoveAttributes_TagNotAllowed", "primary_tested": ["Safelist.removeAttributes(String,String...)"], "associated_methods": ["Safelist.isSafeAttribute(String,String,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an attribute from a tag that is not allowed."}, {"name": "testRemoveAttributes_NoAttributesSupplied", "primary_tested": ["Safelist.removeAttributes(String,String...)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when no attributes are supplied for removal."}, {"name": "testRemoveAttributes_EmptyTag", "primary_tested": ["Safelist.removeAttributes(String,String...)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when an empty tag is supplied for attribute removal."}, {"name": "testRemoveAttributes_NullAttributes", "primary_tested": ["Safelist.removeAttributes(String,String...)"], "external_dependencies": {"modules": ["Safelist"], "class_members": [{"name": "safelist", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when null attributes are supplied for removal."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_sizeTest.java", "testclass_name": "Attributes_sizeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_sizeTest", "description": "Unit tests for the size functionality of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeEmpty", "primary_tested": ["Attributes.size()"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of an empty Attributes object."}, {"name": "testSizeAfterAdd", "primary_tested": ["Attributes.size()"], "associated_methods": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the Attributes object after adding an attribute."}, {"name": "testSizeAfterRemove", "primary_tested": ["Attributes.size()"], "associated_methods": ["Attributes.put(String,String)", "Attributes.remove(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the Attributes object after adding and then removing an attribute."}, {"name": "testSizeAfterAddAll", "primary_tested": ["Attributes.size()"], "associated_methods": ["Attributes.put(String,String)", "Attributes.addAll(Attributes)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the Attributes object after adding multiple attributes using addAll."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_hasDeclaredValueForKeyTest.java", "testclass_name": "Attributes_hasDeclaredValueForKeyTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_hasDeclaredValueForKeyTest", "description": "Unit tests for the hasDeclaredValueForKey method in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasDeclaredValueForKey_KeyExistsWithValue", "primary_tested": ["Attributes.hasDeclaredValueForKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasDeclaredValueForKey method when the key exists with a value."}, {"name": "testHasDeclaredValueForKey_KeyExistsWithoutValue", "primary_tested": ["Attributes.hasDeclaredValueForKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasDeclaredValueForKey method when the key exists without a value."}, {"name": "testHasDeclaredValueForKey_KeyDoesNotExist", "primary_tested": ["Attributes.hasDeclaredValueForKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasDeclaredValueForKey method when the key does not exist."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_headTest.java", "testclass_name": "Document_headTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_headTest", "description": "Unit tests for the head element functionality in the Document class.", "class_members": {"variables": [{"name": "document", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadElementPresent", "primary_tested": ["Document.head()"], "associated_methods": ["Document.appendElement(String)", "Element.appendElement(String)", "Element.tagName()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the head element is correctly returned when it already exists in the document."}, {"name": "testHeadElementCreated", "primary_tested": ["Document.head()"], "associated_methods": ["Document.appendElement(String)", "Element.tagName()", "Element.children()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a new head element is created and returned when it does not already exist in the document."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DataNode_setWholeDataTest.java", "testclass_name": "DataNode_setWholeDataTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DataNode_setWholeDataTest", "description": "Unit test for the setWholeData method of the DataNode class.", "class_members": {"variables": [{"name": "dataNode", "type": "DataNode"}]}, "test_cases": [{"name": "testSetWholeData", "primary_tested": ["DataNode.setWholeData(String)"], "associated_methods": ["DataNode.getWholeData()"], "external_dependencies": {"modules": ["DataNode"], "class_members": [{"name": "dataNode", "type": "variable"}]}, "category": "unit", "description": "Tests the setWholeData method of the DataNode class, ensuring that the data is correctly updated and retrieved."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_connectionTest.java", "testclass_name": "Document_connectionTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;"], "name": "Document_connectionTest", "description": "Unit tests for the connection method in the Document class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testConnection_WhenConnectionIsNull", "primary_tested": ["Document.connection()"], "external_dependencies": {"modules": ["Document", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the connection method when the connection is initially null."}, {"name": "testConnection_WhenConnectionIsNotNull", "primary_tested": ["Document.connection()"], "associated_methods": ["Document.connection(Connection)"], "external_dependencies": {"modules": ["Document", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the connection method when the connection is not null."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_lastElementChildTest.java", "testclass_name": "Element_lastElementChildTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_lastElementChildTest", "description": "Unit tests for the lastElementChild method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLastElementChildWithNoChildren", "primary_tested": ["Element.lastElementChild()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastElementChild method when the element has no children."}, {"name": "testLastElementChildWithNonElementChildren", "primary_tested": ["Element.lastElementChild()"], "associated_methods": ["Element.appendChild(TextNode)"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastElementChild method when the element has non-element children (TextNodes)."}, {"name": "testLastElementChildWithElementChildren", "primary_tested": ["Element.lastElementChild()"], "associated_methods": ["Element.appendChild(Element)", "Element.appendChild(TextNode)"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastElementChild method when the element has both element and non-element children."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_createFromEncodedTest.java", "testclass_name": "Attribute_createFromEncodedTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Attribute_createFromEncodedTest", "description": "Unit tests for the Attribute.createFromEncoded method.", "class_members": {"variables": [{"name": "unencodedKey", "type": "String"}, {"name": "encodedValue", "type": "String"}, {"name": "attribute", "type": "Attribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCreateFromEncoded", "primary_tested": ["Attribute.createFromEncoded(String,String)"], "associated_methods": ["Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "unencodedKey", "type": "variable"}, {"name": "encodedValue", "type": "variable"}, {"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of an Attribute from encoded values and verifies the key and value of the created Attribute."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_parentsTest.java", "testclass_name": "Element_parentsTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_parentsTest", "description": "Unit tests for the parents functionality of the Element class in Jsoup.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testParents", "primary_tested": ["Element.parents()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parents functionality of the Element class, ensuring the correct number and tag names of parent elements."}, {"name": "testParentsWithRoot", "primary_tested": ["Element.parents()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the parents functionality of the Element class with a root element, ensuring the correct number and tag names of parent elements."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_siblingElementsTest.java", "testclass_name": "Element_siblingElementsTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "Element_siblingElementsTest", "description": "Unit tests for the siblingElements method of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSiblingElements_NoParent", "primary_tested": ["Element.siblingElements()"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the siblingElements method when the element has no parent."}, {"name": "testSiblingElements_WithParent", "primary_tested": ["Element.siblingElements()"], "associated_methods": ["Element.appendChild(Element)"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the siblingElements method when the element has a parent with other child elements."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_ownTextTest.java", "testclass_name": "Element_ownTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_ownTextTest", "description": "Unit tests for the ownText method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOwnText", "primary_tested": ["Element.ownText()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the ownText method when text is directly appended to the element."}, {"name": "testOwnTextWithChildElements", "primary_tested": ["Element.ownText()"], "associated_methods": ["Element.appendChild(Element)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the ownText method when the element has child elements with text."}, {"name": "testOwnTextWithNoText", "primary_tested": ["Element.ownText()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the ownText method when no text is appended to the element."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_cloneTest.java", "testclass_name": "Element_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_cloneTest", "description": "Unit tests for the clone functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClone", "primary_tested": ["Element.clone()"], "associated_methods": ["Element.tagName()", "Element.childNodeSize()", "Element.child(int)", "Element.outerHtml()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Element class, ensuring that the cloned element is a different instance but has the same tag name, child nodes, and their content."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_childNodeSizeTest.java", "testclass_name": "Element_childNodeSizeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Element_childNodeSizeTest", "description": "Unit tests for the childNodeSize method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "test_cases": [{"name": "testChildNodeSize", "primary_tested": ["Element.childNodeSize()"], "associated_methods": ["Element.ensureChildNodes()", "Element.appendChild(TextNode)"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "description": "Tests the childNodeSize method of the Element class by ensuring child nodes are initialized and appending a child node, then verifying the count of child nodes."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_prependTest.java", "testclass_name": "Element_prependTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_prependTest", "description": "Unit tests for the prepend functionality of the Element class in Jsoup.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPrependValidHtml", "primary_tested": ["Element.prepend(String)"], "associated_methods": ["Element.childNodeSize()", "Element.child(int)", "Node.nodeName()", "Node.childNode(int)"], "external_dependencies": {"modules": ["Element", "Node"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prepend functionality of the Element class with valid HTML."}, {"name": "testPrependNullHtml", "primary_tested": ["Element.prepend(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prepend functionality of the Element class with null HTML, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeIterator_nextTest.java", "testclass_name": "NodeIterator_nextTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Node;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeIterator_nextTest", "description": "Unit tests for the NodeIterator's next method.", "class_members": {"variables": [{"name": "html", "type": "String"}, {"name": "doc", "type": "Document"}, {"name": "it", "type": "NodeIterator<Node>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["NodeIterator.next()"], "associated_methods": ["NodeIterator.hasNext()", "Document.childNode(int)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator"], "class_members": [{"name": "doc", "type": "variable"}, {"name": "it", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration over nodes using the NodeIterator's next method."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["NodeIterator.next()"], "associated_methods": ["NodeIterator.hasNext()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator"], "class_members": [{"name": "doc", "type": "variable"}, {"name": "it", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the NodeIterator's next method throws a NoSuchElementException when there are no more elements to iterate over."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_forEachTest.java", "testclass_name": "Element_forEachTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.concurrent.atomic.AtomicBoolean;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_forEachTest", "description": "Unit tests for the forEach functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testForEach", "primary_tested": ["Element.forEach(Consumer<? super Element>)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "AtomicBoolean"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the forEach method of the Element class to ensure it iterates over child elements and sets the visited flag."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_addAllTest.java", "testclass_name": "Attributes_addAllTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_addAllTest", "description": "Unit tests for the addAll method of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithEmptyAttributes", "primary_tested": ["Attributes.addAll(Attributes)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method when adding empty attributes to an existing empty attributes object."}, {"name": "testAddAllWithNonEmptyAttributes", "primary_tested": ["Attributes.addAll(Attributes)"], "associated_methods": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method when adding non-empty attributes to an existing empty attributes object."}, {"name": "testAddAllWithExistingAttributes", "primary_tested": ["Attributes.addAll(Attributes)"], "associated_methods": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.get(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll method when adding attributes to an existing non-empty attributes object."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_appendToTest.java", "testclass_name": "Element_appendToTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_appendToTest", "description": "Unit tests for the appendTo functionality of the Element class.", "class_members": {"variables": [{"name": "parent", "type": "Element"}, {"name": "child", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAppendToSuccess", "primary_tested": ["Element.appendTo(Element)"], "associated_methods": ["Element.childNodeSize()", "Element.child(int)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "parent", "type": "variable"}, {"name": "child", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful appending of a child element to a parent element."}, {"name": "testAppendToNullParent", "primary_tested": ["Element.appendTo(Element)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "child", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to append a child element to a null parent, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_appendElementTest.java", "testclass_name": "Element_appendElementTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_appendElementTest", "description": "Unit tests for the appendElement method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAppendElement", "primary_tested": ["Element.appendElement(String,String)"], "associated_methods": ["Element.childNodeSize()", "Element.tagName()", "Tag.namespace()"], "external_dependencies": {"modules": ["Element", "Tag"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the appendElement method of the Element class, ensuring that a new child element is correctly appended and its properties are as expected."}]}, {"file_path": "src/test/java/org/jsoup/nodes/FormElement_formDataTest.java", "testclass_name": "FormElement_formDataTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.HttpConnection;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FormElement_formDataTest", "description": "Unit tests for the formData method of the FormElement class, which extracts form data from various HTML elements.", "class_members": {"variables": [{"name": "formElement", "type": "FormElement"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFormDataWithInputElements", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Connection.KeyVal"], "class_members": [{"name": "formElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formData method with input elements, ensuring it correctly extracts key-value pairs from input fields."}, {"name": "testFormDataWithSelectElement", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Connection.KeyVal"], "class_members": [{"name": "formElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formData method with a select element, ensuring it correctly extracts the selected option's value."}, {"name": "testFormDataWithCheckboxElement", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Connection.KeyVal"], "class_members": [{"name": "formElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formData method with a checkbox element, ensuring it correctly extracts the value if the checkbox is checked."}, {"name": "testFormDataWithDisabledElement", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Connection.KeyVal"], "class_members": [{"name": "formElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formData method with a disabled input element, ensuring it does not extract any data from disabled fields."}, {"name": "testFormDataWithButtonElement", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Connection.KeyVal"], "class_members": [{"name": "formElement", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formData method with a button element, ensuring it does not extract any data from button elements."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsMatchingOwnTextTest.java", "testclass_name": "Element_getElementsMatchingOwnTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import org.jsoup.select.Elements;", "import java.util.regex.PatternSyntaxException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementsMatchingOwnTextTest", "description": "Unit tests for the getElementsMatchingOwnText method of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetElementsMatchingOwnText_ValidRegex", "primary_tested": ["Element.getElementsMatchingOwnText(String)"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getElementsMatchingOwnText method with a valid regex pattern."}, {"name": "testGetElementsMatchingOwnText_InvalidRegex", "primary_tested": ["Element.getElementsMatchingOwnText(String)"], "external_dependencies": {"modules": ["Element", "IllegalArgumentException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getElementsMatchingOwnText method with an invalid regex pattern, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/safety/Safelist_isSafeAttributeTest.java", "testclass_name": "Safelist_isSafeAttributeTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Safelist_isSafeAttributeTest", "description": "Unit tests for the Safelist class's isSafeAttribute method.", "class_members": {"variables": [{"name": "safelist", "type": "Safelist"}, {"name": "element", "type": "Element"}, {"name": "validAttribute", "type": "Attribute"}, {"name": "invalidAttribute", "type": "Attribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsSafeAttribute_validAttribute", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}, {"name": "element", "type": "variable"}, {"name": "validAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a valid attribute is recognized as safe by the Safelist."}, {"name": "testIsSafeAttribute_invalidAttribute", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}, {"name": "element", "type": "variable"}, {"name": "invalidAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an invalid attribute is recognized as unsafe by the Safelist."}, {"name": "testIsSafeAttribute_enforcedAttribute", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "associated_methods": ["Safelist.addEnforcedAttribute(String,String,String)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}, {"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an enforced attribute is recognized as safe by the Safelist."}, {"name": "testIsSafeAttribute_noAttributesDefined", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attribute"], "class_members": [{"name": "element", "type": "variable"}, {"name": "validAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an attribute is recognized as unsafe when no attributes are defined in the Safelist."}, {"name": "testIsSafeAttribute_allTag", "primary_tested": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "associated_methods": ["Safelist.addAttributes(String,String)"], "external_dependencies": {"modules": ["Safelist", "Element", "Attribute"], "class_members": [{"name": "safelist", "type": "variable"}, {"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an attribute is recognized as safe when added to all tags in the Safelist."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_hashCodeTest.java", "testclass_name": "Attribute_hashCodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Objects;"], "name": "Attribute_hashCodeTest", "description": "Unit tests for the hashCode method of the Attribute class.", "class_members": {"variables": [{"name": "attribute", "type": "Attribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCode", "primary_tested": ["Attribute.hashCode()"], "external_dependencies": {"modules": ["Attribute", "Objects"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of the Attribute class with a non-null value."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["Attribute.hashCode()"], "external_dependencies": {"modules": ["Attribute", "Objects"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of the Attribute class with a null value."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_expectFormTest.java", "testclass_name": "Document_expectFormTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_expectFormTest", "description": "Unit tests for the expectForm method in the Document class.", "class_members": {"variables": [{"name": "document", "type": "Document"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testExpectFormSuccess", "primary_tested": ["Document.expectForm(String)"], "external_dependencies": {"modules": ["Document", "FormElement"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of a form element using the expectForm method."}, {"name": "testExpectFormValidationFailed", "primary_tested": ["Document.expectForm(String)"], "external_dependencies": {"modules": ["Document", "FormElement"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation failure scenario when the expectForm method is called with a non-form element selector."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_getIgnoreCaseTest.java", "testclass_name": "Attributes_getIgnoreCaseTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_getIgnoreCaseTest", "description": "Unit tests for the getIgnoreCase method in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIgnoreCase_KeyExists", "primary_tested": ["Attributes.getIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIgnoreCase method when the key exists in the Attributes object."}, {"name": "testGetIgnoreCase_KeyDoesNotExist", "primary_tested": ["Attributes.getIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIgnoreCase method when the key does not exist in the Attributes object."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_prependChildTest.java", "testclass_name": "Element_prependChildTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_prependChildTest", "description": "Unit tests for the prependChild method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPrependChild", "primary_tested": ["Element.prependChild(Node)"], "associated_methods": ["Element.child(int)"], "external_dependencies": {"modules": ["Element", "Node"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prependChild method by adding a child node and verifying its position."}, {"name": "testPrependChildNull", "primary_tested": ["Element.prependChild(Node)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the prependChild method's handling of null input, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByAttributeStartingTest.java", "testclass_name": "Element_getElementsByAttributeStartingTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementsByAttributeStartingTest", "description": "Unit tests for the getElementsByAttributeStarting method in the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetElementsByAttributeStarting", "primary_tested": ["Element.getElementsByAttributeStarting(String)"], "associated_methods": ["Elements.size()", "Elements.get(int)", "Element.attr(String)"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of getting elements by attribute starting with a specific prefix."}, {"name": "testGetElementsByAttributeStarting_EmptyPrefix", "primary_tested": ["Element.getElementsByAttributeStarting(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalArgumentException is thrown when an empty prefix is provided."}, {"name": "testGetElementsByAttributeStarting_NullPrefix", "primary_tested": ["Element.getElementsByAttributeStarting(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalArgumentException is thrown when a null prefix is provided."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByClassTest.java", "testclass_name": "Element_getElementsByClassTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementsByClassTest", "description": "Unit tests for the getElementsByClass method in the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetElementsByClass", "primary_tested": ["Element.getElementsByClass(String)"], "external_dependencies": {"modules": ["Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the functionality of getting elements by class name."}, {"name": "testGetElementsByClass_EmptyClassName", "primary_tested": ["Element.getElementsByClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "description": "Tests the behavior of getElementsByClass method when an empty class name is provided, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtil_resolveTest.java", "testclass_name": "StringUtil_resolveTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import java.net.MalformedURLException;", "import java.net.URL;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtil_resolveTest", "description": "Unit tests for the StringUtil.resolve method, which resolves relative URLs against a base URL.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testResolveWithRelativeUrl", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL against a base URL."}, {"name": "testResolveWithQueryParams", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL with query parameters against a base URL."}, {"name": "testResolveWithFragment", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL with a fragment against a base URL."}, {"name": "testResolveWithControlChars", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL containing control characters against a base URL."}, {"name": "testResolveWithEmptyRelativeUrl", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving an empty relative URL against a base URL."}, {"name": "testResolveWithAbsolutePath", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving an absolute path relative URL against a base URL."}, {"name": "testResolveWithDifferentProtocol", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL with a different protocol against a base URL."}, {"name": "testResolveWithDifferentHost", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL with a different host against a base URL."}, {"name": "testResolveWithDifferentPort", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL with a different port against a base URL."}, {"name": "testResolveWithDotSegments", "primary_tested": ["StringUtil.resolve(URL,String)"], "external_dependencies": {"modules": ["URL", "StringUtil"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests resolving a relative URL with dot segments against a base URL."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DocumentType_nodeNameTest.java", "testclass_name": "DocumentType_nodeNameTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "DocumentType_nodeNameTest", "description": "Unit tests for the nodeName method of the DocumentType class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNodeName", "primary_tested": ["DocumentType.nodeName()"], "external_dependencies": {"modules": ["DocumentType"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the nodeName method of the DocumentType class."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_getValueTest.java", "testclass_name": "Attribute_getValueTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_getValueTest", "description": "Unit tests for the getValue method of the Attribute class.", "class_members": {"variables": [{"name": "attribute", "type": "Attribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValueWithNonNullValue", "primary_tested": ["Attribute.getValue()"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValue method of the Attribute class when the value is non-null."}, {"name": "testGetValueWithNullValue", "primary_tested": ["Attribute.getValue()"], "associated_methods": ["Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValue method of the Attribute class when the value is null."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByAttributeValueMatchingTest.java", "testclass_name": "Element_getElementsByAttributeValueMatchingTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Element_getElementsByAttributeValueMatchingTest", "description": "Unit tests for the getElementsByAttributeValueMatching method in the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetElementsByAttributeValueMatching", "primary_tested": ["Element.getElementsByAttributeValueMatching(String,Pattern)"], "external_dependencies": {"modules": ["Element", "Pattern", "Elements"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of retrieving elements by attribute value matching using a pattern."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_outerHtmlTest.java", "testclass_name": "Document_outerHtmlTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Document_outerHtmlTest", "description": "Unit tests for the outerHtml functionality of the Document class in Jsoup.", "class_members": {"variables": [{"name": "document", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOuterHtml", "primary_tested": ["Document.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the outerHtml functionality of the Document class, ensuring it returns the correct HTML string."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_filterTest.java", "testclass_name": "Element_filterTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.select.NodeFilter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Element_filterTest", "description": "Unit tests for the filter functionality of the Element class in Jsoup.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFilter", "primary_tested": ["Element.filter(NodeFilter)"], "associated_methods": ["Element.tagName()", "Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "NodeFilter", "FilterResult"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the filter functionality of the Element class, ensuring that the filter method correctly processes and returns the filtered element."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_classNamesTest.java", "testclass_name": "Element_classNamesTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Set;"], "name": "Element_classNamesTest", "description": "Unit tests for the classNames functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClassNamesWithSingleClass", "primary_tested": ["Element.classNames()"], "associated_methods": ["Element.addClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the classNames method with a single class added to the Element."}, {"name": "testClassNamesWithMultipleClasses", "primary_tested": ["Element.classNames()"], "associated_methods": ["Element.addClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the classNames method with multiple classes added to the Element."}, {"name": "testClassNamesWithEmptyClass", "primary_tested": ["Element.classNames()"], "associated_methods": ["Element.addClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the classNames method with an empty class added to the Element."}, {"name": "testClassNamesWithWhitespaceClass", "primary_tested": ["Element.classNames()"], "associated_methods": ["Element.addClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the classNames method with a class containing only whitespace added to the Element."}, {"name": "testClassNamesWithMixedClasses", "primary_tested": ["Element.classNames()"], "associated_methods": ["Element.addClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the classNames method with a mix of valid and invalid classes added to the Element."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_sourceRangeTest.java", "testclass_name": "Attribute_sourceRangeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "Attribute_sourceRangeTest", "description": "Unit tests for the sourceRange functionality of the Attribute class.", "class_members": {"variables": [{"name": "attribute", "type": "Attribute"}, {"name": "parent", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSourceRangeWithParent", "primary_tested": ["Attribute.sourceRange()"], "associated_methods": ["Attributes.sourceRange(String)"], "external_dependencies": {"modules": ["Attribute", "Attributes", "Range.AttributeRange"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the sourceRange functionality of the Attribute class when it has a parent."}, {"name": "testSourceRangeWithoutParent", "primary_tested": ["Attribute.sourceRange()"], "external_dependencies": {"modules": ["Attribute", "Range.AttributeRange"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the sourceRange functionality of the Attribute class when it does not have a parent."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_emptyTest.java", "testclass_name": "Element_emptyTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_emptyTest", "description": "Unit tests for the empty method of the Element class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEmptyWithChildren", "primary_tested": ["Element.empty()"], "associated_methods": ["Element.appendChild(Node)", "Element.childNodes.isEmpty()"], "external_dependencies": {"modules": ["Element", "Node", "TextNode"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the empty method of the Element class when the element has children. Verifies that the children are removed and their parent nodes are set to null."}, {"name": "testEmptyWithoutChildren", "primary_tested": ["Element.empty()"], "associated_methods": ["Element.childNodes.isEmpty()"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the empty method of the Element class when the element has no children. Verifies that the element's child nodes list remains empty."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_valTest.java", "testclass_name": "Element_valTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.jsoup.parser.Parser.NamespaceHtml;"], "name": "Element_valTest", "description": "Unit tests for the val() method in the Element class, specifically for textarea and non-textarea elements.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testVal_textarea", "primary_tested": ["Element.val()"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the val() method for a textarea element, ensuring it returns the correct text value."}, {"name": "testVal_nonTextarea", "primary_tested": ["Element.val()"], "external_dependencies": {"modules": ["Element"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the val() method for a non-textarea element (input), ensuring it returns the correct attribute value."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_iteratorTest.java", "testclass_name": "Attributes_iteratorTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ConcurrentModificationException;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_iteratorTest", "description": "Unit tests for the iterator functionality of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorHasNext", "primary_tested": ["Attributes.iterator()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method of the iterator for the Attributes class."}, {"name": "testIteratorNext", "primary_tested": ["Attributes.iterator()"], "associated_methods": ["Iterator.next()", "Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of the iterator for the Attributes class."}, {"name": "testIteratorNextThrowsNoSuchElementException", "primary_tested": ["Attributes.iterator()"], "associated_methods": ["Iterator.next()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator", "NoSuchElementException"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of the iterator throws NoSuchElementException when there are no more elements."}, {"name": "testIteratorRemove", "primary_tested": ["Attributes.iterator()"], "associated_methods": ["Iterator.next()", "Iterator.remove()", "Attributes.size()", "Attributes.iterator()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove method of the iterator for the Attributes class."}, {"name": "testIteratorConcurrentModificationException", "primary_tested": ["Attributes.iterator()"], "associated_methods": ["Attributes.put(String,String)", "Iterator.next()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator", "ConcurrentModificationException"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator throws ConcurrentModificationException when the Attributes collection is modified during iteration."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByTagTest.java", "testclass_name": "Element_getElementsByTagTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementsByTagTest", "description": "Unit tests for the getElementsByTag method of the Element class in Jsoup.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetElementsByTag", "primary_tested": ["Element.getElementsByTag(String)"], "external_dependencies": {"modules": ["Element", "Elements", "Document", "Jsoup"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementsByTag method to ensure it correctly retrieves elements by tag name and checks their text content."}, {"name": "testGetElementsByTagWithEmptyTagName", "primary_tested": ["Element.getElementsByTag(String)"], "external_dependencies": {"modules": ["Element", "Document", "Jsoup"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementsByTag method with an empty tag name to ensure it throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Comment_setDataTest.java", "testclass_name": "Comment_setDataTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Comment_setDataTest", "description": "Unit tests for the setData method of the Comment class.", "class_members": {"variables": [{"name": "comment", "type": "Comment"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetData", "primary_tested": ["Comment.setData(String)"], "associated_methods": ["Comment.getData()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setData method of the Comment class, ensuring that the data is correctly set and retrieved, and that the same instance is returned."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_hasDeclaredValueForKeyIgnoreCaseTest.java", "testclass_name": "Attributes_hasDeclaredValueForKeyIgnoreCaseTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_hasDeclaredValueForKeyIgnoreCaseTest", "description": "Unit tests for checking if an attribute has a declared value for a key, ignoring case.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasDeclaredValueForKeyIgnoreCase_ValueExists", "primary_tested": ["Attributes.hasDeclaredValueForKeyIgnoreCase(String)"], "associated_methods": ["Attributes.putIgnoreCase(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the method correctly identifies the existence of a declared value for a key, ignoring case, when the value exists."}, {"name": "testHasDeclaredValueForKeyIgnoreCase_ValueDoesNotExist", "primary_tested": ["Attributes.hasDeclaredValueForKeyIgnoreCase(String)"], "associated_methods": ["Attributes.putIgnoreCase(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the method correctly identifies the absence of a declared value for a key, ignoring case, when the value does not exist."}, {"name": "testHasDeclaredValueForKeyIgnoreCase_KeyDoesNotExist", "primary_tested": ["Attributes.hasDeclaredValueForKeyIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the method correctly identifies the absence of a declared value for a key, ignoring case, when the key does not exist."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_removeIgnoreCaseTest.java", "testclass_name": "Attributes_removeIgnoreCaseTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_removeIgnoreCaseTest", "description": "Unit tests for the removeIgnoreCase method in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIgnoreCase_KeyExists", "primary_tested": ["Attributes.removeIgnoreCase(String)"], "associated_methods": ["Attributes.putIgnoreCase(String,String)", "Attributes.hasKeyIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIgnoreCase method when the key exists in the Attributes."}, {"name": "testRemoveIgnoreCase_KeyDoesNotExist", "primary_tested": ["Attributes.removeIgnoreCase(String)"], "associated_methods": ["Attributes.putIgnoreCase(String,String)", "Attributes.hasKeyIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIgnoreCase method when the key does not exist in the Attributes."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_firstElementChildTest.java", "testclass_name": "Element_firstElementChildTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_firstElementChildTest", "description": "Unit tests for the firstElementChild method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFirstElementChildWithElement", "primary_tested": ["Element.firstElementChild()"], "associated_methods": ["Element.appendChild(Element)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstElementChild method when an Element child is present."}, {"name": "testFirstElementChildWithNonElement", "primary_tested": ["Element.firstElementChild()"], "associated_methods": ["Element.appendChild(TextNode)"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstElementChild method when a non-Element child (TextNode) is present."}, {"name": "testFirstElementChildWithMixedChildren", "primary_tested": ["Element.firstElementChild()"], "associated_methods": ["Element.appendChild(TextNode)", "Element.appendChild(Element)"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstElementChild method when both Element and non-Element children are present."}, {"name": "testFirstElementChildWithNoChildren", "primary_tested": ["Element.firstElementChild()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the firstElementChild method when no children are present."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_setValueTest.java", "testclass_name": "Attribute_setValueTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_setValueTest", "description": "Unit tests for the setValue method in the Attribute class.", "class_members": {"variables": [{"name": "attribute", "type": "Attribute"}, {"name": "parent", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetValueWithParent", "primary_tested": ["Attribute.setValue(String)"], "associated_methods": ["Attributes.get(String)", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attribute", "Attributes"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method when the Attribute has a parent."}, {"name": "testSetValueWithoutParent", "primary_tested": ["Attribute.setValue(String)"], "associated_methods": ["Attribute.getValue()"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method when the Attribute does not have a parent."}, {"name": "testSetValueWithNonExistentKey", "primary_tested": ["Attribute.setValue(String)"], "associated_methods": ["Attributes.remove(String)", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attribute", "Attributes"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method when the key does not exist in the parent."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_firstElementSiblingTest.java", "testclass_name": "Element_firstElementSiblingTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_firstElementSiblingTest", "description": "Unit tests for the firstElementSibling functionality of the Element class.", "class_members": {"variables": [{"name": "parent", "type": "Element"}, {"name": "child1", "type": "Element"}, {"name": "child2", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLastElementSiblingWithParent", "primary_tested": ["Element.lastElementSibling()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "parent", "type": "variable"}, {"name": "child1", "type": "variable"}, {"name": "child2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the lastElementSibling functionality with a parent element."}, {"name": "testLastElementSiblingOrphan", "primary_tested": ["Element.lastElementSibling()"], "external_dependencies": {"modules": ["Element"]}, "category": "unit", "description": "Tests the lastElementSibling functionality with an orphan element."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_asListTest.java", "testclass_name": "Attributes_asListTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_asListTest", "description": "Unit tests for the asList method of the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAsListWithNormalKeys", "primary_tested": ["Attributes.asList()"], "associated_methods": ["Attributes.put(String,String)", "Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "List"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asList method with normal keys in the Attributes object."}, {"name": "testAsListWithInternalKeys", "primary_tested": ["Attributes.asList()"], "associated_methods": ["Attributes.put(String,String)", "Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "List"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asList method with internal keys in the Attributes object."}, {"name": "testAsListWithEmptyAttributes", "primary_tested": ["Attributes.asList()"], "external_dependencies": {"modules": ["Attributes", "List"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asList method with an empty Attributes object."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_sourceRangeTest.java", "testclass_name": "Attributes_sourceRangeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import org.jsoup.nodes.Range.AttributeRange;", "import java.util.HashMap;", "import java.util.Map;"], "name": "Attributes_sourceRangeTest", "description": "Unit tests for the sourceRange method in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}, {"name": "key", "type": "String"}, {"name": "mockRanges", "type": "Map<String, AttributeRange>"}, {"name": "spyAttributes", "type": "Attributes"}]}, "fixtures": [], "test_cases": [{"name": "testSourceRange", "primary_tested": ["Attributes.sourceRange(String)"], "associated_methods": ["Attributes.hasKey(String)", "Attributes.getRanges()"], "external_dependencies": {"modules": ["Attributes", "AttributeRange", "HashMap", "Map", "Mockito"], "class_members": [{"name": "attributes", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "mockRanges", "type": "variable"}, {"name": "spyAttributes", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the sourceRange method of the Attributes class by mocking the hasKey and getRanges methods and verifying the result."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNode_splitTextTest.java", "testclass_name": "TextNode_splitTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TextNode_splitTextTest", "description": "Unit tests for the splitText method of the TextNode class.", "class_members": {"variables": [{"name": "textNode", "type": "TextNode"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSplitTextValidOffset", "primary_tested": ["TextNode.splitText(int)"], "associated_methods": ["TextNode.getWholeText()"], "external_dependencies": {"modules": ["TextNode"], "class_members": [{"name": "textNode", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the splitText method with a valid offset."}, {"name": "testSplitTextNegativeOffset", "primary_tested": ["TextNode.splitText(int)"], "external_dependencies": {"modules": ["TextNode"], "class_members": [{"name": "textNode", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the splitText method with a negative offset, expecting an IllegalArgumentException."}, {"name": "testSplitTextOffsetGreaterThanLength", "primary_tested": ["TextNode.splitText(int)"], "external_dependencies": {"modules": ["TextNode"], "class_members": [{"name": "textNode", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the splitText method with an offset greater than the length of the text, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_getElementByIdTest.java", "testclass_name": "Element_getElementByIdTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_getElementByIdTest", "description": "Unit tests for the getElementById method of the Element class in Jsoup.", "class_members": {"variables": [{"name": "doc", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetElementById_ExistingId", "primary_tested": ["Element.getElementById(String)"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementById method with an existing ID, ensuring the correct element is retrieved and its properties are as expected."}, {"name": "testGetElementById_NonExistingId", "primary_tested": ["Element.getElementById(String)"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementById method with a non-existing ID, ensuring null is returned."}, {"name": "testGetElementById_EmptyId", "primary_tested": ["Element.getElementById(String)"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementById method with an empty ID, ensuring an IllegalArgumentException is thrown."}, {"name": "testGetElementById_NullId", "primary_tested": ["Element.getElementById(String)"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getElementById method with a null ID, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_createShellTest.java", "testclass_name": "Document_createShellTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_createShellTest", "description": "Unit tests for the Document.createShell method.", "class_members": {"variables": [{"name": "baseUri", "type": "String"}, {"name": "doc", "type": "Document"}, {"name": "html", "type": "Element"}, {"name": "head", "type": "Element"}, {"name": "body", "type": "Element"}]}, "test_cases": [{"name": "testCreateShell", "primary_tested": ["Document.createShell(String)"], "associated_methods": ["Document.baseUri()", "Document.child(int)", "Element.tagName()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "baseUri", "type": "variable"}, {"name": "doc", "type": "variable"}, {"name": "html", "type": "variable"}, {"name": "head", "type": "variable"}, {"name": "body", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a shell document and verifies its structure."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_equalsTest.java", "testclass_name": "Attribute_equalsTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_equalsTest", "description": "Unit tests for the equals method in the Attribute class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["Attribute.equals(Object)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests the equals method with the same object."}, {"name": "testEquals_NullObject", "primary_tested": ["Attribute.equals(Object)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["Attribute.equals(Object)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_DifferentKey", "primary_tested": ["Attribute.equals(Object)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests the equals method with different keys."}, {"name": "testEquals_DifferentValue", "primary_tested": ["Attribute.equals(Object)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests the equals method with different values."}, {"name": "testEquals_SameKeyAndValue", "primary_tested": ["Attribute.equals(Object)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests the equals method with the same key and value."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_expectFirstTest.java", "testclass_name": "Element_expectFirstTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_expectFirstTest", "description": "Unit tests for the 'expectFirst' method of the Element class in Jsoup.", "class_members": {"variables": [{"name": "doc", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testExpectFirstWithMatchingElement", "primary_tested": ["Element.expectFirst(String)"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the 'expectFirst' method with a matching element, ensuring it returns the correct element and its text."}, {"name": "testExpectFirstWithNoMatchingElement", "primary_tested": ["Element.expectFirst(String)"], "external_dependencies": {"modules": ["Document", "Element", "org.jsoup.helper.ValidationException"], "class_members": [{"name": "doc", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the 'expectFirst' method with no matching element, ensuring it throws a ValidationException."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_hasTextTest.java", "testclass_name": "Element_hasTextTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_hasTextTest", "description": "Unit tests for the hasText method of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasTextWithNonBlankText", "primary_tested": ["Element.hasText()"], "associated_methods": ["Element.appendText(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasText method with non-blank text."}, {"name": "testHasTextWithBlankText", "primary_tested": ["Element.hasText()"], "associated_methods": ["Element.appendText(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasText method with blank text."}, {"name": "testHasTextWithNoText", "primary_tested": ["Element.hasText()"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasText method with no text."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_toggleClassTest.java", "testclass_name": "Element_toggleClassTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_toggleClassTest", "description": "Unit tests for the toggleClass functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToggleClassAdd", "primary_tested": ["Element.toggleClass(String)"], "associated_methods": ["Element.addClass(String)", "Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toggleClass functionality to add a new class to the Element."}, {"name": "testToggleClassRemove", "primary_tested": ["Element.toggleClass(String)"], "associated_methods": ["Element.addClass(String)", "Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toggleClass functionality to remove an existing class from the Element."}, {"name": "testToggleClassNoChange", "primary_tested": ["Element.toggleClass(String)"], "associated_methods": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toggleClass functionality when toggling a class that does not exist, resulting in its addition."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_dataTest.java", "testclass_name": "Element_dataTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_dataTest", "description": "Unit tests for the data extraction functionality of the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDataWithDataNode", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendChild(Node)"], "external_dependencies": {"modules": ["Element", "DataNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the data extraction functionality of the Element class when a DataNode is appended."}, {"name": "testDataWithComment", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendChild(Node)"], "external_dependencies": {"modules": ["Element", "Comment"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the data extraction functionality of the Element class when a Comment is appended."}, {"name": "testDataWithCDataNode", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendChild(Node)"], "external_dependencies": {"modules": ["Element", "CDataNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the data extraction functionality of the Element class when a CDataNode is appended."}, {"name": "testDataWithMixedNodes", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendChild(Node)"], "external_dependencies": {"modules": ["Element", "DataNode", "Comment", "CDataNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the data extraction functionality of the Element class when multiple types of nodes are appended."}, {"name": "testDataWithNoSpecialNodes", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendChild(Node)"], "external_dependencies": {"modules": ["Element", "TextNode"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the data extraction functionality of the Element class when a TextNode is appended."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attribute_setKeyTest.java", "testclass_name": "Attribute_setKeyTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attribute_setKeyTest", "description": "Unit tests for the setKey method in the Attribute class.", "class_members": {"variables": [{"name": "attribute", "type": "Attribute"}, {"name": "parent", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetKeyWithValidKey", "primary_tested": ["Attribute.setKey(String)"], "associated_methods": ["Attribute.getKey()", "Attributes.get(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attribute", "Attributes"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a valid key in the Attribute and verifies the key and value in the parent Attributes."}, {"name": "testSetKeyWithEmptyParent", "primary_tested": ["Attribute.setKey(String)"], "associated_methods": ["Attribute.getKey()"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests setting a key in the Attribute when the parent is null."}, {"name": "testSetKeyWithNullKey", "primary_tested": ["Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a null key in the Attribute and expects an IllegalArgumentException."}, {"name": "testSetKeyWithEmptyKey", "primary_tested": ["Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": [{"name": "attribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting an empty key in the Attribute and expects an IllegalArgumentException."}, {"name": "testSetKeyWithWhitespaceKey", "primary_tested": ["Attribute.setKey(String)"], "associated_methods": ["Attribute.getKey()", "Attributes.get(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attribute", "Attributes"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a key with leading and trailing whitespace in the Attribute and verifies the key and value in the parent Attributes."}, {"name": "testSetKeyWithExistingKeyInParent", "primary_tested": ["Attribute.setKey(String)"], "associated_methods": ["Attribute.getKey()", "Attributes.get(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attribute", "Attributes"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a key in the Attribute that already exists in the parent Attributes and verifies the key and value in the parent Attributes."}, {"name": "testSetKeyWithRangeTracking", "primary_tested": ["Attribute.setKey(String)"], "associated_methods": ["Attribute.getKey()", "Attributes.get(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attribute", "Attributes"], "class_members": [{"name": "attribute", "type": "variable"}, {"name": "parent", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a key in the Attribute with range tracking and verifies the key and value in the parent Attributes."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Attributes_equalsTest.java", "testclass_name": "Attributes_equalsTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Attributes_equalsTest", "description": "Unit tests for the equals method in the Attributes class.", "class_members": {"variables": [{"name": "attributes", "type": "Attributes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_NullObject", "primary_tested": ["Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEquals_DifferentClass", "primary_tested": ["Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEquals_DifferentSize", "primary_tested": ["Attributes.equals(Object)"], "associated_methods": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different sizes of attributes."}, {"name": "testEquals_SameKeysDifferentValues", "primary_tested": ["Attributes.equals(Object)"], "associated_methods": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same keys but different values."}, {"name": "testEquals_SameKeysSameValues", "primary_tested": ["Attributes.equals(Object)"], "associated_methods": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same keys and same values."}, {"name": "testEquals_DifferentKeys", "primary_tested": ["Attributes.equals(Object)"], "associated_methods": ["Attributes.put(String,String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": [{"name": "attributes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different keys."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Element_hasClassTest.java", "testclass_name": "Element_hasClassTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Element_hasClassTest", "description": "Unit tests for the hasClass method in the Element class.", "class_members": {"variables": [{"name": "element", "type": "Element"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasClass_NoAttributes", "primary_tested": ["Element.hasClass(String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method when the element has no attributes."}, {"name": "testHasClass_ExactMatch", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method when the class attribute exactly matches the provided class name."}, {"name": "testHasClass_MultipleClasses", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method when the class attribute contains multiple classes."}, {"name": "testHasClass_WhitespaceHandling", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method with various whitespace handling scenarios."}, {"name": "testHasClass_CaseInsensitivity", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method for case insensitivity."}, {"name": "testHasClass_EmptyClassAttribute", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method when the class attribute is empty."}, {"name": "testHasClass_LongerThanAttribute", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method when the provided class name is longer than the class attribute."}, {"name": "testHasClass_LastEntry", "primary_tested": ["Element.hasClass(String)"], "associated_methods": ["Element.attr(String,String)"], "external_dependencies": {"modules": ["Element"], "class_members": [{"name": "element", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasClass method when the provided class name is the last entry in the class attribute."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_cloneTest.java", "testclass_name": "Document_cloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_cloneTest", "description": "Unit tests for the clone functionality of the Document class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["Document.clone()"], "associated_methods": ["Document.outputSettings().charset()"], "external_dependencies": {"modules": ["Document"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the Document class, ensuring that the cloned object is not the same instance but has the same output settings."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_shallowCloneTest.java", "testclass_name": "Document_shallowCloneTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotSame;"], "name": "Document_shallowCloneTest", "description": "Unit tests for the shallowClone method of the Document class.", "class_members": {"variables": [{"name": "originalDocument", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testShallowClone", "primary_tested": ["Document.shallowClone()"], "associated_methods": ["Document.tag().namespace()", "Document.baseUri()", "Document.outputSettings().charset()", "Document.attributes", "Document.outputSettings()"], "external_dependencies": {"modules": ["Document", "Attributes"], "class_members": [{"name": "originalDocument", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the shallowClone method of the Document class to ensure that the clone has the same properties but different references for certain attributes."}]}, {"file_path": "src/test/java/org/jsoup/nodes/Document_outputSettingsTest.java", "testclass_name": "Document_outputSettingsTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Document_outputSettingsTest", "description": "Unit tests for the outputSettings functionality of the Document class.", "class_members": {"variables": [{"name": "document", "type": "Document"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOutputSettingsValid", "primary_tested": ["Document.outputSettings(Document.OutputSettings)"], "associated_methods": ["Document.outputSettings()"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the outputSettings functionality with a valid OutputSettings object."}, {"name": "testOutputSettingsNull", "primary_tested": ["Document.outputSettings(Document.OutputSettings)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "document", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the outputSettings functionality when a null OutputSettings object is provided, expecting an IllegalArgumentException."}]}]