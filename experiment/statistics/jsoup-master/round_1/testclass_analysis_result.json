[
    {
        "file_path": "src/test/java/org/jsoup/select/QueryParser_toStringTest.java",
        "testclass_name": "QueryParser_toStringTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "QueryParser_toStringTest",
        "description": "Unit tests for the toString method of the QueryParser class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testToString",
                "primary_tested": [
                    "Evaluator.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "QueryParser",
                        "Evaluator"
                    ]
                },
                "category": "unit",
                "description": "Tests the toString method of the Evaluator class, ensuring it returns the correct string representation of the parsed query."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_removeAttrTest.java",
        "testclass_name": "Elements_removeAttrTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_removeAttrTest",
        "description": "Unit tests for the removeAttr method of the Elements class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testRemoveAttr",
                "primary_tested": [
                    "Elements.removeAttr(String)"
                ],
                "associated_methods": [
                    "Element.hasAttr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Element",
                        "Elements"
                    ],
                    "class_members": [],
                    "project_specific_resources": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the removal of an attribute from multiple elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/W3CDom_namespaceAwareTest.java",
        "testclass_name": "W3CDom_namespaceAwareTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import org.w3c.dom.Document;",
            "import static org.junit.jupiter.api.Assertions.assertFalse;",
            "import static org.junit.jupiter.api.Assertions.assertTrue;"
        ],
        "name": "W3CDom_namespaceAwareTest",
        "description": "Unit tests for the namespace awareness functionality in the W3CDom class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testNamespaceAware",
                "primary_tested": [
                    "W3CDom.namespaceAware()"
                ],
                "associated_methods": [
                    "W3CDom.namespaceAware(boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "W3CDom"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the namespace awareness functionality of the W3CDom class by toggling the namespace awareness setting and verifying the state changes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Tag_toStringTest.java",
        "testclass_name": "Tag_toStringTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Tag_toStringTest",
        "description": "Unit test for the toString method of the Tag class.",
        "class_members": {
            "variables": [
                {
                    "name": "tag",
                    "type": "Tag"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testToString",
                "primary_tested": [
                    "Tag.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag"
                    ],
                    "class_members": [
                        {
                            "name": "tag",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the toString method of the Tag class to ensure it returns the correct string representation of the tag."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_toggleClassTest.java",
        "testclass_name": "Elements_toggleClassTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_toggleClassTest",
        "description": "Unit tests for the toggleClass functionality of the Elements class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testToggleClass",
                "primary_tested": [
                    "Elements.toggleClass(String)"
                ],
                "associated_methods": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the toggleClass functionality of the Elements class, ensuring that the class is toggled correctly on the elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_htmlTest.java",
        "testclass_name": "Elements_htmlTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_htmlTest",
        "description": "Unit tests for the html method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHtml",
                "primary_tested": [
                    "Elements.html()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the html method of the Elements class to ensure it returns the correct HTML content."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_notTest.java",
        "testclass_name": "Elements_notTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_notTest",
        "description": "Unit tests for the 'not' method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testNot",
                "primary_tested": [
                    "Elements.not(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the 'not' method of the Elements class to ensure it excludes elements with a specific class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_emptyTest.java",
        "testclass_name": "Elements_emptyTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_emptyTest",
        "description": "Unit tests for the empty functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testEmpty",
                "primary_tested": [
                    "Elements.empty()"
                ],
                "associated_methods": [
                    "Element.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the empty functionality of the Elements class, ensuring that the text of each element is cleared."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_toStringTest.java",
        "testclass_name": "Elements_toStringTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_toStringTest",
        "description": "Unit tests for the toString method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testToString",
                "primary_tested": [
                    "Elements.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the toString method of the Elements class to ensure it correctly formats the elements as a string."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/Validate_isFalseTest.java",
        "testclass_name": "Validate_isFalseTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Validate_isFalseTest",
        "description": "Unit tests for the Validate.isFalse method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testIsFalse_withFalseValue",
                "primary_tested": [
                    "Validate.isFalse(boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate"
                    ]
                },
                "category": "unit",
                "description": "Tests that no exception is thrown when Validate.isFalse is called with a false value."
            },
            {
                "name": "testIsFalse_withTrueValue",
                "primary_tested": [
                    "Validate.isFalse(boolean)"
                ],
                "associated_methods": [
                    "ValidationException.getMessage()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ]
                },
                "category": "unit",
                "description": "Tests that a ValidationException is thrown with the correct message when Validate.isFalse is called with a true value."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_formsTest.java",
        "testclass_name": "Elements_formsTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.FormElement;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_formsTest",
        "description": "Unit tests for the forms functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testForms",
                "primary_tested": [
                    "Elements.forms()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "FormElement"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the extraction of forms from a parsed HTML document."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_addClassTest.java",
        "testclass_name": "Elements_addClassTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_addClassTest",
        "description": "Unit tests for the addClass method in the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAddClass",
                "primary_tested": [
                    "Element.addClass(String)"
                ],
                "associated_methods": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the addClass functionality of the Elements class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_removeIfTest.java",
        "testclass_name": "Elements_removeIfTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.function.Predicate;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_removeIfTest",
        "description": "Unit tests for the removeIf method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                },
                {
                    "name": "filter",
                    "type": "Predicate<Element>"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testRemoveIf",
                "primary_tested": [
                    "Elements.removeIf(Predicate<Element>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements",
                        "Element",
                        "Predicate",
                        "Arrays"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        },
                        {
                            "name": "filter",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the removeIf functionality of the Elements class, ensuring elements are correctly removed based on a predicate."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_removeClassTest.java",
        "testclass_name": "Elements_removeClassTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_removeClassTest",
        "description": "Unit tests for the removeClass functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveClass",
                "primary_tested": [
                    "Elements.removeClass(String)"
                ],
                "associated_methods": [
                    "Elements.addClass(String)",
                    "Elements.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of a class from an element and verifies the presence of another class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/Validate_isTrueTest.java",
        "testclass_name": "Validate_isTrueTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Validate_isTrueTest",
        "description": "Unit tests for the Validate.isTrue method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testIsTrue_withTrueValue",
                "primary_tested": [
                    "Validate.isTrue(boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate"
                    ]
                },
                "category": "unit",
                "description": "Tests the Validate.isTrue method with a true value."
            },
            {
                "name": "testIsTrue_withFalseValue",
                "primary_tested": [
                    "Validate.isTrue(boolean)"
                ],
                "associated_methods": [
                    "ValidationException.getMessage()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ]
                },
                "category": "unit",
                "description": "Tests the Validate.isTrue method with a false value, expecting a ValidationException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_appendTest.java",
        "testclass_name": "Elements_appendTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_appendTest",
        "description": "Unit tests for the append functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAppend",
                "primary_tested": [
                    "Elements.append(String)"
                ],
                "associated_methods": [
                    "Elements.outerHtml()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the append functionality of the Elements class by appending HTML content and verifying the resulting outer HTML."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_textTest.java",
        "testclass_name": "Elements_textTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_textTest",
        "description": "Unit tests for the text extraction functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testText",
                "primary_tested": [
                    "Elements.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the text extraction functionality of the Elements class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_unescapeEntitiesTest.java",
        "testclass_name": "Parser_unescapeEntitiesTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Parser_unescapeEntitiesTest",
        "description": "Unit tests for the unescapeEntities method in the Parser class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testUnescapeEntitiesInAttribute",
                "primary_tested": [
                    "Parser.unescapeEntities(String,boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser"
                    ]
                },
                "category": "unit",
                "description": "Tests the unescapeEntities method with the inAttribute parameter set to true."
            },
            {
                "name": "testUnescapeEntitiesInText",
                "primary_tested": [
                    "Parser.unescapeEntities(String,boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser"
                    ]
                },
                "category": "unit",
                "description": "Tests the unescapeEntities method with the inAttribute parameter set to false."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_eachTextTest.java",
        "testclass_name": "Elements_eachTextTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_eachTextTest",
        "description": "Unit tests for the eachText method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testEachText",
                "primary_tested": [
                    "Elements.eachText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the eachText method of the Elements class to ensure it correctly extracts non-empty text nodes from a list of elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_tagNameTest.java",
        "testclass_name": "Elements_tagNameTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_tagNameTest",
        "description": "Unit tests for the tagName functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testTagName",
                "primary_tested": [
                    "Elements.tagName(String)"
                ],
                "associated_methods": [
                    "Element.tagName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the tagName functionality of the Elements class by setting the tag name to 'span' and verifying it."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_eachAttrTest.java",
        "testclass_name": "Elements_eachAttrTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_eachAttrTest",
        "description": "Unit tests for the eachAttr method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testEachAttr",
                "primary_tested": [
                    "Elements.eachAttr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the eachAttr method of the Elements class to ensure it correctly retrieves attributes from selected elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_clearTest.java",
        "testclass_name": "Elements_clearTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.ArrayList;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertTrue;"
        ],
        "name": "Elements_clearTest",
        "description": "Unit test for the clear method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                },
                {
                    "name": "element1",
                    "type": "Element"
                },
                {
                    "name": "element2",
                    "type": "Element"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testClear",
                "primary_tested": [
                    "Elements.clear()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        },
                        {
                            "name": "element1",
                            "type": "variable"
                        },
                        {
                            "name": "element2",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the clear functionality of the Elements class, ensuring that all elements are removed and the collection is empty."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_beforeTest.java",
        "testclass_name": "Elements_beforeTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_beforeTest",
        "description": "Unit tests for the 'before' method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testBefore",
                "primary_tested": [
                    "Elements.before(String)"
                ],
                "associated_methods": [
                    "Elements.parents()",
                    "Element.html()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the 'before' method of the Elements class by inserting HTML before each element and verifying the resulting HTML structure."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_prependTest.java",
        "testclass_name": "Elements_prependTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_prependTest",
        "description": "Unit tests for the prepend functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testPrepend",
                "primary_tested": [
                    "Elements.prepend(String)"
                ],
                "associated_methods": [
                    "Element.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prepend functionality of the Elements class by adding 'New ' to the beginning of each element's text and verifying the result."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_filterTest.java",
        "testclass_name": "Elements_filterTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_filterTest",
        "description": "Unit tests for the filter functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                },
                {
                    "name": "nodeFilter",
                    "type": "NodeFilter"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testFilter",
                "primary_tested": [
                    "Elements.filter(NodeFilter)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements",
                        "Element",
                        "NodeFilter",
                        "FilterResult"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        },
                        {
                            "name": "nodeFilter",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the filter functionality of the Elements class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_wrapTest.java",
        "testclass_name": "Elements_wrapTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import static org.mockito.Mockito.*;"
        ],
        "name": "Elements_wrapTest",
        "description": "Unit tests for the wrap functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                },
                {
                    "name": "mockElement",
                    "type": "Element"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testWrap",
                "primary_tested": [
                    "Element.wrap(String)"
                ],
                "associated_methods": [
                    "Elements.add(Element)",
                    "Elements.wrap(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements",
                        "Element",
                        "org.mockito.Mockito"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        },
                        {
                            "name": "mockElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the wrap functionality of the Elements class by wrapping a mock element with a div tag and verifying the wrap method was called on the mock element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_cloneTest.java",
        "testclass_name": "Elements_cloneTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_cloneTest",
        "description": "Unit tests for the clone functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "Elements.clone()"
                ],
                "associated_methods": [
                    "Elements.size()",
                    "Elements.get(int)",
                    "Element.outerHtml()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the cloning functionality of the Elements class, ensuring the clone has the same size and contains the same elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_parseXmlFragmentTest.java",
        "testclass_name": "Parser_parseXmlFragmentTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;"
        ],
        "name": "Parser_parseXmlFragmentTest",
        "description": "Unit tests for parsing XML fragments using the Parser class.",
        "class_members": {
            "variables": [
                {
                    "name": "parser",
                    "type": "Parser"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testParseXmlFragment",
                "primary_tested": [
                    "Parser.parseXmlFragment(String,String)"
                ],
                "associated_methods": [
                    "Node.nodeName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser",
                        "Node",
                        "XmlTreeBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the parsing of an XML fragment and verifies the resulting nodes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_traverseTest.java",
        "testclass_name": "Elements_traverseTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_traverseTest",
        "description": "Unit tests for the traversal functionality of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testTraverse",
                "primary_tested": [
                    "Elements.traverse(NodeVisitor)"
                ],
                "associated_methods": [
                    "NodeVisitor.head(Node,int)",
                    "NodeVisitor.tail(Node,int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "Node",
                        "NodeVisitor"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the traversal functionality of the Elements class using a custom NodeVisitor to count the number of Element nodes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_hasClassTest.java",
        "testclass_name": "Elements_hasClassTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import static org.mockito.Mockito.*;",
            "import java.util.List;"
        ],
        "name": "Elements_hasClassTest",
        "description": "Unit tests for the hasClass method in the Elements class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testHasClass_ClassExists",
                "primary_tested": [
                    "Elements.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements",
                        "List"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the hasClass method when the class exists in the element."
            },
            {
                "name": "testHasClass_ClassDoesNotExist",
                "primary_tested": [
                    "Elements.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements",
                        "List"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the hasClass method when the class does not exist in the element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/Validate_notEmptyTest.java",
        "testclass_name": "Validate_notEmptyTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Validate_notEmptyTest",
        "description": "Unit tests for the Validate.notEmpty method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testNotEmpty_withNonEmptyString",
                "primary_tested": [
                    "Validate.notEmpty(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate"
                    ]
                },
                "category": "unit",
                "description": "Tests the Validate.notEmpty method with a non-empty string."
            },
            {
                "name": "testNotEmpty_withNullString",
                "primary_tested": [
                    "Validate.notEmpty(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ]
                },
                "category": "unit",
                "description": "Tests the Validate.notEmpty method with a null string, expecting a ValidationException."
            },
            {
                "name": "testNotEmpty_withEmptyString",
                "primary_tested": [
                    "Validate.notEmpty(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ]
                },
                "category": "unit",
                "description": "Tests the Validate.notEmpty method with an empty string, expecting a ValidationException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_afterTest.java",
        "testclass_name": "Elements_afterTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_afterTest",
        "description": "Unit test for the 'after' method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "doc",
                    "type": "Document"
                },
                {
                    "name": "elements",
                    "type": "Elements"
                },
                {
                    "name": "html",
                    "type": "String"
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAfter",
                "primary_tested": [
                    "Elements.after(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        },
                        {
                            "name": "elements",
                            "type": "variable"
                        },
                        {
                            "name": "html",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the 'after' method of the Elements class to ensure it correctly appends HTML content after the selected elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_hasAttrTest.java",
        "testclass_name": "Elements_hasAttrTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_hasAttrTest",
        "description": "Unit tests for the hasAttr method in the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasAttrPresent",
                "primary_tested": [
                    "Elements.hasAttr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the hasAttr method returns true when the attribute is present."
            },
            {
                "name": "testHasAttrNotPresent",
                "primary_tested": [
                    "Elements.hasAttr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the hasAttr method returns false when the attribute is not present."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/Validate_ensureNotNullTest.java",
        "testclass_name": "Validate_ensureNotNullTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Validate_ensureNotNullTest",
        "description": "Unit tests for the Validate.ensureNotNull method.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testEnsureNotNull_WithNonNullObject",
                "primary_tested": [
                    "Validate.ensureNotNull(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "Object"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the ensureNotNull method with a non-null object."
            },
            {
                "name": "testEnsureNotNull_WithNullObject",
                "primary_tested": [
                    "Validate.ensureNotNull(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the ensureNotNull method with a null object, expecting a ValidationException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/W3CDom_asStringTest.java",
        "testclass_name": "W3CDom_asStringTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import org.w3c.dom.Document;",
            "import org.w3c.dom.DocumentType;",
            "import javax.xml.parsers.DocumentBuilder;",
            "import javax.xml.parsers.DocumentBuilderFactory;",
            "import javax.xml.parsers.ParserConfigurationException;",
            "import javax.xml.transform.TransformerException;",
            "import java.util.HashMap;",
            "import java.util.Map;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;",
            "import static org.junit.jupiter.api.Assertions.assertThrows;"
        ],
        "name": "W3CDom_asStringTest",
        "description": "Unit tests for the W3CDom.asString method, focusing on different scenarios including properties and doctype handling.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAsString_withPropertiesAndDoctype",
                "primary_tested": [
                    "W3CDom.asString(Document,Map<String,String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "DocumentBuilderFactory",
                        "DocumentBuilder",
                        "Document",
                        "DocumentType",
                        "W3CDom",
                        "HashMap",
                        "Map"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the W3CDom.asString method with properties and doctype, ensuring the correct string representation is returned."
            },
            {
                "name": "testAsString_transformerException",
                "primary_tested": [
                    "W3CDom.asString(Document,Map<String,String>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "DocumentBuilderFactory",
                        "DocumentBuilder",
                        "Document",
                        "W3CDom",
                        "HashMap",
                        "Map"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the W3CDom.asString method to ensure it throws an IllegalArgumentException when invalid properties are passed, simulating a TransformerException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/Validate_notEmptyParamTest.java",
        "testclass_name": "Validate_notEmptyParamTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Validate_notEmptyParamTest",
        "description": "Unit tests for the Validate.notEmptyParam method, ensuring it correctly validates non-empty parameters.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testNotEmptyParamValid",
                "primary_tested": [
                    "Validate.notEmptyParam(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate"
                    ]
                },
                "category": "unit",
                "description": "Tests that Validate.notEmptyParam does not throw an exception when a valid non-empty string is provided."
            },
            {
                "name": "testNotEmptyParamNull",
                "primary_tested": [
                    "Validate.notEmptyParam(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ]
                },
                "category": "unit",
                "description": "Tests that Validate.notEmptyParam throws a ValidationException when a null string is provided."
            },
            {
                "name": "testNotEmptyParamEmpty",
                "primary_tested": [
                    "Validate.notEmptyParam(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Validate",
                        "ValidationException"
                    ]
                },
                "category": "unit",
                "description": "Tests that Validate.notEmptyParam throws a ValidationException when an empty string is provided."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_valTest.java",
        "testclass_name": "Elements_valTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Elements_valTest",
        "description": "Unit tests for the val() method in the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testValWithElements",
                "primary_tested": [
                    "Elements.val()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the val() method when the Elements object contains an Element."
            },
            {
                "name": "testValWithEmptyElements",
                "primary_tested": [
                    "Elements.val()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the val() method when the Elements object is empty."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_setTreeBuilderTest.java",
        "testclass_name": "Parser_setTreeBuilderTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Parser_setTreeBuilderTest",
        "description": "Unit tests for the setTreeBuilder method in the Parser class.",
        "class_members": {
            "variables": [
                {
                    "name": "parser",
                    "type": "Parser"
                },
                {
                    "name": "mockTreeBuilder",
                    "type": "TreeBuilder"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSetTreeBuilder",
                "primary_tested": [
                    "Parser.setTreeBuilder(TreeBuilder)"
                ],
                "associated_methods": [
                    "Parser.getTreeBuilder()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser",
                        "TreeBuilder",
                        "HtmlTreeBuilder",
                        "XmlTreeBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        },
                        {
                            "name": "mockTreeBuilder",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setTreeBuilder method to ensure the TreeBuilder is updated correctly and the new TreeBuilder's parser reference is also updated."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_chompToTest.java",
        "testclass_name": "TokenQueue_chompToTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_chompToTest",
        "description": "Unit tests for the chompTo method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testChompToWithMatch",
                "primary_tested": [
                    "TokenQueue.chompTo(String)"
                ],
                "associated_methods": [
                    "TokenQueue.remainder()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompTo method when a match is found in the TokenQueue."
            },
            {
                "name": "testChompToWithoutMatch",
                "primary_tested": [
                    "TokenQueue.chompTo(String)"
                ],
                "associated_methods": [
                    "TokenQueue.isEmpty()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompTo method when no match is found in the TokenQueue."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_attrTest.java",
        "testclass_name": "Elements_attrTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_attrTest",
        "description": "Unit tests for the 'attr' method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAttrWithExistingAttribute",
                "primary_tested": [
                    "Elements.attr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the 'attr' method with an existing attribute."
            },
            {
                "name": "testAttrWithNonExistingAttribute",
                "primary_tested": [
                    "Elements.attr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the 'attr' method with a non-existing attribute."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_parseFragmentTest.java",
        "testclass_name": "Parser_parseFragmentTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Parser_parseFragmentTest",
        "description": "Unit tests for the parseFragment method of the Parser class.",
        "class_members": {
            "variables": [
                {
                    "name": "parser",
                    "type": "Parser"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testParseFragment",
                "primary_tested": [
                    "Parser.parseFragment(String,Element,String)"
                ],
                "associated_methods": [
                    "Node.nodeName()",
                    "Node.childNode(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser",
                        "Element",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the parseFragment method with a non-empty HTML fragment."
            },
            {
                "name": "testParseFragmentWithEmptyString",
                "primary_tested": [
                    "Parser.parseFragment(String,Element,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the parseFragment method with an empty HTML fragment."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/W3CDom_fromJsoupTest.java",
        "testclass_name": "W3CDom_fromJsoupTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import org.w3c.dom.Node;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "W3CDom_fromJsoupTest",
        "description": "Unit tests for the W3CDom class's fromJsoup method.",
        "class_members": {
            "variables": [
                {
                    "name": "w3cDom",
                    "type": "W3CDom"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testFromJsoupWithValidDocument",
                "primary_tested": [
                    "W3CDom.fromJsoup(Document)"
                ],
                "associated_methods": [
                    "Document.getFirstChild()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "W3CDom"
                    ],
                    "class_members": [
                        {
                            "name": "w3cDom",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the fromJsoup method with a valid Jsoup Document, ensuring the conversion to a W3C Document is correct."
            },
            {
                "name": "testFromJsoupWithNullDocument",
                "primary_tested": [
                    "W3CDom.fromJsoup(Document)"
                ],
                "external_dependencies": {
                    "modules": [
                        "W3CDom"
                    ],
                    "class_members": [
                        {
                            "name": "w3cDom",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the fromJsoup method with a null Jsoup Document, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_settingsTest.java",
        "testclass_name": "Parser_settingsTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Parser_settingsTest",
        "description": "Unit tests for the settings functionality of the Parser class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testSettings",
                "primary_tested": [
                    "Parser.settings(ParseSettings)"
                ],
                "associated_methods": [
                    "Parser.settings()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser",
                        "HtmlTreeBuilder",
                        "ParseSettings"
                    ]
                },
                "category": "unit",
                "description": "Tests the settings functionality of the Parser class by updating and retrieving the settings."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeWhitespaceTest.java",
        "testclass_name": "TokenQueue_consumeWhitespaceTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_consumeWhitespaceTest",
        "description": "Unit tests for the consumeWhitespace method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testConsumeWhitespace",
                "primary_tested": [
                    "TokenQueue.consumeWhitespace()"
                ],
                "associated_methods": [
                    "TokenQueue.remainder()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeWhitespace method when there is whitespace to consume."
            },
            {
                "name": "testConsumeWhitespaceNoWhitespace",
                "primary_tested": [
                    "TokenQueue.consumeWhitespace()"
                ],
                "associated_methods": [
                    "TokenQueue.remainder()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the consumeWhitespace method when there is no whitespace to consume."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_simpleTextTest.java",
        "testclass_name": "Safelist_simpleTextTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_simpleTextTest",
        "description": "Unit tests for the simpleText Safelist in Jsoup.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testSimpleText",
                "primary_tested": [
                    "Safelist.isSafeTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the isSafeTag method of the simpleText Safelist to ensure it correctly identifies safe and unsafe tags."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_escapeCssIdentifierTest.java",
        "testclass_name": "TokenQueue_escapeCssIdentifierTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_escapeCssIdentifierTest",
        "description": "Unit tests for the escapeCssIdentifier method in the TokenQueue class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testEscapeCssIdentifier",
                "primary_tested": [
                    "TokenQueue.escapeCssIdentifier(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ]
                },
                "category": "unit",
                "description": "Tests the escapeCssIdentifier method with a string containing special characters."
            },
            {
                "name": "testEscapeCssIdentifierWithEscapedChars",
                "primary_tested": [
                    "TokenQueue.escapeCssIdentifier(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ]
                },
                "category": "unit",
                "description": "Tests the escapeCssIdentifier method with a string containing already escaped characters."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_isInvisibleCharTest.java",
        "testclass_name": "StringUtil_isInvisibleCharTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_isInvisibleCharTest",
        "description": "Unit tests for the StringUtil.isInvisibleChar method.",
        "test_cases": [
            {
                "name": "testIsInvisibleChar",
                "primary_tested": [
                    "StringUtil.isInvisibleChar(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the functionality of the StringUtil.isInvisibleChar method to determine if specific characters are considered invisible."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_startsWithNewlineTest.java",
        "testclass_name": "StringUtil_startsWithNewlineTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_startsWithNewlineTest",
        "description": "Unit tests for the startsWithNewline method in the StringUtil class.",
        "test_cases": [
            {
                "name": "testStartsWithNewline",
                "primary_tested": [
                    "StringUtil.startsWithNewline(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the startsWithNewline method of the StringUtil class for various scenarios including strings that start with a newline, do not start with a newline, an empty string, and a null string."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_unescapeTest.java",
        "testclass_name": "TokenQueue_unescapeTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_unescapeTest",
        "description": "Unit tests for the unescape functionality of the TokenQueue class.",
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testUnescapeWithNoEscapes",
                "primary_tested": [
                    "TokenQueue.unescape(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the unescape functionality with no escape sequences."
            },
            {
                "name": "testUnescapeWithSingleEscape",
                "primary_tested": [
                    "TokenQueue.unescape(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the unescape functionality with a single escape sequence."
            },
            {
                "name": "testUnescapeWithConsecutiveEscapes",
                "primary_tested": [
                    "TokenQueue.unescape(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the unescape functionality with consecutive escape sequences."
            },
            {
                "name": "testUnescapeWithMixedEscapes",
                "primary_tested": [
                    "TokenQueue.unescape(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the unescape functionality with mixed escape sequences."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_isActuallyWhitespaceTest.java",
        "testclass_name": "StringUtil_isActuallyWhitespaceTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_isActuallyWhitespaceTest",
        "description": "Unit tests for the isActuallyWhitespace method in the StringUtil class.",
        "test_cases": [
            {
                "name": "testIsActuallyWhitespace",
                "primary_tested": [
                    "StringUtil.isActuallyWhitespace(char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the isActuallyWhitespace method to ensure it correctly identifies various whitespace characters and non-whitespace characters."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/helper/W3CDom_convertTest.java",
        "testclass_name": "W3CDom_convertTest",
        "dependencies": [
            "package org.jsoup.helper;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import org.w3c.dom.Node;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "W3CDom_convertTest",
        "description": "Unit tests for converting Jsoup Document to W3C Document using W3CDom.",
        "class_members": {
            "variables": [
                {
                    "name": "w3cDom",
                    "type": "W3CDom"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testConvertDocument",
                "primary_tested": [
                    "W3CDom.fromJsoup(Document)"
                ],
                "associated_methods": [
                    "Document.getElementsByTagName(String)",
                    "Node.getTextContent()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "W3CDom",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "w3cDom",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the conversion of a Jsoup Document to a W3C Document and verifies the content."
            },
            {
                "name": "testConvertElement",
                "primary_tested": [
                    "W3CDom.fromJsoup(Document)"
                ],
                "associated_methods": [
                    "Document.body()",
                    "Element.child(int)",
                    "Document.getElementsByTagName(String)",
                    "Node.getTextContent()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "W3CDom",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "w3cDom",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the conversion of a Jsoup Element to a W3C Document and verifies the content."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_isNumericTest.java",
        "testclass_name": "StringUtil_isNumericTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_isNumericTest",
        "description": "Unit tests for the isNumeric method in the StringUtil class.",
        "test_cases": [
            {
                "name": "testIsNumeric",
                "primary_tested": [
                    "StringUtil.isNumeric(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the isNumeric method with various inputs including null, empty string, non-numeric string, numeric string, and numeric string with leading/trailing spaces."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_addFirstTest.java",
        "testclass_name": "TokenQueue_addFirstTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_addFirstTest",
        "description": "Unit tests for the addFirst method of the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAddFirst",
                "primary_tested": [
                    "TokenQueue.addFirst(String)"
                ],
                "associated_methods": [
                    "TokenQueue.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the addFirst method of the TokenQueue class by prepending a string and checking the resulting string representation."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/Elements_hasTextTest.java",
        "testclass_name": "Elements_hasTextTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Elements_hasTextTest",
        "description": "Unit tests for the hasText method of the Elements class.",
        "class_members": {
            "variables": [
                {
                    "name": "elements",
                    "type": "Elements"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasTextWithText",
                "primary_tested": [
                    "Elements.hasText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasText method when the Elements object contains an Element with text."
            },
            {
                "name": "testHasTextWithoutText",
                "primary_tested": [
                    "Elements.hasText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasText method when the Elements object contains an Element without text."
            },
            {
                "name": "testHasTextMixed",
                "primary_tested": [
                    "Elements.hasText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "elements",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasText method when the Elements object contains a mix of Elements with and without text."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/NodeTraversor_traverseTest.java",
        "testclass_name": "NodeTraversor_traverseTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "NodeTraversor_traverseTest",
        "description": "Unit tests for the NodeTraversor.traverse method.",
        "class_members": {
            "variables": [
                {
                    "name": "doc",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testTraverse",
                "primary_tested": [
                    "NodeTraversor.traverse(NodeVisitor,Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Node",
                        "NodeVisitor",
                        "NodeTraversor"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the traversal functionality of NodeTraversor with a valid NodeVisitor and root node."
            },
            {
                "name": "testTraverseWithNullVisitor",
                "primary_tested": [
                    "NodeTraversor.traverse(NodeVisitor,Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Node",
                        "NodeVisitor",
                        "NodeTraversor"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the traversal functionality of NodeTraversor with a null NodeVisitor, expecting an IllegalArgumentException."
            },
            {
                "name": "testTraverseWithNullRoot",
                "primary_tested": [
                    "NodeTraversor.traverse(NodeVisitor,Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Node",
                        "NodeVisitor",
                        "NodeTraversor"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the traversal functionality of NodeTraversor with a null root node, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeToAnyTest.java",
        "testclass_name": "TokenQueue_consumeToAnyTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_consumeToAnyTest",
        "description": "Unit tests for the consumeToAny method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testConsumeToAnyWithMatch",
                "primary_tested": [
                    "TokenQueue.consumeToAny(String...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeToAny method when there is a match in the TokenQueue."
            },
            {
                "name": "testConsumeToAnyWithoutMatch",
                "primary_tested": [
                    "TokenQueue.consumeToAny(String...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeToAny method when there is no match in the TokenQueue."
            },
            {
                "name": "testConsumeToAnyWithEmptyQueue",
                "primary_tested": [
                    "TokenQueue.consumeToAny(String...)"
                ],
                "associated_methods": [
                    "TokenQueue.advance()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeToAny method when the TokenQueue is advanced and then checked for matches."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_normaliseWhitespaceTest.java",
        "testclass_name": "StringUtil_normaliseWhitespaceTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_normaliseWhitespaceTest",
        "description": "Unit test for the normaliseWhitespace method in StringUtil.",
        "class_members": {
            "variables": [
                {
                    "name": "input",
                    "type": "String"
                },
                {
                    "name": "expected",
                    "type": "String"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testNormaliseWhitespace",
                "primary_tested": [
                    "StringUtil.normaliseWhitespace(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the normaliseWhitespace method of StringUtil to ensure it correctly normalises whitespace in a given string."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_rootTest.java",
        "testclass_name": "Element_rootTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;"
        ],
        "name": "Element_rootTest",
        "description": "Unit test for the root method of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testRoot",
                "primary_tested": [
                    "Element.root()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the root method of the Element class to ensure it returns a non-null value."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_setTrackPositionTest.java",
        "testclass_name": "Parser_setTrackPositionTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Parser_setTrackPositionTest",
        "description": "Unit tests for the setTrackPosition method of the Parser class.",
        "class_members": {
            "variables": [
                {
                    "name": "parser",
                    "type": "Parser"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSetTrackPositionTrue",
                "primary_tested": [
                    "Parser.setTrackPosition(boolean)"
                ],
                "associated_methods": [
                    "Parser.isTrackPosition()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setTrackPosition method with true as the parameter, ensuring that the position tracking is enabled and the method returns the same Parser instance."
            },
            {
                "name": "testSetTrackPositionFalse",
                "primary_tested": [
                    "Parser.setTrackPosition(boolean)"
                ],
                "associated_methods": [
                    "Parser.isTrackPosition()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setTrackPosition method with false as the parameter, ensuring that the position tracking is disabled and the method returns the same Parser instance."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_attrTest.java",
        "testclass_name": "Element_attrTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_attrTest",
        "description": "Unit tests for the attr method of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAttr",
                "primary_tested": [
                    "Element.attr(String,String)"
                ],
                "associated_methods": [
                    "Element.attributes()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the attr method of the Element class to ensure it correctly sets and retrieves an attribute."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/select/NodeTraversor_filterTest.java",
        "testclass_name": "NodeTraversor_filterTest",
        "dependencies": [
            "package org.jsoup.select;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "NodeTraversor_filterTest",
        "description": "Unit tests for the NodeTraversor filter functionality.",
        "class_members": {
            "variables": [
                {
                    "name": "doc",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testFilterStop",
                "primary_tested": [
                    "NodeTraversor.filter(NodeFilter,Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Node",
                        "NodeFilter",
                        "FilterResult"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the NodeTraversor filter functionality with a stop condition."
            },
            {
                "name": "testFilterContinue",
                "primary_tested": [
                    "NodeTraversor.filter(NodeFilter,Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Node",
                        "NodeFilter",
                        "FilterResult"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the NodeTraversor filter functionality with a continue condition."
            },
            {
                "name": "testFilterRemove",
                "primary_tested": [
                    "NodeTraversor.filter(NodeFilter,Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Node",
                        "NodeFilter",
                        "FilterResult"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the NodeTraversor filter functionality with a remove condition."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_appendNormalisedWhitespaceTest.java",
        "testclass_name": "StringUtil_appendNormalisedWhitespaceTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_appendNormalisedWhitespaceTest",
        "description": "Unit tests for the appendNormalisedWhitespace method in StringUtil.",
        "class_members": {
            "variables": [
                {
                    "name": "accum",
                    "type": "StringBuilder"
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testAppendNormalisedWhitespace",
                "primary_tested": [
                    "StringUtil.appendNormalisedWhitespace(StringBuilder,String,boolean)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil",
                        "StringBuilder"
                    ],
                    "class_members": [
                        {
                            "name": "accum",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the appendNormalisedWhitespace method in StringUtil with various scenarios including normal strings, strings with leading and multiple internal whitespaces, strings with leading whitespace and stripLeading true, strings with only whitespace, and strings with invisible characters."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_matchChompTest.java",
        "testclass_name": "TokenQueue_matchChompTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_matchChompTest",
        "description": "Unit tests for the matchChomp method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testMatchChomp_MatchFound",
                "primary_tested": [
                    "TokenQueue.matchChomp(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the matchChomp method when a match is found."
            },
            {
                "name": "testMatchChomp_MatchNotFound",
                "primary_tested": [
                    "TokenQueue.matchChomp(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the matchChomp method when a match is not found."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_toStringTest.java",
        "testclass_name": "Attributes_toStringTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_toStringTest",
        "description": "Unit tests for the toString method of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testToString",
                "primary_tested": [
                    "Attributes.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the toString method of the Attributes class by adding key-value pairs and verifying the output string."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeToTest.java",
        "testclass_name": "TokenQueue_consumeToTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_consumeToTest",
        "description": "Unit tests for the consumeTo method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testConsumeTo_SequenceFound",
                "primary_tested": [
                    "TokenQueue.consumeTo(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeTo method when the sequence is found in the TokenQueue."
            },
            {
                "name": "testConsumeTo_SequenceNotFound",
                "primary_tested": [
                    "TokenQueue.consumeTo(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeTo method when the sequence is not found in the TokenQueue."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_toStringTest.java",
        "testclass_name": "Attribute_toStringTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.parser.ParseSettings;",
            "import org.jsoup.parser.Parser;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_toStringTest",
        "description": "Unit tests for the toString method of the Attribute class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testToString",
                "primary_tested": [
                    "Attribute.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the toString method of the Attribute class to ensure it correctly formats the attribute key and value, including handling special characters like '&'."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_textTest.java",
        "testclass_name": "Document_textTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Document_textTest",
        "description": "Unit tests for the text functionality of the Document class.",
        "class_members": {
            "variables": [
                {
                    "name": "document",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testText",
                "primary_tested": [
                    "Document.text(String)"
                ],
                "associated_methods": [
                    "Document.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the text setting and retrieval functionality of the Document class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_setTrackErrorsTest.java",
        "testclass_name": "Parser_setTrackErrorsTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Parser_setTrackErrorsTest",
        "description": "Unit tests for the setTrackErrors method in the Parser class.",
        "class_members": {
            "variables": [
                {
                    "name": "parser",
                    "type": "Parser"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSetTrackErrorsWithPositiveMaxErrors",
                "primary_tested": [
                    "Parser.setTrackErrors(int)"
                ],
                "associated_methods": [
                    "Parser.isTrackErrors()",
                    "Parser.getErrors().getMaxSize()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setTrackErrors method with a positive maximum number of errors."
            },
            {
                "name": "testSetTrackErrorsWithZeroMaxErrors",
                "primary_tested": [
                    "Parser.setTrackErrors(int)"
                ],
                "associated_methods": [
                    "Parser.isTrackErrors()",
                    "Parser.getErrors().getMaxSize()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Parser"
                    ],
                    "class_members": [
                        {
                            "name": "parser",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setTrackErrors method with zero maximum number of errors."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/TextNode_createFromEncodedTest.java",
        "testclass_name": "TextNode_createFromEncodedTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TextNode_createFromEncodedTest",
        "description": "Unit tests for the TextNode.createFromEncoded method.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCreateFromEncoded",
                "primary_tested": [
                    "TextNode.createFromEncoded(String)"
                ],
                "associated_methods": [
                    "TextNode.getWholeText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ]
                },
                "category": "unit",
                "description": "Tests the creation of a TextNode from encoded text and verifies the decoded text."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/SoftPool_borrowTest.java",
        "testclass_name": "SoftPool_borrowTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Stack;",
            "import java.util.function.Supplier;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "SoftPool_borrowTest",
        "description": "Unit tests for the borrow functionality of the SoftPool class.",
        "class_members": {
            "variables": [
                {
                    "name": "softPool",
                    "type": "SoftPool<char[]>"
                },
                {
                    "name": "BufSize",
                    "type": "static final int"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testBorrowFromEmptyPool",
                "primary_tested": [
                    "SoftPool.borrow()"
                ],
                "external_dependencies": {
                    "modules": [
                        "SoftPool"
                    ],
                    "class_members": [
                        {
                            "name": "softPool",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests borrowing a buffer from an empty SoftPool."
            },
            {
                "name": "testBorrowFromNonEmptyPool",
                "primary_tested": [
                    "SoftPool.borrow()"
                ],
                "associated_methods": [
                    "SoftPool.release(char[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "SoftPool"
                    ],
                    "class_members": [
                        {
                            "name": "softPool",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests borrowing a buffer from a non-empty SoftPool."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_isBlankTest.java",
        "testclass_name": "StringUtil_isBlankTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_isBlankTest",
        "description": "Unit tests for the isBlank method in the StringUtil class.",
        "test_cases": [
            {
                "name": "testIsBlank_NullString",
                "primary_tested": [
                    "StringUtil.isBlank(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the isBlank method with a null string."
            },
            {
                "name": "testIsBlank_EmptyString",
                "primary_tested": [
                    "StringUtil.isBlank(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the isBlank method with an empty string."
            },
            {
                "name": "testIsBlank_WhitespaceString",
                "primary_tested": [
                    "StringUtil.isBlank(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the isBlank method with a string containing only whitespace characters."
            },
            {
                "name": "testIsBlank_NonWhitespaceString",
                "primary_tested": [
                    "StringUtil.isBlank(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the isBlank method with a string containing non-whitespace characters."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_joinTest.java",
        "testclass_name": "StringUtil_joinTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.Collections;",
            "import java.util.Iterator;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "StringUtil_joinTest",
        "description": "Unit tests for the StringUtil.join method.",
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testJoinEmptyIterator",
                "primary_tested": [
                    "StringUtil.join(Iterator<String>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Collections",
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the join functionality of StringUtil with an empty iterator."
            },
            {
                "name": "testJoinSingleElementIterator",
                "primary_tested": [
                    "StringUtil.join(Iterator<String>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Collections",
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the join functionality of StringUtil with an iterator containing a single element."
            },
            {
                "name": "testJoinMultipleElementsIterator",
                "primary_tested": [
                    "StringUtil.join(Iterator<String>,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Arrays",
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the join functionality of StringUtil with an iterator containing multiple elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_joiningTest.java",
        "testclass_name": "StringUtil_joiningTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Arrays;",
            "import java.util.List;",
            "import java.util.stream.Collectors;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "StringUtil_joiningTest",
        "description": "Unit tests for the joining functionality of the StringUtil class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testJoiningWithDelimiter",
                "primary_tested": [
                    "StringUtil.joining(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.util.Arrays",
                        "java.util.List",
                        "java.util.stream.Collectors",
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the joining functionality of the StringUtil with a delimiter."
            },
            {
                "name": "testJoiningWithEmptyList",
                "primary_tested": [
                    "StringUtil.joining(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.util.List",
                        "java.util.stream.Collectors",
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the joining functionality of the StringUtil with an empty list."
            },
            {
                "name": "testJoiningWithSingleElement",
                "primary_tested": [
                    "StringUtil.joining(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "java.util.Arrays",
                        "java.util.List",
                        "java.util.stream.Collectors",
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests the joining functionality of the StringUtil with a single element list."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_matchesAnyTest.java",
        "testclass_name": "TokenQueue_matchesAnyTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_matchesAnyTest",
        "description": "Unit tests for the matchesAny method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testMatchesAnyWithEmptyQueue",
                "primary_tested": [
                    "TokenQueue.matchesAny(char,char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the matchesAny method with an empty queue."
            },
            {
                "name": "testMatchesAnyWithMatchingCharacter",
                "primary_tested": [
                    "TokenQueue.matchesAny(char,char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the matchesAny method with a matching character in the queue."
            },
            {
                "name": "testMatchesAnyWithNonMatchingCharacter",
                "primary_tested": [
                    "TokenQueue.matchesAny(char,char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the matchesAny method with a non-matching character in the queue."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_removeAttrTest.java",
        "testclass_name": "Element_removeAttrTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_removeAttrTest",
        "description": "Unit tests for the removeAttr method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveAttr",
                "primary_tested": [
                    "Element.removeAttr(String)"
                ],
                "associated_methods": [
                    "Element.hasAttr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an attribute from an Element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_htmlTest.java",
        "testclass_name": "Attribute_htmlTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.SerializationException;",
            "import org.jsoup.internal.StringUtil;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import java.io.IOException;"
        ],
        "name": "Attribute_htmlTest",
        "description": "Unit tests for the html method in the Attribute class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testHtml_NormalCase",
                "primary_tested": [
                    "Attribute.html()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Document.OutputSettings"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the normal case of the html method in the Attribute class."
            },
            {
                "name": "testHtml_IOException",
                "primary_tested": [
                    "Attribute.html()"
                ],
                "associated_methods": [
                    "Attribute.html(Appendable,Document.OutputSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Document.OutputSettings",
                        "SerializationException"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the handling of IOException in the html method of the Attribute class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsMatchingTextTest.java",
        "testclass_name": "Element_getElementsMatchingTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import org.jsoup.select.Elements;",
            "import java.util.regex.PatternSyntaxException;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementsMatchingTextTest",
        "description": "Unit tests for the getElementsMatchingText method of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testGetElementsMatchingText_ValidRegex",
                "primary_tested": [
                    "Element.getElementsMatchingText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the getElementsMatchingText method with a valid regex pattern."
            },
            {
                "name": "testGetElementsMatchingText_InvalidRegex",
                "primary_tested": [
                    "Element.getElementsMatchingText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the getElementsMatchingText method with an invalid regex pattern, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Comment_isXmlDeclarationTest.java",
        "testclass_name": "Comment_isXmlDeclarationTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Comment_isXmlDeclarationTest",
        "description": "Unit tests for the isXmlDeclaration method in the Comment class.",
        "class_members": {
            "variables": [
                {
                    "name": "comment",
                    "type": "Comment"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testIsXmlDeclarationTrue",
                "primary_tested": [
                    "Comment.isXmlDeclaration()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Comment"
                    ],
                    "class_members": [
                        {
                            "name": "comment",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the isXmlDeclaration method returns true when the comment data is an XML declaration."
            },
            {
                "name": "testIsXmlDeclarationFalse",
                "primary_tested": [
                    "Comment.isXmlDeclaration()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Comment"
                    ],
                    "class_members": [
                        {
                            "name": "comment",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the isXmlDeclaration method returns false when the comment data is not an XML declaration."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_removeClassTest.java",
        "testclass_name": "Element_removeClassTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_removeClassTest",
        "description": "Unit tests for the removeClass functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveClassSuccess",
                "primary_tested": [
                    "Element.removeClass(String)"
                ],
                "associated_methods": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the successful removal of an existing class from the Element."
            },
            {
                "name": "testRemoveClassNonExistent",
                "primary_tested": [
                    "Element.removeClass(String)"
                ],
                "associated_methods": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of a non-existent class from the Element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/DataNode_cloneTest.java",
        "testclass_name": "DataNode_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "DataNode_cloneTest",
        "description": "Unit tests for the clone functionality of the DataNode class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "DataNode.clone()"
                ],
                "external_dependencies": {
                    "modules": [
                        "DataNode"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the cloning functionality of the DataNode, ensuring that the cloned node has the same data but is a different object."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_isAsciiTest.java",
        "testclass_name": "StringUtil_isAsciiTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_isAsciiTest",
        "description": "Unit tests for the isAscii method in the StringUtil class.",
        "test_cases": [
            {
                "name": "testIsAscii_AllAsciiCharacters",
                "primary_tested": [
                    "StringUtil.isAscii(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests that the isAscii method returns true for a string containing all ASCII characters."
            },
            {
                "name": "testIsAscii_NonAsciiCharacter",
                "primary_tested": [
                    "StringUtil.isAscii(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests that the isAscii method returns false for a string containing a non-ASCII character."
            },
            {
                "name": "testIsAscii_EmptyString",
                "primary_tested": [
                    "StringUtil.isAscii(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests that the isAscii method returns true for an empty string."
            },
            {
                "name": "testIsAscii_NullString",
                "primary_tested": [
                    "StringUtil.isAscii(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "StringUtil"
                    ]
                },
                "category": "unit",
                "description": "Tests that the isAscii method throws an IllegalArgumentException for a null string."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_idTest.java",
        "testclass_name": "Element_idTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_idTest",
        "description": "Unit tests for the id functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testIdWithValidId",
                "primary_tested": [
                    "Element.id(String)"
                ],
                "associated_methods": [
                    "Element.id()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting a valid id on an Element and verifies the id is correctly retrieved."
            },
            {
                "name": "testIdWithNullId",
                "primary_tested": [
                    "Element.id(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that setting a null id on an Element throws an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Comment_cloneTest.java",
        "testclass_name": "Comment_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Comment_cloneTest",
        "description": "Unit tests for the clone functionality of the Comment class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "Comment.clone()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Comment"
                    ]
                },
                "category": "unit",
                "description": "Tests the cloning functionality of the Comment class, ensuring that the cloned object is not the same instance but has the same data."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/TextNode_toStringTest.java",
        "testclass_name": "TextNode_toStringTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "TextNode_toStringTest",
        "description": "Unit tests for the toString method of the TextNode class.",
        "class_members": {
            "variables": [
                {
                    "name": "textNode",
                    "type": "TextNode"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testToString",
                "primary_tested": [
                    "TextNode.toString()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "textNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the toString method of the TextNode class to ensure it correctly formats the text."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Parser_parseBodyFragmentTest.java",
        "testclass_name": "Parser_parseBodyFragmentTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.Node;",
            "import org.jsoup.nodes.TextNode;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Parser_parseBodyFragmentTest",
        "description": "Unit tests for the Parser.parseBodyFragment method which parses HTML fragments into a Document object.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testParseBodyFragment",
                "primary_tested": [
                    "Parser.parseBodyFragment(String,String)"
                ],
                "associated_methods": [
                    "Document.body()",
                    "Element.childNodeSize()",
                    "Element.childNode(int)",
                    "Node.nodeName()",
                    "TextNode.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element",
                        "Node",
                        "TextNode"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the parsing of a simple HTML fragment into a Document object and verifies the structure of the resulting Document."
            },
            {
                "name": "testParseBodyFragmentWithEmptyBody",
                "primary_tested": [
                    "Parser.parseBodyFragment(String,String)"
                ],
                "associated_methods": [
                    "Document.body()",
                    "Element.childNodeSize()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the parsing of an empty HTML fragment into a Document object and verifies that the body has no child nodes."
            },
            {
                "name": "testParseBodyFragmentWithMultipleNodes",
                "primary_tested": [
                    "Parser.parseBodyFragment(String,String)"
                ],
                "associated_methods": [
                    "Document.body()",
                    "Element.childNodeSize()",
                    "Element.childNode(int)",
                    "Node.nodeName()",
                    "TextNode.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element",
                        "Node",
                        "TextNode"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the parsing of an HTML fragment with multiple nodes into a Document object and verifies the structure of the resulting Document."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_appendTextTest.java",
        "testclass_name": "Element_appendTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_appendTextTest",
        "description": "Unit tests for the appendText method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAppendText",
                "primary_tested": [
                    "Element.appendText(String)"
                ],
                "associated_methods": [
                    "Element.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the appendText method with a valid string input."
            },
            {
                "name": "testAppendTextNull",
                "primary_tested": [
                    "Element.appendText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the appendText method with a null input, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/SoftPool_releaseTest.java",
        "testclass_name": "SoftPool_releaseTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.Stack;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "SoftPool_releaseTest",
        "description": "Unit tests for the release functionality of the SoftPool class.",
        "class_members": {
            "variables": [
                {
                    "name": "softPool",
                    "type": "SoftPool<char[]>"
                },
                {
                    "name": "BufSize",
                    "type": "static final int"
                },
                {
                    "name": "MaxIdle",
                    "type": "static final int"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testReleaseWhenStackIsNotFull",
                "primary_tested": [
                    "SoftPool.release(char[])"
                ],
                "associated_methods": [
                    "SoftPool.getStack()"
                ],
                "external_dependencies": {
                    "modules": [
                        "SoftPool",
                        "Stack"
                    ],
                    "class_members": [
                        {
                            "name": "softPool",
                            "type": "variable"
                        },
                        {
                            "name": "BufSize",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the release functionality of the SoftPool when the stack is not full."
            },
            {
                "name": "testReleaseWhenStackIsFull",
                "primary_tested": [
                    "SoftPool.release(char[])"
                ],
                "associated_methods": [
                    "SoftPool.getStack()"
                ],
                "external_dependencies": {
                    "modules": [
                        "SoftPool",
                        "Stack"
                    ],
                    "class_members": [
                        {
                            "name": "softPool",
                            "type": "variable"
                        },
                        {
                            "name": "BufSize",
                            "type": "variable"
                        },
                        {
                            "name": "MaxIdle",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the release functionality of the SoftPool when the stack is full."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_traverseTest.java",
        "testclass_name": "Element_traverseTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.select.NodeVisitor;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;"
        ],
        "name": "Element_traverseTest",
        "description": "Unit tests for the traverse functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ],
            "nested_classes": [
                {
                    "name": "NodeVisitorMock",
                    "description": "Internal mock implementation of NodeVisitor for testing purposes."
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testTraverse",
                "primary_tested": [
                    "Element.traverse(NodeVisitor)"
                ],
                "associated_methods": [
                    "Element.traverse(NodeVisitor)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "NodeVisitor",
                        "NodeVisitorMock"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the traverse functionality of the Element class using a mock NodeVisitor."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_getTest.java",
        "testclass_name": "Attributes_getTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_getTest",
        "description": "Unit tests for the get method in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetExistingKey",
                "primary_tested": [
                    "Attributes.get(String)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the retrieval of an existing key from the Attributes object."
            },
            {
                "name": "testGetNonExistingKey",
                "primary_tested": [
                    "Attributes.get(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the retrieval of a non-existing key from the Attributes object."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_attributeTest.java",
        "testclass_name": "Attributes_attributeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_attributeTest",
        "description": "Unit tests for the attribute retrieval functionality in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAttributeFound",
                "primary_tested": [
                    "Attributes.attribute(String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the retrieval of an existing attribute from the Attributes object."
            },
            {
                "name": "testAttributeNotFound",
                "primary_tested": [
                    "Attributes.attribute(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the retrieval of a non-existent attribute from the Attributes object."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_closestTest.java",
        "testclass_name": "Element_closestTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.select.Evaluator;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_closestTest",
        "description": "Unit tests for the Element.closest method in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testClosestWithMatchingEvaluator",
                "primary_tested": [
                    "Element.closest(Evaluator)"
                ],
                "associated_methods": [
                    "Element.tagName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Evaluator"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the closest method with an evaluator that matches the element's tag name."
            },
            {
                "name": "testClosestWithNonMatchingEvaluator",
                "primary_tested": [
                    "Element.closest(Evaluator)"
                ],
                "associated_methods": [
                    "Element.tagName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Evaluator"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the closest method with an evaluator that does not match the element's tag name."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Entities_getByNameTest.java",
        "testclass_name": "Entities_getByNameTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Entities_getByNameTest",
        "description": "Unit tests for the Entities.getByName method.",
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetByName_ExistingEntity",
                "primary_tested": [
                    "Entities.getByName(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Entities"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getByName method for an existing entity."
            },
            {
                "name": "testGetByName_NonExistingEntity",
                "primary_tested": [
                    "Entities.getByName(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Entities"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getByName method for a non-existing entity."
            },
            {
                "name": "testGetByName_MultiPointsEntity",
                "primary_tested": [
                    "Entities.getByName(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Entities"
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getByName method for an entity with multiple points."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_getEnforcedAttributesTest.java",
        "testclass_name": "Safelist_getEnforcedAttributesTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.jsoup.nodes.Attributes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_getEnforcedAttributesTest",
        "description": "Unit tests for the getEnforcedAttributes method in the Safelist class.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetEnforcedAttributes_withEnforcedAttributes",
                "primary_tested": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "associated_methods": [
                    "Attributes.get(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getEnforcedAttributes method when there are enforced attributes."
            },
            {
                "name": "testGetEnforcedAttributes_withoutEnforcedAttributes",
                "primary_tested": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "associated_methods": [
                    "Attributes.isEmpty()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getEnforcedAttributes method when there are no enforced attributes."
            },
            {
                "name": "testGetEnforcedAttributes_afterRemovingEnforcedAttribute",
                "primary_tested": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "associated_methods": [
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getEnforcedAttributes method after removing an enforced attribute."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_consumeToIgnoreCaseTest.java",
        "testclass_name": "TokenQueue_consumeToIgnoreCaseTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_consumeToIgnoreCaseTest",
        "description": "Unit tests for the consumeToIgnoreCase method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testConsumeToIgnoreCase_MatchFound",
                "primary_tested": [
                    "TokenQueue.consumeToIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeToIgnoreCase method when a match is found."
            },
            {
                "name": "testConsumeToIgnoreCase_NoMatchFound",
                "primary_tested": [
                    "TokenQueue.consumeToIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeToIgnoreCase method when no match is found."
            },
            {
                "name": "testConsumeToIgnoreCase_CaseInsensitiveMatch",
                "primary_tested": [
                    "TokenQueue.consumeToIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the consumeToIgnoreCase method when a case-insensitive match is found."
            },
            {
                "name": "testConsumeToIgnoreCase_EmptyQueue",
                "primary_tested": [
                    "TokenQueue.consumeToIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the consumeToIgnoreCase method when the queue is empty."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/NodeIterator_hasNextTest.java",
        "testclass_name": "NodeIterator_hasNextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "NodeIterator_hasNextTest",
        "description": "Unit tests for the hasNext method of the NodeIterator class.",
        "class_members": {
            "variables": [
                {
                    "name": "rootNode",
                    "type": "Node"
                },
                {
                    "name": "nodeIterator",
                    "type": "NodeIterator<Node>"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasNextWithNextNode",
                "primary_tested": [
                    "NodeIterator.hasNext()"
                ],
                "external_dependencies": {
                    "modules": [
                        "NodeIterator",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "nodeIterator",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasNext method when there is a next node available."
            },
            {
                "name": "testHasNextWithoutNextNode",
                "primary_tested": [
                    "NodeIterator.hasNext()"
                ],
                "associated_methods": [
                    "NodeIterator.next()"
                ],
                "external_dependencies": {
                    "modules": [
                        "NodeIterator",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "nodeIterator",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasNext method when there is no next node available after consuming all nodes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_relaxedTest.java",
        "testclass_name": "Safelist_relaxedTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.jsoup.nodes.Attribute;",
            "import org.jsoup.nodes.Attributes;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.parser.Tag;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_relaxedTest",
        "description": "Unit tests for the relaxed Safelist functionality in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRelaxedSafelist_isSafeTag",
                "primary_tested": [
                    "Safelist.isSafeTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the isSafeTag method of the relaxed Safelist to ensure it correctly identifies safe and unsafe tags."
            },
            {
                "name": "testRelaxedSafelist_isSafeAttribute",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "associated_methods": [
                    "Attributes.put(Attribute)",
                    "Element.Element(Tag,String,Attributes)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attributes",
                        "Attribute",
                        "Element",
                        "Tag"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the isSafeAttribute method of the relaxed Safelist to ensure it correctly identifies safe and unsafe attributes."
            },
            {
                "name": "testRelaxedSafelist_getEnforcedAttributes",
                "primary_tested": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "associated_methods": [
                    "Attributes.isEmpty()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getEnforcedAttributes method of the relaxed Safelist to ensure it returns the correct enforced attributes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_addTagsTest.java",
        "testclass_name": "Safelist_addTagsTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_addTagsTest",
        "description": "Unit tests for the Safelist class's addTags method.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAddTags_ValidTags",
                "primary_tested": [
                    "Safelist.addTags(String[])"
                ],
                "associated_methods": [
                    "Safelist.isSafeTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the addition of valid tags to the Safelist."
            },
            {
                "name": "testAddTags_NullTags",
                "primary_tested": [
                    "Safelist.addTags(String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when null tags are passed to the addTags method."
            },
            {
                "name": "testAddTags_EmptyTag",
                "primary_tested": [
                    "Safelist.addTags(String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when an empty tag is passed to the addTags method."
            },
            {
                "name": "testAddTags_NoscriptTag",
                "primary_tested": [
                    "Safelist.addTags(String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when the 'noscript' tag is passed to the addTags method."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_textTest.java",
        "testclass_name": "Element_textTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.internal.StringUtil;",
            "import org.jsoup.select.NodeTraversor;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Element_textTest",
        "description": "Unit tests for the text functionality of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testText",
                "primary_tested": [
                    "Element.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the text extraction functionality of the Element class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_basicWithImagesTest.java",
        "testclass_name": "Safelist_basicWithImagesTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.jsoup.nodes.Attribute;",
            "import org.jsoup.nodes.Attributes;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.parser.Tag;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_basicWithImagesTest",
        "description": "Tests for the Safelist class with basic image handling.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testBasicWithImages_AddsImgTag",
                "primary_tested": [
                    "Safelist.isSafeTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests if the 'img' tag is considered safe by the Safelist."
            },
            {
                "name": "testBasicWithImages_AddsImgAttributes",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "associated_methods": [
                    "Element.attributes()",
                    "Attributes.put(String,String)",
                    "Element.attributes().addAll(Attributes)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attributes",
                        "Attribute",
                        "Tag"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests if the 'img' tag attributes are considered safe by the Safelist."
            },
            {
                "name": "testBasicWithImages_AddsImgProtocols",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "associated_methods": [
                    "Element.attributes()",
                    "Attributes.put(String,String)",
                    "Element.attributes().addAll(Attributes)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attributes",
                        "Attribute",
                        "Tag"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests if the 'img' tag protocols (http, https) are considered safe by the Safelist."
            },
            {
                "name": "testBasicWithImages_InvalidProtocol",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "associated_methods": [
                    "Element.attributes()",
                    "Attributes.put(String,String)",
                    "Element.attributes().addAll(Attributes)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attributes",
                        "Attribute",
                        "Tag"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests if an invalid protocol (ftp) for the 'img' tag is considered unsafe by the Safelist."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_removeTagsTest.java",
        "testclass_name": "Safelist_removeTagsTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_removeTagsTest",
        "description": "Unit tests for the removeTags method of the Safelist class.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveTags_ValidTags",
                "primary_tested": [
                    "Safelist.removeTags(String[])"
                ],
                "associated_methods": [
                    "Safelist.isSafeTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of valid tags from the Safelist."
            },
            {
                "name": "testRemoveTags_InvalidTags",
                "primary_tested": [
                    "Safelist.removeTags(String[])"
                ],
                "associated_methods": [
                    "Safelist.isSafeTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of invalid tags from the Safelist."
            },
            {
                "name": "testRemoveTags_NullTags",
                "primary_tested": [
                    "Safelist.removeTags(String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior of the removeTags method when null tags are provided."
            },
            {
                "name": "testRemoveTags_EmptyTags",
                "primary_tested": [
                    "Safelist.removeTags(String[])"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior of the removeTags method when empty tags are provided."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_prependTextTest.java",
        "testclass_name": "Element_prependTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_prependTextTest",
        "description": "Unit tests for the prependText method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testPrependText",
                "primary_tested": [
                    "Element.prependText(String)"
                ],
                "associated_methods": [
                    "Element.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prependText method with a valid string input."
            },
            {
                "name": "testPrependTextNull",
                "primary_tested": [
                    "Element.prependText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prependText method with a null input, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_removeTest.java",
        "testclass_name": "Attributes_removeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_removeTest",
        "description": "Unit tests for the remove functionality of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveExistingKey",
                "primary_tested": [
                    "Attributes.remove(String)"
                ],
                "associated_methods": [
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an existing key from the Attributes."
            },
            {
                "name": "testRemoveNonExistingKey",
                "primary_tested": [
                    "Attributes.remove(String)"
                ],
                "associated_methods": [
                    "Attributes.size()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of a non-existing key from the Attributes, ensuring the size does not change."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_charsetTest.java",
        "testclass_name": "Document_charsetTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import java.nio.charset.Charset;",
            "import java.nio.charset.StandardCharsets;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Document_charsetTest",
        "description": "Unit tests for the charset functionality in the Document class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testCharset",
                "primary_tested": [
                    "Document.charset(Charset)"
                ],
                "associated_methods": [
                    "Document.updateMetaCharsetElement(boolean)",
                    "Document.outputSettings(Document.OutputSettings)",
                    "Document.OutputSettings.charset(Charset)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Document.OutputSettings",
                        "Charset",
                        "StandardCharsets"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the charset setting and retrieval functionality of the Document class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/FormElement_cloneTest.java",
        "testclass_name": "FormElement_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import org.jsoup.parser.Tag;"
        ],
        "name": "FormElement_cloneTest",
        "description": "Unit tests for the clone functionality of the FormElement class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "FormElement.clone()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "Attributes",
                        "FormElement"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the cloning functionality of the FormElement class, ensuring that the cloned object is not the same instance but has the same properties."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/TextNode_textTest.java",
        "testclass_name": "TextNode_textTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TextNode_textTest",
        "description": "Unit tests for the TextNode class's text method.",
        "class_members": {
            "variables": [
                {
                    "name": "textNode",
                    "type": "TextNode"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testText_SetText_ReturnsSameInstance",
                "primary_tested": [
                    "TextNode.text(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "textNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that setting text on a TextNode returns the same instance."
            },
            {
                "name": "testText_SetText_UpdatesCoreValue",
                "primary_tested": [
                    "TextNode.text(String)"
                ],
                "associated_methods": [
                    "TextNode.getWholeText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "textNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that setting text on a TextNode updates the core value."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/TokenQueue_chompBalancedTest.java",
        "testclass_name": "TokenQueue_chompBalancedTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TokenQueue_chompBalancedTest",
        "description": "Unit tests for the chompBalanced method in the TokenQueue class.",
        "class_members": {
            "variables": [
                {
                    "name": "tokenQueue",
                    "type": "TokenQueue"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testChompBalancedSimple",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with a simple balanced input."
            },
            {
                "name": "testChompBalancedNested",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with nested balanced input."
            },
            {
                "name": "testChompBalancedUnbalanced",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with unbalanced input, expecting an exception."
            },
            {
                "name": "testChompBalancedWithQuotes",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with balanced input containing quotes."
            },
            {
                "name": "testChompBalancedWithEscapes",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with balanced input containing escaped characters."
            },
            {
                "name": "testChompBalancedEmpty",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with an empty input."
            },
            {
                "name": "testChompBalancedNoMatch",
                "primary_tested": [
                    "TokenQueue.chompBalanced(char,char)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TokenQueue"
                    ],
                    "class_members": [
                        {
                            "name": "tokenQueue",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the chompBalanced method with input that does not contain the specified delimiters."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_normalizeTest.java",
        "testclass_name": "Attributes_normalizeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_normalizeTest",
        "description": "Unit tests for the normalize functionality of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testNormalizeWithInternalKey",
                "primary_tested": [
                    "Attributes.normalize()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attributes.get(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the normalization functionality of the Attributes class with an internal key."
            },
            {
                "name": "testNormalizeWithNonInternalKey",
                "primary_tested": [
                    "Attributes.normalize()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attributes.get(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the normalization functionality of the Attributes class with a non-internal key."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_titleTest.java",
        "testclass_name": "Document_titleTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Document_titleTest",
        "description": "Unit tests for the Document class's title method.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testTitle_withTitleElement",
                "primary_tested": [
                    "Document.title()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document"
                    ]
                },
                "category": "unit",
                "description": "Tests the title method of the Document class when a title element is present in the HTML."
            },
            {
                "name": "testTitle_withoutTitleElement",
                "primary_tested": [
                    "Document.title()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document"
                    ]
                },
                "category": "unit",
                "description": "Tests the title method of the Document class when no title element is present in the HTML."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_addClassTest.java",
        "testclass_name": "Element_addClassTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_addClassTest",
        "description": "Unit tests for the addClass method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAddClassSuccess",
                "primary_tested": [
                    "Element.addClass(String)"
                ],
                "associated_methods": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the successful addition of a class to an Element."
            },
            {
                "name": "testAddClassNull",
                "primary_tested": [
                    "Element.addClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the handling of null input when adding a class to an Element, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_lastElementSiblingTest.java",
        "testclass_name": "Element_lastElementSiblingTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_lastElementSiblingTest",
        "description": "Unit tests for the lastElementSibling method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "parent",
                    "type": "Element"
                },
                {
                    "name": "child1",
                    "type": "Element"
                },
                {
                    "name": "child2",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testLastElementSiblingWithParent",
                "primary_tested": [
                    "Element.lastElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parent",
                            "type": "variable"
                        },
                        {
                            "name": "child1",
                            "type": "variable"
                        },
                        {
                            "name": "child2",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the lastElementSibling method when the element has a parent."
            },
            {
                "name": "testLastElementSiblingWithoutParent",
                "primary_tested": [
                    "Element.lastElementSibling()"
                ],
                "associated_methods": [
                    "Element.remove()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "child1",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the lastElementSibling method when the element does not have a parent."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_nodeNameTest.java",
        "testclass_name": "Document_nodeNameTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Document_nodeNameTest",
        "description": "Unit test for the nodeName method of the Document class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testNodeName",
                "primary_tested": [
                    "Document.nodeName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the nodeName method of the Document class to ensure it returns '#document'."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_cloneTest.java",
        "testclass_name": "Attributes_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_cloneTest",
        "description": "Unit tests for the clone functionality of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "Attributes.clone()"
                ],
                "associated_methods": [
                    "Attributes.size()",
                    "Attributes.get(String)",
                    "Attributes.put(String,String)",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the cloning functionality of the Attributes class, verifying that the clone is an independent copy and modifications to the original do not affect the clone."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_normalNameTest.java",
        "testclass_name": "Element_normalNameTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.parser.Tag;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Element_normalNameTest",
        "description": "Unit tests for the normalName method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testNormalName",
                "primary_tested": [
                    "Element.normalName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the normalName method of the Element class to ensure it returns the expected normalized tag name."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_getKeyTest.java",
        "testclass_name": "Attribute_getKeyTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_getKeyTest",
        "description": "Unit tests for the getKey method of the Attribute class.",
        "class_members": {
            "variables": [
                {
                    "name": "attribute",
                    "type": "Attribute"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetKey",
                "primary_tested": [
                    "Attribute.getKey()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getKey method of the Attribute class to ensure it returns the correct key."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/TextNode_cloneTest.java",
        "testclass_name": "TextNode_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TextNode_cloneTest",
        "description": "Unit tests for the clone functionality of the TextNode class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "TextNode.clone()"
                ],
                "associated_methods": [
                    "TextNode.getWholeText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the cloning functionality of the TextNode, ensuring that the cloned object is not the same instance but has the same text content."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_appendChildTest.java",
        "testclass_name": "Element_appendChildTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_appendChildTest",
        "description": "Unit tests for the appendChild method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAppendChild",
                "primary_tested": [
                    "Element.appendChild(Node)"
                ],
                "associated_methods": [
                    "Element.childNodeSize()",
                    "Element.child(int)",
                    "Node.parent()",
                    "Node.siblingIndex()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the appendChild method to ensure the child node is added correctly and the method returns the correct element."
            },
            {
                "name": "testAppendChildNull",
                "primary_tested": [
                    "Element.appendChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the appendChild method to ensure it throws an IllegalArgumentException when a null child is provided."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_cloneTest.java",
        "testclass_name": "Attribute_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_cloneTest",
        "description": "Unit tests for the clone functionality of the Attribute class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "Attribute.clone()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the cloning functionality of the Attribute class, ensuring that the cloned object is equal to the original and has the same hash code."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_parentTest.java",
        "testclass_name": "Element_parentTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_parentTest",
        "description": "Unit tests for the parent functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testParentWithParentNode",
                "primary_tested": [
                    "Element.parent()"
                ],
                "associated_methods": [
                    "Element.parentNode"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the parent functionality of the Element class when it has a parent node."
            },
            {
                "name": "testParentWithoutParentNode",
                "primary_tested": [
                    "Element.parent()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the parent functionality of the Element class when it does not have a parent node."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_forEachNodeTest.java",
        "testclass_name": "Element_forEachNodeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.concurrent.atomic.AtomicInteger;",
            "import java.util.function.Consumer;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Element_forEachNodeTest",
        "description": "Unit tests for the forEachNode method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testForEachNode",
                "primary_tested": [
                    "Element.forEachNode(Consumer<? super Node>)"
                ],
                "associated_methods": [
                    "Element.tagName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "Node",
                        "AtomicInteger",
                        "Consumer"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the forEachNode method of the Element class to ensure it correctly iterates over child nodes and counts specific elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_putTest.java",
        "testclass_name": "Attributes_putTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_putTest",
        "description": "Unit tests for the put method of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testPutNewKey",
                "primary_tested": [
                    "Attributes.put(String,String)"
                ],
                "associated_methods": [
                    "Attributes.get(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the put method when adding a new key-value pair to the Attributes."
            },
            {
                "name": "testPutExistingKey",
                "primary_tested": [
                    "Attributes.put(String,String)"
                ],
                "associated_methods": [
                    "Attributes.get(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the put method when updating an existing key-value pair in the Attributes."
            },
            {
                "name": "testPutNullKey",
                "primary_tested": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the put method when attempting to add a null key, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_previousElementSiblingTest.java",
        "testclass_name": "Element_previousElementSiblingTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_previousElementSiblingTest",
        "description": "Unit tests for the previousElementSibling method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "parent",
                    "type": "Element"
                },
                {
                    "name": "child1",
                    "type": "Element"
                },
                {
                    "name": "child2",
                    "type": "Element"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testPreviousElementSibling",
                "primary_tested": [
                    "Element.previousElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parent",
                            "type": "variable"
                        },
                        {
                            "name": "child1",
                            "type": "variable"
                        },
                        {
                            "name": "child2",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests that the previousElementSibling method returns the correct sibling element."
            },
            {
                "name": "testPreviousElementSiblingNoSibling",
                "primary_tested": [
                    "Element.previousElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parent",
                            "type": "variable"
                        },
                        {
                            "name": "child1",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests that the previousElementSibling method returns null when there is no previous sibling."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_nextElementSiblingTest.java",
        "testclass_name": "Element_nextElementSiblingTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_nextElementSiblingTest",
        "description": "Unit tests for the nextElementSibling method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                },
                {
                    "name": "siblingElement",
                    "type": "Element"
                },
                {
                    "name": "parentElement",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testNextElementSiblingWithNoSibling",
                "primary_tested": [
                    "Element.nextElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the nextElementSibling method when there is no sibling element."
            },
            {
                "name": "testNextElementSiblingWithNonElementSibling",
                "primary_tested": [
                    "Element.nextElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Node",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        },
                        {
                            "name": "parentElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the nextElementSibling method when the sibling is a non-element node."
            },
            {
                "name": "testNextElementSiblingWithElementSibling",
                "primary_tested": [
                    "Element.nextElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        },
                        {
                            "name": "siblingElement",
                            "type": "variable"
                        },
                        {
                            "name": "parentElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the nextElementSibling method when there is an element sibling."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_removeEnforcedAttributeTest.java",
        "testclass_name": "Safelist_removeEnforcedAttributeTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_removeEnforcedAttributeTest",
        "description": "Unit tests for the removal of enforced attributes in the Safelist class.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveEnforcedAttribute_ExistingAttribute",
                "primary_tested": [
                    "Safelist.removeEnforcedAttribute(String,String)"
                ],
                "associated_methods": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an existing enforced attribute from the Safelist."
            },
            {
                "name": "testRemoveEnforcedAttribute_NonExistingAttribute",
                "primary_tested": [
                    "Safelist.removeEnforcedAttribute(String,String)"
                ],
                "associated_methods": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of a non-existing enforced attribute from the Safelist."
            },
            {
                "name": "testRemoveEnforcedAttribute_NonExistingTag",
                "primary_tested": [
                    "Safelist.removeEnforcedAttribute(String,String)"
                ],
                "associated_methods": [
                    "Safelist.getEnforcedAttributes(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an enforced attribute from a non-existing tag in the Safelist."
            },
            {
                "name": "testRemoveEnforcedAttribute_EmptyTagAndAttribute",
                "primary_tested": [
                    "Safelist.removeEnforcedAttribute(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an enforced attribute with empty tag and attribute names, expecting an IllegalArgumentException."
            },
            {
                "name": "testRemoveEnforcedAttribute_NullTagAndAttribute",
                "primary_tested": [
                    "Safelist.removeEnforcedAttribute(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an enforced attribute with null tag and attribute names, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_documentTypeTest.java",
        "testclass_name": "Document_documentTypeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.parser.Parser;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Document_documentTypeTest",
        "description": "Unit tests for the DocumentType functionality within the Document class.",
        "class_members": {
            "variables": [
                {
                    "name": "document",
                    "type": "Document"
                }
            ],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testDocumentTypeFound",
                "primary_tested": [
                    "Document.documentType()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "DocumentType"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the document type is correctly found and returned when appended to the document."
            },
            {
                "name": "testDocumentTypeNotFound",
                "primary_tested": [
                    "Document.documentType()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the document type is correctly identified as not found when no document type is appended."
            },
            {
                "name": "testDocumentTypeFoundAfterLeafNode",
                "primary_tested": [
                    "Document.documentType()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "DocumentType",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the document type is correctly found and returned even when appended after a leaf node (text node)."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/parser/Tag_valueOfTest.java",
        "testclass_name": "Tag_valueOfTest",
        "dependencies": [
            "package org.jsoup.parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Tag_valueOfTest",
        "description": "Unit tests for the Tag.valueOf method in the Jsoup parser.",
        "class_members": {
            "variables": [
                {
                    "name": "settings",
                    "type": "ParseSettings"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testValueOfKnownTag",
                "primary_tested": [
                    "Tag.valueOf(String,String,ParseSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "ParseSettings"
                    ],
                    "class_members": [
                        {
                            "name": "settings",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the valueOf method for a known tag, ensuring the tag is created and has the correct name and namespace."
            },
            {
                "name": "testValueOfUnknownTag",
                "primary_tested": [
                    "Tag.valueOf(String,String,ParseSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "ParseSettings"
                    ],
                    "class_members": [
                        {
                            "name": "settings",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the valueOf method for an unknown tag, ensuring the tag is created and has the correct name, namespace, and block status."
            },
            {
                "name": "testValueOfPreserveTagCase",
                "primary_tested": [
                    "Tag.valueOf(String,String,ParseSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "ParseSettings"
                    ],
                    "class_members": [
                        {
                            "name": "settings",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the valueOf method with settings to preserve tag case, ensuring the tag is created and has the correct name and namespace."
            },
            {
                "name": "testValueOfNormalizeTag",
                "primary_tested": [
                    "Tag.valueOf(String,String,ParseSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "ParseSettings"
                    ],
                    "class_members": [
                        {
                            "name": "settings",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the valueOf method with settings to normalize the tag, ensuring the tag is created and has the correct name and namespace."
            },
            {
                "name": "testValueOfInvalidTagName",
                "primary_tested": [
                    "Tag.valueOf(String,String,ParseSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "ParseSettings"
                    ],
                    "class_members": [
                        {
                            "name": "settings",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the valueOf method with an invalid tag name, ensuring an IllegalArgumentException is thrown."
            },
            {
                "name": "testValueOfInvalidNamespace",
                "primary_tested": [
                    "Tag.valueOf(String,String,ParseSettings)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Tag",
                        "ParseSettings"
                    ],
                    "class_members": [
                        {
                            "name": "settings",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the valueOf method with an invalid namespace, ensuring an IllegalArgumentException is thrown."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_tagNameTest.java",
        "testclass_name": "Element_tagNameTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.parser.Tag;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_tagNameTest",
        "description": "Unit tests for the tagName functionality of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testTagName",
                "primary_tested": [
                    "Element.tagName(String,String)"
                ],
                "associated_methods": [
                    "Tag.getName()",
                    "Tag.namespace()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Tag"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the tagName functionality of the Element class, ensuring the tag name and namespace are correctly set and retrieved."
            },
            {
                "name": "testTagNameWithEmptyTagName",
                "primary_tested": [
                    "Element.tagName(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the tagName functionality of the Element class with an empty tag name, expecting an IllegalArgumentException."
            },
            {
                "name": "testTagNameWithEmptyNamespace",
                "primary_tested": [
                    "Element.tagName(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the tagName functionality of the Element class with an empty namespace, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_elementSiblingIndexTest.java",
        "testclass_name": "Element_elementSiblingIndexTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;",
            "import static org.mockito.Mockito.*;"
        ],
        "name": "Element_elementSiblingIndexTest",
        "description": "Unit tests for the elementSiblingIndex method in the Element class.",
        "class_members": {},
        "fixtures": [],
        "test_cases": [
            {
                "name": "testElementSiblingIndex_NoParent",
                "primary_tested": [
                    "Element.elementSiblingIndex()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the elementSiblingIndex method when the element has no parent."
            },
            {
                "name": "testElementSiblingIndex_WithParent",
                "primary_tested": [
                    "Element.elementSiblingIndex()"
                ],
                "associated_methods": [
                    "Element.appendChild(Element)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parent",
                            "type": "variable"
                        },
                        {
                            "name": "child",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the elementSiblingIndex method when the element has a parent."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByAttributeTest.java",
        "testclass_name": "Element_getElementsByAttributeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementsByAttributeTest",
        "description": "Unit tests for the getElementsByAttribute method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetElementsByAttribute",
                "primary_tested": [
                    "Element.getElementsByAttribute(String)"
                ],
                "associated_methods": [
                    "Elements.size()",
                    "Elements.first()",
                    "Element.attr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements",
                        "Document",
                        "Jsoup"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementsByAttribute method to ensure it correctly retrieves elements by attribute and checks the attribute value."
            },
            {
                "name": "testGetElementsByAttributeEmptyKey",
                "primary_tested": [
                    "Element.getElementsByAttribute(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementsByAttribute method with an empty attribute key to ensure it throws an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_removeAttributesTest.java",
        "testclass_name": "Safelist_removeAttributesTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import org.jsoup.nodes.Attribute;"
        ],
        "name": "Safelist_removeAttributesTest",
        "description": "Unit tests for the removeAttributes method in the Safelist class.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveAttributes_SingleTag",
                "primary_tested": [
                    "Safelist.removeAttributes(String,String...)"
                ],
                "associated_methods": [
                    "Safelist.isSafeAttribute(String,String,Attribute)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of a single attribute from a specific tag."
            },
            {
                "name": "testRemoveAttributes_AllTags",
                "primary_tested": [
                    "Safelist.removeAttributes(String,String...)"
                ],
                "associated_methods": [
                    "Safelist.isSafeAttribute(String,String,Attribute)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an attribute from all tags."
            },
            {
                "name": "testRemoveAttributes_TagNotAllowed",
                "primary_tested": [
                    "Safelist.removeAttributes(String,String...)"
                ],
                "associated_methods": [
                    "Safelist.isSafeAttribute(String,String,Attribute)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removal of an attribute from a tag that is not allowed."
            },
            {
                "name": "testRemoveAttributes_NoAttributesSupplied",
                "primary_tested": [
                    "Safelist.removeAttributes(String,String...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when no attributes are supplied for removal."
            },
            {
                "name": "testRemoveAttributes_EmptyTag",
                "primary_tested": [
                    "Safelist.removeAttributes(String,String...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when an empty tag is supplied for attribute removal."
            },
            {
                "name": "testRemoveAttributes_NullAttributes",
                "primary_tested": [
                    "Safelist.removeAttributes(String,String...)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when null attributes are supplied for removal."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_sizeTest.java",
        "testclass_name": "Attributes_sizeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_sizeTest",
        "description": "Unit tests for the size functionality of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSizeEmpty",
                "primary_tested": [
                    "Attributes.size()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the size of an empty Attributes object."
            },
            {
                "name": "testSizeAfterAdd",
                "primary_tested": [
                    "Attributes.size()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the size of the Attributes object after adding an attribute."
            },
            {
                "name": "testSizeAfterRemove",
                "primary_tested": [
                    "Attributes.size()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attributes.remove(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the size of the Attributes object after adding and then removing an attribute."
            },
            {
                "name": "testSizeAfterAddAll",
                "primary_tested": [
                    "Attributes.size()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attributes.addAll(Attributes)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the size of the Attributes object after adding multiple attributes using addAll."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_hasDeclaredValueForKeyTest.java",
        "testclass_name": "Attributes_hasDeclaredValueForKeyTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_hasDeclaredValueForKeyTest",
        "description": "Unit tests for the hasDeclaredValueForKey method in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasDeclaredValueForKey_KeyExistsWithValue",
                "primary_tested": [
                    "Attributes.hasDeclaredValueForKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasDeclaredValueForKey method when the key exists with a value."
            },
            {
                "name": "testHasDeclaredValueForKey_KeyExistsWithoutValue",
                "primary_tested": [
                    "Attributes.hasDeclaredValueForKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasDeclaredValueForKey method when the key exists without a value."
            },
            {
                "name": "testHasDeclaredValueForKey_KeyDoesNotExist",
                "primary_tested": [
                    "Attributes.hasDeclaredValueForKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasDeclaredValueForKey method when the key does not exist."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_headTest.java",
        "testclass_name": "Document_headTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Document_headTest",
        "description": "Unit tests for the head element functionality in the Document class.",
        "class_members": {
            "variables": [
                {
                    "name": "document",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHeadElementPresent",
                "primary_tested": [
                    "Document.head()"
                ],
                "associated_methods": [
                    "Document.appendElement(String)",
                    "Element.appendElement(String)",
                    "Element.tagName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the head element is correctly returned when it already exists in the document."
            },
            {
                "name": "testHeadElementCreated",
                "primary_tested": [
                    "Document.head()"
                ],
                "associated_methods": [
                    "Document.appendElement(String)",
                    "Element.tagName()",
                    "Element.children()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that a new head element is created and returned when it does not already exist in the document."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/DataNode_setWholeDataTest.java",
        "testclass_name": "DataNode_setWholeDataTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "DataNode_setWholeDataTest",
        "description": "Unit test for the setWholeData method of the DataNode class.",
        "class_members": {
            "variables": [
                {
                    "name": "dataNode",
                    "type": "DataNode"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testSetWholeData",
                "primary_tested": [
                    "DataNode.setWholeData(String)"
                ],
                "associated_methods": [
                    "DataNode.getWholeData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "DataNode"
                    ],
                    "class_members": [
                        {
                            "name": "dataNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the setWholeData method of the DataNode class, ensuring that the data is correctly updated and retrieved."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_connectionTest.java",
        "testclass_name": "Document_connectionTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Connection;",
            "import org.jsoup.Jsoup;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;",
            "import static org.junit.jupiter.api.Assertions.assertSame;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.when;"
        ],
        "name": "Document_connectionTest",
        "description": "Unit tests for the connection method in the Document class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testConnection_WhenConnectionIsNull",
                "primary_tested": [
                    "Document.connection()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Connection"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the connection method when the connection is initially null."
            },
            {
                "name": "testConnection_WhenConnectionIsNotNull",
                "primary_tested": [
                    "Document.connection()"
                ],
                "associated_methods": [
                    "Document.connection(Connection)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Connection"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the connection method when the connection is not null."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_lastElementChildTest.java",
        "testclass_name": "Element_lastElementChildTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_lastElementChildTest",
        "description": "Unit tests for the lastElementChild method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testLastElementChildWithNoChildren",
                "primary_tested": [
                    "Element.lastElementChild()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the lastElementChild method when the element has no children."
            },
            {
                "name": "testLastElementChildWithNonElementChildren",
                "primary_tested": [
                    "Element.lastElementChild()"
                ],
                "associated_methods": [
                    "Element.appendChild(TextNode)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the lastElementChild method when the element has non-element children (TextNodes)."
            },
            {
                "name": "testLastElementChildWithElementChildren",
                "primary_tested": [
                    "Element.lastElementChild()"
                ],
                "associated_methods": [
                    "Element.appendChild(Element)",
                    "Element.appendChild(TextNode)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the lastElementChild method when the element has both element and non-element children."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_createFromEncodedTest.java",
        "testclass_name": "Attribute_createFromEncodedTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Attribute_createFromEncodedTest",
        "description": "Unit tests for the Attribute.createFromEncoded method.",
        "class_members": {
            "variables": [
                {
                    "name": "unencodedKey",
                    "type": "String"
                },
                {
                    "name": "encodedValue",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "type": "Attribute"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testCreateFromEncoded",
                "primary_tested": [
                    "Attribute.createFromEncoded(String,String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "unencodedKey",
                            "type": "variable"
                        },
                        {
                            "name": "encodedValue",
                            "type": "variable"
                        },
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the creation of an Attribute from encoded values and verifies the key and value of the created Attribute."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_parentsTest.java",
        "testclass_name": "Element_parentsTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.parser.ParseSettings;",
            "import org.jsoup.parser.Parser;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_parentsTest",
        "description": "Unit tests for the parents functionality of the Element class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testParents",
                "primary_tested": [
                    "Element.parents()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the parents functionality of the Element class, ensuring the correct number and tag names of parent elements."
            },
            {
                "name": "testParentsWithRoot",
                "primary_tested": [
                    "Element.parents()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the parents functionality of the Element class with a root element, ensuring the correct number and tag names of parent elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_siblingElementsTest.java",
        "testclass_name": "Element_siblingElementsTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import static org.mockito.Mockito.*;"
        ],
        "name": "Element_siblingElementsTest",
        "description": "Unit tests for the siblingElements method of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testSiblingElements_NoParent",
                "primary_tested": [
                    "Element.siblingElements()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the siblingElements method when the element has no parent."
            },
            {
                "name": "testSiblingElements_WithParent",
                "primary_tested": [
                    "Element.siblingElements()"
                ],
                "associated_methods": [
                    "Element.appendChild(Element)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the siblingElements method when the element has a parent with other child elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_ownTextTest.java",
        "testclass_name": "Element_ownTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_ownTextTest",
        "description": "Unit tests for the ownText method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testOwnText",
                "primary_tested": [
                    "Element.ownText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the ownText method when text is directly appended to the element."
            },
            {
                "name": "testOwnTextWithChildElements",
                "primary_tested": [
                    "Element.ownText()"
                ],
                "associated_methods": [
                    "Element.appendChild(Element)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the ownText method when the element has child elements with text."
            },
            {
                "name": "testOwnTextWithNoText",
                "primary_tested": [
                    "Element.ownText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the ownText method when no text is appended to the element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_cloneTest.java",
        "testclass_name": "Element_cloneTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_cloneTest",
        "description": "Unit tests for the clone functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testClone",
                "primary_tested": [
                    "Element.clone()"
                ],
                "associated_methods": [
                    "Element.tagName()",
                    "Element.childNodeSize()",
                    "Element.child(int)",
                    "Element.outerHtml()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the clone functionality of the Element class, ensuring that the cloned element is a different instance but has the same tag name, child nodes, and their content."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_childNodeSizeTest.java",
        "testclass_name": "Element_childNodeSizeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Element_childNodeSizeTest",
        "description": "Unit tests for the childNodeSize method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testChildNodeSize",
                "primary_tested": [
                    "Element.childNodeSize()"
                ],
                "associated_methods": [
                    "Element.ensureChildNodes()",
                    "Element.appendChild(TextNode)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the childNodeSize method of the Element class by ensuring child nodes are initialized and appending a child node, then verifying the count of child nodes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_prependTest.java",
        "testclass_name": "Element_prependTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.parser.Parser;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_prependTest",
        "description": "Unit tests for the prepend functionality of the Element class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testPrependValidHtml",
                "primary_tested": [
                    "Element.prepend(String)"
                ],
                "associated_methods": [
                    "Element.childNodeSize()",
                    "Element.child(int)",
                    "Node.nodeName()",
                    "Node.childNode(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prepend functionality of the Element class with valid HTML."
            },
            {
                "name": "testPrependNullHtml",
                "primary_tested": [
                    "Element.prepend(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prepend functionality of the Element class with null HTML, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/NodeIterator_nextTest.java",
        "testclass_name": "NodeIterator_nextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Node;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.NoSuchElementException;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "NodeIterator_nextTest",
        "description": "Unit tests for the NodeIterator's next method.",
        "class_members": {
            "variables": [
                {
                    "name": "html",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "type": "Document"
                },
                {
                    "name": "it",
                    "type": "NodeIterator<Node>"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testNextSuccess",
                "primary_tested": [
                    "NodeIterator.next()"
                ],
                "associated_methods": [
                    "NodeIterator.hasNext()",
                    "Document.childNode(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "NodeIterator"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        },
                        {
                            "name": "it",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the successful iteration over nodes using the NodeIterator's next method."
            },
            {
                "name": "testNextThrowsNoSuchElementException",
                "primary_tested": [
                    "NodeIterator.next()"
                ],
                "associated_methods": [
                    "NodeIterator.hasNext()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "NodeIterator"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        },
                        {
                            "name": "it",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the NodeIterator's next method throws a NoSuchElementException when there are no more elements to iterate over."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_forEachTest.java",
        "testclass_name": "Element_forEachTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.concurrent.atomic.AtomicBoolean;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_forEachTest",
        "description": "Unit tests for the forEach functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testForEach",
                "primary_tested": [
                    "Element.forEach(Consumer<? super Element>)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "AtomicBoolean"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the forEach method of the Element class to ensure it iterates over child elements and sets the visited flag."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_addAllTest.java",
        "testclass_name": "Attributes_addAllTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_addAllTest",
        "description": "Unit tests for the addAll method of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAddAllWithEmptyAttributes",
                "primary_tested": [
                    "Attributes.addAll(Attributes)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the addAll method when adding empty attributes to an existing empty attributes object."
            },
            {
                "name": "testAddAllWithNonEmptyAttributes",
                "primary_tested": [
                    "Attributes.addAll(Attributes)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attributes.size()",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the addAll method when adding non-empty attributes to an existing empty attributes object."
            },
            {
                "name": "testAddAllWithExistingAttributes",
                "primary_tested": [
                    "Attributes.addAll(Attributes)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attributes.size()",
                    "Attributes.get(String)",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the addAll method when adding attributes to an existing non-empty attributes object."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_appendToTest.java",
        "testclass_name": "Element_appendToTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_appendToTest",
        "description": "Unit tests for the appendTo functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "parent",
                    "type": "Element"
                },
                {
                    "name": "child",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAppendToSuccess",
                "primary_tested": [
                    "Element.appendTo(Element)"
                ],
                "associated_methods": [
                    "Element.childNodeSize()",
                    "Element.child(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parent",
                            "type": "variable"
                        },
                        {
                            "name": "child",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the successful appending of a child element to a parent element."
            },
            {
                "name": "testAppendToNullParent",
                "primary_tested": [
                    "Element.appendTo(Element)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "child",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the behavior when attempting to append a child element to a null parent, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_appendElementTest.java",
        "testclass_name": "Element_appendElementTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.parser.Tag;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_appendElementTest",
        "description": "Unit tests for the appendElement method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAppendElement",
                "primary_tested": [
                    "Element.appendElement(String,String)"
                ],
                "associated_methods": [
                    "Element.childNodeSize()",
                    "Element.tagName()",
                    "Tag.namespace()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Tag"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the appendElement method of the Element class, ensuring that a new child element is correctly appended and its properties are as expected."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/FormElement_formDataTest.java",
        "testclass_name": "FormElement_formDataTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Connection;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.helper.HttpConnection;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "FormElement_formDataTest",
        "description": "Unit tests for the formData method of the FormElement class, which extracts form data from various HTML elements.",
        "class_members": {
            "variables": [
                {
                    "name": "formElement",
                    "type": "FormElement"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testFormDataWithInputElements",
                "primary_tested": [
                    "FormElement.formData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Connection.KeyVal"
                    ],
                    "class_members": [
                        {
                            "name": "formElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the formData method with input elements, ensuring it correctly extracts key-value pairs from input fields."
            },
            {
                "name": "testFormDataWithSelectElement",
                "primary_tested": [
                    "FormElement.formData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Connection.KeyVal"
                    ],
                    "class_members": [
                        {
                            "name": "formElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the formData method with a select element, ensuring it correctly extracts the selected option's value."
            },
            {
                "name": "testFormDataWithCheckboxElement",
                "primary_tested": [
                    "FormElement.formData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Connection.KeyVal"
                    ],
                    "class_members": [
                        {
                            "name": "formElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the formData method with a checkbox element, ensuring it correctly extracts the value if the checkbox is checked."
            },
            {
                "name": "testFormDataWithDisabledElement",
                "primary_tested": [
                    "FormElement.formData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Connection.KeyVal"
                    ],
                    "class_members": [
                        {
                            "name": "formElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the formData method with a disabled input element, ensuring it does not extract any data from disabled fields."
            },
            {
                "name": "testFormDataWithButtonElement",
                "primary_tested": [
                    "FormElement.formData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Connection.KeyVal"
                    ],
                    "class_members": [
                        {
                            "name": "formElement",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the formData method with a button element, ensuring it does not extract any data from button elements."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsMatchingOwnTextTest.java",
        "testclass_name": "Element_getElementsMatchingOwnTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import org.jsoup.select.Elements;",
            "import java.util.regex.PatternSyntaxException;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementsMatchingOwnTextTest",
        "description": "Unit tests for the getElementsMatchingOwnText method of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testGetElementsMatchingOwnText_ValidRegex",
                "primary_tested": [
                    "Element.getElementsMatchingOwnText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the getElementsMatchingOwnText method with a valid regex pattern."
            },
            {
                "name": "testGetElementsMatchingOwnText_InvalidRegex",
                "primary_tested": [
                    "Element.getElementsMatchingOwnText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "IllegalArgumentException"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the getElementsMatchingOwnText method with an invalid regex pattern, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/safety/Safelist_isSafeAttributeTest.java",
        "testclass_name": "Safelist_isSafeAttributeTest",
        "dependencies": [
            "package org.jsoup.safety;",
            "import org.jsoup.nodes.Attribute;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Safelist_isSafeAttributeTest",
        "description": "Unit tests for the Safelist class's isSafeAttribute method.",
        "class_members": {
            "variables": [
                {
                    "name": "safelist",
                    "type": "Safelist"
                },
                {
                    "name": "element",
                    "type": "Element"
                },
                {
                    "name": "validAttribute",
                    "type": "Attribute"
                },
                {
                    "name": "invalidAttribute",
                    "type": "Attribute"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testIsSafeAttribute_validAttribute",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        },
                        {
                            "name": "element",
                            "type": "variable"
                        },
                        {
                            "name": "validAttribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that a valid attribute is recognized as safe by the Safelist."
            },
            {
                "name": "testIsSafeAttribute_invalidAttribute",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        },
                        {
                            "name": "element",
                            "type": "variable"
                        },
                        {
                            "name": "invalidAttribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that an invalid attribute is recognized as unsafe by the Safelist."
            },
            {
                "name": "testIsSafeAttribute_enforcedAttribute",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "associated_methods": [
                    "Safelist.addEnforcedAttribute(String,String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        },
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that an enforced attribute is recognized as safe by the Safelist."
            },
            {
                "name": "testIsSafeAttribute_noAttributesDefined",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        },
                        {
                            "name": "validAttribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests that an attribute is recognized as unsafe when no attributes are defined in the Safelist."
            },
            {
                "name": "testIsSafeAttribute_allTag",
                "primary_tested": [
                    "Safelist.isSafeAttribute(String,Element,Attribute)"
                ],
                "associated_methods": [
                    "Safelist.addAttributes(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Safelist",
                        "Element",
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "safelist",
                            "type": "variable"
                        },
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that an attribute is recognized as safe when added to all tags in the Safelist."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_hashCodeTest.java",
        "testclass_name": "Attribute_hashCodeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import java.util.Objects;"
        ],
        "name": "Attribute_hashCodeTest",
        "description": "Unit tests for the hashCode method of the Attribute class.",
        "class_members": {
            "variables": [
                {
                    "name": "attribute",
                    "type": "Attribute"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHashCode",
                "primary_tested": [
                    "Attribute.hashCode()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Objects"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hashCode method of the Attribute class with a non-null value."
            },
            {
                "name": "testHashCodeWithNullValue",
                "primary_tested": [
                    "Attribute.hashCode()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Objects"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the hashCode method of the Attribute class with a null value."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_expectFormTest.java",
        "testclass_name": "Document_expectFormTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.nodes.FormElement;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Document_expectFormTest",
        "description": "Unit tests for the expectForm method in the Document class.",
        "class_members": {
            "variables": [
                {
                    "name": "document",
                    "type": "Document"
                }
            ],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testExpectFormSuccess",
                "primary_tested": [
                    "Document.expectForm(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "FormElement"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the successful retrieval of a form element using the expectForm method."
            },
            {
                "name": "testExpectFormValidationFailed",
                "primary_tested": [
                    "Document.expectForm(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "FormElement"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the validation failure scenario when the expectForm method is called with a non-form element selector."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_getIgnoreCaseTest.java",
        "testclass_name": "Attributes_getIgnoreCaseTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_getIgnoreCaseTest",
        "description": "Unit tests for the getIgnoreCase method in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetIgnoreCase_KeyExists",
                "primary_tested": [
                    "Attributes.getIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getIgnoreCase method when the key exists in the Attributes object."
            },
            {
                "name": "testGetIgnoreCase_KeyDoesNotExist",
                "primary_tested": [
                    "Attributes.getIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getIgnoreCase method when the key does not exist in the Attributes object."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_prependChildTest.java",
        "testclass_name": "Element_prependChildTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_prependChildTest",
        "description": "Unit tests for the prependChild method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testPrependChild",
                "primary_tested": [
                    "Element.prependChild(Node)"
                ],
                "associated_methods": [
                    "Element.child(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Node"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prependChild method by adding a child node and verifying its position."
            },
            {
                "name": "testPrependChildNull",
                "primary_tested": [
                    "Element.prependChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the prependChild method's handling of null input, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByAttributeStartingTest.java",
        "testclass_name": "Element_getElementsByAttributeStartingTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementsByAttributeStartingTest",
        "description": "Unit tests for the getElementsByAttributeStarting method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetElementsByAttributeStarting",
                "primary_tested": [
                    "Element.getElementsByAttributeStarting(String)"
                ],
                "associated_methods": [
                    "Elements.size()",
                    "Elements.get(int)",
                    "Element.attr(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the functionality of getting elements by attribute starting with a specific prefix."
            },
            {
                "name": "testGetElementsByAttributeStarting_EmptyPrefix",
                "primary_tested": [
                    "Element.getElementsByAttributeStarting(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that an IllegalArgumentException is thrown when an empty prefix is provided."
            },
            {
                "name": "testGetElementsByAttributeStarting_NullPrefix",
                "primary_tested": [
                    "Element.getElementsByAttributeStarting(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that an IllegalArgumentException is thrown when a null prefix is provided."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByClassTest.java",
        "testclass_name": "Element_getElementsByClassTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementsByClassTest",
        "description": "Unit tests for the getElementsByClass method in the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testGetElementsByClass",
                "primary_tested": [
                    "Element.getElementsByClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the functionality of getting elements by class name."
            },
            {
                "name": "testGetElementsByClass_EmptyClassName",
                "primary_tested": [
                    "Element.getElementsByClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "description": "Tests the behavior of getElementsByClass method when an empty class name is provided, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/internal/StringUtil_resolveTest.java",
        "testclass_name": "StringUtil_resolveTest",
        "dependencies": [
            "package org.jsoup.internal;",
            "import org.junit.jupiter.api.Test;",
            "import java.net.MalformedURLException;",
            "import java.net.URL;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "StringUtil_resolveTest",
        "description": "Unit tests for the StringUtil.resolve method, which resolves relative URLs against a base URL.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testResolveWithRelativeUrl",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL against a base URL."
            },
            {
                "name": "testResolveWithQueryParams",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL with query parameters against a base URL."
            },
            {
                "name": "testResolveWithFragment",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL with a fragment against a base URL."
            },
            {
                "name": "testResolveWithControlChars",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL containing control characters against a base URL."
            },
            {
                "name": "testResolveWithEmptyRelativeUrl",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving an empty relative URL against a base URL."
            },
            {
                "name": "testResolveWithAbsolutePath",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving an absolute path relative URL against a base URL."
            },
            {
                "name": "testResolveWithDifferentProtocol",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL with a different protocol against a base URL."
            },
            {
                "name": "testResolveWithDifferentHost",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL with a different host against a base URL."
            },
            {
                "name": "testResolveWithDifferentPort",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL with a different port against a base URL."
            },
            {
                "name": "testResolveWithDotSegments",
                "primary_tested": [
                    "StringUtil.resolve(URL,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "URL",
                        "StringUtil"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests resolving a relative URL with dot segments against a base URL."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/DocumentType_nodeNameTest.java",
        "testclass_name": "DocumentType_nodeNameTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "DocumentType_nodeNameTest",
        "description": "Unit tests for the nodeName method of the DocumentType class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testNodeName",
                "primary_tested": [
                    "DocumentType.nodeName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "DocumentType"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the nodeName method of the DocumentType class."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_getValueTest.java",
        "testclass_name": "Attribute_getValueTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_getValueTest",
        "description": "Unit tests for the getValue method of the Attribute class.",
        "class_members": {
            "variables": [
                {
                    "name": "attribute",
                    "type": "Attribute"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetValueWithNonNullValue",
                "primary_tested": [
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getValue method of the Attribute class when the value is non-null."
            },
            {
                "name": "testGetValueWithNullValue",
                "primary_tested": [
                    "Attribute.getValue()"
                ],
                "associated_methods": [
                    "Attribute.setValue(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getValue method of the Attribute class when the value is null."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByAttributeValueMatchingTest.java",
        "testclass_name": "Element_getElementsByAttributeValueMatchingTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.regex.Pattern;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;"
        ],
        "name": "Element_getElementsByAttributeValueMatchingTest",
        "description": "Unit tests for the getElementsByAttributeValueMatching method in the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testGetElementsByAttributeValueMatching",
                "primary_tested": [
                    "Element.getElementsByAttributeValueMatching(String,Pattern)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Pattern",
                        "Elements"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the functionality of retrieving elements by attribute value matching using a pattern."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_outerHtmlTest.java",
        "testclass_name": "Document_outerHtmlTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;"
        ],
        "name": "Document_outerHtmlTest",
        "description": "Unit tests for the outerHtml functionality of the Document class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "document",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testOuterHtml",
                "primary_tested": [
                    "Document.outerHtml()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document"
                    ],
                    "class_members": [
                        {
                            "name": "document",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the outerHtml functionality of the Document class, ensuring it returns the correct HTML string."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_filterTest.java",
        "testclass_name": "Element_filterTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.select.NodeFilter;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;",
            "import static org.junit.jupiter.api.Assertions.assertNotNull;"
        ],
        "name": "Element_filterTest",
        "description": "Unit tests for the filter functionality of the Element class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testFilter",
                "primary_tested": [
                    "Element.filter(NodeFilter)"
                ],
                "associated_methods": [
                    "Element.tagName()",
                    "Element.text()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Jsoup",
                        "Document",
                        "Element",
                        "NodeFilter",
                        "FilterResult"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the filter functionality of the Element class, ensuring that the filter method correctly processes and returns the filtered element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_classNamesTest.java",
        "testclass_name": "Element_classNamesTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import java.util.Set;"
        ],
        "name": "Element_classNamesTest",
        "description": "Unit tests for the classNames functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testClassNamesWithSingleClass",
                "primary_tested": [
                    "Element.classNames()"
                ],
                "associated_methods": [
                    "Element.addClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the classNames method with a single class added to the Element."
            },
            {
                "name": "testClassNamesWithMultipleClasses",
                "primary_tested": [
                    "Element.classNames()"
                ],
                "associated_methods": [
                    "Element.addClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the classNames method with multiple classes added to the Element."
            },
            {
                "name": "testClassNamesWithEmptyClass",
                "primary_tested": [
                    "Element.classNames()"
                ],
                "associated_methods": [
                    "Element.addClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the classNames method with an empty class added to the Element."
            },
            {
                "name": "testClassNamesWithWhitespaceClass",
                "primary_tested": [
                    "Element.classNames()"
                ],
                "associated_methods": [
                    "Element.addClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the classNames method with a class containing only whitespace added to the Element."
            },
            {
                "name": "testClassNamesWithMixedClasses",
                "primary_tested": [
                    "Element.classNames()"
                ],
                "associated_methods": [
                    "Element.addClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the classNames method with a mix of valid and invalid classes added to the Element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_sourceRangeTest.java",
        "testclass_name": "Attribute_sourceRangeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import static org.mockito.Mockito.*;"
        ],
        "name": "Attribute_sourceRangeTest",
        "description": "Unit tests for the sourceRange functionality of the Attribute class.",
        "class_members": {
            "variables": [
                {
                    "name": "attribute",
                    "type": "Attribute"
                },
                {
                    "name": "parent",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSourceRangeWithParent",
                "primary_tested": [
                    "Attribute.sourceRange()"
                ],
                "associated_methods": [
                    "Attributes.sourceRange(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes",
                        "Range.AttributeRange"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the sourceRange functionality of the Attribute class when it has a parent."
            },
            {
                "name": "testSourceRangeWithoutParent",
                "primary_tested": [
                    "Attribute.sourceRange()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Range.AttributeRange"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the sourceRange functionality of the Attribute class when it does not have a parent."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_emptyTest.java",
        "testclass_name": "Element_emptyTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_emptyTest",
        "description": "Unit tests for the empty method of the Element class.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testEmptyWithChildren",
                "primary_tested": [
                    "Element.empty()"
                ],
                "associated_methods": [
                    "Element.appendChild(Node)",
                    "Element.childNodes.isEmpty()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Node",
                        "TextNode"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the empty method of the Element class when the element has children. Verifies that the children are removed and their parent nodes are set to null."
            },
            {
                "name": "testEmptyWithoutChildren",
                "primary_tested": [
                    "Element.empty()"
                ],
                "associated_methods": [
                    "Element.childNodes.isEmpty()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the empty method of the Element class when the element has no children. Verifies that the element's child nodes list remains empty."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_valTest.java",
        "testclass_name": "Element_valTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.assertEquals;",
            "import static org.jsoup.parser.Parser.NamespaceHtml;"
        ],
        "name": "Element_valTest",
        "description": "Unit tests for the val() method in the Element class, specifically for textarea and non-textarea elements.",
        "class_members": {
            "variables": [],
            "methods": [],
            "nested_classes": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testVal_textarea",
                "primary_tested": [
                    "Element.val()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the val() method for a textarea element, ensuring it returns the correct text value."
            },
            {
                "name": "testVal_nonTextarea",
                "primary_tested": [
                    "Element.val()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": []
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the val() method for a non-textarea element (input), ensuring it returns the correct attribute value."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_iteratorTest.java",
        "testclass_name": "Attributes_iteratorTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.ConcurrentModificationException;",
            "import java.util.Iterator;",
            "import java.util.NoSuchElementException;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_iteratorTest",
        "description": "Unit tests for the iterator functionality of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testIteratorHasNext",
                "primary_tested": [
                    "Attributes.iterator()"
                ],
                "associated_methods": [
                    "Iterator.hasNext()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "Iterator"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasNext method of the iterator for the Attributes class."
            },
            {
                "name": "testIteratorNext",
                "primary_tested": [
                    "Attributes.iterator()"
                ],
                "associated_methods": [
                    "Iterator.next()",
                    "Attribute.getKey()",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "Iterator"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the next method of the iterator for the Attributes class."
            },
            {
                "name": "testIteratorNextThrowsNoSuchElementException",
                "primary_tested": [
                    "Attributes.iterator()"
                ],
                "associated_methods": [
                    "Iterator.next()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "Iterator",
                        "NoSuchElementException"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the next method of the iterator throws NoSuchElementException when there are no more elements."
            },
            {
                "name": "testIteratorRemove",
                "primary_tested": [
                    "Attributes.iterator()"
                ],
                "associated_methods": [
                    "Iterator.next()",
                    "Iterator.remove()",
                    "Attributes.size()",
                    "Attributes.iterator()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "Iterator"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the remove method of the iterator for the Attributes class."
            },
            {
                "name": "testIteratorConcurrentModificationException",
                "primary_tested": [
                    "Attributes.iterator()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Iterator.next()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "Iterator",
                        "ConcurrentModificationException"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the iterator throws ConcurrentModificationException when the Attributes collection is modified during iteration."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementsByTagTest.java",
        "testclass_name": "Element_getElementsByTagTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementsByTagTest",
        "description": "Unit tests for the getElementsByTag method of the Element class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetElementsByTag",
                "primary_tested": [
                    "Element.getElementsByTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Elements",
                        "Document",
                        "Jsoup"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementsByTag method to ensure it correctly retrieves elements by tag name and checks their text content."
            },
            {
                "name": "testGetElementsByTagWithEmptyTagName",
                "primary_tested": [
                    "Element.getElementsByTag(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Document",
                        "Jsoup"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementsByTag method with an empty tag name to ensure it throws an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Comment_setDataTest.java",
        "testclass_name": "Comment_setDataTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Comment_setDataTest",
        "description": "Unit tests for the setData method of the Comment class.",
        "class_members": {
            "variables": [
                {
                    "name": "comment",
                    "type": "Comment"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSetData",
                "primary_tested": [
                    "Comment.setData(String)"
                ],
                "associated_methods": [
                    "Comment.getData()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Comment"
                    ],
                    "class_members": [
                        {
                            "name": "comment",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setData method of the Comment class, ensuring that the data is correctly set and retrieved, and that the same instance is returned."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_hasDeclaredValueForKeyIgnoreCaseTest.java",
        "testclass_name": "Attributes_hasDeclaredValueForKeyIgnoreCaseTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_hasDeclaredValueForKeyIgnoreCaseTest",
        "description": "Unit tests for checking if an attribute has a declared value for a key, ignoring case.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasDeclaredValueForKeyIgnoreCase_ValueExists",
                "primary_tested": [
                    "Attributes.hasDeclaredValueForKeyIgnoreCase(String)"
                ],
                "associated_methods": [
                    "Attributes.putIgnoreCase(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the method correctly identifies the existence of a declared value for a key, ignoring case, when the value exists."
            },
            {
                "name": "testHasDeclaredValueForKeyIgnoreCase_ValueDoesNotExist",
                "primary_tested": [
                    "Attributes.hasDeclaredValueForKeyIgnoreCase(String)"
                ],
                "associated_methods": [
                    "Attributes.putIgnoreCase(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the method correctly identifies the absence of a declared value for a key, ignoring case, when the value does not exist."
            },
            {
                "name": "testHasDeclaredValueForKeyIgnoreCase_KeyDoesNotExist",
                "primary_tested": [
                    "Attributes.hasDeclaredValueForKeyIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests that the method correctly identifies the absence of a declared value for a key, ignoring case, when the key does not exist."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_removeIgnoreCaseTest.java",
        "testclass_name": "Attributes_removeIgnoreCaseTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_removeIgnoreCaseTest",
        "description": "Unit tests for the removeIgnoreCase method in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testRemoveIgnoreCase_KeyExists",
                "primary_tested": [
                    "Attributes.removeIgnoreCase(String)"
                ],
                "associated_methods": [
                    "Attributes.putIgnoreCase(String,String)",
                    "Attributes.hasKeyIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removeIgnoreCase method when the key exists in the Attributes."
            },
            {
                "name": "testRemoveIgnoreCase_KeyDoesNotExist",
                "primary_tested": [
                    "Attributes.removeIgnoreCase(String)"
                ],
                "associated_methods": [
                    "Attributes.putIgnoreCase(String,String)",
                    "Attributes.hasKeyIgnoreCase(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the removeIgnoreCase method when the key does not exist in the Attributes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_firstElementChildTest.java",
        "testclass_name": "Element_firstElementChildTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_firstElementChildTest",
        "description": "Unit tests for the firstElementChild method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testFirstElementChildWithElement",
                "primary_tested": [
                    "Element.firstElementChild()"
                ],
                "associated_methods": [
                    "Element.appendChild(Element)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the firstElementChild method when an Element child is present."
            },
            {
                "name": "testFirstElementChildWithNonElement",
                "primary_tested": [
                    "Element.firstElementChild()"
                ],
                "associated_methods": [
                    "Element.appendChild(TextNode)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the firstElementChild method when a non-Element child (TextNode) is present."
            },
            {
                "name": "testFirstElementChildWithMixedChildren",
                "primary_tested": [
                    "Element.firstElementChild()"
                ],
                "associated_methods": [
                    "Element.appendChild(TextNode)",
                    "Element.appendChild(Element)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the firstElementChild method when both Element and non-Element children are present."
            },
            {
                "name": "testFirstElementChildWithNoChildren",
                "primary_tested": [
                    "Element.firstElementChild()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the firstElementChild method when no children are present."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_setValueTest.java",
        "testclass_name": "Attribute_setValueTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_setValueTest",
        "description": "Unit tests for the setValue method in the Attribute class.",
        "class_members": {
            "variables": [
                {
                    "name": "attribute",
                    "type": "Attribute"
                },
                {
                    "name": "parent",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSetValueWithParent",
                "primary_tested": [
                    "Attribute.setValue(String)"
                ],
                "associated_methods": [
                    "Attributes.get(String)",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setValue method when the Attribute has a parent."
            },
            {
                "name": "testSetValueWithoutParent",
                "primary_tested": [
                    "Attribute.setValue(String)"
                ],
                "associated_methods": [
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setValue method when the Attribute does not have a parent."
            },
            {
                "name": "testSetValueWithNonExistentKey",
                "primary_tested": [
                    "Attribute.setValue(String)"
                ],
                "associated_methods": [
                    "Attributes.remove(String)",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the setValue method when the key does not exist in the parent."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_firstElementSiblingTest.java",
        "testclass_name": "Element_firstElementSiblingTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_firstElementSiblingTest",
        "description": "Unit tests for the firstElementSibling functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "parent",
                    "type": "Element"
                },
                {
                    "name": "child1",
                    "type": "Element"
                },
                {
                    "name": "child2",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testLastElementSiblingWithParent",
                "primary_tested": [
                    "Element.lastElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "parent",
                            "type": "variable"
                        },
                        {
                            "name": "child1",
                            "type": "variable"
                        },
                        {
                            "name": "child2",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the lastElementSibling functionality with a parent element."
            },
            {
                "name": "testLastElementSiblingOrphan",
                "primary_tested": [
                    "Element.lastElementSibling()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ]
                },
                "category": "unit",
                "description": "Tests the lastElementSibling functionality with an orphan element."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_asListTest.java",
        "testclass_name": "Attributes_asListTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import java.util.List;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_asListTest",
        "description": "Unit tests for the asList method of the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testAsListWithNormalKeys",
                "primary_tested": [
                    "Attributes.asList()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attribute.getKey()",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "List"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the asList method with normal keys in the Attributes object."
            },
            {
                "name": "testAsListWithInternalKeys",
                "primary_tested": [
                    "Attributes.asList()"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)",
                    "Attribute.getKey()",
                    "Attribute.getValue()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "Attribute",
                        "List"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the asList method with internal keys in the Attributes object."
            },
            {
                "name": "testAsListWithEmptyAttributes",
                "primary_tested": [
                    "Attributes.asList()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "List"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the asList method with an empty Attributes object."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_sourceRangeTest.java",
        "testclass_name": "Attributes_sourceRangeTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;",
            "import static org.mockito.Mockito.*;",
            "import org.jsoup.nodes.Range.AttributeRange;",
            "import java.util.HashMap;",
            "import java.util.Map;"
        ],
        "name": "Attributes_sourceRangeTest",
        "description": "Unit tests for the sourceRange method in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                },
                {
                    "name": "key",
                    "type": "String"
                },
                {
                    "name": "mockRanges",
                    "type": "Map<String, AttributeRange>"
                },
                {
                    "name": "spyAttributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testSourceRange",
                "primary_tested": [
                    "Attributes.sourceRange(String)"
                ],
                "associated_methods": [
                    "Attributes.hasKey(String)",
                    "Attributes.getRanges()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes",
                        "AttributeRange",
                        "HashMap",
                        "Map",
                        "Mockito"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        },
                        {
                            "name": "key",
                            "type": "variable"
                        },
                        {
                            "name": "mockRanges",
                            "type": "variable"
                        },
                        {
                            "name": "spyAttributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests the sourceRange method of the Attributes class by mocking the hasKey and getRanges methods and verifying the result."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/TextNode_splitTextTest.java",
        "testclass_name": "TextNode_splitTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "TextNode_splitTextTest",
        "description": "Unit tests for the splitText method of the TextNode class.",
        "class_members": {
            "variables": [
                {
                    "name": "textNode",
                    "type": "TextNode"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSplitTextValidOffset",
                "primary_tested": [
                    "TextNode.splitText(int)"
                ],
                "associated_methods": [
                    "TextNode.getWholeText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "textNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the splitText method with a valid offset."
            },
            {
                "name": "testSplitTextNegativeOffset",
                "primary_tested": [
                    "TextNode.splitText(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "textNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the splitText method with a negative offset, expecting an IllegalArgumentException."
            },
            {
                "name": "testSplitTextOffsetGreaterThanLength",
                "primary_tested": [
                    "TextNode.splitText(int)"
                ],
                "external_dependencies": {
                    "modules": [
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "textNode",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the splitText method with an offset greater than the length of the text, expecting an IllegalArgumentException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_getElementByIdTest.java",
        "testclass_name": "Element_getElementByIdTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.jsoup.select.Elements;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_getElementByIdTest",
        "description": "Unit tests for the getElementById method of the Element class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "doc",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testGetElementById_ExistingId",
                "primary_tested": [
                    "Element.getElementById(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementById method with an existing ID, ensuring the correct element is retrieved and its properties are as expected."
            },
            {
                "name": "testGetElementById_NonExistingId",
                "primary_tested": [
                    "Element.getElementById(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementById method with a non-existing ID, ensuring null is returned."
            },
            {
                "name": "testGetElementById_EmptyId",
                "primary_tested": [
                    "Element.getElementById(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementById method with an empty ID, ensuring an IllegalArgumentException is thrown."
            },
            {
                "name": "testGetElementById_NullId",
                "primary_tested": [
                    "Element.getElementById(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the getElementById method with a null ID, ensuring an IllegalArgumentException is thrown."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Document_createShellTest.java",
        "testclass_name": "Document_createShellTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Document_createShellTest",
        "description": "Unit tests for the Document.createShell method.",
        "class_members": {
            "variables": [
                {
                    "name": "baseUri",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "type": "Document"
                },
                {
                    "name": "html",
                    "type": "Element"
                },
                {
                    "name": "head",
                    "type": "Element"
                },
                {
                    "name": "body",
                    "type": "Element"
                }
            ]
        },
        "test_cases": [
            {
                "name": "testCreateShell",
                "primary_tested": [
                    "Document.createShell(String)"
                ],
                "associated_methods": [
                    "Document.baseUri()",
                    "Document.child(int)",
                    "Element.tagName()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "baseUri",
                            "type": "variable"
                        },
                        {
                            "name": "doc",
                            "type": "variable"
                        },
                        {
                            "name": "html",
                            "type": "variable"
                        },
                        {
                            "name": "head",
                            "type": "variable"
                        },
                        {
                            "name": "body",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "description": "Tests the creation of a shell document and verifies its structure."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_equalsTest.java",
        "testclass_name": "Attribute_equalsTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_equalsTest",
        "description": "Unit tests for the equals method in the Attribute class.",
        "class_members": {
            "variables": []
        },
        "fixtures": [],
        "test_cases": [
            {
                "name": "testEquals_SameObject",
                "primary_tested": [
                    "Attribute.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method with the same object."
            },
            {
                "name": "testEquals_NullObject",
                "primary_tested": [
                    "Attribute.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method with a null object."
            },
            {
                "name": "testEquals_DifferentClass",
                "primary_tested": [
                    "Attribute.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method with an object of a different class."
            },
            {
                "name": "testEquals_DifferentKey",
                "primary_tested": [
                    "Attribute.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method with different keys."
            },
            {
                "name": "testEquals_DifferentValue",
                "primary_tested": [
                    "Attribute.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method with different values."
            },
            {
                "name": "testEquals_SameKeyAndValue",
                "primary_tested": [
                    "Attribute.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ]
                },
                "category": "unit",
                "description": "Tests the equals method with the same key and value."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_expectFirstTest.java",
        "testclass_name": "Element_expectFirstTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.jsoup.Jsoup;",
            "import org.jsoup.nodes.Document;",
            "import org.jsoup.nodes.Element;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_expectFirstTest",
        "description": "Unit tests for the 'expectFirst' method of the Element class in Jsoup.",
        "class_members": {
            "variables": [
                {
                    "name": "doc",
                    "type": "Document"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testExpectFirstWithMatchingElement",
                "primary_tested": [
                    "Element.expectFirst(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the 'expectFirst' method with a matching element, ensuring it returns the correct element and its text."
            },
            {
                "name": "testExpectFirstWithNoMatchingElement",
                "primary_tested": [
                    "Element.expectFirst(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Document",
                        "Element",
                        "org.jsoup.helper.ValidationException"
                    ],
                    "class_members": [
                        {
                            "name": "doc",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the 'expectFirst' method with no matching element, ensuring it throws a ValidationException."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_hasTextTest.java",
        "testclass_name": "Element_hasTextTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_hasTextTest",
        "description": "Unit tests for the hasText method of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasTextWithNonBlankText",
                "primary_tested": [
                    "Element.hasText()"
                ],
                "associated_methods": [
                    "Element.appendText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasText method with non-blank text."
            },
            {
                "name": "testHasTextWithBlankText",
                "primary_tested": [
                    "Element.hasText()"
                ],
                "associated_methods": [
                    "Element.appendText(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasText method with blank text."
            },
            {
                "name": "testHasTextWithNoText",
                "primary_tested": [
                    "Element.hasText()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasText method with no text."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_toggleClassTest.java",
        "testclass_name": "Element_toggleClassTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_toggleClassTest",
        "description": "Unit tests for the toggleClass functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testToggleClassAdd",
                "primary_tested": [
                    "Element.toggleClass(String)"
                ],
                "associated_methods": [
                    "Element.addClass(String)",
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the toggleClass functionality to add a new class to the Element."
            },
            {
                "name": "testToggleClassRemove",
                "primary_tested": [
                    "Element.toggleClass(String)"
                ],
                "associated_methods": [
                    "Element.addClass(String)",
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the toggleClass functionality to remove an existing class from the Element."
            },
            {
                "name": "testToggleClassNoChange",
                "primary_tested": [
                    "Element.toggleClass(String)"
                ],
                "associated_methods": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the toggleClass functionality when toggling a class that does not exist, resulting in its addition."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_dataTest.java",
        "testclass_name": "Element_dataTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_dataTest",
        "description": "Unit tests for the data extraction functionality of the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testDataWithDataNode",
                "primary_tested": [
                    "Element.data()"
                ],
                "associated_methods": [
                    "Element.appendChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "DataNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the data extraction functionality of the Element class when a DataNode is appended."
            },
            {
                "name": "testDataWithComment",
                "primary_tested": [
                    "Element.data()"
                ],
                "associated_methods": [
                    "Element.appendChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "Comment"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the data extraction functionality of the Element class when a Comment is appended."
            },
            {
                "name": "testDataWithCDataNode",
                "primary_tested": [
                    "Element.data()"
                ],
                "associated_methods": [
                    "Element.appendChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "CDataNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the data extraction functionality of the Element class when a CDataNode is appended."
            },
            {
                "name": "testDataWithMixedNodes",
                "primary_tested": [
                    "Element.data()"
                ],
                "associated_methods": [
                    "Element.appendChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "DataNode",
                        "Comment",
                        "CDataNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the data extraction functionality of the Element class when multiple types of nodes are appended."
            },
            {
                "name": "testDataWithNoSpecialNodes",
                "primary_tested": [
                    "Element.data()"
                ],
                "associated_methods": [
                    "Element.appendChild(Node)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element",
                        "TextNode"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the data extraction functionality of the Element class when a TextNode is appended."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attribute_setKeyTest.java",
        "testclass_name": "Attribute_setKeyTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attribute_setKeyTest",
        "description": "Unit tests for the setKey method in the Attribute class.",
        "class_members": {
            "variables": [
                {
                    "name": "attribute",
                    "type": "Attribute"
                },
                {
                    "name": "parent",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testSetKeyWithValidKey",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()",
                    "Attributes.get(String)",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting a valid key in the Attribute and verifies the key and value in the parent Attributes."
            },
            {
                "name": "testSetKeyWithEmptyParent",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [],
                "description": "Tests setting a key in the Attribute when the parent is null."
            },
            {
                "name": "testSetKeyWithNullKey",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting a null key in the Attribute and expects an IllegalArgumentException."
            },
            {
                "name": "testSetKeyWithEmptyKey",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting an empty key in the Attribute and expects an IllegalArgumentException."
            },
            {
                "name": "testSetKeyWithWhitespaceKey",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()",
                    "Attributes.get(String)",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting a key with leading and trailing whitespace in the Attribute and verifies the key and value in the parent Attributes."
            },
            {
                "name": "testSetKeyWithExistingKeyInParent",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()",
                    "Attributes.get(String)",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting a key in the Attribute that already exists in the parent Attributes and verifies the key and value in the parent Attributes."
            },
            {
                "name": "testSetKeyWithRangeTracking",
                "primary_tested": [
                    "Attribute.setKey(String)"
                ],
                "associated_methods": [
                    "Attribute.getKey()",
                    "Attributes.get(String)",
                    "Attributes.hasKey(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attribute",
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attribute",
                            "type": "variable"
                        },
                        {
                            "name": "parent",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests setting a key in the Attribute with range tracking and verifies the key and value in the parent Attributes."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Attributes_equalsTest.java",
        "testclass_name": "Attributes_equalsTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Attributes_equalsTest",
        "description": "Unit tests for the equals method in the Attributes class.",
        "class_members": {
            "variables": [
                {
                    "name": "attributes",
                    "type": "Attributes"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testEquals_SameObject",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with the same object."
            },
            {
                "name": "testEquals_NullObject",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with a null object."
            },
            {
                "name": "testEquals_DifferentClass",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with an object of a different class."
            },
            {
                "name": "testEquals_DifferentSize",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with different sizes of attributes."
            },
            {
                "name": "testEquals_SameKeysDifferentValues",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with the same keys but different values."
            },
            {
                "name": "testEquals_SameKeysSameValues",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with the same keys and same values."
            },
            {
                "name": "testEquals_DifferentKeys",
                "primary_tested": [
                    "Attributes.equals(Object)"
                ],
                "associated_methods": [
                    "Attributes.put(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Attributes"
                    ],
                    "class_members": [
                        {
                            "name": "attributes",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the equals method with different keys."
            }
        ]
    },
    {
        "file_path": "src/test/java/org/jsoup/nodes/Element_hasClassTest.java",
        "testclass_name": "Element_hasClassTest",
        "dependencies": [
            "package org.jsoup.nodes;",
            "import org.junit.jupiter.api.BeforeEach;",
            "import org.junit.jupiter.api.Test;",
            "import static org.junit.jupiter.api.Assertions.*;"
        ],
        "name": "Element_hasClassTest",
        "description": "Unit tests for the hasClass method in the Element class.",
        "class_members": {
            "variables": [
                {
                    "name": "element",
                    "type": "Element"
                }
            ]
        },
        "fixtures": [
            "setUp"
        ],
        "test_cases": [
            {
                "name": "testHasClass_NoAttributes",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method when the element has no attributes."
            },
            {
                "name": "testHasClass_ExactMatch",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method when the class attribute exactly matches the provided class name."
            },
            {
                "name": "testHasClass_MultipleClasses",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method when the class attribute contains multiple classes."
            },
            {
                "name": "testHasClass_WhitespaceHandling",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method with various whitespace handling scenarios."
            },
            {
                "name": "testHasClass_CaseInsensitivity",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method for case insensitivity."
            },
            {
                "name": "testHasClass_EmptyClassAttribute",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method when the class attribute is empty."
            },
            {
                "name": "testHasClass_LongerThanAttribute",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method when the provided class name is longer than the class attribute."
            },
            {
                "name": "testHasClass_LastEntry",
                "primary_tested": [
                    "Element.hasClass(String)"
                ],
                "associated_methods": [
                    "Element.attr(String,String)"
                ],
                "external_dependencies": {
                    "modules": [
                        "Element"
                    ],
                    "class_members": [
                        {
                            "name": "element",
                            "type": "variable"
                        }
                    ]
                },
                "category": "unit",
                "fixtures_used": [
                    "setUp"
                ],
                "description": "Tests the hasClass method when the provided class name is the last entry in the class attribute."
            }
        ]
    }
]