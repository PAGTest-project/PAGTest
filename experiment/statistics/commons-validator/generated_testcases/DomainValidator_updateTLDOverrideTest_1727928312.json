[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_updateTLDOverrideTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance();\n    }\n\n    @Test\n    public void testUpdateTLDOverride_ValidTLDs() {\n        // Given\n        String[] tlds = {\"local\", \"pvt\"};\n\n        // When\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, tlds);\n\n        // Then\n        assertTrue(validator.isValidGenericTld(\"local\"));\n        assertTrue(validator.isValid(\"abc.local\"));\n        assertTrue(validator.isValidGenericTld(\"pvt\"));\n        assertTrue(validator.isValid(\"abc.pvt\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_InvalidTLDs() {\n        // Given\n        String[] tlds = {\"invalid1\", \"invalid2\"};\n\n        // When\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, tlds);\n\n        // Then\n        assertFalse(validator.isValidGenericTld(\"invalid1\"));\n        assertFalse(validator.isValid(\"abc.invalid1\"));\n        assertFalse(validator.isValidGenericTld(\"invalid2\"));\n        assertFalse(validator.isValid(\"abc.invalid2\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_IllegalStateException() {\n        // Given\n        DomainValidator.getInstance(true); // inUse is now true\n        String[] tlds = {\"local\", \"pvt\"};\n\n        // When & Then\n        assertThrows(IllegalStateException.class, () -> {\n            DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, tlds);\n        });\n    }\n\n    @Test\n    public void testUpdateTLDOverride_IllegalArgumentException() {\n        // Given\n        String[] tlds = {\"local\", \"pvt\"};\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            DomainValidator.updateTLDOverride(ArrayType.GENERIC_RO, tlds);\n        });\n    }\n\n    @Test\n    public void testUpdateTLDOverride_EmptyTLDs() {\n        // Given\n        String[] tlds = {};\n\n        // When\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, tlds);\n\n        // Then\n        // No exception should be thrown, and no changes should be made\n        assertFalse(validator.isValidGenericTld(\"local\"));\n        assertFalse(validator.isValid(\"abc.local\"));\n    }\n}\n"}]