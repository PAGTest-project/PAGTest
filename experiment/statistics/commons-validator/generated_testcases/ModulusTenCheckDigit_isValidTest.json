[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines.checkdigit;\n\nimport org.apache.commons.validator.GenericValidator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass ModulusTenCheckDigit_isValidTest {\n\n    @Test\n    void testIsValid_BlankOrNullCode() {\n        ModulusTenCheckDigit checkDigit = new ModulusTenCheckDigit(new int[]{1});\n        assertFalse(checkDigit.isValid(null));\n        assertFalse(checkDigit.isValid(\"\"));\n        assertFalse(checkDigit.isValid(\"   \"));\n    }\n\n    @Test\n    void testIsValid_NonDigitCheckDigit() {\n        ModulusTenCheckDigit checkDigit = new ModulusTenCheckDigit(new int[]{1});\n        assertFalse(checkDigit.isValid(\"123A\"));\n    }\n\n    @Test\n    void testIsValid_ValidCode() {\n        ModulusTenCheckDigit checkDigit = new ModulusTenCheckDigit(new int[]{1});\n        ModulusCheckDigit mockSuper = mock(ModulusCheckDigit.class);\n        when(mockSuper.isValid(\"1234\")).thenReturn(true);\n        checkDigit.setSuper(mockSuper);\n        assertTrue(checkDigit.isValid(\"1234\"));\n    }\n\n    private static class ModulusCheckDigit {\n        public boolean isValid(String code) {\n            return true; // Mock implementation\n        }\n    }\n\n    private static class ModulusTenCheckDigit extends ModulusCheckDigit {\n        private final int[] postitionWeight;\n        private ModulusCheckDigit superCheckDigit;\n\n        public ModulusTenCheckDigit(int[] postitionWeight) {\n            this.postitionWeight = postitionWeight;\n        }\n\n        public void setSuper(ModulusCheckDigit superCheckDigit) {\n            this.superCheckDigit = superCheckDigit;\n        }\n\n        @Override\n        public boolean isValid(String code) {\n            if (GenericValidator.isBlankOrNull(code)) {\n                return false;\n            }\n            if (!Character.isDigit(code.charAt(code.length() - 1))) {\n                return false;\n            }\n            return superCheckDigit.isValid(code);\n        }\n    }\n}\n"}]