[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.util;\n\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.when;\n\npublic class ValidatorUtils_getValueAsStringTest {\n\n    @Test\n    public void testGetValueAsString_PropertyFound_String() throws Exception {\n        Object bean = new Object();\n        String property = \"someProperty\";\n        String expectedValue = \"someValue\";\n\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(expectedValue, result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyFound_StringArray() throws Exception {\n        Object bean = new Object();\n        String property = \"someProperty\";\n        String[] expectedValue = {\"value1\", \"value2\"};\n\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(expectedValue.toString(), result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyFound_EmptyStringArray() throws Exception {\n        Object bean = new Object();\n        String property = \"someProperty\";\n        String[] expectedValue = {};\n\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyFound_Collection() throws Exception {\n        Object bean = new Object();\n        String property = \"someProperty\";\n        Collection<String> expectedValue = Collections.singletonList(\"value1\");\n\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(expectedValue.toString(), result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyFound_EmptyCollection() throws Exception {\n        Object bean = new Object();\n        String property = \"someProperty\";\n        Collection<String> expectedValue = Collections.emptyList();\n\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyNotFound() throws Exception {\n        Object bean = new Object();\n        String property = \"nonExistentProperty\";\n\n        when(PropertyUtils.getProperty(bean, property)).thenThrow(new ReflectiveOperationException());\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertNull(result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsNull() throws Exception {\n        Object bean = new Object();\n        String property = \"someProperty\";\n\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(null);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertNull(result);\n    }\n}\n"}]