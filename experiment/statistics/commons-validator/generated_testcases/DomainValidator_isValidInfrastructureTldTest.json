[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_isValidInfrastructureTldTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance();\n    }\n\n    @Test\n    public void testIsValidInfrastructureTld() {\n        // Valid infrastructure TLDs\n        assertTrue(validator.isValidInfrastructureTld(\"arpa\"), \"arpa should validate as iTLD\");\n        assertTrue(validator.isValidInfrastructureTld(\"ARPA\"), \"ARPA should validate as iTLD\");\n\n        // Invalid infrastructure TLDs\n        assertFalse(validator.isValidInfrastructureTld(\"com\"), \"com shouldn't validate as iTLD\");\n        assertFalse(validator.isValidInfrastructureTld(\"\"), \"empty string shouldn't validate as iTLD\");\n        assertFalse(validator.isValidInfrastructureTld(null), \"null shouldn't validate as iTLD\");\n    }\n\n    @Test\n    public void testChompLeadingDot() {\n        assertEquals(\"example.com\", validator.chompLeadingDot(\".example.com\"), \"Leading dot should be removed\");\n        assertEquals(\"example.com\", validator.chompLeadingDot(\"example.com\"), \"String without leading dot should remain unchanged\");\n        assertEquals(\"\", validator.chompLeadingDot(\".\"), \"Single dot should be removed\");\n        assertEquals(\"\", validator.chompLeadingDot(\"\"), \"Empty string should remain unchanged\");\n    }\n\n    @Test\n    public void testUnicodeToASCII() {\n        assertEquals(\"xn--e1aybc\", validator.unicodeToASCII(\"\u043f\u0440\u0438\u043c\u0435\u0440\"), \"Unicode string should be converted to ASCII Punycode\");\n        assertEquals(\"example.com\", validator.unicodeToASCII(\"example.com\"), \"ASCII string should remain unchanged\");\n        assertEquals(\"\", validator.unicodeToASCII(\"\"), \"Empty string should remain unchanged\");\n    }\n\n    @Test\n    public void testArrayContains() {\n        String[] array = {\"arpa\", \"com\", \"net\"};\n        assertTrue(validator.arrayContains(array, \"arpa\"), \"arpa should be found in the array\");\n        assertFalse(validator.arrayContains(array, \"org\"), \"org should not be found in the array\");\n    }\n}\n"}]