[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_isValidTldTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance();\n    }\n\n    @Test\n    public void testIsValidTld() {\n        // Given valid TLDs\n        String validCountryCodeTld = \"uk\";\n        String validGenericTld = \"com\";\n        String validInfrastructureTld = \"arpa\";\n        String validLocalTld = \"local\";\n\n        // When validating TLDs\n        boolean isValidCountryCodeTld = validator.isValidTld(validCountryCodeTld);\n        boolean isValidGenericTld = validator.isValidTld(validGenericTld);\n        boolean isValidInfrastructureTld = validator.isValidTld(validInfrastructureTld);\n        boolean isValidLocalTld = validator.isValidTld(validLocalTld);\n\n        // Then all valid TLDs should be valid\n        assertTrue(isValidCountryCodeTld, \"Valid country code TLD should be valid\");\n        assertTrue(isValidGenericTld, \"Valid generic TLD should be valid\");\n        assertTrue(isValidInfrastructureTld, \"Valid infrastructure TLD should be valid\");\n        assertTrue(isValidLocalTld, \"Valid local TLD should be valid\");\n    }\n\n    @Test\n    public void testIsValidTldWithInvalidTld() {\n        // Given invalid TLDs\n        String invalidTld = \"invalid\";\n\n        // When validating TLDs\n        boolean isValidTld = validator.isValidTld(invalidTld);\n\n        // Then invalid TLD should not be valid\n        assertFalse(isValidTld, \"Invalid TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidTldWithNull() {\n        // Given null TLD\n        String nullTld = null;\n\n        // When validating TLDs\n        boolean isValidTld = validator.isValidTld(nullTld);\n\n        // Then null TLD should not be valid\n        assertFalse(isValidTld, \"Null TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidTldWithEmptyString() {\n        // Given empty TLD\n        String emptyTld = \"\";\n\n        // When validating TLDs\n        boolean isValidTld = validator.isValidTld(emptyTld);\n\n        // Then empty TLD should not be valid\n        assertFalse(isValidTld, \"Empty TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidTldWithLeadingDot() {\n        // Given TLDs with leading dots\n        String validCountryCodeTld = \".uk\";\n        String validGenericTld = \".com\";\n        String validInfrastructureTld = \".arpa\";\n        String validLocalTld = \".local\";\n\n        // When validating TLDs\n        boolean isValidCountryCodeTld = validator.isValidTld(validCountryCodeTld);\n        boolean isValidGenericTld = validator.isValidTld(validGenericTld);\n        boolean isValidInfrastructureTld = validator.isValidTld(validInfrastructureTld);\n        boolean isValidLocalTld = validator.isValidTld(validLocalTld);\n\n        // Then TLDs with leading dots should be valid\n        assertTrue(isValidCountryCodeTld, \"Country code TLD with leading dot should be valid\");\n        assertTrue(isValidGenericTld, \"Generic TLD with leading dot should be valid\");\n        assertTrue(isValidInfrastructureTld, \"Infrastructure TLD with leading dot should be valid\");\n        assertTrue(isValidLocalTld, \"Local TLD with leading dot should be valid\");\n    }\n\n    @Test\n    public void testIsValidTldWithUnicode() {\n        // Given TLDs with Unicode characters\n        String validCountryCodeTld = \"\u0627\u0644\u0627\u0631\u062f\u0646\"; // Jordan in Arabic\n        String validGenericTld = \"\u516c\u53f8\"; // Company in Chinese\n\n        // When validating TLDs\n        boolean isValidCountryCodeTld = validator.isValidTld(validCountryCodeTld);\n        boolean isValidGenericTld = validator.isValidTld(validGenericTld);\n\n        // Then TLDs with Unicode characters should be valid\n        assertTrue(isValidCountryCodeTld, \"Country code TLD with Unicode characters should be valid\");\n        assertTrue(isValidGenericTld, \"Generic TLD with Unicode characters should be valid\");\n    }\n}\n"}]