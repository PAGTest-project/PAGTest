[{"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest.[void]testFRLocale()", "name": "testFRLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFRLocale()", "original_string": "    @Test\n    public void testFRLocale() throws ValidatorException {\n        // Create bean to run test on.\n        final TypeBean info = new TypeBean();\n        info.setByte(\"12\");\n        info.setShort(\"-129\");\n        info.setInteger(\"1443\");\n        info.setLong(\"88000\");\n        info.setFloat(\"12,1555\");\n        info.setDouble(\"129,1551511111\");\n        info.setDate(\"21/12/2010\");\n        final Map<String, ?> map = localeTest(info, Locale.FRENCH);\n        assertEquals(12, ((Float) map.get(\"float\")).intValue(), \"float value not correct\");\n        assertEquals(129, ((Double) map.get(\"double\")).intValue(), \"double value not correct\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "class_name": "GenericTypeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the fr locale.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest.[void]testType()", "name": "testType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testType()", "original_string": "    @Test\n    public void testType() throws ValidatorException {\n        // Create bean to run test on.\n        final TypeBean info = new TypeBean();\n        info.setByte(\"12\");\n        info.setShort(\"129\");\n        info.setInteger(\"-144\");\n        info.setLong(\"88000\");\n        info.setFloat(\"12.1555f\");\n        info.setDouble(\"129.1551511111d\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final Map<String, ?> hResultValues = results.getResultValueMap();\n\n        assertTrue(hResultValues.get(\"byte\") instanceof Byte, \"Expecting byte result to be an instance of Byte.\");\n        assertTrue(hResultValues.get(\"short\") instanceof Short, \"Expecting short result to be an instance of Short.\");\n        assertTrue(hResultValues.get(\"integer\") instanceof Integer, \"Expecting integer result to be an instance of Integer.\");\n        assertTrue(hResultValues.get(\"long\") instanceof Long, \"Expecting long result to be an instance of Long.\");\n        assertTrue(hResultValues.get(\"float\") instanceof Float, \"Expecting float result to be an instance of Float.\");\n        assertTrue(hResultValues.get(\"double\") instanceof Double, \"Expecting double result to be an instance of Double.\");\n\n        for (final String key : hResultValues.keySet()) {\n            final Object value = hResultValues.get(key);\n\n            assertNotNull(value, \"value ValidatorResults.getResultValueMap() should not be null.\");\n        }\n\n        // ValidatorResult result = results.getValidatorResult(\"value\");\n\n        // assertNotNull(ACTION + \" value ValidatorResult should not be null.\", result);\n        // assertTrue(ACTION + \" value ValidatorResult should contain the '\" + ACTION +\"' action.\", result.containsAction(ACTION));\n        // assertTrue(ACTION + \" value ValidatorResult for the '\" + ACTION +\"' action should have \" + (passed ? \"passed\" : \"failed\") + \".\", (passed ?\n        // result.isValid(ACTION) : !result.isValid(ACTION)));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "class_name": "GenericTypeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest.[void]testUSLocale()", "name": "testUSLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUSLocale()", "original_string": "    @Test\n    public void testUSLocale() throws ValidatorException {\n        // Create bean to run test on.\n        final TypeBean info = new TypeBean();\n        info.setByte(\"12\");\n        info.setShort(\"129\");\n        info.setInteger(\"-144\");\n        info.setLong(\"88000\");\n        info.setFloat(\"12.1555\");\n        info.setDouble(\"129.1551511111\");\n        info.setDate(\"12/21/2010\");\n        localeTest(info, Locale.US);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "class_name": "GenericTypeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the us locale\n"}, {"uris": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testAddAllowedCardType()", "name": "testAddAllowedCardType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllowedCardType()", "original_string": "    @Test\n    public void testAddAllowedCardType() {\n        final CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.NONE);\n        // Turned off all cards so even valid numbers should fail\n        assertFalse(ccv.isValid(VALID_VISA));\n        assertFalse(ccv.isValid(VALID_AMEX));\n        assertFalse(ccv.isValid(VALID_MASTERCARD));\n        assertFalse(ccv.isValid(VALID_DISCOVER));\n\n        // test our custom type\n        ccv.addAllowedCardType(new DinersClub());\n        assertTrue(ccv.isValid(VALID_DINERS));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testIsValid()", "name": "testIsValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid()", "original_string": "    @Test\n    public void testIsValid() {\n        CreditCardValidator ccv = new CreditCardValidator();\n\n        assertFalse(ccv.isValid(null));\n        assertFalse(ccv.isValid(\"\"));\n        assertFalse(ccv.isValid(\"123456789012\")); // too short\n        assertFalse(ccv.isValid(\"12345678901234567890\")); // too long\n        assertFalse(ccv.isValid(\"4417123456789112\"));\n        assertFalse(ccv.isValid(\"4417q23456w89113\"));\n        assertTrue(ccv.isValid(VALID_VISA));\n        assertTrue(ccv.isValid(VALID_SHORT_VISA));\n        assertTrue(ccv.isValid(VALID_AMEX));\n        assertTrue(ccv.isValid(VALID_MASTERCARD));\n        assertTrue(ccv.isValid(VALID_DISCOVER));\n\n        // disallow Visa so it should fail even with good number\n        ccv = new CreditCardValidator(CreditCardValidator.AMEX);\n        assertFalse(ccv.isValid(\"4417123456789113\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest.[void]testInvalidDate()", "name": "testInvalidDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidDate()", "original_string": "    @Test\n    public void testInvalidDate() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"12/01as/2005\");\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DateTest.java", "class_name": "DateTest", "class_uri": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the date validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest.[void]testValidDate()", "name": "testValidDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidDate()", "original_string": "    @Test\n    public void testValidDate() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"12/01/2005\");\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DateTest.java", "class_name": "DateTest", "class_uri": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the date validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java.Field_setDependsTest.[void]testSetDepends()", "name": "testSetDepends", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetDepends()", "original_string": "    @Test\n    public void testSetDepends() {\n        Field field = new Field();\n        field.setDepends(\"dependency1, dependency2, dependency3\");\n\n        List<String> dependencyList = field.getDependencyList();\n        assertEquals(3, dependencyList.size());\n        assertTrue(dependencyList.contains(\"dependency1\"));\n        assertTrue(dependencyList.contains(\"dependency2\"));\n        assertTrue(dependencyList.contains(\"dependency3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java", "class_name": "Field_setDependsTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java.Field_setDependsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java.Field_setDependsTest.[void]testSetDependsWithEmptyTokens()", "name": "testSetDependsWithEmptyTokens", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetDependsWithEmptyTokens()", "original_string": "    @Test\n    public void testSetDependsWithEmptyTokens() {\n        Field field = new Field();\n        field.setDepends(\"dependency1,, dependency3\");\n\n        List<String> dependencyList = field.getDependencyList();\n        assertEquals(2, dependencyList.size());\n        assertTrue(dependencyList.contains(\"dependency1\"));\n        assertTrue(dependencyList.contains(\"dependency3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java", "class_name": "Field_setDependsTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java.Field_setDependsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java.Field_setDependsTest.[void]testSetDependsWithNullAndEmpty()", "name": "testSetDependsWithNullAndEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetDependsWithNullAndEmpty()", "original_string": "    @Test\n    public void testSetDependsWithNullAndEmpty() {\n        Field field = new Field();\n        field.setDepends(\"dependency1, , dependency3\");\n\n        List<String> dependencyList = field.getDependencyList();\n        assertEquals(2, dependencyList.size());\n        assertTrue(dependencyList.contains(\"dependency1\"));\n        assertTrue(dependencyList.contains(\"dependency3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java", "class_name": "Field_setDependsTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java.Field_setDependsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest.[void]testValidatorException()", "name": "testValidatorException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidatorException()", "original_string": "    @Test\n    public void testValidatorException() {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"VALIDATOR\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n\n        // Get results of the validation which can throw ValidatorException\n        try {\n            validator.validate();\n            fail(\"ValidatorException should occur here!\");\n        } catch (final ValidatorException expected) {\n            assertTrue(\"VALIDATOR-EXCEPTION\".equals(expected.getMessage()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExceptionTest.java", "class_name": "ExceptionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests handling of checked exceptions - should become ValidatorExceptions.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest.[void]testMaxLength_WithinLimit()", "name": "testMaxLength_WithinLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxLength_WithinLimit()", "original_string": "    @Test\n    public void testMaxLength_WithinLimit() {\n        String value = \"Hello\\nWorld\";\n        int max = 15;\n        int lineEndLength = 1;\n        assertTrue(GenericValidator.maxLength(value, max, lineEndLength));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java", "class_name": "GenericValidator_maxLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest.[void]testMaxLength_ExceedsLimit()", "name": "testMaxLength_ExceedsLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxLength_ExceedsLimit()", "original_string": "    @Test\n    public void testMaxLength_ExceedsLimit() {\n        String value = \"Hello\\nWorld\\r\";\n        int max = 10;\n        int lineEndLength = 1;\n        assertFalse(GenericValidator.maxLength(value, max, lineEndLength));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java", "class_name": "GenericValidator_maxLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest.[void]testMaxLength_NoLineEndings()", "name": "testMaxLength_NoLineEndings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxLength_NoLineEndings()", "original_string": "    @Test\n    public void testMaxLength_NoLineEndings() {\n        String value = \"HelloWorld\";\n        int max = 10;\n        int lineEndLength = 1;\n        assertTrue(GenericValidator.maxLength(value, max, lineEndLength));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java", "class_name": "GenericValidator_maxLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest.[void]testMaxLength_EmptyString()", "name": "testMaxLength_EmptyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxLength_EmptyString()", "original_string": "    @Test\n    public void testMaxLength_EmptyString() {\n        String value = \"\";\n        int max = 5;\n        int lineEndLength = 1;\n        assertTrue(GenericValidator.maxLength(value, max, lineEndLength));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java", "class_name": "GenericValidator_maxLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest.[void]testMaxLength_ExactlyAtLimit()", "name": "testMaxLength_ExactlyAtLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxLength_ExactlyAtLimit()", "original_string": "    @Test\n    public void testMaxLength_ExactlyAtLimit() {\n        String value = \"Hello\\nWorld\";\n        int max = 11;\n        int lineEndLength = 1;\n        assertTrue(GenericValidator.maxLength(value, max, lineEndLength));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java", "class_name": "GenericValidator_maxLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java.GenericValidator_maxLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[void]testByte()", "name": "testByte", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByte()", "original_string": "    @Test\n    public void testByte() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"0\");\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[void]testByteBeyondMax()", "name": "testByteBeyondMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteBeyondMax()", "original_string": "    @Test\n    public void testByteBeyondMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Byte.MAX_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[void]testByteBeyondMin()", "name": "testByteBeyondMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteBeyondMin()", "original_string": "    @Test\n    public void testByteBeyondMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Byte.MIN_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[void]testByteFailure()", "name": "testByteFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteFailure()", "original_string": "    @Test\n    public void testByteFailure() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[void]testByteMax()", "name": "testByteMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteMax()", "original_string": "    @Test\n    public void testByteMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Byte.toString(Byte.MAX_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[void]testByteMin()", "name": "testByteMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteMin()", "original_string": "    @Test\n    public void testByteMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Byte.toString(Byte.MIN_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the byte validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java.ValidatorResources_addConstantTest.[void]testAddConstant()", "name": "testAddConstant", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddConstant()", "original_string": "    @Test\n    public void testAddConstant() {\n        // Given\n        String name = \"testConstant\";\n        String value = \"testValue\";\n\n        // When\n        validatorResources.addConstant(name, value);\n\n        // Then\n        assertEquals(value, validatorResources.getConstants().get(name));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java", "class_name": "ValidatorResources_addConstantTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java.ValidatorResources_addConstantTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java.ValidatorResources_addConstantTest.[void]testAddConstantWithDebugLogging()", "name": "testAddConstantWithDebugLogging", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddConstantWithDebugLogging()", "original_string": "    @Test\n    public void testAddConstantWithDebugLogging() {\n        // Given\n        String name = \"testConstant\";\n        String value = \"testValue\";\n\n        // When\n        validatorResources.addConstant(name, value);\n\n        // Then\n        Mockito.verify(log).debug(\"Adding Global Constant: \" + name + \",\" + value);\n        assertEquals(value, validatorResources.getConstants().get(name));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java", "class_name": "ValidatorResources_addConstantTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java.ValidatorResources_addConstantTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]testDefaultForm()", "name": "testDefaultForm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultForm()", "original_string": "    @Test\n    public void testDefaultForm() {\n\n        final String formKey = FORM_PREFIX + \"default\";\n\n        // *** US locale ***\n        checkForm(Locale.US, formKey, \"default\");\n\n        // *** French locale ***\n        checkForm(Locale.FRENCH, formKey, \"default\");\n\n        // *** France locale ***\n        checkForm(Locale.FRANCE, formKey, \"default\");\n\n        // *** Candian (English) locale ***\n        checkForm(Locale.CANADA, formKey, \"default\");\n\n        // *** Candian French locale ***\n        checkForm(Locale.CANADA_FRENCH, formKey, \"default\");\n\n        // *** Candian French Variant locale ***\n        checkForm(CANADA_FRENCH_XXX, formKey, \"default\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a form defined only in the \"default\" formset.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]testFormNotFound()", "name": "testFormNotFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormNotFound()", "original_string": "    @Test\n    public void testFormNotFound() {\n\n        final String formKey = \"INVALID_NAME\";\n\n        // *** US locale ***\n        checkFormNotFound(Locale.US, formKey);\n\n        // *** French locale ***\n        checkFormNotFound(Locale.FRENCH, formKey);\n\n        // *** France locale ***\n        checkFormNotFound(Locale.FRANCE, formKey);\n\n        // *** Candian (English) locale ***\n        checkFormNotFound(Locale.CANADA, formKey);\n\n        // *** Candian French locale ***\n        checkFormNotFound(Locale.CANADA_FRENCH, formKey);\n\n        // *** Candian French Variant locale ***\n        checkFormNotFound(CANADA_FRENCH_XXX, formKey);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a form not defined\n"}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]testLanguageCountryForm()", "name": "testLanguageCountryForm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLanguageCountryForm()", "original_string": "    @Test\n    public void testLanguageCountryForm() {\n\n        final String formKey = FORM_PREFIX + \"language_country\";\n\n        // *** US locale ***\n        checkForm(Locale.US, formKey, \"default\");\n\n        // *** French locale ***\n        checkForm(Locale.FRENCH, formKey, \"fr\");\n\n        // *** France locale ***\n        checkForm(Locale.FRANCE, formKey, \"fr_FR\");\n\n        // *** Candian (English) locale ***\n        checkForm(Locale.CANADA, formKey, \"default\");\n\n        // *** Candian French locale ***\n        checkForm(Locale.CANADA_FRENCH, formKey, \"fr_CA\");\n\n        // *** Candian French Variant locale ***\n        checkForm(CANADA_FRENCH_XXX, formKey, \"fr_CA\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a form defined in the \"default\" formset, formsets where just the \"language\" is specified and formset where the language and country are specified.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]testLanguageCountryVariantForm()", "name": "testLanguageCountryVariantForm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLanguageCountryVariantForm()", "original_string": "    @Test\n    public void testLanguageCountryVariantForm() {\n\n        final String formKey = FORM_PREFIX + \"language_country_variant\";\n\n        // *** US locale ***\n        checkForm(Locale.US, formKey, \"default\");\n\n        // *** French locale ***\n        checkForm(Locale.FRENCH, formKey, \"fr\");\n\n        // *** France locale ***\n        checkForm(Locale.FRANCE, formKey, \"fr_FR\");\n\n        // *** Candian (English) locale ***\n        checkForm(Locale.CANADA, formKey, \"default\");\n\n        // *** Candian French locale ***\n        checkForm(Locale.CANADA_FRENCH, formKey, \"fr_CA\");\n\n        // *** Candian French Variant locale ***\n        checkForm(CANADA_FRENCH_XXX, formKey, \"fr_CA_XXX\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a form defined in all the formsets\n"}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]testLanguageForm()", "name": "testLanguageForm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLanguageForm()", "original_string": "    @Test\n    public void testLanguageForm() {\n\n        final String formKey = FORM_PREFIX + \"language\";\n\n        // *** US locale ***\n        checkForm(Locale.US, formKey, \"default\");\n\n        // *** French locale ***\n        checkForm(Locale.FRENCH, formKey, \"fr\");\n\n        // *** France locale ***\n        checkForm(Locale.FRANCE, formKey, \"fr\");\n\n        // *** Candian (English) locale ***\n        checkForm(Locale.CANADA, formKey, \"default\");\n\n        // *** Candian French locale ***\n        checkForm(Locale.CANADA_FRENCH, formKey, \"fr\");\n\n        // *** Candian French Variant locale ***\n        checkForm(CANADA_FRENCH_XXX, formKey, \"fr\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a form defined in the \"default\" formset and formsets where just the \"language\" is specified.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EntityImportTest.java.EntityImportTest.[void]testEntityImport()", "name": "testEntityImport", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntityImport()", "original_string": "    @Test\n    public void testEntityImport() throws Exception {\n        final URL url = getClass().getResource(\"EntityImportTest-config.xml\");\n        final ValidatorResources resources = new ValidatorResources(url.toExternalForm());\n        assertNotNull(resources.getForm(Locale.getDefault(), \"byteForm\"), \"Form should be found\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EntityImportTest.java", "class_name": "EntityImportTest", "class_uri": "src/test/java/org/apache/commons/validator/EntityImportTest.java.EntityImportTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the entity import loading the {@code byteForm} form.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EntityImportTest.java.EntityImportTest.[void]testParseURL()", "name": "testParseURL", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParseURL()", "original_string": "    @Test\n    public void testParseURL() throws Exception {\n        final URL url = getClass().getResource(\"EntityImportTest-config.xml\");\n        final ValidatorResources resources = new ValidatorResources(url);\n        assertNotNull(resources.getForm(Locale.getDefault(), \"byteForm\"), \"Form should be found\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EntityImportTest.java", "class_name": "EntityImportTest", "class_uri": "src/test/java/org/apache/commons/validator/EntityImportTest.java.EntityImportTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests loading ValidatorResources from a URL\n"}, {"uris": "src/test/java/org/apache/commons/validator/Var_toStringTest.java.Var_toStringTest.[void]testToStringWithResource()", "name": "testToStringWithResource", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithResource()", "original_string": "    @Test\n    public void testToStringWithResource() {\n        var.setName(\"testName\");\n        var.setValue(\"testValue\");\n        var.setJsType(\"string\");\n        var.setResource(true);\n        var.setBundle(\"testBundle\");\n\n        String expected = \"Var: name=testName  value=testValue  resource=true  bundle=testBundle  jsType=string\\n\";\n        assertEquals(expected, var.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Var_toStringTest.java", "class_name": "Var_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/Var_toStringTest.java.Var_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Var_toStringTest.java.Var_toStringTest.[void]testToStringWithoutResource()", "name": "testToStringWithoutResource", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithoutResource()", "original_string": "    @Test\n    public void testToStringWithoutResource() {\n        var.setName(\"testName\");\n        var.setValue(\"testValue\");\n        var.setJsType(\"string\");\n        var.setResource(false);\n\n        String expected = \"Var: name=testName  value=testValue  resource=false  jsType=string\\n\";\n        assertEquals(expected, var.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Var_toStringTest.java", "class_name": "Var_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/Var_toStringTest.java.Var_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest.[void]testMatchRegexp_ValidPattern()", "name": "testMatchRegexp_ValidPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchRegexp_ValidPattern()", "original_string": "    @Test\n    public void testMatchRegexp_ValidPattern() {\n        assertTrue(GenericValidator.matchRegexp(\"abc123\", \"^[a-z0-9]+$\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java", "class_name": "GenericValidator_matchRegexpTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest.[void]testMatchRegexp_InvalidPattern()", "name": "testMatchRegexp_InvalidPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchRegexp_InvalidPattern()", "original_string": "    @Test\n    public void testMatchRegexp_InvalidPattern() {\n        assertFalse(GenericValidator.matchRegexp(\"abc123\", \"^[A-Z0-9]+$\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java", "class_name": "GenericValidator_matchRegexpTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest.[void]testMatchRegexp_NullPattern()", "name": "testMatchRegexp_NullPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchRegexp_NullPattern()", "original_string": "    @Test\n    public void testMatchRegexp_NullPattern() {\n        assertFalse(GenericValidator.matchRegexp(\"abc123\", null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java", "class_name": "GenericValidator_matchRegexpTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest.[void]testMatchRegexp_EmptyPattern()", "name": "testMatchRegexp_EmptyPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchRegexp_EmptyPattern()", "original_string": "    @Test\n    public void testMatchRegexp_EmptyPattern() {\n        assertFalse(GenericValidator.matchRegexp(\"abc123\", \"\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java", "class_name": "GenericValidator_matchRegexpTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java.GenericValidator_matchRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[void]testManualBoolean()", "name": "testManualBoolean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManualBoolean()", "original_string": "    @Test\n    public void testManualBoolean() {\n        final ValidatorResources resources = new ValidatorResources();\n\n        final ValidatorAction va = new ValidatorAction();\n        va.setName(\"capLetter\");\n        va.setClassName(\"org.apache.commons.validator.ValidatorTest\");\n        va.setMethod(\"isCapLetter\");\n        va.setMethodParams(\"java.lang.Object,org.apache.commons.validator.Field,java.util.List\");\n\n        final FormSet fs = new FormSet();\n        final Form form = new Form();\n        form.setName(\"testForm\");\n        final Field field = new Field();\n        field.setProperty(\"letter\");\n        field.setDepends(\"capLetter\");\n        form.addField(field);\n        fs.addForm(form);\n\n        resources.addValidatorAction(va);\n        resources.addFormSet(fs);\n        resources.process();\n\n        final List<?> l = new ArrayList<>();\n\n        final TestBean bean = new TestBean();\n        bean.setLetter(\"A\");\n\n        final Validator validator = new Validator(resources, \"testForm\");\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n        validator.setParameter(\"java.util.List\", l);\n\n        try {\n            validator.validate();\n        } catch (final Exception e) {\n            fail(\"An exception was thrown while calling Validator.validate()\");\n        }\n\n        assertEquals(0, l.size(), \"Validation of the letter 'A'.\");\n\n        l.clear();\n        bean.setLetter(\"AA\");\n\n        try {\n            validator.validate();\n        } catch (final Exception e) {\n            fail(\"An exception was thrown while calling Validator.validate()\");\n        }\n\n        assertEquals(1, l.size(), \"Validation of the letter 'AA'.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that one value generates an error and the other passes. The validation method being tested returns a {@code boolean} value.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[void]testManualBooleanDeprecated()", "name": "testManualBooleanDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManualBooleanDeprecated()", "original_string": "    @Test\n    public void testManualBooleanDeprecated() {\n        final ValidatorResources resources = new ValidatorResources();\n\n        final ValidatorAction va = new ValidatorAction();\n        va.setName(\"capLetter\");\n        va.setClassname(\"org.apache.commons.validator.ValidatorTest\");\n        va.setMethod(\"isCapLetter\");\n        va.setMethodParams(\"java.lang.Object,org.apache.commons.validator.Field,java.util.List\");\n\n        final FormSet fs = new FormSet();\n        final Form form = new Form();\n        form.setName(\"testForm\");\n        final Field field = new Field();\n        field.setProperty(\"letter\");\n        field.setDepends(\"capLetter\");\n        form.addField(field);\n        fs.addForm(form);\n\n        resources.addValidatorAction(va);\n        resources.addFormSet(fs);\n        resources.process();\n\n        final List<?> l = new ArrayList<>();\n\n        final TestBean bean = new TestBean();\n        bean.setLetter(\"A\");\n\n        final Validator validator = new Validator(resources, \"testForm\");\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n        validator.setParameter(\"java.util.List\", l);\n\n        try {\n            validator.validate();\n        } catch (final Exception e) {\n            fail(\"An exception was thrown while calling Validator.validate()\");\n        }\n\n        assertEquals(0, l.size(), \"Validation of the letter 'A'.\");\n\n        l.clear();\n        bean.setLetter(\"AA\");\n\n        try {\n            validator.validate();\n        } catch (final Exception e) {\n            fail(\"An exception was thrown while calling Validator.validate()\");\n        }\n\n        assertEquals(1, l.size(), \"Validation of the letter 'AA'.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that one value generates an error and the other passes. The validation method being tested returns a {@code boolean} value.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[void]testManualObject()", "name": "testManualObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManualObject()", "original_string": "    @Test\n    public void testManualObject() {\n        // property name of the method we are validating\n        final String property = \"date\";\n        // name of ValidatorAction\n        final String action = \"date\";\n        final ValidatorResources resources = setupDateResources(property, action);\n\n        final TestBean bean = new TestBean();\n        bean.setDate(\"2/3/1999\");\n\n        final Validator validator = new Validator(resources, \"testForm\");\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n\n        try {\n            final ValidatorResults results = validator.validate();\n\n            assertNotNull(results, \"Results are null.\");\n\n            final ValidatorResult result = results.getValidatorResult(property);\n\n            assertNotNull(results, \"Results are null.\");\n\n            assertTrue(result.containsAction(action), \"ValidatorResult does not contain '\" + action + \"' validator result.\");\n\n            assertTrue(result.isValid(action), \"Validation of the date formatting has failed.\");\n        } catch (final Exception e) {\n            fail(\"An exception was thrown while calling Validator.validate()\");\n        }\n\n        bean.setDate(\"2/30/1999\");\n\n        try {\n            final ValidatorResults results = validator.validate();\n\n            assertNotNull(results, \"Results are null.\");\n\n            final ValidatorResult result = results.getValidatorResult(property);\n\n            assertNotNull(results, \"Results are null.\");\n\n            assertTrue(result.containsAction(action), \"ValidatorResult does not contain '\" + action + \"' validator result.\");\n\n            assertTrue(!result.isValid(action), \"Validation of the date formatting has passed when it should have failed.\");\n        } catch (final Exception e) {\n            fail(\"An exception was thrown while calling Validator.validate()\");\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that one value generates an error and the other passes. The validation method being tested returns an object ({@code null} will be considered\nan error).\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[void]testOnlyReturnErrors()", "name": "testOnlyReturnErrors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnlyReturnErrors()", "original_string": "    @Test\n    public void testOnlyReturnErrors() throws ValidatorException {\n        // property name of the method we are validating\n        final String property = \"date\";\n        // name of ValidatorAction\n        final String action = \"date\";\n        final ValidatorResources resources = setupDateResources(property, action);\n\n        final TestBean bean = new TestBean();\n        bean.setDate(\"2/3/1999\");\n\n        final Validator validator = new Validator(resources, \"testForm\");\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n\n        ValidatorResults results = validator.validate();\n\n        assertNotNull(results);\n\n        // Field passed and should be in results\n        assertTrue(results.getPropertyNames().contains(property));\n\n        // Field passed but should not be in results\n        validator.setOnlyReturnErrors(true);\n        results = validator.validate();\n        assertFalse(results.getPropertyNames().contains(property));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[void]testOnlyValidateField()", "name": "testOnlyValidateField", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnlyValidateField()", "original_string": "    @Test\n    public void testOnlyValidateField() throws ValidatorException {\n        // property name of the method we are validating\n        final String property = \"date\";\n        // name of ValidatorAction\n        final String action = \"date\";\n        final ValidatorResources resources = setupDateResources(property, action);\n\n        final TestBean bean = new TestBean();\n        bean.setDate(\"2/3/1999\");\n\n        final Validator validator = new Validator(resources, \"testForm\", property);\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results);\n\n        // Field passed and should be in results\n        assertTrue(results.getPropertyNames().contains(property));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java.ValidatorResults_addTest.[void]testAddNewValidatorResult()", "name": "testAddNewValidatorResult", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddNewValidatorResult()", "original_string": "    @Test\n    public void testAddNewValidatorResult() {\n        validatorResults.add(field, \"testValidator\", true, \"testValue\");\n\n        ValidatorResult result = validatorResults.getValidatorResult(\"testKey\");\n        assertNotNull(result, \"ValidatorResult should not be null.\");\n        assertTrue(result.containsAction(\"testValidator\"), \"ValidatorResult should contain the 'testValidator' action.\");\n        assertEquals(\"testValue\", result.getResult(\"testValidator\"), \"Result value should match.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java", "class_name": "ValidatorResults_addTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java.ValidatorResults_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java.ValidatorResults_addTest.[void]testAddExistingValidatorResult()", "name": "testAddExistingValidatorResult", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddExistingValidatorResult()", "original_string": "    @Test\n    public void testAddExistingValidatorResult() {\n        validatorResults.add(field, \"testValidator\", true, \"testValue\");\n        validatorResults.add(field, \"anotherValidator\", false, \"anotherValue\");\n\n        ValidatorResult result = validatorResults.getValidatorResult(\"testKey\");\n        assertNotNull(result, \"ValidatorResult should not be null.\");\n        assertTrue(result.containsAction(\"testValidator\"), \"ValidatorResult should contain the 'testValidator' action.\");\n        assertTrue(result.containsAction(\"anotherValidator\"), \"ValidatorResult should contain the 'anotherValidator' action.\");\n        assertEquals(\"testValue\", result.getResult(\"testValidator\"), \"Result value should match.\");\n        assertEquals(\"anotherValue\", result.getResult(\"anotherValidator\"), \"Result value should match.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java", "class_name": "ValidatorResults_addTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java.ValidatorResults_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java.ValidatorResult_getResultTest.[void]testGetResultWithExistingValidatorName()", "name": "testGetResultWithExistingValidatorName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetResultWithExistingValidatorName()", "original_string": "    @Test\n    public void testGetResultWithExistingValidatorName() {\n        // Given\n        validatorResult.add(\"validator1\", true, \"result1\");\n\n        // When\n        Object result = validatorResult.getResult(\"validator1\");\n\n        // Then\n        assertEquals(\"result1\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java", "class_name": "ValidatorResult_getResultTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java.ValidatorResult_getResultTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java.ValidatorResult_getResultTest.[void]testGetResultWithNonExistingValidatorName()", "name": "testGetResultWithNonExistingValidatorName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetResultWithNonExistingValidatorName()", "original_string": "    @Test\n    public void testGetResultWithNonExistingValidatorName() {\n        // Given\n        validatorResult.add(\"validator1\", true, \"result1\");\n\n        // When\n        Object result = validatorResult.getResult(\"validator2\");\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java", "class_name": "ValidatorResult_getResultTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java.ValidatorResult_getResultTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest.[void]testBothBlank()", "name": "testBothBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBothBlank()", "original_string": "    @Test\n    public void testBothBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult);\n        assertTrue(firstNameResult.containsAction(ACTION));\n        assertTrue(!firstNameResult.isValid(ACTION));\n\n        assertNotNull(lastNameResult);\n        assertTrue(lastNameResult.containsAction(ACTION));\n        assertTrue(!lastNameResult.isValid(ACTION));\n        assertTrue(!lastNameResult.containsAction(\"int\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "class_name": "MultipleConfigFilesTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWith nothing provided, we should fail both because both are required.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest.[void]testMergedConfig()", "name": "testMergedConfig", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMergedConfig()", "original_string": "    @Test\n    public void testMergedConfig() {\n\n        // *********** Default Locale *******************\n\n        // Check the form from the first config file exists\n        final Form form1 = resources.getForm(\"\", \"\", \"\", \"testForm1\");\n        assertNotNull(form1, \"Form 'testForm1' not found\");\n\n        // Check the form from the second config file exists\n        final Form form2 = resources.getForm(\"\", \"\", \"\", \"testForm2\");\n        assertNotNull(form2, \"Form 'testForm2' not found\");\n\n        // Check the Constants for the form from the first config file\n        final Field field1 = form1.getField(\"testProperty1\");\n        assertEquals(\"testConstValue1\", field1.getVarValue(\"var11\"), \"testProperty1 - const 1\");\n        assertEquals(\"testConstValue2\", field1.getVarValue(\"var12\"), \"testProperty1 - const 2\");\n\n        // Check the Constants for the form from the second config file\n        final Field field2 = form2.getField(\"testProperty2\");\n        assertEquals(\"testConstValue1\", field2.getVarValue(\"var21\"), \"testProperty2 - const 1\");\n        assertEquals(\"testConstValue2\", field2.getVarValue(\"var22\"), \"testProperty2 - const 2\");\n\n        // *********** 'fr' locale *******************\n\n        // Check the form from the first config file exists\n        final Form form1Fr = resources.getForm(\"fr\", \"\", \"\", \"testForm1_fr\");\n        assertNotNull(form1Fr, \"Form 'testForm1_fr' not found\");\n\n        // Check the form from the second config file exists\n        final Form form2Fr = resources.getForm(\"fr\", \"\", \"\", \"testForm2_fr\");\n        assertNotNull(form2Fr, \"Form 'testForm2_fr' not found\");\n\n        // Check the Constants for the form from the first config file\n        final Field field1Fr = form1Fr.getField(\"testProperty1_fr\");\n        assertEquals(\"testConstValue1_fr\", field1Fr.getVarValue(\"var11_fr\"), \"testProperty1_fr - const 1\");\n        assertEquals(\"testConstValue2_fr\", field1Fr.getVarValue(\"var12_fr\"), \"testProperty1_fr - const 2\");\n\n        // Check the Constants for the form from the second config file\n        final Field field2Fr = form2Fr.getField(\"testProperty2_fr\");\n        assertEquals(\"testConstValue1_fr\", field2Fr.getVarValue(\"var21_fr\"), \"testProperty2_fr - const 1\");\n        assertEquals(\"testConstValue2_fr\", field2Fr.getVarValue(\"var22_fr\"), \"testProperty2_fr - const 2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "class_name": "MultipleConfigFilesTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCheck the forms and constants from different config files have been merged into the same FormSet.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest.[void]testRequiredFirstNameBlankLastNameShort()", "name": "testRequiredFirstNameBlankLastNameShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstNameBlankLastNameShort()", "original_string": "    @Test\n    public void testRequiredFirstNameBlankLastNameShort() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"Test\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult);\n        assertTrue(firstNameResult.containsAction(ACTION));\n        assertTrue(!firstNameResult.isValid(ACTION));\n\n        assertNotNull(lastNameResult);\n        assertTrue(lastNameResult.containsAction(\"int\"));\n        assertTrue(!lastNameResult.isValid(\"int\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "class_name": "MultipleConfigFilesTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf the first name fails required, and the second test fails int, we should get two errors.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest.[void]testRequiredLastNameLong()", "name": "testRequiredLastNameLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameLong()", "original_string": "    @Test\n    public void testRequiredLastNameLong() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n        name.setLastName(\"12345678\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult);\n        assertTrue(firstNameResult.containsAction(ACTION));\n        assertTrue(firstNameResult.isValid(ACTION));\n\n        assertNotNull(lastNameResult);\n        assertTrue(lastNameResult.containsAction(\"int\"));\n        assertTrue(lastNameResult.isValid(\"int\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "class_name": "MultipleConfigFilesTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf first name is ok and last name is ok and is an int, no errors.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest.[void]testRequiredLastNameShort()", "name": "testRequiredLastNameShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameShort()", "original_string": "    @Test\n    public void testRequiredLastNameShort() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Test\");\n        name.setLastName(\"Test\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult);\n        assertTrue(firstNameResult.containsAction(ACTION));\n        assertTrue(firstNameResult.isValid(ACTION));\n\n        assertNotNull(lastNameResult);\n        assertTrue(lastNameResult.containsAction(\"int\"));\n        assertTrue(!lastNameResult.isValid(\"int\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "class_name": "MultipleConfigFilesTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf the first name is there, and the last name fails int, we should get one error.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResult_getActionMapTest.java.ValidatorResult_getActionMapTest.[void]testGetActionMap()", "name": "testGetActionMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetActionMap()", "original_string": "    @Test\n    public void testGetActionMap() {\n        // Given\n        validatorResult.add(\"validator1\", true, \"result1\");\n        validatorResult.add(\"validator2\", false, \"result2\");\n\n        // When\n        Map<String, ValidatorResult.ResultStatus> actionMap = validatorResult.getActionMap();\n\n        // Then\n        assertNotNull(actionMap);\n        assertEquals(2, actionMap.size());\n        assertTrue(actionMap.containsKey(\"validator1\"));\n        assertTrue(actionMap.containsKey(\"validator2\"));\n        assertTrue(actionMap.get(\"validator1\").isValid());\n        assertFalse(actionMap.get(\"validator2\").isValid());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResult_getActionMapTest.java", "class_name": "ValidatorResult_getActionMapTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResult_getActionMapTest.java.ValidatorResult_getActionMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java.Field_getMsgTest.[void]testGetMsgWithExistingKey()", "name": "testGetMsgWithExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMsgWithExistingKey()", "original_string": "    @Test\n    public void testGetMsgWithExistingKey() {\n        Msg msg = new Msg();\n        msg.setName(\"testKey\"); // Set the name instead of the key\n        msg.setKey(\"testKey\");\n        field.addMsg(msg);\n\n        assertEquals(\"testKey\", field.getMsg(\"testKey\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java", "class_name": "Field_getMsgTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java.Field_getMsgTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java.Field_getMsgTest.[void]testGetMsgWithNonExistingKey()", "name": "testGetMsgWithNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMsgWithNonExistingKey()", "original_string": "    @Test\n    public void testGetMsgWithNonExistingKey() {\n        assertNull(field.getMsg(\"nonExistingKey\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java", "class_name": "Field_getMsgTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java.Field_getMsgTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java.Field_getKeyTest.[void]testGetKeyWithNullKey()", "name": "testGetKeyWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetKeyWithNullKey()", "original_string": "    @Test\n    public void testGetKeyWithNullKey() {\n        // Given\n        field.property = \"testProperty\";\n        field.indexedListProperty = null;\n\n        // When\n        String result = field.getKey();\n\n        // Then\n        assertEquals(\"testProperty\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java", "class_name": "Field_getKeyTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java.Field_getKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java.Field_getKeyTest.[void]testGetKeyWithIndexedProperty()", "name": "testGetKeyWithIndexedProperty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetKeyWithIndexedProperty()", "original_string": "    @Test\n    public void testGetKeyWithIndexedProperty() {\n        // Given\n        field.property = \"testProperty\";\n        field.indexedListProperty = \"testIndexedListProperty\";\n\n        // When\n        String result = field.getKey();\n\n        // Then\n        assertEquals(\"testIndexedListProperty[].testProperty\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java", "class_name": "Field_getKeyTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java.Field_getKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java.GenericValidator_isDateTest.[void]testIsDateValid()", "name": "testIsDateValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsDateValid()", "original_string": "    @Test\n    public void testIsDateValid() {\n        String value = \"2023-10-05\";\n        String datePattern = \"yyyy-MM-dd\";\n        boolean strict = true;\n        assertTrue(GenericValidator.isDate(value, datePattern, strict));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java", "class_name": "GenericValidator_isDateTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java.GenericValidator_isDateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java.GenericValidator_isDateTest.[void]testIsDateInvalid()", "name": "testIsDateInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsDateInvalid()", "original_string": "    @Test\n    public void testIsDateInvalid() {\n        String value = \"2023-10-05\";\n        String datePattern = \"MM/dd/yyyy\";\n        boolean strict = true;\n        assertFalse(GenericValidator.isDate(value, datePattern, strict));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java", "class_name": "GenericValidator_isDateTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java.GenericValidator_isDateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_isBlankOrNullTest.java.GenericValidator_isBlankOrNullTest.[void]testIsBlankOrNull()", "name": "testIsBlankOrNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsBlankOrNull()", "original_string": "    @Test\n    public void testIsBlankOrNull() {\n        // Test for null value\n        assertTrue(GenericValidator.isBlankOrNull(null));\n\n        // Test for empty string\n        assertTrue(GenericValidator.isBlankOrNull(\"\"));\n\n        // Test for string with only whitespace\n        assertTrue(GenericValidator.isBlankOrNull(\"   \"));\n\n        // Test for non-empty string\n        assertFalse(GenericValidator.isBlankOrNull(\"abc\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_isBlankOrNullTest.java", "class_name": "GenericValidator_isBlankOrNullTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_isBlankOrNullTest.java.GenericValidator_isBlankOrNullTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ISBNValidatorTest.java.ISBNValidatorTest.[void]testIsValid()", "name": "testIsValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid()", "original_string": "    @Test\n    public void testIsValid() throws Exception {\n        final ISBNValidator validator = new ISBNValidator();\n        assertFalse(validator.isValid(null));\n        assertFalse(validator.isValid(\"\"));\n        assertFalse(validator.isValid(\"1\"));\n        assertFalse(validator.isValid(\"12345678901234\"));\n        assertFalse(validator.isValid(\"dsasdsadsads\"));\n        assertFalse(validator.isValid(\"535365\"));\n        assertFalse(validator.isValid(\"I love sparrows!\"));\n        assertFalse(validator.isValid(\"--1 930110 99 5\"));\n        assertFalse(validator.isValid(\"1 930110 99 5--\"));\n        assertFalse(validator.isValid(\"1 930110-99 5-\"));\n\n        assertTrue(validator.isValid(VALID_ISBN_RAW));\n        assertTrue(validator.isValid(VALID_ISBN_DASHES));\n        assertTrue(validator.isValid(VALID_ISBN_SPACES));\n        assertTrue(validator.isValid(VALID_ISBN_X));\n        assertFalse(validator.isValid(INVALID_ISBN));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testDefaultOnePosition()", "name": "testDefaultOnePosition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultOnePosition()", "original_string": "    @Test\n    public void testDefaultOnePosition() {\n\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"default-position-2\", 2));\n        field.addArg(createArg(\"default-position-3\"));\n\n        assertEquals(4, field.getArgs(\"required\").length, \"testDefaultOnePosition(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultOnePosition(2) \");\n        assertNull(field.getArg(\"required\", 1), \"testDefaultOnePosition(3) \");\n        assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultOnePosition(4) \");\n        assertEquals(\"default-position-3\", field.getArg(\"required\", 3).getKey(), \"testDefaultOnePosition(5) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with only 'default' arguments, position specified for one argument\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testDefaultPositionImplied()", "name": "testDefaultPositionImplied", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultPositionImplied()", "original_string": "    @Test\n    public void testDefaultPositionImplied() {\n\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"default-position-1\"));\n        field.addArg(createArg(\"default-position-2\"));\n\n        assertEquals(3, field.getArgs(\"required\").length, \"testDefaultPositionImplied(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultPositionImplied(2) \");\n        assertEquals(\"default-position-1\", field.getArg(\"required\", 1).getKey(), \"testDefaultPositionImplied(3) \");\n        assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultPositionImplied(4) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with only 'default' arguments, no positions specified.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testDefaultSomePositions()", "name": "testDefaultSomePositions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultSomePositions()", "original_string": "    @Test\n    public void testDefaultSomePositions() {\n\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"default-position-2\", 2));\n        field.addArg(createArg(\"default-position-3\"));\n        field.addArg(createArg(\"default-position-1\", 1));\n\n        assertEquals(4, field.getArgs(\"required\").length, \"testDefaultSomePositions(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultSomePositions(2) \");\n        assertEquals(\"default-position-1\", field.getArg(\"required\", 1).getKey(), \"testDefaultSomePositions(3) \");\n        assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultSomePositions(4) \");\n        assertEquals(\"default-position-3\", field.getArg(\"required\", 3).getKey(), \"testDefaultSomePositions(5) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with only 'default' arguments, some position specified.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testDefaultUsingPositions()", "name": "testDefaultUsingPositions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultUsingPositions()", "original_string": "    @Test\n    public void testDefaultUsingPositions() {\n\n        field.addArg(createArg(\"default-position-1\", 1));\n        field.addArg(createArg(\"default-position-0\", 0));\n        field.addArg(createArg(\"default-position-2\", 2));\n\n        assertEquals(3, field.getArgs(\"required\").length, \"testDefaultUsingPositions(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testDefaultUsingPositions(2) \");\n        assertEquals(\"default-position-1\", field.getArg(\"required\", 1).getKey(), \"testDefaultUsingPositions(3) \");\n        assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testDefaultUsingPositions(4) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with only 'default' arguments, positions specified.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testEmptyArgs()", "name": "testEmptyArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyArgs()", "original_string": "    @Test\n    public void testEmptyArgs() {\n\n        assertEquals(0, field.getArgs(\"required\").length, \"Empty Args(1) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with no arguments\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testOverridePositionImplied()", "name": "testOverridePositionImplied", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOverridePositionImplied()", "original_string": "    @Test\n    public void testOverridePositionImplied() {\n\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"required-position-1\", \"required\"));\n        field.addArg(createArg(\"required-position-2\", \"required\"));\n        field.addArg(createArg(\"mask-position-1\", \"mask\"));\n\n        // use 'required' as name\n        assertEquals(3, field.getArgs(\"required\").length, \"testOverridePositionImplied(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testOverridePositionImplied(2) \");\n        assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverridePositionImplied(3) \");\n        assertEquals(\"required-position-2\", field.getArg(\"required\", 2).getKey(), \"testOverridePositionImplied(4) \");\n\n        // use 'mask' as name\n        assertEquals(3, field.getArgs(\"mask\").length, \"testOverridePositionImplied(5) \");\n        assertEquals(\"default-position-0\", field.getArg(\"mask\", 0).getKey(), \"testOverridePositionImplied(6) \");\n        assertEquals(\"mask-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverridePositionImplied(7) \");\n        assertNull(field.getArg(\"mask\", 2), \"testOverridePositionImplied(8) \");\n\n        // Get Defaults\n        assertEquals(\"default-position-0\", field.getArg(0).getKey(), \"testOverridePositionImplied(9) \");\n        assertNull(field.getArg(1), \"testOverridePositionImplied(10) \");\n        assertNull(field.getArg(2), \"testOverridePositionImplied(11) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with a 'default' argument overriden without positions specified.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testOverrideSomePosition()", "name": "testOverrideSomePosition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOverrideSomePosition()", "original_string": "    @Test\n    public void testOverrideSomePosition() {\n\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"default-position-1\"));\n        field.addArg(createArg(\"default-position-2\"));\n        field.addArg(createArg(\"required-position-1\", \"required\", 1));\n        field.addArg(createArg(\"required-position-2\", \"required\"));\n        field.addArg(createArg(\"mask-position-3\", \"mask\"));\n\n        // use 'required' as name\n        assertEquals(4, field.getArgs(\"required\").length, \"testOverrideSomePosition(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testOverrideSomePosition(2) \");\n        assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverrideSomePosition(3) \");\n        assertEquals(\"required-position-2\", field.getArg(\"required\", 2).getKey(), \"testOverrideSomePosition(4) \");\n        assertNull(field.getArg(\"required\", 3), \"testOverrideSomePosition(5) \");\n\n        // use 'mask' as name\n        assertEquals(4, field.getArgs(\"mask\").length, \"testOverrideSomePosition(6) \");\n        assertEquals(\"default-position-0\", field.getArg(\"mask\", 0).getKey(), \"testOverrideSomePosition(7) \");\n        assertEquals(\"default-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverrideSomePosition(8) \");\n        assertEquals(\"default-position-2\", field.getArg(\"mask\", 2).getKey(), \"testOverrideSomePosition(9) \");\n        assertEquals(\"mask-position-3\", field.getArg(\"mask\", 3).getKey(), \"testOverrideSomePosition(10) \");\n\n        // Get Defaults\n        assertEquals(\"default-position-0\", field.getArg(0).getKey(), \"testOverrideSomePosition(11) \");\n        assertEquals(\"default-position-1\", field.getArg(1).getKey(), \"testOverrideSomePosition(12) \");\n        assertEquals(\"default-position-2\", field.getArg(2).getKey(), \"testOverrideSomePosition(13) \");\n        assertNull(field.getArg(3), \"testOverrideSomePosition(14) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with a 'default' argument overriden with some positions specified\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testOverrideUsingPositionA()", "name": "testOverrideUsingPositionA", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOverrideUsingPositionA()", "original_string": "    @Test\n    public void testOverrideUsingPositionA() {\n\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"default-position-1\"));\n        field.addArg(createArg(\"default-position-2\"));\n        field.addArg(createArg(\"required-position-1\", \"required\", 1));\n\n        // use 'required' as name\n        assertEquals(3, field.getArgs(\"required\").length, \"testOverrideUsingPositionA(1) \");\n        assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverrideUsingPositionA(2) \");\n\n        // use 'mask' as name\n        assertEquals(3, field.getArgs(\"mask\").length, \"testOverrideUsingPositionA(3) \");\n        assertEquals(\"default-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverrideUsingPositionA(4) \");\n\n        // Get Default\n        assertEquals(\"default-position-1\", field.getArg(1).getKey(), \"testOverrideUsingPositionA(5) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with a 'default' argument overriden using 'position' property\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]testOverrideUsingPositionB()", "name": "testOverrideUsingPositionB", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOverrideUsingPositionB()", "original_string": "    @Test\n    public void testOverrideUsingPositionB() {\n\n        field.addArg(createArg(\"required-position-3\", \"required\", 3));\n        field.addArg(createArg(\"required-position-1\", \"required\", 1));\n        field.addArg(createArg(\"default-position-0\"));\n        field.addArg(createArg(\"default-position-1\"));\n        field.addArg(createArg(\"default-position-2\"));\n\n        // use 'required' as name\n        assertEquals(4, field.getArgs(\"required\").length, \"testOverrideUsingPositionB(1) \");\n        assertEquals(\"default-position-0\", field.getArg(\"required\", 0).getKey(), \"testOverrideUsingPositionB(2) \");\n        assertEquals(\"required-position-1\", field.getArg(\"required\", 1).getKey(), \"testOverrideUsingPositionB(3) \");\n        assertEquals(\"default-position-2\", field.getArg(\"required\", 2).getKey(), \"testOverrideUsingPositionB(4) \");\n        assertEquals(\"required-position-3\", field.getArg(\"required\", 3).getKey(), \"testOverrideUsingPositionB(5) \");\n\n        // use 'mask' as name\n        assertEquals(4, field.getArgs(\"mask\").length, \"testOverrideUsingPositionB(6) \");\n        assertEquals(\"default-position-0\", field.getArg(\"mask\", 0).getKey(), \"testOverrideUsingPositionB(6) \");\n        assertEquals(\"default-position-1\", field.getArg(\"mask\", 1).getKey(), \"testOverrideUsingPositionB(7) \");\n        assertEquals(\"default-position-2\", field.getArg(\"mask\", 2).getKey(), \"testOverrideUsingPositionB(8) \");\n        assertNull(field.getArg(\"mask\", 3), \"testOverrideUsingPositionB(9) \");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest Field with a 'default' argument overriden using 'position' property\n"}, {"uris": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java.CustomValidatorResourcesTest.[void]testCustomResources()", "name": "testCustomResources", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCustomResources()", "original_string": "    @Test\n    public void testCustomResources() {\n        // Load resources\n        InputStream in = null;\n        try {\n            in = this.getClass().getResourceAsStream(\"TestNumber-config.xml\");\n        } catch (final Exception e) {\n            fail(\"Error loading resources: \" + e);\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (final Exception ignore) {\n                // ignore\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java", "class_name": "CustomValidatorResourcesTest", "class_uri": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java.CustomValidatorResourcesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest creating a custom validator resources.\n"}, {"uris": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest.[void]testDouble()", "name": "testDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDouble()", "original_string": "    @Test\n    public void testDouble() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"0\");\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DoubleTest.java", "class_name": "DoubleTest", "class_uri": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the double validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest.[void]testDoubleFailure()", "name": "testDoubleFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleFailure()", "original_string": "    @Test\n    public void testDoubleFailure() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DoubleTest.java", "class_name": "DoubleTest", "class_uri": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the double validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest.[void]testDoubleMax()", "name": "testDoubleMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleMax()", "original_string": "    @Test\n    public void testDoubleMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Double.toString(Double.MAX_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DoubleTest.java", "class_name": "DoubleTest", "class_uri": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the double validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest.[void]testDoubleMin()", "name": "testDoubleMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleMin()", "original_string": "    @Test\n    public void testDoubleMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Double.toString(Double.MIN_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DoubleTest.java", "class_name": "DoubleTest", "class_uri": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the double validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java.GenericValidator_minLengthTest.[void]testMinLength_WithLineEndingAdjustment()", "name": "testMinLength_WithLineEndingAdjustment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinLength_WithLineEndingAdjustment()", "original_string": "    @Test\n    public void testMinLength_WithLineEndingAdjustment() {\n        // Given\n        String value = \"test\\nstring\";\n        int min = 10;\n        int lineEndLength = 1;\n\n        // When\n        boolean result = GenericValidator.minLength(value, min, lineEndLength);\n\n        // Then\n        assertTrue(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java", "class_name": "GenericValidator_minLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java.GenericValidator_minLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java.GenericValidator_minLengthTest.[void]testMinLength_WithoutLineEndingAdjustment()", "name": "testMinLength_WithoutLineEndingAdjustment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinLength_WithoutLineEndingAdjustment()", "original_string": "    @Test\n    public void testMinLength_WithoutLineEndingAdjustment() {\n        // Given\n        String value = \"test\";\n        int min = 5;\n        int lineEndLength = 1;\n\n        // When\n        boolean result = GenericValidator.minLength(value, min, lineEndLength);\n\n        // Then\n        assertFalse(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java", "class_name": "GenericValidator_minLengthTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java.GenericValidator_minLengthTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmail()", "name": "testEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmail()", "original_string": "    @Test\n    public void testEmail() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        info.setValue(\"jsmith@apache.org\");\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailAtTLD()", "name": "testEmailAtTLD", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailAtTLD()", "original_string": "    @Test\n    public void testEmailAtTLD() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        info.setValue(\"m@de\");\n        valueTest(info, false);\n\n        final org.apache.commons.validator.routines.EmailValidator validator = org.apache.commons.validator.routines.EmailValidator.getInstance(true, true);\n        final boolean result = validator.isValid(\"m@de\");\n        assertTrue(result, \"Result should have been true\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation with a user at a TLD\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailExtension()", "name": "testEmailExtension", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailExtension()", "original_string": "    @Test\n    public void testEmailExtension() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        info.setValue(\"jsmith@apache.org\");\n        valueTest(info, true);\n\n        info.setValue(\"jsmith@apache.com\");\n        valueTest(info, true);\n\n        info.setValue(\"jsmith@apache.net\");\n        valueTest(info, true);\n\n        info.setValue(\"jsmith@apache.info\");\n        valueTest(info, true);\n\n        info.setValue(\"jsmith@apache.\");\n        valueTest(info, false);\n\n        info.setValue(\"jsmith@apache.c\");\n        valueTest(info, false);\n\n        info.setValue(\"someone@yahoo.museum\");\n        valueTest(info, true);\n\n        info.setValue(\"someone@yahoo.mu-seum\");\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailLocalhost()", "name": "testEmailLocalhost", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailLocalhost()", "original_string": "    @Test\n    public void testEmailLocalhost() throws ValidatorException {\n        final ValueBean info = new ValueBean();\n        info.setValue(\"joe@localhost\");\n        valueTest(info, false);\n        info.setValue(\"joe@localhost.localdomain\");\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that @localhost and @localhost.localdomain addresses aren't declared valid by default\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithBogusCharacter()", "name": "testEmailWithBogusCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithBogusCharacter()", "original_string": "    @Test\n    public void testEmailWithBogusCharacter() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        info.setValue(\"andy.noble@\\u008fdata-workshop.com\");\n        valueTest(info, false);\n\n        // The ' character is valid in an email username.\n        info.setValue(\"andy.o'reilly@data-workshop.com\");\n        valueTest(info, true);\n\n        // But not in the domain name.\n        info.setValue(\"andy@o'reilly.data-workshop.com\");\n        valueTest(info, false);\n\n        info.setValue(\"foo+bar@i.am.not.in.us.example.com\");\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation with an RCS-noncompliant character in the address.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithCommas()", "name": "testEmailWithCommas", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithCommas()", "original_string": "    @Test\n    public void testEmailWithCommas() throws ValidatorException {\n        final ValueBean info = new ValueBean();\n        info.setValue(\"joeblow@apa,che.org\");\n        valueTest(info, false);\n        info.setValue(\"joeblow@apache.o,rg\");\n        valueTest(info, false);\n        info.setValue(\"joeblow@apache,org\");\n        valueTest(info, false);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with commas.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithControlChars()", "name": "testEmailWithControlChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithControlChars()", "original_string": "    @Test\n    public void testEmailWithControlChars() {\n        final EmailValidator validator = new EmailValidator();\n        for (char c = 0; c < 32; c++) {\n            assertFalse(validator.isValid(\"foo\" + c + \"bar@domain.com\"), \"Test control char \" + (int) c);\n        }\n        assertFalse(validator.isValid(\"foo\" + (char) 127 + \"bar@domain.com\"), \"Test control char 127\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with ASCII control characters. (i.e. ASCII chars 0 - 31 and 127)\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithDash()", "name": "testEmailWithDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithDash()", "original_string": "    @Test\n    public void testEmailWithDash() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        info.setValue(\"andy.noble@data-workshop.com\");\n        valueTest(info, true);\n\n        info.setValue(\"andy-noble@data-workshop.-com\");\n        valueTest(info, false);\n        info.setValue(\"andy-noble@data-workshop.c-om\");\n        valueTest(info, false);\n        info.setValue(\"andy-noble@data-workshop.co-m\");\n        valueTest(info, false);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n<p>\nTests the e-mail validation with a dash in the address.\n</p>\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithDotEnd()", "name": "testEmailWithDotEnd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithDotEnd()", "original_string": "    @Test\n    public void testEmailWithDotEnd() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        info.setValue(\"andy.noble@data-workshop.com.\");\n        valueTest(info, false);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation with a dot at the end of the address.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithNumericAddress()", "name": "testEmailWithNumericAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithNumericAddress()", "original_string": "    @Test\n    public void testEmailWithNumericAddress() throws ValidatorException {\n        final ValueBean info = new ValueBean();\n        info.setValue(\"someone@[216.109.118.76]\");\n        valueTest(info, true);\n        info.setValue(\"someone@yahoo.com\");\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with numeric domains.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailWithSpaces()", "name": "testEmailWithSpaces", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithSpaces()", "original_string": "    @Test\n    public void testEmailWithSpaces() throws ValidatorException {\n        final ValueBean info = new ValueBean();\n        info.setValue(\"joeblow @apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joeblow@ apache.org\");\n        valueTest(info, false);\n        info.setValue(\" joeblow@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joeblow@apache.org \");\n        valueTest(info, false);\n        info.setValue(\"joe blow@apache.org \");\n        valueTest(info, false);\n        info.setValue(\"joeblow@apa che.org \");\n        valueTest(info, false);\n        info.setValue(\"\\\"joe blow\\\"@apache.org\");\n        valueTest(info, true);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with spaces.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest.[void]testShortBeyondMax()", "name": "testShortBeyondMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortBeyondMax()", "original_string": "    @Test\n    public void testShortBeyondMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Short.MAX_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ShortTest.java", "class_name": "ShortTest", "class_uri": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the short validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest.[void]testShortBeyondMin()", "name": "testShortBeyondMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortBeyondMin()", "original_string": "    @Test\n    public void testShortBeyondMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Short.MIN_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ShortTest.java", "class_name": "ShortTest", "class_uri": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the short validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest.[void]testShortMax()", "name": "testShortMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortMax()", "original_string": "    @Test\n    public void testShortMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Short.toString(Short.MAX_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ShortTest.java", "class_name": "ShortTest", "class_uri": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the short validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest.[void]testShortMin()", "name": "testShortMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortMin()", "original_string": "    @Test\n    public void testShortMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Short.toString(Short.MIN_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ShortTest.java", "class_name": "ShortTest", "class_uri": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the short validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/VarTest.java.VarTest.[void]testVars()", "name": "testVars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVars()", "original_string": "    @Test\n    public void testVars() {\n\n        final Form form = resources.getForm(Locale.getDefault(), FORM_KEY);\n\n        // Get field 1\n        final Field field1 = form.getField(\"field-1\");\n        assertNotNull(field1, \"field-1 is null.\");\n        assertEquals(\"field-1\", field1.getProperty(), \"field-1 property is wrong\");\n\n        // Get var-1-1\n        final Var var11 = field1.getVar(\"var-1-1\");\n        assertNotNull(var11, \"var-1-1 is null.\");\n        assertEquals(\"var-1-1\", var11.getName(), \"var-1-1 name is wrong\");\n        assertEquals(\"value-1-1\", var11.getValue(), \"var-1-1 value is wrong\");\n        assertEquals(\"jstype-1-1\", var11.getJsType(), \"var-1-1 jstype is wrong\");\n        assertFalse(var11.isResource(), \"var-1-1 resource is true\");\n        assertNull(var11.getBundle(), \"var-1-1 bundle is not null.\");\n\n        // Get field 2\n        final Field field2 = form.getField(\"field-2\");\n        assertNotNull(field2, \"field-2 is null.\");\n        assertEquals(\"field-2\", field2.getProperty(), \"field-2 property is wrong\");\n\n        // Get var-2-1\n        final Var var21 = field2.getVar(\"var-2-1\");\n        assertNotNull(var21, \"var-2-1 is null.\");\n        assertEquals(\"var-2-1\", var21.getName(), \"var-2-1 name is wrong\");\n        assertEquals(\"value-2-1\", var21.getValue(), \"var-2-1 value is wrong\");\n        assertEquals(\"jstype-2-1\", var21.getJsType(), \"var-2-1 jstype is wrong\");\n        assertTrue(var21.isResource(), \"var-2-1 resource is false\");\n        assertEquals(var21.getBundle(), \"bundle-2-1\", \"var-2-1 bundle is wrong\");\n\n        // Get var-2-2\n        final Var var22 = field2.getVar(\"var-2-2\");\n        assertNotNull(var22, \"var-2-2 is null.\");\n        assertEquals(var22.getName(), \"var-2-2\", \"var-2-2 name is wrong\");\n        assertEquals(var22.getValue(), \"value-2-2\", \"var-2-2 value is wrong\");\n        assertNull(var22.getJsType(), \"var-2-2 jstype is not null\");\n        assertFalse(var22.isResource(), \"var-2-2 resource is true\");\n        assertEquals(var22.getBundle(), \"bundle-2-2\", \"var-2-2 bundle is wrong\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/VarTest.java", "class_name": "VarTest", "class_uri": "src/test/java/org/apache/commons/validator/VarTest.java.VarTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWith nothing provided, we should fail both because both are required.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Var_cloneTest.java.Var_cloneTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testClone()", "original_string": "    @Test\n    void testClone() {\n        // Given\n        Var original = new Var(\"testName\", \"testValue\", \"string\");\n\n        // When\n        Var cloned = (Var) original.clone();\n\n        // Then\n        assertNotSame(original, cloned);\n        assertEquals(original.getName(), cloned.getName());\n        assertEquals(original.getValue(), cloned.getValue());\n        assertEquals(original.getJsType(), cloned.getJsType());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Var_cloneTest.java", "class_name": "Var_cloneTest", "class_uri": "src/test/java/org/apache/commons/validator/Var_cloneTest.java.Var_cloneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]testIsValid()", "name": "testIsValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid()", "original_string": "    @Test\n    public void testIsValid() {\n        testIsValid(testUrlParts, UrlValidator.ALLOW_ALL_SCHEMES);\n        setUp();\n        final int options = UrlValidator.ALLOW_2_SLASHES + UrlValidator.ALLOW_ALL_SCHEMES + UrlValidator.NO_FRAGMENTS;\n\n        testIsValid(testUrlPartsOptions, options);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]testIsValidScheme()", "name": "testIsValidScheme", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidScheme()", "original_string": "    @Test\n    public void testIsValidScheme() {\n        if (printStatus) {\n            System.out.print(\"\\n testIsValidScheme() \");\n        }\n        final String[] schemes = { \"http\", \"gopher\" };\n        // UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\n        final UrlValidator urlVal = new UrlValidator(schemes, 0);\n        for (final ResultPair testPair : testScheme) {\n            final boolean result = urlVal.isValidScheme(testPair.item);\n            assertEquals(testPair.valid, result, testPair.item);\n            if (printStatus) {\n                if (result == testPair.valid) {\n                    System.out.print('.');\n                } else {\n                    System.out.print('X');\n                }\n            }\n        }\n        if (printStatus) {\n            System.out.println();\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]testValidateUrl()", "name": "testValidateUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateUrl()", "original_string": "    @Test\n    public void testValidateUrl() {\n        assertTrue(true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]testValidator202()", "name": "testValidator202", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator202()", "original_string": "    @Test\n    public void testValidator202() {\n        final String[] schemes = { \"http\", \"https\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\n        urlValidator.isValid(\n                \"http://www.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.logoworks.comwww.log\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]testValidator204()", "name": "testValidator204", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator204()", "original_string": "    @Test\n    public void testValidator204() {\n        final String[] schemes = { \"http\", \"https\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes);\n        assertTrue(urlValidator.isValid(\"http://tech.yahoo.com/rc/desktops/102;_ylt=Ao8yevQHlZ4On0O3ZJGXLEQFLZA5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java.ValidatorResult_isValidTest.[void]testIsValid_ValidAction()", "name": "testIsValid_ValidAction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_ValidAction()", "original_string": "    @Test\n    public void testIsValid_ValidAction() {\n        validatorResult.add(\"validatorName\", true, null);\n        assertTrue(validatorResult.isValid(\"validatorName\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java", "class_name": "ValidatorResult_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java.ValidatorResult_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java.ValidatorResult_isValidTest.[void]testIsValid_InvalidAction()", "name": "testIsValid_InvalidAction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_InvalidAction()", "original_string": "    @Test\n    public void testIsValid_InvalidAction() {\n        validatorResult.add(\"validatorName\", false, null);\n        assertFalse(validatorResult.isValid(\"validatorName\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java", "class_name": "ValidatorResult_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java.ValidatorResult_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java.ValidatorResult_isValidTest.[void]testIsValid_NullAction()", "name": "testIsValid_NullAction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_NullAction()", "original_string": "    @Test\n    public void testIsValid_NullAction() {\n        assertFalse(validatorResult.isValid(\"nonExistentValidatorName\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java", "class_name": "ValidatorResult_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java.ValidatorResult_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[void]testInt()", "name": "testInt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInt()", "original_string": "    @Test\n    public void testInt() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"0\");\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the int validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[void]testIntBeyondMax()", "name": "testIntBeyondMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntBeyondMax()", "original_string": "    @Test\n    public void testIntBeyondMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Integer.MAX_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the int validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[void]testIntBeyondMin()", "name": "testIntBeyondMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntBeyondMin()", "original_string": "    @Test\n    public void testIntBeyondMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Integer.MIN_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the int validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[void]testIntegerMax()", "name": "testIntegerMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntegerMax()", "original_string": "    @Test\n    public void testIntegerMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Integer.toString(Integer.MAX_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the int validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[void]testIntFailure()", "name": "testIntFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntFailure()", "original_string": "    @Test\n    public void testIntFailure() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the int validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[void]testIntMin()", "name": "testIntMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntMin()", "original_string": "    @Test\n    public void testIntMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Integer.toString(Integer.MIN_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the int validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Form_toStringTest.java.Form_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        // Given\n        Form form = new Form();\n        form.setName(\"TestForm\");\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n        Field field2 = new Field();\n        field2.setKey(\"field2\");\n        form.addField(field1);\n        form.addField(field2);\n\n        // When\n        String result = form.toString();\n\n        // Then\n        String expected = \"Form: TestForm\\n\" +\n                          \"\\tField: \\n\" +\n                          field1.toString() + \"\\n\" +\n                          \"\\tField: \\n\" +\n                          field2.toString() + \"\\n\";\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Form_toStringTest.java", "class_name": "Form_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/Form_toStringTest.java.Form_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]testRequired()", "name": "testRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequired()", "original_string": "    @Test\n    public void testRequired() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]testRequiredFirstName()", "name": "testRequiredFirstName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstName()", "original_string": "    @Test\n    public void testRequiredFirstName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]testRequiredFirstNameBlank()", "name": "testRequiredFirstNameBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstNameBlank()", "original_string": "    @Test\n    public void testRequiredFirstNameBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first name if it is blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]testRequiredLastName()", "name": "testRequiredLastName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastName()", "original_string": "    @Test\n    public void testRequiredLastName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setLastName(\"Smith\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]testRequiredLastNameBlank()", "name": "testRequiredLastNameBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameBlank()", "original_string": "    @Test\n    public void testRequiredLastNameBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setLastName(\"\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name if it is blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]testRequiredName()", "name": "testRequiredName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredName()", "original_string": "    @Test\n    public void testRequiredName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n        name.setLastName(\"Smith\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first and last name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testOrder()", "name": "testOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrder()", "original_string": "    @Test\n    public void testOrder() {\n\n        final Form form = resources.getForm(ValidatorResources.defaultLocale, FORM_KEY);\n        final Form form2 = resources.getForm(ValidatorResources.defaultLocale, FORM_KEY2);\n\n        assertNotNull(form, FORM_KEY + \" is null.\");\n        assertEquals(2, form.getFields().size(), \"There should only be 2 fields in \" + FORM_KEY);\n\n        assertNotNull(form2, FORM_KEY2 + \" is null.\");\n        assertEquals(2, form2.getFields().size(), \"There should only be 2 fields in \" + FORM_KEY2);\n\n        // get the first field\n        Field fieldFirstName = form.getFields().get(0);\n        // get the second field\n        Field fieldLastName = form.getFields().get(1);\n        assertTrue(fieldFirstName.getKey().equals(\"firstName\"), \"firstName in \" + FORM_KEY + \" should be the first in the list\");\n        assertTrue(fieldLastName.getKey().equals(\"lastName\"), \"lastName in \" + FORM_KEY + \" should be the first in the list\");\n\n//     get the second field\n        fieldLastName = form2.getFields().get(0);\n        // get the first field\n        fieldFirstName = form2.getFields().get(1);\n        assertTrue(fieldFirstName.getKey().equals(\"firstName\"), \"firstName in \" + FORM_KEY2 + \" should be the first in the list\");\n        assertTrue(fieldLastName.getKey().equals(\"lastName\"), \"lastName in \" + FORM_KEY2 + \" should be the first in the list\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests if the order is mantained when extending a form. Parent form fields should preceed self form fields, except if we override the rules.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testOverrideRule()", "name": "testOverrideRule", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOverrideRule()", "original_string": "    @Test\n    public void testOverrideRule() throws ValidatorException {\n\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setLastName(\"Smith\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY2);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.field.getArg(0).getKey().equals(CHECK_MSG_KEY),\n                \"First Name ValidatorResult for the '\" + ACTION + \"' action should have '\" + CHECK_MSG_KEY + \" as a key.\");\n\n        assertNull(lastNameResult, \"Last Name ValidatorResult should be null.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests if we can override a rule. We \"can\" override a rule if the message shown when the firstName required test fails and the lastName test is null.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testRequired()", "name": "testRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequired()", "original_string": "    @Test\n    public void testRequired() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testRequiredFirstName()", "name": "testRequiredFirstName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstName()", "original_string": "    @Test\n    public void testRequiredFirstName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testRequiredFirstNameBlank()", "name": "testRequiredFirstNameBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstNameBlank()", "original_string": "    @Test\n    public void testRequiredFirstNameBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first name if it is blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testRequiredLastName()", "name": "testRequiredLastName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastName()", "original_string": "    @Test\n    public void testRequiredLastName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setLastName(\"Smith\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testRequiredLastNameBlank()", "name": "testRequiredLastNameBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameBlank()", "original_string": "    @Test\n    public void testRequiredLastNameBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setLastName(\"\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name if it is blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]testRequiredName()", "name": "testRequiredName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredName()", "original_string": "    @Test\n    public void testRequiredName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n        name.setLastName(\"Smith\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first and last name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Form_addFieldTest.java.Form_addFieldTest.[void]testAddField()", "name": "testAddField", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddField()", "original_string": "    @Test\n    public void testAddField() {\n        form.addField(field);\n\n        assertTrue(form.containsField(\"testKey\"), \"Field should be added to the form.\");\n        assertEquals(field, form.getField(\"testKey\"), \"Retrieved field should match the added field.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Form_addFieldTest.java", "class_name": "Form_addFieldTest", "class_uri": "src/test/java/org/apache/commons/validator/Form_addFieldTest.java.Form_addFieldTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]testLocale1()", "name": "testLocale1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocale1()", "original_string": "    @Test\n    public void testLocale1() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"\");\n\n        valueTest(name, new Locale(\"en\", \"US\", \"TEST1\"), false, false, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSee what happens when we try to validate with a Locale, Country and variant. Also check if the added locale validation field is getting used.\n\n@throws ValidatorException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]testLocale2()", "name": "testLocale2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocale2()", "original_string": "    @Test\n    public void testLocale2() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"\");\n\n        valueTest(name, new Locale(\"en\", \"US\", \"TEST2\"), true, false, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSee what happens when we try to validate with a Locale, Country and variant\n\n@throws ValidatorException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]testLocale3()", "name": "testLocale3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocale3()", "original_string": "    @Test\n    public void testLocale3() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"\");\n\n        valueTest(name, new Locale(\"en\", \"UK\"), false, true, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSee what happens when we try to validate with a Locale, Country and variant\n\n@throws ValidatorException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]testLocale4()", "name": "testLocale4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocale4()", "original_string": "    @Test\n    public void testLocale4() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"\");\n\n        valueTest(name, new Locale(\"en\", \"UK\", \"TEST\"), false, true, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSee if a locale of en_UK_TEST falls back to en_UK instead of default form set. Bug #16920 states that this isn't happening, even though it is passing\nthis test. see #16920.\n\n@throws ValidatorException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]testLocale5()", "name": "testLocale5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocale5()", "original_string": "    @Test\n    public void testLocale5() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"\");\n\n        valueTest(name, new Locale(\"en\", \"\"), false, false, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSee if a locale of language=en falls back to default form set.\n\n@throws ValidatorException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java.GenericValidatorTest.[void]testMaxLength()", "name": "testMaxLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxLength()", "original_string": "    @Test\n    public void testMaxLength() {\n\n        // Use 0 for line end length\n        assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 4, 0), \"Max=4 End=0\");\n        assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 5, 0), \"Max=5 End=0\");\n        assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 6, 0), \"Max=6 End=0\");\n        assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 7, 0), \"Max=7 End=0\");\n\n        // Use 1 for line end length\n        assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 4, 1), \"Max=4 End=1\");\n        assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 5, 1), \"Max=5 End=1\");\n        assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 6, 1), \"Max=6 End=1\");\n        assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 7, 1), \"Max=7 End=1\");\n\n        // Use 2 for line end length\n        assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 4, 2), \"Max=4 End=2\");\n        assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 5, 2), \"Max=5 End=2\");\n        assertFalse(GenericValidator.maxLength(\"12345\\n\\r\", 6, 2), \"Max=6 End=2\");\n        assertTrue(GenericValidator.maxLength(\"12345\\n\\r\", 7, 2), \"Max=7 End=2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java", "class_name": "GenericValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java.GenericValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java.GenericValidatorTest.[void]testMinLength()", "name": "testMinLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinLength()", "original_string": "    @Test\n    public void testMinLength() {\n\n        // Use 0 for line end length\n        assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 5, 0), \"Min=5 End=0\");\n        assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 6, 0), \"Min=6 End=0\");\n        assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 7, 0), \"Min=7 End=0\");\n        assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 8, 0), \"Min=8 End=0\");\n\n        // Use 1 for line end length\n        assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 5, 1), \"Min=5 End=1\");\n        assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 6, 1), \"Min=6 End=1\");\n        assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 7, 1), \"Min=7 End=1\");\n        assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 8, 1), \"Min=8 End=1\");\n\n        // Use 2 for line end length\n        assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 5, 2), \"Min=5 End=2\");\n        assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 6, 2), \"Min=6 End=2\");\n        assertTrue(GenericValidator.minLength(\"12345\\n\\r\", 7, 2), \"Min=7 End=2\");\n        assertFalse(GenericValidator.minLength(\"12345\\n\\r\", 8, 2), \"Min=8 End=2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java", "class_name": "GenericValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java.GenericValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest.[void]testAllValid()", "name": "testAllValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllValid()", "original_string": "    @Test\n    public void testAllValid() {\n\n        // Create bean to run test on.\n        final NameBean bean = createNameBean();\n\n        final Validator validator = new Validator(resources, FORM_KEY);\n\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n        validator.setParameter(Validator.LOCALE_PARAM, Locale.getDefault());\n\n        // Get results of the validation.\n        try {\n            validator.validate();\n        } catch (final Exception e) {\n            fail(\"Validator.validate() threw \" + e);\n        }\n        assertParameterValue(validator, Validator.BEAN_PARAM, Object.class);\n        assertParameterValue(validator, Validator.FIELD_PARAM, Field.class);\n        assertParameterValue(validator, Validator.FORM_PARAM, Form.class);\n        assertParameterValue(validator, Validator.LOCALE_PARAM, Locale.class);\n        assertParameterValue(validator, Validator.VALIDATOR_ACTION_PARAM, ValidatorAction.class);\n        assertParameterValue(validator, Validator.VALIDATOR_PARAM, Validator.class);\n        assertParameterValue(validator, Validator.VALIDATOR_RESULTS_PARAM, ValidatorResults.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ParameterTest.java", "class_name": "ParameterTest", "class_uri": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest all validations ran and passed.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java.Field_getVarValueTest.[void]testGetVarValue_ExistingKey()", "name": "testGetVarValue_ExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetVarValue_ExistingKey()", "original_string": "    @Test\n    public void testGetVarValue_ExistingKey() {\n        // Given\n        Var var = new Var(\"testKey\", \"testValue\", null);\n        field.getVarMap().put(\"testKey\", var);\n\n        // When\n        String result = field.getVarValue(\"testKey\");\n\n        // Then\n        assertEquals(\"testValue\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java", "class_name": "Field_getVarValueTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java.Field_getVarValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java.Field_getVarValueTest.[void]testGetVarValue_NonExistingKey()", "name": "testGetVarValue_NonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetVarValue_NonExistingKey()", "original_string": "    @Test\n    public void testGetVarValue_NonExistingKey() {\n        // Given\n        // No vars added to the map\n\n        // When\n        String result = field.getVarValue(\"nonExistingKey\");\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java", "class_name": "Field_getVarValueTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java.Field_getVarValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java.ValidatorResults_getResultValueMapTest.[void]testGetResultValueMap()", "name": "testGetResultValueMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetResultValueMap()", "original_string": "    @Test\n    public void testGetResultValueMap() {\n        // Given\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n        Field field2 = new Field();\n        field2.setKey(\"field2\");\n\n        validatorResults.add(field1, \"action1\", true, \"result1\");\n        validatorResults.add(field2, \"action2\", true, 123);\n\n        // When\n        Map<String, Object> resultMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertEquals(2, resultMap.size());\n        assertEquals(\"result1\", resultMap.get(\"field1\"));\n        assertEquals(123, resultMap.get(\"field2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java", "class_name": "ValidatorResults_getResultValueMapTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java.ValidatorResults_getResultValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java.ValidatorResults_getResultValueMapTest.[void]testGetResultValueMapWithBooleanResult()", "name": "testGetResultValueMapWithBooleanResult", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetResultValueMapWithBooleanResult()", "original_string": "    @Test\n    public void testGetResultValueMapWithBooleanResult() {\n        // Given\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n\n        validatorResults.add(field1, \"action1\", true, true);\n\n        // When\n        Map<String, Object> resultMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertTrue(resultMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java", "class_name": "ValidatorResults_getResultValueMapTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java.ValidatorResults_getResultValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java.ValidatorResults_getResultValueMapTest.[void]testGetResultValueMapWithNullResult()", "name": "testGetResultValueMapWithNullResult", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetResultValueMapWithNullResult()", "original_string": "    @Test\n    public void testGetResultValueMapWithNullResult() {\n        // Given\n        Field field1 = new Field();\n        field1.setKey(\"field1\");\n\n        validatorResults.add(field1, \"action1\", true, null);\n\n        // When\n        Map<String, Object> resultMap = validatorResults.getResultValueMap();\n\n        // Then\n        assertTrue(resultMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java", "class_name": "ValidatorResults_getResultValueMapTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java.ValidatorResults_getResultValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[void]testLong()", "name": "testLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLong()", "original_string": "    @Test\n    public void testLong() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"0\");\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the long validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[void]testLongBeyondMax()", "name": "testLongBeyondMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongBeyondMax()", "original_string": "    @Test\n    public void testLongBeyondMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Long.MAX_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the long validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[void]testLongBeyondMin()", "name": "testLongBeyondMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongBeyondMin()", "original_string": "    @Test\n    public void testLongBeyondMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Long.MIN_VALUE + \"1\");\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the long validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[void]testLongFailure()", "name": "testLongFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongFailure()", "original_string": "    @Test\n    public void testLongFailure() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the long validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[void]testLongMax()", "name": "testLongMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongMax()", "original_string": "    @Test\n    public void testLongMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Long.toString(Long.MAX_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the long validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[void]testLongMin()", "name": "testLongMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongMin()", "original_string": "    @Test\n    public void testLongMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Long.toString(Long.MIN_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the long validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest.[void]testNumber()", "name": "testNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNumber()", "original_string": "    @Test\n    public void testNumber() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"0\");\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java", "class_name": "AbstractNumberTest", "class_uri": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the number validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest.[void]testNumberFailure()", "name": "testNumberFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNumberFailure()", "original_string": "    @Test\n    public void testNumberFailure() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java", "class_name": "AbstractNumberTest", "class_uri": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the float validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java.Field_generateKeyTest.[void]testGenerateKeyIndexed()", "name": "testGenerateKeyIndexed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGenerateKeyIndexed()", "original_string": "    @Test\n    public void testGenerateKeyIndexed() {\n        field.setIndexedListProperty(\"indexedListProperty\");\n        field.setProperty(\"property\");\n        field.generateKey();\n        assertEquals(\"indexedListProperty[].\" + \"property\", field.getKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java", "class_name": "Field_generateKeyTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java.Field_generateKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java.Field_generateKeyTest.[void]testGenerateKeyNotIndexed()", "name": "testGenerateKeyNotIndexed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGenerateKeyNotIndexed()", "original_string": "    @Test\n    public void testGenerateKeyNotIndexed() {\n        field.setProperty(\"property\");\n        field.generateKey();\n        assertEquals(\"property\", field.getKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java", "class_name": "Field_generateKeyTest", "class_uri": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java.Field_generateKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[void]testAllValid()", "name": "testAllValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllValid()", "original_string": "    @Test\n    public void testAllValid() throws ValidatorException {\n\n        // Create bean to run test on.\n        final NameBean bean = createNameBean();\n\n        // Validate.\n        final ValidatorResults results = validate(bean);\n\n        // Check results\n        checkValidatorResult(results, FIRST_NAME_FIELD, \"required\", true);\n        checkValidatorResult(results, MIDDLE_NAME_FIELD, \"required\", true);\n        checkValidatorResult(results, MIDDLE_NAME_FIELD, \"int\", true);\n        checkValidatorResult(results, MIDDLE_NAME_FIELD, \"positive\", true);\n        checkValidatorResult(results, LAST_NAME_FIELD, \"required\", true);\n        checkValidatorResult(results, LAST_NAME_FIELD, \"int\", true);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest all validations ran and passed.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[void]testErrors()", "name": "testErrors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testErrors()", "original_string": "    @Test\n    public void testErrors() throws ValidatorException {\n\n        middleName = \"XXX\";\n        lastName = null;\n\n        // Create bean to run test on.\n        final NameBean bean = createNameBean();\n\n        // Validate.\n        final ValidatorResults results = validate(bean);\n\n        // Check results\n        checkValidatorResult(results, FIRST_NAME_FIELD, \"required\", true);\n        checkValidatorResult(results, MIDDLE_NAME_FIELD, \"required\", true);\n        checkValidatorResult(results, MIDDLE_NAME_FIELD, \"int\", false);\n        checkNotRun(results, MIDDLE_NAME_FIELD, \"positive\");\n        checkValidatorResult(results, LAST_NAME_FIELD, \"required\", false);\n        checkNotRun(results, LAST_NAME_FIELD, \"int\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest some validations failed and some didn't run.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testBothBlank()", "name": "testBothBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBothBlank()", "original_string": "    @Test\n    public void testBothBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n        assertTrue(!lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResults should not contain the 'int' action.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWith nothing provided, we should fail both because both are required.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testFailingFirstDependentValidator()", "name": "testFailingFirstDependentValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFailingFirstDependentValidator()", "original_string": "    @Test\n    public void testFailingFirstDependentValidator() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\n\n        assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\n\n        assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\n        assertTrue(!middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have failed\");\n\n        assertTrue(!middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should not contain the 'int' action.\");\n\n        assertTrue(!middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should not contain the 'positive' action.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf middle name is not there, then the required dependent test should fail. No other tests should run\n\n@throws ValidatorException\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testFailingNextDependentValidator()", "name": "testFailingNextDependentValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFailingNextDependentValidator()", "original_string": "    @Test\n    public void testFailingNextDependentValidator() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setMiddleName(\"TEST\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\n\n        assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\n\n        assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\n        assertTrue(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have passed\");\n\n        assertTrue(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should contain the 'int' action.\");\n        assertTrue(!middleNameResult.isValid(\"int\"), \"Middle Name ValidatorResult for the 'int' action should have failed\");\n\n        assertTrue(!middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should not contain the 'positive' action.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf middle name is there but not int, then the required dependent test should pass, but the int dependent test should fail. No other tests should run.\n\n@throws ValidatorException\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testPassingDependentsFailingMain()", "name": "testPassingDependentsFailingMain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPassingDependentsFailingMain()", "original_string": "    @Test\n    public void testPassingDependentsFailingMain() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setMiddleName(\"-2534\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\n\n        assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\n\n        assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\n        assertTrue(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have passed\");\n\n        assertTrue(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should contain the 'int' action.\");\n        assertTrue(middleNameResult.isValid(\"int\"), \"Middle Name ValidatorResult for the 'int' action should have passed\");\n\n        assertTrue(middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should contain the 'positive' action.\");\n        assertTrue(!middleNameResult.isValid(\"positive\"), \"Middle Name ValidatorResult for the 'positive' action should have failed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf middle name is there and a negative int, then the required and int dependent tests should pass, but the positive test should fail.\n\n@throws ValidatorException\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testPassingDependentsPassingMain()", "name": "testPassingDependentsPassingMain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPassingDependentsPassingMain()", "original_string": "    @Test\n    public void testPassingDependentsPassingMain() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setMiddleName(\"2534\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult middleNameResult = results.getValidatorResult(\"middleName\");\n\n        assertNotNull(middleNameResult, \"Middle Name ValidatorResult should not be null.\");\n\n        assertTrue(middleNameResult.containsAction(\"required\"), \"Middle Name ValidatorResult should contain the 'required' action.\");\n        assertTrue(middleNameResult.isValid(\"required\"), \"Middle Name ValidatorResult for the 'required' action should have passed\");\n\n        assertTrue(middleNameResult.containsAction(\"int\"), \"Middle Name ValidatorResult should contain the 'int' action.\");\n        assertTrue(middleNameResult.isValid(\"int\"), \"Middle Name ValidatorResult for the 'int' action should have passed\");\n\n        assertTrue(middleNameResult.containsAction(\"positive\"), \"Middle Name ValidatorResult should contain the 'positive' action.\");\n        assertTrue(middleNameResult.isValid(\"positive\"), \"Middle Name ValidatorResult for the 'positive' action should have passed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf middle name is there and a positve int, then the required and int dependent tests should pass, and the positive test should pass.\n\n@throws ValidatorException\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testRequiredFirstNameBlankLastNameShort()", "name": "testRequiredFirstNameBlankLastNameShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstNameBlankLastNameShort()", "original_string": "    @Test\n    public void testRequiredFirstNameBlankLastNameShort() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"Test\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResult should contain the 'int' action.\");\n        assertTrue(!lastNameResult.isValid(\"int\"), \"Last Name ValidatorResult for the 'int' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf the first name fails required, and the second test fails int, we should get two errors.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testRequiredLastNameLong()", "name": "testRequiredLastNameLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameLong()", "original_string": "    @Test\n    public void testRequiredLastNameLong() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n        name.setLastName(\"12345678\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResult should contain the 'int' action.\");\n        assertTrue(lastNameResult.isValid(\"int\"), \"Last Name ValidatorResult for the 'int' action should have passed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf first name is ok and last name is ok and is an int, no errors.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]testRequiredLastNameShort()", "name": "testRequiredLastNameShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameShort()", "original_string": "    @Test\n    public void testRequiredLastNameShort() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Test\");\n        name.setLastName(\"Test\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(\"int\"), \"Last Name ValidatorResult should contain the 'int' action.\");\n        assertTrue(!lastNameResult.isValid(\"int\"), \"Last Name ValidatorResult for the 'int' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nIf the first name is there, and the last name fails int, we should get one error.\n"}, {"uris": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java.Validator_getClassLoaderTest.[void]testGetClassLoader_withClassLoaderSet()", "name": "testGetClassLoader_withClassLoaderSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetClassLoader_withClassLoaderSet()", "original_string": "    @Test\n    void testGetClassLoader_withClassLoaderSet() {\n        Validator validator = new Validator(new ValidatorResources());\n        ClassLoader customClassLoader = new ClassLoader() {};\n        validator.setClassLoader(customClassLoader);\n        assertEquals(customClassLoader, validator.getClassLoader());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java", "class_name": "Validator_getClassLoaderTest", "class_uri": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java.Validator_getClassLoaderTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java.Validator_getClassLoaderTest.[void]testGetClassLoader_withContextClassLoader()", "name": "testGetClassLoader_withContextClassLoader", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetClassLoader_withContextClassLoader()", "original_string": "    @Test\n    void testGetClassLoader_withContextClassLoader() {\n        Validator validator = new Validator(new ValidatorResources());\n        validator.setUseContextClassLoader(true);\n        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n        assertEquals(contextClassLoader, validator.getClassLoader());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java", "class_name": "Validator_getClassLoaderTest", "class_uri": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java.Validator_getClassLoaderTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java.Validator_getClassLoaderTest.[void]testGetClassLoader_withDefaultClassLoader()", "name": "testGetClassLoader_withDefaultClassLoader", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetClassLoader_withDefaultClassLoader()", "original_string": "    @Test\n    void testGetClassLoader_withDefaultClassLoader() {\n        Validator validator = new Validator(new ValidatorResources());\n        validator.setUseContextClassLoader(false);\n        ClassLoader defaultClassLoader = Validator.class.getClassLoader();\n        assertEquals(defaultClassLoader, validator.getClassLoader());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java", "class_name": "Validator_getClassLoaderTest", "class_uri": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java.Validator_getClassLoaderTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResourcesTest.java.ValidatorResourcesTest.[void]testNullInputStream()", "name": "testNullInputStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullInputStream()", "original_string": "    @Test\n    public void testNullInputStream() throws Exception {\n\n        try {\n            new ValidatorResources((InputStream) null);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n            // System.out.println(\"Exception: \" + e);\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResourcesTest.java", "class_name": "ValidatorResourcesTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResourcesTest.java.ValidatorResourcesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest null Input Stream for Validator Resources.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest.[void]testFloat()", "name": "testFloat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloat()", "original_string": "    @Test\n    public void testFloat() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"0\");\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FloatTest.java", "class_name": "FloatTest", "class_uri": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the float validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest.[void]testFloatFailure()", "name": "testFloatFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloatFailure()", "original_string": "    @Test\n    public void testFloatFailure() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n\n        valueTest(info, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FloatTest.java", "class_name": "FloatTest", "class_uri": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the float validation failure.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest.[void]testFloatMax()", "name": "testFloatMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloatMax()", "original_string": "    @Test\n    public void testFloatMax() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Float.toString(Float.MAX_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FloatTest.java", "class_name": "FloatTest", "class_uri": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the float validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest.[void]testFloatMin()", "name": "testFloatMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloatMin()", "original_string": "    @Test\n    public void testFloatMin() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(Float.toString(Float.MIN_VALUE));\n\n        valueTest(info, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FloatTest.java", "class_name": "FloatTest", "class_uri": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the float validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]testRequired()", "name": "testRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequired()", "original_string": "    @Test\n    public void testRequired() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWith nothing provided, we should pass since the fields only fail on null if the other field is non-blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]testRequiredFirstName()", "name": "testRequiredFirstName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstName()", "original_string": "    @Test\n    public void testRequiredFirstName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Test\");\n        name.setLastName(\"Test\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]testRequiredFirstNameBlank()", "name": "testRequiredFirstNameBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredFirstNameBlank()", "original_string": "    @Test\n    public void testRequiredFirstNameBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"\");\n        name.setLastName(\"Test\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for first name if it is blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]testRequiredLastName()", "name": "testRequiredLastName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastName()", "original_string": "    @Test\n    public void testRequiredLastName() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n        name.setLastName(\"Smith\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]testRequiredLastNameBlank()", "name": "testRequiredLastNameBlank", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredLastNameBlank()", "original_string": "    @Test\n    public void testRequiredLastNameBlank() throws ValidatorException {\n        // Create bean to run test on.\n        final NameBean name = new NameBean();\n        name.setFirstName(\"Joe\");\n        name.setLastName(\"\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n\n        // Get results of the validation.\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult firstNameResult = results.getValidatorResult(\"firstName\");\n        final ValidatorResult lastNameResult = results.getValidatorResult(\"lastName\");\n\n        assertNotNull(firstNameResult, \"First Name ValidatorResult should not be null.\");\n        assertTrue(firstNameResult.containsAction(ACTION), () -> \"First Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(firstNameResult.isValid(ACTION), () -> \"First Name ValidatorResult for the '\" + ACTION + \"' action should have passed.\");\n\n        assertNotNull(lastNameResult, \"Last Name ValidatorResult should not be null.\");\n        assertTrue(lastNameResult.containsAction(ACTION), () -> \"Last Name ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(!lastNameResult.isValid(ACTION), () -> \"Last Name ValidatorResult for the '\" + ACTION + \"' action should have failed.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the required validation for last name if it is blank.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_toStringTest.java.RegexValidator_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        String expected = \"RegexValidator{^[a-z]+$,^[A-Z]+$}\";\n        assertEquals(expected, validator.toString(), \"toString() should return the correct pattern representation\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_toStringTest.java", "class_name": "RegexValidator_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_toStringTest.java.RegexValidator_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testAddAllowedCardType()", "name": "testAddAllowedCardType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllowedCardType()", "original_string": "    @Test\n    public void testAddAllowedCardType() {\n        final CreditCardValidator ccv = new CreditCardValidator(CreditCardValidator.NONE);\n        // Turned off all cards so even valid numbers should fail\n        assertFalse(ccv.isValid(VALID_VISA));\n        assertFalse(ccv.isValid(VALID_AMEX));\n        assertFalse(ccv.isValid(VALID_MASTERCARD));\n        assertFalse(ccv.isValid(VALID_DISCOVER));\n        assertFalse(ccv.isValid(VALID_DINERS));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testAmexOption()", "name": "testAmexOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmexOption()", "original_string": "    @Test\n    public void testAmexOption() {\n        final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.AMEX);\n        assertFalse(validator.isValid(ERROR_AMEX), \"Invalid\");\n        assertNull(validator.validate(ERROR_AMEX), \"validate()\");\n        assertEquals(VALID_AMEX, validator.validate(VALID_AMEX));\n\n        assertTrue(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Amex Card option\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testAmexValidator()", "name": "testAmexValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmexValidator()", "original_string": "    @Test\n    public void testAmexValidator() {\n\n        final CodeValidator validator = CreditCardValidator.AMEX_VALIDATOR;\n        final RegexValidator regex = validator.getRegexValidator();\n\n        // ****** Test Regular Expression ******\n        // length 15 and start with a \"34\" or \"37\"\n        assertFalse(regex.isValid(\"343456789012\"), \"Length 12\");\n        assertFalse(regex.isValid(\"3434567890123\"), \"Length 13\");\n        assertFalse(regex.isValid(\"34345678901234\"), \"Length 14\");\n        assertTrue(regex.isValid(\"343456789012345\"), \"Length 15\");\n        assertFalse(regex.isValid(\"3434567890123456\"), \"Length 16\");\n        assertFalse(regex.isValid(\"34345678901234567\"), \"Length 17\");\n        assertFalse(regex.isValid(\"343456789012345678\"), \"Length 18\");\n        assertFalse(regex.isValid(\"333456789012345\"), \"Prefix 33\");\n        assertTrue(regex.isValid(\"343456789012345\"), \"Prefix 34\");\n        assertFalse(regex.isValid(\"353456789012345\"), \"Prefix 35\");\n        assertFalse(regex.isValid(\"363456789012345\"), \"Prefix 36\");\n        assertTrue(regex.isValid(\"373456789012345\"), \"Prefix 37\");\n        assertFalse(regex.isValid(\"383456789012345\"), \"Prefix 38\");\n        assertFalse(regex.isValid(\"413456789012345\"), \"Prefix 41\");\n        assertFalse(regex.isValid(\"3434567x9012345\"), \"Invalid Char\");\n\n        // *********** Test Validator **********\n        assertTrue(regex.isValid(ERROR_AMEX), \"Valid regex\");\n        assertFalse(validator.isValid(ERROR_AMEX), \"Invalid\");\n        assertNull(validator.validate(ERROR_AMEX), \"validate()\");\n        assertEquals(VALID_AMEX, validator.validate(VALID_AMEX));\n\n        assertTrue(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n\n        assertTrue(validator.isValid(\"371449635398431\"), \"Valid-A\");\n        assertTrue(validator.isValid(\"340000000000009\"), \"Valid-B\");\n        assertTrue(validator.isValid(\"370000000000002\"), \"Valid-C\");\n        assertTrue(validator.isValid(\"378734493671000\"), \"Valid-D\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Amex Card validator\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testArrayConstructor()", "name": "testArrayConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArrayConstructor()", "original_string": "    @Test\n    public void testArrayConstructor() {\n        final CreditCardValidator ccv = new CreditCardValidator(new CodeValidator[] { CreditCardValidator.VISA_VALIDATOR, CreditCardValidator.AMEX_VALIDATOR });\n\n        assertTrue(ccv.isValid(VALID_VISA));\n        assertTrue(ccv.isValid(VALID_SHORT_VISA));\n        assertTrue(ccv.isValid(VALID_AMEX));\n        assertFalse(ccv.isValid(VALID_MASTERCARD));\n        assertFalse(ccv.isValid(VALID_DISCOVER));\n\n        assertFalse(ccv.isValid(ERROR_VISA));\n        assertFalse(ccv.isValid(ERROR_SHORT_VISA));\n        assertFalse(ccv.isValid(ERROR_AMEX));\n        assertFalse(ccv.isValid(ERROR_MASTERCARD));\n        assertFalse(ccv.isValid(ERROR_DISCOVER));\n\n        try {\n            new CreditCardValidator((CodeValidator[]) null);\n            fail(\"Expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException iae) {\n            // expected result\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the CodeValidator array constructor\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testDinersOption()", "name": "testDinersOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDinersOption()", "original_string": "    @Test\n    public void testDinersOption() {\n        final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.DINERS);\n        assertFalse(validator.isValid(ERROR_DINERS), \"Invalid\");\n        assertNull(validator.validate(ERROR_DINERS), \"validate()\");\n        assertEquals(VALID_DINERS, validator.validate(VALID_DINERS));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertTrue(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Diners Card option\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testDinersValidator()", "name": "testDinersValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDinersValidator()", "original_string": "    @Test\n    public void testDinersValidator() {\n\n        final CodeValidator validator = CreditCardValidator.DINERS_VALIDATOR;\n        final RegexValidator regex = validator.getRegexValidator();\n\n        // ****** Test Regular Expression ******\n        // length 14 and start with a \"300-305\" or \"3095\" or \"36\" or \"38\" or \"39\"\n        assertFalse(regex.isValid(\"300456789012\"), \"Length 12-300\");\n        assertFalse(regex.isValid(\"363456789012\"), \"Length 12-36\");\n        assertFalse(regex.isValid(\"3004567890123\"), \"Length 13-300\");\n        assertFalse(regex.isValid(\"3634567890123\"), \"Length 13-36\");\n        assertTrue(regex.isValid(\"30045678901234\"), \"Length 14-300\");\n        assertTrue(regex.isValid(\"36345678901234\"), \"Length 14-36\");\n        assertFalse(regex.isValid(\"300456789012345\"), \"Length 15-300\");\n        assertFalse(regex.isValid(\"363456789012345\"), \"Length 15-36\");\n        assertFalse(regex.isValid(\"3004567890123456\"), \"Length 16-300\");\n        assertFalse(regex.isValid(\"3634567890123456\"), \"Length 16-36\");\n        assertFalse(regex.isValid(\"30045678901234567\"), \"Length 17-300\");\n        assertFalse(regex.isValid(\"36345678901234567\"), \"Length 17-36\");\n        assertFalse(regex.isValid(\"300456789012345678\"), \"Length 18-300\");\n        assertFalse(regex.isValid(\"363456789012345678\"), \"Length 18-36\");\n\n        assertTrue(regex.isValid(\"30045678901234\"), \"Prefix 300\");\n        assertTrue(regex.isValid(\"30145678901234\"), \"Prefix 301\");\n        assertTrue(regex.isValid(\"30245678901234\"), \"Prefix 302\");\n        assertTrue(regex.isValid(\"30345678901234\"), \"Prefix 303\");\n        assertTrue(regex.isValid(\"30445678901234\"), \"Prefix 304\");\n        assertTrue(regex.isValid(\"30545678901234\"), \"Prefix 305\");\n        assertFalse(regex.isValid(\"30645678901234\"), \"Prefix 306\");\n        assertFalse(regex.isValid(\"30945678901234\"), \"Prefix 3094\");\n        assertTrue(regex.isValid(\"30955678901234\"), \"Prefix 3095\");\n        assertFalse(regex.isValid(\"30965678901234\"), \"Prefix 3096\");\n        assertFalse(regex.isValid(\"35345678901234\"), \"Prefix 35\");\n        assertTrue(regex.isValid(\"36345678901234\"), \"Prefix 36\");\n        assertFalse(regex.isValid(\"37345678901234\"), \"Prefix 37\");\n        assertTrue(regex.isValid(\"38345678901234\"), \"Prefix 38\");\n        assertTrue(regex.isValid(\"39345678901234\"), \"Prefix 39\");\n\n        assertFalse(regex.isValid(\"3004567x901234\"), \"Invalid Char-A\");\n        assertFalse(regex.isValid(\"3634567x901234\"), \"Invalid Char-B\");\n\n        // *********** Test Validator **********\n        assertTrue(regex.isValid(ERROR_DINERS), \"Valid regex\");\n        assertFalse(validator.isValid(ERROR_DINERS), \"Invalid\");\n        assertNull(validator.validate(ERROR_DINERS), \"validate()\");\n        assertEquals(VALID_DINERS, validator.validate(VALID_DINERS));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertTrue(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n\n        assertTrue(validator.isValid(\"30000000000004\"), \"Valid-A\");\n        assertTrue(validator.isValid(\"30123456789019\"), \"Valid-B\");\n        assertTrue(validator.isValid(\"36432685260294\"), \"Valid-C\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Diners Card validator\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testDiscoverOption()", "name": "testDiscoverOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDiscoverOption()", "original_string": "    @Test\n    public void testDiscoverOption() {\n        final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.DISCOVER);\n        assertFalse(validator.isValid(ERROR_DISCOVER), \"Invalid\");\n        assertFalse(validator.isValid(ERROR_DISCOVER65), \"Invalid65\");\n        assertNull(validator.validate(ERROR_DISCOVER), \"validate()\");\n        assertEquals(VALID_DISCOVER, validator.validate(VALID_DISCOVER));\n        assertEquals(VALID_DISCOVER65, validator.validate(VALID_DISCOVER65));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertTrue(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertTrue(validator.isValid(VALID_DISCOVER65), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Discover Card option\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testDiscoverValidator()", "name": "testDiscoverValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDiscoverValidator()", "original_string": "    @Test\n    public void testDiscoverValidator() {\n\n        final CodeValidator validator = CreditCardValidator.DISCOVER_VALIDATOR;\n        final RegexValidator regex = validator.getRegexValidator();\n\n        // ****** Test Regular Expression ******\n        // length 16 and start with either \"6011\" or or \"64[4-9]\" or \"65\"\n        assertFalse(regex.isValid(\"601156789012\"), \"Length 12-6011\");\n        assertFalse(regex.isValid(\"653456789012\"), \"Length 12-65\");\n        assertFalse(regex.isValid(\"6011567890123\"), \"Length 13-6011\");\n        assertFalse(regex.isValid(\"6534567890123\"), \"Length 13-65\");\n        assertFalse(regex.isValid(\"60115678901234\"), \"Length 14-6011\");\n        assertFalse(regex.isValid(\"65345678901234\"), \"Length 14-65\");\n        assertFalse(regex.isValid(\"601156789012345\"), \"Length 15-6011\");\n        assertFalse(regex.isValid(\"653456789012345\"), \"Length 15-65\");\n        assertTrue(regex.isValid(\"6011567890123456\"), \"Length 16-6011\");\n        assertTrue(regex.isValid(\"6444567890123456\"), \"Length 16-644\");\n        assertTrue(regex.isValid(\"6484567890123456\"), \"Length 16-648\");\n        assertTrue(regex.isValid(\"6534567890123456\"), \"Length 16-65\");\n        assertFalse(regex.isValid(\"65345678901234567\"), \"Length 17-65\");\n        assertFalse(regex.isValid(\"601156789012345678\"), \"Length 18-6011\");\n        assertFalse(regex.isValid(\"653456789012345678\"), \"Length 18-65\");\n\n        assertFalse(regex.isValid(\"6404567890123456\"), \"Prefix 640\");\n        assertFalse(regex.isValid(\"6414567890123456\"), \"Prefix 641\");\n        assertFalse(regex.isValid(\"6424567890123456\"), \"Prefix 642\");\n        assertFalse(regex.isValid(\"6434567890123456\"), \"Prefix 643\");\n        assertFalse(regex.isValid(\"6010567890123456\"), \"Prefix 6010\");\n        assertFalse(regex.isValid(\"6012567890123456\"), \"Prefix 6012\");\n        assertFalse(regex.isValid(\"6011567x90123456\"), \"Invalid Char\");\n\n        // *********** Test Validator **********\n        assertTrue(regex.isValid(ERROR_DISCOVER), \"Valid regex\");\n        assertTrue(regex.isValid(ERROR_DISCOVER65), \"Valid regex65\");\n        assertFalse(validator.isValid(ERROR_DISCOVER), \"Invalid\");\n        assertFalse(validator.isValid(ERROR_DISCOVER65), \"Invalid65\");\n        assertNull(validator.validate(ERROR_DISCOVER), \"validate()\");\n        assertEquals(VALID_DISCOVER, validator.validate(VALID_DISCOVER));\n        assertEquals(VALID_DISCOVER65, validator.validate(VALID_DISCOVER65));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertTrue(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertTrue(validator.isValid(VALID_DISCOVER65), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n\n        assertTrue(validator.isValid(\"6011111111111117\"), \"Valid-A\");\n        assertTrue(validator.isValid(\"6011000000000004\"), \"Valid-B\");\n        assertTrue(validator.isValid(\"6011000000000012\"), \"Valid-C\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Discover Card validator\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testDisjointRange()", "name": "testDisjointRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjointRange()", "original_string": "    @Test\n    public void testDisjointRange() {\n        CreditCardValidator ccv = new CreditCardValidator(new CreditCardRange[] { new CreditCardRange(\"305\", \"4\", new int[] { 13, 16 }), });\n        assertEquals(13, VALID_SHORT_VISA.length());\n        assertEquals(16, VALID_VISA.length());\n        assertEquals(14, VALID_DINERS.length());\n        assertTrue(ccv.isValid(VALID_SHORT_VISA));\n        assertTrue(ccv.isValid(VALID_VISA));\n        assertFalse(ccv.isValid(ERROR_SHORT_VISA));\n        assertFalse(ccv.isValid(ERROR_VISA));\n        assertFalse(ccv.isValid(VALID_DINERS));\n        ccv = new CreditCardValidator(new CreditCardRange[] {\n                // add 14 as a valid length\n                new CreditCardRange(\"305\", \"4\", new int[] { 13, 14, 16 }), });\n        assertTrue(ccv.isValid(VALID_DINERS));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testGeneric()", "name": "testGeneric", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGeneric()", "original_string": "    @Test\n    public void testGeneric() {\n        final CreditCardValidator ccv = CreditCardValidator.genericCreditCardValidator();\n        for (final String s : VALID_CARDS) {\n            assertTrue(ccv.isValid(s), s);\n        }\n        for (final String s : ERROR_CARDS) {\n            assertFalse(ccv.isValid(s), s);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testIsValid()", "name": "testIsValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid()", "original_string": "    @Test\n    public void testIsValid() {\n        CreditCardValidator ccv = new CreditCardValidator();\n\n        assertNull(ccv.validate(null));\n\n        assertFalse(ccv.isValid(null));\n        assertFalse(ccv.isValid(\"\"));\n        assertFalse(ccv.isValid(\"123456789012\")); // too short\n        assertFalse(ccv.isValid(\"12345678901234567890\")); // too long\n        assertFalse(ccv.isValid(\"4417123456789112\"));\n        assertFalse(ccv.isValid(\"4417q23456w89113\"));\n        assertTrue(ccv.isValid(VALID_VISA));\n        assertTrue(ccv.isValid(VALID_SHORT_VISA));\n        assertTrue(ccv.isValid(VALID_AMEX));\n        assertTrue(ccv.isValid(VALID_MASTERCARD));\n        assertTrue(ccv.isValid(VALID_DISCOVER));\n        assertTrue(ccv.isValid(VALID_DISCOVER65));\n\n        assertFalse(ccv.isValid(ERROR_VISA));\n        assertFalse(ccv.isValid(ERROR_SHORT_VISA));\n        assertFalse(ccv.isValid(ERROR_AMEX));\n        assertFalse(ccv.isValid(ERROR_MASTERCARD));\n        assertFalse(ccv.isValid(ERROR_DISCOVER));\n        assertFalse(ccv.isValid(ERROR_DISCOVER65));\n\n        // disallow Visa so it should fail even with good number\n        ccv = new CreditCardValidator(CreditCardValidator.AMEX);\n        assertFalse(ccv.isValid(\"4417123456789113\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testMastercardOption()", "name": "testMastercardOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMastercardOption()", "original_string": "    @Test\n    public void testMastercardOption() {\n        final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.MASTERCARD);\n        assertFalse(validator.isValid(ERROR_MASTERCARD), \"Invalid\");\n        assertNull(validator.validate(ERROR_MASTERCARD), \"validate()\");\n        assertEquals(VALID_MASTERCARD, validator.validate(VALID_MASTERCARD));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertTrue(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Mastercard Card option\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testMastercardUsingSeparators()", "name": "testMastercardUsingSeparators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMastercardUsingSeparators()", "original_string": "    @Test\n    public void testMastercardUsingSeparators() {\n\n        final String masterCardRegExSep = \"^(5[1-5]\\\\d{2})(?:[- ])?(\\\\d{4})(?:[- ])?(\\\\d{4})(?:[- ])?(\\\\d{4})$\";\n        final CodeValidator validator = new CodeValidator(masterCardRegExSep, LuhnCheckDigit.LUHN_CHECK_DIGIT);\n        final RegexValidator regex = validator.getRegexValidator();\n\n        // ****** Test Regular Expression ******\n        // length 16 and start with a \"51-55\"\n        assertEquals(\"5134567890123456\", regex.validate(\"5134567890123456\"), \"Number\");\n        assertEquals(\"5134567890123456\", regex.validate(\"5134-5678-9012-3456\"), \"Hyphen\");\n        assertEquals(\"5134567890123456\", regex.validate(\"5134 5678 9012 3456\"), \"Space\");\n        assertEquals(\"5134567890123456\", regex.validate(\"5134-5678 9012-3456\"), \"MixedA\");\n        assertEquals(\"5134567890123456\", regex.validate(\"5134 5678-9012 3456\"), \"MixedB\");\n\n        assertFalse(regex.isValid(\"5134.5678.9012.3456\"), \"Invalid Separator A\");\n        assertFalse(regex.isValid(\"5134_5678_9012_3456\"), \"Invalid Separator B\");\n        assertFalse(regex.isValid(\"513-45678-9012-3456\"), \"Invalid Grouping A\");\n        assertFalse(regex.isValid(\"5134-567-89012-3456\"), \"Invalid Grouping B\");\n        assertFalse(regex.isValid(\"5134-5678-901-23456\"), \"Invalid Grouping C\");\n\n        // *********** Test Validator **********\n        assertEquals(\"5500000000000004\", validator.validate(\"5500-0000-0000-0004\"), \"Valid-A\");\n        assertEquals(\"5424000000000015\", validator.validate(\"5424 0000 0000 0015\"), \"Valid-B\");\n        assertEquals(\"5301250070000191\", validator.validate(\"5301-250070000191\"), \"Valid-C\");\n        assertEquals(\"5123456789012346\", validator.validate(\"5123456789012346\"), \"Valid-D\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest using separators\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testMastercardValidator()", "name": "testMastercardValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMastercardValidator()", "original_string": "    @Test\n    public void testMastercardValidator() {\n\n        final CodeValidator validator = CreditCardValidator.MASTERCARD_VALIDATOR;\n        final RegexValidator regex = validator.getRegexValidator();\n\n        // ****** Test Regular Expression ******\n        // length 16 and start with a \"51-55\"\n        assertFalse(regex.isValid(\"513456789012\"), \"Length 12\");\n        assertFalse(regex.isValid(\"5134567890123\"), \"Length 13\");\n        assertFalse(regex.isValid(\"51345678901234\"), \"Length 14\");\n        assertFalse(regex.isValid(\"513456789012345\"), \"Length 15\");\n        assertTrue(regex.isValid(\"5134567890123456\"), \"Length 16\");\n        assertFalse(regex.isValid(\"51345678901234567\"), \"Length 17\");\n        assertFalse(regex.isValid(\"513456789012345678\"), \"Length 18\");\n        assertFalse(regex.isValid(\"4134567890123456\"), \"Prefix 41\");\n        assertFalse(regex.isValid(\"5034567890123456\"), \"Prefix 50\");\n        assertTrue(regex.isValid(\"5134567890123456\"), \"Prefix 51\");\n        assertTrue(regex.isValid(\"5234567890123456\"), \"Prefix 52\");\n        assertTrue(regex.isValid(\"5334567890123456\"), \"Prefix 53\");\n        assertTrue(regex.isValid(\"5434567890123456\"), \"Prefix 54\");\n        assertTrue(regex.isValid(\"5534567890123456\"), \"Prefix 55\");\n        assertFalse(regex.isValid(\"5634567890123456\"), \"Prefix 56\");\n        assertFalse(regex.isValid(\"6134567890123456\"), \"Prefix 61\");\n        assertFalse(regex.isValid(\"5134567x90123456\"), \"Invalid Char\");\n\n        // *********** Test Validator **********\n        assertTrue(regex.isValid(ERROR_MASTERCARD), \"Valid regex\");\n        assertFalse(validator.isValid(ERROR_MASTERCARD), \"Invalid\");\n        assertNull(validator.validate(ERROR_MASTERCARD), \"validate()\");\n        assertEquals(VALID_MASTERCARD, validator.validate(VALID_MASTERCARD));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertTrue(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertFalse(validator.isValid(VALID_VISA), \"Visa\");\n        assertFalse(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n\n        assertTrue(validator.isValid(\"5500000000000004\"), \"Valid-A\");\n        assertTrue(validator.isValid(\"5424000000000015\"), \"Valid-B\");\n        assertTrue(validator.isValid(\"5301250070000191\"), \"Valid-C\");\n        assertTrue(validator.isValid(\"5123456789012346\"), \"Valid-D\");\n        assertTrue(validator.isValid(\"5555555555554444\"), \"Valid-E\");\n\n        final RegexValidator rev = validator.getRegexValidator();\n        final String pad = \"0000000000\";\n        assertFalse(rev.isValid(\"222099\" + pad), \"222099\");\n        for (int i = 222100; i <= 272099; i++) {\n            final String j = Integer.toString(i) + pad;\n            assertTrue(rev.isValid(j), j);\n        }\n        assertFalse(rev.isValid(\"272100\" + pad), \"272100\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Mastercard Card validator\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testRangeGenerator()", "name": "testRangeGenerator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRangeGenerator()", "original_string": "    @Test\n    public void testRangeGenerator() {\n        final CreditCardValidator ccv = new CreditCardValidator(\n                new CodeValidator[] { CreditCardValidator.AMEX_VALIDATOR, CreditCardValidator.VISA_VALIDATOR, CreditCardValidator.MASTERCARD_VALIDATOR,\n                        CreditCardValidator.DISCOVER_VALIDATOR, },\n                // Add missing validator\n                new CreditCardRange[] { new CreditCardRange(\"300\", \"305\", 14, 14), // Diners\n                        new CreditCardRange(\"3095\", null, 14, 14), // Diners\n                        new CreditCardRange(\"36\", null, 14, 14), // Diners\n                        new CreditCardRange(\"38\", \"39\", 14, 14), // Diners\n                }\n        // we don't have any VPAY examples yet that aren't handled by VISA\n        );\n        for (final String s : VALID_CARDS) {\n            assertTrue(ccv.isValid(s), s);\n        }\n        for (final String s : ERROR_CARDS) {\n            assertFalse(ccv.isValid(s), s);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testRangeGeneratorNoLuhn()", "name": "testRangeGeneratorNoLuhn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRangeGeneratorNoLuhn()", "original_string": "    @Test\n    public void testRangeGeneratorNoLuhn() {\n        final CodeValidator cv = CreditCardValidator\n                .createRangeValidator(new CreditCardRange[] { new CreditCardRange(\"1\", null, 6, 7), new CreditCardRange(\"644\", \"65\", 8, 8) }, null);\n        assertTrue(cv.isValid(\"1990000\"));\n        assertTrue(cv.isValid(\"199000\"));\n        assertFalse(cv.isValid(\"000000\"));\n        assertFalse(cv.isValid(\"099999\"));\n        assertFalse(cv.isValid(\"200000\"));\n\n        assertFalse(cv.isValid(\"64399999\"));\n        assertTrue(cv.isValid(\"64400000\"));\n        assertTrue(cv.isValid(\"64900000\"));\n        assertTrue(cv.isValid(\"65000000\"));\n        assertTrue(cv.isValid(\"65999999\"));\n        assertFalse(cv.isValid(\"66000000\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testValidLength()", "name": "testValidLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidLength()", "original_string": "    @Test\n    public void testValidLength() {\n        assertTrue(CreditCardValidator.validLength(14, new CreditCardRange(\"\", \"\", 14, 14)));\n        assertFalse(CreditCardValidator.validLength(15, new CreditCardRange(\"\", \"\", 14, 14)));\n        assertFalse(CreditCardValidator.validLength(13, new CreditCardRange(\"\", \"\", 14, 14)));\n\n        assertFalse(CreditCardValidator.validLength(14, new CreditCardRange(\"\", \"\", 15, 17)));\n        assertTrue(CreditCardValidator.validLength(15, new CreditCardRange(\"\", \"\", 15, 17)));\n        assertTrue(CreditCardValidator.validLength(16, new CreditCardRange(\"\", \"\", 15, 17)));\n        assertTrue(CreditCardValidator.validLength(17, new CreditCardRange(\"\", \"\", 15, 17)));\n        assertFalse(CreditCardValidator.validLength(18, new CreditCardRange(\"\", \"\", 15, 17)));\n\n        assertFalse(CreditCardValidator.validLength(14, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\n        assertTrue(CreditCardValidator.validLength(15, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\n        assertFalse(CreditCardValidator.validLength(16, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\n        assertTrue(CreditCardValidator.validLength(17, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\n        assertFalse(CreditCardValidator.validLength(18, new CreditCardRange(\"\", \"\", new int[] { 15, 17 })));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testVisaOption()", "name": "testVisaOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVisaOption()", "original_string": "    @Test\n    public void testVisaOption() {\n        final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.VISA);\n        assertFalse(validator.isValid(ERROR_VISA), \"Invalid\");\n        assertFalse(validator.isValid(ERROR_SHORT_VISA), \"Invalid-S\");\n        assertNull(validator.validate(ERROR_VISA), \"validate()\");\n        assertEquals(VALID_VISA, validator.validate(VALID_VISA));\n        assertEquals(VALID_SHORT_VISA, validator.validate(VALID_SHORT_VISA));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertTrue(validator.isValid(VALID_VISA), \"Visa\");\n        assertTrue(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Visa Card option\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testVisaValidator()", "name": "testVisaValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVisaValidator()", "original_string": "    @Test\n    public void testVisaValidator() {\n\n        final CodeValidator validator = CreditCardValidator.VISA_VALIDATOR;\n        final RegexValidator regex = validator.getRegexValidator();\n\n        // ****** Test Regular Expression ******\n        // length 13 or 16, must start with a \"4\"\n        assertFalse(regex.isValid(\"423456789012\"), \"Length 12\");\n        assertTrue(regex.isValid(\"4234567890123\"), \"Length 13\");\n        assertFalse(regex.isValid(\"42345678901234\"), \"Length 14\");\n        assertFalse(regex.isValid(\"423456789012345\"), \"Length 15\");\n        assertTrue(regex.isValid(\"4234567890123456\"), \"Length 16\");\n        assertFalse(regex.isValid(\"42345678901234567\"), \"Length 17\");\n        assertFalse(regex.isValid(\"423456789012345678\"), \"Length 18\");\n        assertFalse(regex.isValid(\"3234567890123\"), \"Invalid Pref-A\");\n        assertFalse(regex.isValid(\"3234567890123456\"), \"Invalid Pref-B\");\n        assertFalse(regex.isValid(\"4234567x90123\"), \"Invalid Char-A\");\n        assertFalse(regex.isValid(\"4234567x90123456\"), \"Invalid Char-B\");\n\n        // *********** Test Validator **********\n        assertTrue(regex.isValid(ERROR_VISA), \"Valid regex\");\n        assertTrue(regex.isValid(ERROR_SHORT_VISA), \"Valid regex-S\");\n        assertFalse(validator.isValid(ERROR_VISA), \"Invalid\");\n        assertFalse(validator.isValid(ERROR_SHORT_VISA), \"Invalid-S\");\n        assertNull(validator.validate(ERROR_VISA), \"validate()\");\n        assertEquals(VALID_VISA, validator.validate(VALID_VISA));\n        assertEquals(VALID_SHORT_VISA, validator.validate(VALID_SHORT_VISA));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertTrue(validator.isValid(VALID_VISA), \"Visa\");\n        assertTrue(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n\n        assertTrue(validator.isValid(\"4111111111111111\"), \"Valid-A\");\n        assertTrue(validator.isValid(\"4543059999999982\"), \"Valid-C\");\n        assertTrue(validator.isValid(\"4462000000000003\"), \"Valid-B\");\n        assertTrue(validator.isValid(\"4508750000000009\"), \"Valid-D\"); // Electron\n        assertTrue(validator.isValid(\"4012888888881881\"), \"Valid-E\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the Visa Card validator\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest.[void]testVPayOption()", "name": "testVPayOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVPayOption()", "original_string": "    @Test\n    public void testVPayOption() {\n        final CreditCardValidator validator = new CreditCardValidator(CreditCardValidator.VPAY);\n        assertTrue(validator.isValid(VALID_VPAY), \"Valid\");\n        assertTrue(validator.isValid(VALID_VPAY2), \"Valid\");\n        assertFalse(validator.isValid(ERROR_VPAY), \"Invalid\");\n        assertEquals(VALID_VPAY, validator.validate(VALID_VPAY));\n        assertEquals(VALID_VPAY2, validator.validate(VALID_VPAY2));\n\n        assertFalse(validator.isValid(VALID_AMEX), \"Amex\");\n        assertFalse(validator.isValid(VALID_DINERS), \"Diners\");\n        assertFalse(validator.isValid(VALID_DISCOVER), \"Discover\");\n        assertFalse(validator.isValid(VALID_MASTERCARD), \"Mastercard\");\n        assertTrue(validator.isValid(VALID_VISA), \"Visa\");\n        assertTrue(validator.isValid(VALID_SHORT_VISA), \"Visa Short\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java", "class_name": "CreditCardValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CreditCardValidatorTest.java.CreditCardValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest.[void]testValidateWithCountryCheckValid()", "name": "testValidateWithCountryCheckValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateWithCountryCheckValid()", "original_string": "    @Test\n    public void testValidateWithCountryCheckValid() {\n        String validISIN = \"US0378331005\"; // Valid ISIN with valid country code\n        Object result = validatorWithCountryCheck.validate(validISIN);\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java", "class_name": "ISINValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest.[void]testValidateWithCountryCheckInvalidCountryCode()", "name": "testValidateWithCountryCheckInvalidCountryCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateWithCountryCheckInvalidCountryCode()", "original_string": "    @Test\n    public void testValidateWithCountryCheckInvalidCountryCode() {\n        String invalidCountryISIN = \"ZZ0378331005\"; // Invalid country code\n        Object result = validatorWithCountryCheck.validate(invalidCountryISIN);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java", "class_name": "ISINValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest.[void]testValidateWithoutCountryCheckValid()", "name": "testValidateWithoutCountryCheckValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateWithoutCountryCheckValid()", "original_string": "    @Test\n    public void testValidateWithoutCountryCheckValid() {\n        String validISIN = \"US0378331005\"; // Valid ISIN with valid country code\n        Object result = validatorWithoutCountryCheck.validate(validISIN);\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java", "class_name": "ISINValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest.[void]testValidateWithoutCountryCheckInvalid()", "name": "testValidateWithoutCountryCheckInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateWithoutCountryCheckInvalid()", "original_string": "    @Test\n    public void testValidateWithoutCountryCheckInvalid() {\n        String invalidISIN = \"US037833100\"; // Invalid ISIN length\n        Object result = validatorWithoutCountryCheck.validate(invalidISIN);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java", "class_name": "ISINValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java.ISINValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest.[void]testInvalidFalse()", "name": "testInvalidFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidFalse()", "original_string": "    @Test\n    public void testInvalidFalse() {\n        for (final String f : invalidFormat) {\n            assertFalse(VALIDATOR_FALSE.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java", "class_name": "ISINValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest.[void]testInvalidTrue()", "name": "testInvalidTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidTrue()", "original_string": "    @Test\n    public void testInvalidTrue() {\n        for (final String f : invalidFormat) {\n            assertFalse(VALIDATOR_TRUE.isValid(f), f);\n        }\n        for (final String f : invalidFormatTrue) {\n            assertFalse(VALIDATOR_TRUE.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java", "class_name": "ISINValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest.[void]testIsValidFalse()", "name": "testIsValidFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidFalse()", "original_string": "    @Test\n    public void testIsValidFalse() {\n        for (final String f : validFormat) {\n            assertTrue(VALIDATOR_FALSE.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java", "class_name": "ISINValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest.[void]testIsValidTrue()", "name": "testIsValidTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidTrue()", "original_string": "    @Test\n    public void testIsValidTrue() {\n        for (final String f : validFormat) {\n            assertTrue(VALIDATOR_TRUE.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java", "class_name": "ISINValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java.ISINValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testBrokenInetAddresses()", "name": "testBrokenInetAddresses", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBrokenInetAddresses()", "original_string": "    @Test\n    public void testBrokenInetAddresses() {\n        assertFalse(validator.isValid(\"124.14.32.abc\"), \"IP with characters should be invalid\");\n        // TODO: there is some debate as to whether leading zeros should be allowed\n        // They are ambiguous: does the leading 0 mean octal?\n        assertFalse(validator.isValid(\"124.14.32.01\"), \"IP with leading zeroes should be invalid\");\n        assertFalse(validator.isValid(\"23.64.12\"), \"IP with three groups should be invalid\");\n        assertFalse(validator.isValid(\"26.34.23.77.234\"), \"IP with five groups should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"\"), \"IP empty string should be invalid\"); // empty string\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest obviously broken IPs.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testInetAddressesByClass()", "name": "testInetAddressesByClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInetAddressesByClass()", "original_string": "    @Test\n    public void testInetAddressesByClass() {\n        assertTrue(validator.isValid(\"24.25.231.12\"), \"class A IP should be valid\");\n        assertFalse(validator.isValid(\"2.41.32.324\"), \"illegal class A IP should be invalid\");\n\n        assertTrue(validator.isValid(\"135.14.44.12\"), \"class B IP should be valid\");\n        assertFalse(validator.isValid(\"154.123.441.123\"), \"illegal class B IP should be invalid\");\n\n        assertTrue(validator.isValid(\"213.25.224.32\"), \"class C IP should be valid\");\n        assertFalse(validator.isValid(\"201.543.23.11\"), \"illegal class C IP should be invalid\");\n\n        assertTrue(validator.isValid(\"229.35.159.6\"), \"class D IP should be valid\");\n        assertFalse(validator.isValid(\"231.54.11.987\"), \"illegal class D IP should be invalid\");\n\n        assertTrue(validator.isValid(\"248.85.24.92\"), \"class E IP should be valid\");\n        assertFalse(validator.isValid(\"250.21.323.48\"), \"illegal class E IP should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest valid and invalid IPs from each address class.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testInetAddressesFromTheWild()", "name": "testInetAddressesFromTheWild", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInetAddressesFromTheWild()", "original_string": "    @Test\n    public void testInetAddressesFromTheWild() {\n        assertTrue(validator.isValid(\"140.211.11.130\"), \"www.apache.org IP should be valid\");\n        assertTrue(validator.isValid(\"72.14.253.103\"), \"www.l.google.com IP should be valid\");\n        assertTrue(validator.isValid(\"199.232.41.5\"), \"fsf.org IP should be valid\");\n        assertTrue(validator.isValid(\"216.35.123.87\"), \"appscs.ign.com IP should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest IPs that point to real, well-known hosts (without actually looking them up).\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testIPv6()", "name": "testIPv6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6()", "original_string": "    @Test\n    public void testIPv6() {\n        // The original Perl script contained a lot of duplicate tests.\n        // I removed the duplicates I noticed, but there may be more.\n        assertFalse(validator.isValidInet6Address(\"\"), \"IPV6 empty string should be invalid\"); // empty string\n        assertTrue(validator.isValidInet6Address(\"::1\"), \"IPV6 ::1 should be valid\"); // loopback, compressed, non-routable\n        assertTrue(validator.isValidInet6Address(\"::\"), \"IPV6 :: should be valid\"); // unspecified, compressed, non-routable\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:0:1\"), \"IPV6 0:0:0:0:0:0:0:1 should be valid\"); // loopback, full\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:0:0\"), \"IPV6 0:0:0:0:0:0:0:0 should be valid\"); // unspecified, full\n        assertTrue(validator.isValidInet6Address(\"2001:DB8:0:0:8:800:200C:417A\"), \"IPV6 2001:DB8:0:0:8:800:200C:417A should be valid\"); // unicast, full\n        assertTrue(validator.isValidInet6Address(\"FF01:0:0:0:0:0:0:101\"), \"IPV6 FF01:0:0:0:0:0:0:101 should be valid\"); // multicast, full\n        assertTrue(validator.isValidInet6Address(\"2001:DB8::8:800:200C:417A\"), \"IPV6 2001:DB8::8:800:200C:417A should be valid\"); // unicast, compressed\n        assertTrue(validator.isValidInet6Address(\"FF01::101\"), \"IPV6 FF01::101 should be valid\"); // multicast, compressed\n        assertFalse(validator.isValidInet6Address(\"2001:DB8:0:0:8:800:200C:417A:221\"), \"IPV6 2001:DB8:0:0:8:800:200C:417A:221 should be invalid\"); // unicast,\n                                                                                                                                                   // full\n        assertFalse(validator.isValidInet6Address(\"FF01::101::2\"), \"IPV6 FF01::101::2 should be invalid\"); // multicast, compressed\n        assertTrue(validator.isValidInet6Address(\"fe80::217:f2ff:fe07:ed62\"), \"IPV6 fe80::217:f2ff:fe07:ed62 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0000:1234:0000:0000:C1C0:ABCD:0876\"), \"IPV6 2001:0000:1234:0000:0000:C1C0:ABCD:0876 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"3ffe:0b00:0000:0000:0001:0000:0000:000a\"), \"IPV6 3ffe:0b00:0000:0000:0001:0000:0000:000a should be valid\");\n        assertTrue(validator.isValidInet6Address(\"FF02:0000:0000:0000:0000:0000:0000:0001\"), \"IPV6 FF02:0000:0000:0000:0000:0000:0000:0001 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0000:0000:0000:0000:0000:0000:0000:0001\"), \"IPV6 0000:0000:0000:0000:0000:0000:0000:0001 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0000:0000:0000:0000:0000:0000:0000:0000\"), \"IPV6 0000:0000:0000:0000:0000:0000:0000:0000 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"02001:0000:1234:0000:0000:C1C0:ABCD:0876\"),\n                \"IPV6 02001:0000:1234:0000:0000:C1C0:ABCD:0876 should be invalid\"); // extra 0 not allowed!\n        assertFalse(validator.isValidInet6Address(\"2001:0000:1234:0000:00001:C1C0:ABCD:0876\"),\n                \"IPV6 2001:0000:1234:0000:00001:C1C0:ABCD:0876 should be invalid\"); // extra 0 not allowed!\n        assertFalse(validator.isValidInet6Address(\"2001:0000:1234:0000:0000:C1C0:ABCD:0876 0\"),\n                \"IPV6 2001:0000:1234:0000:0000:C1C0:ABCD:0876 0 should be invalid\"); // junk after valid address\n        assertFalse(validator.isValidInet6Address(\"2001:0000:1234: 0000:0000:C1C0:ABCD:0876\"),\n                \"IPV6 2001:0000:1234: 0000:0000:C1C0:ABCD:0876 should be invalid\"); // internal space\n        assertFalse(validator.isValidInet6Address(\"3ffe:0b00:0000:0001:0000:0000:000a\"), \"IPV6 3ffe:0b00:0000:0001:0000:0000:000a should be invalid\"); // seven\n                                                                                                                                                       // segments\n        assertFalse(validator.isValidInet6Address(\"FF02:0000:0000:0000:0000:0000:0000:0000:0001\"),\n                \"IPV6 FF02:0000:0000:0000:0000:0000:0000:0000:0001 should be invalid\"); // nine segments\n        assertFalse(validator.isValidInet6Address(\"3ffe:b00::1::a\"), \"IPV6 3ffe:b00::1::a should be invalid\"); // double \"::\"\n        assertFalse(validator.isValidInet6Address(\"::1111:2222:3333:4444:5555:6666::\"), \"IPV6 ::1111:2222:3333:4444:5555:6666:: should be invalid\"); // double\n                                                                                                                                                     // \"::\"\n        assertTrue(validator.isValidInet6Address(\"2::10\"), \"IPV6 2::10 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"ff02::1\"), \"IPV6 ff02::1 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"fe80::\"), \"IPV6 fe80:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2002::\"), \"IPV6 2002:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:db8::\"), \"IPV6 2001:db8:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:1234::\"), \"IPV6 2001:0db8:1234:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::ffff:0:0\"), \"IPV6 ::ffff:0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6:7:8\"), \"IPV6 1:2:3:4:5:6:7:8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6::8\"), \"IPV6 1:2:3:4:5:6::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::8\"), \"IPV6 1:2:3:4:5::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4::8\"), \"IPV6 1:2:3:4::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3::8\"), \"IPV6 1:2:3::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2::8\"), \"IPV6 1:2::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::8\"), \"IPV6 1::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::2:3:4:5:6:7\"), \"IPV6 1::2:3:4:5:6:7 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::2:3:4:5:6\"), \"IPV6 1::2:3:4:5:6 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::2:3:4:5\"), \"IPV6 1::2:3:4:5 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::2:3:4\"), \"IPV6 1::2:3:4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::2:3\"), \"IPV6 1::2:3 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2:3:4:5:6:7:8\"), \"IPV6 ::2:3:4:5:6:7:8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2:3:4:5:6:7\"), \"IPV6 ::2:3:4:5:6:7 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2:3:4:5:6\"), \"IPV6 ::2:3:4:5:6 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2:3:4:5\"), \"IPV6 ::2:3:4:5 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2:3:4\"), \"IPV6 ::2:3:4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2:3\"), \"IPV6 ::2:3 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::8\"), \"IPV6 ::8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6::\"), \"IPV6 1:2:3:4:5:6:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::\"), \"IPV6 1:2:3:4:5:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4::\"), \"IPV6 1:2:3:4:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3::\"), \"IPV6 1:2:3:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2::\"), \"IPV6 1:2:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::\"), \"IPV6 1:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::7:8\"), \"IPV6 1:2:3:4:5::7:8 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"1:2:3::4:5::7:8\"), \"IPV6 1:2:3::4:5::7:8 should be invalid\"); // Double \"::\"\n        assertFalse(validator.isValidInet6Address(\"12345::6:7:8\"), \"IPV6 12345::6:7:8 should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4::7:8\"), \"IPV6 1:2:3:4::7:8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3::7:8\"), \"IPV6 1:2:3::7:8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2::7:8\"), \"IPV6 1:2::7:8 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::7:8\"), \"IPV6 1::7:8 should be valid\");\n        // IPv4 addresses as dotted-quads\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5:6:1.2.3.4\"), \"IPV6 1:2:3:4:5:6:1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4:5::1.2.3.4\"), \"IPV6 1:2:3:4:5::1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4::1.2.3.4\"), \"IPV6 1:2:3:4::1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3::1.2.3.4\"), \"IPV6 1:2:3::1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2::1.2.3.4\"), \"IPV6 1:2::1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::1.2.3.4\"), \"IPV6 1::1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3:4::5:1.2.3.4\"), \"IPV6 1:2:3:4::5:1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2:3::5:1.2.3.4\"), \"IPV6 1:2:3::5:1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1:2::5:1.2.3.4\"), \"IPV6 1:2::5:1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::5:1.2.3.4\"), \"IPV6 1::5:1.2.3.4 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1::5:11.22.33.44\"), \"IPV6 1::5:11.22.33.44 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:400.2.3.4\"), \"IPV6 1::5:400.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:260.2.3.4\"), \"IPV6 1::5:260.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:256.2.3.4\"), \"IPV6 1::5:256.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.256.3.4\"), \"IPV6 1::5:1.256.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.2.256.4\"), \"IPV6 1::5:1.2.256.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.2.3.256\"), \"IPV6 1::5:1.2.3.256 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:300.2.3.4\"), \"IPV6 1::5:300.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.300.3.4\"), \"IPV6 1::5:1.300.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.2.300.4\"), \"IPV6 1::5:1.2.300.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.2.3.300\"), \"IPV6 1::5:1.2.3.300 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:900.2.3.4\"), \"IPV6 1::5:900.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.900.3.4\"), \"IPV6 1::5:1.900.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.2.900.4\"), \"IPV6 1::5:1.2.900.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:1.2.3.900\"), \"IPV6 1::5:1.2.3.900 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:300.300.300.300\"), \"IPV6 1::5:300.300.300.300 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::5:3000.30.30.30\"), \"IPV6 1::5:3000.30.30.30 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::400.2.3.4\"), \"IPV6 1::400.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::260.2.3.4\"), \"IPV6 1::260.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::256.2.3.4\"), \"IPV6 1::256.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.256.3.4\"), \"IPV6 1::1.256.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.2.256.4\"), \"IPV6 1::1.2.256.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.2.3.256\"), \"IPV6 1::1.2.3.256 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::300.2.3.4\"), \"IPV6 1::300.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.300.3.4\"), \"IPV6 1::1.300.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.2.300.4\"), \"IPV6 1::1.2.300.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.2.3.300\"), \"IPV6 1::1.2.3.300 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::900.2.3.4\"), \"IPV6 1::900.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.900.3.4\"), \"IPV6 1::1.900.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.2.900.4\"), \"IPV6 1::1.2.900.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::1.2.3.900\"), \"IPV6 1::1.2.3.900 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::300.300.300.300\"), \"IPV6 1::300.300.300.300 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::3000.30.30.30\"), \"IPV6 1::3000.30.30.30 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::400.2.3.4\"), \"IPV6 ::400.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::260.2.3.4\"), \"IPV6 ::260.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::256.2.3.4\"), \"IPV6 ::256.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.256.3.4\"), \"IPV6 ::1.256.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.256.4\"), \"IPV6 ::1.2.256.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.3.256\"), \"IPV6 ::1.2.3.256 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::300.2.3.4\"), \"IPV6 ::300.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.300.3.4\"), \"IPV6 ::1.300.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.300.4\"), \"IPV6 ::1.2.300.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.3.300\"), \"IPV6 ::1.2.3.300 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::900.2.3.4\"), \"IPV6 ::900.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.900.3.4\"), \"IPV6 ::1.900.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.900.4\"), \"IPV6 ::1.2.900.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.3.900\"), \"IPV6 ::1.2.3.900 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::300.300.300.300\"), \"IPV6 ::300.300.300.300 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::3000.30.30.30\"), \"IPV6 ::3000.30.30.30 should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"fe80::217:f2ff:254.7.237.98\"), \"IPV6 fe80::217:f2ff:254.7.237.98 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::ffff:192.168.1.26\"), \"IPV6 ::ffff:192.168.1.26 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"2001:1:1:1:1:1:255Z255X255Y255\"), \"IPV6 2001:1:1:1:1:1:255Z255X255Y255 should be invalid\"); // garbage\n                                                                                                                                               // instead of \".\"\n                                                                                                                                               // in IPv4\n        assertFalse(validator.isValidInet6Address(\"::ffff:192x168.1.26\"), \"IPV6 ::ffff:192x168.1.26 should be invalid\"); // ditto\n        assertTrue(validator.isValidInet6Address(\"::ffff:192.168.1.1\"), \"IPV6 ::ffff:192.168.1.1 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:13.1.68.3\"), \"IPV6 0:0:0:0:0:0:13.1.68.3 should be valid\"); // IPv4-compatible IPv6 address, full,\n                                                                                                                          // deprecated\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:FFFF:129.144.52.38\"), \"IPV6 0:0:0:0:0:FFFF:129.144.52.38 should be valid\"); // IPv4-mapped IPv6\n                                                                                                                                        // address, full\n        assertTrue(validator.isValidInet6Address(\"::13.1.68.3\"), \"IPV6 ::13.1.68.3 should be valid\"); // IPv4-compatible IPv6 address, compressed, deprecated\n        assertTrue(validator.isValidInet6Address(\"::FFFF:129.144.52.38\"), \"IPV6 ::FFFF:129.144.52.38 should be valid\"); // IPv4-mapped IPv6 address, compressed\n        assertTrue(validator.isValidInet6Address(\"fe80:0:0:0:204:61ff:254.157.241.86\"), \"IPV6 fe80:0:0:0:204:61ff:254.157.241.86 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"fe80::204:61ff:254.157.241.86\"), \"IPV6 fe80::204:61ff:254.157.241.86 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::ffff:12.34.56.78\"), \"IPV6 ::ffff:12.34.56.78 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"::ffff:2.3.4\"), \"IPV6 ::ffff:2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::ffff:257.1.2.3\"), \"IPV6 ::ffff:257.1.2.3 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4\"), \"IPV6 1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111:2222:3333:4444::5555\"), \"IPV6 1.2.3.4:1111:2222:3333:4444::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111:2222:3333::5555\"), \"IPV6 1.2.3.4:1111:2222:3333::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111:2222::5555\"), \"IPV6 1.2.3.4:1111:2222::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4:1111::5555\"), \"IPV6 1.2.3.4:1111::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4::5555\"), \"IPV6 1.2.3.4::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4::\"), \"IPV6 1.2.3.4:: should be invalid\");\n        // Testing IPv4 addresses represented as dotted-quads\n        // Leading zeroes in IPv4 addresses not allowed: some systems treat the leading \"0\" in \".086\" as the start of an octal number\n        // Update: The BNF in RFC-3986 explicitly defines the dec-octet (for IPv4 addresses) not to have a leading zero\n        assertFalse(validator.isValidInet6Address(\"fe80:0000:0000:0000:0204:61ff:254.157.241.086\"),\n                \"IPV6 fe80:0000:0000:0000:0204:61ff:254.157.241.086 should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"::ffff:192.0.2.128\"), \"IPV6 ::ffff:192.0.2.128 should be valid\"); // but this is OK, since there's a single\n                                                                                                                    // digit\n        assertFalse(validator.isValidInet6Address(\"XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4\"), \"IPV6 XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:00.00.00.00\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:00.00.00.00 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:000.000.000.000\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:000.000.000.000 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:256.256.256.256\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:256.256.256.256 should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"fe80:0000:0000:0000:0204:61ff:fe9d:f156\"), \"IPV6 fe80:0000:0000:0000:0204:61ff:fe9d:f156 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"fe80:0:0:0:204:61ff:fe9d:f156\"), \"IPV6 fe80:0:0:0:204:61ff:fe9d:f156 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"fe80::204:61ff:fe9d:f156\"), \"IPV6 fe80::204:61ff:fe9d:f156 should be valid\");\n        assertFalse(validator.isValidInet6Address(\":\"), \"IPV6 : should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"::ffff:c000:280\"), \"IPV6 ::ffff:c000:280 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::5555:\"), \"IPV6 1111:2222:3333:4444::5555: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:\"), \"IPV6 1111:2222:3333::5555: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::5555:\"), \"IPV6 1111:2222::5555: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::5555:\"), \"IPV6 1111::5555: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::5555:\"), \"IPV6 ::5555: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::\"), \"IPV6 ::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:\"), \"IPV6 1111: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::5555\"), \"IPV6 :1111:2222:3333:4444::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::5555\"), \"IPV6 :1111:2222:3333::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::5555\"), \"IPV6 :1111:2222::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::5555\"), \"IPV6 :1111::5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::5555\"), \"IPV6 :::5555 should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"), \"IPV6 2001:0db8:85a3:0000:0000:8a2e:0370:7334 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:db8:85a3:0:0:8a2e:370:7334\"), \"IPV6 2001:db8:85a3:0:0:8a2e:370:7334 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:db8:85a3::8a2e:370:7334\"), \"IPV6 2001:db8:85a3::8a2e:370:7334 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:0000:0000:0000:0000:1428:57ab\"), \"IPV6 2001:0db8:0000:0000:0000:0000:1428:57ab should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:0000:0000:0000::1428:57ab\"), \"IPV6 2001:0db8:0000:0000:0000::1428:57ab should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:0:0:0:0:1428:57ab\"), \"IPV6 2001:0db8:0:0:0:0:1428:57ab should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:0:0::1428:57ab\"), \"IPV6 2001:0db8:0:0::1428:57ab should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8::1428:57ab\"), \"IPV6 2001:0db8::1428:57ab should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:db8::1428:57ab\"), \"IPV6 2001:db8::1428:57ab should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::ffff:0c22:384e\"), \"IPV6 ::ffff:0c22:384e should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:1234:0000:0000:0000:0000:0000\"), \"IPV6 2001:0db8:1234:0000:0000:0000:0000:0000 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:1234:ffff:ffff:ffff:ffff:ffff\"), \"IPV6 2001:0db8:1234:ffff:ffff:ffff:ffff:ffff should be valid\");\n        assertTrue(validator.isValidInet6Address(\"2001:db8:a::123\"), \"IPV6 2001:db8:a::123 should be valid\");\n        assertFalse(validator.isValidInet6Address(\"123\"), \"IPV6 123 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"ldkfj\"), \"IPV6 ldkfj should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"2001::FFD3::57ab\"), \"IPV6 2001::FFD3::57ab should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"2001:db8:85a3::8a2e:37023:7334\"), \"IPV6 2001:db8:85a3::8a2e:37023:7334 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"2001:db8:85a3::8a2e:370k:7334\"), \"IPV6 2001:db8:85a3::8a2e:370k:7334 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1:2:3:4:5:6:7:8:9\"), \"IPV6 1:2:3:4:5:6:7:8:9 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1::2::3\"), \"IPV6 1::2::3 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1:::3:4:5\"), \"IPV6 1:::3:4:5 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1:2:3::4:5:6:7:8:9\"), \"IPV6 1:2:3::4:5:6:7:8:9 should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::\"), \"IPV6 1111:2222:3333:4444:5555:6666:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::\"), \"IPV6 1111:2222:3333:4444:5555:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::\"), \"IPV6 1111:2222:3333:4444:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::\"), \"IPV6 1111:2222:3333:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::\"), \"IPV6 1111:2222:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::\"), \"IPV6 1111:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::8888\"), \"IPV6 1111:2222:3333:4444:5555:6666::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::8888\"), \"IPV6 1111:2222:3333:4444:5555::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::8888\"), \"IPV6 1111:2222:3333:4444::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::8888\"), \"IPV6 1111:2222:3333::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::8888\"), \"IPV6 1111:2222::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::8888\"), \"IPV6 1111::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::8888\"), \"IPV6 ::8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777:8888\"), \"IPV6 1111:2222:3333:4444:5555::7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::7777:8888\"), \"IPV6 1111:2222:3333:4444::7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::7777:8888\"), \"IPV6 1111:2222:3333::7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::7777:8888\"), \"IPV6 1111:2222::7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::7777:8888\"), \"IPV6 1111::7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::7777:8888\"), \"IPV6 ::7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777:8888\"), \"IPV6 1111:2222:3333:4444::6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::6666:7777:8888\"), \"IPV6 1111:2222:3333::6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::6666:7777:8888\"), \"IPV6 1111:2222::6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::6666:7777:8888\"), \"IPV6 1111::6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::6666:7777:8888\"), \"IPV6 ::6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777:8888\"), \"IPV6 1111:2222:3333::5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::5555:6666:7777:8888\"), \"IPV6 1111:2222::5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::5555:6666:7777:8888\"), \"IPV6 1111::5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::5555:6666:7777:8888\"), \"IPV6 ::5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777:8888\"), \"IPV6 1111:2222::4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::4444:5555:6666:7777:8888\"), \"IPV6 1111::4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::4444:5555:6666:7777:8888\"), \"IPV6 ::4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777:8888\"), \"IPV6 1111::3333:4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::3333:4444:5555:6666:7777:8888\"), \"IPV6 ::3333:4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:8888 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:123.123.123.123\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::123.123.123.123\"),\n                \"IPV6 1111:2222:3333:4444:5555::123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::123.123.123.123\"), \"IPV6 1111:2222:3333:4444::123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::123.123.123.123\"), \"IPV6 1111:2222:3333::123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::123.123.123.123\"), \"IPV6 1111:2222::123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::123.123.123.123\"), \"IPV6 1111::123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::123.123.123.123\"), \"IPV6 ::123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:123.123.123.123\"),\n                \"IPV6 1111:2222:3333:4444::6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::6666:123.123.123.123\"), \"IPV6 1111:2222:3333::6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::6666:123.123.123.123\"), \"IPV6 1111:2222::6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::6666:123.123.123.123\"), \"IPV6 1111::6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::6666:123.123.123.123\"), \"IPV6 ::6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:123.123.123.123\"),\n                \"IPV6 1111:2222:3333::5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::5555:6666:123.123.123.123\"), \"IPV6 1111:2222::5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::5555:6666:123.123.123.123\"), \"IPV6 1111::5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::5555:6666:123.123.123.123\"), \"IPV6 ::5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:123.123.123.123\"),\n                \"IPV6 1111:2222::4444:5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::4444:5555:6666:123.123.123.123\"), \"IPV6 1111::4444:5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::4444:5555:6666:123.123.123.123\"), \"IPV6 ::4444:5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:123.123.123.123\"),\n                \"IPV6 1111::3333:4444:5555:6666:123.123.123.123 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:123.123.123.123\"),\n                \"IPV6 ::2222:3333:4444:5555:6666:123.123.123.123 should be valid\");\n        // Trying combinations of \"0\" and \"::\"\n        // These are all syntactically correct, but are bad form\n        // because \"0\" adjacent to \"::\" should be combined into \"::\"\n        assertTrue(validator.isValidInet6Address(\"::0:0:0:0:0:0:0\"), \"IPV6 ::0:0:0:0:0:0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0:0:0:0:0:0\"), \"IPV6 ::0:0:0:0:0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0:0:0:0:0\"), \"IPV6 ::0:0:0:0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0:0:0:0\"), \"IPV6 ::0:0:0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0:0:0\"), \"IPV6 ::0:0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0:0\"), \"IPV6 ::0:0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0\"), \"IPV6 ::0 should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0:0::\"), \"IPV6 0:0:0:0:0:0:0:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0:0::\"), \"IPV6 0:0:0:0:0:0:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0:0::\"), \"IPV6 0:0:0:0:0:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0:0:0::\"), \"IPV6 0:0:0:0:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0:0::\"), \"IPV6 0:0:0:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0:0::\"), \"IPV6 0:0:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"0::\"), \"IPV6 0:: should be valid\");\n        // Invalid data\n        assertFalse(validator.isValidInet6Address(\"XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX\"), \"IPV6 XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX:XXXX should be invalid\");\n        // Too many components\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:9999\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:9999 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888::\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888:9999\"),\n                \"IPV6 ::2222:3333:4444:5555:6666:7777:8888:9999 should be invalid\");\n        // Too few components\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666\"), \"IPV6 1111:2222:3333:4444:5555:6666 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555\"), \"IPV6 1111:2222:3333:4444:5555 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444\"), \"IPV6 1111:2222:3333:4444 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333\"), \"IPV6 1111:2222:3333 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222\"), \"IPV6 1111:2222 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111\"), \"IPV6 1111 should be invalid\");\n        // Missing :\n        assertFalse(validator.isValidInet6Address(\"11112222:3333:4444:5555:6666:7777:8888\"), \"IPV6 11112222:3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:22223333:4444:5555:6666:7777:8888\"), \"IPV6 1111:22223333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:33334444:5555:6666:7777:8888\"), \"IPV6 1111:2222:33334444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:44445555:6666:7777:8888\"), \"IPV6 1111:2222:3333:44445555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:55556666:7777:8888\"), \"IPV6 1111:2222:3333:4444:55556666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:66667777:8888\"), \"IPV6 1111:2222:3333:4444:5555:66667777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:77778888\"), \"IPV6 1111:2222:3333:4444:5555:6666:77778888 should be invalid\");\n        // Missing : intended for ::\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:\"), \"IPV6 1111:2222:3333:4444:5555:6666: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:\"), \"IPV6 1111:2222:3333:4444:5555: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:\"), \"IPV6 1111:2222:3333:4444: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:\"), \"IPV6 1111:2222:3333: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:\"), \"IPV6 1111:2222: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":8888\"), \"IPV6 :8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":7777:8888\"), \"IPV6 :7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":6666:7777:8888\"), \"IPV6 :6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":5555:6666:7777:8888\"), \"IPV6 :5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":4444:5555:6666:7777:8888\"), \"IPV6 :4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":3333:4444:5555:6666:7777:8888\"), \"IPV6 :3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :2222:3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:7777:8888\"),\n                \"IPV6 :1111:2222:3333:4444:5555:6666:7777:8888 should be invalid\");\n        // :::\n        assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :::2222:3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:::3333:4444:5555:6666:7777:8888\"), \"IPV6 1111:::3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:::4444:5555:6666:7777:8888\"), \"IPV6 1111:2222:::4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:::5555:6666:7777:8888\"), \"IPV6 1111:2222:3333:::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:::6666:7777:8888\"), \"IPV6 1111:2222:3333:4444:::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::7777:8888\"), \"IPV6 1111:2222:3333:4444:5555:::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:::8888\"), \"IPV6 1111:2222:3333:4444:5555:6666:::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777::: should be invalid\");\n        // Double ::\n        assertFalse(validator.isValidInet6Address(\"::2222::4444:5555:6666:7777:8888\"), \"IPV6 ::2222::4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333::5555:6666:7777:8888\"), \"IPV6 ::2222:3333::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444::6666:7777:8888\"), \"IPV6 ::2222:3333:4444::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555::7777:8888\"), \"IPV6 ::2222:3333:4444:5555::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:7777::8888\"), \"IPV6 ::2222:3333:4444:5555:7777::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:7777:8888::\"), \"IPV6 ::2222:3333:4444:5555:7777:8888:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333::5555:6666:7777:8888\"), \"IPV6 1111::3333::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444::6666:7777:8888\"), \"IPV6 1111::3333:4444::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555::7777:8888\"), \"IPV6 1111::3333:4444:5555::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555:6666::8888\"), \"IPV6 1111::3333:4444:5555:6666::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777::\"), \"IPV6 1111::3333:4444:5555:6666:7777:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444::6666:7777:8888\"), \"IPV6 1111:2222::4444::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555::7777:8888\"), \"IPV6 1111:2222::4444:5555::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555:6666::8888\"), \"IPV6 1111:2222::4444:5555:6666::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777::\"), \"IPV6 1111:2222::4444:5555:6666:7777:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555::7777:8888\"), \"IPV6 1111:2222:3333::5555::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:6666::8888\"), \"IPV6 1111:2222:3333::5555:6666::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777::\"), \"IPV6 1111:2222:3333::5555:6666:7777:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::6666::8888\"), \"IPV6 1111:2222:3333:4444::6666::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777::\"), \"IPV6 1111:2222:3333:4444::6666:7777:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777::\"), \"IPV6 1111:2222:3333:4444:5555::7777:: should be invalid\");\n        // Too many components\"\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:7777:8888:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:1.2.3.4\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:7777:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:6666::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:1.2.3.4\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:1.2.3.4.5\"), \"IPV6 1111:2222:3333:4444:5555:6666:1.2.3.4.5 should be invalid\");\n        // Too few components\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:1.2.3.4\"), \"IPV6 1111:2222:3333:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:1.2.3.4\"), \"IPV6 1111:2222:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:1.2.3.4\"), \"IPV6 1111:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1.2.3.4\"), \"IPV6 1.2.3.4 should be invalid\");\n        // Missing :\n        assertFalse(validator.isValidInet6Address(\"11112222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 11112222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:22223333:4444:5555:6666:1.2.3.4\"), \"IPV6 1111:22223333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:33334444:5555:6666:1.2.3.4\"), \"IPV6 1111:2222:33334444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:44445555:6666:1.2.3.4\"), \"IPV6 1111:2222:3333:44445555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:55556666:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:55556666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:66661.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:66661.2.3.4 should be invalid\");\n        // Missing .\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255255.255.255\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:255255.255.255 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255.255255.255\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:255.255255.255 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:255.255.255255\"),\n                \"IPV6 1111:2222:3333:4444:5555:6666:255.255.255255 should be invalid\");\n        // Missing : intended for ::\n        assertFalse(validator.isValidInet6Address(\":1.2.3.4\"), \"IPV6 :1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":6666:1.2.3.4\"), \"IPV6 :6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":5555:6666:1.2.3.4\"), \"IPV6 :5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":4444:5555:6666:1.2.3.4\"), \"IPV6 :4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :1111:2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        // :::\n        assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :::2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:::3333:4444:5555:6666:1.2.3.4\"), \"IPV6 1111:::3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:::4444:5555:6666:1.2.3.4\"), \"IPV6 1111:2222:::4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:::5555:6666:1.2.3.4\"), \"IPV6 1111:2222:3333:::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:::6666:1.2.3.4\"), \"IPV6 1111:2222:3333:4444:::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::1.2.3.4\"), \"IPV6 1111:2222:3333:4444:5555:::1.2.3.4 should be invalid\");\n        // Double ::\n        assertFalse(validator.isValidInet6Address(\"::2222::4444:5555:6666:1.2.3.4\"), \"IPV6 ::2222::4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333::5555:6666:1.2.3.4\"), \"IPV6 ::2222:3333::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444::6666:1.2.3.4\"), \"IPV6 ::2222:3333:4444::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555::1.2.3.4\"), \"IPV6 ::2222:3333:4444:5555::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333::5555:6666:1.2.3.4\"), \"IPV6 1111::3333::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444::6666:1.2.3.4\"), \"IPV6 1111::3333:4444::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555::1.2.3.4\"), \"IPV6 1111::3333:4444:5555::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444::6666:1.2.3.4\"), \"IPV6 1111:2222::4444::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555::1.2.3.4\"), \"IPV6 1111:2222::4444:5555::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555::1.2.3.4\"), \"IPV6 1111:2222:3333::5555::1.2.3.4 should be invalid\");\n        // Missing parts\n        assertFalse(validator.isValidInet6Address(\"::.\"), \"IPV6 ::. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::..\"), \"IPV6 ::.. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::...\"), \"IPV6 ::... should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1...\"), \"IPV6 ::1... should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2..\"), \"IPV6 ::1.2.. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::1.2.3.\"), \"IPV6 ::1.2.3. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::.2..\"), \"IPV6 ::.2.. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::.2.3.\"), \"IPV6 ::.2.3. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::.2.3.4\"), \"IPV6 ::.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::..3.\"), \"IPV6 ::..3. should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::..3.4\"), \"IPV6 ::..3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::...4\"), \"IPV6 ::...4 should be invalid\");\n        // Extra : in front\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:7777::\"), \"IPV6 :1111:2222:3333:4444:5555:6666:7777:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666::\"), \"IPV6 :1111:2222:3333:4444:5555:6666:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::\"), \"IPV6 :1111:2222:3333:4444:5555:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::\"), \"IPV6 :1111:2222:3333:4444:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::\"), \"IPV6 :1111:2222:3333:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::\"), \"IPV6 :1111:2222:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::\"), \"IPV6 :1111:: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666::8888\"), \"IPV6 :1111:2222:3333:4444:5555:6666::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::8888\"), \"IPV6 :1111:2222:3333:4444:5555::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::8888\"), \"IPV6 :1111:2222:3333:4444::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::8888\"), \"IPV6 :1111:2222:3333::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::8888\"), \"IPV6 :1111:2222::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::8888\"), \"IPV6 :1111::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::8888\"), \"IPV6 :::8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::7777:8888\"), \"IPV6 :1111:2222:3333:4444:5555::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::7777:8888\"), \"IPV6 :1111:2222:3333:4444::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::7777:8888\"), \"IPV6 :1111:2222:3333::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::7777:8888\"), \"IPV6 :1111:2222::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::7777:8888\"), \"IPV6 :1111::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::7777:8888\"), \"IPV6 :::7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::6666:7777:8888\"), \"IPV6 :1111:2222:3333:4444::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::6666:7777:8888\"), \"IPV6 :1111:2222:3333::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::6666:7777:8888\"), \"IPV6 :1111:2222::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::6666:7777:8888\"), \"IPV6 :1111::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::6666:7777:8888\"), \"IPV6 :::6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::5555:6666:7777:8888\"), \"IPV6 :1111:2222:3333::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::5555:6666:7777:8888\"), \"IPV6 :1111:2222::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::5555:6666:7777:8888\"), \"IPV6 :1111::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::5555:6666:7777:8888\"), \"IPV6 :::5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::4444:5555:6666:7777:8888\"), \"IPV6 :1111:2222::4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::4444:5555:6666:7777:8888\"), \"IPV6 :1111::4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::4444:5555:6666:7777:8888\"), \"IPV6 :::4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::3333:4444:5555:6666:7777:8888\"), \"IPV6 :1111::3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::3333:4444:5555:6666:7777:8888\"), \"IPV6 :::3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:7777:8888\"), \"IPV6 :::2222:3333:4444:5555:6666:7777:8888 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :1111:2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444:5555::1.2.3.4\"), \"IPV6 :1111:2222:3333:4444:5555::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::1.2.3.4\"), \"IPV6 :1111:2222:3333:4444::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::1.2.3.4\"), \"IPV6 :1111:2222:3333::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::1.2.3.4\"), \"IPV6 :1111:2222::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::1.2.3.4\"), \"IPV6 :1111::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::1.2.3.4\"), \"IPV6 :::1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333:4444::6666:1.2.3.4\"), \"IPV6 :1111:2222:3333:4444::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::6666:1.2.3.4\"), \"IPV6 :1111:2222:3333::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::6666:1.2.3.4\"), \"IPV6 :1111:2222::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::6666:1.2.3.4\"), \"IPV6 :1111::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::6666:1.2.3.4\"), \"IPV6 :::6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222:3333::5555:6666:1.2.3.4\"), \"IPV6 :1111:2222:3333::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::5555:6666:1.2.3.4\"), \"IPV6 :1111:2222::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::5555:6666:1.2.3.4\"), \"IPV6 :1111::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::5555:6666:1.2.3.4\"), \"IPV6 :::5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111:2222::4444:5555:6666:1.2.3.4\"), \"IPV6 :1111:2222::4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::4444:5555:6666:1.2.3.4\"), \"IPV6 :1111::4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::4444:5555:6666:1.2.3.4\"), \"IPV6 :::4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":1111::3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :1111::3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        assertFalse(validator.isValidInet6Address(\":::2222:3333:4444:5555:6666:1.2.3.4\"), \"IPV6 :::2222:3333:4444:5555:6666:1.2.3.4 should be invalid\");\n        // Extra : at end\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:7777:::\"), \"IPV6 1111:2222:3333:4444:5555:6666:7777::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666:::\"), \"IPV6 1111:2222:3333:4444:5555:6666::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:::\"), \"IPV6 1111:2222:3333:4444:5555::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:::\"), \"IPV6 1111:2222:3333:4444::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:::\"), \"IPV6 1111:2222:3333::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:::\"), \"IPV6 1111:2222::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:::\"), \"IPV6 1111::: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555:6666::8888:\"), \"IPV6 1111:2222:3333:4444:5555:6666::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::8888:\"), \"IPV6 1111:2222:3333:4444:5555::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::8888:\"), \"IPV6 1111:2222:3333:4444::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::8888:\"), \"IPV6 1111:2222:3333::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::8888:\"), \"IPV6 1111:2222::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::8888:\"), \"IPV6 1111::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::8888:\"), \"IPV6 ::8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444:5555::7777:8888:\"), \"IPV6 1111:2222:3333:4444:5555::7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::7777:8888:\"), \"IPV6 1111:2222:3333:4444::7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::7777:8888:\"), \"IPV6 1111:2222:3333::7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::7777:8888:\"), \"IPV6 1111:2222::7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::7777:8888:\"), \"IPV6 1111::7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::7777:8888:\"), \"IPV6 ::7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333:4444::6666:7777:8888:\"), \"IPV6 1111:2222:3333:4444::6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::6666:7777:8888:\"), \"IPV6 1111:2222:3333::6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::6666:7777:8888:\"), \"IPV6 1111:2222::6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::6666:7777:8888:\"), \"IPV6 1111::6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::6666:7777:8888:\"), \"IPV6 ::6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222:3333::5555:6666:7777:8888:\"), \"IPV6 1111:2222:3333::5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::5555:6666:7777:8888:\"), \"IPV6 1111:2222::5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::5555:6666:7777:8888:\"), \"IPV6 1111::5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::5555:6666:7777:8888:\"), \"IPV6 ::5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111:2222::4444:5555:6666:7777:8888:\"), \"IPV6 1111:2222::4444:5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::4444:5555:6666:7777:8888:\"), \"IPV6 1111::4444:5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::4444:5555:6666:7777:8888:\"), \"IPV6 ::4444:5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"1111::3333:4444:5555:6666:7777:8888:\"), \"IPV6 1111::3333:4444:5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::3333:4444:5555:6666:7777:8888:\"), \"IPV6 ::3333:4444:5555:6666:7777:8888: should be invalid\");\n        assertFalse(validator.isValidInet6Address(\"::2222:3333:4444:5555:6666:7777:8888:\"), \"IPV6 ::2222:3333:4444:5555:6666:7777:8888: should be invalid\");\n        assertTrue(validator.isValidInet6Address(\"0:a:b:c:d:e:f::\"), \"IPV6 0:a:b:c:d:e:f:: should be valid\");\n        assertTrue(validator.isValidInet6Address(\"::0:a:b:c:d:e:f\"), \"IPV6 ::0:a:b:c:d:e:f should be valid\"); // syntactically correct, but bad form (::0:...\n                                                                                                              // could be combined)\n        assertTrue(validator.isValidInet6Address(\"a:b:c:d:e:f:0::\"), \"IPV6 a:b:c:d:e:f:0:: should be valid\");\n        assertFalse(validator.isValidInet6Address(\"':10.0.0.1\"), \"IPV6 ':10.0.0.1 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest IPv6 addresses.\n<p>\nThese tests were ported from a <a href=\"https://download.dartware.com/thirdparty/test-ipv6-regex.pl\">Perl script</a>.\n</p>\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testReservedInetAddresses()", "name": "testReservedInetAddresses", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReservedInetAddresses()", "original_string": "    @Test\n    public void testReservedInetAddresses() {\n        assertTrue(validator.isValid(\"127.0.0.1\"), \"localhost IP should be valid\");\n        assertTrue(validator.isValid(\"255.255.255.255\"), \"broadcast IP should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest reserved IPs.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testValidator335()", "name": "testValidator335", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator335()", "original_string": "    @Test\n    public void testValidator335() {\n        assertTrue(validator.isValid(\"2001:0438:FFFE:0000:0000:0000:0000:0A35\"), \"2001:0438:FFFE:0000:0000:0000:0000:0A35 should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testValidator419()", "name": "testValidator419", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator419()", "original_string": "    @Test\n    public void testValidator419() {\n        String addr;\n        addr = \"0:0:0:0:0:0:13.1.68.3\";\n        assertTrue(validator.isValid(addr));\n        addr = \"0:0:0:0:0:FFFF:129.144.52.38\";\n        assertTrue(validator.isValid(addr), addr);\n        addr = \"::13.1.68.3\";\n        assertTrue(validator.isValid(addr), addr);\n        addr = \"::FFFF:129.144.52.38\";\n        assertTrue(validator.isValid(addr), addr);\n\n        addr = \"::ffff:192.168.1.1:192.168.1.1\";\n        assertFalse(validator.isValid(addr), addr);\n        addr = \"::192.168.1.1:192.168.1.1\";\n        assertFalse(validator.isValid(addr), addr);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]testValidator445()", "name": "testValidator445", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator445()", "original_string": "    @Test\n    public void testValidator445() {\n        final String[] valid = { \"2001:0000:1234:0000:0000:C1C0:ABCD:0876\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/123\",\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%0\", \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abcdefgh\", };\n        final String[] invalid = { \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/129\", // too big\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/-0\", // sign not allowed\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/+0\", // sign not allowed\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/10O\", // non-digit\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0%0\", // /bits before %node-id\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc defgh\", // space in node id\n                \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc%defgh\", // '%' in node id\n        };\n        for (final String item : valid) {\n            assertTrue(validator.isValid(item), () -> String.format(\"%s should be valid\", item));\n        }\n        for (final String item : invalid) {\n            assertFalse(validator.isValid(item), () -> String.format(\"%s should be invalid\", item));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nInet6Address may also contain a scope id.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testCompare()", "name": "testCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompare()", "original_string": "    @Test\n    public void testCompare() {\n        final int testTime = 154523;\n        final int min = 100;\n        final int hour = 10000;\n\n        final Calendar milliGreater = createTime(GMT, testTime, 500); // > milli sec\n        final Calendar value = createTime(GMT, testTime, 400); // test value\n        final Calendar milliLess = createTime(GMT, testTime, 300); // < milli sec\n\n        final Calendar secGreater = createTime(GMT, testTime + 1, 100); // +1 sec\n        final Calendar secLess = createTime(GMT, testTime - 1, 100); // -1 sec\n\n        final Calendar minGreater = createTime(GMT, testTime + min, 100); // +1 min\n        final Calendar minLess = createTime(GMT, testTime - min, 100); // -1 min\n\n        final Calendar hourGreater = createTime(GMT, testTime + hour, 100); // +1 hour\n        final Calendar hourLess = createTime(GMT, testTime - hour, 100); // -1 hour\n\n        assertEquals(-1, validator.compareTime(value, milliGreater), \"mili LT\"); // > milli\n        assertEquals(0, validator.compareTime(value, value), \"mili EQ\"); // same time\n        assertEquals(1, validator.compareTime(value, milliLess), \"mili GT\"); // < milli\n\n        assertEquals(-1, validator.compareSeconds(value, secGreater), \"secs LT\"); // +1 sec\n        assertEquals(0, validator.compareSeconds(value, milliGreater), \"secs =1\"); // > milli\n        assertEquals(0, validator.compareSeconds(value, value), \"secs =2\"); // same time\n        assertEquals(0, validator.compareSeconds(value, milliLess), \"secs =3\"); // < milli\n        assertEquals(1, validator.compareSeconds(value, secLess), \"secs GT\"); // -1 sec\n\n        assertEquals(-1, validator.compareMinutes(value, minGreater), \"mins LT\"); // +1 min\n        assertEquals(0, validator.compareMinutes(value, secGreater), \"mins =1\"); // +1 sec\n        assertEquals(0, validator.compareMinutes(value, value), \"mins =2\"); // same time\n        assertEquals(0, validator.compareMinutes(value, secLess), \"mins =3\"); // -1 sec\n        assertEquals(1, validator.compareMinutes(value, minLess), \"mins GT\"); // -1 min\n\n        assertEquals(-1, validator.compareHours(value, hourGreater), \"hour LT\"); // +1 hour\n        assertEquals(0, validator.compareHours(value, minGreater), \"hour =1\"); // +1 min\n        assertEquals(0, validator.compareHours(value, value), \"hour =2\"); // same time\n        assertEquals(0, validator.compareHours(value, minLess), \"hour =3\"); // -1 min\n        assertEquals(1, validator.compareHours(value, hourLess), \"hour GT\"); // -1 hour\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest compare date methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testFormat()", "name": "testFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormat()", "original_string": "    @Test\n    public void testFormat() {\n        // Set the default Locale\n        Locale.setDefault(Locale.UK);\n\n        final Object test = TimeValidator.getInstance().validate(\"16:49:23\", \"HH:mm:ss\");\n        assertNotNull(test, \"Test Date \");\n        assertEquals(\"16-49-23\", validator.format(test, \"HH-mm-ss\"), \"Format pattern\");\n        assertEquals(\"4:49 PM\", validator.format(test, Locale.US), \"Format locale\");\n        assertEquals(\"16:49\", validator.format(test), \"Format default\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid Dates with \"locale\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testLocaleInvalid()", "name": "testLocaleInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleInvalid()", "original_string": "    @Test\n    public void testLocaleInvalid() {\n        for (int i = 0; i < localeInvalid.length; i++) {\n            final String text = i + \" value=[\" + localeInvalid[i] + \"] passed \";\n            final Object date = validator.validate(localeInvalid[i], Locale.US);\n            assertNull(date, () -> \"validate() \" + text + date);\n            assertFalse(validator.isValid(localeInvalid[i], Locale.UK), () -> \"isValid() \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid Dates with \"locale\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testLocaleValid()", "name": "testLocaleValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleValid()", "original_string": "    @Test\n    public void testLocaleValid() {\n        for (int i = 0; i < localeValid.length; i++) {\n            final String text = i + \" value=[\" + localeValid[i] + \"] failed \";\n            final Calendar calendar = validator.validate(localeValid[i], Locale.UK);\n            assertNotNull(calendar, () -> \"validate() \" + text);\n            final Date date = calendar.getTime();\n            assertTrue(validator.isValid(localeValid[i], Locale.UK), () -> \"isValid() \" + text);\n            assertEquals(localeExpect[i], date, () -> \"compare \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid Dates with \"locale\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testPatternInvalid()", "name": "testPatternInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPatternInvalid()", "original_string": "    @Test\n    public void testPatternInvalid() {\n        for (int i = 0; i < patternInvalid.length; i++) {\n            final String text = i + \" value=[\" + patternInvalid[i] + \"] passed \";\n            final Object date = validator.validate(patternInvalid[i], \"HH-mm-ss\");\n            assertNull(date, () -> \"validate() \" + text + date);\n            assertFalse(validator.isValid(patternInvalid[i], \"HH-mm-ss\"), () -> \"isValid() \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid Dates with \"pattern\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testPatternValid()", "name": "testPatternValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPatternValid()", "original_string": "    @Test\n    public void testPatternValid() {\n        for (int i = 0; i < patternValid.length; i++) {\n            final String text = i + \" value=[\" + patternValid[i] + \"] failed \";\n            final Calendar calendar = validator.validate(patternValid[i], \"HH-mm-ss\");\n            assertNotNull(calendar, () -> \"validateObj() \" + text);\n            final Date date = calendar.getTime();\n            assertTrue(validator.isValid(patternValid[i], \"HH-mm-ss\"), () -> \"isValid() \" + text);\n            assertEquals(patternExpect[i], date, () -> \"compare \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid Dates with \"pattern\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]testTimeZone()", "name": "testTimeZone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTimeZone()", "original_string": "    @Test\n    public void testTimeZone() {\n        // Set the default Locale & TimeZone\n        Locale.setDefault(Locale.UK);\n        TimeZone.setDefault(GMT);\n\n        Calendar result;\n\n        // Default Locale, Default TimeZone\n        result = validator.validate(\"18:01\");\n        assertNotNull(result, \"default result\");\n        assertEquals(GMT, result.getTimeZone(), \"default zone\");\n        assertEquals(18, result.get(Calendar.HOUR_OF_DAY), \"default hour\");\n        assertEquals(01, result.get(Calendar.MINUTE), \"default minute\");\n        result = null;\n\n        // Default Locale, diff TimeZone\n        result = validator.validate(\"16:49\", EST);\n        assertNotNull(result, \"zone result\");\n        assertEquals(EST, result.getTimeZone(), \"zone zone\");\n        assertEquals(16, result.get(Calendar.HOUR_OF_DAY), \"zone hour\");\n        assertEquals(49, result.get(Calendar.MINUTE), \"zone minute\");\n        result = null;\n\n        // Pattern, diff TimeZone\n        result = validator.validate(\"14-34\", \"HH-mm\", EST);\n        assertNotNull(result, \"pattern result\");\n        assertEquals(EST, result.getTimeZone(), \"pattern zone\");\n        assertEquals(14, result.get(Calendar.HOUR_OF_DAY), \"pattern hour\");\n        assertEquals(34, result.get(Calendar.MINUTE), \"pattern minute\");\n        result = null;\n\n        // Locale, diff TimeZone\n        result = validator.validate(\"7:18 PM\", Locale.US, EST);\n        assertNotNull(result, \"locale result\");\n        assertEquals(EST, result.getTimeZone(), \"locale zone\");\n        assertEquals(19, result.get(Calendar.HOUR_OF_DAY), \"locale hour\");\n        assertEquals(18, result.get(Calendar.MINUTE), \"locale minute\");\n        result = null;\n\n        // Locale & Pattern, diff TimeZone\n        result = validator.validate(\"31/Dez/05 21-05\", \"dd/MMM/yy HH-mm\", Locale.GERMAN, EST);\n        assertNotNull(result, \"pattern result\");\n        assertEquals(EST, result.getTimeZone(), \"pattern zone\");\n        assertEquals(2005, result.get(Calendar.YEAR), \"pattern day\");\n        assertEquals(11, result.get(Calendar.MONTH), \"pattern day\"); // months are 0-11\n        assertEquals(31, result.get(Calendar.DATE), \"pattern day\");\n        assertEquals(21, result.get(Calendar.HOUR_OF_DAY), \"pattern hour\");\n        assertEquals(05, result.get(Calendar.MINUTE), \"pattern minute\");\n        result = null;\n\n        // Locale & Pattern, default TimeZone\n        result = validator.validate(\"31/Dez/05 21-05\", \"dd/MMM/yy HH-mm\", Locale.GERMAN);\n        assertNotNull(result, \"pattern result\");\n        assertEquals(GMT, result.getTimeZone(), \"pattern zone\");\n        assertEquals(2005, result.get(Calendar.YEAR), \"pattern day\");\n        assertEquals(11, result.get(Calendar.MONTH), \"pattern day\"); // months are 0-11\n        assertEquals(31, result.get(Calendar.DATE), \"pattern day\");\n        assertEquals(21, result.get(Calendar.HOUR_OF_DAY), \"pattern hour\");\n        assertEquals(05, result.get(Calendar.MINUTE), \"pattern minute\");\n        result = null;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest time zone methods.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java.BigIntegerValidatorTest.[void]testBigIntegerRangeMinMax()", "name": "testBigIntegerRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBigIntegerRangeMinMax()", "original_string": "    @Test\n    public void testBigIntegerRangeMinMax() {\n        final BigIntegerValidator validator = (BigIntegerValidator) strictValidator;\n        final BigInteger number9 = validator.validate(\"9\", \"#\");\n        final BigInteger number10 = validator.validate(\"10\", \"#\");\n        final BigInteger number11 = validator.validate(\"11\", \"#\");\n        final BigInteger number19 = validator.validate(\"19\", \"#\");\n        final BigInteger number20 = validator.validate(\"20\", \"#\");\n        final BigInteger number21 = validator.validate(\"21\", \"#\");\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java", "class_name": "BigIntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java.BigIntegerValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest BigInteger Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java.BigIntegerValidatorTest.[void]testBigIntegerValidatorMethods()", "name": "testBigIntegerValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBigIntegerValidatorMethods()", "original_string": "    @Test\n    public void testBigIntegerValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String germanPatternVal = \"1.23.45\";\n        final String localeVal = \"12.345\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final BigInteger expected = new BigInteger(\"12345\");\n        assertEquals(expected, BigIntegerValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, BigIntegerValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\n        assertEquals(expected, BigIntegerValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, BigIntegerValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(BigIntegerValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(BigIntegerValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\n        assertTrue(BigIntegerValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(BigIntegerValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(BigIntegerValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(BigIntegerValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\n        assertNull(BigIntegerValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(BigIntegerValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(BigIntegerValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(BigIntegerValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\n        assertFalse(BigIntegerValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(BigIntegerValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java", "class_name": "BigIntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java.BigIntegerValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest BigIntegerValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java.DateValidator_compareYearsTest.[void]testCompareYearsEqual()", "name": "testCompareYearsEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareYearsEqual()", "original_string": "    @Test\n    public void testCompareYearsEqual() {\n        Date date1 = createDate(2023, 10, 1);\n        Date date2 = createDate(2023, 5, 15);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        int result = dateValidator.compareYears(date1, date2, timeZone);\n        assertEquals(0, result, \"Years should be equal\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java", "class_name": "DateValidator_compareYearsTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java.DateValidator_compareYearsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java.DateValidator_compareYearsTest.[void]testCompareYearsLessThan()", "name": "testCompareYearsLessThan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareYearsLessThan()", "original_string": "    @Test\n    public void testCompareYearsLessThan() {\n        Date date1 = createDate(2022, 10, 1);\n        Date date2 = createDate(2023, 5, 15);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        int result = dateValidator.compareYears(date1, date2, timeZone);\n        assertEquals(-1, result, \"First year should be less than second year\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java", "class_name": "DateValidator_compareYearsTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java.DateValidator_compareYearsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java.DateValidator_compareYearsTest.[void]testCompareYearsGreaterThan()", "name": "testCompareYearsGreaterThan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareYearsGreaterThan()", "original_string": "    @Test\n    public void testCompareYearsGreaterThan() {\n        Date date1 = createDate(2024, 10, 1);\n        Date date2 = createDate(2023, 5, 15);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        int result = dateValidator.compareYears(date1, date2, timeZone);\n        assertEquals(1, result, \"First year should be greater than second year\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java", "class_name": "DateValidator_compareYearsTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java.DateValidator_compareYearsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java.BigDecimalValidatorTest.[void]testBigDecimalRangeMinMax()", "name": "testBigDecimalRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBigDecimalRangeMinMax()", "original_string": "    @Test\n    public void testBigDecimalRangeMinMax() {\n        final BigDecimalValidator validator = new BigDecimalValidator(true, AbstractNumberValidator.STANDARD_FORMAT, true);\n        final BigDecimal number9 = new BigDecimal(\"9\");\n        final BigDecimal number10 = new BigDecimal(\"10\");\n        final BigDecimal number11 = new BigDecimal(\"11\");\n        final BigDecimal number19 = new BigDecimal(\"19\");\n        final BigDecimal number20 = new BigDecimal(\"20\");\n        final BigDecimal number21 = new BigDecimal(\"21\");\n\n        final float min = 10;\n        final float max = 20;\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, min, max), \"isInRange(A) < min\");\n        assertTrue(validator.isInRange(number10, min, max), \"isInRange(A) = min\");\n        assertTrue(validator.isInRange(number11, min, max), \"isInRange(A) in range\");\n        assertTrue(validator.isInRange(number20, min, max), \"isInRange(A) = max\");\n        assertFalse(validator.isInRange(number21, min, max), \"isInRange(A) > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, min), \"minValue(A) < min\");\n        assertTrue(validator.minValue(number10, min), \"minValue(A) = min\");\n        assertTrue(validator.minValue(number11, min), \"minValue(A) > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, max), \"maxValue(A) < max\");\n        assertTrue(validator.maxValue(number20, max), \"maxValue(A) = max\");\n        assertFalse(validator.maxValue(number21, max), \"maxValue(A) > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java", "class_name": "BigDecimalValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java.BigDecimalValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest BigDecimal Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java.BigDecimalValidatorTest.[void]testBigDecimalValidatorMethods()", "name": "testBigDecimalValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBigDecimalValidatorMethods()", "original_string": "    @Test\n    public void testBigDecimalValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String germanPatternVal = \"1.23.45\";\n        final String localeVal = \"12.345\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final BigDecimal expected = new BigDecimal(12345);\n        assertEquals(expected, BigDecimalValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, BigDecimalValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\n        assertEquals(expected, BigDecimalValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, BigDecimalValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(BigDecimalValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(BigDecimalValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\n        assertTrue(BigDecimalValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(BigDecimalValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(BigDecimalValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(BigDecimalValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\n        assertNull(BigDecimalValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(BigDecimalValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(BigDecimalValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(BigDecimalValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\n        assertFalse(BigDecimalValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(BigDecimalValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java", "class_name": "BigDecimalValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java.BigDecimalValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest BigDecimalValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java.CalendarValidator_compareQuartersTest.[void]testCompareQuarters()", "name": "testCompareQuarters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareQuarters()", "original_string": "    @Test\n    public void testCompareQuarters() {\n        // Given\n        Calendar cal1 = Calendar.getInstance();\n        cal1.set(2023, Calendar.JANUARY, 15); // Q1 2023\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(2023, Calendar.APRIL, 15); // Q2 2023\n\n        // When\n        int result = calValidator.compareQuarters(cal1, cal2, 1);\n\n        // Then\n        assertEquals(-1, result, \"Q1 2023 should be less than Q2 2023\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java", "class_name": "CalendarValidator_compareQuartersTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java.CalendarValidator_compareQuartersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java.CalendarValidator_compareQuartersTest.[void]testCompareQuartersSameQuarter()", "name": "testCompareQuartersSameQuarter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareQuartersSameQuarter()", "original_string": "    @Test\n    public void testCompareQuartersSameQuarter() {\n        // Given\n        Calendar cal1 = Calendar.getInstance();\n        cal1.set(2023, Calendar.JANUARY, 15); // Q1 2023\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(2023, Calendar.FEBRUARY, 15); // Q1 2023\n\n        // When\n        int result = calValidator.compareQuarters(cal1, cal2, 1);\n\n        // Then\n        assertEquals(0, result, \"Q1 2023 should be equal to Q1 2023\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java", "class_name": "CalendarValidator_compareQuartersTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java.CalendarValidator_compareQuartersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java.CalendarValidator_compareQuartersTest.[void]testCompareQuartersDifferentYears()", "name": "testCompareQuartersDifferentYears", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareQuartersDifferentYears()", "original_string": "    @Test\n    public void testCompareQuartersDifferentYears() {\n        // Given\n        Calendar cal1 = Calendar.getInstance();\n        cal1.set(2022, Calendar.DECEMBER, 15); // Q4 2022\n        Calendar cal2 = Calendar.getInstance();\n        cal2.set(2023, Calendar.JANUARY, 15); // Q1 2023\n\n        // When\n        int result = calValidator.compareQuarters(cal1, cal2, 1);\n\n        // Then\n        assertEquals(-1, result, \"Q4 2022 should be less than Q1 2023\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java", "class_name": "CalendarValidator_compareQuartersTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java.CalendarValidator_compareQuartersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testFragments()", "name": "testFragments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFragments()", "original_string": "    @Test\n    public void testFragments() {\n        final String[] schemes = { \"http\", \"https\" };\n        UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\n        assertFalse(urlValidator.isValid(\"http://apache.org/a/b/c#frag\"));\n        urlValidator = new UrlValidator(schemes);\n        assertTrue(urlValidator.isValid(\"http://apache.org/a/b/c#frag\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testIsValid()", "name": "testIsValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid()", "original_string": "    @Test\n    public void testIsValid() {\n        testIsValid(testUrlParts, UrlValidator.ALLOW_ALL_SCHEMES);\n        setUp();\n        final long options = UrlValidator.ALLOW_2_SLASHES + UrlValidator.ALLOW_ALL_SCHEMES + UrlValidator.NO_FRAGMENTS;\n\n        testIsValid(testUrlPartsOptions, options);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testIsValidScheme()", "name": "testIsValidScheme", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidScheme()", "original_string": "    @Test\n    public void testIsValidScheme() {\n        if (printStatus) {\n            System.out.print(\"\\n testIsValidScheme() \");\n        }\n        // UrlValidator urlVal = new UrlValidator(schemes,false,false,false);\n        final UrlValidator urlVal = new UrlValidator(schemes, 0);\n        for (final ResultPair testPair : testScheme) {\n            final boolean result = urlVal.isValidScheme(testPair.item);\n            assertEquals(testPair.valid, result, testPair.item);\n            if (printStatus) {\n                if (result == testPair.valid) {\n                    System.out.print('.');\n                } else {\n                    System.out.print('X');\n                }\n            }\n        }\n        if (printStatus) {\n            System.out.println();\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidateUrl()", "name": "testValidateUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateUrl()", "original_string": "    @Test\n    public void testValidateUrl() {\n        assertTrue(true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator202()", "name": "testValidator202", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator202()", "original_string": "    @Test\n    public void testValidator202() {\n        final String[] schemes = { \"http\", \"https\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes, UrlValidator.NO_FRAGMENTS);\n        assertTrue(urlValidator\n                .isValid(\"http://l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.l.org\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator204()", "name": "testValidator204", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator204()", "original_string": "    @Test\n    public void testValidator204() {\n        final String[] schemes = { \"http\", \"https\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes);\n        assertTrue(urlValidator.isValid(\"http://tech.yahoo.com/rc/desktops/102;_ylt=Ao8yevQHlZ4On0O3ZJGXLEQFLZA5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator218()", "name": "testValidator218", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator218()", "original_string": "    @Test\n    public void testValidator218() {\n        final UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\n        assertTrue(validator.isValid(\"http://somewhere.com/pathxyz/file(1).html\"), \"parentheses should be valid in URLs\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator235()", "name": "testValidator235", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator235()", "original_string": "    @Test\n    public void testValidator235() {\n        final String version = SystemProperties.getJavaVersion();\n        if (version.compareTo(\"1.6\") < 0) {\n            System.out.println(\"Cannot run Unicode IDN tests\");\n            return; // Cannot run the test\n        }\n        final UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(\"http://xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\n        assertTrue(validator.isValid(\"http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\"), \"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate\");\n        assertTrue(validator.isValid(\"http://www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\n        assertFalse(validator.isValid(\"http://www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\n        assertTrue(validator.isValid(\"ftp://www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\n        assertFalse(validator.isValid(\"ftp://www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator248()", "name": "testValidator248", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator248()", "original_string": "    @Test\n    public void testValidator248() {\n        final RegexValidator regex = new RegexValidator(\"localhost\", \".*\\\\.my-testing\");\n        UrlValidator validator = new UrlValidator(regex, 0);\n\n        assertTrue(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should validate\");\n        assertTrue(validator.isValid(\"http://first.my-testing/test/index.html\"), \"first.my-testing should validate\");\n        assertTrue(validator.isValid(\"http://sup3r.my-testing/test/index.html\"), \"sup3r.my-testing should validate\");\n\n        assertFalse(validator.isValid(\"http://broke.my-test/test/index.html\"), \"broke.my-test should not validate\");\n\n        assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\n\n        // Now check using options\n        validator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS);\n\n        assertTrue(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should validate\");\n\n        assertTrue(validator.isValid(\"http://machinename/test/index.html\"), \"machinename URL should validate\");\n\n        assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator276()", "name": "testValidator276", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator276()", "original_string": "    @Test\n    public void testValidator276() {\n        // file:// isn't allowed by default\n        UrlValidator validator = new UrlValidator();\n\n        assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"http://apache.org/ should be allowed by default\");\n\n        assertFalse(validator.isValid(\"file:///C:/some.file\"), \"file:///c:/ shouldn't be allowed by default\");\n\n        assertFalse(validator.isValid(\"file:///C:\\\\some.file\"), \"file:///c:\\\\ shouldn't be allowed by default\");\n\n        assertFalse(validator.isValid(\"file:///etc/hosts\"), \"file:///etc/ shouldn't be allowed by default\");\n\n        assertFalse(validator.isValid(\"file://localhost/etc/hosts\"), \"file://localhost/etc/ shouldn't be allowed by default\");\n\n        assertFalse(validator.isValid(\"file://localhost/c:/some.file\"), \"file://localhost/c:/ shouldn't be allowed by default\");\n\n        // Turn it on, and check\n        // Note - we need to enable local urls when working with file:\n        validator = new UrlValidator(new String[] { \"http\", \"file\" }, UrlValidator.ALLOW_LOCAL_URLS);\n\n        assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"http://apache.org/ should be allowed by default\");\n\n        assertTrue(validator.isValid(\"file:///C:/some.file\"), \"file:///c:/ should now be allowed\");\n\n        // Only allow forward slashes\n        assertFalse(validator.isValid(\"file:///C:\\\\some.file\"), \"file:///c:\\\\ should not be allowed\");\n\n        assertTrue(validator.isValid(\"file:///etc/hosts\"), \"file:///etc/ should now be allowed\");\n\n        assertTrue(validator.isValid(\"file://localhost/etc/hosts\"), \"file://localhost/etc/ should now be allowed\");\n\n        assertTrue(validator.isValid(\"file://localhost/c:/some.file\"), \"file://localhost/c:/ should now be allowed\");\n\n        // These are never valid\n        assertFalse(validator.isValid(\"file://C:/some.file\"), \"file://c:/ shouldn't ever be allowed, needs file:///c:/\");\n\n        assertFalse(validator.isValid(\"file://C:\\\\some.file\"), \"file://c:\\\\ shouldn't ever be allowed, needs file:///c:/\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator283()", "name": "testValidator283", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator283()", "original_string": "    @Test\n    public void testValidator283() {\n        final UrlValidator validator = new UrlValidator();\n        assertFalse(validator.isValid(\"http://finance.yahoo.com/news/Owners-54B-NY-housing-apf-2493139299.html?x=0&ap=%fr\"));\n        assertTrue(validator.isValid(\"http://finance.yahoo.com/news/Owners-54B-NY-housing-apf-2493139299.html?x=0&ap=%22\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator288()", "name": "testValidator288", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator288()", "original_string": "    @Test\n    public void testValidator288() {\n        UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_LOCAL_URLS);\n\n        assertTrue(validator.isValid(\"http://hostname\"), \"hostname should validate\");\n\n        assertTrue(validator.isValid(\"http://hostname/test/index.html\"), \"hostname with path should validate\");\n\n        assertTrue(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should validate\");\n\n        assertFalse(validator.isValid(\"http://first.my-testing/test/index.html\"), \"first.my-testing should not validate\");\n\n        assertFalse(validator.isValid(\"http://broke.hostname/test/index.html\"), \"broke.hostname should not validate\");\n\n        assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\n\n        // Turn it off, and check\n        validator = new UrlValidator(0);\n\n        assertFalse(validator.isValid(\"http://hostname\"), \"hostname should no longer validate\");\n\n        assertFalse(validator.isValid(\"http://localhost/test/index.html\"), \"localhost URL should no longer validate\");\n\n        assertTrue(validator.isValid(\"http://www.apache.org/test/index.html\"), \"www.apache.org should still validate\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator290()", "name": "testValidator290", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator290()", "original_string": "    @Test\n    public void testValidator290() {\n        final UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(\"http://xn--h1acbxfam.idn.icann.org/\"));\n//        assertTrue(validator.isValid(\"http://xn--e1afmkfd.xn--80akhbyknj4f\"));\n        // Internationalized country code top-level domains\n        assertTrue(validator.isValid(\"http://test.xn--lgbbat1ad8j\")); // Algeria\n        assertTrue(validator.isValid(\"http://test.xn--fiqs8s\")); // China\n        assertTrue(validator.isValid(\"http://test.xn--fiqz9s\")); // China\n        assertTrue(validator.isValid(\"http://test.xn--wgbh1c\")); // Egypt\n        assertTrue(validator.isValid(\"http://test.xn--j6w193g\")); // Hong Kong\n        assertTrue(validator.isValid(\"http://test.xn--h2brj9c\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--mgbbh1a71e\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--fpcrj9c3d\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--gecrj9c\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--s9brj9c\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--xkc2dl3a5ee0h\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--45brj9c\")); // India\n        assertTrue(validator.isValid(\"http://test.xn--mgba3a4f16a\")); // Iran\n        assertTrue(validator.isValid(\"http://test.xn--mgbayh7gpa\")); // Jordan\n        assertTrue(validator.isValid(\"http://test.xn--mgbc0a9azcg\")); // Morocco\n        assertTrue(validator.isValid(\"http://test.xn--ygbi2ammx\")); // Palestinian Territory\n        assertTrue(validator.isValid(\"http://test.xn--wgbl6a\")); // Qatar\n        assertTrue(validator.isValid(\"http://test.xn--p1ai\")); // Russia\n        assertTrue(validator.isValid(\"http://test.xn--mgberp4a5d4ar\")); // Saudi Arabia\n        assertTrue(validator.isValid(\"http://test.xn--90a3ac\")); // Serbia\n        assertTrue(validator.isValid(\"http://test.xn--yfro4i67o\")); // Singapore\n        assertTrue(validator.isValid(\"http://test.xn--clchc0ea0b2g2a9gcd\")); // Singapore\n        assertTrue(validator.isValid(\"http://test.xn--3e0b707e\")); // South Korea\n        assertTrue(validator.isValid(\"http://test.xn--fzc2c9e2c\")); // Sri Lanka\n        assertTrue(validator.isValid(\"http://test.xn--xkc2al3hye2a\")); // Sri Lanka\n        assertTrue(validator.isValid(\"http://test.xn--ogbpf8fl\")); // Syria\n        assertTrue(validator.isValid(\"http://test.xn--kprw13d\")); // Taiwan\n        assertTrue(validator.isValid(\"http://test.xn--kpry57d\")); // Taiwan\n        assertTrue(validator.isValid(\"http://test.xn--o3cw4h\")); // Thailand\n        assertTrue(validator.isValid(\"http://test.xn--pgbs0dh\")); // Tunisia\n        assertTrue(validator.isValid(\"http://test.xn--mgbaam7a8h\")); // United Arab Emirates\n        // Proposed internationalized ccTLDs\n//        assertTrue(validator.isValid(\"http://test.xn--54b7fta0cc\")); // Bangladesh\n//        assertTrue(validator.isValid(\"http://test.xn--90ae\")); // Bulgaria\n//        assertTrue(validator.isValid(\"http://test.xn--node\")); // Georgia\n//        assertTrue(validator.isValid(\"http://test.xn--4dbrk0ce\")); // Israel\n//        assertTrue(validator.isValid(\"http://test.xn--mgb9awbf\")); // Oman\n//        assertTrue(validator.isValid(\"http://test.xn--j1amh\")); // Ukraine\n//        assertTrue(validator.isValid(\"http://test.xn--mgb2ddes\")); // Yemen\n        // Test TLDs\n//        assertTrue(validator.isValid(\"http://test.xn--kgbechtv\")); // Arabic\n//        assertTrue(validator.isValid(\"http://test.xn--hgbk6aj7f53bba\")); // Persian\n//        assertTrue(validator.isValid(\"http://test.xn--0zwm56d\")); // Chinese\n//        assertTrue(validator.isValid(\"http://test.xn--g6w251d\")); // Chinese\n//        assertTrue(validator.isValid(\"http://test.xn--80akhbyknj4f\")); // Russian\n//        assertTrue(validator.isValid(\"http://test.xn--11b5bs3a9aj6g\")); // Hindi\n//        assertTrue(validator.isValid(\"http://test.xn--jxalpdlp\")); // Greek\n//        assertTrue(validator.isValid(\"http://test.xn--9t4b11yi5a\")); // Korean\n//        assertTrue(validator.isValid(\"http://test.xn--deba0ad\")); // Yiddish\n//        assertTrue(validator.isValid(\"http://test.xn--zckzah\")); // Japanese\n//        assertTrue(validator.isValid(\"http://test.xn--hlcj6aya9esc7a\")); // Tamil\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator309()", "name": "testValidator309", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator309()", "original_string": "    @Test\n    public void testValidator309() {\n        UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://sample.ondemand.com/\"));\n        assertTrue(urlValidator.isValid(\"hTtP://sample.ondemand.CoM/\"));\n        assertTrue(urlValidator.isValid(\"httpS://SAMPLE.ONEMAND.COM/\"));\n        urlValidator = new UrlValidator(new String[] { \"HTTP\", \"HTTPS\" });\n        assertTrue(urlValidator.isValid(\"http://sample.ondemand.com/\"));\n        assertTrue(urlValidator.isValid(\"hTtP://sample.ondemand.CoM/\"));\n        assertTrue(urlValidator.isValid(\"httpS://SAMPLE.ONEMAND.COM/\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator339()", "name": "testValidator339", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator339()", "original_string": "    @Test\n    public void testValidator339() {\n        final UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://www.cnn.com/WORLD/?hpt=sitenav\")); // without\n        assertTrue(urlValidator.isValid(\"http://www.cnn.com./WORLD/?hpt=sitenav\")); // with\n        assertFalse(urlValidator.isValid(\"http://www.cnn.com../\")); // doubly dotty\n        assertFalse(urlValidator.isValid(\"http://www.cnn.invalid/\"));\n        assertFalse(urlValidator.isValid(\"http://www.cnn.invalid./\")); // check . does not affect invalid domains\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator339IDN()", "name": "testValidator339IDN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator339IDN()", "original_string": "    @Test\n    public void testValidator339IDN() {\n        final UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444/WORLD/?hpt=sitenav\")); // without\n        assertTrue(urlValidator.isValid(\"http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444./WORLD/?hpt=sitenav\")); // with\n        assertFalse(urlValidator.isValid(\"http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444..../\")); // very dotty\n        assertFalse(urlValidator.isValid(\"http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444.../\")); // triply dotty\n        assertFalse(urlValidator.isValid(\"http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444../\")); // doubly dotty\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator342()", "name": "testValidator342", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator342()", "original_string": "    @Test\n    public void testValidator342() {\n        final UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://example.rocks/\"));\n        assertTrue(urlValidator.isValid(\"http://example.rocks\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator353()", "name": "testValidator353", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator353()", "original_string": "    @Test\n    public void testValidator353() { // userinfo\n        final UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(\"http://www.apache.org:80/path\"));\n        assertTrue(validator.isValid(\"http://user:pass@www.apache.org:80/path\"));\n        assertTrue(validator.isValid(\"http://user:@www.apache.org:80/path\"));\n        assertTrue(validator.isValid(\"http://user@www.apache.org:80/path\"));\n        assertTrue(validator.isValid(\"http://us%00er:-._~!$&'()*+,;=@www.apache.org:80/path\"));\n        assertFalse(validator.isValid(\"http://:pass@www.apache.org:80/path\"));\n        assertFalse(validator.isValid(\"http://:@www.apache.org:80/path\"));\n        assertFalse(validator.isValid(\"http://user:pa:ss@www.apache.org/path\"));\n        assertFalse(validator.isValid(\"http://user:pa@ss@www.apache.org/path\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator361()", "name": "testValidator361", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator361()", "original_string": "    @Test\n    public void testValidator361() {\n        final UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(\"http://hello.tokyo/\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator363()", "name": "testValidator363", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator363()", "original_string": "    @Test\n    public void testValidator363() {\n        final UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://www.example.org/a/b/hello..world\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/a/hello..world\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/hello.world/\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/hello..world/\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/hello.world\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/hello..world\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/..world\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/.../world\"));\n        assertFalse(urlValidator.isValid(\"http://www.example.org/../world\"));\n        assertFalse(urlValidator.isValid(\"http://www.example.org/..\"));\n        assertFalse(urlValidator.isValid(\"http://www.example.org/../\"));\n        assertFalse(urlValidator.isValid(\"http://www.example.org/./..\"));\n        assertFalse(urlValidator.isValid(\"http://www.example.org/././..\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/...\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/.../\"));\n        assertTrue(urlValidator.isValid(\"http://www.example.org/.../..\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator375()", "name": "testValidator375", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator375()", "original_string": "    @Test\n    public void testValidator375() {\n        final UrlValidator validator = new UrlValidator();\n        String url = \"http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html\";\n        assertTrue(validator.isValid(url), \"IPv6 address URL should validate: \" + url);\n        url = \"http://[::1]:80/index.html\";\n        assertTrue(validator.isValid(url), \"IPv6 address URL should validate: \" + url);\n        url = \"http://FEDC:BA98:7654:3210:FEDC:BA98:7654:3210:80/index.html\";\n        assertFalse(validator.isValid(url), \"IPv6 address without [] should not validate: \" + url);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator380()", "name": "testValidator380", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator380()", "original_string": "    @Test\n    public void testValidator380() {\n        final UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(\"http://www.apache.org:80/path\"));\n        assertTrue(validator.isValid(\"http://www.apache.org:8/path\"));\n        assertTrue(validator.isValid(\"http://www.apache.org:/path\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator382()", "name": "testValidator382", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator382()", "original_string": "    @Test\n    public void testValidator382() {\n        final UrlValidator validator = new UrlValidator();\n        assertTrue(validator.isValid(\"ftp://username:password@example.com:8042/over/there/index.dtb?type=animal&name=narwhal#nose\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator391FAILS()", "name": "testValidator391FAILS", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator391FAILS()", "original_string": "    @Test\n    public void testValidator391FAILS() {\n        final String[] schemes = { \"file\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes);\n        assertTrue(urlValidator.isValid(\"file:/C:/path/to/dir/\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator391OK()", "name": "testValidator391OK", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator391OK()", "original_string": "    @Test\n    public void testValidator391OK() {\n        final String[] schemes = { \"file\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes);\n        assertTrue(urlValidator.isValid(\"file:///C:/path/to/dir/\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator411()", "name": "testValidator411", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator411()", "original_string": "    @Test\n    public void testValidator411() {\n        final UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://example.rocks:/\"));\n        assertTrue(urlValidator.isValid(\"http://example.rocks:0/\"));\n        assertTrue(urlValidator.isValid(\"http://example.rocks:65535/\"));\n        assertFalse(urlValidator.isValid(\"http://example.rocks:65536/\"));\n        assertFalse(urlValidator.isValid(\"http://example.rocks:100000/\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator420()", "name": "testValidator420", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator420()", "original_string": "    @Test\n    public void testValidator420() {\n        final UrlValidator validator = new UrlValidator();\n        assertFalse(validator.isValid(\"http://example.com/serach?address=Main Avenue\"));\n        assertTrue(validator.isValid(\"http://example.com/serach?address=Main%20Avenue\"));\n        assertTrue(validator.isValid(\"http://example.com/serach?address=Main+Avenue\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator452()", "name": "testValidator452", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator452()", "original_string": "    @Test\n    public void testValidator452() {\n        final UrlValidator urlValidator = new UrlValidator();\n        assertTrue(urlValidator.isValid(\"http://[::FFFF:129.144.52.38]:80/index.html\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator464()", "name": "testValidator464", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator464()", "original_string": "    @Test\n    public void testValidator464() {\n        final String[] schemes = { \"file\" };\n        final UrlValidator urlValidator = new UrlValidator(schemes);\n        final String fileNAK = \"file://bad ^ domain.com/label/test\";\n        assertFalse(urlValidator.isValid(fileNAK), fileNAK);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator467()", "name": "testValidator467", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator467()", "original_string": "    @Test\n    public void testValidator467() {\n        final UrlValidator validator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\n        assertTrue(validator.isValid(\"https://example.com/some_path/path/\"));\n        assertTrue(validator.isValid(\"https://example.com//somepath/path/\"));\n        assertTrue(validator.isValid(\"https://example.com//some_path/path/\"));\n        assertTrue(validator.isValid(\"http://example.com//_test\")); // VALIDATOR-429\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator473Part1()", "name": "testValidator473Part1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part1()", "original_string": "    @Test\n    public void testValidator473Part1() { // reject null DomainValidator\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new UrlValidator(new String[] {}, null, 0L, null));\n        assertEquals(\"DomainValidator must not be null\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator473Part2()", "name": "testValidator473Part2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part2()", "original_string": "    @Test\n    public void testValidator473Part2() { // reject null DomainValidator with mismatched allowLocal\n        final List<DomainValidator.Item> items = new ArrayList<>();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> new UrlValidator(new String[] {}, null, 0L, DomainValidator.getInstance(true, items)));\n        assertEquals(\"DomainValidator disagrees with ALLOW_LOCAL_URLS setting\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testValidator473Part3()", "name": "testValidator473Part3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part3()", "original_string": "    @Test\n    public void testValidator473Part3() { // reject null DomainValidator with mismatched allowLocal\n        final List<DomainValidator.Item> items = new ArrayList<>();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> new UrlValidator(new String[] {}, null, UrlValidator.ALLOW_LOCAL_URLS, DomainValidator.getInstance(false, items)));\n        assertEquals(\"DomainValidator disagrees with ALLOW_LOCAL_URLS setting\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest.[void]testCompare()", "name": "testCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompare()", "original_string": "    @Test\n    public void testCompare() {\n        final int sameTime = 124522;\n        final int testDate = 20050823;\n        final Date diffHour = createDate(GMT, testDate, 115922); // same date, different time\n\n        final Date value = createDate(GMT, testDate, sameTime); // test value\n        final Date date20050824 = createDate(GMT, 20050824, sameTime); // +1 day\n        final Date date20050822 = createDate(GMT, 20050822, sameTime); // -1 day\n\n        final Date date20050830 = createDate(GMT, 20050830, sameTime); // +1 week\n        final Date date20050816 = createDate(GMT, 20050816, sameTime); // -1 week\n\n        final Date date20050901 = createDate(GMT, 20050901, sameTime); // +1 month\n        final Date date20050801 = createDate(GMT, 20050801, sameTime); // same month\n        final Date date20050731 = createDate(GMT, 20050731, sameTime); // -1 month\n\n        final Date date20051101 = createDate(GMT, 20051101, sameTime); // +1 quarter (Feb Start)\n        final Date date20051001 = createDate(GMT, 20051001, sameTime); // +1 quarter\n        final Date date20050701 = createDate(GMT, 20050701, sameTime); // same quarter\n        final Date date20050630 = createDate(GMT, 20050630, sameTime); // -1 quarter\n        final Date date20050110 = createDate(GMT, 20050110, sameTime); // Previous Year qtr (Fen start)\n\n        final Date date20060101 = createDate(GMT, 20060101, sameTime); // +1 year\n        final Date date20050101 = createDate(GMT, 20050101, sameTime); // same year\n        final Date date20041231 = createDate(GMT, 20041231, sameTime); // -1 year\n\n        assertEquals(-1, dateValidator.compareDates(value, date20050824, GMT), \"date LT\"); // +1 day\n        assertEquals(0, dateValidator.compareDates(value, diffHour, GMT), \"date EQ\"); // same day, diff hour\n        assertEquals(1, dateValidator.compareDates(value, date20050822, GMT), \"date GT\"); // -1 day\n\n        assertEquals(-1, dateValidator.compareWeeks(value, date20050830, GMT), \"week LT\"); // +1 week\n        assertEquals(0, dateValidator.compareWeeks(value, date20050824, GMT), \"week =1\"); // +1 day\n        assertEquals(0, dateValidator.compareWeeks(value, date20050822, GMT), \"week =2\"); // same week\n        assertEquals(0, dateValidator.compareWeeks(value, date20050822, GMT), \"week =3\"); // -1 day\n        assertEquals(1, dateValidator.compareWeeks(value, date20050816, GMT), \"week GT\"); // -1 week\n\n        assertEquals(-1, dateValidator.compareMonths(value, date20050901, GMT), \"mnth LT\"); // +1 month\n        assertEquals(0, dateValidator.compareMonths(value, date20050830, GMT), \"mnth =1\"); // +1 week\n        assertEquals(0, dateValidator.compareMonths(value, date20050801, GMT), \"mnth =2\"); // same month\n        assertEquals(0, dateValidator.compareMonths(value, date20050816, GMT), \"mnth =3\"); // -1 week\n        assertEquals(1, dateValidator.compareMonths(value, date20050731, GMT), \"mnth GT\"); // -1 month\n\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051101, GMT), \"qtrA <1\"); // +1 quarter (Feb)\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051001, GMT), \"qtrA <2\"); // +1 quarter\n        assertEquals(0, dateValidator.compareQuarters(value, date20050901, GMT), \"qtrA =1\"); // +1 month\n        assertEquals(0, dateValidator.compareQuarters(value, date20050701, GMT), \"qtrA =2\"); // same quarter\n        assertEquals(0, dateValidator.compareQuarters(value, date20050731, GMT), \"qtrA =3\"); // -1 month\n        assertEquals(1, dateValidator.compareQuarters(value, date20050630, GMT), \"qtrA GT\"); // -1 quarter\n\n        // Change quarter 1 to start in Feb\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051101, GMT, 2), \"qtrB LT\"); // +1 quarter (Feb)\n        assertEquals(0, dateValidator.compareQuarters(value, date20051001, GMT, 2), \"qtrB =1\"); // same quarter\n        assertEquals(0, dateValidator.compareQuarters(value, date20050901, GMT, 2), \"qtrB =2\"); // +1 month\n        assertEquals(1, dateValidator.compareQuarters(value, date20050701, GMT, 2), \"qtrB =3\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050731, GMT, 2), \"qtrB =4\"); // -1 month\n        assertEquals(1, dateValidator.compareQuarters(value, date20050630, GMT, 2), \"qtrB GT\"); // -1 quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050110, GMT, 2), \"qtrB prev\"); // Jan Prev year qtr\n\n        assertEquals(-1, dateValidator.compareYears(value, date20060101, GMT), \"year LT\"); // +1 year\n        assertEquals(0, dateValidator.compareYears(value, date20050101, GMT), \"year EQ\"); // same year\n        assertEquals(1, dateValidator.compareYears(value, date20041231, GMT), \"year GT\"); // -1 year\n\n        // Compare using alternative TimeZone\n        final Date sameDayTwoAm = createDate(GMT, testDate, 20000);\n        assertEquals(-1, dateValidator.compareDates(value, date20050824, EST), \"date LT\"); // +1 day\n        assertEquals(0, dateValidator.compareDates(value, diffHour, EST), \"date EQ\"); // same day, diff hour\n        assertEquals(1, dateValidator.compareDates(value, sameDayTwoAm, EST), \"date EQ\"); // same day, diff hour\n        assertEquals(1, dateValidator.compareDates(value, date20050822, EST), \"date GT\"); // -1 day\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java", "class_name": "DateValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest compare date methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest.[void]testDateValidatorMethods()", "name": "testDateValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDateValidatorMethods()", "original_string": "    @Test\n    public void testDateValidatorMethods() {\n        Locale.setDefault(Locale.US);\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"yyyy-MM-dd\";\n        final String patternVal = \"2005-12-31\";\n        final String germanVal = \"31 Dez 2005\";\n        final String germanPattern = \"dd MMM yyyy\";\n        final String localeVal = \"31.12.2005\";\n        final String defaultVal = \"12/31/05\";\n        final String xxxx = \"XXXX\";\n        final Date expected = createCalendar(null, 20051231, 0).getTime();\n\n        assertEquals(expected, DateValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, DateValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\n        assertEquals(expected, DateValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, DateValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(DateValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(DateValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\n        assertTrue(DateValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(DateValidator.getInstance().isValid(germanVal, germanPattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(DateValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(DateValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\n        assertNull(DateValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(DateValidator.getInstance().validate(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(DateValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(DateValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\n        assertFalse(DateValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(DateValidator.getInstance().isValid(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"isValid(B) both\");\n\n        // Test Time Zone\n        final TimeZone zone = TimeZone.getDefault().getRawOffset() == EET.getRawOffset() ? EST : EET;\n        final Date expectedZone = createCalendar(zone, 20051231, 0).getTime();\n        assertFalse(expected.getTime() == expectedZone.getTime(), \"default/zone same \" + zone);\n\n        assertEquals(expectedZone, DateValidator.getInstance().validate(defaultVal, zone), \"validate(C) default\");\n        assertEquals(expectedZone, DateValidator.getInstance().validate(localeVal, locale, zone), \"validate(C) locale \");\n        assertEquals(expectedZone, DateValidator.getInstance().validate(patternVal, pattern, zone), \"validate(C) pattern\");\n        assertEquals(expectedZone, DateValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN, zone), \"validate(C) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java", "class_name": "DateValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest DateValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest.[void]testLocaleProviders()", "name": "testLocaleProviders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleProviders()", "original_string": "    @Test\n    public void testLocaleProviders() throws Exception {\n        final String localeProviders = SystemProperties.getJavaLocaleProviders();\n        if (localeProviders != null) { // may be null before Java 9\n            assertTrue(localeProviders.startsWith(\"COMPAT\"), \"java.locale.providers must start with COMPAT\");\n        }\n        final String txt = \"3/20/15 10:59:00 PM\"; // This relies on the locale format prior to Java 9 to parse correctly\n        final DateFormat dateformat = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.US);\n        dateformat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n        final Date date = dateformat.parse(txt);\n        assertNotNull(date);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java", "class_name": "DateValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCheck that locale providers are set up correctly If not, the parse will fail\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest.[void]testFloatRangeMinMax()", "name": "testFloatRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloatRangeMinMax()", "original_string": "    @Test\n    public void testFloatRangeMinMax() {\n        final FloatValidator validator = (FloatValidator) strictValidator;\n        final Float number9 = validator.validate(\"9\", \"#\");\n        final Float number10 = validator.validate(\"10\", \"#\");\n        final Float number11 = validator.validate(\"11\", \"#\");\n        final Float number19 = validator.validate(\"19\", \"#\");\n        final Float number20 = validator.validate(\"20\", \"#\");\n        final Float number21 = validator.validate(\"21\", \"#\");\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java", "class_name": "FloatValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Float Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest.[void]testFloatSmallestValues()", "name": "testFloatSmallestValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloatSmallestValues()", "original_string": "    @Test\n    public void testFloatSmallestValues() {\n        final String pattern = \"#.#################################################################\";\n        final DecimalFormat fmt = new DecimalFormat(pattern);\n\n        // Validate Smallest +ve value\n        final Float smallestPositive = Float.valueOf(Float.MIN_VALUE);\n        final String strSmallestPositive = fmt.format(smallestPositive);\n        assertEquals(smallestPositive, FloatValidator.getInstance().validate(strSmallestPositive, pattern), \"Smallest +ve\");\n\n        // Validate Smallest -ve value\n        final Float smallestNegative = Float.valueOf(Float.MIN_VALUE * -1);\n        final String strSmallestNegative = fmt.format(smallestNegative);\n        assertEquals(smallestNegative, FloatValidator.getInstance().validate(strSmallestNegative, pattern), \"Smallest -ve\");\n\n        // Validate Too Small +ve\n        final Double tooSmallPositive = Double.valueOf((double) Float.MIN_VALUE / (double) 10);\n        final String strTooSmallPositive = fmt.format(tooSmallPositive);\n        assertFalse(FloatValidator.getInstance().isValid(strTooSmallPositive, pattern), \"Too small +ve\");\n\n        // Validate Too Small -ve\n        final Double tooSmallNegative = Double.valueOf(tooSmallPositive.doubleValue() * -1);\n        final String strTooSmallNegative = fmt.format(tooSmallNegative);\n        assertFalse(FloatValidator.getInstance().isValid(strTooSmallNegative, pattern), \"Too small -ve\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java", "class_name": "FloatValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Float validation for values too small to handle. (slightly different from max/min which are the largest +ve/-ve\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest.[void]testFloatValidatorMethods()", "name": "testFloatValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFloatValidatorMethods()", "original_string": "    @Test\n    public void testFloatValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String localeVal = \"12.345\";\n        final String germanPatternVal = \"1.23.45\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final Float expected = Float.valueOf(12345);\n        assertEquals(expected, FloatValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, FloatValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\n        assertEquals(expected, FloatValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, FloatValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(FloatValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(FloatValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\n        assertTrue(FloatValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(FloatValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(FloatValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(FloatValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\n        assertNull(FloatValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(FloatValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(FloatValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(FloatValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\n        assertFalse(FloatValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(FloatValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java", "class_name": "FloatValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest FloatValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]tesLocalTldsSortedAndLowerCase()", "name": "tesLocalTldsSortedAndLowerCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void tesLocalTldsSortedAndLowerCase()", "original_string": "    @Test\n    public void tesLocalTldsSortedAndLowerCase() throws Exception {\n        final boolean sorted = isSortedLowerCase(\"LOCAL_TLDS\");\n        assertTrue(sorted);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Check array is sorted and is lower-case"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testAllowLocal()", "name": "testAllowLocal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllowLocal()", "original_string": "    @Test\n    public void testAllowLocal() {\n        final DomainValidator noLocal = DomainValidator.getInstance(false);\n        final DomainValidator allowLocal = DomainValidator.getInstance(true);\n\n        // Default is false, and should use singletons\n        assertEquals(noLocal, validator);\n\n        // Default won't allow local\n        assertFalse(noLocal.isValid(\"localhost.localdomain\"), \"localhost.localdomain should validate\");\n        assertFalse(noLocal.isValid(\"localhost\"), \"localhost should validate\");\n\n        // But it may be requested\n        assertTrue(allowLocal.isValid(\"localhost.localdomain\"), \"localhost.localdomain should validate\");\n        assertTrue(allowLocal.isValid(\"localhost\"), \"localhost should validate\");\n        assertTrue(allowLocal.isValid(\"hostname\"), \"hostname should validate\");\n        assertTrue(allowLocal.isValid(\"machinename\"), \"machinename should validate\");\n\n        // Check the localhost one with a few others\n        assertTrue(allowLocal.isValid(\"apache.org\"), \"apache.org should validate\");\n        assertFalse(allowLocal.isValid(\" apache.org \"), \"domain name with spaces shouldn't validate\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testCountryCodeTldsSortedAndLowerCase()", "name": "testCountryCodeTldsSortedAndLowerCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCountryCodeTldsSortedAndLowerCase()", "original_string": "    @Test\n    public void testCountryCodeTldsSortedAndLowerCase() throws Exception {\n        final boolean sorted = isSortedLowerCase(\"COUNTRY_CODE_TLDS\");\n        assertTrue(sorted);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Check array is sorted and is lower-case"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testDomainNoDots()", "name": "testDomainNoDots", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDomainNoDots()", "original_string": "    @Test\n    public void testDomainNoDots() { // rfc1123\n        assertTrue(validator.isValidDomainSyntax(\"a\"), \"a (alpha) should validate\");\n        assertTrue(validator.isValidDomainSyntax(\"9\"), \"9 (alphanum) should validate\");\n        assertTrue(validator.isValidDomainSyntax(\"c-z\"), \"c-z (alpha - alpha) should validate\");\n\n        assertFalse(validator.isValidDomainSyntax(\"c-\"), \"c- (alpha -) should fail\");\n        assertFalse(validator.isValidDomainSyntax(\"-c\"), \"-c (- alpha) should fail\");\n        assertFalse(validator.isValidDomainSyntax(\"-\"), \"- (-) should fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testEnumIsPublic()", "name": "testEnumIsPublic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnumIsPublic()", "original_string": "    @Test\n    public void testEnumIsPublic() {\n        assertTrue(Modifier.isPublic(DomainValidator.ArrayType.class.getModifiers()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testGenericTldsSortedAndLowerCase()", "name": "testGenericTldsSortedAndLowerCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGenericTldsSortedAndLowerCase()", "original_string": "    @Test\n    public void testGenericTldsSortedAndLowerCase() throws Exception {\n        final boolean sorted = isSortedLowerCase(\"GENERIC_TLDS\");\n        assertTrue(sorted);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Check array is sorted and is lower-case"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testGetArray()", "name": "testGetArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetArray()", "original_string": "    @Test\n    public void testGetArray() {\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_MINUS));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_PLUS));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_MINUS));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_PLUS));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_MINUS));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_PLUS));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.COUNTRY_CODE_RO));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.GENERIC_RO));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.INFRASTRUCTURE_RO));\n        assertNotNull(DomainValidator.getTLDEntries(ArrayType.LOCAL_RO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testIDN()", "name": "testIDN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIDN()", "original_string": "    @Test\n    public void testIDN() {\n        assertTrue(validator.isValid(\"www.xn--bcher-kva.ch\"), \"b\\u00fccher.ch in IDN should validate\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testIDNJava6OrLater()", "name": "testIDNJava6OrLater", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIDNJava6OrLater()", "original_string": "    @Test\n    public void testIDNJava6OrLater() {\n        final String version = SystemProperties.getJavaVersion();\n        if (version.compareTo(\"1.6\") < 0) {\n            System.out.println(\"Cannot run Unicode IDN tests\");\n            return; // Cannot run the test\n        } // xn--d1abbgf6aiiy.xn--p1ai http://\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\n        assertTrue(validator.isValid(\"www.b\\u00fccher.ch\"), \"b\\u00fccher.ch should validate\");\n        assertTrue(validator.isValid(\"xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\n        assertTrue(validator.isValid(\"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\"), \"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate\");\n        assertFalse(validator.isValid(\"www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testInfrastructureTldsSortedAndLowerCase()", "name": "testInfrastructureTldsSortedAndLowerCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInfrastructureTldsSortedAndLowerCase()", "original_string": "    @Test\n    public void testInfrastructureTldsSortedAndLowerCase() throws Exception {\n        final boolean sorted = isSortedLowerCase(\"INFRASTRUCTURE_TLDS\");\n        assertTrue(sorted);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Check array is sorted and is lower-case"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testInvalidDomains()", "name": "testInvalidDomains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidDomains()", "original_string": "    @Test\n    public void testInvalidDomains() {\n        assertFalse(validator.isValid(\".org\"), \"bare TLD .org shouldn't validate\");\n        assertFalse(validator.isValid(\" apache.org \"), \"domain name with spaces shouldn't validate\");\n        assertFalse(validator.isValid(\"apa che.org\"), \"domain name containing spaces shouldn't validate\");\n        assertFalse(validator.isValid(\"-testdomain.name\"), \"domain name starting with dash shouldn't validate\");\n        assertFalse(validator.isValid(\"testdomain-.name\"), \"domain name ending with dash shouldn't validate\");\n        assertFalse(validator.isValid(\"---c.com\"), \"domain name starting with multiple dashes shouldn't validate\");\n        assertFalse(validator.isValid(\"c--.com\"), \"domain name ending with multiple dashes shouldn't validate\");\n        assertFalse(validator.isValid(\"apache.rog\"), \"domain name with invalid TLD shouldn't validate\");\n\n        assertFalse(validator.isValid(\"http://www.apache.org\"), \"URL shouldn't validate\");\n        assertFalse(validator.isValid(\" \"), \"Empty string shouldn't validate as domain name\");\n        assertFalse(validator.isValid(null), \"Null shouldn't validate as domain name\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testIsIDNtoASCIIBroken()", "name": "testIsIDNtoASCIIBroken", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsIDNtoASCIIBroken()", "original_string": "    @Test\n    public void testIsIDNtoASCIIBroken() {\n        System.out.println(\">>DomainValidatorTest.testIsIDNtoASCIIBroken()\");\n        final String input = \".\";\n        final boolean ok = input.equals(IDN.toASCII(input));\n        System.out.println(\"IDN.toASCII is \" + (ok ? \"OK\" : \"BROKEN\"));\n        final String[] props = { \"java.version\", // Java Runtime Environment version\n                \"java.vendor\", // Java Runtime Environment vendor\n                \"java.vm.specification.version\", // Java Virtual Machine specification version\n                \"java.vm.specification.vendor\", // Java Virtual Machine specification vendor\n                \"java.vm.specification.name\", // Java Virtual Machine specification name\n                \"java.vm.version\", // Java Virtual Machine implementation version\n                \"java.vm.vendor\", // Java Virtual Machine implementation vendor\n                \"java.vm.name\", // Java Virtual Machine implementation name\n                \"java.specification.version\", // Java Runtime Environment specification version\n                \"java.specification.vendor\", // Java Runtime Environment specification vendor\n                \"java.specification.name\", // Java Runtime Environment specification name\n                \"java.class.version\", // Java class format version number\n        };\n        for (final String t : props) {\n            System.out.println(t + \"=\" + System.getProperty(t));\n        }\n        System.out.println(\"<<DomainValidatorTest.testIsIDNtoASCIIBroken()\");\n        assertTrue(true); // dummy assertion to satisfy lint\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Check if IDN.toASCII is broken or not"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testRFC2396domainlabel()", "name": "testRFC2396domainlabel", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRFC2396domainlabel()", "original_string": "    @Test\n    public void testRFC2396domainlabel() { // use fixed valid TLD\n        assertTrue(validator.isValid(\"a.ch\"), \"a.ch should validate\");\n        assertTrue(validator.isValid(\"9.ch\"), \"9.ch should validate\");\n        assertTrue(validator.isValid(\"az.ch\"), \"az.ch should validate\");\n        assertTrue(validator.isValid(\"09.ch\"), \"09.ch should validate\");\n        assertTrue(validator.isValid(\"9-1.ch\"), \"9-1.ch should validate\");\n        assertFalse(validator.isValid(\"91-.ch\"), \"91-.ch should not validate\");\n        assertFalse(validator.isValid(\"-.ch\"), \"-.ch should not validate\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " RFC2396: domainlabel = alphanum | alphanum *( alphanum | \"-\" ) alphanum"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testRFC2396toplabel()", "name": "testRFC2396toplabel", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRFC2396toplabel()", "original_string": "    @Test\n    public void testRFC2396toplabel() {\n        // These tests use non-existent TLDs so currently need to use a package protected method\n        assertTrue(validator.isValidDomainSyntax(\"a.c\"), \"a.c (alpha) should validate\");\n        assertTrue(validator.isValidDomainSyntax(\"a.cc\"), \"a.cc (alpha alpha) should validate\");\n        assertTrue(validator.isValidDomainSyntax(\"a.c9\"), \"a.c9 (alpha alphanum) should validate\");\n        assertTrue(validator.isValidDomainSyntax(\"a.c-9\"), \"a.c-9 (alpha - alphanum) should validate\");\n        assertTrue(validator.isValidDomainSyntax(\"a.c-z\"), \"a.c-z (alpha - alpha) should validate\");\n\n        assertFalse(validator.isValidDomainSyntax(\"a.9c\"), \"a.9c (alphanum alpha) should fail\");\n        assertFalse(validator.isValidDomainSyntax(\"a.c-\"), \"a.c- (alpha -) should fail\");\n        assertFalse(validator.isValidDomainSyntax(\"a.-\"), \"a.- (-) should fail\");\n        assertFalse(validator.isValidDomainSyntax(\"a.-9\"), \"a.-9 (- alphanum) should fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " RFC2396 toplabel = alpha | alpha *( alphanum | \"-\" ) alphanum"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testTopLevelDomains()", "name": "testTopLevelDomains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTopLevelDomains()", "original_string": "    @Test\n    public void testTopLevelDomains() {\n        // infrastructure TLDs\n        assertTrue(validator.isValidInfrastructureTld(\".arpa\"), \".arpa should validate as iTLD\");\n        assertFalse(validator.isValidInfrastructureTld(\".com\"), \".com shouldn't validate as iTLD\");\n\n        // generic TLDs\n        assertTrue(validator.isValidGenericTld(\".name\"), \".name should validate as gTLD\");\n        assertFalse(validator.isValidGenericTld(\".us\"), \".us shouldn't validate as gTLD\");\n\n        // country code TLDs\n        assertTrue(validator.isValidCountryCodeTld(\".uk\"), \".uk should validate as ccTLD\");\n        assertFalse(validator.isValidCountryCodeTld(\".org\"), \".org shouldn't validate as ccTLD\");\n\n        // case-insensitive\n        assertTrue(validator.isValidTld(\".COM\"), \".COM should validate as TLD\");\n        assertTrue(validator.isValidTld(\".BiZ\"), \".BiZ should validate as TLD\");\n\n        // corner cases\n        assertFalse(validator.isValid(\".nope\"), \"invalid TLD shouldn't validate\"); // TODO this is not guaranteed invalid forever\n        assertFalse(validator.isValid(\"\"), \"empty string shouldn't validate as TLD\");\n        assertFalse(validator.isValid(null), \"null shouldn't validate as TLD\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testUnicodeToASCII()", "name": "testUnicodeToASCII", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnicodeToASCII()", "original_string": "    @Test\n    public void testUnicodeToASCII() {\n        final String[] asciidots = { \"\", \",\", \".\", // fails IDN.toASCII, but should pass wrapped version\n                \"a.\", // ditto\n                \"a.b\", \"a..b\", \"a...b\", \".a\", \"..a\", };\n        for (final String s : asciidots) {\n            assertEquals(s, DomainValidator.unicodeToASCII(s));\n        }\n        // RFC3490 3.1. 1)\n//      Whenever dots are used as label separators, the following\n//      characters MUST be recognized as dots: U+002E (full stop), U+3002\n//      (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61\n//      (halfwidth ideographic full stop).\n        final String otherDots[][] = { { \"b\\u3002\", \"b.\", }, { \"b\\uFF0E\", \"b.\", }, { \"b\\uFF61\", \"b.\", }, { \"\\u3002\", \".\", }, { \"\\uFF0E\", \".\", },\n                { \"\\uFF61\", \".\", }, };\n        for (final String s[] : otherDots) {\n            assertEquals(s[1], DomainValidator.unicodeToASCII(s[0]));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Tests show that method incorrectly trims a trailing \".\" character"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testValidator297()", "name": "testValidator297", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator297()", "original_string": "    @Test\n    public void testValidator297() {\n        assertTrue(validator.isValid(\"xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\"); // This uses a valid TLD\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testValidator306()", "name": "testValidator306", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator306()", "original_string": "    @Test\n    public void testValidator306() {\n        final String longString = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A\";\n        assertEquals(63, longString.length()); // 26 * 2 + 11\n\n        assertTrue(validator.isValidDomainSyntax(longString + \".com\"), \"63 chars label should validate\");\n        assertFalse(validator.isValidDomainSyntax(longString + \"x.com\"), \"64 chars label should fail\");\n\n        assertTrue(validator.isValidDomainSyntax(\"test.\" + longString), \"63 chars TLD should validate\");\n        assertFalse(validator.isValidDomainSyntax(\"test.x\" + longString), \"64 chars TLD should fail\");\n\n        final String longDomain = longString + \".\" + longString + \".\" + longString + \".\" + longString.substring(0, 61);\n        assertEquals(253, longDomain.length());\n        assertTrue(validator.isValidDomainSyntax(longDomain), \"253 chars domain should validate\");\n        assertFalse(validator.isValidDomainSyntax(longDomain + \"x\"), \"254 chars domain should fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " labels are a max of 63 chars and domains 253"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]testValidDomains()", "name": "testValidDomains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidDomains()", "original_string": "    @Test\n    public void testValidDomains() {\n        assertTrue(validator.isValid(\"apache.org\"), \"apache.org should validate\");\n        assertTrue(validator.isValid(\"www.google.com\"), \"www.google.com should validate\");\n\n        assertTrue(validator.isValid(\"test-domain.com\"), \"test-domain.com should validate\");\n        assertTrue(validator.isValid(\"test---domain.com\"), \"test---domain.com should validate\");\n        assertTrue(validator.isValid(\"test-d-o-m-ain.com\"), \"test-d-o-m-ain.com should validate\");\n        assertTrue(validator.isValid(\"as.uk\"), \"two-letter domain label should validate\");\n\n        assertTrue(validator.isValid(\"ApAchE.Org\"), \"case-insensitive ApAchE.Org should validate\");\n\n        assertTrue(validator.isValid(\"z.com\"), \"single-character domain label should validate\");\n\n        assertTrue(validator.isValid(\"i.have.an-example.domain.name\"), \"i.have.an-example.domain.name should validate\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java.ByteValidatorTest.[void]testByteRangeMinMax()", "name": "testByteRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteRangeMinMax()", "original_string": "    @Test\n    public void testByteRangeMinMax() {\n        final ByteValidator validator = (ByteValidator) strictValidator;\n        final Byte number9 = validator.validate(\"9\", \"#\");\n        final Byte number10 = validator.validate(\"10\", \"#\");\n        final Byte number11 = validator.validate(\"11\", \"#\");\n        final Byte number19 = validator.validate(\"19\", \"#\");\n        final Byte number20 = validator.validate(\"20\", \"#\");\n        final Byte number21 = validator.validate(\"21\", \"#\");\n        final byte min = (byte) 10;\n        final byte max = (byte) 20;\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, min, max), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, min, max), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, min, max), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, min, max), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, min, max), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, min), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, min), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, min), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, max), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, max), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, max), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java", "class_name": "ByteValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java.ByteValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Byte Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java.ByteValidatorTest.[void]testByteValidatorMethods()", "name": "testByteValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteValidatorMethods()", "original_string": "    @Test\n    public void testByteValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00\";\n        final String patternVal = \"1,23\";\n        final String germanPatternVal = \"1.23\";\n        final String localeVal = \".123\";\n        final String defaultVal = \",123\";\n        final String xxxx = \"XXXX\";\n        final Byte expected = Byte.valueOf((byte) 123);\n        assertEquals(expected, ByteValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, ByteValidator.getInstance().validate(localeVal, locale), \"validate(A) locale \");\n        assertEquals(expected, ByteValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, ByteValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(ByteValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(ByteValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\n        assertTrue(ByteValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(ByteValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(ByteValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(ByteValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\n        assertNull(ByteValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(ByteValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(ByteValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(ByteValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\n        assertFalse(ByteValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(ByteValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java", "class_name": "ByteValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java.ByteValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest ByteValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest.[void]testAdjustToTimeZone()", "name": "testAdjustToTimeZone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdjustToTimeZone()", "original_string": "    @Test\n    public void testAdjustToTimeZone() {\n\n        final Calendar calEST = createCalendar(EST, DATE_2005_11_23, TIME_12_03_45);\n        final Date dateEST = calEST.getTime();\n\n        final Calendar calGMT = createCalendar(GMT, DATE_2005_11_23, TIME_12_03_45);\n        final Date dateGMT = calGMT.getTime();\n\n        final Calendar calCET = createCalendar(EET, DATE_2005_11_23, TIME_12_03_45);\n        final Date dateCET = calCET.getTime();\n\n        // Check the dates don't match\n        assertFalse(dateGMT.getTime() == dateCET.getTime(), \"Check GMT != CET\");\n        assertFalse(dateGMT.getTime() == dateEST.getTime(), \"Check GMT != EST\");\n        assertFalse(dateCET.getTime() == dateEST.getTime(), \"Check CET != EST\");\n\n        // EST to GMT and back\n        CalendarValidator.adjustToTimeZone(calEST, GMT);\n        assertEquals(dateGMT, calEST.getTime(), \"EST to GMT\");\n        assertFalse(dateEST == calEST.getTime(), \"Check EST = GMT\");\n        CalendarValidator.adjustToTimeZone(calEST, EST);\n        assertEquals(dateEST, calEST.getTime(), \"back to EST\");\n        assertFalse(dateGMT == calEST.getTime(), \"Check EST != GMT\");\n\n        // CET to GMT and back\n        CalendarValidator.adjustToTimeZone(calCET, GMT);\n        assertEquals(dateGMT, calCET.getTime(), \"CET to GMT\");\n        assertFalse(dateCET == calCET.getTime(), \"Check CET = GMT\");\n        CalendarValidator.adjustToTimeZone(calCET, EET);\n        assertEquals(dateCET, calCET.getTime(), \"back to CET\");\n        assertFalse(dateGMT == calCET.getTime(), \"Check CET != GMT\");\n\n        // Adjust to TimeZone with Same rules\n        final Calendar calUTC = createCalendar(UTC, DATE_2005_11_23, TIME_12_03_45);\n        assertTrue(UTC.hasSameRules(GMT), \"SAME: UTC = GMT\");\n        assertEquals(calUTC.getTime(), calGMT.getTime(), \"SAME: Check time (A)\");\n        assertFalse(GMT.equals(calUTC.getTimeZone()), \"SAME: Check GMT(A)\");\n        assertTrue(UTC.equals(calUTC.getTimeZone()), \"SAME: Check UTC(A)\");\n        CalendarValidator.adjustToTimeZone(calUTC, GMT);\n        assertEquals(calUTC.getTime(), calGMT.getTime(), \"SAME: Check time (B)\");\n        assertTrue(GMT.equals(calUTC.getTimeZone()), \"SAME: Check GMT(B)\");\n        assertFalse(UTC.equals(calUTC.getTimeZone()), \"SAME: Check UTC(B)\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "class_name": "CalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest adjustToTimeZone() method\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest.[void]testCalendarValidatorMethods()", "name": "testCalendarValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCalendarValidatorMethods()", "original_string": "    @Test\n    public void testCalendarValidatorMethods() {\n        Locale.setDefault(Locale.US);\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"yyyy-MM-dd\";\n        final String patternVal = \"2005-12-31\";\n        final String germanVal = \"31 Dez 2005\";\n        final String germanPattern = \"dd MMM yyyy\";\n        final String localeVal = \"31.12.2005\";\n        final String defaultVal = \"12/31/05\";\n        final String xxxx = \"XXXX\";\n        final Date expected = createCalendar(null, 20051231, 0).getTime();\n        assertEquals(expected, CalendarValidator.getInstance().validate(defaultVal).getTime(), \"validate(A) default\");\n        assertEquals(expected, CalendarValidator.getInstance().validate(localeVal, locale).getTime(), \"validate(A) locale \");\n        assertEquals(expected, CalendarValidator.getInstance().validate(patternVal, pattern).getTime(), \"validate(A) pattern\");\n        assertEquals(expected, CalendarValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN).getTime(), \"validate(A) both\");\n\n        assertTrue(CalendarValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(CalendarValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale \");\n        assertTrue(CalendarValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(CalendarValidator.getInstance().isValid(germanVal, germanPattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(CalendarValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(CalendarValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\n        assertNull(CalendarValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(CalendarValidator.getInstance().validate(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(CalendarValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(CalendarValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale \");\n        assertFalse(CalendarValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(CalendarValidator.getInstance().isValid(\"31 Dec 2005\", germanPattern, Locale.GERMAN), \"isValid(B) both\");\n\n        // Test Time Zone\n        final TimeZone zone = TimeZone.getDefault().getRawOffset() == EET.getRawOffset() ? EST : EET;\n        final Date expectedZone = createCalendar(zone, 20051231, 0).getTime();\n        assertFalse(expected.getTime() == expectedZone.getTime(), \"default/EET same \");\n\n        assertEquals(expectedZone, CalendarValidator.getInstance().validate(defaultVal, zone).getTime(), \"validate(C) default\");\n        assertEquals(expectedZone, CalendarValidator.getInstance().validate(localeVal, locale, zone).getTime(), \"validate(C) locale \");\n        assertEquals(expectedZone, CalendarValidator.getInstance().validate(patternVal, pattern, zone).getTime(), \"validate(C) pattern\");\n        assertEquals(expectedZone, CalendarValidator.getInstance().validate(germanVal, germanPattern, Locale.GERMAN, zone).getTime(), \"validate(C) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "class_name": "CalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest CalendarValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest.[void]testCompare()", "name": "testCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompare()", "original_string": "    @Test\n    public void testCompare() {\n        final int sameTime = 124522;\n        final int testDate = 20050823;\n        final Calendar diffHour = createCalendar(GMT, testDate, 115922); // same date, different time\n        final Calendar diffMin = createCalendar(GMT, testDate, 124422); // same date, different time\n        final Calendar diffSec = createCalendar(GMT, testDate, 124521); // same date, different time\n\n        final Calendar value = createCalendar(GMT, testDate, sameTime); // test value\n        final Calendar cal20050824 = createCalendar(GMT, 20050824, sameTime); // +1 day\n        final Calendar cal20050822 = createCalendar(GMT, 20050822, sameTime); // -1 day\n\n        final Calendar cal20050830 = createCalendar(GMT, 20050830, sameTime); // +1 week\n        final Calendar cal20050816 = createCalendar(GMT, 20050816, sameTime); // -1 week\n\n        final Calendar cal20050901 = createCalendar(GMT, 20050901, sameTime); // +1 month\n        final Calendar cal20050801 = createCalendar(GMT, 20050801, sameTime); // same month\n        final Calendar cal20050731 = createCalendar(GMT, 20050731, sameTime); // -1 month\n\n        final Calendar cal20051101 = createCalendar(GMT, 20051101, sameTime); // +1 quarter (Feb Start)\n        final Calendar cal20051001 = createCalendar(GMT, 20051001, sameTime); // +1 quarter\n        final Calendar cal20050701 = createCalendar(GMT, 20050701, sameTime); // same quarter\n        final Calendar cal20050630 = createCalendar(GMT, 20050630, sameTime); // -1 quarter\n\n        final Calendar cal20060101 = createCalendar(GMT, 20060101, sameTime); // +1 year\n        final Calendar cal20050101 = createCalendar(GMT, 20050101, sameTime); // same year\n        final Calendar cal20041231 = createCalendar(GMT, 20041231, sameTime); // -1 year\n\n        assertEquals(1, calValidator.compare(value, diffHour, Calendar.HOUR_OF_DAY), \"hour GT\");\n        assertEquals(0, calValidator.compare(value, diffMin, Calendar.HOUR_OF_DAY), \"hour EQ\");\n        assertEquals(1, calValidator.compare(value, diffMin, Calendar.MINUTE), \"mins GT\");\n        assertEquals(0, calValidator.compare(value, diffSec, Calendar.MINUTE), \"mins EQ\");\n        assertEquals(1, calValidator.compare(value, diffSec, Calendar.SECOND), \"secs GT\");\n\n        assertEquals(-1, calValidator.compareDates(value, cal20050824), \"date LT\"); // +1 day\n        assertEquals(0, calValidator.compareDates(value, diffHour), \"date EQ\"); // same day, diff hour\n        assertEquals(0, calValidator.compare(value, diffHour, Calendar.DAY_OF_YEAR), \"date(B)\"); // same day, diff hour\n        assertEquals(1, calValidator.compareDates(value, cal20050822), \"date GT\"); // -1 day\n\n        assertEquals(-1, calValidator.compareWeeks(value, cal20050830), \"week LT\"); // +1 week\n        assertEquals(0, calValidator.compareWeeks(value, cal20050824), \"week =1\"); // +1 day\n        assertEquals(0, calValidator.compareWeeks(value, cal20050822), \"week =2\"); // same week\n        assertEquals(0, calValidator.compare(value, cal20050822, Calendar.WEEK_OF_MONTH), \"week =3\"); // same week\n        assertEquals(0, calValidator.compareWeeks(value, cal20050822), \"week =4\"); // -1 day\n        assertEquals(1, calValidator.compareWeeks(value, cal20050816), \"week GT\"); // -1 week\n\n        assertEquals(-1, calValidator.compareMonths(value, cal20050901), \"mnth LT\"); // +1 month\n        assertEquals(0, calValidator.compareMonths(value, cal20050830), \"mnth =1\"); // +1 week\n        assertEquals(0, calValidator.compareMonths(value, cal20050801), \"mnth =2\"); // same month\n        assertEquals(0, calValidator.compareMonths(value, cal20050816), \"mnth =3\"); // -1 week\n        assertEquals(1, calValidator.compareMonths(value, cal20050731), \"mnth GT\"); // -1 month\n\n        assertEquals(-1, calValidator.compareQuarters(value, cal20051101), \"qtrA <1\"); // +1 quarter (Feb)\n        assertEquals(-1, calValidator.compareQuarters(value, cal20051001), \"qtrA <2\"); // +1 quarter\n        assertEquals(0, calValidator.compareQuarters(value, cal20050901), \"qtrA =1\"); // +1 month\n        assertEquals(0, calValidator.compareQuarters(value, cal20050701), \"qtrA =2\"); // same quarter\n        assertEquals(0, calValidator.compareQuarters(value, cal20050731), \"qtrA =3\"); // -1 month\n        assertEquals(1, calValidator.compareQuarters(value, cal20050630), \"qtrA GT\"); // -1 quarter\n\n        // Change quarter 1 to start in Feb\n        assertEquals(-1, calValidator.compareQuarters(value, cal20051101, 2), \"qtrB LT\"); // +1 quarter (Feb)\n        assertEquals(0, calValidator.compareQuarters(value, cal20051001, 2), \"qtrB =1\"); // same quarter\n        assertEquals(0, calValidator.compareQuarters(value, cal20050901, 2), \"qtrB =2\"); // +1 month\n        assertEquals(1, calValidator.compareQuarters(value, cal20050701, 2), \"qtrB =3\"); // same quarter\n        assertEquals(1, calValidator.compareQuarters(value, cal20050731, 2), \"qtrB =4\"); // -1 month\n        assertEquals(1, calValidator.compareQuarters(value, cal20050630, 2), \"qtrB GT\"); // -1 quarter\n\n        assertEquals(-1, calValidator.compareYears(value, cal20060101), \"year LT\"); // +1 year\n        assertEquals(0, calValidator.compareYears(value, cal20050101), \"year EQ\"); // same year\n        assertEquals(1, calValidator.compareYears(value, cal20041231), \"year GT\"); // -1 year\n\n        // invalid compare\n        try {\n            calValidator.compare(value, value, -1);\n            fail(\"Invalid Compare field - expected IllegalArgumentException to be thrown\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(e.getMessage(), \"Invalid field: -1\", \"check message\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "class_name": "CalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest compare date methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest.[void]testDateTimeStyle()", "name": "testDateTimeStyle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDateTimeStyle()", "original_string": "    @Test\n    public void testDateTimeStyle() {\n        // Set the default Locale\n        final Locale origDefault = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n\n        final AbstractCalendarValidator dateTimeValidator = new AbstractCalendarValidator(true, DateFormat.SHORT, DateFormat.SHORT) {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            protected Object processParsedValue(final Object value, final Format formatter) {\n                return value;\n            }\n        };\n        assertTrue(dateTimeValidator.isValid(\"31/12/05 14:23\"), \"validate(A) default\");\n        assertTrue(dateTimeValidator.isValid(\"12/31/05 2:23 PM\", Locale.US), \"validate(A) locale \");\n\n        // Restore the original default\n        Locale.setDefault(origDefault);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "class_name": "CalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Date/Time style Validator (there isn't an implementation for this)\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest.[void]testFormat()", "name": "testFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testFormat()", "original_string": "    @Override\n    @Test\n    public void testFormat() {\n        // Set the default Locale\n        final Locale origDefault = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n\n        final Calendar cal20050101 = createCalendar(GMT, 20051231, 11500);\n        assertNull(calValidator.format(null), \"null\");\n        assertEquals(\"31/12/05\", calValidator.format(cal20050101), \"default\");\n        assertEquals(\"12/31/05\", calValidator.format(cal20050101, Locale.US), \"locale\");\n        assertEquals(calValidator.format(cal20050101, \"yyyy-MM-dd HH:mm\"), \"2005-12-31 01:15\", \"patternA\");\n        assertEquals(calValidator.format(cal20050101, \"yyyy-MM-dd z\"), \"2005-12-31 GMT\", \"patternB\");\n        assertEquals(\"31 Dez 2005\", calValidator.format(cal20050101, \"dd MMM yyyy\", Locale.GERMAN), \"both\");\n\n        // EST Time Zone\n        assertEquals(\"30/12/05\", calValidator.format(cal20050101, EST), \"EST default\");\n        assertEquals(\"12/30/05\", calValidator.format(cal20050101, Locale.US, EST), \"EST locale\");\n        assertEquals(calValidator.format(cal20050101, \"yyyy-MM-dd HH:mm\", EST), \"2005-12-30 20:15\", \"EST patternA\");\n        assertEquals(calValidator.format(cal20050101, \"yyyy-MM-dd z\", EST), \"2005-12-30 EST\", \"EST patternB\");\n        assertEquals(\"30 Dez 2005\", calValidator.format(cal20050101, \"dd MMM yyyy\", Locale.GERMAN, EST), \"EST both\");\n\n        // Restore the original default\n        Locale.setDefault(origDefault);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "class_name": "CalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest format methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest.[void]testGetValidatorValidCode()", "name": "testGetValidatorValidCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidatorValidCode()", "original_string": "    @Test\n    public void testGetValidatorValidCode() {\n        String validCode = \"DE89370400440532013000\";\n        IBANValidator.Validator result = validator.getValidator(validCode);\n        assertNotNull(result);\n        assertEquals(\"DE\", result.countryCode);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java", "class_name": "IBANValidator_getValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest.[void]testGetValidatorNullCode()", "name": "testGetValidatorNullCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidatorNullCode()", "original_string": "    @Test\n    public void testGetValidatorNullCode() {\n        IBANValidator.Validator result = validator.getValidator(null);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java", "class_name": "IBANValidator_getValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest.[void]testGetValidatorShortCode()", "name": "testGetValidatorShortCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidatorShortCode()", "original_string": "    @Test\n    public void testGetValidatorShortCode() {\n        String shortCode = \"D\";\n        IBANValidator.Validator result = validator.getValidator(shortCode);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java", "class_name": "IBANValidator_getValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest.[void]testGetValidatorInvalidCode()", "name": "testGetValidatorInvalidCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidatorInvalidCode()", "original_string": "    @Test\n    public void testGetValidatorInvalidCode() {\n        String invalidCode = \"ZZ89370400440532013000\";\n        IBANValidator.Validator result = validator.getValidator(invalidCode);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java", "class_name": "IBANValidator_getValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java.IBANValidator_getValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testExceptions()", "name": "testExceptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExceptions()", "original_string": "    @Test\n    public void testExceptions() {\n        final String invalidRegex = \"^([abCD12]*$\";\n        try {\n            new RegexValidator(invalidRegex);\n        } catch (final PatternSyntaxException e) {\n            // expected\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest exceptions\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testGetPatterns()", "name": "testGetPatterns", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetPatterns()", "original_string": "    @Test\n    public void testGetPatterns() {\n        final RegexValidator regexValidator = new RegexValidator(MULTIPLE_REGEX);\n        assertNotSame(regexValidator.getPatterns(), regexValidator.getPatterns());\n        final Pattern[] patterns = regexValidator.getPatterns();\n        assertEquals(REGEX_1, patterns[0].pattern());\n        assertEquals(REGEX_2, patterns[1].pattern());\n        assertEquals(REGEX_3, patterns[2].pattern());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testMissingRegex()", "name": "testMissingRegex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingRegex()", "original_string": "    @Test\n    public void testMissingRegex() {\n\n        // Single Regular Expression - null\n        try {\n            new RegexValidator((String) null);\n            fail(\"Single Null - expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"Regular expression[0] is missing\", e.getMessage(), \"Single Null\");\n        }\n\n        // Single Regular Expression - Zero Length\n        try {\n            new RegexValidator(\"\");\n            fail(\"Single Zero Length - expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"Regular expression[0] is missing\", e.getMessage(), \"Single Zero Length\");\n        }\n\n        // Multiple Regular Expression - Null array\n        try {\n            new RegexValidator((String[]) null);\n            fail(\"Null Array - expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"Regular expressions are missing\", e.getMessage(), \"Null Array\");\n        }\n\n        // Multiple Regular Expression - Zero Length array\n        try {\n            new RegexValidator();\n            fail(\"Zero Length Array - expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"Regular expressions are missing\", e.getMessage(), \"Zero Length Array\");\n        }\n\n        // Multiple Regular Expression - Array has Null\n        String[] expressions = { \"ABC\", null };\n        try {\n            new RegexValidator(expressions);\n            fail(\"Array has Null - expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"Regular expression[1] is missing\", e.getMessage(), \"Array has Null\");\n        }\n\n        // Multiple Regular Expression - Array has Zero Length\n        expressions = new String[] { \"\", \"ABC\" };\n        try {\n            new RegexValidator(expressions);\n            fail(\"Array has Zero Length - expected IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"Regular expression[0] is missing\", e.getMessage(), \"Array has Zero Length\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest exceptions\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testMultipleInsensitive()", "name": "testMultipleInsensitive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleInsensitive()", "original_string": "    @Test\n    public void testMultipleInsensitive() {\n\n        // Set up In-sensitive Validators\n        final RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX, false);\n        final RegexValidator single1 = new RegexValidator(REGEX_1, false);\n        final RegexValidator single2 = new RegexValidator(REGEX_2, false);\n        final RegexValidator single3 = new RegexValidator(REGEX_3, false);\n\n        // Set up test values\n        String value = \"AAC FDE 321\";\n        final String expect = \"AACFDE321\";\n        final String[] array = { \"AAC\", \"FDE\", \"321\" };\n\n        // isValid()\n        assertTrue(multiple.isValid(value), \"isValid() Multiple\");\n        assertFalse(single1.isValid(value), \"isValid() 1st\");\n        assertTrue(single2.isValid(value), \"isValid() 2nd\");\n        assertFalse(single3.isValid(value), \"isValid() 3rd\");\n\n        // validate()\n        assertEquals(expect, multiple.validate(value), \"validate() Multiple\");\n        assertNull(single1.validate(value), \"validate() 1st\");\n        assertEquals(expect, single2.validate(value), \"validate() 2nd\");\n        assertNull(single3.validate(value), \"validate() 3rd\");\n\n        // match()\n        checkArray(\"match() Multiple\", array, multiple.match(value));\n        checkArray(\"match() 1st\", null, single1.match(value));\n        checkArray(\"match() 2nd\", array, single2.match(value));\n        checkArray(\"match() 3rd\", null, single3.match(value));\n\n        // All invalid\n        value = \"AAC*FDE*321\";\n        assertFalse(multiple.isValid(value), \"isValid() Invalid\");\n        assertNull(multiple.validate(value), \"validate() Invalid\");\n        assertNull(multiple.match(value), \"match() Multiple\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest with multiple regular expressions (case in-sensitive).\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testMultipleSensitive()", "name": "testMultipleSensitive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleSensitive()", "original_string": "    @Test\n    public void testMultipleSensitive() {\n\n        // Set up Sensitive Validators\n        final RegexValidator multiple = new RegexValidator(MULTIPLE_REGEX);\n        final RegexValidator single1 = new RegexValidator(REGEX_1);\n        final RegexValidator single2 = new RegexValidator(REGEX_2);\n        final RegexValidator single3 = new RegexValidator(REGEX_3);\n\n        // Set up test values\n        String value = \"aac FDE 321\";\n        final String expect = \"aacFDE321\";\n        final String[] array = { \"aac\", \"FDE\", \"321\" };\n\n        // isValid()\n        assertTrue( multiple.isValid(value), \"Sensitive isValid() Multiple\");\n        assertFalse(single1.isValid(value), \"Sensitive isValid() 1st\");\n        assertTrue( single2.isValid(value), \"Sensitive isValid() 2nd\");\n        assertFalse(single3.isValid(value), \"Sensitive isValid() 3rd\");\n\n        // validate()\n        assertEquals(expect, multiple.validate(value), \"Sensitive validate() Multiple\");\n        assertNull(single1.validate(value), \"Sensitive validate() 1st\");\n        assertEquals(expect, single2.validate(value), \"Sensitive validate() 2nd\");\n        assertNull(single3.validate(value), \"Sensitive validate() 3rd\");\n\n        // match()\n        checkArray(\"Sensitive match() Multiple\", array, multiple.match(value));\n        checkArray(\"Sensitive match() 1st\", null, single1.match(value));\n        checkArray(\"Sensitive match() 2nd\", array, single2.match(value));\n        checkArray(\"Sensitive match() 3rd\", null, single3.match(value));\n\n        // All invalid\n        value = \"AAC*FDE*321\";\n        assertFalse(multiple.isValid(value), \"isValid() Invalid\");\n        assertNull(multiple.validate(value), \"validate() Invalid\");\n        assertNull(multiple.match(value), \"match() Multiple\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest with multiple regular expressions (case sensitive).\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testNullValue()", "name": "testNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullValue()", "original_string": "    @Test\n    public void testNullValue() {\n\n        final RegexValidator validator = new RegexValidator(REGEX);\n        assertFalse(validator.isValid(null), \"Instance isValid()\");\n        assertNull(validator.validate(null), \"Instance validate()\");\n        assertNull(validator.match(null), \"Instance match()\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Null value\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testSingle()", "name": "testSingle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingle()", "original_string": "    @Test\n    public void testSingle() {\n        final RegexValidator sensitive = new RegexValidator(REGEX);\n        final RegexValidator insensitive = new RegexValidator(REGEX, false);\n\n        // isValid()\n        assertTrue( sensitive.isValid(\"ac-DE-1\"), \"Sensitive isValid() valid\");\n        assertFalse(sensitive.isValid(\"AB-de-1\"), \"Sensitive isValid() invalid\");\n        assertTrue( insensitive.isValid(\"AB-de-1\"), \"Insensitive isValid() valid\");\n        assertFalse(insensitive.isValid(\"ABd-de-1\"), \"Insensitive isValid() invalid\");\n\n        // validate()\n        assertEquals(sensitive.validate(\"ac-DE-1\"), \"acDE1\", \"Sensitive validate() valid\");\n        assertNull(sensitive.validate(\"AB-de-1\"), \"Sensitive validate() invalid\");\n        assertEquals(insensitive.validate(\"AB-de-1\"), \"ABde1\", \"Insensitive validate() valid\");\n        assertNull(insensitive.validate(\"ABd-de-1\"), \"Insensitive validate() invalid\");\n\n        // match()\n        checkArray(\"Sensitive match() valid\", new String[] { \"ac\", \"DE\", \"1\" }, sensitive.match(\"ac-DE-1\"));\n        checkArray(\"Sensitive match() invalid\", null, sensitive.match(\"AB-de-1\"));\n        checkArray(\"Insensitive match() valid\", new String[] { \"AB\", \"de\", \"1\" }, insensitive.match(\"AB-de-1\"));\n        checkArray(\"Insensitive match() invalid\", null, insensitive.match(\"ABd-de-1\"));\n        assertEquals(new RegexValidator(\"^([A-Z]*)$\").validate(\"ABC\"), \"ABC\", \"validate one\");\n        checkArray(\"match one\", new String[] { \"ABC\" }, new RegexValidator(\"^([A-Z]*)$\").match(\"ABC\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest instance methods with single regular expression.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        final RegexValidator single = new RegexValidator(REGEX);\n        assertEquals(single.toString(), \"RegexValidator{\" + REGEX + \"}\", \"Single\");\n\n        final RegexValidator multiple = new RegexValidator(REGEX, REGEX);\n        assertEquals(multiple.toString(), \"RegexValidator{\" + REGEX + \",\" + REGEX + \"}\", \"Multiple\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest toString() method\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testValidIPv6Address()", "name": "testValidIPv6Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidIPv6Address()", "original_string": "    @Test\n    public void testValidIPv6Address() {\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"), \"2001:0db8:85a3:0000:0000:8a2e:0370:7334 should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testInvalidIPv6Address()", "name": "testInvalidIPv6Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidIPv6Address()", "original_string": "    @Test\n    public void testInvalidIPv6Address() {\n        assertFalse(validator.isValidInet6Address(\"2001:0db8:85a3::8a2e:0370:7334::\"), \"2001:0db8:85a3::8a2e:0370:7334:: should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testIPv6AddressWithPrefix()", "name": "testIPv6AddressWithPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6AddressWithPrefix()", "original_string": "    @Test\n    public void testIPv6AddressWithPrefix() {\n        assertTrue(validator.isValidInet6Address(\"2001:0db8:85a3::8a2e:0370:7334/64\"), \"2001:0db8:85a3::8a2e:0370:7334/64 should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testIPv6AddressWithInvalidPrefix()", "name": "testIPv6AddressWithInvalidPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6AddressWithInvalidPrefix()", "original_string": "    @Test\n    public void testIPv6AddressWithInvalidPrefix() {\n        assertFalse(validator.isValidInet6Address(\"2001:0db8:85a3::8a2e:0370:7334/129\"), \"2001:0db8:85a3::8a2e:0370:7334/129 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testIPv6AddressWithZoneId()", "name": "testIPv6AddressWithZoneId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6AddressWithZoneId()", "original_string": "    @Test\n    public void testIPv6AddressWithZoneId() {\n        assertTrue(validator.isValidInet6Address(\"fe80::8a2e:0370:7334%eth0\"), \"fe80::8a2e:0370:7334%eth0 should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testIPv6AddressWithInvalidZoneId()", "name": "testIPv6AddressWithInvalidZoneId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6AddressWithInvalidZoneId()", "original_string": "    @Test\n    public void testIPv6AddressWithInvalidZoneId() {\n        assertFalse(validator.isValidInet6Address(\"fe80::8a2e:0370:7334%\"), \"fe80::8a2e:0370:7334% should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testIPv6AddressWithIPv4Ending()", "name": "testIPv6AddressWithIPv4Ending", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6AddressWithIPv4Ending()", "original_string": "    @Test\n    public void testIPv6AddressWithIPv4Ending() {\n        assertTrue(validator.isValidInet6Address(\"::ffff:192.0.2.128\"), \"::ffff:192.0.2.128 should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest.[void]testIPv6AddressWithInvalidIPv4Ending()", "name": "testIPv6AddressWithInvalidIPv4Ending", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIPv6AddressWithInvalidIPv4Ending()", "original_string": "    @Test\n    public void testIPv6AddressWithInvalidIPv4Ending() {\n        assertFalse(validator.isValidInet6Address(\"::ffff:192.0.2.256\"), \"::ffff:192.0.2.256 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "class_name": "InetAddressValidator_isValidInet6AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java.InetAddressValidator_isValidInet6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testConversionErrors()", "name": "testConversionErrors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConversionErrors()", "original_string": "    @Test\n    public void testConversionErrors() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        String input = null;\n        try {\n            input = \"123456789 \";\n            validator.convertToISBN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n        try {\n            input = \"12345678901\";\n            validator.convertToISBN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n        try {\n            input = \"\";\n            validator.convertToISBN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n        try {\n            input = \"X234567890\";\n            validator.convertToISBN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest method for {@link org.apache.commons.validator.routines.ISBNValidator#convertToISBN13(java.lang.String)}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testInvalid()", "name": "testInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalid()", "original_string": "    @Test\n    public void testInvalid() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        String baseCode = \"193011099\";\n        assertFalse(validator.isValid(baseCode + \"0\"), \"ISBN10-0\");\n        assertFalse(validator.isValid(baseCode + \"1\"), \"ISBN10-1\");\n        assertFalse(validator.isValid(baseCode + \"2\"), \"ISBN10-2\");\n        assertFalse(validator.isValid(baseCode + \"3\"), \"ISBN10-3\");\n        assertFalse(validator.isValid(baseCode + \"4\"), \"ISBN10-4\");\n        assertTrue(validator.isValid(baseCode + \"5\"), \"ISBN10-5\"); // valid check digit\n        assertFalse(validator.isValid(baseCode + \"6\"), \"ISBN10-6\");\n        assertFalse(validator.isValid(baseCode + \"7\"), \"ISBN10-7\");\n        assertFalse(validator.isValid(baseCode + \"8\"), \"ISBN10-8\");\n        assertFalse(validator.isValid(baseCode + \"9\"), \"ISBN10-9\");\n        assertFalse(validator.isValid(baseCode + \"X\"), \"ISBN10-X\");\n\n        baseCode = \"978193011099\";\n        assertFalse(validator.isValid(baseCode + \"0\"), \"ISBN13-0\");\n        assertTrue(validator.isValid(baseCode + \"1\"), \"ISBN13-1\"); // valid check digit\n        assertFalse(validator.isValid(baseCode + \"2\"), \"ISBN13-2\");\n        assertFalse(validator.isValid(baseCode + \"3\"), \"ISBN13-3\");\n        assertFalse(validator.isValid(baseCode + \"4\"), \"ISBN13-4\");\n        assertFalse(validator.isValid(baseCode + \"5\"), \"ISBN13-5\");\n        assertFalse(validator.isValid(baseCode + \"6\"), \"ISBN13-6\");\n        assertFalse(validator.isValid(baseCode + \"7\"), \"ISBN13-7\");\n        assertFalse(validator.isValid(baseCode + \"8\"), \"ISBN13-8\");\n        assertFalse(validator.isValid(baseCode + \"9\"), \"ISBN13-9\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid ISBN-10 codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testInvalidISBN10Format()", "name": "testInvalidISBN10Format", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidISBN10Format()", "original_string": "    @Test\n    public void testInvalidISBN10Format() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        final Pattern pattern = Pattern.compile(ISBNValidator.ISBN10_REGEX);\n        for (int i = 0; i < invalidISBN10Format.length; i++) {\n            assertFalse(pattern.matcher(invalidISBN10Format[i]).matches(), \"Pattern[\" + i + \"]=\" + invalidISBN10Format[i]);\n            assertFalse(validator.isValidISBN10(invalidISBN10Format[i]), \"isValidISBN10[\" + i + \"]=\" + invalidISBN10Format[i]);\n            assertNull(validator.validateISBN10(invalidISBN10Format[i]), \"validateISBN10[\" + i + \"]=\" + invalidISBN10Format[i]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid ISBN-10 formats.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testInvalidISBN13Format()", "name": "testInvalidISBN13Format", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidISBN13Format()", "original_string": "    @Test\n    public void testInvalidISBN13Format() {\n        final Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        for (int i = 0; i < invalidISBN13Format.length; i++) {\n            assertFalse(pattern.matcher(invalidISBN13Format[i]).matches(), \"Pattern[\" + i + \"]=\" + invalidISBN13Format[i]);\n            assertFalse(validator.isValidISBN13(invalidISBN13Format[i]), \"isValidISBN13[\" + i + \"]=\" + invalidISBN13Format[i]);\n            assertNull(validator.validateISBN13(invalidISBN13Format[i]), \"validateISBN13[\" + i + \"]=\" + invalidISBN13Format[i]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid ISBN-13 formats.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testIsValidISBN10()", "name": "testIsValidISBN10", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidISBN10()", "original_string": "    @Test\n    public void testIsValidISBN10() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        assertTrue(validator.isValidISBN10(\"1930110995\"), \"isValidISBN10-1\");\n        assertTrue(validator.isValidISBN10(\"1-930110-99-5\"), \"isValidISBN10-2\");\n        assertTrue(validator.isValidISBN10(\"1 930110 99 5\"), \"isValidISBN10-3\");\n        assertTrue(validator.isValidISBN10(\"020163385X\"), \"isValidISBN10-4\");\n        assertTrue(validator.isValidISBN10(\"0-201-63385-X\"), \"isValidISBN10-5\");\n        assertTrue(validator.isValidISBN10(\"0 201 63385 X\"), \"isValidISBN10-6\");\n\n        assertTrue(validator.isValid(\"1930110995\"), \"isValid-1\");\n        assertTrue(validator.isValid(\"1-930110-99-5\"), \"isValid-2\");\n        assertTrue(validator.isValid(\"1 930110 99 5\"), \"isValid-3\");\n        assertTrue(validator.isValid(\"020163385X\"), \"isValid-4\");\n        assertTrue(validator.isValid(\"0-201-63385-X\"), \"isValid-5\");\n        assertTrue(validator.isValid(\"0 201 63385 X\"), \"isValid-6\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest isValid() ISBN-10 codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testIsValidISBN13()", "name": "testIsValidISBN13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidISBN13()", "original_string": "    @Test\n    public void testIsValidISBN13() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        assertTrue(validator.isValidISBN13(\"9781930110991\"), \"isValidISBN13-1\");\n        assertTrue(validator.isValidISBN13(\"978-1-930110-99-1\"), \"isValidISBN13-2\");\n        assertTrue(validator.isValidISBN13(\"978 1 930110 99 1\"), \"isValidISBN13-3\");\n        assertTrue(validator.isValidISBN13(\"9780201633856\"), \"isValidISBN13-4\");\n        assertTrue(validator.isValidISBN13(\"978-0-201-63385-6\"), \"isValidISBN13-5\");\n        assertTrue(validator.isValidISBN13(\"978 0 201 63385 6\"), \"isValidISBN13-6\");\n\n        assertTrue(validator.isValid(\"9781930110991\"), \"isValid-1\");\n        assertTrue(validator.isValid(\"978-1-930110-99-1\"), \"isValid-2\");\n        assertTrue(validator.isValid(\"978 1 930110 99 1\"), \"isValid-3\");\n        assertTrue(validator.isValid(\"9780201633856\"), \"isValid-4\");\n        assertTrue(validator.isValid(\"978-0-201-63385-6\"), \"isValid-5\");\n        assertTrue(validator.isValid(\"978 0 201 63385 6\"), \"isValid-6\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest isValid() ISBN-13 codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testNull()", "name": "testNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNull()", "original_string": "    @Test\n    public void testNull() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        assertFalse(validator.isValid(null), \"isValid\");\n        assertFalse(validator.isValidISBN10(null), \"isValidISBN10\");\n        assertFalse(validator.isValidISBN13(null), \"isValidISBN13\");\n        assertNull(validator.validate(null), \"validate\");\n        assertNull(validator.validateISBN10(null), \"validateISBN10\");\n        assertNull(validator.validateISBN13(null), \"validateISBN13\");\n        assertNull(validator.convertToISBN13(null), \"convertToISBN13\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest null values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testValidateISBN10()", "name": "testValidateISBN10", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateISBN10()", "original_string": "    @Test\n    public void testValidateISBN10() {\n        final ISBNValidator validator = ISBNValidator.getInstance(false);\n        assertEquals(validator.validateISBN10(\"1930110995\"), \"1930110995\", \"validateISBN10-1\");\n        assertEquals(validator.validateISBN10(\"1-930110-99-5\"), \"1930110995\", \"validateISBN10-2\");\n        assertEquals(validator.validateISBN10(\"1 930110 99 5\"), \"1930110995\", \"validateISBN10-3\");\n        assertEquals(validator.validateISBN10(\"020163385X\"), \"020163385X\", \"validateISBN10-4\");\n        assertEquals(validator.validateISBN10(\"0-201-63385-X\"), \"020163385X\", \"validateISBN10-5\");\n        assertEquals(validator.validateISBN10(\"0 201 63385 X\"), \"020163385X\", \"validateISBN10-6\");\n\n        assertEquals(validator.validate(\"1930110995\"), \"1930110995\", \"validate-1\");\n        assertEquals(validator.validate(\"1-930110-99-5\"), \"1930110995\", \"validate-2\");\n        assertEquals(validator.validate(\"1 930110 99 5\"), \"1930110995\", \"validate-3\");\n        assertEquals(validator.validate(\"020163385X\"), \"020163385X\", \"validate-4\");\n        assertEquals(validator.validate(\"0-201-63385-X\"), \"020163385X\", \"validate-5\");\n        assertEquals(validator.validate(\"0 201 63385 X\"), \"020163385X\", \"validate-6\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest validate() ISBN-10 codes (don't convert)\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testValidateISBN10Convert()", "name": "testValidateISBN10Convert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateISBN10Convert()", "original_string": "    @Test\n    public void testValidateISBN10Convert() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        assertEquals(validator.validate(\"1930110995\"), \"9781930110991\", \"validate-1\");\n        assertEquals(validator.validate(\"1-930110-99-5\"), \"9781930110991\", \"validate-2\");\n        assertEquals(validator.validate(\"1 930110 99 5\"), \"9781930110991\", \"validate-3\");\n        assertEquals(validator.validate(\"020163385X\"), \"9780201633856\", \"validate-4\");\n        assertEquals(validator.validate(\"0-201-63385-X\"), \"9780201633856\", \"validate-5\");\n        assertEquals(validator.validate(\"0 201 63385 X\"), \"9780201633856\", \"validate-6\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest validate() ISBN-10 codes (convert)\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testValidateISBN13()", "name": "testValidateISBN13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateISBN13()", "original_string": "    @Test\n    public void testValidateISBN13() {\n        final ISBNValidator validator = ISBNValidator.getInstance();\n        assertEquals(validator.validateISBN13(\"9781930110991\"), \"9781930110991\", \"validateISBN13-1\");\n        assertEquals(validator.validateISBN13(\"978-1-930110-99-1\"), \"9781930110991\", \"validateISBN13-2\");\n        assertEquals(validator.validateISBN13(\"978 1 930110 99 1\"), \"9781930110991\", \"validateISBN13-3\");\n        assertEquals(validator.validateISBN13(\"9780201633856\"), \"9780201633856\", \"validateISBN13-4\");\n        assertEquals(validator.validateISBN13(\"978-0-201-63385-6\"), \"9780201633856\", \"validateISBN13-5\");\n        assertEquals(validator.validateISBN13(\"978 0 201 63385 6\"), \"9780201633856\", \"validateISBN13-6\");\n\n        assertEquals(validator.validate(\"9781930110991\"), \"9781930110991\", \"validate-1\");\n        assertEquals(validator.validate(\"978-1-930110-99-1\"), \"9781930110991\", \"validate-2\");\n        assertEquals(validator.validate(\"978 1 930110 99 1\"), \"9781930110991\", \"validate-3\");\n        assertEquals(validator.validate(\"9780201633856\"), \"9780201633856\", \"validate-4\");\n        assertEquals(validator.validate(\"978-0-201-63385-6\"), \"9780201633856\", \"validate-5\");\n        assertEquals(validator.validate(\"978 0 201 63385 6\"), \"9780201633856\", \"validate-6\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest validate() ISBN-13 codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testValidISBN10Format()", "name": "testValidISBN10Format", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidISBN10Format()", "original_string": "    @Test\n    public void testValidISBN10Format() {\n        final Pattern pattern = Pattern.compile(ISBNValidator.ISBN10_REGEX);\n        for (int i = 0; i < validISBN10Format.length; i++) {\n            assertTrue(pattern.matcher(validISBN10Format[i]).matches(), \"Pattern[\" + i + \"]=\" + validISBN10Format[i]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid ISBN-10 formats.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest.[void]testValidISBN13Format()", "name": "testValidISBN13Format", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidISBN13Format()", "original_string": "    @Test\n    public void testValidISBN13Format() {\n        final Pattern pattern = Pattern.compile(ISBNValidator.ISBN13_REGEX);\n        for (int i = 0; i < validISBN13Format.length; i++) {\n            assertTrue(pattern.matcher(validISBN13Format[i]).matches(), \"Pattern[\" + i + \"]=\" + validISBN13Format[i]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java", "class_name": "ISBNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISBNValidatorTest.java.ISBNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid ISBN-13 formats.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java.DoubleValidatorTest.[void]testDoubleRangeMinMax()", "name": "testDoubleRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleRangeMinMax()", "original_string": "    @Test\n    public void testDoubleRangeMinMax() {\n        final DoubleValidator validator = (DoubleValidator) strictValidator;\n        final Double number9 = validator.validate(\"9\", \"#\");\n        final Double number10 = validator.validate(\"10\", \"#\");\n        final Double number11 = validator.validate(\"11\", \"#\");\n        final Double number19 = validator.validate(\"19\", \"#\");\n        final Double number20 = validator.validate(\"20\", \"#\");\n        final Double number21 = validator.validate(\"21\", \"#\");\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java", "class_name": "DoubleValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java.DoubleValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Double Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java.DoubleValidatorTest.[void]testDoubleValidatorMethods()", "name": "testDoubleValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleValidatorMethods()", "original_string": "    @Test\n    public void testDoubleValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String germanPatternVal = \"1.23.45\";\n        final String localeVal = \"12.345\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final Double expected = Double.valueOf(12345);\n        assertEquals(expected, DoubleValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, DoubleValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\n        assertEquals(expected, DoubleValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, DoubleValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(DoubleValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(DoubleValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\n        assertTrue(DoubleValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(DoubleValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(DoubleValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(DoubleValidator.getInstance().validate(xxxx, locale), \"validate(B) locale \");\n        assertNull(DoubleValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(DoubleValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(DoubleValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(DoubleValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\n        assertFalse(DoubleValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(DoubleValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java", "class_name": "DoubleValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java.DoubleValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest DoubleValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testConversionErrors()", "name": "testConversionErrors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConversionErrors()", "original_string": "    @Test\n    public void testConversionErrors() {\n        String input = null;\n        try {\n            input = \"9780072129519\";\n            VALIDATOR.extractFromEAN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n        try {\n            input = \"9791090636071\";\n            VALIDATOR.extractFromEAN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n        try {\n            input = \"03178471\";\n            VALIDATOR.extractFromEAN13(input);\n            fail(\"Expected IllegalArgumentException for '\" + input + \"'\");\n        } catch (final IllegalArgumentException e) {\n            // expected result\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid EAN-13 ISSN prefix codes Test Input length\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testInvalid()", "name": "testInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalid()", "original_string": "    @Test\n    public void testInvalid() {\n        for (final String f : INVALID_FORMAT) {\n            assertFalse(VALIDATOR.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid ISSN codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testIsValidExtract()", "name": "testIsValidExtract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidExtract()", "original_string": "    @Test\n    public void testIsValidExtract() {\n        assertEquals(\"12345679\", VALIDATOR.extractFromEAN13(\"9771234567003\"));\n        assertEquals(\"00014664\", VALIDATOR.extractFromEAN13(\"9770001466006\"));\n        assertEquals(\"03178471\", VALIDATOR.extractFromEAN13(\"9770317847001\"));\n        assertEquals(\"1144875X\", VALIDATOR.extractFromEAN13(\"9771144875007\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest valid EAN-13 ISSN codes and extract the ISSN\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testIsValidISSN()", "name": "testIsValidISSN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidISSN()", "original_string": "    @Test\n    public void testIsValidISSN() {\n        for (final String f : VALID_FORMAT) {\n            assertTrue(VALIDATOR.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest isValid() ISSN codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testIsValidISSNConvert()", "name": "testIsValidISSNConvert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidISSNConvert()", "original_string": "    @Test\n    public void testIsValidISSNConvert() {\n        final CheckDigit ean13cd = EAN13CheckDigit.EAN13_CHECK_DIGIT;\n        final Random r = new Random();\n        for (final String f : VALID_FORMAT) {\n            final String suffix = String.format(\"%02d\", r.nextInt(100));\n            final String ean13 = VALIDATOR.convertToEAN13(f, suffix);\n            assertTrue(ean13cd.isValid(ean13), ean13);\n        }\n        // internet samples\n        assertEquals(VALIDATOR.convertToEAN13(\"1144-875X\", \"00\"), \"9771144875007\");\n        assertEquals(VALIDATOR.convertToEAN13(\"0264-3596\", \"00\"), \"9770264359008\");\n        assertEquals(VALIDATOR.convertToEAN13(\"1234-5679\", \"00\"), \"9771234567003\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest isValid() ISSN codes and convert them\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testIsValidISSNConvertNull()", "name": "testIsValidISSNConvertNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidISSNConvertNull()", "original_string": "    @Test\n    public void testIsValidISSNConvertNull() {\n        assertNull(VALIDATOR.convertToEAN13(null, \"00\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testIsValidISSNConvertSuffix()", "name": "testIsValidISSNConvertSuffix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidISSNConvertSuffix()", "original_string": "    @Test\n    public void testIsValidISSNConvertSuffix() {\n        assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, null));\n        assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"\"));\n        assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"0\"));\n        assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"A\"));\n        assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"AA\"));\n        assertThrows(IllegalArgumentException.class, () -> VALIDATOR.convertToEAN13(null, \"999\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testNull()", "name": "testNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNull()", "original_string": "    @Test\n    public void testNull() {\n        assertFalse(VALIDATOR.isValid(null), \"isValid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest null values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest.[void]testValidCheckDigitEan13()", "name": "testValidCheckDigitEan13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidCheckDigitEan13()", "original_string": "    @Test\n    public void testValidCheckDigitEan13() {\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567001\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567002\"));\n        assertNotNull(VALIDATOR.extractFromEAN13(\"9771234567003\")); // valid check digit\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567004\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567005\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567006\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567007\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567008\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567009\"));\n        assertNull(VALIDATOR.extractFromEAN13(\"9771234567000\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "class_name": "ISSNValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java.ISSNValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid EAN-13 ISSN codes\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java.DateValidator_compareDatesTest.[void]testCompareDatesEqual()", "name": "testCompareDatesEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareDatesEqual()", "original_string": "    @Test\n    public void testCompareDatesEqual() {\n        Date date1 = createDate(2023, Calendar.JANUARY, 1);\n        Date date2 = createDate(2023, Calendar.JANUARY, 1);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        int result = dateValidator.compareDates(date1, date2, timeZone);\n        assertEquals(0, result, \"Dates should be equal\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java", "class_name": "DateValidator_compareDatesTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java.DateValidator_compareDatesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java.DateValidator_compareDatesTest.[void]testCompareDatesLessThan()", "name": "testCompareDatesLessThan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareDatesLessThan()", "original_string": "    @Test\n    public void testCompareDatesLessThan() {\n        Date date1 = createDate(2023, Calendar.JANUARY, 1);\n        Date date2 = createDate(2023, Calendar.FEBRUARY, 1);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        int result = dateValidator.compareDates(date1, date2, timeZone);\n        assertEquals(-1, result, \"First date should be less than second date\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java", "class_name": "DateValidator_compareDatesTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java.DateValidator_compareDatesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java.DateValidator_compareDatesTest.[void]testCompareDatesGreaterThan()", "name": "testCompareDatesGreaterThan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareDatesGreaterThan()", "original_string": "    @Test\n    public void testCompareDatesGreaterThan() {\n        Date date1 = createDate(2023, Calendar.FEBRUARY, 1);\n        Date date2 = createDate(2023, Calendar.JANUARY, 1);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        int result = dateValidator.compareDates(date1, date2, timeZone);\n        assertEquals(1, result, \"First date should be greater than second date\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java", "class_name": "DateValidator_compareDatesTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java.DateValidator_compareDatesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testGetRegexValidatortPatterns()", "name": "testGetRegexValidatortPatterns", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetRegexValidatortPatterns()", "original_string": "    @Test\n    public void testGetRegexValidatortPatterns() {\n        assertNotNull(VALIDATOR.getValidator(\"GB\").getRegexValidator().getPatterns(), \"GB\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testGetValidator()", "name": "testGetValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidator()", "original_string": "    @Test\n    public void testGetValidator() {\n        assertNotNull(VALIDATOR.getValidator(\"GB\"), \"GB\");\n        assertNull(VALIDATOR.getValidator(\"gb\"), \"gb\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testHasValidator()", "name": "testHasValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasValidator()", "original_string": "    @Test\n    public void testHasValidator() {\n        assertTrue(VALIDATOR.hasValidator(\"GB\"), \"GB\");\n        assertFalse(VALIDATOR.hasValidator(\"gb\"), \"gb\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testInValid()", "name": "testInValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInValid()", "original_string": "    @Test\n    public void testInValid() {\n        for (final String f : INVALID_IBAN_FIXTURES) {\n            assertFalse(VALIDATOR.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testNull()", "name": "testNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNull()", "original_string": "    @Test\n    public void testNull() {\n        assertFalse(VALIDATOR.isValid(null), \"isValid(null)\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSetDefaultValidator1()", "name": "testSetDefaultValidator1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetDefaultValidator1()", "original_string": "    @Test\n    public void testSetDefaultValidator1() {\n        final IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> VALIDATOR.setValidator(\"GB\", 15, \"GB\"));\n        assertEquals(\"The singleton validator cannot be modified\", thrown.getMessage());\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSetDefaultValidator2()", "name": "testSetDefaultValidator2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetDefaultValidator2()", "original_string": "    @Test\n    public void testSetDefaultValidator2() {\n        final IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> VALIDATOR.setValidator(\"GB\", -1, \"GB\"));\n        assertEquals(\"The singleton validator cannot be modified\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSetValidatorLC()", "name": "testSetValidatorLC", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetValidatorLC()", "original_string": "    @Test\n    public void testSetValidatorLC() {\n        final IBANValidator validator = new IBANValidator();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> validator.setValidator(\"gb\", 15, \"GB\"));\n        assertEquals(\"Invalid country Code; must be exactly 2 upper-case characters\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSetValidatorLen1()", "name": "testSetValidatorLen1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetValidatorLen1()", "original_string": "    @Test\n    public void testSetValidatorLen1() {\n        final IBANValidator validator = new IBANValidator();\n        assertNotNull(validator.setValidator(\"GB\", -1, \"\"), \"should be present\");\n        assertNull(validator.setValidator(\"GB\", -1, \"\"), \"no longer present\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSetValidatorLen35()", "name": "testSetValidatorLen35", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetValidatorLen35()", "original_string": "    @Test\n    public void testSetValidatorLen35() {\n        final IBANValidator validator = new IBANValidator();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> validator.setValidator(\"GB\", 35, \"GB\"));\n        assertEquals(\"Invalid length parameter, must be in range 8 to 34 inclusive: 35\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSetValidatorLen7()", "name": "testSetValidatorLen7", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetValidatorLen7()", "original_string": "    @Test\n    public void testSetValidatorLen7() {\n        final IBANValidator validator = new IBANValidator();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> validator.setValidator(\"GB\", 7, \"GB\"));\n        assertEquals(\"Invalid length parameter, must be in range 8 to 34 inclusive: 7\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testSorted()", "name": "testSorted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSorted()", "original_string": "    @Test\n    public void testSorted() {\n        final IBANValidator validator = new IBANValidator();\n        final Validator[] vals = validator.getDefaultValidators();\n        assertNotNull(vals);\n        for (int i = 1; i < vals.length; i++) {\n            if (vals[i].countryCode.compareTo(vals[i - 1].countryCode) <= 0) {\n                fail(\"Not sorted: \" + vals[i].countryCode + \" <= \" + vals[i - 1].countryCode);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]testValid()", "name": "testValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValid()", "original_string": "    @Test\n    public void testValid() {\n        for (final String f : VALID_IBAN_FIXTURES) {\n            assertTrue(IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(f), \"Checksum fail: \" + f);\n            assertTrue(VALIDATOR.hasValidator(f), \"Missing validator: \" + f);\n            assertTrue(VALIDATOR.isValid(f), f);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareWeeksTest.java.DateValidator_compareWeeksTest.[void]testCompareWeeks()", "name": "testCompareWeeks", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareWeeks()", "original_string": "    @Test\n    public void testCompareWeeks() {\n        final int sameTime = 124522;\n        final int testDate = 20050823;\n\n        final Date value = createDate(GMT, testDate, sameTime); // test value\n        final Date date20050830 = createDate(GMT, 20050830, sameTime); // +1 week\n        final Date date20050816 = createDate(GMT, 20050816, sameTime); // -1 week\n\n        assertEquals(-1, dateValidator.compareWeeks(value, date20050830, GMT), \"week LT\"); // +1 week\n        assertEquals(0, dateValidator.compareWeeks(value, createDate(GMT, 20050824, sameTime), GMT), \"week =1\"); // +1 day\n        assertEquals(0, dateValidator.compareWeeks(value, createDate(GMT, 20050822, sameTime), GMT), \"week =2\"); // same week\n        assertEquals(0, dateValidator.compareWeeks(value, createDate(GMT, 20050822, sameTime), GMT), \"week =3\"); // -1 day\n        assertEquals(1, dateValidator.compareWeeks(value, date20050816, GMT), \"week GT\"); // -1 week\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareWeeksTest.java", "class_name": "DateValidator_compareWeeksTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareWeeksTest.java.DateValidator_compareWeeksTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest.[void]testFormatType()", "name": "testFormatType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormatType()", "original_string": "    @Test\n    public void testFormatType() {\n        assertEquals(2, PercentValidator.getInstance().getFormatType(), \"Format Type A\");\n        assertEquals(AbstractNumberValidator.PERCENT_FORMAT, PercentValidator.getInstance().getFormatType(), \"Format Type B\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java", "class_name": "PercentValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Format Type\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest.[void]testInvalid()", "name": "testInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalid()", "original_string": "    @Test\n    public void testInvalid() {\n        final BigDecimalValidator validator = PercentValidator.getInstance();\n\n        // Invalid Missing\n        assertFalse(validator.isValid(null), \"isValid() Null Value\");\n        assertFalse(validator.isValid(\"\"), \"isValid() Empty Value\");\n        assertNull(validator.validate(null), \"validate() Null Value\");\n        assertNull(validator.validate(\"\"), \"validate() Empty Value\");\n\n        // Invalid UK\n        assertFalse(validator.isValid(\"12@\", Locale.UK), \"UK wrong symbol\"); // ???\n        assertFalse(validator.isValid(\"(12%)\", Locale.UK), \"UK wrong negative\");\n\n        // Invalid US - can't find a Locale with different symbols!\n        assertFalse(validator.isValid(\"12@\", Locale.US), \"US wrong symbol\"); // ???\n        assertFalse(validator.isValid(\"(12%)\", Locale.US), \"US wrong negative\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java", "class_name": "PercentValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid percentage values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest.[void]testValid()", "name": "testValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValid()", "original_string": "    @Test\n    public void testValid() {\n        // Set the default Locale\n        final Locale origDefault = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n\n        final BigDecimalValidator validator = PercentValidator.getInstance();\n        final BigDecimal expected = new BigDecimal(\"0.12\");\n        final BigDecimal negative = new BigDecimal(\"-0.12\");\n        final BigDecimal hundred = new BigDecimal(\"1.00\");\n\n        assertEquals(expected, validator.validate(\"12%\"), \"Default locale\");\n        assertEquals(negative, validator.validate(\"-12%\"), \"Default negtve\");\n\n        // Invalid UK\n        assertEquals(expected, validator.validate(\"12%\", Locale.UK), \"UK locale\");\n        assertEquals(negative, validator.validate(\"-12%\", Locale.UK), \"UK negative\");\n        assertEquals(expected, validator.validate(\"12\", Locale.UK), \"UK No symbol\");\n\n        // Invalid US - can't find a Locale with different symbols!\n        assertEquals(expected, validator.validate(\"12%\", Locale.US), \"US locale\");\n        assertEquals(negative, validator.validate(\"-12%\", Locale.US), \"US negative\");\n        assertEquals(expected, validator.validate(\"12\", Locale.US), \"US No symbol\");\n\n        assertEquals(hundred, validator.validate(\"100%\"), \"100%\");\n\n        // Restore the original default\n        Locale.setDefault(origDefault);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java", "class_name": "PercentValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid percentage values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest.[void]testValidIPv4Address()", "name": "testValidIPv4Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidIPv4Address()", "original_string": "    @Test\n    public void testValidIPv4Address() {\n        assertTrue(validator.isValidInet4Address(\"192.168.1.1\"), \"192.168.1.1 should be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "class_name": "InetAddressValidator_isValidInet4AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest.[void]testInvalidIPv4Address()", "name": "testInvalidIPv4Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidIPv4Address()", "original_string": "    @Test\n    public void testInvalidIPv4Address() {\n        assertFalse(validator.isValidInet4Address(\"256.256.256.256\"), \"256.256.256.256 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "class_name": "InetAddressValidator_isValidInet4AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest.[void]testInvalidIPv4AddressWithLeadingZero()", "name": "testInvalidIPv4AddressWithLeadingZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidIPv4AddressWithLeadingZero()", "original_string": "    @Test\n    public void testInvalidIPv4AddressWithLeadingZero() {\n        assertFalse(validator.isValidInet4Address(\"192.168.01.1\"), \"192.168.01.1 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "class_name": "InetAddressValidator_isValidInet4AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest.[void]testInvalidIPv4AddressWithEmptySegment()", "name": "testInvalidIPv4AddressWithEmptySegment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidIPv4AddressWithEmptySegment()", "original_string": "    @Test\n    public void testInvalidIPv4AddressWithEmptySegment() {\n        assertFalse(validator.isValidInet4Address(\"192.168..1\"), \"192.168..1 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "class_name": "InetAddressValidator_isValidInet4AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest.[void]testInvalidIPv4AddressWithNonNumericSegment()", "name": "testInvalidIPv4AddressWithNonNumericSegment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidIPv4AddressWithNonNumericSegment()", "original_string": "    @Test\n    public void testInvalidIPv4AddressWithNonNumericSegment() {\n        assertFalse(validator.isValidInet4Address(\"192.168.a.1\"), \"192.168.a.1 should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "class_name": "InetAddressValidator_isValidInet4AddressTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java.InetAddressValidator_isValidInet4AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java.DateValidator_compareMonthsTest.[void]testCompareMonthsEqual()", "name": "testCompareMonthsEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareMonthsEqual()", "original_string": "    @Test\n    public void testCompareMonthsEqual() {\n        Date date1 = createDate(2023, Calendar.JANUARY, 15);\n        Date date2 = createDate(2023, Calendar.JANUARY, 20);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        assertEquals(0, dateValidator.compareMonths(date1, date2, timeZone));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java", "class_name": "DateValidator_compareMonthsTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java.DateValidator_compareMonthsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java.DateValidator_compareMonthsTest.[void]testCompareMonthsLessThan()", "name": "testCompareMonthsLessThan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareMonthsLessThan()", "original_string": "    @Test\n    public void testCompareMonthsLessThan() {\n        Date date1 = createDate(2023, Calendar.JANUARY, 15);\n        Date date2 = createDate(2023, Calendar.FEBRUARY, 20);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        assertEquals(-1, dateValidator.compareMonths(date1, date2, timeZone));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java", "class_name": "DateValidator_compareMonthsTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java.DateValidator_compareMonthsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java.DateValidator_compareMonthsTest.[void]testCompareMonthsGreaterThan()", "name": "testCompareMonthsGreaterThan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareMonthsGreaterThan()", "original_string": "    @Test\n    public void testCompareMonthsGreaterThan() {\n        Date date1 = createDate(2023, Calendar.FEBRUARY, 15);\n        Date date2 = createDate(2023, Calendar.JANUARY, 20);\n        TimeZone timeZone = TimeZone.getDefault();\n\n        assertEquals(1, dateValidator.compareMonths(date1, date2, timeZone));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java", "class_name": "DateValidator_compareMonthsTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java.DateValidator_compareMonthsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testCheckDigit()", "name": "testCheckDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckDigit()", "original_string": "    @Test\n    public void testCheckDigit() {\n        CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\n        final String invalidEAN = \"9781930110992\";\n        final String validEAN = \"9781930110991\";\n\n        // Test no CheckDigit (i.e. null)\n        assertNull(validator.getCheckDigit(), \"No CheckDigit\");\n        assertEquals(invalidEAN, validator.validate(invalidEAN), \"No CheckDigit invalid\");\n        assertEquals(validEAN, validator.validate(validEAN), \"No CheckDigit valid\");\n        assertTrue(validator.isValid(invalidEAN), \"No CheckDigit (is) invalid\");\n        assertTrue(validator.isValid(validEAN), \"No CheckDigit (is) valid\");\n\n        // Use the EAN-13 check digit routine\n        validator = new CodeValidator((String) null, -1, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n\n        assertNotNull(validator.getCheckDigit(), \"EAN CheckDigit\");\n        assertNull(validator.validate(invalidEAN), \"EAN CheckDigit invalid\");\n        assertEquals(validEAN, validator.validate(validEAN), \"EAN CheckDigit valid\");\n        assertFalse(validator.isValid(invalidEAN), \"EAN CheckDigit (is) invalid\");\n        assertTrue(validator.isValid(validEAN), \"EAN CheckDigit (is) valid\");\n        assertNull(validator.validate(\"978193011099X\"), \"EAN CheckDigit ex\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Check Digit.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructors()", "original_string": "    @Test\n    public void testConstructors() {\n        CodeValidator validator;\n        final RegexValidator regex = new RegexValidator(\"^[0-9]*$\");\n\n        // Constructor 1\n        validator = new CodeValidator(regex, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        assertEquals(regex, validator.getRegexValidator(), \"Constructor 1 - regex\");\n        assertEquals(-1, validator.getMinLength(), \"Constructor 1 - min length\");\n        assertEquals(-1, validator.getMaxLength(), \"Constructor 1 - max length\");\n        assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 1 - check digit\");\n\n        // Constructor 2\n        validator = new CodeValidator(regex, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        assertEquals(regex, validator.getRegexValidator(), \"Constructor 2 - regex\");\n        assertEquals(13, validator.getMinLength(), \"Constructor 2 - min length\");\n        assertEquals(13, validator.getMaxLength(), \"Constructor 2 - max length\");\n        assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 2 - check digit\");\n\n        // Constructor 3\n        validator = new CodeValidator(regex, 10, 20, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        assertEquals(regex, validator.getRegexValidator(), \"Constructor 3 - regex\");\n        assertEquals(10, validator.getMinLength(), \"Constructor 3 - min length\");\n        assertEquals(20, validator.getMaxLength(), \"Constructor 3 - max length\");\n        assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 3 - check digit\");\n\n        // Constructor 4\n        validator = new CodeValidator(\"^[0-9]*$\", EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{^[0-9]*$}\", \"Constructor 4 - regex\");\n        assertEquals(-1, validator.getMinLength(), \"Constructor 4 - min length\");\n        assertEquals(-1, validator.getMaxLength(), \"Constructor 4 - max length\");\n        assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 4 - check digit\");\n\n        // Constructor 5\n        validator = new CodeValidator(\"^[0-9]*$\", 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{^[0-9]*$}\", \"Constructor 5 - regex\");\n        assertEquals(13, validator.getMinLength(), \"Constructor 5 - min length\");\n        assertEquals(13, validator.getMaxLength(), \"Constructor 5 - max length\");\n        assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 5 - check digit\");\n\n        // Constructor 6\n        validator = new CodeValidator(\"^[0-9]*$\", 10, 20, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{^[0-9]*$}\", \"Constructor 6 - regex\");\n        assertEquals(10, validator.getMinLength(), \"Constructor 6 - min length\");\n        assertEquals(20, validator.getMaxLength(), \"Constructor 6 - max length\");\n        assertEquals(EAN13CheckDigit.EAN13_CHECK_DIGIT, validator.getCheckDigit(), \"Constructor 6 - check digit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Regular Expression.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testLength()", "name": "testLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLength()", "original_string": "    @Test\n    public void testLength() {\n        CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\n        final String length10 = \"1234567890\";\n        final String length11 = \"12345678901\";\n        final String length12 = \"123456789012\";\n        final String length20 = \"12345678901234567890\";\n        final String length21 = \"123456789012345678901\";\n        final String length22 = \"1234567890123456789012\";\n\n        assertEquals(-1, validator.getMinLength(), \"No min\");\n        assertEquals(-1, validator.getMaxLength(), \"No max\");\n\n        assertEquals(length10, validator.validate(length10), \"No Length 10\");\n        assertEquals(length11, validator.validate(length11), \"No Length 11\");\n        assertEquals(length12, validator.validate(length12), \"No Length 12\");\n        assertEquals(length20, validator.validate(length20), \"No Length 20\");\n        assertEquals(length21, validator.validate(length21), \"No Length 21\");\n        assertEquals(length22, validator.validate(length22), \"No Length 22\");\n\n        validator = new CodeValidator((String) null, 11, -1, (CheckDigit) null);\n        assertEquals(11, validator.getMinLength(), \"Min 11 - min\");\n        assertEquals(-1, validator.getMaxLength(), \"Min 11 - max\");\n        assertNull(validator.validate(length10), \"Min 11 - 10\");\n        assertEquals(length11, validator.validate(length11), \"Min 11 - 11\");\n        assertEquals(length12, validator.validate(length12), \"Min 11 - 12\");\n        assertEquals(length20, validator.validate(length20), \"Min 11 - 20\");\n        assertEquals(length21, validator.validate(length21), \"Min 11 - 21\");\n        assertEquals(length22, validator.validate(length22), \"Min 11 - 22\");\n\n        validator = new CodeValidator((String) null, -1, 21, (CheckDigit) null);\n        assertEquals(-1, validator.getMinLength(), \"Max 21 - min\");\n        assertEquals(21, validator.getMaxLength(), \"Max 21 - max\");\n        assertEquals(length10, validator.validate(length10), \"Max 21 - 10\");\n        assertEquals(length11, validator.validate(length11), \"Max 21 - 11\");\n        assertEquals(length12, validator.validate(length12), \"Max 21 - 12\");\n        assertEquals(length20, validator.validate(length20), \"Max 21 - 20\");\n        assertEquals(length21, validator.validate(length21), \"Max 21 - 21\");\n        assertNull(validator.validate(length22), \"Max 21 - 22\");\n\n        validator = new CodeValidator((String) null, 11, 21, (CheckDigit) null);\n        assertEquals(11, validator.getMinLength(), \"Min 11 / Max 21 - min\");\n        assertEquals(21, validator.getMaxLength(), \"Min 11 / Max 21 - max\");\n        assertNull(validator.validate(length10), \"Min 11 / Max 21 - 10\");\n        assertEquals(length11, validator.validate(length11), \"Min 11 / Max 21 - 11\");\n        assertEquals(length12, validator.validate(length12), \"Min 11 / Max 21 - 12\");\n        assertEquals(length20, validator.validate(length20), \"Min 11 / Max 21 - 20\");\n        assertEquals(length21, validator.validate(length21), \"Min 11 / Max 21 - 21\");\n        assertNull(validator.validate(length22), \"Min 11 / Max 21 - 22\");\n\n        validator = new CodeValidator((String) null, 11, 11, (CheckDigit) null);\n        assertEquals(11, validator.getMinLength(), \"Exact 11 - min\");\n        assertEquals(11, validator.getMaxLength(), \"Exact 11 - max\");\n        assertNull(validator.validate(length10), \"Exact 11 - 10\");\n        assertEquals(length11, validator.validate(length11), \"Exact 11 - 11\");\n        assertNull(validator.validate(length12), \"Exact 11 - 12\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the minimum/maximum length\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testNoInput()", "name": "testNoInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoInput()", "original_string": "    @Test\n    public void testNoInput() {\n        final CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\n        assertNull(validator.validate(null), \"Null\");\n        assertNull(validator.validate(\"\"), \"Zero Length\");\n        assertNull(validator.validate(\"   \"), \"Spaces\");\n        assertEquals(validator.validate(\" A  \"), \"A\", \"Trimmed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Regular Expression.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testRegex()", "name": "testRegex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRegex()", "original_string": "    @Test\n    public void testRegex() {\n        CodeValidator validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\n\n        final String value2 = \"12\";\n        final String value3 = \"123\";\n        final String value4 = \"1234\";\n        final String value5 = \"12345\";\n        final String invalid = \"12a4\";\n\n        // No Regular Expression\n        assertNull(validator.getRegexValidator(), \"No Regex\");\n        assertEquals(value2, validator.validate(value2), \"No Regex 2\");\n        assertEquals(value3, validator.validate(value3), \"No Regex 3\");\n        assertEquals(value4, validator.validate(value4), \"No Regex 4\");\n        assertEquals(value5, validator.validate(value5), \"No Regex 5\");\n        assertEquals(invalid, validator.validate(invalid), \"No Regex invalid\");\n\n        // Regular Expression\n        String regex = \"^([0-9]{3,4})$\";\n        validator = new CodeValidator(regex, -1, -1, (CheckDigit) null);\n        assertNotNull(validator.getRegexValidator(), \"No Regex\");\n        assertNull(validator.validate(value2), \"Regex 2\");\n        assertEquals(value3, validator.validate(value3), \"Regex 3\");\n        assertEquals(value4, validator.validate(value4), \"Regex 4\");\n        assertNull(validator.validate(value5), \"Regex 5\");\n        assertNull(validator.validate(invalid), \"Regex invalid\");\n\n        // Reformatted\n        regex = \"^([0-9]{3})(?:[-\\\\s])([0-9]{3})$\";\n        validator = new CodeValidator(new RegexValidator(regex), 6, (CheckDigit) null);\n        assertEquals(validator.validate(\"123-456\"), \"123456\", \"Reformat 123-456\");\n        assertEquals(validator.validate(\"123 456\"), \"123456\", \"Reformat 123 456\");\n        assertNull(validator.validate(\"123456\"), \"Reformat 123456\");\n        assertNull(validator.validate(\"123.456\"), \"Reformat 123.456\");\n\n        regex = \"^(?:([0-9]{3})(?:[-\\\\s])([0-9]{3}))|([0-9]{6})$\";\n        validator = new CodeValidator(new RegexValidator(regex), 6, (CheckDigit) null);\n        assertEquals(validator.getRegexValidator().toString(), \"RegexValidator{\" + regex + \"}\", \"Reformat 2 Regex\");\n        assertEquals(validator.validate(\"123-456\"), \"123456\", \"Reformat 2 123-456\");\n        assertEquals(validator.validate(\"123 456\"), \"123456\", \"Reformat 2 123 456\");\n        assertEquals(validator.validate(\"123456\"), \"123456\", \"Reformat 2 123456\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Regular Expression.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testValidator294Part1()", "name": "testValidator294Part1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator294Part1()", "original_string": "    @Test\n    public void testValidator294Part1() {\n        CodeValidator validator = new CodeValidator((String) null, 0, -1, (CheckDigit) null);\n        assertNull(validator.validate(null), \"Null\");\n        validator = new CodeValidator((String) null, -1, 0, (CheckDigit) null);\n        assertNull(validator.validate(null), \"Null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest.[void]testValidator294Part2()", "name": "testValidator294Part2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator294Part2()", "original_string": "    @Test\n    public void testValidator294Part2() {\n        final CodeValidator validator = new CodeValidator((String) null, -1, 0, (CheckDigit) null);\n        assertNull(validator.validate(null), \"Null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "class_name": "CodeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java.CodeValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java.LongValidatorTest.[void]testLongRangeMinMax()", "name": "testLongRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongRangeMinMax()", "original_string": "    @Test\n    public void testLongRangeMinMax() {\n        final LongValidator validator = (LongValidator) strictValidator;\n        final Long number9 = validator.validate(\"9\", \"#\");\n        final Long number10 = validator.validate(\"10\", \"#\");\n        final Long number11 = validator.validate(\"11\", \"#\");\n        final Long number19 = validator.validate(\"19\", \"#\");\n        final Long number20 = validator.validate(\"20\", \"#\");\n        final Long number21 = validator.validate(\"21\", \"#\");\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java", "class_name": "LongValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java.LongValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Long Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java.LongValidatorTest.[void]testLongValidatorMethods()", "name": "testLongValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongValidatorMethods()", "original_string": "    @Test\n    public void testLongValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String germanPatternVal = \"1.23.45\";\n        final String localeVal = \"12.345\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final Long expected = Long.valueOf(12345);\n        assertEquals(expected, LongValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, LongValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\n        assertEquals(expected, LongValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, LongValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(LongValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(LongValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\n        assertTrue(LongValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(LongValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(LongValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(LongValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\n        assertNull(LongValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(LongValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(LongValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(LongValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\n        assertFalse(LongValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(LongValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java", "class_name": "LongValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java.LongValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest LongValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmail()", "name": "testEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmail()", "original_string": "    @Test\n    public void testEmail() {\n        assertTrue(validator.isValid(\"jsmith@apache.org\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailAtTLD()", "name": "testEmailAtTLD", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailAtTLD()", "original_string": "    @Test\n    public void testEmailAtTLD() {\n        final EmailValidator val = EmailValidator.getInstance(false, true);\n        assertTrue(val.isValid(\"test@com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation with a user at a TLD\n\nhttps://tools.ietf.org/html/rfc5321#section-2.3.5 (In the case of a top-level domain used by itself in an email address, a single string is used without\nany dots)\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailExtension()", "name": "testEmailExtension", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailExtension()", "original_string": "    @Test\n    public void testEmailExtension() {\n        assertTrue(validator.isValid(\"jsmith@apache.org\"));\n\n        assertTrue(validator.isValid(\"jsmith@apache.com\"));\n\n        assertTrue(validator.isValid(\"jsmith@apache.net\"));\n\n        assertTrue(validator.isValid(\"jsmith@apache.info\"));\n\n        assertFalse(validator.isValid(\"jsmith@apache.\"));\n\n        assertFalse(validator.isValid(\"jsmith@apache.c\"));\n\n        assertTrue(validator.isValid(\"someone@yahoo.museum\"));\n\n        assertFalse(validator.isValid(\"someone@yahoo.mu-seum\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailFromPerl()", "name": "testEmailFromPerl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Disabled(\"VALIDATOR-267\")\n    @Test\n    public void testEmailFromPerl()", "original_string": "    @Disabled(\"VALIDATOR-267\")\n    @Test\n    public void testEmailFromPerl() {\n        int errors = 0;\n        for (final ResultPair element : TEST_EMAIL_FROM_PERL) {\n            final String item = element.item;\n            final boolean exp = element.valid;\n            final boolean act = validator.isValid(item);\n            if (act != exp) {\n                System.out.printf(\"%s: expected %s actual %s%n\", item, exp, act);\n                errors += 1;\n            }\n        }\n        assertEquals(0, errors, \"Expected 0 errors\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Disabled(\"VALIDATOR-267\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@Disabled(\"VALIDATOR-267\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWrite this test based on perl Mail::RFC822::Address which takes its example email address directly from RFC822\n\nThis test fails so disable it The real solution is to fix the email parsing.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailLocalhost()", "name": "testEmailLocalhost", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailLocalhost()", "original_string": "    @Test\n    public void testEmailLocalhost() {\n        // Check the default is not to allow\n        final EmailValidator noLocal = EmailValidator.getInstance(false);\n        final EmailValidator allowLocal = EmailValidator.getInstance(true);\n        assertEquals(validator, noLocal);\n\n        // Depends on the validator\n        assertTrue(allowLocal.isValid(\"joe@localhost.localdomain\"), \"@localhost.localdomain should be accepted but wasn't\");\n        assertTrue(allowLocal.isValid(\"joe@localhost\"), \"@localhost should be accepted but wasn't\");\n\n        assertFalse(noLocal.isValid(\"joe@localhost.localdomain\"), \"@localhost.localdomain should be accepted but wasn't\");\n        assertFalse(noLocal.isValid(\"joe@localhost\"), \"@localhost should be accepted but wasn't\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that @localhost and @localhost.localdomain addresses are declared as valid when requested.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailUserName()", "name": "testEmailUserName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailUserName()", "original_string": "    @Test\n    public void testEmailUserName() {\n\n        assertTrue(validator.isValid(\"joe1blow@apache.org\"));\n\n        assertTrue(validator.isValid(\"joe$blow@apache.org\"));\n\n        assertTrue(validator.isValid(\"joe-@apache.org\"));\n\n        assertTrue(validator.isValid(\"joe_@apache.org\"));\n\n        assertTrue(validator.isValid(\"joe+@apache.org\")); // + is valid unquoted\n\n        assertTrue(validator.isValid(\"joe!@apache.org\")); // ! is valid unquoted\n\n        assertTrue(validator.isValid(\"joe*@apache.org\")); // * is valid unquoted\n\n        assertTrue(validator.isValid(\"joe'@apache.org\")); // ' is valid unquoted\n\n        assertTrue(validator.isValid(\"joe%45@apache.org\")); // % is valid unquoted\n\n        assertTrue(validator.isValid(\"joe?@apache.org\")); // ? is valid unquoted\n\n        assertTrue(validator.isValid(\"joe&@apache.org\")); // & ditto\n\n        assertTrue(validator.isValid(\"joe=@apache.org\")); // = ditto\n\n        assertTrue(validator.isValid(\"+joe@apache.org\")); // + is valid unquoted\n\n        assertTrue(validator.isValid(\"!joe@apache.org\")); // ! is valid unquoted\n\n        assertTrue(validator.isValid(\"*joe@apache.org\")); // * is valid unquoted\n\n        assertTrue(validator.isValid(\"'joe@apache.org\")); // ' is valid unquoted\n\n        assertTrue(validator.isValid(\"%joe45@apache.org\")); // % is valid unquoted\n\n        assertTrue(validator.isValid(\"?joe@apache.org\")); // ? is valid unquoted\n\n        assertTrue(validator.isValid(\"&joe@apache.org\")); // & ditto\n\n        assertTrue(validator.isValid(\"=joe@apache.org\")); // = ditto\n\n        assertTrue(validator.isValid(\"+@apache.org\")); // + is valid unquoted\n\n        assertTrue(validator.isValid(\"!@apache.org\")); // ! is valid unquoted\n\n        assertTrue(validator.isValid(\"*@apache.org\")); // * is valid unquoted\n\n        assertTrue(validator.isValid(\"'@apache.org\")); // ' is valid unquoted\n\n        assertTrue(validator.isValid(\"%@apache.org\")); // % is valid unquoted\n\n        assertTrue(validator.isValid(\"?@apache.org\")); // ? is valid unquoted\n\n        assertTrue(validator.isValid(\"&@apache.org\")); // & ditto\n\n        assertTrue(validator.isValid(\"=@apache.org\")); // = ditto\n\n        // UnQuoted Special characters are invalid\n\n        assertFalse(validator.isValid(\"joe.@apache.org\")); // . not allowed at end of local part\n\n        assertFalse(validator.isValid(\".joe@apache.org\")); // . not allowed at start of local part\n\n        assertFalse(validator.isValid(\".@apache.org\")); // . not allowed alone\n\n        assertTrue(validator.isValid(\"joe.ok@apache.org\")); // . allowed embedded\n\n        assertFalse(validator.isValid(\"joe..ok@apache.org\")); // .. not allowed embedded\n\n        assertFalse(validator.isValid(\"..@apache.org\")); // .. not allowed alone\n\n        assertFalse(validator.isValid(\"joe(@apache.org\"));\n\n        assertFalse(validator.isValid(\"joe)@apache.org\"));\n\n        assertFalse(validator.isValid(\"joe,@apache.org\"));\n\n        assertFalse(validator.isValid(\"joe;@apache.org\"));\n\n        // Quoted Special characters are valid\n        assertTrue(validator.isValid(\"\\\"joe.\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\".joe\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe+\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe@\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe!\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe*\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe'\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe(\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe)\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe,\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe%45\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe;\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe?\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe&\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"joe=\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\"..\\\"@apache.org\"));\n\n        // escaped quote character valid in quoted string\n        assertTrue(validator.isValid(\"\\\"john\\\\\\\"doe\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"john56789.john56789.john56789.john56789.john56789.john56789.john@example.com\"));\n\n        assertFalse(validator.isValid(\"john56789.john56789.john56789.john56789.john56789.john56789.john5@example.com\"));\n\n        assertTrue(validator.isValid(\"\\\\>escape\\\\\\\\special\\\\^characters\\\\<@example.com\"));\n\n        assertTrue(validator.isValid(\"Abc\\\\@def@example.com\"));\n\n        assertFalse(validator.isValid(\"Abc@def@example.com\"));\n\n        assertTrue(validator.isValid(\"space\\\\ monkey@example.com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWrite this test according to parts of RFC, as opposed to the type of character that is being tested.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithBogusCharacter()", "name": "testEmailWithBogusCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithBogusCharacter()", "original_string": "    @Test\n    public void testEmailWithBogusCharacter() {\n\n        assertFalse(validator.isValid(\"andy.noble@\\u008fdata-workshop.com\"));\n\n        // The ' character is valid in an email username.\n        assertTrue(validator.isValid(\"andy.o'reilly@data-workshop.com\"));\n\n        // But not in the domain name.\n        assertFalse(validator.isValid(\"andy@o'reilly.data-workshop.com\"));\n\n        // The + character is valid in an email username.\n        assertTrue(validator.isValid(\"foo+bar@i.am.not.in.us.example.com\"));\n\n        // But not in the domain name\n        assertFalse(validator.isValid(\"foo+bar@example+3.com\"));\n\n        // Domains with only special characters aren't allowed (VALIDATOR-286)\n        assertFalse(validator.isValid(\"test@%*.com\"));\n        assertFalse(validator.isValid(\"test@^&#.com\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation with an RCS-noncompliant character in the address.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithCommas()", "name": "testEmailWithCommas", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithCommas()", "original_string": "    @Test\n    public void testEmailWithCommas() {\n        assertFalse(validator.isValid(\"joeblow@apa,che.org\"));\n\n        assertFalse(validator.isValid(\"joeblow@apache.o,rg\"));\n\n        assertFalse(validator.isValid(\"joeblow@apache,org\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with commas.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithControlChars()", "name": "testEmailWithControlChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithControlChars()", "original_string": "    @Test\n    public void testEmailWithControlChars() {\n        for (char c = 0; c < 32; c++) {\n            assertFalse(validator.isValid(\"foo\" + c + \"bar@domain.com\"), \"Test control char \" + (int) c);\n        }\n        assertFalse(validator.isValid(\"foo\" + (char) 127 + \"bar@domain.com\"), \"Test control char 127\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with ASCII control characters. (i.e. ASCII chars 0 - 31 and 127)\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithDash()", "name": "testEmailWithDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithDash()", "original_string": "    @Test\n    public void testEmailWithDash() {\n        assertTrue(validator.isValid(\"andy.noble@data-workshop.com\"));\n\n        assertFalse(validator.isValid(\"andy-noble@data-workshop.-com\"));\n\n        assertFalse(validator.isValid(\"andy-noble@data-workshop.c-om\"));\n\n        assertFalse(validator.isValid(\"andy-noble@data-workshop.co-m\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n<p>\nTests the e-mail validation with a dash in the address.\n</p>\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithDotEnd()", "name": "testEmailWithDotEnd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithDotEnd()", "original_string": "    @Test\n    public void testEmailWithDotEnd() {\n        assertFalse(validator.isValid(\"andy.noble@data-workshop.com.\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the e-mail validation with a dot at the end of the address.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithNumericAddress()", "name": "testEmailWithNumericAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithNumericAddress()", "original_string": "    @Test\n    public void testEmailWithNumericAddress() {\n        assertTrue(validator.isValid(\"someone@[216.109.118.76]\"));\n        assertTrue(validator.isValid(\"someone@yahoo.com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with numeric domains.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithSlashes()", "name": "testEmailWithSlashes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithSlashes()", "original_string": "    @Test\n    public void testEmailWithSlashes() {\n        assertTrue(validator.isValid(\"joe!/blow@apache.org\"), \"/ and ! valid in username\");\n        assertFalse(validator.isValid(\"joe@ap/ache.org\"), \"/ not valid in domain\");\n        assertFalse(validator.isValid(\"joe@apac!he.org\"), \"! not valid in domain\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVALIDATOR-296 - A / or a ! is valid in the user part, but not in the domain part\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testEmailWithSpaces()", "name": "testEmailWithSpaces", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmailWithSpaces()", "original_string": "    @Test\n    public void testEmailWithSpaces() {\n        assertFalse(validator.isValid(\"joeblow @apache.org\"));\n\n        assertFalse(validator.isValid(\"joeblow@ apache.org\"));\n\n        assertFalse(validator.isValid(\" joeblow@apache.org\"));\n\n        assertFalse(validator.isValid(\"joeblow@apache.org \"));\n\n        assertFalse(validator.isValid(\"joe blow@apache.org \"));\n\n        assertFalse(validator.isValid(\"joeblow@apa che.org \"));\n\n        assertTrue(validator.isValid(\"\\\"joeblow \\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\" joeblow\\\"@apache.org\"));\n\n        assertTrue(validator.isValid(\"\\\" joe blow \\\"@apache.org\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the email validation with spaces.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator235()", "name": "testValidator235", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator235()", "original_string": "    @Test\n    public void testValidator235() {\n        final String version = SystemProperties.getJavaVersion();\n        if (version.compareTo(\"1.6\") < 0) {\n            System.out.println(\"Cannot run Unicode IDN tests\");\n            return; // Cannot run the test\n        }\n        assertTrue(validator.isValid(\"someone@xn--d1abbgf6aiiy.xn--p1ai\"), \"xn--d1abbgf6aiiy.xn--p1ai should validate\");\n        assertTrue(validator.isValid(\"someone@\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\"), \"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate\");\n        assertTrue(validator.isValid(\"someone@www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\n        assertFalse(validator.isValid(\"someone@www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\n        assertTrue(validator.isValid(\"someone@www.b\\u00fccher.ch\"), \"www.b\\u00fccher.ch should validate\");\n        assertFalse(validator.isValid(\"someone@www.\\uFFFD.ch\"), \"www.\\uFFFD.ch FFFD should fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator278()", "name": "testValidator278", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator278()", "original_string": "    @Test\n    public void testValidator278() {\n        assertFalse(validator.isValid(\"someone@-test.com\")); // hostname starts with dash/hyphen\n        assertFalse(validator.isValid(\"someone@test-.com\")); // hostname ends with dash/hyphen\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator293()", "name": "testValidator293", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator293()", "original_string": "    @Test\n    public void testValidator293() {\n        assertTrue(validator.isValid(\"abc-@abc.com\"));\n        assertTrue(validator.isValid(\"abc_@abc.com\"));\n        assertTrue(validator.isValid(\"abc-def@abc.com\"));\n        assertTrue(validator.isValid(\"abc_def@abc.com\"));\n        assertFalse(validator.isValid(\"abc@abc_def.com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator315()", "name": "testValidator315", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator315()", "original_string": "    @Test\n    public void testValidator315() {\n        assertFalse(validator.isValid(\"me@at&t.net\"));\n        assertTrue(validator.isValid(\"me@att.net\")); // Make sure TLD is not the cause of the failure\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator359()", "name": "testValidator359", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator359()", "original_string": "    @Test\n    public void testValidator359() {\n        final EmailValidator val = EmailValidator.getInstance(false, true);\n        assertFalse(val.isValid(\"test@.com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator365()", "name": "testValidator365", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator365()", "original_string": "    @Test\n    public void testValidator365() {\n        assertFalse(validator.isValid(\"Loremipsumdolorsitametconsecteturadipiscingelit.Nullavitaeligulamattisrhoncusnuncegestasmattisleo.\"\n                + \"Donecnonsapieninmagnatristiquedictumaacturpis.Fusceorciduifacilisisutsapieneuconsequatpharetralectus.\"\n                + \"Quisqueenimestpulvinarutquamvitaeportamattisex.Nullamquismaurisplaceratconvallisjustoquisportamauris.\"\n                + \"Innullalacusconvalliseufringillautvenenatissitametdiam.Maecenasluctusligulascelerisquepulvinarfeugiat.\"\n                + \"Sedmolestienullaaliquetorciluctusidpharetranislfinibus.Suspendissemalesuadatinciduntduisitametportaarcusollicitudinnec.\"\n                + \"Donecetmassamagna.Curabitururnadiampretiumveldignissimporttitorfringillaeuneque.\"\n                + \"Duisantetelluspharetraidtinciduntinterdummolestiesitametfelis.Utquisquamsitametantesagittisdapibusacnonodio.\"\n                + \"Namrutrummolestiediamidmattis.Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus.\"\n                + \"Morbiposueresedmetusacconsectetur.Etiamquisipsumvitaejustotempusmaximus.Sedultriciesplaceratvolutpat.\"\n                + \"Integerlacuslectusmaximusacornarequissagittissitametjusto.\"\n                + \"Cumsociisnatoquepenatibusetmagnisdisparturientmontesnasceturridiculusmus.Maecenasindictumpurussedrutrumex.Nullafacilisi.\"\n                + \"Integerfinibusfinibusmietpharetranislfaucibusvel.Maecenasegetdolorlacinialobortisjustovelullamcorpersem.\"\n                + \"Vivamusaliquetpurusidvariusornaresapienrisusrutrumnisitinciduntmollissemnequeidmetus.\"\n                + \"Etiamquiseleifendpurus.Nuncfelisnuncscelerisqueiddignissimnecfinibusalibero.\"\n                + \"Nuncsemperenimnequesitamethendreritpurusfacilisisac.Maurisdapibussemperfelisdignissimgravida.\"\n                + \"Aeneanultricesblanditnequealiquamfinibusodioscelerisqueac.Aliquamnecmassaeumaurisfaucibusfringilla.\"\n                + \"Etiamconsequatligulanisisitametaliquamnibhtemporquis.Nuncinterdumdignissimnullaatsodalesarcusagittiseu.\"\n                + \"Proinpharetrametusneclacuspulvinarsedvolutpatliberoornare.Sedligulanislpulvinarnonlectuseublanditfacilisisante.\"\n                + \"Sedmollisnislalacusauctorsuscipit.Inhachabitasseplateadictumst.Phasellussitametvelittemporvenenatisfeliseuegestasrisus.\"\n                + \"Aliquameteratsitametnibhcommodofinibus.Morbiefficiturodiovelpulvinariaculis.\"\n                + \"Aeneantemporipsummassaaconsecteturturpisfaucibusultrices.Praesentsodalesmaurisquisportafermentum.\"\n                + \"Etiamnisinislvenenatisvelauctorutullamcorperinjusto.Proinvelligulaerat.Phasellusvestibulumgravidamassanonfeugiat.\"\n                + \"Maecenaspharetraeuismodmetusegetefficitur.Suspendisseamet@gmail.com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator374()", "name": "testValidator374", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator374()", "original_string": "    @Test\n    public void testValidator374() {\n        assertTrue(validator.isValid(\"abc@school.school\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator473Part1()", "name": "testValidator473Part1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part1()", "original_string": "    @Test\n    public void testValidator473Part1() { // reject null DomainValidator\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new EmailValidator(false, false, null));\n        assertEquals(\"DomainValidator cannot be null\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator473Part2()", "name": "testValidator473Part2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part2()", "original_string": "    @Test\n    public void testValidator473Part2() { // reject null DomainValidator with mismatched allowLocal\n        final List<DomainValidator.Item> items = new ArrayList<>();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> new EmailValidator(false, false, DomainValidator.getInstance(true, items)));\n        assertEquals(\"DomainValidator must agree with allowLocal setting\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator473Part3()", "name": "testValidator473Part3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part3()", "original_string": "    @Test\n    public void testValidator473Part3() { // reject null DomainValidator with mismatched allowLocal\n        final List<DomainValidator.Item> items = new ArrayList<>();\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> new EmailValidator(true, false, DomainValidator.getInstance(false, items)));\n        assertEquals(\"DomainValidator must agree with allowLocal setting\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]testValidator473Part4()", "name": "testValidator473Part4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator473Part4()", "original_string": "    @Test\n    public void testValidator473Part4() { // Show that can override domain validation\n        assertFalse(validator.isValidDomain(\"test.local\"));\n        final List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"local\"));\n        final EmailValidator val = new EmailValidator(true, false, DomainValidator.getInstance(true, items));\n        assertTrue(val.isValidDomain(\"test.local\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testCannotUpdate()", "name": "testCannotUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCannotUpdate()", "original_string": "    @Test\n    public void testCannotUpdate() {\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\"); // OK\n        final DomainValidator dv = DomainValidator.getInstance();\n        assertNotNull(dv);\n        assertThrows(IllegalStateException.class, () -> DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testInstanceOverride()", "name": "testInstanceOverride", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstanceOverride()", "original_string": "    @Test\n    public void testInstanceOverride() { // Show that the instance picks up static values\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"gp\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"com\");\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_PLUS, \"cp\");\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"ch\");\n        DomainValidator validator = DomainValidator.getInstance(false);\n        assertTrue(validator.isValidGenericTld(\"gp\"));\n        assertFalse(validator.isValidGenericTld(\"com\"));\n        assertTrue(validator.isValidCountryCodeTld(\"cp\"));\n        assertFalse(validator.isValidCountryCodeTld(\"ch\"));\n\n        // show we can override them for a new instance\n        final List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(ArrayType.GENERIC_MINUS, \"\"));\n        items.add(new DomainValidator.Item(ArrayType.COUNTRY_CODE_MINUS, \"\"));\n        validator = DomainValidator.getInstance(false, items);\n        assertTrue(validator.isValidGenericTld(\"gp\"));\n        assertTrue(validator.isValidGenericTld(\"com\")); // Should be true again\n        assertTrue(validator.isValidCountryCodeTld(\"cp\"));\n        assertTrue(validator.isValidCountryCodeTld(\"ch\")); // Should be true again\n\n        // Show the class overrides are unaffected\n        validator = DomainValidator.getInstance(false);\n        assertTrue(validator.isValidGenericTld(\"gp\"));\n        assertFalse(validator.isValidGenericTld(\"com\"));\n        assertTrue(validator.isValidCountryCodeTld(\"cp\"));\n        assertFalse(validator.isValidCountryCodeTld(\"ch\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateBaseArrayCC()", "name": "testUpdateBaseArrayCC", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateBaseArrayCC()", "original_string": "    @Test\n    public void testUpdateBaseArrayCC() {\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_RO, \"com\"));\n        assertEquals(\"Cannot update the table: COUNTRY_CODE_RO\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateBaseArrayGeneric()", "name": "testUpdateBaseArrayGeneric", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateBaseArrayGeneric()", "original_string": "    @Test\n    public void testUpdateBaseArrayGeneric() {\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> DomainValidator.updateTLDOverride(ArrayType.GENERIC_RO, \"com\"));\n        assertEquals(\"Cannot update the table: GENERIC_RO\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateBaseArrayInfra()", "name": "testUpdateBaseArrayInfra", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateBaseArrayInfra()", "original_string": "    @Test\n    public void testUpdateBaseArrayInfra() {\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> DomainValidator.updateTLDOverride(ArrayType.INFRASTRUCTURE_RO, \"com\"));\n        assertEquals(\"Cannot update the table: INFRASTRUCTURE_RO\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateBaseArrayLocal()", "name": "testUpdateBaseArrayLocal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateBaseArrayLocal()", "original_string": "    @Test\n    public void testUpdateBaseArrayLocal() {\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class,\n                () -> DomainValidator.updateTLDOverride(ArrayType.LOCAL_RO, \"com\"));\n        assertEquals(\"Cannot update the table: LOCAL_RO\", thrown.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateCountryCode1a()", "name": "testUpdateCountryCode1a", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateCountryCode1a()", "original_string": "    @Test\n    public void testUpdateCountryCode1a() {\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidCountryCodeTld(\"com\")); // cannot be valid\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateCountryCode1b()", "name": "testUpdateCountryCode1b", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateCountryCode1b()", "original_string": "    @Test\n    public void testUpdateCountryCode1b() {\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_PLUS, \"com\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertTrue(validator.isValidCountryCodeTld(\"com\")); // it is now!\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateCountryCode2()", "name": "testUpdateCountryCode2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateCountryCode2()", "original_string": "    @Test\n    public void testUpdateCountryCode2() {\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_PLUS, \"com\");\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"com\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidCountryCodeTld(\"com\")); // show that minus overrides the rest\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateCountryCode3a()", "name": "testUpdateCountryCode3a", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateCountryCode3a()", "original_string": "    @Test\n    public void testUpdateCountryCode3a() { // show ch is valid\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertTrue(validator.isValidCountryCodeTld(\"ch\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateCountryCode3b()", "name": "testUpdateCountryCode3b", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateCountryCode3b()", "original_string": "    @Test\n    public void testUpdateCountryCode3b() { // show ch can be made invalid\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"ch\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidCountryCodeTld(\"ch\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateCountryCode3c()", "name": "testUpdateCountryCode3c", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateCountryCode3c()", "original_string": "    @Test\n    public void testUpdateCountryCode3c() { // show ch can be made valid again by replacing the CC array\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"ch\");\n        DomainValidator.updateTLDOverride(ArrayType.COUNTRY_CODE_MINUS, \"xx\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertTrue(validator.isValidCountryCodeTld(\"ch\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateGeneric1()", "name": "testUpdateGeneric1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateGeneric1()", "original_string": "    @Test\n    public void testUpdateGeneric1() {\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidGenericTld(\"ch\")); // cannot be valid\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateGeneric2()", "name": "testUpdateGeneric2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateGeneric2()", "original_string": "    @Test\n    public void testUpdateGeneric2() {\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertTrue(validator.isValidGenericTld(\"ch\")); // it is now!\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateGeneric3()", "name": "testUpdateGeneric3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateGeneric3()", "original_string": "    @Test\n    public void testUpdateGeneric3() {\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"ch\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidGenericTld(\"ch\")); // show that minus overrides the rest\n        assertTrue(validator.isValidGenericTld(\"com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateGeneric4()", "name": "testUpdateGeneric4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateGeneric4()", "original_string": "    @Test\n    public void testUpdateGeneric4() {\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"ch\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"com\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidGenericTld(\"com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testUpdateGeneric5()", "name": "testUpdateGeneric5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateGeneric5()", "original_string": "    @Test\n    public void testUpdateGeneric5() {\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"ch\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"ch\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"com\");\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_MINUS, \"xx\"); // change the minus list\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertTrue(validator.isValidGenericTld(\"com\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testValidator412a()", "name": "testValidator412a", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator412a()", "original_string": "    @Test\n    public void testValidator412a() {\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertFalse(validator.isValidGenericTld(\"local\"));\n        assertFalse(validator.isValid(\"abc.local\"));\n        assertFalse(validator.isValidGenericTld(\"pvt\"));\n        assertFalse(validator.isValid(\"abc.pvt\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testValidator412b()", "name": "testValidator412b", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator412b()", "original_string": "    @Test\n    public void testValidator412b() {\n        DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"local\", \"pvt\");\n        final DomainValidator validator = DomainValidator.getInstance();\n        assertTrue(validator.isValidGenericTld(\"local\"));\n        assertTrue(validator.isValid(\"abc.local\"));\n        assertTrue(validator.isValidGenericTld(\"pvt\"));\n        assertTrue(validator.isValid(\"abc.pvt\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testValidator412c()", "name": "testValidator412c", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator412c()", "original_string": "    @Test\n    public void testValidator412c() {\n        final DomainValidator validator = DomainValidator.getInstance(true);\n        assertFalse(validator.isValidLocalTld(\"local\"));\n        assertFalse(validator.isValid(\"abc.local\"));\n        assertFalse(validator.isValidLocalTld(\"pvt\"));\n        assertFalse(validator.isValid(\"abc.pvt\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest.[void]testValidator412d()", "name": "testValidator412d", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator412d()", "original_string": "    @Test\n    public void testValidator412d() {\n        DomainValidator.updateTLDOverride(ArrayType.LOCAL_PLUS, \"local\", \"pvt\");\n        final DomainValidator validator = DomainValidator.getInstance(true);\n        assertTrue(validator.isValidLocalTld(\"local\"));\n        assertTrue(validator.isValidLocalTld(\"pvt\"));\n        assertTrue(validator.isValid(\"abc.local\"));\n        assertTrue(validator.isValid(\"abc.pvt\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "class_name": "DomainValidatorStartupTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java.DomainValidatorStartupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testFormat()", "name": "testFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormat()", "original_string": "    @Test\n    public void testFormat() {\n        final Number number = new BigDecimal(\"1234.5\");\n        assertEquals(\"1,234.5\", strictValidator.format(number, Locale.US), \"US Locale, US Format\");\n        assertEquals(\"1.234,5\", strictValidator.format(number, Locale.GERMAN), \"DE Locale, DE Format\");\n        assertEquals(\"12,34.50\", strictValidator.format(number, \"#,#0.00\"), \"Pattern #,#0.00\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest format() methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testFormatType()", "name": "testFormatType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormatType()", "original_string": "    @Test\n    public void testFormatType() {\n        assertEquals(0, validator.getFormatType(), \"Format Type A\");\n        assertEquals(AbstractNumberValidator.STANDARD_FORMAT, validator.getFormatType(), \"Format Type B\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Format Type\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testInvalidNotStrict()", "name": "testInvalidNotStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidNotStrict()", "original_string": "    @Test\n    public void testInvalidNotStrict() {\n        for (int i = 0; i < invalid.length; i++) {\n            final String text = \"idx=[\" + i + \"] value=[\" + invalid[i] + \"]\";\n            assertNull(validator.parse(invalid[i], null, Locale.US), () -> \"(A) \" + text);\n            assertFalse(validator.isValid(invalid[i], null, Locale.US), () -> \"(B) \" + text);\n            assertNull(validator.parse(invalid[i], testPattern, null), () -> \"(C) \" + text);\n            assertFalse(validator.isValid(invalid[i], testPattern, null), () -> \"(D) \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid, strict=false\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testInvalidStrict()", "name": "testInvalidStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidStrict()", "original_string": "    @Test\n    public void testInvalidStrict() {\n        for (int i = 0; i < invalidStrict.length; i++) {\n            final String text = \"idx=[\" + i + \"] value=[\" + invalidStrict[i] + \"]\";\n            assertNull(strictValidator.parse(invalidStrict[i], null, Locale.US), () -> \"(A) \" + text);\n            assertFalse(strictValidator.isValid(invalidStrict[i], null, Locale.US), () -> \"(B) \" + text);\n            assertNull(strictValidator.parse(invalidStrict[i], testPattern, null), () -> \"(C) \" + text);\n            assertFalse(strictValidator.isValid(invalidStrict[i], testPattern, null), () -> \"(D) \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid, strict=true\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testRangeMinMax()", "name": "testRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRangeMinMax()", "original_string": "    @Test\n    public void testRangeMinMax() {\n        final Number number9 = Integer.valueOf(9);\n        final Number number10 = Integer.valueOf(10);\n        final Number number11 = Integer.valueOf(11);\n        final Number number19 = Integer.valueOf(19);\n        final Number number20 = Integer.valueOf(20);\n        final Number number21 = Integer.valueOf(21);\n\n        // Test isInRange()\n        assertFalse(strictValidator.isInRange(number9, number10, number20), \"isInRange() < min\");\n        assertTrue(strictValidator.isInRange(number10, number10, number20), \"isInRange() = min\");\n        assertTrue(strictValidator.isInRange(number11, number10, number20), \"isInRange() in range\");\n        assertTrue(strictValidator.isInRange(number20, number10, number20), \"isInRange() = max\");\n        assertFalse(strictValidator.isInRange(number21, number10, number20), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(strictValidator.minValue(number9, number10), \"minValue() < min\");\n        assertTrue(strictValidator.minValue(number10, number10), \"minValue() = min\");\n        assertTrue(strictValidator.minValue(number11, number10), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(strictValidator.maxValue(number19, number20), \"maxValue() < max\");\n        assertTrue(strictValidator.maxValue(number20, number20), \"maxValue() = max\");\n        assertFalse(strictValidator.maxValue(number21, number20), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testSerialization()", "name": "testSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerialization()", "original_string": "    @Test\n    public void testSerialization() {\n        // Serialize the check digit routine\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n            oos.writeObject(validator);\n            oos.flush();\n        } catch (final Exception e) {\n            fail(validator.getClass().getName() + \" error during serialization: \" + e);\n        }\n\n        // Deserialize the test object\n        Object result = null;\n        try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\n            final ObjectInputStream ois = new ObjectInputStream(bais);\n            result = ois.readObject();\n        } catch (final Exception e) {\n            fail(validator.getClass().getName() + \" error during deserialization: \" + e);\n        }\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest validator serialization.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testValidateLocale()", "name": "testValidateLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateLocale()", "original_string": "    @Test\n    public void testValidateLocale() {\n\n        assertEquals(testNumber, strictValidator.parse(testStringUS, null, Locale.US), \"US Locale, US Format\");\n        assertNull(strictValidator.parse(testStringDE, null, Locale.US), \"US Locale, DE Format\");\n\n        // Default German Locale\n        assertEquals(testNumber, strictValidator.parse(testStringDE, null, Locale.GERMAN), \"DE Locale, DE Format\");\n        assertNull(strictValidator.parse(testStringUS, null, Locale.GERMAN), \"DE Locale, US Format\");\n\n        // Default Locale has been set to Locale.US in setup()\n        assertEquals(testNumber, strictValidator.parse(testStringUS, null, null), \"Default Locale, US Format\");\n        assertNull(strictValidator.parse(testStringDE, null, null), \"Default Locale, DE Format\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest different Locale\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testValidateMinMax()", "name": "testValidateMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateMinMax()", "original_string": "    @Test\n    public void testValidateMinMax() {\n        final DecimalFormat fmt = new DecimalFormat(\"#\");\n        if (max != null) {\n            assertEquals(max, validator.parse(fmt.format(max), \"#\", null), \"Test Max\");\n            assertNull(validator.parse(fmt.format(maxPlusOne), \"#\", null), \"Test Max + 1\");\n            assertEquals(min, validator.parse(fmt.format(min), \"#\", null), \"Test Min\");\n            assertNull(validator.parse(fmt.format(minMinusOne), \"#\", null), \"Test min - 1\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Min/Max values allowed\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testValidNotStrict()", "name": "testValidNotStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidNotStrict()", "original_string": "    @Test\n    public void testValidNotStrict() {\n        for (int i = 0; i < valid.length; i++) {\n            final String text = \"idx=[\" + i + \"] value=[\" + validCompare[i] + \"]\";\n            assertEquals(validCompare[i], validator.parse(valid[i], null, Locale.US), \"(A) \" + text);\n            assertTrue(validator.isValid(valid[i], null, Locale.US), \"(B) \" + text);\n            assertEquals(validCompare[i], validator.parse(valid[i], testPattern, null), \"(C) \" + text);\n            assertTrue(validator.isValid(valid[i], testPattern, null), \"(D) \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid, strict=false\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]testValidStrict()", "name": "testValidStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidStrict()", "original_string": "    @Test\n    public void testValidStrict() {\n        for (int i = 0; i < validStrict.length; i++) {\n            final String text = \"idx=[\" + i + \"] value=[\" + validStrictCompare[i] + \"]\";\n            assertEquals(validStrictCompare[i], strictValidator.parse(validStrict[i], null, Locale.US), \"(A) \" + text);\n            assertTrue(strictValidator.isValid(validStrict[i], null, Locale.US), \"(B) \" + text);\n            assertEquals(validStrictCompare[i], strictValidator.parse(validStrict[i], testPattern, null), \"(C) \" + text);\n            assertTrue(strictValidator.isValid(validStrict[i], testPattern, null), \"(D) \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid, strict=true\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java.ShortValidatorTest.[void]testShortRangeMinMax()", "name": "testShortRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortRangeMinMax()", "original_string": "    @Test\n    public void testShortRangeMinMax() {\n        final ShortValidator validator = (ShortValidator) strictValidator;\n        final Short number9 = validator.validate(\"9\", \"#\");\n        final Short number10 = validator.validate(\"10\", \"#\");\n        final Short number11 = validator.validate(\"11\", \"#\");\n        final Short number19 = validator.validate(\"19\", \"#\");\n        final Short number20 = validator.validate(\"20\", \"#\");\n        final Short number21 = validator.validate(\"21\", \"#\");\n        final short min = (short) 10;\n        final short max = (short) 20;\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, min, max), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, min, max), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, min, max), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, min, max), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, min, max), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, min), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, min), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, min), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, max), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, max), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, max), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java", "class_name": "ShortValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java.ShortValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Short Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java.ShortValidatorTest.[void]testShortValidatorMethods()", "name": "testShortValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortValidatorMethods()", "original_string": "    @Test\n    public void testShortValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String germanPatternVal = \"1.23.45\";\n        final String localeVal = \"12.345\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final Short expected = Short.valueOf((short) 12345);\n        assertEquals(expected, ShortValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, ShortValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\n        assertEquals(expected, ShortValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, ShortValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(ShortValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(ShortValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\n        assertTrue(ShortValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(ShortValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(ShortValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(ShortValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\n        assertNull(ShortValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(ShortValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(ShortValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(ShortValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\n        assertFalse(ShortValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(ShortValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java", "class_name": "ShortValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java.ShortValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest ShortValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest.[void]testValidateNullInput()", "name": "testValidateNullInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateNullInput()", "original_string": "    @Test\n    public void testValidateNullInput() {\n        assertNull(validator.validate(null), \"Null input should return null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java", "class_name": "RegexValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest.[void]testValidateSingleGroupMatch()", "name": "testValidateSingleGroupMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateSingleGroupMatch()", "original_string": "    @Test\n    public void testValidateSingleGroupMatch() {\n        assertEquals(\"AB12\", validator.validate(\"AB-12-3456\").substring(0, 4), \"Single group match should return the group\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java", "class_name": "RegexValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest.[void]testValidateMultipleGroupMatch()", "name": "testValidateMultipleGroupMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateMultipleGroupMatch()", "original_string": "    @Test\n    public void testValidateMultipleGroupMatch() {\n        assertEquals(\"AB123456\", validator.validate(\"AB-12-3456\"), \"Multiple group match should return concatenated groups\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java", "class_name": "RegexValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest.[void]testValidateNoMatch()", "name": "testValidateNoMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidateNoMatch()", "original_string": "    @Test\n    public void testValidateNoMatch() {\n        assertNull(validator.validate(\"AB123456\"), \"No match should return null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java", "class_name": "RegexValidator_validateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java.RegexValidator_validateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest.[void]testIntegerRangeMinMax()", "name": "testIntegerRangeMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntegerRangeMinMax()", "original_string": "    @Test\n    public void testIntegerRangeMinMax() {\n        final IntegerValidator validator = (IntegerValidator) strictValidator;\n        final Integer number9 = validator.validate(\"9\", \"#\");\n        final Integer number10 = validator.validate(\"10\", \"#\");\n        final Integer number11 = validator.validate(\"11\", \"#\");\n        final Integer number19 = validator.validate(\"19\", \"#\");\n        final Integer number20 = validator.validate(\"20\", \"#\");\n        final Integer number21 = validator.validate(\"21\", \"#\");\n\n        // Test isInRange()\n        assertFalse(validator.isInRange(number9, 10, 20), \"isInRange() < min\");\n        assertTrue(validator.isInRange(number10, 10, 20), \"isInRange() = min\");\n        assertTrue(validator.isInRange(number11, 10, 20), \"isInRange() in range\");\n        assertTrue(validator.isInRange(number20, 10, 20), \"isInRange() = max\");\n        assertFalse(validator.isInRange(number21, 10, 20), \"isInRange() > max\");\n\n        // Test minValue()\n        assertFalse(validator.minValue(number9, 10), \"minValue() < min\");\n        assertTrue(validator.minValue(number10, 10), \"minValue() = min\");\n        assertTrue(validator.minValue(number11, 10), \"minValue() > min\");\n\n        // Test minValue()\n        assertTrue(validator.maxValue(number19, 20), \"maxValue() < max\");\n        assertTrue(validator.maxValue(number20, 20), \"maxValue() = max\");\n        assertFalse(validator.maxValue(number21, 20), \"maxValue() > max\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java", "class_name": "IntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Integer Range/Min/Max\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest.[void]testIntegerValidatorMethods()", "name": "testIntegerValidatorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntegerValidatorMethods()", "original_string": "    @Test\n    public void testIntegerValidatorMethods() {\n        final Locale locale = Locale.GERMAN;\n        final String pattern = \"0,00,00\";\n        final String patternVal = \"1,23,45\";\n        final String germanPatternVal = \"1.23.45\";\n        final String localeVal = \"12.345\";\n        final String defaultVal = \"12,345\";\n        final String xxxx = \"XXXX\";\n        final Integer expected = Integer.valueOf(12345);\n        assertEquals(expected, IntegerValidator.getInstance().validate(defaultVal), \"validate(A) default\");\n        assertEquals(expected, IntegerValidator.getInstance().validate(localeVal, locale), \"validate(A) locale\");\n        assertEquals(expected, IntegerValidator.getInstance().validate(patternVal, pattern), \"validate(A) pattern\");\n        assertEquals(expected, IntegerValidator.getInstance().validate(germanPatternVal, pattern, Locale.GERMAN), \"validate(A) both\");\n\n        assertTrue(IntegerValidator.getInstance().isValid(defaultVal), \"isValid(A) default\");\n        assertTrue(IntegerValidator.getInstance().isValid(localeVal, locale), \"isValid(A) locale\");\n        assertTrue(IntegerValidator.getInstance().isValid(patternVal, pattern), \"isValid(A) pattern\");\n        assertTrue(IntegerValidator.getInstance().isValid(germanPatternVal, pattern, Locale.GERMAN), \"isValid(A) both\");\n\n        assertNull(IntegerValidator.getInstance().validate(xxxx), \"validate(B) default\");\n        assertNull(IntegerValidator.getInstance().validate(xxxx, locale), \"validate(B) locale\");\n        assertNull(IntegerValidator.getInstance().validate(xxxx, pattern), \"validate(B) pattern\");\n        assertNull(IntegerValidator.getInstance().validate(patternVal, pattern, Locale.GERMAN), \"validate(B) both\");\n\n        assertFalse(IntegerValidator.getInstance().isValid(xxxx), \"isValid(B) default\");\n        assertFalse(IntegerValidator.getInstance().isValid(xxxx, locale), \"isValid(B) locale\");\n        assertFalse(IntegerValidator.getInstance().isValid(xxxx, pattern), \"isValid(B) pattern\");\n        assertFalse(IntegerValidator.getInstance().isValid(patternVal, pattern, Locale.GERMAN), \"isValid(B) both\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java", "class_name": "IntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest IntegerValidator validate Methods\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest.[void]testMinMaxValues()", "name": "testMinMaxValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinMaxValues()", "original_string": "    @Test\n    public void testMinMaxValues() {\n        assertTrue(validator.isValid(\"2147483647\"), \"2147483647 is max integer\");\n        assertFalse(validator.isValid(\"2147483648\"), \"2147483648 > max integer\");\n        assertTrue(validator.isValid(\"-2147483648\"), \"-2147483648 is min integer\");\n        assertFalse(validator.isValid(\"-2147483649\"), \"-2147483649 < min integer\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java", "class_name": "IntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest.[void]testIsValid_ValidIBAN()", "name": "testIsValid_ValidIBAN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_ValidIBAN()", "original_string": "    @Test\n    public void testIsValid_ValidIBAN() {\n        String validIBAN = \"DE89370400440532013000\";\n        assertTrue(validator.isValid(validIBAN));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "class_name": "IBANValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest.[void]testIsValid_InvalidIBAN_WrongLength()", "name": "testIsValid_InvalidIBAN_WrongLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_InvalidIBAN_WrongLength()", "original_string": "    @Test\n    public void testIsValid_InvalidIBAN_WrongLength() {\n        String invalidIBAN = \"DE8937040044053201300\";\n        assertFalse(validator.isValid(invalidIBAN));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "class_name": "IBANValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest.[void]testIsValid_InvalidIBAN_WrongFormat()", "name": "testIsValid_InvalidIBAN_WrongFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_InvalidIBAN_WrongFormat()", "original_string": "    @Test\n    public void testIsValid_InvalidIBAN_WrongFormat() {\n        String invalidIBAN = \"DE8937040044053201300A\";\n        assertFalse(validator.isValid(invalidIBAN));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "class_name": "IBANValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest.[void]testIsValid_InvalidIBAN_NoValidator()", "name": "testIsValid_InvalidIBAN_NoValidator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_InvalidIBAN_NoValidator()", "original_string": "    @Test\n    public void testIsValid_InvalidIBAN_NoValidator() {\n        String invalidIBAN = \"ZZ89370400440532013000\";\n        assertFalse(validator.isValid(invalidIBAN));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "class_name": "IBANValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest.[void]testIsValid_NullIBAN()", "name": "testIsValid_NullIBAN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_NullIBAN()", "original_string": "    @Test\n    public void testIsValid_NullIBAN() {\n        assertFalse(validator.isValid(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "class_name": "IBANValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java.IBANValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]testFormat()", "name": "testFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormat()", "original_string": "    @Test\n    public void testFormat() {\n\n        // Create a Date or Calendar\n        final Object test = validator.parse(\"2005-11-28\", \"yyyy-MM-dd\", null, null);\n        assertNotNull(test, \"Test Date\");\n        assertEquals(\"28.11.05\", validator.format(test, \"dd.MM.yy\"), \"Format pattern\");\n        assertEquals(\"11/28/05\", validator.format(test, Locale.US), \"Format locale\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid Dates with \"locale\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]testLocaleInvalid()", "name": "testLocaleInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleInvalid()", "original_string": "    @Test\n    public void testLocaleInvalid() {\n        for (int i = 0; i < localeInvalid.length; i++) {\n            final String text = i + \" value=[\" + localeInvalid[i] + \"] passed \";\n            final Object date = validator.parse(localeInvalid[i], null, Locale.US, null);\n            assertNull(date, \"validateObj() \" + text + date);\n            assertFalse(validator.isValid(localeInvalid[i], Locale.US), \"isValid() \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid Dates with \"locale\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]testLocaleValid()", "name": "testLocaleValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleValid()", "original_string": "    @Test\n    public void testLocaleValid() {\n        for (int i = 0; i < localeValid.length; i++) {\n            final String text = i + \" value=[\" + localeValid[i] + \"] failed \";\n            Object date = validator.parse(localeValid[i], null, Locale.US, null);\n            assertNotNull(date, \"validateObj() \" + text + date);\n            assertTrue(validator.isValid(localeValid[i], Locale.US), \"isValid() \" + text);\n            if (date instanceof Calendar) {\n                date = ((Calendar) date).getTime();\n            }\n            assertEquals(patternExpect[i], date, \"compare \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid Dates with \"locale\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]testPatternInvalid()", "name": "testPatternInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPatternInvalid()", "original_string": "    @Test\n    public void testPatternInvalid() {\n        for (int i = 0; i < patternInvalid.length; i++) {\n            final String text = i + \" value=[\" + patternInvalid[i] + \"] passed \";\n            final Object date = validator.parse(patternInvalid[i], \"yy-MM-dd\", null, null);\n            assertNull(date, \"validateObj() \" + text + date);\n            assertFalse(validator.isValid(patternInvalid[i], \"yy-MM-dd\"), \"isValid() \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid Dates with \"pattern\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]testPatternValid()", "name": "testPatternValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPatternValid()", "original_string": "    @Test\n    public void testPatternValid() {\n        for (int i = 0; i < patternValid.length; i++) {\n            final String text = i + \" value=[\" + patternValid[i] + \"] failed \";\n            Object date = validator.parse(patternValid[i], \"yy-MM-dd\", null, null);\n            assertNotNull(date, \"validateObj() \" + text + date);\n            assertTrue(validator.isValid(patternValid[i], \"yy-MM-dd\"), \"isValid() \" + text);\n            if (date instanceof Calendar) {\n                date = ((Calendar) date).getTime();\n            }\n            assertEquals(patternExpect[i], date, \"compare \" + text);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid Dates with \"pattern\" validation\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]testSerialization()", "name": "testSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerialization()", "original_string": "    @Test\n    public void testSerialization() {\n        // Serialize the check digit routine\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n            oos.writeObject(validator);\n            oos.flush();\n        } catch (final Exception e) {\n            fail(validator.getClass().getName() + \" error during serialization: \" + e);\n        }\n\n        // Deserialize the test object\n        Object result = null;\n        try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\n            final ObjectInputStream ois = new ObjectInputStream(bais);\n            result = ois.readObject();\n        } catch (final Exception e) {\n            fail(validator.getClass().getName() + \" error during deserialization: \" + e);\n        }\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest validator serialization.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareQuartersTest.java.DateValidator_compareQuartersTest.[void]testCompareQuarters()", "name": "testCompareQuarters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareQuarters()", "original_string": "    @Test\n    public void testCompareQuarters() {\n        final int sameTime = 124522;\n        final int testDate = 20050823;\n\n        final Date value = createDate(GMT, testDate, sameTime); // test value\n        final Date date20051101 = createDate(GMT, 20051101, sameTime); // +1 quarter (Feb Start)\n        final Date date20051001 = createDate(GMT, 20051001, sameTime); // +1 quarter\n        final Date date20050701 = createDate(GMT, 20050701, sameTime); // same quarter\n        final Date date20050630 = createDate(GMT, 20050630, sameTime); // -1 quarter\n        final Date date20050110 = createDate(GMT, 20050110, sameTime); // Previous Year qtr (Fen start)\n\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051101, GMT), \"qtrA <1\"); // +1 quarter (Feb)\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051001, GMT), \"qtrA <2\"); // +1 quarter\n        assertEquals(0, dateValidator.compareQuarters(value, date20050701, GMT), \"qtrA =2\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050630, GMT), \"qtrA GT\"); // -1 quarter\n\n        // Change quarter 1 to start in Feb\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051101, GMT, 2), \"qtrB LT\"); // +1 quarter (Feb)\n        assertEquals(0, dateValidator.compareQuarters(value, date20051001, GMT, 2), \"qtrB =1\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050701, GMT, 2), \"qtrB =3\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050630, GMT, 2), \"qtrB GT\"); // -1 quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050110, GMT, 2), \"qtrB prev\"); // Jan Prev year qtr\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareQuartersTest.java", "class_name": "DateValidator_compareQuartersTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareQuartersTest.java.DateValidator_compareQuartersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java.RegexValidator_isValidTest.[void]testIsValid_NullValue()", "name": "testIsValid_NullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_NullValue()", "original_string": "    @Test\n    public void testIsValid_NullValue() {\n        assertFalse(validator.isValid(null), \"Null value should be invalid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java", "class_name": "RegexValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java.RegexValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java.RegexValidator_isValidTest.[void]testIsValid_ValidPattern()", "name": "testIsValid_ValidPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_ValidPattern()", "original_string": "    @Test\n    public void testIsValid_ValidPattern() {\n        assertTrue(validator.isValid(\"abc-DEF-123\"), \"Valid pattern should return true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java", "class_name": "RegexValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java.RegexValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java.RegexValidator_isValidTest.[void]testIsValid_InvalidPattern()", "name": "testIsValid_InvalidPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_InvalidPattern()", "original_string": "    @Test\n    public void testIsValid_InvalidPattern() {\n        assertFalse(validator.isValid(\"abc-def-123\"), \"Invalid pattern should return false\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java", "class_name": "RegexValidator_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java.RegexValidator_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java.CalendarValidator_adjustToTimeZoneTest.[void]testAdjustToTimeZoneSameRules()", "name": "testAdjustToTimeZoneSameRules", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdjustToTimeZoneSameRules()", "original_string": "    @Test\n    public void testAdjustToTimeZoneSameRules() {\n        Calendar calendar = Calendar.getInstance();\n        TimeZone originalTimeZone = calendar.getTimeZone();\n        CalendarValidator.adjustToTimeZone(calendar, originalTimeZone);\n        assertEquals(originalTimeZone, calendar.getTimeZone(), \"Time zone should remain the same\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java", "class_name": "CalendarValidator_adjustToTimeZoneTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java.CalendarValidator_adjustToTimeZoneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java.CalendarValidator_adjustToTimeZoneTest.[void]testAdjustToTimeZoneDifferentRules()", "name": "testAdjustToTimeZoneDifferentRules", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdjustToTimeZoneDifferentRules()", "original_string": "    @Test\n    public void testAdjustToTimeZoneDifferentRules() {\n        Calendar calendar = Calendar.getInstance();\n        TimeZone originalTimeZone = calendar.getTimeZone();\n        TimeZone newTimeZone = TimeZone.getTimeZone(\"America/New_York\");\n\n        if (!originalTimeZone.hasSameRules(newTimeZone)) {\n            int originalYear = calendar.get(Calendar.YEAR);\n            int originalMonth = calendar.get(Calendar.MONTH);\n            int originalDate = calendar.get(Calendar.DATE);\n            int originalHour = calendar.get(Calendar.HOUR_OF_DAY);\n            int originalMinute = calendar.get(Calendar.MINUTE);\n\n            CalendarValidator.adjustToTimeZone(calendar, newTimeZone);\n\n            assertEquals(newTimeZone, calendar.getTimeZone(), \"Time zone should be adjusted\");\n            assertEquals(originalYear, calendar.get(Calendar.YEAR), \"Year should remain the same\");\n            assertEquals(originalMonth, calendar.get(Calendar.MONTH), \"Month should remain the same\");\n            assertEquals(originalDate, calendar.get(Calendar.DATE), \"Date should remain the same\");\n            assertEquals(originalHour, calendar.get(Calendar.HOUR_OF_DAY), \"Hour should remain the same\");\n            assertEquals(originalMinute, calendar.get(Calendar.MINUTE), \"Minute should remain the same\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java", "class_name": "CalendarValidator_adjustToTimeZoneTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java.CalendarValidator_adjustToTimeZoneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]testFormatType()", "name": "testFormatType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFormatType()", "original_string": "    @Test\n    public void testFormatType() {\n        assertEquals(1, CurrencyValidator.getInstance().getFormatType(), \"Format Type A\");\n        assertEquals(AbstractNumberValidator.CURRENCY_FORMAT, CurrencyValidator.getInstance().getFormatType(), \"Format Type B\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Format Type\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]testIntegerInvalid()", "name": "testIntegerInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntegerInvalid()", "original_string": "    @Test\n    public void testIntegerInvalid() {\n        final CurrencyValidator validator = new CurrencyValidator(true, false);\n\n        // Invalid UK - has decimals\n        assertFalse(validator.isValid(ukPound + \"1,234.56\", Locale.UK), \"UK positive\");\n        assertFalse(validator.isValid(\"-\" + ukPound + \"1,234.56\", Locale.UK), \"UK negative\");\n\n        // Invalid US - has decimals\n        assertFalse(validator.isValid(usDollar + \"1,234.56\", Locale.US), \"US positive\");\n        assertFalse(validator.isValid(\"(\" + usDollar + \"1,234.56)\", Locale.US), \"US negative\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid integer (non decimal) currency values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]testIntegerValid()", "name": "testIntegerValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntegerValid()", "original_string": "    @Test\n    public void testIntegerValid() {\n        // Set the default Locale\n        final Locale origDefault = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n\n        final CurrencyValidator validator = new CurrencyValidator();\n        final BigDecimal expected = new BigDecimal(\"1234.00\");\n        final BigDecimal negative = new BigDecimal(\"-1234.00\");\n\n        assertEquals(expected, validator.validate(ukPound + \"1,234\"), \"Default locale\");\n\n        assertEquals(expected, validator.validate(ukPound + \"1,234\", Locale.UK), \"UK locale\");\n        assertEquals(negative, validator.validate(\"-\" + ukPound + \"1,234\", Locale.UK), \"UK negative\");\n\n        assertEquals(expected, validator.validate(usDollar + \"1,234\", Locale.US), \"US locale\");\n        assertEquals(negative, validator.validate(\"(\" + usDollar + \"1,234)\", Locale.US), \"US negative\");\n\n        // Restore the original default\n        Locale.setDefault(origDefault);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid integer (non-decimal) currency values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]testInvalid()", "name": "testInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalid()", "original_string": "    @Test\n    public void testInvalid() {\n        final BigDecimalValidator validator = CurrencyValidator.getInstance();\n\n        // Invalid Missing\n        assertFalse(validator.isValid(null), \"isValid() Null Value\");\n        assertFalse(validator.isValid(\"\"), \"isValid() Empty Value\");\n        assertNull(validator.validate(null), \"validate() Null Value\");\n        assertNull(validator.validate(\"\"), \"validate() Empty Value\");\n\n        // Invalid UK\n        assertFalse(validator.isValid(usDollar + \"1,234.56\", Locale.UK), \"UK wrong symbol\");\n        assertFalse(validator.isValid(\"(\" + ukPound + \"1,234.56)\", Locale.UK), \"UK wrong negative\");\n\n        // Invalid US\n        assertFalse(validator.isValid(ukPound + \"1,234.56\", Locale.US), \"US wrong symbol\");\n        assertFalse(validator.isValid(\"-\" + usDollar + \"1,234.56\", Locale.US), \"US wrong negative\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Invalid currency values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]testPattern()", "name": "testPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPattern()", "original_string": "    @Test\n    public void testPattern() {\n        // Set the default Locale\n        final Locale origDefault = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n\n        final BigDecimalValidator validator = CurrencyValidator.getInstance();\n        final String basicPattern = CURRENCY_SYMBOL + \"#,##0.000\";\n        final String pattern = basicPattern + \";[\" + basicPattern + \"]\";\n        final BigDecimal expected = new BigDecimal(\"1234.567\");\n        final BigDecimal negative = new BigDecimal(\"-1234.567\");\n\n        // Test Pattern\n        assertEquals(expected, validator.validate(ukPound + \"1,234.567\", pattern), \"default\");\n        assertEquals(negative, validator.validate(\"[\" + ukPound + \"1,234.567]\", pattern), \"negative\");\n        assertEquals(expected, validator.validate(\"1,234.567\", pattern), \"no symbol +ve\");\n        assertEquals(negative, validator.validate(\"[1,234.567]\", pattern), \"no symbol -ve\");\n\n        // Test Pattern & Locale\n        assertEquals(expected, validator.validate(usDollar + \"1,234.567\", pattern, Locale.US), \"default\");\n        assertEquals(negative, validator.validate(\"[\" + usDollar + \"1,234.567]\", pattern, Locale.US), \"negative\");\n        assertEquals(expected, validator.validate(\"1,234.567\", pattern, Locale.US), \"no symbol +ve\");\n        assertEquals(negative, validator.validate(\"[1,234.567]\", pattern, Locale.US), \"no symbol -ve\");\n\n        // invalid\n        assertFalse(validator.isValid(usDollar + \"1,234.567\", pattern), \"invalid symbol\");\n        assertFalse(validator.isValid(ukPound + \"1,234.567\", pattern, Locale.US), \"invalid symbol\");\n\n        // Restore the original default\n        Locale.setDefault(origDefault);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest currency values with a pattern\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]testValid()", "name": "testValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValid()", "original_string": "    @Test\n    public void testValid() {\n        // Set the default Locale\n        final Locale origDefault = Locale.getDefault();\n        Locale.setDefault(Locale.UK);\n\n        final BigDecimalValidator validator = CurrencyValidator.getInstance();\n        final BigDecimal expected = new BigDecimal(\"1234.56\");\n        final BigDecimal negative = new BigDecimal(\"-1234.56\");\n        final BigDecimal noDecimal = new BigDecimal(\"1234.00\");\n        final BigDecimal oneDecimal = new BigDecimal(\"1234.50\");\n\n        assertEquals(expected, validator.validate(ukPound + \"1,234.56\"), \"Default locale\");\n\n        assertEquals(expected, validator.validate(ukPound + \"1,234.56\", Locale.UK), \"UK locale\");\n        assertEquals(negative, validator.validate(\"-\" + ukPound + \"1,234.56\", Locale.UK), \"UK negative\");\n        assertEquals(noDecimal, validator.validate(ukPound + \"1,234\", Locale.UK), \"UK no decimal\");\n        assertEquals(oneDecimal, validator.validate(ukPound + \"1,234.5\", Locale.UK), \"UK 1 decimal\");\n        assertEquals(expected, validator.validate(ukPound + \"1,234.567\", Locale.UK), \"UK 3 decimal\");\n        assertEquals(expected, validator.validate(\"1,234.56\", Locale.UK), \"UK no symbol\");\n\n        assertEquals(expected, validator.validate(usDollar + \"1,234.56\", Locale.US), \"US locale\");\n        assertEquals(negative, validator.validate(\"(\" + usDollar + \"1,234.56)\", Locale.US), \"US negative\");\n        assertEquals(noDecimal, validator.validate(usDollar + \"1,234\", Locale.US), \"US no decimal\");\n        assertEquals(oneDecimal, validator.validate(usDollar + \"1,234.5\", Locale.US), \"US 1 decimal\");\n        assertEquals(expected, validator.validate(usDollar + \"1,234.567\", Locale.US), \"US 3 decimal\");\n        assertEquals(expected, validator.validate(\"1,234.56\", Locale.US), \"US no symbol\");\n\n        // Restore the original default\n        Locale.setDefault(origDefault);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest Valid currency values\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testCalculateInvalid()", "name": "testCalculateInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCalculateInvalid()", "original_string": "    @Test\n    public void testCalculateInvalid() {\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"testCalculateInvalid() for \" + routine.getClass().getName());\n        }\n\n        // test invalid code values\n        for (int i = 0; i < invalid.length; i++) {\n            try {\n                final String code = invalid[i];\n                if (log.isDebugEnabled()) {\n                    log.debug(\"   \" + i + \" Testing Invalid Check Digit, Code=[\" + code + \"]\");\n                }\n                final String expected = checkDigit(code);\n                final String codeWithNoCheckDigit = removeCheckDigit(code);\n                if (codeWithNoCheckDigit == null) {\n                    throw new CheckDigitException(\"Invalid Code=[\" + code + \"]\");\n                }\n                final String actual = routine.calculate(codeWithNoCheckDigit);\n                // If exception not thrown, check that the digit is incorrect instead\n                if (expected.equals(actual)) {\n                    fail(\"Expected mismatch for \" + code + \" expected \" + expected + \" actual \" + actual);\n                }\n            } catch (final CheckDigitException e) {\n                // possible failure messages:\n                // Invalid ISBN Length ...\n                // Invalid Character[ ...\n                // Are there any others?\n                assertTrue(e.getMessage().startsWith(\"Invalid \"), \"Invalid Character[\" + i + \"]=\" + e.getMessage());\n// WAS                assertTrue(\"Invalid Character[\" +i +\"]=\" +  e.getMessage(), e.getMessage().startsWith(\"Invalid Character[\"));\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest calculate() for invalid values.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testCalculateValid()", "name": "testCalculateValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCalculateValid()", "original_string": "    @Test\n    public void testCalculateValid() {\n        if (log.isDebugEnabled()) {\n            log.debug(\"testCalculateValid() for \" + routine.getClass().getName());\n        }\n\n        // test valid values\n        for (int i = 0; i < valid.length; i++) {\n            final String code = removeCheckDigit(valid[i]);\n            final String expected = checkDigit(valid[i]);\n            try {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"   \" + i + \" Testing Valid Check Digit, Code=[\" + code + \"] expected=[\" + expected + \"]\");\n                }\n                assertEquals(expected, routine.calculate(code), \"valid[\" + i + \"]: \" + valid[i]);\n            } catch (final Exception e) {\n                fail(\"valid[\" + i + \"]=\" + valid[i] + \" threw \" + e);\n            }\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest calculate() for valid values.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testIsValidFalse()", "name": "testIsValidFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidFalse()", "original_string": "    @Test\n    public void testIsValidFalse() {\n        if (log.isDebugEnabled()) {\n            log.debug(\"testIsValidFalse() for \" + routine.getClass().getName());\n        }\n\n        // test invalid code values\n        for (int i = 0; i < invalid.length; i++) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"   \" + i + \" Testing Invalid Code=[\" + invalid[i] + \"]\");\n            }\n            assertFalse(routine.isValid(invalid[i]), \"invalid[\" + i + \"]: \" + invalid[i]);\n        }\n\n        // test invalid check digit values\n        final String[] invalidCheckDigits = createInvalidCodes(valid);\n        for (int i = 0; i < invalidCheckDigits.length; i++) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"   \" + i + \" Testing Invalid Check Digit, Code=[\" + invalidCheckDigits[i] + \"]\");\n            }\n            assertFalse(routine.isValid(invalidCheckDigits[i]), \"invalid check digit[\" + i + \"]: \" + invalidCheckDigits[i]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest isValid() for invalid values.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testIsValidTrue()", "name": "testIsValidTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidTrue()", "original_string": "    @Test\n    public void testIsValidTrue() {\n        if (log.isDebugEnabled()) {\n            log.debug(\"testIsValidTrue() for \" + routine.getClass().getName());\n        }\n\n        // test valid values\n        for (int i = 0; i < valid.length; i++) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"   \" + i + \" Testing Valid Code=[\" + valid[i] + \"]\");\n            }\n            assertTrue(routine.isValid(valid[i]), \"valid[\" + i + \"]: \" + valid[i]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest isValid() for valid values.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testMissingCode()", "name": "testMissingCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingCode()", "original_string": "    @Test\n    public void testMissingCode() {\n\n        // isValid() null\n        assertFalse(routine.isValid(null), \"isValid() Null\");\n\n        // isValid() zero length\n        assertFalse(routine.isValid(\"\"), \"isValid() Zero Length\");\n\n        // isValid() length 1\n        // Don't use 0, because that passes for Verhoef (not sure why yet)\n        assertFalse(routine.isValid(\"9\"), \"isValid() Length 1\");\n\n        // calculate() null\n        try {\n            routine.calculate(null);\n            fail(\"calculate() Null - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(missingMessage, e.getMessage(), \"calculate() Null\");\n        }\n\n        // calculate() zero length\n        try {\n            routine.calculate(\"\");\n            fail(\"calculate() Zero Length - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(missingMessage, e.getMessage(), \"calculate() Zero Length\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest missing code\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testSerialization()", "name": "testSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerialization()", "original_string": "    @Test\n    public void testSerialization() {\n        // Serialize the check digit routine\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n            oos.writeObject(routine);\n            oos.flush();\n        } catch (final Exception e) {\n            fail(routine.getClass().getName() + \" error during serialization: \" + e);\n        }\n\n        // Deserialize the test object\n        Object result = null;\n        try (ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())) {\n            final ObjectInputStream ois = new ObjectInputStream(bais);\n            result = ois.readObject();\n        } catch (final Exception e) {\n            fail(routine.getClass().getName() + \" error during deserialization: \" + e);\n        }\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest check digit serialization.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]testZeroSum()", "name": "testZeroSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testZeroSum()", "original_string": "    @Test\n    public void testZeroSum() {\n        assertFalse(routine.isValid(zeroSum), \"isValid() Zero Sum\");\n        try {\n            routine.calculate(zeroSum);\n            fail(\"Zero Sum - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(\"Invalid code, sum is zero\", e.getMessage(), \"isValid() Zero Sum\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest zero sum\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java.VerhoeffCheckDigitTest.[void]testZeroSum()", "name": "testZeroSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testZeroSum()", "original_string": "    @Override\n    @Test\n    public void testZeroSum() {\n        // ignore, don't run this test\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java", "class_name": "VerhoeffCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java.VerhoeffCheckDigitTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest zero sum\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java.CUSIPCheckDigitTest.[void]testValidator336InvalidCheckDigits()", "name": "testValidator336InvalidCheckDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator336InvalidCheckDigits()", "original_string": "    @Test\n    public void testValidator336InvalidCheckDigits() {\n        for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\n            assertFalse(routine.isValid(invalidCheckDigit), () -> \"Should fail: \" + invalidCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java", "class_name": "CUSIPCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java.CUSIPCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java.CUSIPCheckDigitTest.[void]testValidator336ValidCheckDigits()", "name": "testValidator336ValidCheckDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator336ValidCheckDigits()", "original_string": "    @Test\n    public void testValidator336ValidCheckDigits() {\n        for (final String validCheckDigit : VALID_CHECK_DIGITS) {\n            assertTrue(routine.isValid(validCheckDigit), () -> \"Should fail: \" + validCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java", "class_name": "CUSIPCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java.CUSIPCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java.ISINCheckDigitTest.[void]testValidator345()", "name": "testValidator345", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator345()", "original_string": "    @Test\n    public void testValidator345() {\n        for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\n            assertFalse(routine.isValid(invalidCheckDigit), () -> \"Should fail: \" + invalidCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java", "class_name": "ISINCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java.ISINCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_toStringTest.java.ModulusTenCheckDigit_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        String expected = \"ModulusTenCheckDigit[postitionWeight=[1, 2], useRightPos=true, sumWeightedDigits=true]\";\n        assertEquals(expected, checkDigit.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_toStringTest.java", "class_name": "ModulusTenCheckDigit_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_toStringTest.java.ModulusTenCheckDigit_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java.ModulusTenCheckDigit_isValidTest.[void]testIsValid_BlankOrNullCode()", "name": "testIsValid_BlankOrNullCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIsValid_BlankOrNullCode()", "original_string": "    @Test\n    void testIsValid_BlankOrNullCode() {\n        ModulusTenCheckDigit checkDigit = new ModulusTenCheckDigit(new int[]{1});\n        assertFalse(checkDigit.isValid(null));\n        assertFalse(checkDigit.isValid(\"\"));\n        assertFalse(checkDigit.isValid(\"   \"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java", "class_name": "ModulusTenCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java.ModulusTenCheckDigit_isValidTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java.ModulusTenCheckDigit_isValidTest.[void]testIsValid_NonDigitCheckDigit()", "name": "testIsValid_NonDigitCheckDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIsValid_NonDigitCheckDigit()", "original_string": "    @Test\n    void testIsValid_NonDigitCheckDigit() {\n        ModulusTenCheckDigit checkDigit = new ModulusTenCheckDigit(new int[]{1});\n        assertFalse(checkDigit.isValid(\"123A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java", "class_name": "ModulusTenCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java.ModulusTenCheckDigit_isValidTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java.ModulusTenCheckDigit_isValidTest.[void]testIsValid_ValidCode()", "name": "testIsValid_ValidCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIsValid_ValidCode()", "original_string": "    @Test\n    void testIsValid_ValidCode() {\n        ModulusTenCheckDigit checkDigit = new ModulusTenCheckDigit(new int[]{1});\n        ModulusCheckDigit mockSuper = mock(ModulusCheckDigit.class);\n        when(mockSuper.isValid(\"1234\")).thenReturn(true);\n        checkDigit.setSuper(mockSuper);\n        assertTrue(checkDigit.isValid(\"1234\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java", "class_name": "ModulusTenCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java.ModulusTenCheckDigit_isValidTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[void]testOther()", "name": "testOther", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOther()", "original_string": "    @Test\n    public void testOther() throws Exception {\n        try (BufferedReader rdr = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream(\"IBANtests.txt\"), \"ASCII\"))) {\n            String line;\n            while ((line = rdr.readLine()) != null) {\n                if (!line.startsWith(\"#\") && !line.isEmpty()) {\n                    if (line.startsWith(\"-\")) {\n                        line = line.substring(1);\n                        Assert.assertFalse(line, routine.isValid(line.replace(\" \", \"\")));\n                    } else {\n                        Assert.assertTrue(line, routine.isValid(line.replace(\" \", \"\")));\n                    }\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[void]testZeroSum()", "name": "testZeroSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testZeroSum()", "original_string": "    @Override\n    @Test\n    public void testZeroSum() {\n        // ignore, don't run this test\n\n        // example code used to create dummy IBANs\n//        try {\n//            for(int i=0; i<97;i++) {\n//                String check = String.format(\"ZZ00ZZZZZZZZZZZZZZZZZZZZZZZZZ%02d\", new Object[]{Integer.valueOf(i)});\n//                String chk = routine.calculate(check);\n//                if (chk.equals(\"97\")||chk.equals(\"98\")||chk.equals(\"02\")) {\n//                    System.out.println(check+ \" \"+chk);\n//                }\n//            }\n//        } catch (CheckDigitException e) {\n//            e.printStackTrace();\n//        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest zero sum\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java.SedolCheckDigitTest.[void]testValidator346()", "name": "testValidator346", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator346()", "original_string": "    @Test\n    public void testValidator346() {\n        for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\n            assertFalse(routine.isValid(invalidCheckDigit), () -> \"Should fail: \" + invalidCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java", "class_name": "SedolCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java.SedolCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java.ModulusTenSedolCheckDigitTest.[void]testValidator346()", "name": "testValidator346", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator346()", "original_string": "    @Test\n    public void testValidator346() {\n        for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\n            assertFalse(routine.isValid(invalidCheckDigit), () -> \"Should fail: \" + invalidCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java", "class_name": "ModulusTenSedolCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java.ModulusTenSedolCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest.[void]testIsValid_NullCode()", "name": "testIsValid_NullCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_NullCode()", "original_string": "    @Test\n    public void testIsValid_NullCode() {\n        IBANCheckDigit ibanCheckDigit = new IBANCheckDigit();\n        assertFalse(ibanCheckDigit.isValid(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "class_name": "IBANCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest.[void]testIsValid_ShortCode()", "name": "testIsValid_ShortCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_ShortCode()", "original_string": "    @Test\n    public void testIsValid_ShortCode() {\n        IBANCheckDigit ibanCheckDigit = new IBANCheckDigit();\n        assertFalse(ibanCheckDigit.isValid(\"1234\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "class_name": "IBANCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest.[void]testIsValid_InvalidCheckDigits()", "name": "testIsValid_InvalidCheckDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_InvalidCheckDigits()", "original_string": "    @Test\n    public void testIsValid_InvalidCheckDigits() {\n        IBANCheckDigit ibanCheckDigit = new IBANCheckDigit();\n        assertFalse(ibanCheckDigit.isValid(\"12003456789012345678901234567890123456789012345678901234\"));\n        assertFalse(ibanCheckDigit.isValid(\"12013456789012345678901234567890123456789012345678901234\"));\n        assertFalse(ibanCheckDigit.isValid(\"12993456789012345678901234567890123456789012345678901234\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "class_name": "IBANCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest.[void]testIsValid_ValidCode()", "name": "testIsValid_ValidCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_ValidCode()", "original_string": "    @Test\n    public void testIsValid_ValidCode() {\n        IBANCheckDigit ibanCheckDigit = new IBANCheckDigit();\n        assertTrue(ibanCheckDigit.isValid(\"GB82WEST12345698765432\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "class_name": "IBANCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest.[void]testIsValid_CheckDigitException()", "name": "testIsValid_CheckDigitException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValid_CheckDigitException()", "original_string": "    @Test\n    public void testIsValid_CheckDigitException() {\n        IBANCheckDigit ibanCheckDigit = new IBANCheckDigit();\n        assertFalse(ibanCheckDigit.isValid(\"123456789012345678901234567890123456789012345678901234\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "class_name": "IBANCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java.IBANCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest.[void]testIsValidWithNullCode()", "name": "testIsValidWithNullCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidWithNullCode()", "original_string": "    @Test\n    public void testIsValidWithNullCode() {\n        assertFalse(routine.isValid(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java", "class_name": "ISBNCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest.[void]testIsValidWithValidISBN10()", "name": "testIsValidWithValidISBN10", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidWithValidISBN10()", "original_string": "    @Test\n    public void testIsValidWithValidISBN10() {\n        assertTrue(routine.isValid(\"020163385X\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java", "class_name": "ISBNCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest.[void]testIsValidWithValidISBN13()", "name": "testIsValidWithValidISBN13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidWithValidISBN13()", "original_string": "    @Test\n    public void testIsValidWithValidISBN13() {\n        assertTrue(routine.isValid(\"9781590596272\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java", "class_name": "ISBNCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest.[void]testIsValidWithInvalidLength()", "name": "testIsValidWithInvalidLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidWithInvalidLength()", "original_string": "    @Test\n    public void testIsValidWithInvalidLength() {\n        assertFalse(routine.isValid(\"123456789\"));\n        assertFalse(routine.isValid(\"12345678901\"));\n        assertFalse(routine.isValid(\"123456789012\"));\n        assertFalse(routine.isValid(\"12345678901234\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java", "class_name": "ISBNCheckDigit_isValidTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java.ISBNCheckDigit_isValidTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java.ISBNCheckDigitTest.[void]testInvalidLength()", "name": "testInvalidLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvalidLength()", "original_string": "    @Test\n    public void testInvalidLength() {\n        assertFalse(routine.isValid(\"123456789\"), \"isValid() Lth 9 \");\n        assertFalse(routine.isValid(\"12345678901\"), \"isValid() Lth 11\");\n        assertFalse(routine.isValid(\"123456789012\"), \"isValid() Lth 12\");\n        assertFalse(routine.isValid(\"12345678901234\"), \"isValid() Lth 14\");\n\n        try {\n            routine.calculate(\"12345678\");\n            fail(\"calculate() Lth 8 - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(e.getMessage(), \"Invalid ISBN Length = 8\", \"calculate() Lth 8\");\n        }\n\n        try {\n            routine.calculate(\"1234567890\");\n            fail(\"calculate() Lth 10 - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(\"Invalid ISBN Length = 10\", e.getMessage(), \"calculate() Lth 10\");\n        }\n\n        try {\n            routine.calculate(\"12345678901\");\n            fail(\"calculate() Lth 11 - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(\"Invalid ISBN Length = 11\", e.getMessage(), \"calculate() Lth 11\");\n        }\n\n        try {\n            routine.calculate(\"1234567890123\");\n            fail(\"calculate() Lth 13 - expected exception\");\n        } catch (final Exception e) {\n            assertEquals(\"Invalid ISBN Length = 13\", e.getMessage(), \"calculate() Lth 13\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java", "class_name": "ISBNCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java.ISBNCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java.IBANCheckDigit_calculateTest.[void]testCalculateValidCode()", "name": "testCalculateValidCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCalculateValidCode()", "original_string": "    @Test\n    public void testCalculateValidCode() throws CheckDigitException {\n        String code = \"AD1200012030200359100100\";\n        String expected = \"12\"; // The expected check digit for this valid code\n        assertEquals(expected, routine.calculate(code));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java", "class_name": "IBANCheckDigit_calculateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java.IBANCheckDigit_calculateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java.IBANCheckDigit_calculateTest.[void]testCalculateInvalidCodeLength()", "name": "testCalculateInvalidCodeLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCalculateInvalidCodeLength()", "original_string": "    @Test\n    public void testCalculateInvalidCodeLength() {\n        String code = \"AD12\"; // This code is too short\n        CheckDigitException exception = assertThrows(CheckDigitException.class, () -> {\n            routine.calculate(code);\n        });\n        assertEquals(\"Invalid Code length=4\", exception.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java", "class_name": "IBANCheckDigit_calculateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java.IBANCheckDigit_calculateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java.IBANCheckDigit_calculateTest.[void]testCalculateNullCode()", "name": "testCalculateNullCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCalculateNullCode()", "original_string": "    @Test\n    public void testCalculateNullCode() {\n        String code = null;\n        CheckDigitException exception = assertThrows(CheckDigitException.class, () -> {\n            routine.calculate(code);\n        });\n        assertEquals(\"Invalid Code length=0\", exception.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java", "class_name": "IBANCheckDigit_calculateTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java.IBANCheckDigit_calculateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java.ModulusTenCUSIPCheckDigitTest.[void]testValidator336InvalidCheckDigits()", "name": "testValidator336InvalidCheckDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator336InvalidCheckDigits()", "original_string": "    @Test\n    public void testValidator336InvalidCheckDigits() {\n        for (final String invalidCheckDigit : INVALID_CHECK_DIGITS) {\n            assertFalse(routine.isValid(invalidCheckDigit), () -> \"Should fail: \" + invalidCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java", "class_name": "ModulusTenCUSIPCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java.ModulusTenCUSIPCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java.ModulusTenCUSIPCheckDigitTest.[void]testValidator336ValidCheckDigits()", "name": "testValidator336ValidCheckDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidator336ValidCheckDigits()", "original_string": "    @Test\n    public void testValidator336ValidCheckDigits() {\n        for (final String validCheckDigit : VALID_CHECK_DIGITS) {\n            assertTrue(routine.isValid(validCheckDigit), () -> \"Should fail: \" + validCheckDigit);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java", "class_name": "ModulusTenCUSIPCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java.ModulusTenCUSIPCheckDigitTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest.[void]testEqualsSameObject()", "name": "testEqualsSameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsSameObject()", "original_string": "    @Test\n    public void testEqualsSameObject() {\n        assertTrue(flags1.equals(flags1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java", "class_name": "Flags_equalsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest.[void]testEqualsDifferentClass()", "name": "testEqualsDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentClass()", "original_string": "    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(flags1.equals(\"not a Flags object\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java", "class_name": "Flags_equalsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest.[void]testEqualsSameFlags()", "name": "testEqualsSameFlags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsSameFlags()", "original_string": "    @Test\n    public void testEqualsSameFlags() {\n        assertTrue(flags1.equals(flags2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java", "class_name": "Flags_equalsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest.[void]testEqualsDifferentFlags()", "name": "testEqualsDifferentFlags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentFlags()", "original_string": "    @Test\n    public void testEqualsDifferentFlags() {\n        flags2.turnOff(0x0000000000000001L);\n        assertFalse(flags1.equals(flags2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java", "class_name": "Flags_equalsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java.Flags_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtilsTest.java.ValidatorUtilsTest.[void]testCopyFastHashMap()", "name": "testCopyFastHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCopyFastHashMap()", "original_string": "    @Test\n    public void testCopyFastHashMap() {\n        final FastHashMap original = new FastHashMap();\n        original.put(\"key1\", \"value1\");\n        original.put(\"key2\", \"value2\");\n        original.put(\"key3\", \"value3\");\n        original.setFast(true);\n        final FastHashMap copy = ValidatorUtils.copyFastHashMap(original);\n        assertEquals(original, copy);\n      }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtilsTest.java", "class_name": "ValidatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtilsTest.java.ValidatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        final Flags f = new Flags(98432);\n        f.clear();\n        assertEquals(0, f.getFlags());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClone()", "original_string": "    @Test\n    public void testClone() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for Object clone()\n"}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testEqualsObject()", "name": "testEqualsObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsObject()", "original_string": "    @Test\n    public void testEqualsObject() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for boolean equals(Object)\n"}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testGetFlags()", "name": "testGetFlags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFlags()", "original_string": "    @Test\n    public void testGetFlags() {\n        final Flags f = new Flags(45);\n        assertEquals(f.getFlags(), 45);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        final Flags f = new Flags(45);\n        assertEquals(f.hashCode(), 45);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn()", "name": "testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn()", "original_string": "    @Test\n    public void testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn() {\n        final Flags first = new Flags(1);\n        final long firstAndSecond = 3;\n\n        assertFalse(first.isOn(firstAndSecond));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testIsOnIsTrueWhenHighOrderBitIsSetAndQueried()", "name": "testIsOnIsTrueWhenHighOrderBitIsSetAndQueried", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsOnIsTrueWhenHighOrderBitIsSetAndQueried()", "original_string": "    @Test\n    public void testIsOnIsTrueWhenHighOrderBitIsSetAndQueried() {\n        final Flags allOn = new Flags(~0);\n        final long highOrderBit = 0x8000000000000000L;\n\n        assertTrue(allOn.isOn(highOrderBit));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testIsOnOff()", "name": "testIsOnOff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsOnOff()", "original_string": "    @Test\n    public void testIsOnOff() {\n        final Flags f = new Flags();\n        f.turnOn(LONG_FLAG);\n        f.turnOn(INT_FLAG);\n        assertTrue(f.isOn(LONG_FLAG));\n        assertTrue(!f.isOff(LONG_FLAG));\n\n        assertTrue(f.isOn(INT_FLAG));\n        assertTrue(!f.isOff(INT_FLAG));\n\n        assertTrue(f.isOff(LONG_FLAG_2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        final Flags f = new Flags();\n        String s = f.toString();\n        assertEquals(64, s.length());\n\n        f.turnOn(INT_FLAG);\n        s = f.toString();\n        assertEquals(64, s.length());\n\n        assertEquals(\"0000000000000000000000000000000000000000000000000000000000000100\", s);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for String toString()\n"}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testTurnOff()", "name": "testTurnOff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTurnOff()", "original_string": "    @Test\n    public void testTurnOff() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testTurnOffAll()", "name": "testTurnOffAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTurnOffAll()", "original_string": "    @Test\n    public void testTurnOffAll() {\n        final Flags f = new Flags(98432);\n        f.turnOffAll();\n        assertEquals(0, f.getFlags());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testTurnOnAll()", "name": "testTurnOnAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTurnOnAll()", "original_string": "    @Test\n    public void testTurnOnAll() {\n        final Flags f = new Flags();\n        f.turnOnAll();\n        assertEquals(~0, f.getFlags());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest.[void]testTurnOnOff()", "name": "testTurnOnOff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTurnOnOff()", "original_string": "    @Test\n    public void testTurnOnOff() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "class_name": "FlagsTest", "class_uri": "src/test/java/org/apache/commons/validator/util/FlagsTest.java.FlagsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java.Flags_toStringTest.[void]testToStringWithAllFlagsOff()", "name": "testToStringWithAllFlagsOff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithAllFlagsOff()", "original_string": "    @Test\n    public void testToStringWithAllFlagsOff() {\n        Flags flags = new Flags(0);\n        assertEquals(\"0000000000000000000000000000000000000000000000000000000000000000\", flags.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java", "class_name": "Flags_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java.Flags_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java.Flags_toStringTest.[void]testToStringWithAllFlagsOn()", "name": "testToStringWithAllFlagsOn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithAllFlagsOn()", "original_string": "    @Test\n    public void testToStringWithAllFlagsOn() {\n        Flags flags = new Flags(0xFFFFFFFFFFFFFFFFL);\n        assertEquals(\"1111111111111111111111111111111111111111111111111111111111111111\", flags.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java", "class_name": "Flags_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java.Flags_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java.Flags_toStringTest.[void]testToStringWithMixedFlags()", "name": "testToStringWithMixedFlags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithMixedFlags()", "original_string": "    @Test\n    public void testToStringWithMixedFlags() {\n        Flags flags = new Flags(45); // Binary: 101101\n        assertEquals(\"0000000000000000000000000000000000000000000000000000000000101101\", flags.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java", "class_name": "Flags_toStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java.Flags_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java.Flags_cloneTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClone()", "original_string": "    @Test\n    public void testClone() {\n        Flags clonedFlags = (Flags) flags.clone();\n        assertEquals(flags.getFlags(), clonedFlags.getFlags());\n        assertTrue(flags.equals(clonedFlags));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java", "class_name": "Flags_cloneTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java.Flags_cloneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java.Flags_cloneTest.[void]testCloneWithStateChange()", "name": "testCloneWithStateChange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloneWithStateChange()", "original_string": "    @Test\n    public void testCloneWithStateChange() {\n        flags.turnOff(0x000000000000000FL); // Turn off some flags\n        Flags clonedFlags = (Flags) flags.clone();\n        assertEquals(flags.getFlags(), clonedFlags.getFlags());\n        assertTrue(flags.equals(clonedFlags));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java", "class_name": "Flags_cloneTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java.Flags_cloneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java.Flags_cloneTest.[void]testCloneNotSupported()", "name": "testCloneNotSupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloneNotSupported()", "original_string": "    @Test\n    public void testCloneNotSupported() {\n        Flags mockFlags = new Flags(0) {\n            @Override\n            public Object clone() {\n                throw new UnsupportedOperationException(\"Clone not supported\");\n            }\n        };\n        assertThrows(UnsupportedOperationException.class, () -> mockFlags.clone());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java", "class_name": "Flags_cloneTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java.Flags_cloneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyFastHashMapTest.java.ValidatorUtils_copyFastHashMapTest.[void]testCopyFastHashMap_AllPathsCovered()", "name": "testCopyFastHashMap_AllPathsCovered", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCopyFastHashMap_AllPathsCovered()", "original_string": "    @Test\n    public void testCopyFastHashMap_AllPathsCovered() {\n        // Given\n        FastHashMap original = new FastHashMap();\n        original.put(\"key1\", new Msg());\n        original.put(\"key2\", new Arg());\n        original.put(\"key3\", new Var());\n        original.put(\"key4\", \"plainValue\");\n\n        // When\n        FastHashMap copied = ValidatorUtils.copyFastHashMap(original);\n\n        // Then\n        assertEquals(4, copied.size());\n        assertTrue(copied.get(\"key1\") instanceof Msg);\n        assertTrue(copied.get(\"key2\") instanceof Arg);\n        assertTrue(copied.get(\"key3\") instanceof Var);\n        assertEquals(\"plainValue\", copied.get(\"key4\"));\n        assertTrue(copied.getFast());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyFastHashMapTest.java", "class_name": "ValidatorUtils_copyFastHashMapTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyFastHashMapTest.java.ValidatorUtils_copyFastHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyMapTest.java.ValidatorUtils_copyMapTest.[void]testCopyMap()", "name": "testCopyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCopyMap()", "original_string": "    @Test\n    public void testCopyMap() {\n        Map<String, Object> copiedMap = ValidatorUtils.copyMap(originalMap);\n\n        assertEquals(originalMap.size(), copiedMap.size());\n        for (Map.Entry<String, Object> entry : originalMap.entrySet()) {\n            String key = entry.getKey();\n            Object originalValue = entry.getValue();\n            Object copiedValue = copiedMap.get(key);\n\n            if (originalValue instanceof Cloneable) {\n                assertTrue(originalValue != copiedValue); // Ensure deep copy\n            } else {\n                assertEquals(originalValue, copiedValue);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyMapTest.java", "class_name": "ValidatorUtils_copyMapTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyMapTest.java.ValidatorUtils_copyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest.[void]testReplace_AllNonNull()", "name": "testReplace_AllNonNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplace_AllNonNull()", "original_string": "    @Test\n    public void testReplace_AllNonNull() {\n        String value = \"Hello, world!\";\n        String key = \"world\";\n        String replaceValue = \"Java\";\n        assertEquals(\"Hello, Java!\", ValidatorUtils.replace(value, key, replaceValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java", "class_name": "ValidatorUtils_replaceTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest.[void]testReplace_ValueNull()", "name": "testReplace_ValueNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplace_ValueNull()", "original_string": "    @Test\n    public void testReplace_ValueNull() {\n        String value = null;\n        String key = \"world\";\n        String replaceValue = \"Java\";\n        assertEquals(null, ValidatorUtils.replace(value, key, replaceValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java", "class_name": "ValidatorUtils_replaceTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest.[void]testReplace_KeyNull()", "name": "testReplace_KeyNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplace_KeyNull()", "original_string": "    @Test\n    public void testReplace_KeyNull() {\n        String value = \"Hello, world!\";\n        String key = null;\n        String replaceValue = \"Java\";\n        assertEquals(\"Hello, world!\", ValidatorUtils.replace(value, key, replaceValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java", "class_name": "ValidatorUtils_replaceTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest.[void]testReplace_ReplaceValueNull()", "name": "testReplace_ReplaceValueNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplace_ReplaceValueNull()", "original_string": "    @Test\n    public void testReplace_ReplaceValueNull() {\n        String value = \"Hello, world!\";\n        String key = \"world\";\n        String replaceValue = null;\n        assertEquals(\"Hello, world!\", ValidatorUtils.replace(value, key, replaceValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java", "class_name": "ValidatorUtils_replaceTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java.ValidatorUtils_replaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyFound_String()", "name": "testGetValueAsString_PropertyFound_String", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyFound_String()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyFound_String() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"someProperty\";\n        String expectedValue = \"someValue\";\n\n        bean.setSomeProperty(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(expectedValue, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyFound_StringArray()", "name": "testGetValueAsString_PropertyFound_StringArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyFound_StringArray()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyFound_StringArray() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"somePropertyArray\";\n        String[] expectedValue = {\"value1\", \"value2\"};\n\n        bean.setSomePropertyArray(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(expectedValue.toString(), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyFound_EmptyStringArray()", "name": "testGetValueAsString_PropertyFound_EmptyStringArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyFound_EmptyStringArray()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyFound_EmptyStringArray() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"somePropertyArray\";\n        String[] expectedValue = {};\n\n        bean.setSomePropertyArray(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(\"\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyFound_Collection()", "name": "testGetValueAsString_PropertyFound_Collection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyFound_Collection()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyFound_Collection() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"somePropertyCollection\";\n        Collection<String> expectedValue = Collections.singletonList(\"value1\");\n\n        bean.setSomePropertyCollection(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(expectedValue.toString(), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyFound_EmptyCollection()", "name": "testGetValueAsString_PropertyFound_EmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyFound_EmptyCollection()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyFound_EmptyCollection() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"somePropertyCollection\";\n        Collection<String> expectedValue = Collections.emptyList();\n\n        bean.setSomePropertyCollection(expectedValue);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertEquals(\"\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyNotFound()", "name": "testGetValueAsString_PropertyNotFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyNotFound()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyNotFound() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"nonExistentProperty\";\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest.[void]testGetValueAsString_PropertyIsNull()", "name": "testGetValueAsString_PropertyIsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueAsString_PropertyIsNull()", "original_string": "    @Test\n    public void testGetValueAsString_PropertyIsNull() throws Exception {\n        TestBean bean = new TestBean();\n        String property = \"someProperty\";\n\n        bean.setSomeProperty(null);\n\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "class_name": "ValidatorUtils_getValueAsStringTest", "class_uri": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java.ValidatorUtils_getValueAsStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/util/Flags_hashCodeTest.java.Flags_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        Flags flags = new Flags(45);\n        assertEquals(45, flags.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/util/Flags_hashCodeTest.java", "class_name": "Flags_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/validator/util/Flags_hashCodeTest.java.Flags_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]