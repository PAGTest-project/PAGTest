[{"file_path": "src/test/java/org/apache/commons/validator/ExceptionTest.java", "testclass_name": "ExceptionTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.IOException;", "import org.junit.Ignore;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "ExceptionTest", "description": "Tests for handling exceptions in the Validator framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidatorException", "primary_tested": ["Validator.validate()"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorException"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of ValidatorException when validating a bean."}]}, {"file_path": "src/test/java/org/apache/commons/validator/EntityImportTest.java", "testclass_name": "EntityImportTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.net.URL;", "import java.util.Locale;", "import org.junit.jupiter.api.Test;"], "name": "EntityImportTest", "description": "Tests for loading and validating resources from a URL.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEntityImport", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "external_dependencies": {"modules": ["URL", "ValidatorResources", "Locale"], "project_specific_resources": ["EntityImportTest.getResource(String)"]}, "category": "unit", "description": "Tests the entity import loading the 'byteForm' form."}, {"name": "testParseURL", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "external_dependencies": {"modules": ["URL", "ValidatorResources", "Locale"], "project_specific_resources": ["EntityImportTest.getResource(String)"]}, "category": "unit", "description": "Tests loading ValidatorResources from a URL."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResourcesTest.java", "testclass_name": "ValidatorResourcesTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.InputStream;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorResourcesTest", "description": "Tests for the ValidatorResources class, focusing on handling null input streams.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNullInputStream", "primary_tested": ["ValidatorResources.ValidatorResources(InputStream)"], "external_dependencies": {"modules": ["ValidatorResources", "InputStream"]}, "category": "unit", "description": "Tests the behavior of ValidatorResources when a null InputStream is provided, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java", "testclass_name": "CustomValidatorResourcesTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.InputStream;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CustomValidatorResourcesTest", "description": "Tests for creating custom validator resources.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testCustomResources", "primary_tested": [], "external_dependencies": {"modules": ["java.io.InputStream", "org.junit.jupiter.api.Assertions"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests creating a custom validator resources by loading and closing a resource file."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidatorTest.java", "testclass_name": "GenericValidatorTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "GenericValidatorTest", "description": "Unit tests for the GenericValidator class, focusing on maxLength and minLength methods.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMaxLength", "primary_tested": ["GenericValidator.maxLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the maxLength functionality of the GenericValidator, checking various combinations of max length and line end length."}, {"name": "testMinLength", "primary_tested": ["GenericValidator.minLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the minLength functionality of the GenericValidator, checking various combinations of min length and line end length."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ISBNValidatorTest.java", "testclass_name": "ISBNValidatorTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "ISBNValidatorTest", "description": "Unit tests for validating ISBN numbers using ISBNValidator.", "class_members": {"variables": [{"name": "VALID_ISBN_RAW", "type": "static final String"}, {"name": "VALID_ISBN_DASHES", "type": "static final String"}, {"name": "VALID_ISBN_SPACES", "type": "static final String"}, {"name": "VALID_ISBN_X", "type": "static final String"}, {"name": "INVALID_ISBN", "type": "static final String"}]}, "test_cases": [{"name": "testIsValid", "primary_tested": ["ISBNValidator.isValid(String)"], "external_dependencies": {"modules": ["ISBNValidator"], "class_members": [{"name": "VALID_ISBN_RAW", "type": "variable"}, {"name": "VALID_ISBN_DASHES", "type": "variable"}, {"name": "VALID_ISBN_SPACES", "type": "variable"}, {"name": "VALID_ISBN_X", "type": "variable"}, {"name": "INVALID_ISBN", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method of ISBNValidator with various ISBN formats and invalid inputs."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java", "testclass_name": "VerhoeffCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "VerhoeffCheckDigitTest", "description": "Tests for the VerhoeffCheckDigit routine.", "class_members": {"variables": [{"name": "routine", "type": "CheckDigit"}, {"name": "valid", "type": "String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testZeroSum", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "fixtures_used": [], "description": "Test zero sum (ignored in this implementation)."}]}, {"file_path": "src/test/java/org/apache/commons/validator/VarTest.java", "testclass_name": "VarTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.util.Locale;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "VarTest", "description": "Tests for the Var class and its associated functionalities within the validation framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testVars", "primary_tested": ["Form.getField(String)", "Field.getVar(String)", "Var.getName()", "Var.getValue()", "Var.getJsType()", "Var.isResource()", "Var.getBundle()"], "associated_methods": ["Form.getForm(Locale,String)", "Field.getProperty()"], "external_dependencies": {"modules": ["Form", "Field", "Var", "Locale"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval and validation of variables from fields within a form, ensuring correct values and properties are set."}]}, {"file_path": "src/test/java/org/apache/commons/validator/DateTest.java", "testclass_name": "DateTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "DateTest", "description": "Tests for date validation using the Validator framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}], "methods": [{"name": "valueTest", "signature": "void valueTest(Object, boolean) throws ValidatorException"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testInvalidDate", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the date validation with an invalid date format."}, {"name": "testValidDate", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the date validation with a valid date format."}]}, {"file_path": "src/test/java/org/apache/commons/validator/CreditCardValidatorTest.java", "testclass_name": "CreditCardValidatorTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "CreditCardValidatorTest", "description": "Unit tests for the CreditCardValidator class, focusing on validating different types of credit card numbers and adding custom card types.", "class_members": {"variables": [{"name": "VALID_VISA", "type": "static final String"}, {"name": "VALID_SHORT_VISA", "type": "static final String"}, {"name": "VALID_AMEX", "type": "static final String"}, {"name": "VALID_MASTERCARD", "type": "static final String"}, {"name": "VALID_DISCOVER", "type": "static final String"}, {"name": "VALID_DINERS", "type": "static final String"}], "nested_classes": [{"name": "DinersClub", "description": "Custom implementation of CreditCardType for Diners Club cards"}]}, "test_cases": [{"name": "testAddAllowedCardType", "primary_tested": ["CreditCardValidator.isValid(String)"], "associated_methods": ["CreditCardValidator.addAllowedCardType(CreditCardValidator.CreditCardType)"], "external_dependencies": {"modules": ["CreditCardValidator", "DinersClub"], "class_members": [{"name": "VALID_VISA", "type": "variable"}, {"name": "VALID_AMEX", "type": "variable"}, {"name": "VALID_MASTERCARD", "type": "variable"}, {"name": "VALID_DISCOVER", "type": "variable"}, {"name": "VALID_DINERS", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a custom card type (Diners Club) to the CreditCardValidator and validates its functionality."}, {"name": "testIsValid", "primary_tested": ["CreditCardValidator.isValid(String)"], "external_dependencies": {"modules": ["CreditCardValidator"], "class_members": [{"name": "VALID_VISA", "type": "variable"}, {"name": "VALID_SHORT_VISA", "type": "variable"}, {"name": "VALID_AMEX", "type": "variable"}, {"name": "VALID_MASTERCARD", "type": "variable"}, {"name": "VALID_DISCOVER", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of various credit card numbers, including valid and invalid cases, and the effect of disabling certain card types."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ParameterTest.java", "testclass_name": "ParameterTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.IOException;", "import java.util.Locale;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "ParameterTest", "description": "Tests for validating parameters in the Validator class.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "firstName", "type": "String"}, {"name": "middleName", "type": "String"}, {"name": "lastName", "type": "String"}], "methods": [{"name": "assertParameterValue", "signature": "void assertParameterValue(Validator, String, Class<?>)"}, {"name": "createNameBean", "signature": "NameBean createNameBean()"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testAllValid", "primary_tested": ["Validator.validate()"], "associated_methods": ["ParameterTest.assertParameterValue(Validator, String, Class<?>)", "ParameterTest.createNameBean()"], "external_dependencies": {"modules": ["Validator", "NameBean", "Locale", "Field", "Form", "ValidatorAction", "ValidatorResults"], "class_members": [{"name": "firstName", "type": "variable"}, {"name": "middleName", "type": "variable"}, {"name": "lastName", "type": "variable"}, {"name": "createNameBean", "type": "method"}, {"name": "assertParameterValue", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that all validations ran and passed for the Validator class."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java", "testclass_name": "PercentValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.math.BigDecimal;", "import java.util.Locale;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PercentValidatorTest", "description": "Unit tests for PercentValidator class, focusing on validating and formatting percentage values.", "class_members": {"variables": [{"name": "validator", "type": "PercentValidator"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testFormatType", "primary_tested": ["PercentValidator.getFormatType()"], "external_dependencies": {"modules": ["PercentValidator", "AbstractNumberValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the format type retrieval functionality of the PercentValidator."}, {"name": "testInvalid", "primary_tested": ["BigDecimalValidator.isValid(String)", "BigDecimalValidator.validate(String)"], "external_dependencies": {"modules": ["PercentValidator", "BigDecimalValidator", "Locale"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid percentage values."}, {"name": "testValid", "primary_tested": ["BigDecimalValidator.validate(String, Locale)"], "associated_methods": ["Locale.setDefault(Locale)"], "external_dependencies": {"modules": ["PercentValidator", "BigDecimalValidator", "BigDecimal", "Locale"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid percentage values across different locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java", "testclass_name": "ISINCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ISINCheckDigitTest", "description": "Tests for the ISINCheckDigit routine, focusing on invalid check digits.", "class_members": {"variables": [{"name": "INVALID_CHECK_DIGITS", "type": "static final String[]"}, {"name": "routine", "type": "CheckDigit"}, {"name": "valid", "type": "String[]"}, {"name": "invalid", "type": "String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidator345", "primary_tested": ["ISINCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ISINCheckDigit"], "class_members": [{"name": "INVALID_CHECK_DIGITS", "type": "variable"}, {"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validity of ISIN codes with invalid check digits."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java", "testclass_name": "SedolCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SedolCheckDigitTest", "description": "Tests for the SedolCheckDigit routine, focusing on invalid check digits.", "class_members": {"variables": [{"name": "INVALID_CHECK_DIGITS", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidator346", "primary_tested": ["SedolCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["SedolCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}, {"name": "INVALID_CHECK_DIGITS", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid SEDOL check digits."}]}, {"file_path": "src/test/java/org/apache/commons/validator/DoubleTest.java", "testclass_name": "DoubleTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;"], "name": "DoubleTest", "description": "Unit tests for double validation in the Validator framework.", "class_members": {"variables": [{"name": "action", "type": "String"}, {"name": "formKey", "type": "String"}]}, "test_cases": [{"name": "testDouble", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the double validation with a valid value."}, {"name": "testDoubleFailure", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the double validation failure with an invalid value."}, {"name": "testDoubleMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the double validation with the maximum double value."}, {"name": "testDoubleMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the double validation with the minimum double value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ShortTest.java", "testclass_name": "ShortTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;"], "name": "ShortTest", "description": "Tests for short validation within the Validator framework.", "class_members": {"variables": [{"name": "formKey", "type": "String"}, {"name": "action", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testShortBeyondMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "formKey", "type": "variable"}, {"name": "action", "type": "variable"}]}, "category": "unit", "description": "Tests the short validation failure by setting a value beyond the maximum short value."}, {"name": "testShortBeyondMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "formKey", "type": "variable"}, {"name": "action", "type": "variable"}]}, "category": "unit", "description": "Tests the short validation failure by setting a value beyond the minimum short value."}, {"name": "testShortMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "formKey", "type": "variable"}, {"name": "action", "type": "variable"}]}, "category": "unit", "description": "Tests the short validation by setting a value at the maximum short value."}, {"name": "testShortMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "formKey", "type": "variable"}, {"name": "action", "type": "variable"}]}, "category": "unit", "description": "Tests the short validation by setting a value at the minimum short value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java", "testclass_name": "CUSIPCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CUSIPCheckDigitTest", "description": "Tests for the CUSIP check digit validation routine.", "class_members": {"variables": [{"name": "INVALID_CHECK_DIGITS", "type": "static final String[]"}, {"name": "VALID_CHECK_DIGITS", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidator336InvalidCheckDigits", "primary_tested": ["CUSIPCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CUSIPCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}, {"name": "INVALID_CHECK_DIGITS", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid CUSIP check digits."}, {"name": "testValidator336ValidCheckDigits", "primary_tested": ["CUSIPCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CUSIPCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}, {"name": "VALID_CHECK_DIGITS", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid CUSIP check digits."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java", "testclass_name": "ModulusTenSedolCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ModulusTenSedolCheckDigitTest", "description": "Tests for the ModulusTenSedolCheckDigit class, focusing on invalid check digit validation.", "class_members": {"variables": [{"name": "INVALID_CHECK_DIGITS", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidator346", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}, {"name": "INVALID_CHECK_DIGITS", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid check digits using the ModulusTenCheckDigit routine."}]}, {"file_path": "src/test/java/org/apache/commons/validator/FloatTest.java", "testclass_name": "FloatTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;"], "name": "FloatTest", "description": "Tests for float validation in the Validator framework.", "class_members": {"variables": [{"name": "action", "type": "String"}, {"name": "formKey", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testFloat", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the float validation with a valid value."}, {"name": "testFloatFailure", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the float validation failure with an invalid value."}, {"name": "testFloatMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the float validation with the maximum float value."}, {"name": "testFloatMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "action", "type": "variable"}, {"name": "formKey", "type": "variable"}]}, "category": "unit", "description": "Tests the float validation with the minimum float value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtilsTest.java", "testclass_name": "ValidatorUtilsTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.apache.commons.collections.FastHashMap;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorUtilsTest", "description": "Unit tests for the ValidatorUtils class, specifically focusing on the copyFastHashMap method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCopyFastHashMap", "primary_tested": ["ValidatorUtils.copyFastHashMap(FastHashMap)"], "external_dependencies": {"modules": ["FastHashMap", "ValidatorUtils"]}, "category": "unit", "description": "Tests the functionality of copying a FastHashMap using the ValidatorUtils.copyFastHashMap method."}]}, {"file_path": "src/test/java/org/apache/commons/validator/IntegerTest.java", "testclass_name": "IntegerTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;"], "name": "IntegerTest", "description": "Unit tests for integer validation in the IntegerTest class.", "class_members": {"variables": [{"name": "formKey", "type": "String"}, {"name": "action", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testInt", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the int validation with a valid value."}, {"name": "testIntBeyondMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the int validation failure with a value beyond the maximum integer value."}, {"name": "testIntBeyondMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the int validation failure with a value beyond the minimum integer value."}, {"name": "testIntegerMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the int validation with the maximum integer value."}, {"name": "testIntFailure", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the int validation failure with an invalid value."}, {"name": "testIntMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the int validation with the minimum integer value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java", "testclass_name": "ISBNCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.fail;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ISBNCheckDigitTest", "description": "Tests for the ISBN check digit routine, focusing on invalid lengths.", "class_members": {"variables": [{"name": "routine", "type": "ISBNCheckDigit"}, {"name": "valid", "type": "String[]"}, {"name": "missingMessage", "type": "String"}, {"name": "zeroSum", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testInvalidLength", "primary_tested": ["ISBNCheckDigit.isValid(String)", "ISBNCheckDigit.calculate(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ISBNCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation and calculation of ISBN check digits with invalid lengths."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java", "testclass_name": "DateValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.text.DateFormat;", "import java.util.Date;", "import java.util.Locale;", "import java.util.TimeZone;", "import org.apache.commons.lang3.SystemProperties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidatorTest", "description": "Unit tests for DateValidator class, focusing on date comparison and validation methods.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}], "methods": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompare", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)", "DateValidator.compareWeeks(Date,Date,TimeZone)", "DateValidator.compareMonths(Date,Date,TimeZone)", "DateValidator.compareQuarters(Date,Date,TimeZone,int)", "DateValidator.compareYears(Date,Date,TimeZone)"], "associated_methods": ["DateValidatorTest.createDate(TimeZone,int,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests various date comparison methods in DateValidator."}, {"name": "testDateValidatorMethods", "primary_tested": ["DateValidator.validate(String)", "DateValidator.validate(String,Locale)", "DateValidator.validate(String,String)", "DateValidator.validate(String,String,Locale)", "DateValidator.validate(String,TimeZone)", "DateValidator.validate(String,Locale,TimeZone)", "DateValidator.validate(String,String,TimeZone)", "DateValidator.validate(String,String,Locale,TimeZone)", "DateValidator.isValid(String)", "DateValidator.isValid(String,Locale)", "DateValidator.isValid(String,String)", "DateValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["DateValidator", "Locale", "TimeZone", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}], "project_specific_resources": ["DateValidatorTest.createCalendar(TimeZone,int,int)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests various date validation methods in DateValidator."}, {"name": "testLocaleProviders", "primary_tested": ["SystemProperties.getJavaLocaleProviders()"], "associated_methods": ["DateFormat.getDateTimeInstance(int,int,Locale)", "DateFormat.setTimeZone(TimeZone)", "DateFormat.parse(String)"], "external_dependencies": {"modules": ["SystemProperties", "DateFormat", "TimeZone", "Locale", "Date"]}, "category": "unit", "fixtures_used": [], "description": "Tests the setup of locale providers and date parsing."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "testclass_name": "GenericTypeValidatorTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.util.Date;", "import java.util.Locale;", "import java.util.Map;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "GenericTypeValidatorTest", "description": "Tests for validating various types using different locales.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}], "methods": [{"name": "localeTest", "signature": "Map<String, ?> localeTest(TypeBean, Locale) throws ValidatorException"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testFRLocale", "primary_tested": ["GenericTypeValidatorTest.localeTest(TypeBean,Locale)"], "associated_methods": ["TypeBean.setByte(String)", "TypeBean.setShort(String)", "TypeBean.setInteger(String)", "TypeBean.setLong(String)", "TypeBean.setFloat(String)", "TypeBean.setDouble(String)", "TypeBean.setDate(String)"], "external_dependencies": {"modules": ["TypeBean", "Locale", "Validator", "ValidatorResults", "Map"], "class_members": [{"name": "localeTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the locale validation with French locale."}, {"name": "testType", "primary_tested": ["Validator.validate()"], "associated_methods": ["TypeBean.setByte(String)", "TypeBean.setShort(String)", "TypeBean.setInteger(String)", "TypeBean.setLong(String)", "TypeBean.setFloat(String)", "TypeBean.setDouble(String)"], "external_dependencies": {"modules": ["TypeBean", "Validator", "ValidatorResults", "Map"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of various types."}, {"name": "testUSLocale", "primary_tested": ["GenericTypeValidatorTest.localeTest(TypeBean,Locale)"], "associated_methods": ["TypeBean.setByte(String)", "TypeBean.setShort(String)", "TypeBean.setInteger(String)", "TypeBean.setLong(String)", "TypeBean.setFloat(String)", "TypeBean.setDouble(String)", "TypeBean.setDate(String)"], "external_dependencies": {"modules": ["TypeBean", "Locale", "Validator", "ValidatorResults", "Map"], "class_members": [{"name": "localeTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the locale validation with US locale."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/ISINValidatorTest.java", "testclass_name": "ISINValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "ISINValidatorTest", "description": "Unit tests for the ISINValidator class, focusing on validating ISIN codes with different configurations.", "class_members": {"variables": [{"name": "VALIDATOR_TRUE", "type": "static final ISINValidator"}, {"name": "VALIDATOR_FALSE", "type": "static final ISINValidator"}, {"name": "validFormat", "type": "final String[]"}, {"name": "invalidFormat", "type": "final String[]"}, {"name": "invalidFormatTrue", "type": "final String[]"}]}, "fixtures": [], "test_cases": [{"name": "testInvalidFalse", "primary_tested": ["ISINValidator.isValid(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "VALIDATOR_FALSE", "type": "variable"}, {"name": "invalidFormat", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method of ISINValidator with country checking disabled, ensuring invalid ISIN codes are correctly identified."}, {"name": "testInvalidTrue", "primary_tested": ["ISINValidator.isValid(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "VALIDATOR_TRUE", "type": "variable"}, {"name": "invalidFormat", "type": "variable"}, {"name": "invalidFormatTrue", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method of ISINValidator with country checking enabled, ensuring invalid ISIN codes are correctly identified."}, {"name": "testIsValidFalse", "primary_tested": ["ISINValidator.isValid(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "VALIDATOR_FALSE", "type": "variable"}, {"name": "validFormat", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method of ISINValidator with country checking disabled, ensuring valid ISIN codes are correctly identified."}, {"name": "testIsValidTrue", "primary_tested": ["ISINValidator.isValid(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "VALIDATOR_TRUE", "type": "variable"}, {"name": "validFormat", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method of ISINValidator with country checking enabled, ensuring valid ISIN codes are correctly identified."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ByteTest.java", "testclass_name": "ByteTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;"], "name": "ByteTest", "description": "Unit tests for byte validation in the Validator framework.", "class_members": {"variables": [{"name": "action", "type": "String"}, {"name": "formKey", "type": "String"}]}, "test_cases": [{"name": "testByte", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the byte validation with a valid value."}, {"name": "testByteBeyondMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Byte"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the byte validation failure with a value beyond the maximum byte value."}, {"name": "testByteBeyondMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Byte"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the byte validation failure with a value beyond the minimum byte value."}, {"name": "testByteFailure", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the byte validation failure with an invalid value."}, {"name": "testByteMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)", "Byte.toString(byte)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Byte"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the byte validation with the maximum byte value."}, {"name": "testByteMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)", "Byte.toString(byte)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Byte"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the byte validation with the minimum byte value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "testclass_name": "IBANCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import java.io.BufferedReader;", "import java.io.InputStreamReader;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.Assert;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IBANCheckDigitTest", "description": "Tests for IBAN check digit validation and related functionalities.", "class_members": {"variables": [{"name": "checkDigitLth", "type": "int"}, {"name": "routine", "type": "IBANCheckDigit"}, {"name": "valid", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "zeroSum", "type": "String[]"}, {"name": "missingMessage", "type": "String"}], "methods": [{"name": "checkDigit", "signature": "String checkDigit(String code)"}, {"name": "createInvalidCodes", "signature": "String[] createInvalidCodes(String[] codes)"}, {"name": "removeCheckDigit", "signature": "String removeCheckDigit(String code)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOther", "primary_tested": ["IBANCheckDigit.isValid(String)"], "associated_methods": ["BufferedReader.readLine()"], "external_dependencies": {"modules": ["BufferedReader", "InputStreamReader", "IBANCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IBAN codes using a file of test cases."}, {"name": "testZeroSum", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test for zero sum check digit, currently ignored."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java", "testclass_name": "ShortValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ShortValidatorTest", "description": "Unit tests for ShortValidator class, focusing on validation methods and range checks.", "class_members": {"variables": [{"name": "validator", "type": "ShortValidator"}, {"name": "strictValidator", "type": "ShortValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "Short"}, {"name": "maxPlusOne", "type": "Long"}, {"name": "min", "type": "Short"}, {"name": "minMinusOne", "type": "Long"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "Short"}, {"name": "testZero", "type": "Short"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "Short"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testShortRangeMinMax", "primary_tested": ["ShortValidator.isInRange(Short,short,short)", "ShortValidator.minValue(Short,short)", "ShortValidator.maxValue(Short,short)"], "associated_methods": ["ShortValidator.validate(String,String)"], "external_dependencies": {"modules": ["ShortValidator", "Short"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range, minimum value, and maximum value checks for ShortValidator."}, {"name": "testShortValidatorMethods", "primary_tested": ["ShortValidator.validate(String)", "ShortValidator.validate(String,Locale)", "ShortValidator.validate(String,String)", "ShortValidator.validate(String,String,Locale)", "ShortValidator.isValid(String)", "ShortValidator.isValid(String,Locale)", "ShortValidator.isValid(String,String)", "ShortValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["ShortValidator", "Short", "Locale"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validate and isValid methods of ShortValidator with different patterns and locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "testclass_name": "ValidatorResultsTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "ValidatorResultsTest", "description": "Tests for validating results using Validator framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "FIRST_NAME_FIELD", "type": "static final String"}, {"name": "MIDDLE_NAME_FIELD", "type": "static final String"}, {"name": "LAST_NAME_FIELD", "type": "static final String"}, {"name": "firstName", "type": "String"}, {"name": "middleName", "type": "String"}, {"name": "lastName", "type": "String"}], "methods": [{"name": "checkNotRun", "signature": "void checkNotRun(ValidatorResults, String, String)"}, {"name": "checkValidatorResult", "signature": "void checkValidatorResult(ValidatorResults, String, String, boolean)"}, {"name": "createNameBean", "signature": "NameBean createNameBean()"}, {"name": "validate", "signature": "ValidatorResults validate(Object)"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testAllValid", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResultsTest.checkValidatorResult(ValidatorResults, String, String, boolean)", "ValidatorResultsTest.createNameBean()"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean", "ValidatorException"], "class_members": [{"name": "firstName", "type": "variable"}, {"name": "middleName", "type": "variable"}, {"name": "lastName", "type": "variable"}, {"name": "createNameBean", "type": "method"}, {"name": "checkValidatorResult", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that all validations ran and passed."}, {"name": "testErrors", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResultsTest.checkValidatorResult(ValidatorResults, String, String, boolean)", "ValidatorResultsTest.checkNotRun(ValidatorResults, String, String)", "ValidatorResultsTest.createNameBean()"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean", "ValidatorException"], "class_members": [{"name": "firstName", "type": "variable"}, {"name": "middleName", "type": "variable"}, {"name": "lastName", "type": "variable"}, {"name": "createNameBean", "type": "method"}, {"name": "checkValidatorResult", "type": "method"}, {"name": "checkNotRun", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that some validations failed and some didn't run."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java", "testclass_name": "BigIntegerValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.math.BigInteger;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BigIntegerValidatorTest", "description": "Unit tests for BigIntegerValidator, focusing on validation methods and range checks.", "class_members": {"variables": [{"name": "validator", "type": "BigIntegerValidator"}, {"name": "strictValidator", "type": "BigIntegerValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "BigInteger"}, {"name": "maxPlusOne", "type": "BigInteger"}, {"name": "min", "type": "BigInteger"}, {"name": "minMinusOne", "type": "BigInteger"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "BigInteger"}, {"name": "testZero", "type": "BigInteger"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "BigInteger"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBigIntegerRangeMinMax", "primary_tested": ["BigIntegerValidator.isInRange(BigInteger,int,int)", "BigIntegerValidator.minValue(BigInteger,int)", "BigIntegerValidator.maxValue(BigInteger,int)"], "associated_methods": ["BigIntegerValidator.validate(String,String)"], "external_dependencies": {"modules": ["BigIntegerValidator", "BigInteger"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range, minimum, and maximum validation methods of BigIntegerValidator."}, {"name": "testBigIntegerValidatorMethods", "primary_tested": ["BigIntegerValidator.validate(String)", "BigIntegerValidator.validate(String,Locale)", "BigIntegerValidator.validate(String,String)", "BigIntegerValidator.validate(String,String,Locale)", "BigIntegerValidator.isValid(String)", "BigIntegerValidator.isValid(String,Locale)", "BigIntegerValidator.isValid(String,String)", "BigIntegerValidator.isValid(String,String,Locale)"], "associated_methods": [], "external_dependencies": {"modules": ["BigIntegerValidator", "BigInteger", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validate and isValid methods of BigIntegerValidator with different patterns and locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java", "testclass_name": "DoubleValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DoubleValidatorTest", "description": "Unit tests for the DoubleValidator class, focusing on validation methods and range checks.", "class_members": {"variables": [{"name": "validator", "type": "DoubleValidator"}, {"name": "strictValidator", "type": "DoubleValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "Double"}, {"name": "maxPlusOne", "type": "Double"}, {"name": "min", "type": "Double"}, {"name": "minMinusOne", "type": "Double"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "Double"}, {"name": "testZero", "type": "Double"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "Double"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDoubleRangeMinMax", "primary_tested": ["DoubleValidator.isInRange(Double,int,int)", "DoubleValidator.minValue(Double,int)", "DoubleValidator.maxValue(Double,int)"], "associated_methods": ["DoubleValidator.validate(String,String)"], "external_dependencies": {"modules": ["DoubleValidator", "Locale"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range, minimum, and maximum validation methods of DoubleValidator."}, {"name": "testDoubleValidatorMethods", "primary_tested": ["DoubleValidator.validate(String)", "DoubleValidator.validate(String,Locale)", "DoubleValidator.validate(String,String)", "DoubleValidator.validate(String,String,Locale)", "DoubleValidator.isValid(String)", "DoubleValidator.isValid(String,Locale)", "DoubleValidator.isValid(String,String)", "DoubleValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["DoubleValidator", "Locale"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validate and isValid methods of DoubleValidator with different patterns and locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java", "testclass_name": "ModulusTenCUSIPCheckDigitTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ModulusTenCUSIPCheckDigitTest", "description": "Tests for the ModulusTenCUSIPCheckDigit class, focusing on validating check digits.", "class_members": {"variables": [{"name": "INVALID_CHECK_DIGITS", "type": "static final String[]"}, {"name": "VALID_CHECK_DIGITS", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidator336InvalidCheckDigits", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}, {"name": "INVALID_CHECK_DIGITS", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid check digits using the ModulusTenCheckDigit routine."}, {"name": "testValidator336ValidCheckDigits", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}, {"name": "VALID_CHECK_DIGITS", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid check digits using the ModulusTenCheckDigit routine."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/CodeValidatorTest.java", "testclass_name": "CodeValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.validator.routines.checkdigit.CheckDigit;", "import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;", "import org.junit.jupiter.api.Test;"], "name": "CodeValidatorTest", "description": "Unit tests for the CodeValidator class, focusing on check digit validation, regular expressions, and length constraints.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckDigit", "primary_tested": ["CodeValidator.validate(String)", "CodeValidator.isValid(String)"], "associated_methods": ["CodeValidator.getCheckDigit()"], "external_dependencies": {"modules": ["CodeValidator", "EAN13CheckDigit", "CheckDigit"], "class_members": []}, "category": "unit", "description": "Tests the check digit functionality of the CodeValidator, including scenarios with no check digit and using the EAN-13 check digit routine."}, {"name": "testConstructors", "primary_tested": ["CodeValidator.getRegexValidator()", "CodeValidator.getMinLength()", "CodeValidator.getMaxLength()", "CodeValidator.getCheckDigit()"], "external_dependencies": {"modules": ["CodeValidator", "RegexValidator", "EAN13CheckDigit"], "class_members": []}, "category": "unit", "description": "Tests the various constructors of the CodeValidator class to ensure proper initialization of regex validator, min/max length, and check digit."}, {"name": "testLength", "primary_tested": ["CodeValidator.validate(String)", "CodeValidator.getMinLength()", "CodeValidator.getMaxLength()"], "external_dependencies": {"modules": ["CodeValidator"], "class_members": []}, "category": "unit", "description": "Tests the minimum and maximum length constraints of the CodeValidator, ensuring that strings outside the specified length range are invalidated."}, {"name": "testNoInput", "primary_tested": ["CodeValidator.validate(String)"], "external_dependencies": {"modules": ["CodeValidator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of the CodeValidator when handling null, zero-length, and whitespace-only input strings."}, {"name": "testRegex", "primary_tested": ["CodeValidator.validate(String)", "CodeValidator.getRegexValidator()"], "external_dependencies": {"modules": ["CodeValidator", "RegexValidator"], "class_members": []}, "category": "unit", "description": "Tests the regular expression functionality of the CodeValidator, ensuring that strings matching the regex are validated correctly."}, {"name": "testValidator294Part1", "primary_tested": ["CodeValidator.validate(String)"], "external_dependencies": {"modules": ["CodeValidator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of the CodeValidator when handling null input with specific min/max length constraints."}, {"name": "testValidator294Part2", "primary_tested": ["CodeValidator.validate(String)"], "external_dependencies": {"modules": ["CodeValidator"], "class_members": []}, "category": "unit", "description": "Tests the behavior of the CodeValidator when handling null input with specific min/max length constraints."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java", "testclass_name": "BigDecimalValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.math.BigDecimal;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BigDecimalValidatorTest", "description": "Unit tests for BigDecimalValidator, focusing on range validation and various validation methods.", "class_members": {"variables": [{"name": "validator", "type": "BigDecimalValidator"}, {"name": "strictValidator", "type": "BigDecimalValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "BigDecimal"}, {"name": "maxPlusOne", "type": "BigDecimal"}, {"name": "min", "type": "BigDecimal"}, {"name": "minMinusOne", "type": "BigDecimal"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "BigDecimal"}, {"name": "testNumber2", "type": "Number"}, {"name": "testNumber3", "type": "Number"}, {"name": "testZero", "type": "BigDecimal"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "BigDecimal"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBigDecimalRangeMinMax", "primary_tested": ["BigDecimalValidator.isInRange(BigDecimal,float,float)", "BigDecimalValidator.minValue(BigDecimal,float)", "BigDecimalValidator.maxValue(BigDecimal,float)"], "external_dependencies": {"modules": ["BigDecimalValidator", "BigDecimal"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range validation methods of BigDecimalValidator, including isInRange, minValue, and maxValue."}, {"name": "testBigDecimalValidatorMethods", "primary_tested": ["BigDecimalValidator.validate(String)", "BigDecimalValidator.validate(String,Locale)", "BigDecimalValidator.validate(String,String)", "BigDecimalValidator.validate(String,String,Locale)", "BigDecimalValidator.isValid(String)", "BigDecimalValidator.isValid(String,Locale)", "BigDecimalValidator.isValid(String,String)", "BigDecimalValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["BigDecimalValidator", "BigDecimal", "Locale"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validation methods of BigDecimalValidator, including validate and isValid with different parameters."}]}, {"file_path": "src/test/java/org/apache/commons/validator/UrlTest.java", "testclass_name": "UrlTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UrlTest", "description": "Unit tests for validating URLs using the UrlValidator class.", "class_members": {"variables": [{"name": "printStatus", "type": "final boolean"}, {"name": "printIndex", "type": "final boolean"}, {"name": "testUrlScheme", "type": "ResultPair[]"}, {"name": "testUrlAuthority", "type": "ResultPair[]"}, {"name": "testUrlPort", "type": "ResultPair[]"}, {"name": "testPath", "type": "ResultPair[]"}, {"name": "testUrlPathOptions", "type": "ResultPair[]"}, {"name": "testUrlQuery", "type": "ResultPair[]"}, {"name": "testUrlParts", "type": "Object[]"}, {"name": "testUrlPartsOptions", "type": "Object[]"}, {"name": "testPartsIndex", "type": "int[]"}, {"name": "testScheme", "type": "ResultPair[]"}], "methods": [{"name": "incrementTestPartsIndex", "signature": "static boolean incrementTestPartsIndex(int[], Object[])"}, {"name": "testIsValid", "signature": "void testIsValid(Object[], int)"}, {"name": "testPartsIndextoString", "signature": "private String testPartsIndextoString()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValid", "primary_tested": ["UrlValidator.isValid(String)"], "associated_methods": ["UrlTest.testIsValid(Object[], int)"], "external_dependencies": {"modules": ["UrlValidator"], "class_members": [{"name": "testUrlParts", "type": "variable"}, {"name": "testUrlPartsOptions", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method of UrlValidator with different URL parts and options."}, {"name": "testIsValidScheme", "primary_tested": ["UrlValidator.isValidScheme(String)"], "external_dependencies": {"modules": ["UrlValidator"], "class_members": [{"name": "testScheme", "type": "variable"}]}, "category": "unit", "description": "Tests the isValidScheme method of UrlValidator with different schemes."}, {"name": "testValidateUrl", "primary_tested": [], "external_dependencies": {}, "category": "unit", "description": "A simple test that always passes."}, {"name": "testValidator202", "primary_tested": ["UrlValidator.isValid(String)"], "external_dependencies": {"modules": ["UrlValidator"]}, "category": "unit", "description": "Tests the isValid method of UrlValidator with a long URL."}, {"name": "testValidator204", "primary_tested": ["UrlValidator.isValid(String)"], "external_dependencies": {"modules": ["UrlValidator"]}, "category": "unit", "description": "Tests the isValid method of UrlValidator with a specific URL."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java", "testclass_name": "FloatValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.text.DecimalFormat;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FloatValidatorTest", "description": "Unit tests for FloatValidator class, focusing on validation and range checks for Float values.", "class_members": {"variables": [{"name": "validator", "type": "FloatValidator"}, {"name": "strictValidator", "type": "FloatValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "Float"}, {"name": "maxPlusOne", "type": "Double"}, {"name": "min", "type": "Float"}, {"name": "minMinusOne", "type": "Double"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "Float"}, {"name": "testZero", "type": "Float"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "Float"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testFloatRangeMinMax", "primary_tested": ["FloatValidator.isInRange(Float,int,int)", "FloatValidator.minValue(Float,int)", "FloatValidator.maxValue(Float,int)"], "external_dependencies": {"modules": ["FloatValidator"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range, minimum, and maximum value checks for FloatValidator."}, {"name": "testFloatSmallestValues", "primary_tested": ["FloatValidator.validate(String,String)", "FloatValidator.isValid(String,String)"], "external_dependencies": {"modules": ["FloatValidator", "DecimalFormat"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of the smallest positive and negative Float values and values too small to be handled."}, {"name": "testFloatValidatorMethods", "primary_tested": ["FloatValidator.validate(String)", "FloatValidator.validate(String,Locale)", "FloatValidator.validate(String,String)", "FloatValidator.validate(String,String,Locale)", "FloatValidator.isValid(String)", "FloatValidator.isValid(String,Locale)", "FloatValidator.isValid(String,String)", "FloatValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["FloatValidator", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validate and isValid methods of FloatValidator with different patterns and locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/LongTest.java", "testclass_name": "LongTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;"], "name": "LongTest", "description": "Unit tests for long validation in the Validator framework.", "class_members": {"variables": [{"name": "formKey", "type": "String"}, {"name": "action", "type": "String"}]}, "test_cases": [{"name": "testLong", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the long validation with a valid value."}, {"name": "testLongBeyondMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Long"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the long validation failure with a value beyond the maximum long value."}, {"name": "testLongBeyondMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Long"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the long validation failure with a value beyond the minimum long value."}, {"name": "testLongFailure", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the long validation failure with an invalid value."}, {"name": "testLongMax", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Long"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the long validation with the maximum long value."}, {"name": "testLongMin", "primary_tested": ["AbstractNumberTest.valueTest(ValueBean,boolean)"], "associated_methods": ["ValueBean.setValue(String)"], "external_dependencies": {"modules": ["ValueBean", "ValidatorException", "Long"], "class_members": [{"name": "info", "type": "variable"}]}, "category": "unit", "description": "Tests the long validation with the minimum long value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/LocaleTest.java", "testclass_name": "LocaleTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.io.IOException;", "import java.util.Locale;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "LocaleTest", "description": "Tests for validating locale-specific configurations using the Validator framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}], "methods": [{"name": "valueTest", "signature": "void valueTest(Object, Locale, boolean, boolean, boolean) throws ValidatorException"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testLocale1", "primary_tested": ["Validator.validate()"], "associated_methods": ["NameBean.setFirstName(String)", "NameBean.setLastName(String)"], "external_dependencies": {"modules": ["NameBean", "Locale", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation with a Locale, Country, and variant. Checks if the added locale validation field is used."}, {"name": "testLocale2", "primary_tested": ["Validator.validate()"], "associated_methods": ["NameBean.setFirstName(String)", "NameBean.setLastName(String)"], "external_dependencies": {"modules": ["NameBean", "Locale", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation with a Locale, Country, and variant."}, {"name": "testLocale3", "primary_tested": ["Validator.validate()"], "associated_methods": ["NameBean.setFirstName(String)", "NameBean.setLastName(String)"], "external_dependencies": {"modules": ["NameBean", "Locale", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation with a Locale, Country, and variant."}, {"name": "testLocale4", "primary_tested": ["Validator.validate()"], "associated_methods": ["NameBean.setFirstName(String)", "NameBean.setLastName(String)"], "external_dependencies": {"modules": ["NameBean", "Locale", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if a locale of en_UK_TEST falls back to en_UK instead of default form set."}, {"name": "testLocale5", "primary_tested": ["Validator.validate()"], "associated_methods": ["NameBean.setFirstName(String)", "NameBean.setLastName(String)"], "external_dependencies": {"modules": ["NameBean", "Locale", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "valueTest", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if a locale of language=en falls back to default form set."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java", "testclass_name": "ByteValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ByteValidatorTest", "description": "Unit tests for ByteValidator class, focusing on validation methods and range checks.", "class_members": {"variables": [{"name": "BYTE_MIN_VAL", "type": "static final Byte"}, {"name": "BYTE_MAX_VAL", "type": "static final Byte"}, {"name": "BYTE_MAX", "type": "static final String"}, {"name": "BYTE_MAX_0", "type": "static final String"}, {"name": "BYTE_MAX_1", "type": "static final String"}, {"name": "BYTE_MIN", "type": "static final String"}, {"name": "BYTE_MIN_0", "type": "static final String"}, {"name": "BYTE_MIN_1", "type": "static final String"}, {"name": "validator", "type": "ByteValidator"}, {"name": "strictValidator", "type": "ByteValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "Byte"}, {"name": "maxPlusOne", "type": "Long"}, {"name": "min", "type": "Byte"}, {"name": "minMinusOne", "type": "Long"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "Byte"}, {"name": "testZero", "type": "Byte"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "Byte"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testByteRangeMinMax", "primary_tested": ["ByteValidator.isInRange(Byte,byte,byte)", "ByteValidator.minValue(Byte,byte)", "ByteValidator.maxValue(Byte,byte)"], "associated_methods": [], "external_dependencies": {"modules": ["ByteValidator"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range and min/max value checks for ByteValidator."}, {"name": "testByteValidatorMethods", "primary_tested": ["ByteValidator.validate(String)", "ByteValidator.validate(String,Locale)", "ByteValidator.validate(String,String)", "ByteValidator.validate(String,String,Locale)", "ByteValidator.isValid(String)", "ByteValidator.isValid(String,Locale)", "ByteValidator.isValid(String,String)", "ByteValidator.isValid(String,String,Locale)"], "associated_methods": [], "external_dependencies": {"modules": ["ByteValidator", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the validation methods of ByteValidator with different patterns and locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java", "testclass_name": "LongValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LongValidatorTest", "description": "Unit tests for LongValidator class, focusing on validation methods and range checks.", "class_members": {"variables": [{"name": "LONG_MIN_VAL", "type": "static final Long"}, {"name": "LONG_MAX_VAL", "type": "static final Long"}, {"name": "LONG_MAX", "type": "static final String"}, {"name": "LONG_MAX_0", "type": "static final String"}, {"name": "LONG_MAX_1", "type": "static final String"}, {"name": "LONG_MIN", "type": "static final String"}, {"name": "LONG_MIN_0", "type": "static final String"}, {"name": "LONG_MIN_1", "type": "static final String"}, {"name": "NINES", "type": "static final String"}, {"name": "validator", "type": "LongValidator"}, {"name": "strictValidator", "type": "LongValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "Long"}, {"name": "maxPlusOne", "type": "Long"}, {"name": "min", "type": "Long"}, {"name": "minMinusOne", "type": "Long"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "Long"}, {"name": "testZero", "type": "Long"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "Long"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testLongRangeMinMax", "primary_tested": ["LongValidator.isInRange(Long,int,int)", "LongValidator.minValue(Long,int)", "LongValidator.maxValue(Long,int)"], "associated_methods": ["LongValidator.validate(String,String)"], "external_dependencies": {"modules": ["LongValidator"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range, minimum, and maximum validation methods of LongValidator."}, {"name": "testLongValidatorMethods", "primary_tested": ["LongValidator.validate(String)", "LongValidator.validate(String,Locale)", "LongValidator.validate(String,String)", "LongValidator.validate(String,String,Locale)", "LongValidator.isValid(String)", "LongValidator.isValid(String,Locale)", "LongValidator.isValid(String,String)", "LongValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["LongValidator", "Locale"], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validate and isValid methods of LongValidator with different patterns and locales."}]}, {"file_path": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "testclass_name": "RequiredIfTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "RequiredIfTest", "description": "Tests for the required validation based on conditions specified in the configuration.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRequired", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation when no input is provided, expecting the validation to pass."}, {"name": "testRequiredFirstName", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for the first name when it is provided, expecting the validation to pass."}, {"name": "testRequiredFirstNameBlank", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for the first name when it is blank, expecting the validation to fail."}, {"name": "testRequiredLastName", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for the last name when it is provided, expecting the validation to pass."}, {"name": "testRequiredLastNameBlank", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for the last name when it is blank, expecting the validation to fail."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "testclass_name": "CalendarValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.text.DateFormat;", "import java.text.Format;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.Locale;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CalendarValidatorTest", "description": "Unit tests for the CalendarValidator class, focusing on date and time adjustments, validation, comparison, and formatting.", "class_members": {"variables": [{"name": "DATE_2005_11_23", "type": "static final int"}, {"name": "TIME_12_03_45", "type": "static final int"}, {"name": "calValidator", "type": "CalendarValidator"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdjustToTimeZone", "primary_tested": ["CalendarValidator.adjustToTimeZone(Calendar,TimeZone)"], "associated_methods": ["Calendar.getTime()"], "external_dependencies": {"modules": ["Calendar", "TimeZone", "Date"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the adjustToTimeZone method of CalendarValidator, ensuring correct time zone adjustments."}, {"name": "testCalendarValidatorMethods", "primary_tested": ["CalendarValidator.validate(String)", "CalendarValidator.validate(String,Locale)", "CalendarValidator.validate(String,String)", "CalendarValidator.validate(String,String,Locale)", "CalendarValidator.isValid(String)", "CalendarValidator.isValid(String,Locale)", "CalendarValidator.isValid(String,String)", "CalendarValidator.isValid(String,String,Locale)"], "associated_methods": [], "external_dependencies": {"modules": ["CalendarValidator", "Locale", "Date"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests various validation methods of CalendarValidator, ensuring correct date parsing and validation."}, {"name": "testCompare", "primary_tested": ["CalendarValidator.compare(Calendar,Calendar,int)", "CalendarValidator.compareDates(Calendar,Calendar)", "CalendarValidator.compareWeeks(Calendar,Calendar)", "CalendarValidator.compareMonths(Calendar,Calendar)", "CalendarValidator.compareQuarters(Calendar,Calendar)", "CalendarValidator.compareYears(Calendar,Calendar)"], "associated_methods": [], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison methods of CalendarValidator, ensuring correct date and time comparisons."}, {"name": "testDateTimeStyle", "primary_tested": ["AbstractCalendarValidator.isValid(String)", "AbstractCalendarValidator.isValid(String,Locale)"], "associated_methods": [], "external_dependencies": {"modules": ["Locale", "DateFormat"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the date and time style validation methods, ensuring correct parsing and validation."}, {"name": "testFormat", "primary_tested": ["CalendarValidator.format(Calendar)", "CalendarValidator.format(Calendar,Locale)", "CalendarValidator.format(Calendar,String)", "CalendarValidator.format(Calendar,String,Locale)", "CalendarValidator.format(Calendar,TimeZone)", "CalendarValidator.format(Calendar,Locale,TimeZone)", "CalendarValidator.format(Calendar,String,TimeZone)", "CalendarValidator.format(Calendar,String,Locale,TimeZone)"], "associated_methods": [], "external_dependencies": {"modules": ["Locale", "TimeZone", "Calendar"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formatting methods of CalendarValidator, ensuring correct date and time formatting."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java", "testclass_name": "IntegerValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IntegerValidatorTest", "description": "Unit tests for IntegerValidator class, focusing on validation methods and range checks.", "class_members": {"variables": [{"name": "INT_MIN_VAL", "type": "static final Integer"}, {"name": "INT_MAX_VAL", "type": "static final Integer"}, {"name": "INT_MAX", "type": "static final String"}, {"name": "INT_MAX_0", "type": "static final String"}, {"name": "INT_MAX_1", "type": "static final String"}, {"name": "INT_MIN", "type": "static final String"}, {"name": "INT_MIN_0", "type": "static final String"}, {"name": "INT_MIN_1", "type": "static final String"}, {"name": "validator", "type": "IntegerValidator"}, {"name": "strictValidator", "type": "IntegerValidator"}, {"name": "testPattern", "type": "String"}, {"name": "max", "type": "Integer"}, {"name": "maxPlusOne", "type": "Long"}, {"name": "min", "type": "Integer"}, {"name": "minMinusOne", "type": "Long"}, {"name": "invalidStrict", "type": "String[]"}, {"name": "invalid", "type": "String[]"}, {"name": "testNumber", "type": "Integer"}, {"name": "testZero", "type": "Integer"}, {"name": "validStrict", "type": "String[]"}, {"name": "validStrictCompare", "type": "Number[]"}, {"name": "valid", "type": "String[]"}, {"name": "validCompare", "type": "Number[]"}, {"name": "testStringUS", "type": "String"}, {"name": "testStringDE", "type": "String"}, {"name": "localeValue", "type": "String"}, {"name": "localePattern", "type": "String"}, {"name": "testLocale", "type": "Locale"}, {"name": "localeExpected", "type": "Integer"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testIntegerRangeMinMax", "primary_tested": ["IntegerValidator.isInRange(Integer,int,int)", "IntegerValidator.minValue(Integer,int)", "IntegerValidator.maxValue(Integer,int)"], "associated_methods": ["IntegerValidator.validate(String,String)"], "external_dependencies": {"modules": ["IntegerValidator"], "class_members": [{"name": "strictValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the range, minimum, and maximum value checks for IntegerValidator."}, {"name": "testIntegerValidatorMethods", "primary_tested": ["IntegerValidator.validate(String)", "IntegerValidator.validate(String,Locale)", "IntegerValidator.validate(String,String)", "IntegerValidator.validate(String,String,Locale)", "IntegerValidator.isValid(String)", "IntegerValidator.isValid(String,Locale)", "IntegerValidator.isValid(String,String)", "IntegerValidator.isValid(String,String,Locale)"], "external_dependencies": {"modules": ["IntegerValidator", "Locale"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the various validate and isValid methods of IntegerValidator with different patterns and locales."}, {"name": "testMinMaxValues", "primary_tested": ["IntegerValidator.isValid(String)"], "external_dependencies": {"modules": ["IntegerValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of minimum and maximum integer values."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "testclass_name": "CurrencyValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.math.BigDecimal;", "import java.text.DecimalFormatSymbols;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CurrencyValidatorTest", "description": "Unit tests for validating currency values using the CurrencyValidator class.", "class_members": {"variables": [{"name": "CURRENCY_SYMBOL", "type": "static final char"}, {"name": "usDollar", "type": "String"}, {"name": "ukPound", "type": "String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFormatType", "primary_tested": ["CurrencyValidator.getFormatType()"], "external_dependencies": {"modules": ["CurrencyValidator", "AbstractNumberValidator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the format type returned by the CurrencyValidator."}, {"name": "testIntegerInvalid", "primary_tested": ["CurrencyValidator.isValid(String,Locale)"], "external_dependencies": {"modules": ["CurrencyValidator", "Locale"], "class_members": [{"name": "ukPound", "type": "variable"}, {"name": "usDollar", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests invalid integer (non-decimal) currency values."}, {"name": "testIntegerValid", "primary_tested": ["CurrencyValidator.validate(String,Locale)"], "associated_methods": ["Locale.setDefault(Locale)", "Locale.getDefault()"], "external_dependencies": {"modules": ["CurrencyValidator", "BigDecimal", "Locale"], "class_members": [{"name": "ukPound", "type": "variable"}, {"name": "usDollar", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests valid integer (non-decimal) currency values."}, {"name": "testInvalid", "primary_tested": ["CurrencyValidator.isValid(String)", "CurrencyValidator.validate(String)"], "external_dependencies": {"modules": ["CurrencyValidator", "Locale"], "class_members": [{"name": "ukPound", "type": "variable"}, {"name": "usDollar", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests invalid currency values."}, {"name": "testPattern", "primary_tested": ["CurrencyValidator.validate(String,String)", "CurrencyValidator.validate(String,String,Locale)", "CurrencyValidator.isValid(String,String)", "CurrencyValidator.isValid(String,String,Locale)"], "associated_methods": ["Locale.setDefault(Locale)", "Locale.getDefault()"], "external_dependencies": {"modules": ["CurrencyValidator", "BigDecimal", "Locale"], "class_members": [{"name": "ukPound", "type": "variable"}, {"name": "usDollar", "type": "variable"}, {"name": "CURRENCY_SYMBOL", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests currency values with a specific pattern."}, {"name": "testValid", "primary_tested": ["CurrencyValidator.validate(String)", "CurrencyValidator.validate(String,Locale)"], "associated_methods": ["Locale.setDefault(Locale)", "Locale.getDefault()"], "external_dependencies": {"modules": ["CurrencyValidator", "BigDecimal", "Locale"], "class_members": [{"name": "ukPound", "type": "variable"}, {"name": "usDollar", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests valid currency values."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/ISSNValidatorTest.java", "testclass_name": "ISSNValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Random;", "import org.apache.commons.validator.routines.checkdigit.CheckDigit;", "import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;", "import org.junit.jupiter.api.Test;"], "name": "ISSNValidatorTest", "description": "Unit tests for ISSNValidator class, focusing on validation and conversion of ISSN codes.", "class_members": {"variables": [{"name": "VALIDATOR", "type": "static final ISSNValidator"}, {"name": "VALID_FORMAT", "type": "static final String[]"}, {"name": "INVALID_FORMAT", "type": "static final String[]"}]}, "test_cases": [{"name": "testConversionErrors", "primary_tested": ["ISSNValidator.extractFromEAN13(String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of invalid EAN-13 ISSN prefix codes and input lengths."}, {"name": "testInvalid", "primary_tested": ["ISSNValidator.isValid(String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}, {"name": "INVALID_FORMAT", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of invalid ISSN codes."}, {"name": "testIsValidExtract", "primary_tested": ["ISSNValidator.extractFromEAN13(String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the extraction of valid ISSN codes from EAN-13 codes."}, {"name": "testIsValidISSN", "primary_tested": ["ISSNValidator.isValid(String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}, {"name": "VALID_FORMAT", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of valid ISSN codes."}, {"name": "testIsValidISSNConvert", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "associated_methods": ["EAN13CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ISSNValidator", "EAN13CheckDigit", "Random"], "class_members": [{"name": "VALIDATOR", "type": "variable"}, {"name": "VALID_FORMAT", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of valid ISSN codes to EAN-13 codes."}, {"name": "testIsValidISSNConvertNull", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of null input for ISSN conversion to EAN-13."}, {"name": "testIsValidISSNConvertSuffix", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of invalid suffixes for ISSN conversion to EAN-13."}, {"name": "testNull", "primary_tested": ["ISSNValidator.isValid(String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of null input for ISSN validation."}, {"name": "testValidCheckDigitEan13", "primary_tested": ["ISSNValidator.extractFromEAN13(String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of EAN-13 codes based on their check digits."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "testclass_name": "RegexValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.regex.Pattern;", "import java.util.regex.PatternSyntaxException;", "import org.junit.jupiter.api.Test;"], "name": "RegexValidatorTest", "description": "Unit tests for the RegexValidator class, focusing on various regex validation scenarios.", "class_members": {"variables": [{"name": "REGEX", "type": "static final String"}, {"name": "COMPONENT_1", "type": "static final String"}, {"name": "COMPONENT_2", "type": "static final String"}, {"name": "COMPONENT_3", "type": "static final String"}, {"name": "SEPARATOR_1", "type": "static final String"}, {"name": "SEPARATOR_2", "type": "static final String"}, {"name": "REGEX_1", "type": "static final String"}, {"name": "REGEX_2", "type": "static final String"}, {"name": "REGEX_3", "type": "static final String"}, {"name": "MULTIPLE_REGEX", "type": "static final String[]"}], "methods": [{"name": "checkArray", "signature": "void checkArray(String, String[], String[])"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testExceptions", "primary_tested": ["RegexValidator.RegexValidator(String)"], "external_dependencies": {"modules": ["RegexValidator", "PatternSyntaxException"]}, "category": "unit", "description": "Tests the handling of invalid regex patterns by the RegexValidator constructor."}, {"name": "testGetPatterns", "primary_tested": ["RegexValidator.getPatterns()"], "associated_methods": ["Pattern.pattern()"], "external_dependencies": {"modules": ["RegexValidator", "Pattern"]}, "category": "unit", "description": "Tests the retrieval of patterns from a RegexValidator instance."}, {"name": "testMissingRegex", "primary_tested": ["RegexValidator.RegexValidator(String)", "RegexValidator.RegexValidator(String[])"], "external_dependencies": {"modules": ["RegexValidator", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the handling of missing or invalid regex patterns by the RegexValidator constructor."}, {"name": "testMultipleInsensitive", "primary_tested": ["RegexValidator.isValid(String)", "RegexValidator.validate(String)", "RegexValidator.match(String)"], "associated_methods": ["RegexValidator.RegexValidator(String[], boolean)", "RegexValidator.RegexValidator(String, boolean)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "checkArray", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of RegexValidator with multiple regex patterns in a case-insensitive manner."}, {"name": "testMultipleSensitive", "primary_tested": ["RegexValidator.isValid(String)", "RegexValidator.validate(String)", "RegexValidator.match(String)"], "associated_methods": ["RegexValidator.RegexValidator(String[], boolean)", "RegexValidator.RegexValidator(String, boolean)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "checkArray", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of RegexValidator with multiple regex patterns in a case-sensitive manner."}, {"name": "testNullValue", "primary_tested": ["RegexValidator.isValid(String)", "RegexValidator.validate(String)", "RegexValidator.match(String)"], "external_dependencies": {"modules": ["RegexValidator"]}, "category": "unit", "description": "Tests the handling of null values by the RegexValidator methods."}, {"name": "testSingle", "primary_tested": ["RegexValidator.isValid(String)", "RegexValidator.validate(String)", "RegexValidator.match(String)"], "associated_methods": ["RegexValidator.RegexValidator(String, boolean)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "checkArray", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of RegexValidator with a single regex pattern in both case-sensitive and case-insensitive modes."}, {"name": "testToString", "primary_tested": ["RegexValidator.toString()"], "external_dependencies": {"modules": ["RegexValidator"]}, "category": "unit", "description": "Tests the toString method of the RegexValidator class."}]}, {"file_path": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "testclass_name": "MultipleConfigFilesTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.InputStream;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "MultipleConfigFilesTest", "description": "Tests for validating configurations loaded from multiple XML files.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}, {"name": "resources", "type": "ValidatorResources"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBothBlank", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResources", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation when both first name and last name are blank."}, {"name": "testMergedConfig", "primary_tested": ["ValidatorResources.getForm(String,String,String,String)", "Field.getVarValue(String)"], "associated_methods": [], "external_dependencies": {"modules": ["ValidatorResources", "Form", "Field"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that forms and constants from different config files are merged into the same FormSet."}, {"name": "testRequiredFirstNameBlankLastNameShort", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResources", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation when first name is blank and last name is too short."}, {"name": "testRequiredLastNameLong", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResources", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation when first name is valid and last name is a long integer."}, {"name": "testRequiredLastNameShort", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResources", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests validation when first name is valid and last name is too short."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "testclass_name": "ValidatorTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.text.DateFormat;", "import java.text.ParseException;", "import java.util.ArrayList;", "import java.util.Date;", "import java.util.List;", "import java.util.Locale;", "import org.apache.commons.validator.util.ValidatorUtils;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorTest", "description": "Unit tests for validating various functionalities of the Validator class.", "class_members": {"variables": [], "methods": [{"name": "formatDate", "signature": "public static Date formatDate(final Object bean, final Field field)"}, {"name": "isCapLetter", "signature": "public static boolean isCapLetter(final Object bean, final Field field, final List<String> l)"}, {"name": "setupDateResources", "signature": "private ValidatorResources setupDateResources(final String property, final String action)"}], "nested_classes": [{"name": "TestBean", "description": "Internal test bean class with properties for letter and date."}]}, "fixtures": [], "test_cases": [{"name": "testManualBoolean", "primary_tested": ["ValidatorTest.isCapLetter(Object,Field,List)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["ValidatorResources", "ValidatorAction", "FormSet", "Form", "Field", "Validator", "TestBean", "ArrayList"], "class_members": [{"name": "isCapLetter", "type": "method"}], "project_specific_resources": ["ValidatorUtils.getValueAsString(Object,String)"]}, "category": "unit", "description": "Tests the manual boolean validation method to ensure it correctly validates a single capital letter."}, {"name": "testManualBooleanDeprecated", "primary_tested": ["ValidatorTest.isCapLetter(Object,Field,List)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["ValidatorResources", "ValidatorAction", "FormSet", "Form", "Field", "Validator", "TestBean", "ArrayList"], "class_members": [{"name": "isCapLetter", "type": "method"}], "project_specific_resources": ["ValidatorUtils.getValueAsString(Object,String)"]}, "category": "unit", "description": "Tests the manual boolean validation method to ensure it correctly validates a single capital letter."}, {"name": "testManualObject", "primary_tested": ["ValidatorTest.formatDate(Object,Field)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["ValidatorResources", "ValidatorAction", "FormSet", "Form", "Field", "Validator", "TestBean", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "formatDate", "type": "method"}, {"name": "setupDateResources", "type": "method"}], "project_specific_resources": ["ValidatorUtils.getValueAsString(Object,String)"]}, "category": "unit", "description": "Tests the manual object validation method to ensure it correctly formats and validates a date string."}, {"name": "testOnlyReturnErrors", "primary_tested": ["ValidatorTest.formatDate(Object,Field)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["ValidatorResources", "ValidatorAction", "FormSet", "Form", "Field", "Validator", "TestBean", "ValidatorResults"], "class_members": [{"name": "formatDate", "type": "method"}, {"name": "setupDateResources", "type": "method"}], "project_specific_resources": ["ValidatorUtils.getValueAsString(Object,String)"]}, "category": "unit", "description": "Tests the functionality of only returning errors in the validation results."}, {"name": "testOnlyValidateField", "primary_tested": ["ValidatorTest.formatDate(Object,Field)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["ValidatorResources", "ValidatorAction", "FormSet", "Form", "Field", "Validator", "TestBean", "ValidatorResults"], "class_members": [{"name": "formatDate", "type": "method"}, {"name": "setupDateResources", "type": "method"}], "project_specific_resources": ["ValidatorUtils.getValueAsString(Object,String)"]}, "category": "unit", "description": "Tests the functionality of only validating a specific field in the validation process."}]}, {"file_path": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "testclass_name": "RequiredNameTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "RequiredNameTest", "description": "Tests for required validation of name fields using Validator framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRequired", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation failure for both first and last names."}, {"name": "testRequiredFirstName", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for first name when it is provided."}, {"name": "testRequiredFirstNameBlank", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for first name when it is blank."}, {"name": "testRequiredLastName", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for last name when it is provided."}, {"name": "testRequiredLastNameBlank", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for last name when it is blank."}, {"name": "testRequiredName", "primary_tested": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "associated_methods": ["Validator.validate()"], "external_dependencies": {"modules": ["NameBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for both first and last names when both are provided."}]}, {"file_path": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "testclass_name": "RetrieveFormTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.io.IOException;", "import java.io.InputStream;", "import java.util.Locale;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "RetrieveFormTest", "description": "Tests for retrieving forms from ValidatorResources with different locales.", "class_members": {"variables": [{"name": "FORM_PREFIX", "type": "static final String"}, {"name": "CANADA_FRENCH_XXX", "type": "static final Locale"}, {"name": "resources", "type": "ValidatorResources"}], "methods": [{"name": "checkForm", "signature": "void checkForm(Locale, String, String)"}, {"name": "checkFormNotFound", "signature": "void checkFormNotFound(Locale, String)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDefaultForm", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "associated_methods": ["RetrieveFormTest.checkForm(Locale,String,String)"], "external_dependencies": {"modules": ["Locale", "ValidatorResources", "Form", "Field"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_PREFIX", "type": "variable"}, {"name": "checkForm", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving a form defined only in the 'default' formset for various locales."}, {"name": "testFormNotFound", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "associated_methods": ["RetrieveFormTest.checkFormNotFound(Locale,String)"], "external_dependencies": {"modules": ["Locale", "ValidatorResources", "Form"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "checkFormNotFound", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving a form that is not defined for various locales."}, {"name": "testLanguageCountryForm", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "associated_methods": ["RetrieveFormTest.checkForm(Locale,String,String)"], "external_dependencies": {"modules": ["Locale", "ValidatorResources", "Form", "Field"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_PREFIX", "type": "variable"}, {"name": "checkForm", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving a form defined in the 'default' formset, formsets where just the 'language' is specified, and formsets where the language and country are specified."}, {"name": "testLanguageCountryVariantForm", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "associated_methods": ["RetrieveFormTest.checkForm(Locale,String,String)"], "external_dependencies": {"modules": ["Locale", "ValidatorResources", "Form", "Field"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_PREFIX", "type": "variable"}, {"name": "checkForm", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving a form defined in all the formsets."}, {"name": "testLanguageForm", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "associated_methods": ["RetrieveFormTest.checkForm(Locale,String,String)"], "external_dependencies": {"modules": ["Locale", "ValidatorResources", "Form", "Field"], "class_members": [{"name": "resources", "type": "variable"}, {"name": "FORM_PREFIX", "type": "variable"}, {"name": "checkForm", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving a form defined in the 'default' formset and formsets where just the 'language' is specified."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "testclass_name": "InetAddressValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "InetAddressValidatorTest", "description": "Test suite for validating IPv4 and IPv6 addresses using InetAddressValidator.", "class_members": {"variables": [{"name": "validator", "type": "InetAddressValidator"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testBrokenInetAddresses", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of obviously broken IP addresses."}, {"name": "testInetAddressesByClass", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid and invalid IPs from each address class."}, {"name": "testInetAddressesFromTheWild", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IPs that point to real, well-known hosts."}, {"name": "testIPv6", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IPv6 addresses."}, {"name": "testReservedInetAddresses", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of reserved IPs."}, {"name": "testValidator335", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a specific IPv6 address for validation."}, {"name": "testValidator419", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of specific IPv6 addresses with IPv4-mapped addresses."}, {"name": "testValidator445", "primary_tested": ["InetAddressValidator.isValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IPv6 addresses with scope IDs."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "testclass_name": "ExtensionTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.InputStream;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ExtensionTest", "description": "Unit tests for validating forms and rules using ValidatorResources and Validator classes.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "FORM_KEY2", "type": "static final String"}, {"name": "CHECK_MSG_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}, {"name": "resources", "type": "ValidatorResources"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testOrder", "primary_tested": ["ValidatorResources.getForm(Locale,String)"], "associated_methods": ["Form.getFields()"], "external_dependencies": {"modules": ["ValidatorResources", "Form", "Field"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the order is maintained when extending a form. Parent form fields should precede self form fields, except if we override the rules."}, {"name": "testOverrideRule", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if we can override a rule. We 'can' override a rule if the message shown when the firstName required test fails and the lastName test is null."}, {"name": "testRequired", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation failure."}, {"name": "testRequiredFirstName", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for first name."}, {"name": "testRequiredFirstNameBlank", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for first name if it is blank."}, {"name": "testRequiredLastName", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for last name."}, {"name": "testRequiredLastNameBlank", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for last name if it is blank."}, {"name": "testRequiredName", "primary_tested": ["Validator.validate()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the required validation for first and last name."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "testclass_name": "TimeValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.Locale;", "import java.util.TimeZone;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TimeValidatorTest", "description": "Unit tests for TimeValidator class, focusing on date and time validation and formatting.", "class_members": {"variables": [{"name": "GMT", "type": "static final TimeZone"}, {"name": "EST", "type": "static final TimeZone"}, {"name": "validator", "type": "TimeValidator"}, {"name": "patternValid", "type": "String[]"}, {"name": "patternExpect", "type": "Date[]"}, {"name": "localeValid", "type": "String[]"}, {"name": "localeExpect", "type": "Date[]"}, {"name": "patternInvalid", "type": "String[]"}, {"name": "localeInvalid", "type": "String[]"}, {"name": "origDefault", "type": "Locale"}, {"name": "defaultZone", "type": "TimeZone"}], "methods": [{"name": "createDate", "signature": "static Date createDate(TimeZone, int, int)"}, {"name": "createTime", "signature": "static Calendar createTime(TimeZone, int, int)"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testCompare", "primary_tested": ["TimeValidator.compareTime(Calendar,Calendar)", "TimeValidator.compareSeconds(Calendar,Calendar)", "TimeValidator.compareMinutes(Calendar,Calendar)", "TimeValidator.compareHours(Calendar,Calendar)"], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "GMT", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison methods of TimeValidator for different time units."}, {"name": "testFormat", "primary_tested": ["TimeValidator.getInstance().validate(String,String)", "TimeValidator.format(Object,String)", "TimeValidator.format(Object,Locale)", "TimeValidator.format(Object)"], "external_dependencies": {"modules": ["Locale", "TimeValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the formatting methods of TimeValidator with different patterns and locales."}, {"name": "testLocaleInvalid", "primary_tested": ["TimeValidator.validate(String,Locale)", "TimeValidator.isValid(String,Locale)"], "external_dependencies": {"modules": ["Locale", "TimeValidator"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "localeInvalid", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests invalid date strings with locale validation."}, {"name": "testLocaleValid", "primary_tested": ["TimeValidator.validate(String,Locale)", "TimeValidator.isValid(String,Locale)"], "external_dependencies": {"modules": ["Locale", "TimeValidator"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "localeValid", "type": "variable"}, {"name": "localeExpect", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests valid date strings with locale validation."}, {"name": "testPatternInvalid", "primary_tested": ["TimeValidator.validate(String,String)", "TimeValidator.isValid(String,String)"], "external_dependencies": {"modules": ["TimeValidator"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "patternInvalid", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests invalid date strings with pattern validation."}, {"name": "testPatternValid", "primary_tested": ["TimeValidator.validate(String,String)", "TimeValidator.isValid(String,String)"], "external_dependencies": {"modules": ["TimeValidator"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "patternValid", "type": "variable"}, {"name": "patternExpect", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests valid date strings with pattern validation."}, {"name": "testTimeZone", "primary_tested": ["TimeValidator.validate(String)", "TimeValidator.validate(String,TimeZone)", "TimeValidator.validate(String,String,TimeZone)", "TimeValidator.validate(String,Locale,TimeZone)", "TimeValidator.validate(String,String,Locale,TimeZone)"], "external_dependencies": {"modules": ["Locale", "TimeZone", "TimeValidator"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "EST", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the time zone handling methods of TimeValidator with different locales and time zones."}]}, {"file_path": "src/test/java/org/apache/commons/validator/MultipleTest.java", "testclass_name": "MultipleTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "MultipleTest", "description": "Unit tests for validating various scenarios using the Validator framework.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testBothBlank", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when both first name and last name are blank."}, {"name": "testFailingFirstDependentValidator", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the middle name is missing, causing the required dependent test to fail."}, {"name": "testFailingNextDependentValidator", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the middle name is present but not an integer, causing the int dependent test to fail."}, {"name": "testPassingDependentsFailingMain", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the middle name is present and an integer, but negative, causing the positive test to fail."}, {"name": "testPassingDependentsPassingMain", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the middle name is present and a positive integer, causing all dependent tests to pass."}, {"name": "testRequiredFirstNameBlankLastNameShort", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the first name is blank and the last name is too short, causing multiple errors."}, {"name": "testRequiredLastNameLong", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the first name is valid and the last name is a long integer, causing no errors."}, {"name": "testRequiredLastNameShort", "primary_tested": ["ValidatorResults.getValidatorResult(String)"], "associated_methods": ["ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["Validator", "ValidatorResults", "ValidatorResult", "NameBean"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation when the first name is valid and the last name is too short, causing one error."}]}, {"file_path": "src/test/java/org/apache/commons/validator/FieldTest.java", "testclass_name": "FieldTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FieldTest", "description": "Unit tests for the Field class, focusing on argument handling and position management.", "class_members": {"variables": [{"name": "field", "type": "Field"}], "methods": [{"name": "createArg", "signature": "Arg createArg(String key)"}, {"name": "createArg", "signature": "Arg createArg(String key, int position)"}, {"name": "createArg", "signature": "Arg createArg(String key, String name)"}, {"name": "createArg", "signature": "Arg createArg(String key, String name, int position)"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDefaultOnePosition", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with 'default' arguments, where one argument has a specified position."}, {"name": "testDefaultPositionImplied", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with 'default' arguments, where no positions are specified."}, {"name": "testDefaultSomePositions", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with 'default' arguments, where some positions are specified."}, {"name": "testDefaultUsingPositions", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with 'default' arguments, where positions are specified."}, {"name": "testEmptyArgs", "primary_tested": ["Field.getArgs(String)"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with no arguments."}, {"name": "testOverridePositionImplied", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with a 'default' argument overridden without positions specified."}, {"name": "testOverrideSomePosition", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with a 'default' argument overridden with some positions specified."}, {"name": "testOverrideUsingPositionA", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with a 'default' argument overridden using the 'position' property."}, {"name": "testOverrideUsingPositionB", "primary_tested": ["Field.addArg(Arg)", "Field.getArgs(String)", "Field.getArg(String, int)"], "external_dependencies": {"modules": ["Field", "Arg"], "class_members": [{"name": "field", "type": "variable"}, {"name": "createArg", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the Field class with a 'default' argument overridden using the 'position' property."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/FlagsTest.java", "testclass_name": "FlagsTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "FlagsTest", "description": "Unit tests for the Flags class, focusing on various flag operations and state checks.", "class_members": {"variables": [{"name": "LONG_FLAG", "type": "static final long"}, {"name": "LONG_FLAG_2", "type": "static final long"}, {"name": "INT_FLAG", "type": "static final int"}]}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["Flags.clear()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the clear functionality of the Flags class, ensuring all flags are reset to 0."}, {"name": "testClone", "primary_tested": ["Flags.clone()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the clone functionality of the Flags class."}, {"name": "testEqualsObject", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the equals method of the Flags class."}, {"name": "testGetFlags", "primary_tested": ["Flags.getFlags()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the getFlags method of the Flags class, ensuring it returns the correct flag value."}, {"name": "testHashCode", "primary_tested": ["Flags.hashCode()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the hashCode method of the Flags class, ensuring it returns the correct hash code."}, {"name": "testIsOnIsFalseWhenNotAllFlagsInArgumentAreOn", "primary_tested": ["Flags.isOn(long)"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the isOn method of the Flags class, ensuring it returns false when not all flags in the argument are on."}, {"name": "testIsOnIsTrueWhenHighOrderBitIsSetAndQueried", "primary_tested": ["Flags.isOn(long)"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the isOn method of the Flags class, ensuring it returns true when the high-order bit is set and queried."}, {"name": "testIsOnOff", "primary_tested": ["Flags.turnOn(long)", "Flags.isOn(long)", "Flags.isOff(long)"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the turnOn, isOn, and isOff methods of the Flags class, ensuring they correctly manage flag states."}, {"name": "testToString", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the toString method of the Flags class, ensuring it returns the correct string representation of the flags."}, {"name": "testTurnOff", "primary_tested": ["Flags.turnOff()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the turnOff method of the Flags class."}, {"name": "testTurnOffAll", "primary_tested": ["Flags.turnOffAll()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the turnOffAll method of the Flags class, ensuring all flags are reset to 0."}, {"name": "testTurnOnAll", "primary_tested": ["Flags.turnOnAll()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the turnOnAll method of the Flags class, ensuring all flags are set."}, {"name": "testTurnOnOff", "primary_tested": ["Flags.turnOnOff()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the turnOnOff method of the Flags class."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "testclass_name": "IBANValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.InputStreamReader;", "import java.io.Reader;", "import java.util.regex.Matcher;", "import java.util.regex.Pattern;", "import org.apache.commons.csv.CSVFormat;", "import org.apache.commons.csv.CSVParser;", "import org.apache.commons.csv.CSVRecord;", "import org.apache.commons.validator.routines.IBANValidator.Validator;", "import org.apache.commons.validator.routines.checkdigit.IBANCheckDigit;", "import org.junit.jupiter.api.Test;"], "name": "IBANValidatorTest", "description": "Unit tests for IBANValidator class, focusing on validation of IBANs and related functionalities.", "class_members": {"variables": [{"name": "VALIDATOR", "type": "static final IBANValidator"}, {"name": "IBAN_PART", "type": "static final String"}, {"name": "IBAN_PAT", "type": "static final Pattern"}, {"name": "VALID_IBAN_FIXTURES", "type": "static final String[]"}, {"name": "INVALID_IBAN_FIXTURES", "type": "static final String[]"}], "methods": [{"name": "checkIBAN", "signature": "private static int checkIBAN(final File file, final IBANValidator val) throws Exception"}, {"name": "fmtRE", "signature": "private static String fmtRE(final String ibanPat, final int ibanLen)"}, {"name": "formatToRE", "signature": "private static String formatToRE(final String type, final int len)"}, {"name": "printEntry", "signature": "private static void printEntry(final String ccode, final String length, final String ib, final String country)"}]}, "fixtures": [], "test_cases": [{"name": "testGetRegexValidatortPatterns", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the retrieval of regex patterns for a given country code."}, {"name": "testGetValidator", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the retrieval of validators for a given country code."}, {"name": "testHasValidator", "primary_tested": ["IBANValidator.hasValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the presence of validators for a given country code."}, {"name": "testInValid", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}, {"name": "INVALID_IBAN_FIXTURES", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of invalid IBANs."}, {"name": "testNull", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of null IBAN."}, {"name": "testSetDefaultValidator1", "primary_tested": ["IBANValidator.setValidator(String, int, String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the attempt to modify the singleton validator with an invalid length."}, {"name": "testSetDefaultValidator2", "primary_tested": ["IBANValidator.setValidator(String, int, String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the attempt to modify the singleton validator with a negative length."}, {"name": "testSetValidatorLC", "primary_tested": ["IBANValidator.setValidator(String, int, String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the attempt to set a validator with a lowercase country code."}, {"name": "testSetValidatorLen1", "primary_tested": ["IBANValidator.setValidator(String, int, String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of a validator with an invalid length."}, {"name": "testSetValidatorLen35", "primary_tested": ["IBANValidator.setValidator(String, int, String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the attempt to set a validator with a length of 35."}, {"name": "testSetValidatorLen7", "primary_tested": ["IBANValidator.setValidator(String, int, String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests the attempt to set a validator with a length of 7."}, {"name": "testSorted", "primary_tested": ["IBANValidator.getDefaultValidators()"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "VALIDATOR", "type": "variable"}]}, "category": "unit", "description": "Tests if the default validators are sorted by country code."}, {"name": "testValid", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator", "IBANCheckDigit"], "class_members": [{"name": "VALIDATOR", "type": "variable"}, {"name": "VALID_IBAN_FIXTURES", "type": "variable"}]}, "category": "unit", "description": "Tests the validation of valid IBANs."}]}, {"file_path": "src/test/java/org/apache/commons/validator/EmailTest.java", "testclass_name": "EmailTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import org.junit.Ignore;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.xml.sax.SAXException;"], "name": "EmailTest", "description": "Unit tests for email validation functionality.", "class_members": {"variables": [{"name": "FORM_KEY", "type": "static final String"}, {"name": "ACTION", "type": "static final String"}, {"name": "testEmailFromPerl", "type": "static final ResultPair[]"}], "methods": [{"name": "valueTest", "signature": "void valueTest(ValueBean, boolean)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmail", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with a valid email address."}, {"name": "testEmailAtTLD", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult", "org.apache.commons.validator.routines.EmailValidator"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with an email address at a TLD."}, {"name": "testEmailExtension", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with various domain extensions."}, {"name": "testEmailLocalhost", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with localhost addresses."}, {"name": "testEmailWithBogusCharacter", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with non-compliant characters."}, {"name": "testEmailWithCommas", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with commas in the address."}, {"name": "testEmailWithControlChars", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["EmailValidator"]}, "category": "unit", "description": "Tests the email validation functionality with ASCII control characters."}, {"name": "testEmailWithDash", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with dashes in the address."}, {"name": "testEmailWithDotEnd", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with a dot at the end of the address."}, {"name": "testEmailWithNumericAddress", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with numeric domains."}, {"name": "testEmailWithSpaces", "primary_tested": ["EmailValidator.isValid(String)"], "external_dependencies": {"modules": ["ValueBean", "Validator", "ValidatorResults", "ValidatorResult"], "class_members": [{"name": "FORM_KEY", "type": "variable"}, {"name": "ACTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the email validation functionality with spaces in the address."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DomainValidatorStartupTest.java", "testclass_name": "DomainValidatorStartupTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertNotNull;", "import static org.junit.Assert.assertThrows;", "import static org.junit.Assert.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.validator.routines.DomainValidator.ArrayType;", "import org.bitstrings.test.junit.runner.ClassLoaderPerTestRunner;", "import org.junit.Test;", "import org.junit.runner.RunWith;"], "name": "DomainValidatorStartupTest", "description": "Tests for the startup behavior and TLD overrides of the DomainValidator class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCannotUpdate", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)"], "associated_methods": ["DomainValidator.getInstance()"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that updating TLD overrides after initialization throws an IllegalStateException."}, {"name": "testInstanceOverride", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)"], "associated_methods": ["DomainValidator.getInstance(boolean)", "DomainValidator.isValidGenericTld(String)", "DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType", "DomainValidator.Item", "List", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests that the instance of DomainValidator picks up static TLD overrides and can be overridden for a new instance."}, {"name": "testUpdateBaseArrayCC", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that updating the base array for COUNTRY_CODE_RO throws an IllegalArgumentException."}, {"name": "testUpdateBaseArrayGeneric", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that updating the base array for GENERIC_RO throws an IllegalArgumentException."}, {"name": "testUpdateBaseArrayInfra", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that updating the base array for INFRASTRUCTURE_RO throws an IllegalArgumentException."}, {"name": "testUpdateBaseArrayLocal", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that updating the base array for LOCAL_RO throws an IllegalArgumentException."}, {"name": "testUpdateCountryCode1a", "primary_tested": ["DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": []}, "category": "unit", "description": "Tests that 'com' is not a valid country code TLD."}, {"name": "testUpdateCountryCode1b", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'com' can be made a valid country code TLD."}, {"name": "testUpdateCountryCode2", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'com' is invalid after adding it to the minus list."}, {"name": "testUpdateCountryCode3a", "primary_tested": ["DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": []}, "category": "unit", "description": "Tests that 'ch' is a valid country code TLD."}, {"name": "testUpdateCountryCode3b", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'ch' can be made an invalid country code TLD."}, {"name": "testUpdateCountryCode3c", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidCountryCodeTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'ch' can be made valid again by replacing the CC array."}, {"name": "testUpdateGeneric1", "primary_tested": ["DomainValidator.isValidGenericTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": []}, "category": "unit", "description": "Tests that 'ch' is not a valid generic TLD."}, {"name": "testUpdateGeneric2", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidGenericTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'ch' can be made a valid generic TLD."}, {"name": "testUpdateGeneric3", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidGenericTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'ch' is invalid after adding it to the minus list but 'com' remains valid."}, {"name": "testUpdateGeneric4", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidGenericTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'com' is invalid after adding it to the minus list."}, {"name": "testUpdateGeneric5", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String)", "DomainValidator.isValidGenericTld(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'com' is valid again after changing the minus list."}, {"name": "testValidator412a", "primary_tested": ["DomainValidator.isValidGenericTld(String)", "DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": []}, "category": "unit", "description": "Tests that 'local' and 'pvt' are not valid generic TLDs and domains."}, {"name": "testValidator412b", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String...)", "DomainValidator.isValidGenericTld(String)", "DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'local' and 'pvt' can be made valid generic TLDs and domains."}, {"name": "testValidator412c", "primary_tested": ["DomainValidator.isValidLocalTld(String)", "DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": []}, "category": "unit", "description": "Tests that 'local' and 'pvt' are not valid local TLDs and domains."}, {"name": "testValidator412d", "primary_tested": ["DomainValidator.updateTLDOverride(ArrayType,String...)", "DomainValidator.isValidLocalTld(String)", "DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator", "ArrayType"], "class_members": []}, "category": "unit", "description": "Tests that 'local' and 'pvt' can be made valid local TLDs and domains."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "testclass_name": "DomainValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.BufferedReader;", "import java.io.Closeable;", "import java.io.File;", "import java.io.FileReader;", "import java.io.IOException;", "import java.io.InputStream;", "import java.lang.reflect.Field;", "import java.lang.reflect.Modifier;", "import java.net.HttpURLConnection;", "import java.net.IDN;", "import java.net.URL;", "import java.nio.file.Files;", "import java.nio.file.StandardCopyOption;", "import java.text.SimpleDateFormat;", "import java.util.Date;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Locale;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.Set;", "import java.util.TreeMap;", "import java.util.regex.Matcher;", "import java.util.regex.Pattern;", "import org.apache.commons.lang3.SystemProperties;", "import org.apache.commons.validator.routines.DomainValidator.ArrayType;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DomainValidatorTest", "description": "Unit tests for the DomainValidator class, focusing on domain validation and TLD checks.", "class_members": {"variables": [{"name": "validator", "type": "DomainValidator"}], "methods": [{"name": "closeQuietly", "signature": "void closeQuietly(Closeable)"}, {"name": "download", "signature": "long download(File, String, long)"}, {"name": "getHtmlInfo", "signature": "Map<String, String[]> getHtmlInfo(File)"}, {"name": "isInIanaList", "signature": "boolean isInIanaList(String, Set<String>)"}, {"name": "isInIanaList", "signature": "boolean isInIanaList(String, String[], Set<String>)"}, {"name": "isLowerCase", "signature": "boolean isLowerCase(String)"}, {"name": "isNotInRootZone", "signature": "boolean isNotInRootZone(String)"}, {"name": "isSortedLowerCase", "signature": "boolean isSortedLowerCase(String)"}, {"name": "isSortedLowerCase", "signature": "boolean isSortedLowerCase(String, String[])"}, {"name": "printMap", "signature": "void printMap(String, Map<String, String>, String)"}], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "tesLocalTldsSortedAndLowerCase", "primary_tested": ["DomainValidator.isSortedLowerCase(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the LOCAL_TLDS array is sorted and in lower case."}, {"name": "testAllowLocal", "primary_tested": ["DomainValidator.isValid(String)"], "associated_methods": ["DomainValidator.getInstance(boolean)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of local domains with different configurations."}, {"name": "testCountryCodeTldsSortedAndLowerCase", "primary_tested": ["DomainValidator.isSortedLowerCase(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the COUNTRY_CODE_TLDS array is sorted and in lower case."}, {"name": "testDomainNoDots", "primary_tested": ["DomainValidator.isValidDomainSyntax(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of domain labels without dots."}, {"name": "testEnumIsPublic", "primary_tested": ["DomainValidator.ArrayType.class.getModifiers()"], "external_dependencies": {"modules": ["DomainValidator"]}, "category": "unit", "description": "Tests if the ArrayType enum is public."}, {"name": "testGenericTldsSortedAndLowerCase", "primary_tested": ["DomainValidator.isSortedLowerCase(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the GENERIC_TLDS array is sorted and in lower case."}, {"name": "testGetArray", "primary_tested": ["DomainValidator.getTLDEntries(ArrayType)"], "external_dependencies": {"modules": ["DomainValidator"]}, "category": "unit", "description": "Tests the retrieval of TLD entries for various ArrayTypes."}, {"name": "testIDN", "primary_tested": ["DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IDN domains."}, {"name": "testIDNJava6OrLater", "primary_tested": ["DomainValidator.isValid(String)"], "associated_methods": ["SystemProperties.getJavaVersion()"], "external_dependencies": {"modules": ["DomainValidator", "SystemProperties"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IDN domains on Java 6 or later."}, {"name": "testInfrastructureTldsSortedAndLowerCase", "primary_tested": ["DomainValidator.isSortedLowerCase(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the INFRASTRUCTURE_TLDS array is sorted and in lower case."}, {"name": "testInvalidDomains", "primary_tested": ["DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid domain names."}, {"name": "testIsIDNtoASCIIBroken", "primary_tested": ["IDN.toASCII(String)"], "external_dependencies": {"modules": ["IDN", "SystemProperties"]}, "category": "unit", "description": "Tests if the IDN.toASCII method is broken."}, {"name": "testRFC2396domainlabel", "primary_tested": ["DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of domain labels according to RFC2396."}, {"name": "testRFC2396toplabel", "primary_tested": ["DomainValidator.isValidDomainSyntax(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of top-level labels according to RFC2396."}, {"name": "testTopLevelDomains", "primary_tested": ["DomainValidator.isValidInfrastructureTld(String)", "DomainValidator.isValidGenericTld(String)", "DomainValidator.isValidCountryCodeTld(String)", "DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of top-level domains (TLDs) for infrastructure, generic, and country code domains."}, {"name": "testUnicodeToASCII", "primary_tested": ["DomainValidator.unicodeToASCII(String)"], "external_dependencies": {"modules": ["DomainValidator"]}, "category": "unit", "description": "Tests the conversion of Unicode to ASCII using the DomainValidator's method."}, {"name": "testValidator297", "primary_tested": ["DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of a specific IDN domain."}, {"name": "testValidator306", "primary_tested": ["DomainValidator.isValidDomainSyntax(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of domain labels and TLDs with maximum lengths."}, {"name": "testValidDomains", "primary_tested": ["DomainValidator.isValid(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid domain names."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "testclass_name": "EmailValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.lang3.SystemProperties;", "import org.apache.commons.validator.ResultPair;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "testclass_name": "UrlValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.net.URI;", "import java.net.URISyntaxException;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.lang3.SystemProperties;", "import org.apache.commons.validator.ResultPair;", "import org.junit.Before;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidator_isBlankOrNullTest.java", "testclass_name": "GenericValidator_isBlankOrNullTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GenericValidator_isBlankOrNullTest", "description": "Unit tests for the GenericValidator.isBlankOrNull method.", "test_cases": [{"name": "testIsBlankOrNull", "primary_tested": ["GenericValidator.isBlankOrNull(String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the isBlankOrNull method of GenericValidator for various string inputs."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Var_cloneTest.java", "testclass_name": "Var_cloneTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Var_cloneTest", "description": "Unit test for the clone functionality of the Var class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["Var.clone()"], "external_dependencies": {"modules": ["Var"]}, "category": "unit", "description": "Tests the clone functionality of the Var class to ensure that the cloned object is not the same instance but has the same properties."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Form_toStringTest.java", "testclass_name": "Form_toStringTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Form_toStringTest", "description": "Unit test for the toString method of the Form class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testToString", "primary_tested": ["Form.toString()"], "associated_methods": ["Form.setName(String)", "Form.addField(Field)", "Field.setKey(String)", "Field.toString()"], "external_dependencies": {"modules": ["Form", "Field"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of the Form class, ensuring it correctly formats the form and its fields."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_hashCodeTest.java", "testclass_name": "Flags_hashCodeTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "Flags_hashCodeTest", "description": "Unit test for the hashCode method in the Flags class.", "class_members": {"variables": [{"name": "flags", "type": "Flags"}]}, "test_cases": [{"name": "testHashCode", "primary_tested": ["Flags.hashCode()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "description": "Tests the hashCode method of the Flags class to ensure it returns the expected hash code value."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidator_minLengthTest.java", "testclass_name": "GenericValidator_minLengthTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "GenericValidator_minLengthTest", "description": "Unit tests for the minLength method in GenericValidator with and without line ending adjustment.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMinLength_WithLineEndingAdjustment", "primary_tested": ["GenericValidator.minLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the minLength method with line ending adjustment, expecting the result to be true."}, {"name": "testMinLength_WithoutLineEndingAdjustment", "primary_tested": ["GenericValidator.minLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the minLength method without line ending adjustment, expecting the result to be false."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/RegexValidator_toStringTest.java", "testclass_name": "RegexValidator_toStringTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RegexValidator_toStringTest", "description": "Unit tests for the toString method of the RegexValidator class.", "class_members": {"variables": [{"name": "validator", "type": "RegexValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToString", "primary_tested": ["RegexValidator.toString()"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the toString method of RegexValidator returns the correct pattern representation."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyFastHashMapTest.java", "testclass_name": "ValidatorUtils_copyFastHashMapTest", "dependencies": ["package org.apache.commons.validator.util;", "import org.apache.commons.collections.FastHashMap;", "import org.apache.commons.validator.Arg;", "import org.apache.commons.validator.Msg;", "import org.apache.commons.validator.Var;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ValidatorUtils_copyFastHashMapTest", "description": "Tests the functionality of copying a FastHashMap using ValidatorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCopyFastHashMap_AllPathsCovered", "primary_tested": ["ValidatorUtils.copyFastHashMap(FastHashMap)"], "associated_methods": [], "external_dependencies": {"modules": ["FastHashMap", "Msg", "Arg", "Var", "ValidatorUtils"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that all paths in the copyFastHashMap method are covered, ensuring that the copied FastHashMap contains the same elements and properties as the original."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_toStringTest.java", "testclass_name": "ModulusTenCheckDigit_toStringTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ModulusTenCheckDigit_toStringTest", "description": "Unit tests for the toString method of ModulusTenCheckDigit.", "class_members": {"variables": [{"name": "checkDigit", "type": "ModulusTenCheckDigit"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToString", "primary_tested": ["ModulusTenCheckDigit.toString()"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "checkDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of ModulusTenCheckDigit to ensure it returns the expected string representation."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyMapTest.java", "testclass_name": "ValidatorUtils_copyMapTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.validator.Arg;", "import org.apache.commons.validator.Msg;", "import org.apache.commons.validator.Var;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorUtils_copyMapTest", "description": "Unit tests for the copyMap functionality in ValidatorUtils.", "class_members": {"variables": [{"name": "originalMap", "type": "Map<String, Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCopyMap", "primary_tested": ["ValidatorUtils.copyMap(Map<String, Object>)"], "external_dependencies": {"modules": ["ValidatorUtils", "Map", "HashMap", "Msg", "Arg", "Var"], "class_members": [{"name": "originalMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the deep copy functionality of the copyMap method in ValidatorUtils, ensuring that objects of type Msg, Arg, and Var are deeply copied."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidator_isDateTest.java", "testclass_name": "GenericValidator_isDateTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GenericValidator_isDateTest", "description": "Unit tests for the GenericValidator.isDate method.", "fixtures": ["setUp"], "test_cases": [{"name": "testIsDateValid", "primary_tested": ["GenericValidator.isDate(String,String,boolean)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validity of a date string against a valid date pattern."}, {"name": "testIsDateInvalid", "primary_tested": ["GenericValidator.isDate(String,String,boolean)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validity of a date string against an invalid date pattern."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResult_getActionMapTest.java", "testclass_name": "ValidatorResult_getActionMapTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;"], "name": "ValidatorResult_getActionMapTest", "description": "Unit tests for the getActionMap method of ValidatorResult.", "class_members": {"variables": [{"name": "validatorResult", "type": "ValidatorResult"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetActionMap", "primary_tested": ["ValidatorResult.getActionMap()"], "associated_methods": ["ValidatorResult.add(String,boolean,String)"], "external_dependencies": {"modules": ["ValidatorResult", "Field", "Map", "ValidatorResult.ResultStatus"], "class_members": [{"name": "validatorResult", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getActionMap method of ValidatorResult to ensure it returns the correct action map with expected results."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Form_addFieldTest.java", "testclass_name": "Form_addFieldTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Form_addFieldTest", "description": "Unit tests for the addField method of the Form class.", "class_members": {"variables": [{"name": "form", "type": "Form"}, {"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddField", "primary_tested": ["Form.addField(Field)"], "associated_methods": ["Form.containsField(String)", "Form.getField(String)"], "external_dependencies": {"modules": ["Form", "Field"], "class_members": [{"name": "form", "type": "variable"}, {"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a field to the form and verifies that the field is correctly added and retrievable."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java", "testclass_name": "Flags_toStringTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "Flags_toStringTest", "description": "Unit tests for the toString method of the Flags class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToStringWithAllFlagsOff", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the toString method of the Flags class when all flags are off."}, {"name": "testToStringWithAllFlagsOn", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the toString method of the Flags class when all flags are on."}, {"name": "testToStringWithMixedFlags", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the toString method of the Flags class with mixed flags."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java", "testclass_name": "GenericValidator_matchRegexpTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GenericValidator_matchRegexpTest", "description": "Unit tests for the matchRegexp method in GenericValidator.", "test_cases": [{"name": "testMatchRegexp_ValidPattern", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with a valid pattern."}, {"name": "testMatchRegexp_InvalidPattern", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with an invalid pattern."}, {"name": "testMatchRegexp_NullPattern", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with a null pattern."}, {"name": "testMatchRegexp_EmptyPattern", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with an empty pattern."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_getMsgTest.java", "testclass_name": "Field_getMsgTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Field_getMsgTest", "description": "Unit tests for the getMsg method of the Field class.", "class_members": {"variables": [{"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetMsgWithExistingKey", "primary_tested": ["Field.getMsg(String)"], "associated_methods": ["Field.addMsg(Msg)"], "external_dependencies": {"modules": ["Field", "Msg"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getMsg method of the Field class with an existing key."}, {"name": "testGetMsgWithNonExistingKey", "primary_tested": ["Field.getMsg(String)"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getMsg method of the Field class with a non-existing key."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareWeeksTest.java", "testclass_name": "DateValidator_compareWeeksTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;"], "name": "DateValidator_compareWeeksTest", "description": "Unit tests for comparing weeks using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareWeeks", "primary_tested": ["DateValidator.compareWeeks(Date,Date,TimeZone)"], "associated_methods": ["DateValidator_compareWeeksTest.createDate(TimeZone,int,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Calendar", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "createDate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of weeks using DateValidator."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java", "testclass_name": "Field_getKeyTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Field_getKeyTest", "description": "Unit tests for the getKey method of the Field class.", "class_members": {"variables": [{"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetKeyWithNullKey", "primary_tested": ["Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getKey method when the indexedListProperty is null."}, {"name": "testGetKeyWithIndexedProperty", "primary_tested": ["Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getKey method when the indexedListProperty is not null."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_setDependsTest.java", "testclass_name": "Field_setDependsTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Field_setDependsTest", "description": "Unit tests for the setDepends method of the Field class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetDepends", "primary_tested": ["Field.setDepends(String)"], "associated_methods": ["Field.getDependencyList()"], "external_dependencies": {"modules": ["Field"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setDepends method with a valid list of dependencies."}, {"name": "testSetDependsWithEmptyTokens", "primary_tested": ["Field.setDepends(String)"], "associated_methods": ["Field.getDependencyList()"], "external_dependencies": {"modules": ["Field"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setDepends method with empty tokens in the dependency list."}, {"name": "testSetDependsWithNullAndEmpty", "primary_tested": ["Field.setDepends(String)"], "associated_methods": ["Field.getDependencyList()"], "external_dependencies": {"modules": ["Field"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setDepends method with null and empty values in the dependency list."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java", "testclass_name": "Field_getVarValueTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Field_getVarValueTest", "description": "Unit tests for the getVarValue method of the Field class.", "class_members": {"variables": [{"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetVarValue_ExistingKey", "primary_tested": ["Field.getVarValue(String)"], "associated_methods": ["Field.getVarMap()"], "external_dependencies": {"modules": ["Field", "Var"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getVarValue method when an existing key is provided."}, {"name": "testGetVarValue_NonExistingKey", "primary_tested": ["Field.getVarValue(String)"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getVarValue method when a non-existing key is provided."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java", "testclass_name": "ValidatorResources_addConstantTest", "dependencies": ["package org.apache.commons.validator;", "import org.apache.commons.logging.Log;", "import org.apache.commons.logging.LogFactory;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "ValidatorResources_addConstantTest", "description": "Unit tests for the addConstant method in ValidatorResources.", "class_members": {"variables": [{"name": "validatorResources", "type": "ValidatorResources"}, {"name": "log", "type": "Log"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddConstant", "primary_tested": ["ValidatorResources.addConstant(String,String)"], "external_dependencies": {"modules": ["ValidatorResources"], "class_members": [{"name": "validatorResources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a constant to ValidatorResources and verifies the constant is correctly stored."}, {"name": "testAddConstantWithDebugLogging", "primary_tested": ["ValidatorResources.addConstant(String,String)"], "associated_methods": ["Log.debug(String)"], "external_dependencies": {"modules": ["ValidatorResources", "Log"], "class_members": [{"name": "validatorResources", "type": "variable"}, {"name": "log", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a constant to ValidatorResources and verifies that debug logging is correctly invoked."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareQuartersTest.java", "testclass_name": "DateValidator_compareQuartersTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareQuartersTest", "description": "Unit tests for comparing quarters using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone timeZone, int date, int time)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareQuarters", "primary_tested": ["DateValidator.compareQuarters(Date,Date,TimeZone)", "DateValidator.compareQuarters(Date,Date,TimeZone,int)"], "associated_methods": ["DateValidator_compareQuartersTest.createDate(TimeZone,int,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Calendar", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "createDate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of quarters using DateValidator."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResult_getResultTest.java", "testclass_name": "ValidatorResult_getResultTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorResult_getResultTest", "description": "Unit tests for the getResult method of ValidatorResult class.", "class_members": {"variables": [{"name": "validatorResult", "type": "ValidatorResult"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetResultWithExistingValidatorName", "primary_tested": ["ValidatorResult.getResult(String)"], "associated_methods": ["ValidatorResult.add(String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResult", "Field"], "class_members": [{"name": "validatorResult", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResult method when the validator name exists in the ValidatorResult."}, {"name": "testGetResultWithNonExistingValidatorName", "primary_tested": ["ValidatorResult.getResult(String)"], "associated_methods": ["ValidatorResult.add(String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResult", "Field"], "class_members": [{"name": "validatorResult", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResult method when the validator name does not exist in the ValidatorResult."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java", "testclass_name": "Field_generateKeyTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Field_generateKeyTest", "description": "Unit tests for the generateKey method in the Field class.", "class_members": {"variables": [{"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGenerateKeyIndexed", "primary_tested": ["Field.generateKey()"], "associated_methods": ["Field.setIndexedListProperty(String)", "Field.setProperty(String)", "Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generateKey method when the field is indexed."}, {"name": "testGenerateKeyNotIndexed", "primary_tested": ["Field.generateKey()"], "associated_methods": ["Field.setProperty(String)", "Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generateKey method when the field is not indexed."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java", "testclass_name": "CalendarValidator_adjustToTimeZoneTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CalendarValidator_adjustToTimeZoneTest", "description": "Unit tests for the adjustToTimeZone method in CalendarValidator.", "class_members": {"variables": [{"name": "calValidator", "type": "CalendarValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdjustToTimeZoneSameRules", "primary_tested": ["CalendarValidator.adjustToTimeZone(Calendar,TimeZone)"], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the adjustToTimeZone method when the original and new time zones have the same rules."}, {"name": "testAdjustToTimeZoneDifferentRules", "primary_tested": ["CalendarValidator.adjustToTimeZone(Calendar,TimeZone)"], "associated_methods": ["TimeZone.hasSameRules(TimeZone)"], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the adjustToTimeZone method when the original and new time zones have different rules."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Var_toStringTest.java", "testclass_name": "Var_toStringTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Var_toStringTest", "description": "Unit tests for the toString method of the Var class, specifically testing the output with and without a resource.", "class_members": {"variables": [{"name": "var", "type": "Var"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithResource", "primary_tested": ["Var.toString()"], "associated_methods": ["Var.setName(String)", "Var.setValue(String)", "Var.setJsType(String)", "Var.setResource(boolean)", "Var.setBundle(String)"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Var class when the resource is set to true."}, {"name": "testToStringWithoutResource", "primary_tested": ["Var.toString()"], "associated_methods": ["Var.setName(String)", "Var.setValue(String)", "Var.setJsType(String)", "Var.setResource(boolean)"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Var class when the resource is set to false."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidator_maxLengthTest.java", "testclass_name": "GenericValidator_maxLengthTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GenericValidator_maxLengthTest", "description": "Unit tests for the maxLength method in GenericValidator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMaxLength_WithinLimit", "primary_tested": ["GenericValidator.maxLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the maxLength method with a string that is within the limit."}, {"name": "testMaxLength_ExceedsLimit", "primary_tested": ["GenericValidator.maxLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the maxLength method with a string that exceeds the limit."}, {"name": "testMaxLength_NoLineEndings", "primary_tested": ["GenericValidator.maxLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the maxLength method with a string that has no line endings."}, {"name": "testMaxLength_EmptyString", "primary_tested": ["GenericValidator.maxLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the maxLength method with an empty string."}, {"name": "testMaxLength_ExactlyAtLimit", "primary_tested": ["GenericValidator.maxLength(String,int,int)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the maxLength method with a string that is exactly at the limit."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/RegexValidator_isValidTest.java", "testclass_name": "RegexValidator_isValidTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "RegexValidator_isValidTest", "description": "Unit tests for the isValid method of the RegexValidator class.", "class_members": {"variables": [{"name": "validator", "type": "RegexValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValid_NullValue", "primary_tested": ["RegexValidator.isValid(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a null value is considered invalid by the RegexValidator."}, {"name": "testIsValid_ValidPattern", "primary_tested": ["RegexValidator.isValid(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a valid pattern is considered valid by the RegexValidator."}, {"name": "testIsValid_InvalidPattern", "primary_tested": ["RegexValidator.isValid(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an invalid pattern is considered invalid by the RegexValidator."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java", "testclass_name": "ValidatorResults_addTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorResults_addTest", "description": "Unit tests for the add method of ValidatorResults.", "class_members": {"variables": [{"name": "validatorResults", "type": "ValidatorResults"}, {"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddNewValidatorResult", "primary_tested": ["ValidatorResults.add(Field,String,boolean,String)"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.getResult(String)"], "external_dependencies": {"modules": ["ValidatorResults", "Field", "ValidatorResult"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a new ValidatorResult to ValidatorResults and verifies its presence and value."}, {"name": "testAddExistingValidatorResult", "primary_tested": ["ValidatorResults.add(Field,String,boolean,String)"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.getResult(String)"], "external_dependencies": {"modules": ["ValidatorResults", "Field", "ValidatorResult"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple ValidatorResults to ValidatorResults and verifies their presence and values."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java", "testclass_name": "Flags_cloneTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Flags_cloneTest", "description": "Unit tests for the clone functionality of the Flags class.", "class_members": {"variables": [{"name": "flags", "type": "Flags"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClone", "primary_tested": ["Flags.clone()"], "associated_methods": ["Flags.getFlags()", "Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Flags class, ensuring that the cloned object has the same flags and is equal to the original."}, {"name": "testCloneWithStateChange", "primary_tested": ["Flags.clone()"], "associated_methods": ["Flags.turnOff(long)", "Flags.getFlags()", "Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Flags class after turning off some flags, ensuring that the cloned object reflects the state change and is equal to the original."}, {"name": "testCloneNotSupported", "primary_tested": ["Flags.clone()"], "external_dependencies": {"modules": ["Flags"]}, "category": "unit", "description": "Tests the scenario where the clone method throws an UnsupportedOperationException, ensuring that the exception is correctly thrown."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_compareQuartersTest.java", "testclass_name": "CalendarValidator_compareQuartersTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CalendarValidator_compareQuartersTest", "description": "Unit tests for comparing quarters using CalendarValidator.", "class_members": {"variables": [{"name": "calValidator", "type": "CalendarValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareQuarters", "primary_tested": ["CalendarValidator.compareQuarters(Calendar,Calendar,int)"], "external_dependencies": {"modules": ["CalendarValidator", "Calendar"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of quarters where the first quarter is less than the second quarter."}, {"name": "testCompareQuartersSameQuarter", "primary_tested": ["CalendarValidator.compareQuarters(Calendar,Calendar,int)"], "external_dependencies": {"modules": ["CalendarValidator", "Calendar"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of quarters where both quarters are the same."}, {"name": "testCompareQuartersDifferentYears", "primary_tested": ["CalendarValidator.compareQuarters(Calendar,Calendar,int)"], "external_dependencies": {"modules": ["CalendarValidator", "Calendar"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of quarters where the first quarter is from a previous year."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java", "testclass_name": "IBANCheckDigit_calculateTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IBANCheckDigit_calculateTest", "description": "Unit tests for the IBANCheckDigit calculate method.", "class_members": {"variables": [{"name": "routine", "type": "CheckDigit"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCalculateValidCode", "primary_tested": ["CheckDigit.calculate(String)"], "external_dependencies": {"modules": ["CheckDigit", "IBANCheckDigit", "CheckDigitException"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculate method with a valid IBAN code."}, {"name": "testCalculateInvalidCodeLength", "primary_tested": ["CheckDigit.calculate(String)"], "external_dependencies": {"modules": ["CheckDigit", "IBANCheckDigit", "CheckDigitException"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculate method with an invalid (too short) IBAN code, expecting a CheckDigitException."}, {"name": "testCalculateNullCode", "primary_tested": ["CheckDigit.calculate(String)"], "external_dependencies": {"modules": ["CheckDigit", "IBANCheckDigit", "CheckDigitException"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculate method with a null IBAN code, expecting a CheckDigitException."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResult_isValidTest.java", "testclass_name": "ValidatorResult_isValidTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorResult_isValidTest", "description": "Unit tests for the isValid method in the ValidatorResult class.", "class_members": {"variables": [{"name": "validatorResult", "type": "ValidatorResult"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValid_ValidAction", "primary_tested": ["ValidatorResult.isValid(String)"], "associated_methods": ["ValidatorResult.add(String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResult", "Field"], "class_members": [{"name": "validatorResult", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method when a valid action is added to the ValidatorResult."}, {"name": "testIsValid_InvalidAction", "primary_tested": ["ValidatorResult.isValid(String)"], "associated_methods": ["ValidatorResult.add(String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResult", "Field"], "class_members": [{"name": "validatorResult", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method when an invalid action is added to the ValidatorResult."}, {"name": "testIsValid_NullAction", "primary_tested": ["ValidatorResult.isValid(String)"], "external_dependencies": {"modules": ["ValidatorResult", "Field"], "class_members": [{"name": "validatorResult", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method when a non-existent validator name is passed."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java", "testclass_name": "DateValidator_compareDatesTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareDatesTest", "description": "Unit tests for comparing dates using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}], "methods": [{"name": "createDate", "signature": "Date createDate(int, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareDatesEqual", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of two equal dates."}, {"name": "testCompareDatesLessThan", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison where the first date is less than the second date."}, {"name": "testCompareDatesGreaterThan", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison where the first date is greater than the second date."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java", "testclass_name": "DateValidator_compareYearsTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareYearsTest", "description": "Unit tests for comparing years using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}], "methods": [{"name": "createDate", "signature": "Date createDate(int,int,int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareYearsEqual", "primary_tested": ["DateValidator.compareYears(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of years when they are equal."}, {"name": "testCompareYearsLessThan", "primary_tested": ["DateValidator.compareYears(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of years when the first year is less than the second year."}, {"name": "testCompareYearsGreaterThan", "primary_tested": ["DateValidator.compareYears(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of years when the first year is greater than the second year."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java", "testclass_name": "DateValidator_compareMonthsTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareMonthsTest", "description": "Unit tests for comparing months using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}], "methods": [{"name": "createDate", "signature": "Date createDate(int, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareMonthsEqual", "primary_tested": ["DateValidator.compareMonths(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of two dates in the same month."}, {"name": "testCompareMonthsLessThan", "primary_tested": ["DateValidator.compareMonths(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of two dates where the first date is in an earlier month than the second date."}, {"name": "testCompareMonthsGreaterThan", "primary_tested": ["DateValidator.compareMonths(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of two dates where the first date is in a later month than the second date."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java", "testclass_name": "ModulusTenCheckDigit_isValidTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.apache.commons.validator.GenericValidator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "ModulusTenCheckDigit_isValidTest", "description": "Unit tests for the isValid method of ModulusTenCheckDigit class.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ModulusCheckDigit", "description": "Internal static class representing a mock implementation of a check digit."}, {"name": "ModulusTenCheckDigit", "description": "Internal static class extending ModulusCheckDigit, used for testing."}]}, "fixtures": [], "test_cases": [{"name": "testIsValid_BlankOrNullCode", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit", "GenericValidator"], "class_members": [{"name": "ModulusTenCheckDigit", "type": "nested_class"}], "project_specific_resources": ["GenericValidator.isBlankOrNull(String)"]}, "category": "unit", "description": "Tests the isValid method with blank or null code inputs."}, {"name": "testIsValid_NonDigitCheckDigit", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "ModulusTenCheckDigit", "type": "nested_class"}]}, "category": "unit", "description": "Tests the isValid method with a non-digit check digit."}, {"name": "testIsValid_ValidCode", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "associated_methods": ["ModulusCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit", "ModulusCheckDigit", "Mockito"], "class_members": [{"name": "ModulusTenCheckDigit", "type": "nested_class"}, {"name": "ModulusCheckDigit", "type": "nested_class"}]}, "category": "unit", "description": "Tests the isValid method with a valid code input, using a mocked super class."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java", "testclass_name": "ISBNCheckDigit_isValidTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ISBNCheckDigit_isValidTest", "description": "Unit tests for the isValid method of the ISBNCheckDigit class.", "class_members": {"variables": [{"name": "routine", "type": "CheckDigit"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValidWithNullCode", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a null code."}, {"name": "testIsValidWithValidISBN10", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid ISBN-10 code."}, {"name": "testIsValidWithValidISBN13", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid ISBN-13 code."}, {"name": "testIsValidWithInvalidLength", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with codes of invalid lengths."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java", "testclass_name": "RegexValidator_validateTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "RegexValidator_validateTest", "description": "Unit tests for the validate method of the RegexValidator class.", "class_members": {"variables": [{"name": "validator", "type": "RegexValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidateNullInput", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with null input, expecting a null return."}, {"name": "testValidateSingleGroupMatch", "primary_tested": ["RegexValidator.validate(String)"], "associated_methods": ["String.substring(int,int)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with a single group match, expecting the first four characters of the matched group."}, {"name": "testValidateMultipleGroupMatch", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with multiple group matches, expecting concatenated groups."}, {"name": "testValidateNoMatch", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with no match, expecting a null return."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java", "testclass_name": "IBANValidator_getValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IBANValidator_getValidatorTest", "description": "Unit tests for the IBANValidator's getValidator method.", "class_members": {"variables": [{"name": "validator", "type": "IBANValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidatorValidCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with a valid IBAN code."}, {"name": "testGetValidatorNullCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with a null IBAN code."}, {"name": "testGetValidatorShortCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with a short IBAN code."}, {"name": "testGetValidatorInvalidCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with an invalid IBAN code."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java", "testclass_name": "ValidatorResults_getResultValueMapTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ValidatorResults_getResultValueMapTest", "description": "Unit tests for the getResultValueMap method in ValidatorResults class.", "class_members": {"variables": [{"name": "validatorResults", "type": "ValidatorResults"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetResultValueMap", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["Field.setKey(String)", "ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method to ensure it returns the correct map of results."}, {"name": "testGetResultValueMapWithBooleanResult", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["Field.setKey(String)", "ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method when the result is a boolean, ensuring it handles it correctly."}, {"name": "testGetResultValueMapWithNullResult", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["Field.setKey(String)", "ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method when the result is null, ensuring it handles it correctly."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java", "testclass_name": "Validator_getClassLoaderTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validator_getClassLoaderTest", "description": "Unit tests for the getClassLoader method in the Validator class.", "class_members": {"variables": [{"name": "validator", "type": "Validator"}, {"name": "customClassLoader", "type": "ClassLoader"}, {"name": "contextClassLoader", "type": "ClassLoader"}, {"name": "defaultClassLoader", "type": "ClassLoader"}]}, "test_cases": [{"name": "testGetClassLoader_withClassLoaderSet", "primary_tested": ["Validator.getClassLoader()"], "associated_methods": ["Validator.setClassLoader(ClassLoader)"], "external_dependencies": {"modules": ["Validator", "ValidatorResources", "ClassLoader"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "customClassLoader", "type": "variable"}]}, "category": "unit", "description": "Tests the getClassLoader method when a custom ClassLoader is set."}, {"name": "testGetClassLoader_withContextClassLoader", "primary_tested": ["Validator.getClassLoader()"], "associated_methods": ["Validator.setUseContextClassLoader(boolean)", "Thread.currentThread().getContextClassLoader()"], "external_dependencies": {"modules": ["Validator", "ValidatorResources", "Thread"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "contextClassLoader", "type": "variable"}]}, "category": "unit", "description": "Tests the getClassLoader method when the context ClassLoader is used."}, {"name": "testGetClassLoader_withDefaultClassLoader", "primary_tested": ["Validator.getClassLoader()"], "associated_methods": ["Validator.setUseContextClassLoader(boolean)", "Validator.class.getClassLoader()"], "external_dependencies": {"modules": ["Validator", "ValidatorResources"], "class_members": [{"name": "validator", "type": "variable"}, {"name": "defaultClassLoader", "type": "variable"}]}, "category": "unit", "description": "Tests the getClassLoader method when the default ClassLoader is used."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java", "testclass_name": "Flags_equalsTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Flags_equalsTest", "description": "Unit tests for the equals method in the Flags class.", "class_members": {"variables": [{"name": "flags1", "type": "Flags"}, {"name": "flags2", "type": "Flags"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different class."}, {"name": "testEqualsSameFlags", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two Flags objects with the same flags."}, {"name": "testEqualsDifferentFlags", "primary_tested": ["Flags.equals(Object)"], "associated_methods": ["Flags.turnOff(long)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two Flags objects with different flags."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "testclass_name": "IBANCheckDigit_isValidTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IBANCheckDigit_isValidTest", "description": "Unit tests for the IBANCheckDigit isValid method.", "class_members": {"variables": [{"name": "ibanCheckDigit", "type": "IBANCheckDigit"}]}, "test_cases": [{"name": "testIsValid_NullCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a null code."}, {"name": "testIsValid_ShortCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a short code."}, {"name": "testIsValid_InvalidCheckDigits", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with invalid check digits."}, {"name": "testIsValid_ValidCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a valid code."}, {"name": "testIsValid_CheckDigitException", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a code that should trigger a check digit exception."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/ISINValidator_validateTest.java", "testclass_name": "ISINValidator_validateTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ISINValidator_validateTest", "description": "Unit tests for the ISINValidator validate method with and without country code checks.", "class_members": {"variables": [{"name": "validatorWithCountryCheck", "type": "ISINValidator"}, {"name": "validatorWithoutCountryCheck", "type": "ISINValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidateWithCountryCheckValid", "primary_tested": ["ISINValidator.validate(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "validatorWithCountryCheck", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method of ISINValidator with a valid ISIN and country code check enabled."}, {"name": "testValidateWithCountryCheckInvalidCountryCode", "primary_tested": ["ISINValidator.validate(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "validatorWithCountryCheck", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method of ISINValidator with an invalid country code and country code check enabled."}, {"name": "testValidateWithoutCountryCheckValid", "primary_tested": ["ISINValidator.validate(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "validatorWithoutCountryCheck", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method of ISINValidator with a valid ISIN and country code check disabled."}, {"name": "testValidateWithoutCountryCheckInvalid", "primary_tested": ["ISINValidator.validate(String)"], "external_dependencies": {"modules": ["ISINValidator"], "class_members": [{"name": "validatorWithoutCountryCheck", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method of ISINValidator with an invalid ISIN and country code check disabled."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "testclass_name": "IBANValidator_isValidTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IBANValidator_isValidTest", "description": "Unit tests for the IBANValidator isValid method.", "class_members": {"variables": [{"name": "validator", "type": "IBANValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValid_ValidIBAN", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN."}, {"name": "testIsValid_InvalidIBAN_WrongLength", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an invalid IBAN due to wrong length."}, {"name": "testIsValid_InvalidIBAN_WrongFormat", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an invalid IBAN due to wrong format."}, {"name": "testIsValid_InvalidIBAN_NoValidator", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an invalid IBAN due to no validator available."}, {"name": "testIsValid_NullIBAN", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a null IBAN."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java", "testclass_name": "ValidatorUtils_replaceTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorUtils_replaceTest", "description": "Unit tests for the replace functionality in ValidatorUtils.", "class_members": {"variables": [{"name": "value", "type": "String"}, {"name": "key", "type": "String"}, {"name": "replaceValue", "type": "String"}]}, "test_cases": [{"name": "testReplace_AllNonNull", "primary_tested": ["ValidatorUtils.replace(String,String,String)"], "external_dependencies": {"modules": ["ValidatorUtils"], "class_members": [{"name": "value", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "replaceValue", "type": "variable"}]}, "category": "unit", "description": "Tests the replace functionality with all non-null parameters."}, {"name": "testReplace_ValueNull", "primary_tested": ["ValidatorUtils.replace(String,String,String)"], "external_dependencies": {"modules": ["ValidatorUtils"], "class_members": [{"name": "value", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "replaceValue", "type": "variable"}]}, "category": "unit", "description": "Tests the replace functionality with the value parameter being null."}, {"name": "testReplace_KeyNull", "primary_tested": ["ValidatorUtils.replace(String,String,String)"], "external_dependencies": {"modules": ["ValidatorUtils"], "class_members": [{"name": "value", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "replaceValue", "type": "variable"}]}, "category": "unit", "description": "Tests the replace functionality with the key parameter being null."}, {"name": "testReplace_ReplaceValueNull", "primary_tested": ["ValidatorUtils.replace(String,String,String)"], "external_dependencies": {"modules": ["ValidatorUtils"], "class_members": [{"name": "value", "type": "variable"}, {"name": "key", "type": "variable"}, {"name": "replaceValue", "type": "variable"}]}, "category": "unit", "description": "Tests the replace functionality with the replaceValue parameter being null."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "testclass_name": "InetAddressValidator_isValidInet4AddressTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "InetAddressValidator_isValidInet4AddressTest", "description": "Unit tests for validating IPv4 addresses using InetAddressValidator.", "class_members": {"variables": [{"name": "validator", "type": "InetAddressValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidIPv4Address", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of a valid IPv4 address."}, {"name": "testInvalidIPv4Address", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an invalid IPv4 address with out-of-range segments."}, {"name": "testInvalidIPv4AddressWithLeadingZero", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an invalid IPv4 address with leading zeros in a segment."}, {"name": "testInvalidIPv4AddressWithEmptySegment", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an invalid IPv4 address with an empty segment."}, {"name": "testInvalidIPv4AddressWithNonNumericSegment", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an invalid IPv4 address with a non-numeric segment."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "testclass_name": "ValidatorUtils_getValueAsStringTest", "dependencies": ["package org.apache.commons.validator.util;", "import org.apache.commons.beanutils.PropertyUtils;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.mockito.Mockito.when;"], "name": "ValidatorUtils_getValueAsStringTest", "description": "Unit tests for the getValueAsString method in ValidatorUtils, which retrieves property values as strings from a bean.", "class_members": {"nested_classes": [{"name": "TestBean", "description": "Internal test bean class with properties for testing getValueAsString method."}]}, "test_cases": [{"name": "testGetValueAsString_PropertyFound_String", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is a string and found in the bean."}, {"name": "testGetValueAsString_PropertyFound_StringArray", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is a string array and found in the bean."}, {"name": "testGetValueAsString_PropertyFound_EmptyStringArray", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is an empty string array and found in the bean."}, {"name": "testGetValueAsString_PropertyFound_Collection", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean", "Collections"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is a collection and found in the bean."}, {"name": "testGetValueAsString_PropertyFound_EmptyCollection", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean", "Collections"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is an empty collection and found in the bean."}, {"name": "testGetValueAsString_PropertyNotFound", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is not found in the bean."}, {"name": "testGetValueAsString_PropertyIsNull", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils", "TestBean"]}, "category": "unit", "description": "Tests the getValueAsString method when the property is null in the bean."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "testclass_name": "InetAddressValidator_isValidInet6AddressTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "InetAddressValidator_isValidInet6AddressTest", "description": "Unit tests for validating IPv6 addresses using InetAddressValidator.", "class_members": {"variables": [{"name": "validator", "type": "InetAddressValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidIPv6Address", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of a valid IPv6 address."}, {"name": "testInvalidIPv6Address", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an invalid IPv6 address."}, {"name": "testIPv6AddressWithPrefix", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of a valid IPv6 address with a prefix."}, {"name": "testIPv6AddressWithInvalidPrefix", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an IPv6 address with an invalid prefix."}, {"name": "testIPv6AddressWithZoneId", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of a valid IPv6 address with a zone ID."}, {"name": "testIPv6AddressWithInvalidZoneId", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an IPv6 address with an invalid zone ID."}, {"name": "testIPv6AddressWithIPv4Ending", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of a valid IPv6 address with an IPv4 ending."}, {"name": "testIPv6AddressWithInvalidIPv4Ending", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of an IPv6 address with an invalid IPv4 ending."}]}]