[{"uris": "src/test/java/net/datafaker/sequence/Data.java.Data", "name": "Data", "file_path": "src/test/java/net/datafaker/sequence/Data.java", "superclasses": [], "methods": ["[String]name()", "[String]value()", "[String]range()", "[String]unit()"], "method_uris": ["src/test/java/net/datafaker/sequence/Data.java.Data.[String]name()", "src/test/java/net/datafaker/sequence/Data.java.Data.[String]value()", "src/test/java/net/datafaker/sequence/Data.java.Data.[String]range()", "src/test/java/net/datafaker/sequence/Data.java.Data.[String]unit()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "interface Data {\n    String name();\n\n    String value();\n\n    String range();\n\n    String unit();\n}"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "name": "ProviderRegistration", "file_path": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "superclasses": [], "methods": ["[B]getFaker()", "[FakerContext]getContext()", "[AP]getProvider(String)", "[AP]getProvider(Class<AP>,Function<PR, AP>)", "[String]resolve(String)", "[String]resolve(String,Supplier<String>)", "[String]numerify(String)", "[String]letterify(String)", "[String]letterify(String,boolean)", "[String]bothify(String)", "[String]bothify(String,boolean)", "[String]regexify(String)", "[String]examplify(String)", "[String]templatify(String,char)", "[String]templatify(String,Map<Character, String[]>)", "[String]csv(int)", "[String]csv(String,char,boolean,int)", "[String]json()", "[String]jsona()", "[RandomService]random()", "[String]expression(String)", "[FakeValuesService]fakeValuesService()", "[Options]options()", "[void]addPath(Locale,Path)", "[void]addUrl(Locale,URL)"], "method_uris": ["src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[B]getFaker()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[FakerContext]getContext()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[AP]getProvider(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[AP]getProvider(Class<AP>,Function<PR, AP>)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]resolve(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]resolve(String,Supplier<String>)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]numerify(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]letterify(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]letterify(String,boolean)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]bothify(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]bothify(String,boolean)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]regexify(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]examplify(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]templatify(String,char)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]templatify(String,Map<Character, String[]>)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]csv(int)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]csv(String,char,boolean,int)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]json()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]jsona()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[RandomService]random()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]expression(String)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[FakeValuesService]fakeValuesService()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[Options]options()", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[void]addPath(Locale,Path)", "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[void]addUrl(Locale,URL)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface ProviderRegistration {\n    <B extends ProviderRegistration> B getFaker();\n\n    FakerContext getContext();\n\n    default <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(String simpleClassName) {\n        return ObjectMethods.executeMethodByReturnType(this, simpleClassName);\n    }\n\n    <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(\n        Class<AP> clazz, Function<PR, AP> valueSupplier);\n\n    String resolve(String key);\n\n    String resolve(String key, Supplier<String> message);\n\n    String numerify(String numberString);\n\n    /**\n     * Returns a string with the '?' characters in the parameter replaced with random alphabetic\n     * characters.\n     * <p>\n     * For example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n     *\n     * @param letterString Template for string generation\n     * @return Generated string.\n     */\n    String letterify(String letterString);\n\n    /**\n     * Returns a string with the '?' characters in the parameter replaced with random alphabetic\n     * characters.\n     * <p>\n     * For example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n     */\n    String letterify(String letterString, boolean isUpper);\n\n    /**\n     * Applies both a {@link #numerify(String)} and a {@link #letterify(String)}\n     * over the incoming string.\n     */\n    String bothify(String string);\n\n    /**\n     * Applies both a {@link #numerify(String)} and a {@link #letterify(String)}\n     * over the incoming string.\n     */\n    String bothify(String string, boolean isUpper);\n\n    /**\n     * Generates a String that matches the given regular expression.\n     */\n    String regexify(String regex);\n\n    /**\n     * Generates a String by example. The output string will have the same pattern as the input string.\n     * <p>\n     * For example:\n     * \"AAA\" becomes \"KRA\"\n     * \"abc\" becomes \"uio\"\n     * \"948\" becomes \"345\"\n     * \"A19c\" becomes \"Z20d\"\n     *\n     * @param example The input string\n     * @return The output string based on the input pattern\n     */\n    String examplify(String example);\n\n    /**\n     * Returns a string with the char2replace characters in the parameter replaced with random option from available options.\n     * <p>\n     * For example, the string \"ABC??EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\n     * if passed options are new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"}.\n     *\n     * @param string       Template for string generation\n     * @param char2replace Char to replace\n     * @param options      Options to use while filling the template\n     * @return Generated string\n     */\n    String templatify(String string, char char2replace, String... options);\n\n    /**\n     * Returns a string with the characters in the keys of optionsMap parameter replaced with random option from values.\n     *\n     * <p>\n     * For example, the string \"ABC$$EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\n     * if passed for key '$' there is value new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"} in optionsMap\n     *\n     * @param string     Template for string generation\n     * @param optionsMap Map with replacement rules\n     * @return Generated string\n     */\n    String templatify(String string, Map<Character, String[]> optionsMap);\n\n    /**\n     * Returns a string with generated csv based number of lines and column expressions.\n     * This method will use comma as default delimiter, always prints header and double quote as default quote.\n     *\n     * <p>\n     * For example, it could generate\n     * \"name_column\",\"last_name_column\"\n     * \"Sabrina\",\"Kihn\"\n     * <p>\n     * for expression {@code faker.expression(\"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n     *\n     * @param limit             Number of lines\n     * @param columnExpressions Even number of expressions.\n     *                          The odd numbers args are used for columns names, and even for column values.\n     * @return Generated string\n     */\n    String csv(int limit, String... columnExpressions);\n\n    /**\n     * Returns a string with generated csv based number of lines and column expressions.\n     *\n     * <p>\n     * For example, it could generate\n     * \"Thad\" ### \"Crist\"\n     * \"Kathryne\" ### \"Wuckert\"\n     * \"Sybil\" ### \"Connelly\"\n     * <p>\n     * for expression {@code faker.expression(\"#{csv ' ### ','\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n     *\n     * @param separator         Delimiter to use\n     * @param quote             Quote to use\n     * @param withHeader        Print header or not\n     * @param limit             Number of lines\n     * @param columnExpressions Even number of expressions.\n     *                          The odd numbers args are used for columns names, and even for column values.\n     * @return Generated string\n     */\n    String csv(String separator, char quote, boolean withHeader, int limit, String... columnExpressions);\n\n    String json(String... fieldExpressions);\n\n    String jsona(String... fieldExpressions);\n\n    RandomService random();\n\n    String expression(String expression);\n\n    FakeValuesService fakeValuesService();\n\n    default Options options() {\n        return getProvider(Options.class, Options::new);\n    }\n\n    void addPath(Locale locale, Path path);\n\n    void addUrl(Locale locale, URL url);\n}"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "name": "BaseProviders", "file_path": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "superclasses": ["ProviderRegistration"], "methods": ["[Address]address()", "[Ancient]ancient()", "[Animal]animal()", "[App]app()", "[Appliance]appliance()", "[Artist]artist()", "[Australia]australia()", "[Aviation]aviation()", "[Aws]aws()", "[Azure]azure()", "[Barcode]barcode()", "[BloodType]bloodtype()", "[Book]book()", "[Bool]bool()", "[Brand]brand()", "[Business]business()", "[Camera]camera()", "[Cannabis]cannabis()", "[Cat]cat()", "[Chiquito]chiquito()", "[CNPJ]cnpj()", "[Code]code()", "[Coin]coin()", "[Color]color()", "[Commerce]commerce()", "[Community]community()", "[Company]company()", "[Compass]compass()", "[Computer]computer()", "[Construction]construction()", "[Cosmere]cosmere()", "[Country]country()", "[CPF]cpf()", "[CryptoCoin]cryptoCoin()", "[CultureSeries]cultureSeries()", "[Currency]currency()", "[DateAndTime]date()", "[DcComics]dcComics()", "[Demographic]demographic()", "[Device]device()", "[Dog]dog()", "[Domain]domain()", "[DrivingLicense]drivingLicense()", "[Drone]drone()", "[DungeonsAndDragons]dungeonsAndDragons()", "[Educator]educator()", "[ElectricalComponents]electricalComponents()", "[Emoji]emoji()", "[FakeDuration]duration()", "[FamousLastWords]famousLastWords()", "[File]file()", "[Finance]finance()", "[FinancialTerms]financialTerms()", "[FunnyName]funnyName()", "[GarmentSize]garmentSize()", "[Gender]gender()", "[GreekPhilosopher]greekPhilosopher()", "[Hacker]hacker()", "[Hashing]hashing()", "[Hipster]hipster()", "[Hobby]hobby()", "[Hololive]hololive()", "[Horse]horse()", "[House]house()", "[IdNumber]idNumber()", "[Image]image()", "[IndustrySegments]industrySegments()", "[Internet]internet()", "[Job]job()", "[Kpop]kpop()", "[LanguageCode]languageCode()", "[LargeLanguageModel]largeLanguageModel()", "[Locality]locality()", "[Location]location()", "[Lorem]lorem()", "[Marketing]marketing()", "[Matz]matz()", "[Mbti]mbti()", "[Measurement]measurement()", "[Medical]medical()", "[Military]military()", "[Money]money()", "[Mood]mood()", "[Mountain]mountain()", "[Mountaineering]mountaineering()", "[Music]music()", "[Name]name()", "[Nation]nation()", "[NatoPhoneticAlphabet]natoPhoneticAlphabet()", "[Nigeria]nigeria()", "[Number]number()", "[OlympicSport]olympicSport()", "[Passport]passport()", "[PhoneNumber]phoneNumber()", "[Photography]photography()", "[Planet]planet()", "[ProgrammingLanguage]programmingLanguage()", "[Relationship]relationships()", "[Restaurant]restaurant()", "[Robin]robin()", "[RockBand]rockBand()", "[Science]science()", "[SlackEmoji]slackEmoji()", "[Shakespeare]shakespeare()", "[Sip]sip()", "[Size]size()", "[Space]space()", "[Stock]stock()", "[Subscription]subscription()", "[Superhero]superhero()", "[Team]team()", "[Text]text()", "[Time]time()", "[TimeAndDate]timeAndDate()", "[Tire]tire()", "[Transport]transport()", "[Twitter]twitter()", "[Unique]unique()", "[University]university()", "[Vehicle]vehicle()", "[Verb]verb()", "[Weather]weather()", "[Word]word()", "[Yoda]yoda()", "[Zodiac]zodiac()", "[Pronouns]pronouns()"], "method_uris": ["src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Address]address()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Ancient]ancient()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Animal]animal()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[App]app()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Appliance]appliance()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Artist]artist()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Australia]australia()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Aviation]aviation()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Aws]aws()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Azure]azure()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Barcode]barcode()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[BloodType]bloodtype()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Book]book()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Bool]bool()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Brand]brand()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Business]business()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Camera]camera()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Cannabis]cannabis()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Cat]cat()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Chiquito]chiquito()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CNPJ]cnpj()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Code]code()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Coin]coin()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Color]color()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Commerce]commerce()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Community]community()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Company]company()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Compass]compass()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Computer]computer()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Construction]construction()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Cosmere]cosmere()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Country]country()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CPF]cpf()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CryptoCoin]cryptoCoin()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CultureSeries]cultureSeries()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Currency]currency()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DateAndTime]date()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DcComics]dcComics()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Demographic]demographic()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Device]device()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Dog]dog()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Domain]domain()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DrivingLicense]drivingLicense()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Drone]drone()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DungeonsAndDragons]dungeonsAndDragons()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Educator]educator()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[ElectricalComponents]electricalComponents()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Emoji]emoji()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FakeDuration]duration()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FamousLastWords]famousLastWords()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[File]file()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Finance]finance()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FinancialTerms]financialTerms()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FunnyName]funnyName()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[GarmentSize]garmentSize()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Gender]gender()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[GreekPhilosopher]greekPhilosopher()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hacker]hacker()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hashing]hashing()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hipster]hipster()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hobby]hobby()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hololive]hololive()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Horse]horse()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[House]house()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[IdNumber]idNumber()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Image]image()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[IndustrySegments]industrySegments()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Internet]internet()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Job]job()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Kpop]kpop()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[LanguageCode]languageCode()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[LargeLanguageModel]largeLanguageModel()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Locality]locality()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Location]location()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Lorem]lorem()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Marketing]marketing()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Matz]matz()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mbti]mbti()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Measurement]measurement()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Medical]medical()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Military]military()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Money]money()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mood]mood()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mountain]mountain()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mountaineering]mountaineering()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Music]music()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Name]name()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Nation]nation()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[NatoPhoneticAlphabet]natoPhoneticAlphabet()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Nigeria]nigeria()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Number]number()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[OlympicSport]olympicSport()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Passport]passport()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[PhoneNumber]phoneNumber()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Photography]photography()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Planet]planet()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[ProgrammingLanguage]programmingLanguage()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Relationship]relationships()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Restaurant]restaurant()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Robin]robin()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[RockBand]rockBand()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Science]science()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[SlackEmoji]slackEmoji()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Shakespeare]shakespeare()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Sip]sip()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Size]size()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Space]space()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Stock]stock()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Subscription]subscription()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Superhero]superhero()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Team]team()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Text]text()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Time]time()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[TimeAndDate]timeAndDate()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Tire]tire()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Transport]transport()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Twitter]twitter()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Unique]unique()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[University]university()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Vehicle]vehicle()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Verb]verb()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Weather]weather()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Word]word()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Yoda]yoda()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Zodiac]zodiac()", "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Pronouns]pronouns()"], "overrides": null, "attributes": null, "class_docstring": "\nThe interface to register providers for {@link BaseFaker}.\n", "original_string": "public interface BaseProviders extends ProviderRegistration {\n\n    default Address address() {\n        return getProvider(Address.class, Address::new);\n    }\n\n    default Ancient ancient() {\n        return getProvider(Ancient.class, Ancient::new);\n    }\n\n    default Animal animal() {\n        return getProvider(Animal.class, Animal::new);\n    }\n\n    default App app() {\n        return getProvider(App.class, App::new);\n    }\n\n    default Appliance appliance() {\n        return getProvider(Appliance.class, Appliance::new);\n    }\n\n    default Artist artist() {\n        return getProvider(Artist.class, Artist::new);\n    }\n\n    default Australia australia() {\n        return getProvider(Australia.class, Australia::new);\n    }\n\n    default Aviation aviation() {\n        return getProvider(Aviation.class, Aviation::new);\n    }\n\n    default Aws aws() {\n        return getProvider(Aws.class, Aws::new);\n    }\n\n    default Azure azure() {\n        return getProvider(Azure.class, Azure::new);\n    }\n\n    default Barcode barcode() {\n        return getProvider(Barcode.class, Barcode::new);\n    }\n\n    default BloodType bloodtype() {\n        return getProvider(BloodType.class, BloodType::new);\n    }\n\n    default Book book() {\n        return getProvider(Book.class, Book::new);\n    }\n\n    default Bool bool() {\n        return getProvider(Bool.class, Bool::new);\n    }\n\n    default Brand brand() {\n        return getProvider(Brand.class, Brand::new);\n    }\n\n    default Business business() {\n        return getProvider(Business.class, Business::new);\n    }\n\n    default Camera camera() {\n        return getProvider(Camera.class, Camera::new);\n    }\n\n    default Cannabis cannabis() {\n        return getProvider(Cannabis.class, Cannabis::new);\n    }\n\n    default Cat cat() {\n        return getProvider(Cat.class, Cat::new);\n    }\n\n    default Chiquito chiquito() {\n        return getProvider(Chiquito.class, Chiquito::new);\n    }\n\n    default CNPJ cnpj() {\n        return getProvider(CNPJ.class, CNPJ::new);\n    }\n\n    default Code code() {\n        return getProvider(Code.class, Code::new);\n    }\n\n    default Coin coin() {\n        return getProvider(Coin.class, Coin::new);\n    }\n\n    default Color color() {\n        return getProvider(Color.class, Color::new);\n    }\n\n    default Commerce commerce() {\n        return getProvider(Commerce.class, Commerce::new);\n    }\n\n    default Community community() {\n        return getProvider(Community.class, Community::new);\n    }\n\n    default Company company() {\n        return getProvider(Company.class, Company::new);\n    }\n\n    default Compass compass() {\n        return getProvider(Compass.class, Compass::new);\n    }\n\n    default Computer computer() {\n        return getProvider(Computer.class, Computer::new);\n    }\n\n    default Construction construction() {\n        return getProvider(Construction.class, Construction::new);\n    }\n\n    default Cosmere cosmere() {\n        return getProvider(Cosmere.class, Cosmere::new);\n    }\n\n    default Country country() {\n        return getProvider(Country.class, Country::new);\n    }\n\n    default CPF cpf() {\n        return getProvider(CPF.class, CPF::new);\n    }\n\n    default CryptoCoin cryptoCoin() {\n        return getProvider(CryptoCoin.class, CryptoCoin::new);\n    }\n\n    default CultureSeries cultureSeries() {\n        return getProvider(CultureSeries.class, CultureSeries::new);\n    }\n\n    default Currency currency() {\n        return getProvider(Currency.class, Currency::new);\n    }\n\n    default DateAndTime date() {\n        return getProvider(DateAndTime.class, DateAndTime::new);\n    }\n\n    default DcComics dcComics() {\n        return getProvider(DcComics.class, DcComics::new);\n    }\n\n    default Demographic demographic() {\n        return getProvider(Demographic.class, Demographic::new);\n    }\n\n    default Device device() {\n        return getProvider(Device.class, Device::new);\n    }\n\n    default Dog dog() {\n        return getProvider(Dog.class, Dog::new);\n    }\n\n    default Domain domain() {\n        return getProvider(Domain.class, Domain::new);\n    }\n\n    default DrivingLicense drivingLicense() {\n        return getProvider(DrivingLicense.class, DrivingLicense::new);\n    }\n\n    default Drone drone() {\n        return getProvider(Drone.class, Drone::new);\n    }\n\n    default DungeonsAndDragons dungeonsAndDragons() {\n        return getProvider(DungeonsAndDragons.class, DungeonsAndDragons::new);\n    }\n\n    default Educator educator() {\n        return getProvider(Educator.class, Educator::new);\n    }\n\n    default ElectricalComponents electricalComponents() {\n        return getProvider(ElectricalComponents.class, ElectricalComponents::new);\n    }\n\n    default Emoji emoji() {\n        return getProvider(Emoji.class, Emoji::new);\n    }\n\n    default FakeDuration duration() {\n        return getProvider(FakeDuration.class, FakeDuration::new);\n    }\n\n    default FamousLastWords famousLastWords() {\n        return getProvider(FamousLastWords.class, FamousLastWords::new);\n    }\n\n    default File file() {\n        return getProvider(File.class, File::new);\n    }\n\n    default Finance finance() {\n        return getProvider(Finance.class, Finance::new);\n    }\n\n    default FinancialTerms financialTerms() {\n        return getProvider(FinancialTerms.class, FinancialTerms::new);\n    }\n\n    default FunnyName funnyName() {\n        return getProvider(FunnyName.class, FunnyName::new);\n    }\n\n    default GarmentSize garmentSize() {\n        return getProvider(GarmentSize.class, GarmentSize::new);\n    }\n\n    default Gender gender() {\n        return getProvider(Gender.class, Gender::new);\n    }\n\n    default GreekPhilosopher greekPhilosopher() {\n        return getProvider(GreekPhilosopher.class, GreekPhilosopher::new);\n    }\n\n    default Hacker hacker() {\n        return getProvider(Hacker.class, Hacker::new);\n    }\n\n    default Hashing hashing() {\n        return getProvider(Hashing.class, Hashing::new);\n    }\n\n    default Hipster hipster() {\n        return getProvider(Hipster.class, Hipster::new);\n    }\n\n    default Hobby hobby() {\n        return getProvider(Hobby.class, Hobby::new);\n    }\n\n    default Hololive hololive() {\n        return getProvider(Hololive.class, Hololive::new);\n    }\n\n    default Horse horse() {\n        return getProvider(Horse.class, Horse::new);\n    }\n\n    default House house() {\n        return getProvider(House.class, House::new);\n    }\n\n    default IdNumber idNumber() {\n        return getProvider(IdNumber.class, IdNumber::new);\n    }\n\n    default Image image() {\n        return getProvider(Image.class, Image::new);\n    }\n\n    default IndustrySegments industrySegments() {\n        return getProvider(IndustrySegments.class, IndustrySegments::new);\n    }\n\n    default Internet internet() {\n        return getProvider(Internet.class, Internet::new);\n    }\n\n    default Job job() {\n        return getProvider(Job.class, Job::new);\n    }\n\n    default Kpop kpop() {\n        return getProvider(Kpop.class, Kpop::new);\n    }\n\n    default LanguageCode languageCode() {\n        return getProvider(LanguageCode.class, LanguageCode::new);\n    }\n\n    default LargeLanguageModel largeLanguageModel() {\n        return getProvider(LargeLanguageModel.class, LargeLanguageModel::new);\n    }\n\n    default Locality locality() {\n        return getProvider(Locality.class, Locality::new);\n    }\n\n    default Location location() {\n        return getProvider(Location.class, Location::new);\n    }\n\n    default Lorem lorem() {\n        return getProvider(Lorem.class, Lorem::new);\n    }\n\n    default Marketing marketing() {\n        return getProvider(Marketing.class, Marketing::new);\n    }\n\n    default Matz matz() {\n        return getProvider(Matz.class, Matz::new);\n    }\n\n    default Mbti mbti() {\n        return getProvider(Mbti.class, Mbti::new);\n    }\n\n    default Measurement measurement() {\n        return getProvider(Measurement.class, Measurement::new);\n    }\n\n    default Medical medical() {\n        return getProvider(Medical.class, Medical::new);\n    }\n\n    default Military military() {\n        return getProvider(Military.class, Military::new);\n    }\n\n    default Money money() {\n        return getProvider(Money.class, Money::new);\n    }\n\n    default Mood mood() {\n        return getProvider(Mood.class, Mood::new);\n    }\n\n    default Mountain mountain() {\n        return getProvider(Mountain.class, Mountain::new);\n    }\n\n    default Mountaineering mountaineering() {\n        return getProvider(Mountaineering.class, Mountaineering::new);\n    }\n\n    default Music music() {\n        return getProvider(Music.class, Music::new);\n    }\n\n    default Name name() {\n        return getProvider(Name.class, Name::new);\n    }\n\n    default Nation nation() {\n        return getProvider(Nation.class, Nation::new);\n    }\n\n    default NatoPhoneticAlphabet natoPhoneticAlphabet() {\n        return getProvider(NatoPhoneticAlphabet.class, NatoPhoneticAlphabet::new);\n    }\n\n    default Nigeria nigeria() {\n        return getProvider(Nigeria.class, Nigeria::new);\n    }\n\n    default Number number() {\n        return getProvider(Number.class, Number::new);\n    }\n\n    default OlympicSport olympicSport() {\n        return getProvider(OlympicSport.class, OlympicSport::new);\n    }\n\n    default Passport passport() {\n        return getProvider(Passport.class, Passport::new);\n    }\n\n    default PhoneNumber phoneNumber() {\n        return getProvider(PhoneNumber.class, PhoneNumber::new);\n    }\n\n    default Photography photography() {\n        return getProvider(Photography.class, Photography::new);\n    }\n\n    default Planet planet() {\n        return getProvider(Planet.class, Planet::new);\n    }\n\n    default ProgrammingLanguage programmingLanguage() {\n        return getProvider(ProgrammingLanguage.class, ProgrammingLanguage::new);\n    }\n\n    default Relationship relationships() {\n        return getProvider(Relationship.class, Relationship::new);\n    }\n\n    default Restaurant restaurant() {\n        return getProvider(Restaurant.class, Restaurant::new);\n    }\n\n    default Robin robin() {\n        return getProvider(Robin.class, Robin::new);\n    }\n\n    default RockBand rockBand() {\n        return getProvider(RockBand.class, RockBand::new);\n    }\n\n    default Science science() {\n        return getProvider(Science.class, Science::new);\n    }\n\n    default SlackEmoji slackEmoji() {\n        return getProvider(SlackEmoji.class, SlackEmoji::new);\n    }\n\n    default Shakespeare shakespeare() {\n        return getProvider(Shakespeare.class, Shakespeare::new);\n    }\n\n    default Sip sip() {\n        return getProvider(Sip.class, Sip::new);\n    }\n\n    default Size size() {\n        return getProvider(Size.class, Size::new);\n    }\n\n    default Space space() {\n        return getProvider(Space.class, Space::new);\n    }\n\n    default Stock stock() {\n        return getProvider(Stock.class, Stock::new);\n    }\n\n    default Subscription subscription() {\n        return getProvider(Subscription.class, Subscription::new);\n    }\n\n    default Superhero superhero() {\n        return getProvider(Superhero.class, Superhero::new);\n    }\n\n    default Team team() {\n        return getProvider(Team.class, Team::new);\n    }\n\n    default Text text() {\n        return getProvider(Text.class, Text::new);\n    }\n\n    default Time time() {\n        return getProvider(Time.class, Time::new);\n    }\n\n    default TimeAndDate timeAndDate() {\n        return getProvider(TimeAndDate.class, TimeAndDate::new);\n    }\n\n    default Tire tire() {\n        return getProvider(Tire.class, Tire::new);\n    }\n\n    default Transport transport() {\n        return getProvider(Transport.class, Transport::new);\n    }\n\n    default Twitter twitter() {\n        return getProvider(Twitter.class, Twitter::new);\n    }\n\n    default Unique unique() {\n        return getProvider(Unique.class, Unique::new);\n    }\n\n    default University university() {\n        return getProvider(University.class, University::new);\n    }\n\n    default Vehicle vehicle() {\n        return getProvider(Vehicle.class, Vehicle::new);\n    }\n\n    default Verb verb() {\n        return getProvider(Verb.class, Verb::new);\n    }\n\n    default Weather weather() {\n        return getProvider(Weather.class, Weather::new);\n    }\n\n    default Word word() {\n        return getProvider(Word.class, Word::new);\n    }\n\n    default Yoda yoda() {\n        return getProvider(Yoda.class, Yoda::new);\n    }\n\n    default Zodiac zodiac() {\n        return getProvider(Zodiac.class, Zodiac::new);\n    }\n\n    default Pronouns pronouns() {\n        return getProvider(Pronouns.class, Pronouns::new);\n    }\n\n}"}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "name": "SportProviders", "file_path": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "superclasses": ["ProviderRegistration"], "methods": ["[Baseball]baseball()", "[Basketball]basketball()", "[Chess]chess()", "[Cricket]cricket()", "[EnglandFootBall]englandfootball()", "[Football]football()", "[Formula1]formula1()", "[Volleyball]volleyball()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Baseball]baseball()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Basketball]basketball()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Chess]chess()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Cricket]cricket()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[EnglandFootBall]englandfootball()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Football]football()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Formula1]formula1()", "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Volleyball]volleyball()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface SportProviders extends ProviderRegistration {\n    default Baseball baseball() {\n        return getProvider(Baseball.class, Baseball::new);\n    }\n\n    default Basketball basketball() {\n        return getProvider(Basketball.class, Basketball::new);\n    }\n\n    default Chess chess() {\n        return getProvider(Chess.class, Chess::new);\n    }\n\n    default Cricket cricket() {\n        return getProvider(Cricket.class, Cricket::new);\n    }\n\n    default EnglandFootBall englandfootball() {\n        return getProvider(EnglandFootBall.class, EnglandFootBall::new);\n    }\n\n    default Football football() {\n        return getProvider(Football.class, Football::new);\n    }\n\n    default Formula1 formula1() {\n        return getProvider(Formula1.class, Formula1::new);\n    }\n\n    default Volleyball volleyball() {\n        return getProvider(Volleyball.class, Volleyball::new);\n    }\n\n}"}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "name": "VideoGameProviders", "file_path": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "superclasses": ["ProviderRegistration"], "methods": ["[Battlefield1]battlefield1()", "[ClashOfClans]clashOfClans()", "[Control]control()", "[DarkSouls]darkSouls()", "[Dota2]dota2()", "[EldenRing]eldenRing()", "[ElderScrolls]elderScrolls()", "[Esports]esports()", "[Fallout]fallout()", "[FinalFantasyXIV]finalFantasyXIV()", "[HalfLife]halfLife()", "[Hearthstone]hearthstone()", "[HeroesOfTheStorm]heroesOfTheStorm()", "[LeagueOfLegends]leagueOfLegends()", "[MarvelSnap]marvelSnap()", "[MassEffect]massEffect()", "[Minecraft]minecraft()", "[Myst]myst()", "[Overwatch]overwatch()", "[RedDeadRedemption2]redDeadRedemption2()", "[SonicTheHedgehog]sonicTheHedgehog()", "[SoulKnight]soulKnight()", "[StarCraft]starCraft()", "[StreetFighter]streetFighter()", "[SuperMario]superMario()", "[SuperSmashBros]superSmashBros()", "[Touhou]touhou()", "[VideoGame]videoGame()", "[WarhammerFantasy]warhammerFantasy()", "[WorldOfWarcraft]worldOfWarcraft()", "[Zelda]zelda()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Battlefield1]battlefield1()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[ClashOfClans]clashOfClans()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Control]control()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[DarkSouls]darkSouls()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Dota2]dota2()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[EldenRing]eldenRing()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[ElderScrolls]elderScrolls()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Esports]esports()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Fallout]fallout()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[FinalFantasyXIV]finalFantasyXIV()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[HalfLife]halfLife()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Hearthstone]hearthstone()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[HeroesOfTheStorm]heroesOfTheStorm()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[LeagueOfLegends]leagueOfLegends()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[MarvelSnap]marvelSnap()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[MassEffect]massEffect()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Minecraft]minecraft()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Myst]myst()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Overwatch]overwatch()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[RedDeadRedemption2]redDeadRedemption2()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SonicTheHedgehog]sonicTheHedgehog()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SoulKnight]soulKnight()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[StarCraft]starCraft()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[StreetFighter]streetFighter()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SuperMario]superMario()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SuperSmashBros]superSmashBros()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Touhou]touhou()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[VideoGame]videoGame()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[WarhammerFantasy]warhammerFantasy()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[WorldOfWarcraft]worldOfWarcraft()", "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Zelda]zelda()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface VideoGameProviders extends ProviderRegistration {\n    default Battlefield1 battlefield1() {\n        return getProvider(Battlefield1.class, Battlefield1::new);\n    }\n\n    default ClashOfClans clashOfClans() {\n        return getProvider(ClashOfClans.class, ClashOfClans::new);\n    }\n\n    default Control control() {\n        return getProvider(Control.class, Control::new);\n    }\n\n    default DarkSouls darkSouls() {\n        return getProvider(DarkSouls.class, DarkSouls::new);\n    }\n\n    default Dota2 dota2() {\n        return getProvider(Dota2.class, Dota2::new);\n    }\n\n    default EldenRing eldenRing() {\n        return getProvider(EldenRing.class, EldenRing::new);\n    }\n\n    default ElderScrolls elderScrolls() {\n        return getProvider(ElderScrolls.class, ElderScrolls::new);\n    }\n\n    default Esports esports() {\n        return getProvider(Esports.class, Esports::new);\n    }\n\n    default Fallout fallout() {\n        return getProvider(Fallout.class, Fallout::new);\n    }\n\n    default FinalFantasyXIV finalFantasyXIV() {\n        return getProvider(FinalFantasyXIV.class, FinalFantasyXIV::new);\n    }\n\n    default HalfLife halfLife() {\n        return getProvider(HalfLife.class, HalfLife::new);\n    }\n\n    default Hearthstone hearthstone() {\n        return getProvider(Hearthstone.class, Hearthstone::new);\n    }\n\n    default HeroesOfTheStorm heroesOfTheStorm() {\n        return getProvider(HeroesOfTheStorm.class, HeroesOfTheStorm::new);\n    }\n\n    default LeagueOfLegends leagueOfLegends() {\n        return getProvider(LeagueOfLegends.class, LeagueOfLegends::new);\n    }\n\n    default MarvelSnap marvelSnap() {\n        return getProvider(MarvelSnap.class, MarvelSnap::new);\n    }\n\n    default MassEffect massEffect() {\n        return getProvider(MassEffect.class, MassEffect::new);\n    }\n\n    default Minecraft minecraft() {\n        return getProvider(Minecraft.class, Minecraft::new);\n    }\n\n    default Myst myst() {\n        return getProvider(Myst.class, Myst::new);\n    }\n\n    default Overwatch overwatch() {\n        return getProvider(Overwatch.class, Overwatch::new);\n    }\n\n    default RedDeadRedemption2 redDeadRedemption2() {\n        return getProvider(RedDeadRedemption2.class, RedDeadRedemption2::new);\n    }\n\n    default SonicTheHedgehog sonicTheHedgehog() {\n        return getProvider(SonicTheHedgehog.class, SonicTheHedgehog::new);\n    }\n\n    default SoulKnight soulKnight() {\n        return getProvider(SoulKnight.class, SoulKnight::new);\n    }\n\n    default StarCraft starCraft() {\n        return getProvider(StarCraft.class, StarCraft::new);\n    }\n\n    default StreetFighter streetFighter() {\n        return getProvider(StreetFighter.class, StreetFighter::new);\n    }\n\n    default SuperMario superMario() {\n        return getProvider(SuperMario.class, SuperMario::new);\n    }\n\n    default SuperSmashBros superSmashBros() {\n        return getProvider(SuperSmashBros.class, SuperSmashBros::new);\n    }\n\n    default Touhou touhou() {\n        return getProvider(Touhou.class, Touhou::new);\n    }\n\n    default VideoGame videoGame() {\n        return getProvider(VideoGame.class, VideoGame::new);\n    }\n\n    default WarhammerFantasy warhammerFantasy() {\n        return getProvider(WarhammerFantasy.class, WarhammerFantasy::new);\n    }\n\n    default WorldOfWarcraft worldOfWarcraft() {\n        return getProvider(WorldOfWarcraft.class, WorldOfWarcraft::new);\n    }\n\n    default Zelda zelda() {\n        return getProvider(Zelda.class, Zelda::new);\n    }\n}"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "name": "HealthcareProviders", "file_path": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java", "superclasses": ["ProviderRegistration"], "methods": ["[CareProvider]careProvider()", "[Disease]disease()", "[Medication]medication()", "[MedicalProcedure]medicalProcedure()", "[Observation]observation()"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[CareProvider]careProvider()", "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[Disease]disease()", "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[Medication]medication()", "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[MedicalProcedure]medicalProcedure()", "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[Observation]observation()"], "overrides": null, "attributes": null, "class_docstring": "\n@since 2.3.0\n", "original_string": "public interface HealthcareProviders extends ProviderRegistration {\n\n    default CareProvider careProvider() {\n        return getProvider(CareProvider.class, CareProvider::new);\n    }\n\n    default Disease disease() {\n        return getProvider(Disease.class, Disease::new);\n    }\n\n    default Medication medication() {\n        return getProvider(Medication.class, Medication::new);\n    }\n\n    default MedicalProcedure medicalProcedure() {\n        return getProvider(MedicalProcedure.class, MedicalProcedure::new);\n    }\n\n    default Observation observation() {\n        return getProvider(Observation.class, Observation::new);\n    }\n}"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "name": "EntertainmentProviders", "file_path": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "superclasses": ["ProviderRegistration"], "methods": ["[AquaTeenHungerForce]aquaTeenHungerForce()", "[Avatar]avatar()", "[BackToTheFuture]backToTheFuture()", "[Babylon5]babylon5()", "[BigBangTheory]bigBangTheory()", "[Boardgame]boardgame()", "[BojackHorseman]bojackHorseman()", "[BossaNova]bossaNova()", "[BreakingBad]breakingBad()", "[BrooklynNineNine]brooklynNineNine()", "[Buffy]buffy()", "[ChuckNorris]chuckNorris()", "[CowboyBebop]cowboyBebop()", "[Departed]departed()", "[DetectiveConan]detectiveConan()", "[DoctorWho]doctorWho()", "[Doraemon]doraemon()", "[DragonBall]dragonBall()", "[DumbAndDumber]dumbAndDumber()", "[Dune]dune()", "[FamilyGuy]familyGuy()", "[FinalSpace]finalSpace()", "[FreshPrinceOfBelAir]freshPrinceOfBelAir()", "[Friends]friends()", "[FullmetalAlchemist]fullMetalAlchemist()", "[Futurama]futurama()", "[GameOfThrones]gameOfThrones()", "[Ghostbusters]ghostbusters()", "[GratefulDead]gratefulDead()", "[HarryPotter]harryPotter()", "[HeyArnold]heyArnold()", "[HitchhikersGuideToTheGalaxy]hitchhikersGuideToTheGalaxy()", "[Hobbit]hobbit()", "[HowIMetYourMother]howIMetYourMother()", "[HowToTrainYourDragon]howToTrainYourDragon()", "[Joke]joke()", "[Kaamelott]kaamelott()", "[Lebowski]lebowski()", "[LordOfTheRings]lordOfTheRings()", "[MoneyHeist]moneyHeist()", "[Movie]movie()", "[Naruto]naruto()", "[NewGirl]newGirl()", "[OnePiece]onePiece()", "[OscarMovie]oscarMovie()", "[Pokemon]pokemon()", "[PrincessBride]princessBride()", "[ResidentEvil]residentEvil()", "[RickAndMorty]rickAndMorty()", "[RuPaulDragRace]ruPaulDragRace()", "[Seinfeld]seinfeld()", "[Show]show()", "[SiliconValley]siliconValley()", "[Simpsons]simpsons()", "[SouthPark]southPark()", "[Spongebob]spongebob()", "[Stargate]stargate()", "[StarTrek]starTrek()", "[StarWars]starWars()", "[StrangerThings]strangerThings()", "[StudioGhibli]studioGhibli()", "[Suits]suits()", "[Supernatural]supernatural()", "[SwordArtOnline]swordArtOnline()", "[TheExpanse]theExpanse()", "[TheItCrowd]theItCrowd()", "[TheKingkillerChronicle]theKingkillerChronicle()", "[TheRoom]theRoom()", "[TheThickOfIt]theThickOfIt()", "[TheVentureBros]theVentureBros()", "[Tron]tron()", "[TwinPeaks]twinPeaks()", "[VForVendetta]vForVendetta()", "[Witcher]witcher()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[AquaTeenHungerForce]aquaTeenHungerForce()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Avatar]avatar()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BackToTheFuture]backToTheFuture()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Babylon5]babylon5()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BigBangTheory]bigBangTheory()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Boardgame]boardgame()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BojackHorseman]bojackHorseman()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BossaNova]bossaNova()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BreakingBad]breakingBad()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BrooklynNineNine]brooklynNineNine()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Buffy]buffy()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[ChuckNorris]chuckNorris()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[CowboyBebop]cowboyBebop()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Departed]departed()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DetectiveConan]detectiveConan()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DoctorWho]doctorWho()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Doraemon]doraemon()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DragonBall]dragonBall()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DumbAndDumber]dumbAndDumber()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Dune]dune()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FamilyGuy]familyGuy()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FinalSpace]finalSpace()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FreshPrinceOfBelAir]freshPrinceOfBelAir()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Friends]friends()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FullmetalAlchemist]fullMetalAlchemist()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Futurama]futurama()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[GameOfThrones]gameOfThrones()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Ghostbusters]ghostbusters()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[GratefulDead]gratefulDead()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HarryPotter]harryPotter()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HeyArnold]heyArnold()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HitchhikersGuideToTheGalaxy]hitchhikersGuideToTheGalaxy()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Hobbit]hobbit()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HowIMetYourMother]howIMetYourMother()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HowToTrainYourDragon]howToTrainYourDragon()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Joke]joke()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Kaamelott]kaamelott()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Lebowski]lebowski()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[LordOfTheRings]lordOfTheRings()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[MoneyHeist]moneyHeist()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Movie]movie()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Naruto]naruto()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[NewGirl]newGirl()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[OnePiece]onePiece()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[OscarMovie]oscarMovie()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Pokemon]pokemon()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[PrincessBride]princessBride()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[ResidentEvil]residentEvil()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[RickAndMorty]rickAndMorty()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[RuPaulDragRace]ruPaulDragRace()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Seinfeld]seinfeld()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Show]show()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[SiliconValley]siliconValley()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Simpsons]simpsons()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[SouthPark]southPark()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Spongebob]spongebob()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Stargate]stargate()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StarTrek]starTrek()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StarWars]starWars()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StrangerThings]strangerThings()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StudioGhibli]studioGhibli()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Suits]suits()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Supernatural]supernatural()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[SwordArtOnline]swordArtOnline()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheExpanse]theExpanse()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheItCrowd]theItCrowd()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheKingkillerChronicle]theKingkillerChronicle()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheRoom]theRoom()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheThickOfIt]theThickOfIt()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheVentureBros]theVentureBros()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Tron]tron()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TwinPeaks]twinPeaks()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[VForVendetta]vForVendetta()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Witcher]witcher()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface EntertainmentProviders extends ProviderRegistration {\n    default AquaTeenHungerForce aquaTeenHungerForce() {\n        return getProvider(AquaTeenHungerForce.class, AquaTeenHungerForce::new);\n    }\n\n    default Avatar avatar() {\n        return getProvider(Avatar.class, Avatar::new);\n    }\n\n    default BackToTheFuture backToTheFuture() {\n        return getProvider(BackToTheFuture.class, BackToTheFuture::new);\n    }\n\n    default Babylon5 babylon5() {\n        return getProvider(Babylon5.class, Babylon5::new);\n    }\n\n    default BigBangTheory bigBangTheory() {\n        return getProvider(BigBangTheory.class, BigBangTheory::new);\n    }\n\n    default Boardgame boardgame() {\n        return getProvider(Boardgame.class, Boardgame::new);\n    }\n\n    default BojackHorseman bojackHorseman() {\n        return getProvider(BojackHorseman.class, BojackHorseman::new);\n    }\n\n    default BossaNova bossaNova() {\n        return getProvider(BossaNova.class, BossaNova::new);\n    }\n\n    default BreakingBad breakingBad() {\n        return getProvider(BreakingBad.class, BreakingBad::new);\n    }\n\n    default BrooklynNineNine brooklynNineNine() {\n        return getProvider(BrooklynNineNine.class, BrooklynNineNine::new);\n    }\n\n    default Buffy buffy() {\n        return getProvider(Buffy.class, Buffy::new);\n    }\n\n    default ChuckNorris chuckNorris() {\n        return getProvider(ChuckNorris.class, ChuckNorris::new);\n    }\n\n    default CowboyBebop cowboyBebop() {\n        return getProvider(CowboyBebop.class, CowboyBebop::new);\n    }\n\n    default Departed departed() {\n        return getProvider(Departed.class, Departed::new);\n    }\n\n    default DetectiveConan detectiveConan() {\n        return getProvider(DetectiveConan.class, DetectiveConan::new);\n    }\n\n    default DoctorWho doctorWho() {\n        return getProvider(DoctorWho.class, DoctorWho::new);\n    }\n\n    default Doraemon doraemon() {\n        return getProvider(Doraemon.class, Doraemon::new);\n    }\n\n    default DragonBall dragonBall() {\n        return getProvider(DragonBall.class, DragonBall::new);\n    }\n\n    default DumbAndDumber dumbAndDumber() {\n        return getProvider(DumbAndDumber.class, DumbAndDumber::new);\n    }\n\n    default Dune dune() {\n        return getProvider(Dune.class, Dune::new);\n    }\n\n    default FamilyGuy familyGuy() {\n        return getProvider(FamilyGuy.class, FamilyGuy::new);\n    }\n\n    default FinalSpace finalSpace() {\n        return getProvider(FinalSpace.class, FinalSpace::new);\n    }\n\n    default FreshPrinceOfBelAir freshPrinceOfBelAir() {\n        return getProvider(FreshPrinceOfBelAir.class, FreshPrinceOfBelAir::new);\n    }\n\n    default Friends friends() {\n        return getProvider(Friends.class, Friends::new);\n    }\n\n    default FullmetalAlchemist fullMetalAlchemist() {\n        return getProvider(FullmetalAlchemist.class, FullmetalAlchemist::new);\n    }\n\n    default Futurama futurama() {\n        return getProvider(Futurama.class, Futurama::new);\n    }\n\n    default GameOfThrones gameOfThrones() {\n        return getProvider(GameOfThrones.class, GameOfThrones::new);\n    }\n\n    default Ghostbusters ghostbusters() {\n        return getProvider(Ghostbusters.class, Ghostbusters::new);\n    }\n\n    default GratefulDead gratefulDead() {\n        return getProvider(GratefulDead.class, GratefulDead::new);\n    }\n\n    default HarryPotter harryPotter() {\n        return getProvider(HarryPotter.class, HarryPotter::new);\n    }\n\n    default HeyArnold heyArnold() {\n        return getProvider(HeyArnold.class, HeyArnold::new);\n    }\n\n    default HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy() {\n        return getProvider(\n            HitchhikersGuideToTheGalaxy.class, HitchhikersGuideToTheGalaxy::new);\n    }\n\n    default Hobbit hobbit() {\n        return getProvider(Hobbit.class, Hobbit::new);\n    }\n\n    default HowIMetYourMother howIMetYourMother() {\n        return getProvider(HowIMetYourMother.class, HowIMetYourMother::new);\n    }\n\n    default HowToTrainYourDragon howToTrainYourDragon() {\n        return getProvider(HowToTrainYourDragon.class, HowToTrainYourDragon::new);\n    }\n    \n    default Joke joke() {\n        return getProvider(Joke.class, Joke::new);\n    }\n\n    default Kaamelott kaamelott() {\n        return getProvider(Kaamelott.class, Kaamelott::new);\n    }\n\n    default Lebowski lebowski() {\n        return getProvider(Lebowski.class, Lebowski::new);\n    }\n\n    default LordOfTheRings lordOfTheRings() {\n        return getProvider(LordOfTheRings.class, LordOfTheRings::new);\n    }\n\n    default MoneyHeist moneyHeist() {\n        return getProvider(MoneyHeist.class, MoneyHeist::new);\n    }\n\n    default Movie movie() {\n        return getProvider(Movie.class, Movie::new);\n    }\n\n    default Naruto naruto() {\n        return getProvider(Naruto.class, Naruto::new);\n    }\n\n    default NewGirl newGirl() {\n        return getProvider(NewGirl.class, NewGirl::new);\n    }\n\n    default OnePiece onePiece() {\n        return getProvider(OnePiece.class, OnePiece::new);\n    }\n\n    default OscarMovie oscarMovie() {\n        return getProvider(OscarMovie.class, OscarMovie::new);\n    }\n\n    default Pokemon pokemon() {\n        return getProvider(Pokemon.class, Pokemon::new);\n    }\n\n    default PrincessBride princessBride() {\n        return getProvider(PrincessBride.class, PrincessBride::new);\n    }\n\n    default ResidentEvil residentEvil() {\n        return getProvider(ResidentEvil.class, ResidentEvil::new);\n    }\n\n    default RickAndMorty rickAndMorty() {\n        return getProvider(RickAndMorty.class, RickAndMorty::new);\n    }\n\n    default RuPaulDragRace ruPaulDragRace() {\n        return getProvider(RuPaulDragRace.class, RuPaulDragRace::new);\n    }\n\n    default Seinfeld seinfeld() {\n        return getProvider(Seinfeld.class, Seinfeld::new);\n    }\n\n    default Show show() {\n        return getProvider(Show.class, Show::new);\n    }\n\n    default SiliconValley siliconValley() {\n        return getProvider(SiliconValley.class, SiliconValley::new);\n    }\n\n    default Simpsons simpsons() {\n        return getProvider(Simpsons.class, Simpsons::new);\n    }\n\n    default SouthPark southPark() {\n        return getProvider(SouthPark.class, SouthPark::new);\n    }\n\n    default Spongebob spongebob() {\n        return getProvider(Spongebob.class, Spongebob::new);\n    }\n\n    default Stargate stargate() {\n        return getProvider(Stargate.class, Stargate::new);\n    }\n\n    default StarTrek starTrek() {\n        return getProvider(StarTrek.class, StarTrek::new);\n    }\n\n    default StarWars starWars() {\n        return getProvider(StarWars.class, StarWars::new);\n    }\n\n    default StrangerThings strangerThings() {\n        return getProvider(StrangerThings.class, StrangerThings::new);\n    }\n\n    default StudioGhibli studioGhibli() {\n        return getProvider(StudioGhibli.class, StudioGhibli::new);\n    }\n\n    default Suits suits() {\n        return getProvider(Suits.class, Suits::new);\n    }\n\n    default Supernatural supernatural() {\n        return getProvider(Supernatural.class, Supernatural::new);\n    }\n\n    default SwordArtOnline swordArtOnline() {\n        return getProvider(SwordArtOnline.class, SwordArtOnline::new);\n    }\n\n    default TheExpanse theExpanse() {\n        return getProvider(TheExpanse.class, TheExpanse::new);\n    }\n\n    default TheItCrowd theItCrowd() {\n        return getProvider(TheItCrowd.class, TheItCrowd::new);\n    }\n\n    default TheKingkillerChronicle theKingkillerChronicle() {\n        return getProvider(TheKingkillerChronicle.class, TheKingkillerChronicle::new);\n    }\n\n    default TheRoom theRoom() {\n        return getProvider(TheRoom.class, TheRoom::new);\n    }\n\n    default TheThickOfIt theThickOfIt() {\n        return getProvider(TheThickOfIt.class, TheThickOfIt::new);\n    }\n\n    default TheVentureBros theVentureBros() {\n        return getProvider(TheVentureBros.class, TheVentureBros::new);\n    }\n\n    default Tron tron() {\n        return getProvider(Tron.class, Tron::new);\n    }\n\n    default TwinPeaks twinPeaks() {\n        return getProvider(TwinPeaks.class, TwinPeaks::new);\n    }\n\n    default VForVendetta vForVendetta() {\n        return getProvider(VForVendetta.class, VForVendetta::new);\n    }\n\n    default Witcher witcher() {\n        return getProvider(Witcher.class, Witcher::new);\n    }\n}"}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "name": "FoodProviders", "file_path": "src/main/java/net/datafaker/providers/food/FoodProviders.java", "superclasses": ["ProviderRegistration"], "methods": ["[Beer]beer()", "[Coffee]coffee()", "[Dessert]dessert()", "[Food]food()", "[Tea]tea()"], "method_uris": ["src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Beer]beer()", "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Coffee]coffee()", "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Dessert]dessert()", "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Food]food()", "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Tea]tea()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface FoodProviders extends ProviderRegistration {\n    default Beer beer() {\n        return getProvider(Beer.class, Beer::new);\n    }\n\n    default Coffee coffee() {\n        return getProvider(Coffee.class, Coffee::new);\n    }\n\n    default Dessert dessert() {\n        return getProvider(Dessert.class, Dessert::new);\n    }\n\n    default Food food() {\n        return getProvider(Food.class, Food::new);\n    }\n\n    default Tea tea() {\n        return getProvider(Tea.class, Tea::new);\n    }\n\n}"}, {"uris": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator", "name": "IdNumberGenerator", "file_path": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java", "superclasses": [], "methods": ["[String]countryCode()", "[String]generateValid(BaseProviders)", "[String]generateInvalid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[String]generateValid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface IdNumberGenerator {\n    /**\n     * ISO-2 code of the country this generator provides ID numbers for\n     *\n     * @return e.g. \"US\" for America, \"EE\" for Estonia, \"MD\" for Moldova etc.\n     */\n    String countryCode();\n\n    /**\n     * Generates a valid ID number for given country (a.k.a. \"SSN\", \"Personal code\" etc.)\n     */\n    default String generateValid(BaseProviders faker) {\n        return generateValid(faker, new IdNumberRequest(18, 65, ANY)).idNumber();\n    }\n\n    /**\n     * Generates an invalid ID number for given country (a.k.a. \"SSN\", \"Personal code\" etc.)\n     */\n    String generateInvalid(BaseProviders faker);\n\n    /**\n     * Generates a valid ID number for given country corresponding to given criterias (age range, gender etc.)\n     *\n     * @return PersonIdNumber containing a valid combination of ID, Birthday and Gender.\n     * In countries where ID number doesn't contain gender and/or birthday, the latter values are just random.\n     */\n    PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request);\n}"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesInterface.java.FakeValuesInterface", "name": "FakeValuesInterface", "file_path": "src/main/java/net/datafaker/service/FakeValuesInterface.java", "superclasses": [], "methods": ["[Map<String, Object>]get(String)"], "method_uris": ["src/main/java/net/datafaker/service/FakeValuesInterface.java.FakeValuesInterface.[Map<String, Object>]get(String)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface FakeValuesInterface {\n    Map<String, Object> get(String key);\n}"}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field", "name": "Field", "file_path": "src/main/java/net/datafaker/transformations/Field.java", "superclasses": [], "methods": ["[String]getName()", "[OUT]transform(IN)", "[SimpleField<MyObject, MyType>]field(String,Function<MyObject, MyType>)", "[SimpleField<MyObject, MyType>]field(String,Supplier<MyType>)", "[CompositeField<MyObject, MyType>]compositeField(String,Field<MyObject, MyType>[])"], "method_uris": ["src/main/java/net/datafaker/transformations/Field.java.Field.[String]getName()", "src/main/java/net/datafaker/transformations/Field.java.Field.[OUT]transform(IN)", "src/main/java/net/datafaker/transformations/Field.java.Field.[SimpleField<MyObject, MyType>]field(String,Function<MyObject, MyType>)", "src/main/java/net/datafaker/transformations/Field.java.Field.[SimpleField<MyObject, MyType>]field(String,Supplier<MyType>)", "src/main/java/net/datafaker/transformations/Field.java.Field.[CompositeField<MyObject, MyType>]compositeField(String,Field<MyObject, MyType>[])"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Field<IN, OUT> {\n    String getName();\n\n    OUT transform(IN input);\n\n    static <MyObject, MyType> SimpleField<MyObject, MyType> field(\n        String name, Function<MyObject, MyType> transform) {\n        return new SimpleField<>(name, transform);\n    }\n\n    static <MyObject, MyType> SimpleField<MyObject, MyType> field(\n        String name, Supplier<MyType> supplier) {\n        return new SimpleField<>(name, supplier);\n    }\n\n    static <MyObject extends AbstractProvider<?>, MyType>\n    CompositeField<MyObject, MyType> compositeField(\n        String name, Field<MyObject, MyType>[] fields) {\n        return new CompositeField<>(name, fields);\n    }\n\n}"}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "name": "Transformer", "file_path": "src/main/java/net/datafaker/transformations/Transformer.java", "superclasses": [], "methods": ["[OUT]apply(IN,Schema<IN, ?>)", "[OUT]apply(IN,Schema<IN, ?>,long)", "[OUT]generate(Iterable<IN>,Schema<IN, ?>)", "[OUT]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()", "[String]getLineSeparator()", "[String]getElementSeparator()", "[Stream<OUT>]generateStream(Schema<IN, ?>,long)"], "method_uris": ["src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]apply(IN,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]apply(IN,Schema<IN, ?>,long)", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]generate(Iterable<IN>,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]generate(Schema<IN, ?>,int)", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getStartStream(Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getEndStream()", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getLineSeparator()", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getElementSeparator()", "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[Stream<OUT>]generateStream(Schema<IN, ?>,long)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Transformer<IN, OUT> {\n    String LINE_SEPARATOR = System.lineSeparator();\n\n    OUT apply(IN input, Schema<IN, ?> schema);\n\n    default OUT apply(IN input, Schema<IN, ?> schema, long rowId) {\n        // ignore rowId by default\n        return apply(input, schema);\n    }\n\n    OUT generate(Iterable<IN> input, final Schema<IN, ?> schema);\n\n    OUT generate(final Schema<IN, ?> schema, int limit);\n\n\n    String getStartStream(final Schema<IN, ?> schema);\n\n    String getEndStream();\n\n    default String getLineSeparator() {\n        return LINE_SEPARATOR;\n    }\n\n    default String getElementSeparator() {\n        return \"\";\n    }\n\n\n    default Stream<OUT> generateStream(final Schema<IN, ?> schema, long limit) {\n        Item item = new Item(0);\n        return Stream.generate(() -> {\n            StringBuilder res = new StringBuilder();\n            if (item.current == 0) {\n                res.append(getStartStream(schema)).append(getLineSeparator());\n            }\n            res.append(apply(null, schema, item.current));\n\n            if (item.current == limit - 1) {\n                res.append(getLineSeparator()).append(getEndStream());\n            } else {\n                if (!getElementSeparator().isEmpty()) {\n                    res.append(getElementSeparator());\n                }\n            }\n            item.current++;\n            return (OUT) res.toString();\n        }).limit(limit);\n    }\n\n    class Item {\n        private long current;\n\n        public Item(long current) {\n            this.current = current;\n        }\n    }\n\n}"}, {"uris": "src/main/java/net/datafaker/transformations/sql/TriFunction.java.TriFunction", "name": "TriFunction", "file_path": "src/main/java/net/datafaker/transformations/sql/TriFunction.java", "superclasses": [], "methods": ["[R]apply(A,B,C)"], "method_uris": ["src/main/java/net/datafaker/transformations/sql/TriFunction.java.TriFunction.[R]apply(A,B,C)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@FunctionalInterface\npublic interface TriFunction<A, B, C, R> {\n\n    R apply(A a, B b, C c);\n}"}]