[{"strategy": "retry", "code": "\npackage net.datafaker.transformations.sql;\n\nimport net.datafaker.transformations.Schema;\nimport net.datafaker.transformations.SimpleField;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class SqlTransformer_generateStreamTest {\n\n    @Test\n    public void testGenerateStreamWithEmptySchema() {\n        // Given\n        Schema<Object, ?> emptySchema = Schema.of();\n        SqlTransformer<Object> transformer = SqlTransformer.builder().build();\n\n        // When\n        Stream<CharSequence> result = transformer.generateStream(emptySchema, 10);\n\n        // Then\n        assertTrue(result.findAny().isEmpty());\n    }\n\n    @Test\n    public void testGenerateStreamWithBatchMode() {\n        // Given\n        Schema<Object, ?> schema = Schema.of(new SimpleField<>(\"field1\", o -> \"value1\"));\n        SqlTransformer<Object> transformer = SqlTransformer.builder().batch(2).build();\n\n        // When\n        Stream<CharSequence> result = transformer.generateStream(schema, 5);\n\n        // Then\n        assertEquals(3, result.count());\n    }\n\n    @Test\n    public void testGenerateStreamWithoutBatchMode() {\n        // Given\n        Schema<Object, ?> schema = Schema.of(new SimpleField<>(\"field1\", o -> \"value1\"));\n        SqlTransformer<Object> transformer = SqlTransformer.builder().build();\n\n        // When\n        Stream<CharSequence> result = transformer.generateStream(schema, 5);\n\n        // Then\n        assertEquals(5, result.count());\n    }\n}\n"}]