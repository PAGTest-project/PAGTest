[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class MacedonianIdNumber_generateInvalidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().numberBetween(0, 2)).thenReturn(0);\n        when(faker.number().numberBetween(0, 500)).thenReturn(123);\n\n        // When\n        String result = generator.generateInvalid(faker);\n\n        // Then\n        String expectedBasePart = \"010199041123\";\n        int expectedChecksum = (generator.checksum(expectedBasePart) + 1) % 10;\n        assertEquals(expectedBasePart + expectedChecksum, result);\n    }\n}\n"}]