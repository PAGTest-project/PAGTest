[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class RomanianIdNumber_generateValidTest {\n    private RomanianIdNumber romanianIdNumber;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        romanianIdNumber = new RomanianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"19000101123\";\n        String expectedIdNumber = basePart + \"1\"; // Assuming checksum is 1 for simplicity\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender().gender()).thenReturn(gender);\n        when(faker.number().numberBetween(1, 47)).thenReturn(1);\n        when(faker.number().numberBetween(1, 1_000)).thenReturn(123);\n\n        IdNumberRequest request = new IdNumberRequest();\n\n        // When\n        PersonIdNumber result = romanianIdNumber.generateValid(faker, request);\n\n        // Then\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]