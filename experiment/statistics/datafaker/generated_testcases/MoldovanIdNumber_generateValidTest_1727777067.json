[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class MoldovanIdNumber_generateValidTest {\n\n    private MoldovanIdNumber generator;\n    private BaseProviders faker;\n    private IdNumberRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MoldovanIdNumber();\n        faker = mock(BaseProviders.class);\n        request = mock(IdNumberRequest.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(Utils.birthday(faker, request)).thenReturn(birthday);\n        when(Utils.randomGender(faker)).thenReturn('M');\n        when(faker.number().digits(3)).thenReturn(\"123\");\n        when(faker.number().digits(5)).thenReturn(\"45678\");\n\n        // When\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        // Then\n        assertEquals(\"29012312345678\" + generator.checksum(\"29012312345678\"), result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals('M', result.getGender());\n    }\n}\n"}]