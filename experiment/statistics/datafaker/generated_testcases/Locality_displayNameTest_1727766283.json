[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.Faker;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Locale;\nimport java.util.Random;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Locality_displayNameTest {\n    private Locality locality;\n    private Faker faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new Faker();\n        locality = new Locality(faker);\n    }\n\n    @Test\n    public void testDisplayNameWithCountry() {\n        // Mocking a random selection to a known locale with a country\n        String localeWithCountry = \"en-US\";\n        Random mockRandom = new Random(1); // Fixed seed for deterministic result\n        String result = locality.localeStringWithRandom(mockRandom);\n        assertEquals(localeWithCountry, result);\n\n        // Now test displayName with the known locale\n        Locale locale = Locale.forLanguageTag(localeWithCountry);\n        String expectedDisplayName = locale.getDisplayLanguage(Locale.ROOT) + \" (\" + locale.getDisplayCountry(Locale.ROOT) + \")\";\n        assertEquals(expectedDisplayName, locality.displayName());\n    }\n\n    @Test\n    public void testDisplayNameWithoutCountry() {\n        // Mocking a random selection to a known locale without a country\n        String localeWithoutCountry = \"en\";\n        Random mockRandom = new Random(2); // Fixed seed for deterministic result\n        String result = locality.localeStringWithRandom(mockRandom);\n        assertEquals(localeWithoutCountry, result);\n\n        // Now test displayName with the known locale\n        Locale locale = Locale.forLanguageTag(localeWithoutCountry);\n        String expectedDisplayName = locale.getDisplayLanguage(Locale.ROOT);\n        assertEquals(expectedDisplayName, locality.displayName());\n    }\n\n    @Test\n    public void testDisplayNameFallback() {\n        // Mocking a random selection to a locale with an empty display name\n        String localeWithEmptyDisplayName = \"xx\";\n        Random mockRandom = new Random(3); // Fixed seed for deterministic result\n        String result = locality.localeStringWithRandom(mockRandom);\n        assertEquals(localeWithEmptyDisplayName, result);\n\n        // Now test displayName with the known locale\n        String expectedDisplayName = Locale.ENGLISH.getDisplayLanguage(Locale.ROOT);\n        assertEquals(expectedDisplayName, locality.displayName());\n    }\n}\n"}]