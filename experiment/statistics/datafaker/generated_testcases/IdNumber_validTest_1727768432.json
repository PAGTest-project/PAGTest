[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.Faker;\nimport net.datafaker.idnumbers.IdNumberGenerator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Locale;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class IdNumber_validTest {\n\n    private Faker faker;\n    private IdNumber idNumber;\n    private IdNumberGenerator mockGenerator;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new Faker();\n        idNumber = new IdNumber(faker);\n        mockGenerator = Mockito.mock(IdNumberGenerator.class);\n    }\n\n    @Test\n    public void testValidWithCountryProvider() {\n        // Given\n        when(mockGenerator.generateValid(faker)).thenReturn(\"validIdNumber\");\n        idNumber.countryProviders.put(\"US\", mockGenerator);\n        faker.getContext().setLocale(new Locale(\"en\", \"US\"));\n\n        // When\n        String result = idNumber.valid();\n\n        // Then\n        assertEquals(\"validIdNumber\", result);\n    }\n\n    @Test\n    public void testValidWithoutCountryProvider() {\n        // Given\n        faker.getContext().setLocale(new Locale(\"en\", \"UnknownCountry\"));\n\n        // When\n        String result = idNumber.valid();\n\n        // Then\n        assertEquals(faker.numerify(faker.resolve(\"id_number.valid\")), result);\n    }\n}\n"}]