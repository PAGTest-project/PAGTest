[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class BulgarianIdNumber_generateValidTest {\n    private BulgarianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new BulgarianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateValid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1980, 3, 20);\n        Gender gender = Gender.MALE;\n        String basePart = \"800320\";\n        String expectedIdNumber = basePart + \"1\"; // Assuming checksum for \"800320\" is \"1\"\n\n        when(Utils.birthday(faker, Mockito.any(IdNumberRequest.class))).thenReturn(birthday);\n        when(Utils.gender(faker, Mockito.any(IdNumberRequest.class))).thenReturn(gender);\n        when(generator.basePart(faker, birthday, gender)).thenReturn(basePart);\n        when(generator.checksum(basePart)).thenReturn(\"1\");\n\n        // When\n        PersonIdNumber result = generator.generateValid(faker, new IdNumberRequest(0, 0, null));\n\n        // Then\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]