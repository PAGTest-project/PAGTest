[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.when;\n\npublic class MacedonianIdNumber_generateValidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    void generateValid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"010190041001\";\n        String expectedIdNumber = basePart + \"6\"; // checksum for basePart is 6\n\n        when(faker.dateAndTime().birthday()).thenReturn(birthday);\n        when(faker.gender().binaryTypes()).thenReturn(gender.toString());\n        when(faker.number().numberBetween(0, 9)).thenReturn(0);\n        when(faker.number().numberBetween(0, 500)).thenReturn(1);\n\n        IdNumberRequest request = new IdNumberRequest(0, 0, new IdNumberRequest.GenderRequest(gender));\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        assertThat(result.getIdNumber()).isEqualTo(expectedIdNumber);\n        assertThat(result.getBirthday()).isEqualTo(birthday);\n        assertThat(result.getGender()).isEqualTo(gender);\n    }\n}\n"}]