[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Locale;\nimport java.util.function.Supplier;\n\npublic class FakeValuesService_resolveTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private ProviderRegistration root;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        root = new ProviderRegistration() {\n            @Override\n            public FakeValuesService fakeValuesService() {\n                return fakeValuesService;\n            }\n\n            @Override\n            public FakerContext getContext() {\n                return context;\n            }\n\n            @Override\n            public <AP> AP getProvider(String providerClassName) {\n                return null;\n            }\n\n            @Override\n            public <AP> AP getProvider(Class<AP> providerClass, java.util.function.Function<ProviderRegistration, AP> providerFunction) {\n                return null;\n            }\n\n            @Override\n            public String resolve(String expression) {\n                return null;\n            }\n\n            @Override\n            public String resolve(String expression, Supplier<String> exceptionMessage) {\n                return null;\n            }\n\n            @Override\n            public String numerify(String in) {\n                return null;\n            }\n\n            @Override\n            public String letterify(String in) {\n                return null;\n            }\n\n            @Override\n            public String letterify(String in, boolean isUpper) {\n                return null;\n            }\n\n            @Override\n            public String bothify(String in) {\n                return null;\n            }\n\n            @Override\n            public String bothify(String in, boolean isUpper) {\n                return null;\n            }\n\n            @Override\n            public String regexify(String regex) {\n                return null;\n            }\n\n            @Override\n            public String examplify(String regex) {\n                return null;\n            }\n\n            @Override\n            public String templatify(String letterString, char key) {\n                return null;\n            }\n\n            @Override\n            public String templatify(String letterString, java.util.Map<Character, String[]> optionsMap) {\n                return null;\n            }\n\n            @Override\n            public String csv(int rowCount) {\n                return null;\n            }\n\n            @Override\n            public String csv(String expression, char separator, boolean withHeader, int rowCount) {\n                return null;\n            }\n\n            @Override\n            public String json() {\n                return null;\n            }\n\n            @Override\n            public String jsona() {\n                return null;\n            }\n\n            @Override\n            public RandomService random() {\n                return null;\n            }\n\n            @Override\n            public String expression(String expression) {\n                return null;\n            }\n\n            @Override\n            public void addPath(Locale locale, java.nio.file.Path path) {\n            }\n\n            @Override\n            public void addUrl(Locale locale, java.net.URL url) {\n            }\n        };\n    }\n\n    @Test\n    public void testResolveWithValidKey() {\n        String key = \"validKey\";\n        Object current = new Object();\n        Supplier<String> exceptionMessage = () -> \"Exception message\";\n\n        String result = fakeValuesService.resolve(key, current, root, exceptionMessage, context);\n\n        assertNotNull(result);\n        assertEquals(\"Payment processed\", result);\n    }\n\n    @Test\n    public void testResolveWithInvalidKey() {\n        String key = \"invalidKey\";\n        Object current = new Object();\n        Supplier<String> exceptionMessage = () -> \"Exception message\";\n\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.resolve(key, current, root, exceptionMessage, context);\n        });\n\n        assertEquals(\"Exception message\", exception.getMessage());\n    }\n}\n"}]