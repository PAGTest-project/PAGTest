[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.function.Function;\nimport java.util.Map;\nimport java.util.IdentityHashMap;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass BaseFaker_getProviderTest {\n\n    private BaseFaker baseFaker;\n    private Map<Class<?>, AbstractProvider<?>> providersCache;\n\n    @BeforeEach\n    void setUp() {\n        baseFaker = new BaseFaker();\n        providersCache = spy(new IdentityHashMap<>());\n        baseFaker.providersCache = providersCache;\n    }\n\n    @Test\n    void testGetProvider() {\n        // Given\n        Class<AbstractProvider<ProviderRegistration>> clazz = (Class<AbstractProvider<ProviderRegistration>>) (Class<?>) AbstractProvider.class;\n        Function<ProviderRegistration, AbstractProvider<ProviderRegistration>> valueSupplier = mock(Function.class);\n        AbstractProvider<ProviderRegistration> expectedProvider = mock(AbstractProvider.class);\n        when(valueSupplier.apply(any())).thenReturn(expectedProvider);\n\n        // When\n        AbstractProvider<ProviderRegistration> result = baseFaker.getProvider(clazz, valueSupplier);\n\n        // Then\n        assertEquals(expectedProvider, result);\n        verify(providersCache).computeIfAbsent(eq(clazz), any());\n    }\n}\n"}]