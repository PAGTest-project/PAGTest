[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers.pt.br;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil.cpf;\nimport static net.datafaker.idnumbers.pt.br.IdNumberGeneratorPtBrUtil.isCPFValid;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class IdNumberGeneratorPtBrUtil_cpfTest {\n\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        Mockito.when(faker.random().nextInt(9)).thenReturn(1); // Mocking random number generation\n    }\n\n    @Test\n    public void testCpfValidFormatted() {\n        String result = cpf(faker, true, true);\n        assertTrue(isCPFValid(result));\n    }\n\n    @Test\n    public void testCpfValidUnformatted() {\n        String result = cpf(faker, false, true);\n        assertTrue(isCPFValid(result));\n    }\n\n    @Test\n    public void testCpfInvalidFormatted() {\n        String result = cpf(faker, true, false);\n        assertFalse(isCPFValid(result));\n    }\n\n    @Test\n    public void testCpfInvalidUnformatted() {\n        String result = cpf(faker, false, false);\n        assertFalse(isCPFValid(result));\n    }\n}\n"}]