[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class PolishIdNumber_generateInvalidTest {\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        PersonIdNumber.Gender gender = PersonIdNumber.Gender.MALE;\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().randomDigit()).thenReturn(1, 2, 3);\n        when(faker.random().nextInt(5)).thenReturn(2);\n\n        PolishIdNumber polishIdNumber = new PolishIdNumber();\n\n        // When\n        String result = polishIdNumber.generateInvalid(faker);\n\n        // Then\n        int[] expectedDigits = {1, 9, 0, 1, 0, 1, 1, 2, 3, 5};\n        int expectedControlDigit = (10 - (1 + 0 + 3 + (9 + 1 + 5) * 3 + (0 + 2) * 7 + (1 + 3) * 9) % 10) % 10;\n        int expectedInvalidControlDigit = (expectedControlDigit + 1) % 10;\n        StringBuilder expectedPesel = new StringBuilder();\n        for (int digit : expectedDigits) {\n            expectedPesel.append(digit);\n        }\n        expectedPesel.append(expectedInvalidControlDigit);\n\n        assertEquals(expectedPesel.toString(), result);\n    }\n}\n"}]