[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class AlbanianIdNumber_generateValidTest {\n\n    private AlbanianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new AlbanianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        LocalDate birthDate = LocalDate.of(1990, 5, 15);\n        Gender gender = Gender.MALE;\n        IdNumberRequest request = mock(IdNumberRequest.class);\n\n        when(request.getBirthDate()).thenReturn(birthDate);\n        when(request.getGender()).thenReturn(gender);\n        when(faker.number().digits(3)).thenReturn(\"123\");\n\n        // When\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        // Then\n        assertEquals(\"900515123\", result.getIdNumber().substring(0, 9));\n        assertEquals(birthDate, result.getBirthDate());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]