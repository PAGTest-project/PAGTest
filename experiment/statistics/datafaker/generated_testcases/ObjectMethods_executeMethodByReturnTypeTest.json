[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ObjectMethods_executeMethodByReturnTypeTest {\n    private Person person;\n    private PersonName personName;\n\n    @BeforeEach\n    void setUp() {\n        person = new Person();\n        personName = new PersonName();\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeSuccess() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Method ageMethod = Person.class.getMethod(\"age\");\n        ageMethod.setAccessible(true);\n        Object expectedAge = ageMethod.invoke(person);\n\n        Object actualAge = ObjectMethods.executeMethodByReturnType(person, \"int\");\n        assertEquals(expectedAge, actualAge);\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeMethodNotFound() {\n        Object result = ObjectMethods.executeMethodByReturnType(person, \"nonexistentReturnType\");\n        assertNull(result);\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeException() {\n        assertThrows(RuntimeException.class, () -> {\n            ObjectMethods.executeMethodByReturnType(person, \"int\");\n        });\n    }\n\n    // Dummy classes for testing\n    private static class Person {\n        public int age() {\n            throw new RuntimeException(\"Simulated exception\");\n        }\n    }\n\n    private static class PersonName {\n        public String firstName() {\n            return \"John\";\n        }\n\n        public String lastName() {\n            return \"Doe\";\n        }\n    }\n}\n"}]