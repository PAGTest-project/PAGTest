[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.service.RandomService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.net.InetAddress;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class Internet_getPublicIpV4AddressTest {\n\n    private Internet internet;\n    private RandomService randomService;\n\n    @BeforeEach\n    public void setUp() {\n        BaseProviders baseProviders = Mockito.mock(BaseProviders.class);\n        randomService = Mockito.mock(RandomService.class);\n        when(baseProviders.random()).thenReturn(randomService);\n        internet = new Internet(baseProviders);\n    }\n\n    @Test\n    public void testGetPublicIpV4Address() {\n        // Given\n        when(randomService.nextInt(256)).thenReturn(11, 22, 33, 44); // First octet not in PRIVATE_FIRST_OCTET\n        when(randomService.nextInt(256)).thenReturn(55, 66, 77, 88); // Second, Third, Fourth octets\n\n        // When\n        InetAddress result = internet.getPublicIpV4Address();\n\n        // Then\n        assertEquals(\"11.22.33.44\", result.getHostAddress());\n    }\n\n    @Test\n    public void testGetPublicIpV4AddressWithPrivateFirstOctet() {\n        // Given\n        when(randomService.nextInt(256)).thenReturn(10, 127, 169, 192, 172, 22); // First octet in PRIVATE_FIRST_OCTET, then valid first octet\n        when(randomService.nextInt(256)).thenReturn(33, 44, 55, 66); // Second, Third, Fourth octets\n\n        // When\n        InetAddress result = internet.getPublicIpV4Address();\n\n        // Then\n        assertEquals(\"22.33.44.55\", result.getHostAddress());\n    }\n}\n"}]