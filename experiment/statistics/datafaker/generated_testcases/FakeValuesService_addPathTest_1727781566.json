[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.net.MalformedURLException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Locale;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FakeValuesService_addPathTest {\n\n    private FakeValuesService fakeValuesService;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n    }\n\n    @Test\n    void testAddPathSuccess() {\n        Locale locale = Locale.US;\n        Path path = Paths.get(\"src/test/resources/testfile.txt\");\n        assertDoesNotThrow(() -> fakeValuesService.addPath(locale, path));\n    }\n\n    @Test\n    void testAddPathNullPath() {\n        Locale locale = Locale.US;\n        Path path = null;\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"null\\\"\", exception.getMessage());\n    }\n\n    @Test\n    void testAddPathNonExistentFile() {\n        Locale locale = Locale.US;\n        Path path = Paths.get(\"non_existent_file.txt\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"non_existent_file.txt\\\"\", exception.getMessage());\n    }\n\n    @Test\n    void testAddPathDirectory() {\n        Locale locale = Locale.US;\n        Path path = Paths.get(\"src/test/resources\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"src/test/resources\\\"\", exception.getMessage());\n    }\n\n    @Test\n    void testAddPathUnreadableFile() {\n        Locale locale = Locale.US;\n        Path path = Paths.get(\"src/test/resources/unreadable_file.txt\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"src/test/resources/unreadable_file.txt\\\"\", exception.getMessage());\n    }\n\n    @Test\n    void testAddPathMalformedURL() {\n        Locale locale = Locale.US;\n        Path path = Paths.get(\"invalid://path\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertTrue(exception.getMessage().startsWith(\"Failed to read \\\"invalid://path\\\"\"));\n    }\n}\n"}]