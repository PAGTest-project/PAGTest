[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport net.datafaker.providers.base.BaseFaker;\n\npublic class FakeValuesService_fileExpressionTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        fakeValuesService = new FakeValuesService();\n    }\n\n    @Test\n    public void testFileExpressionSuccess() throws IOException {\n        // Given\n        Path tempFile = Files.createTempFile(\"test\", \".txt\");\n        Files.write(tempFile, List.of(\"Hello\", \"World\"));\n\n        // When\n        String result = fakeValuesService.fileExpression(tempFile, new BaseFaker(), context);\n\n        // Then\n        assertEquals(\"Hello\" + System.lineSeparator() + \"World\", result);\n    }\n\n    @Test\n    public void testFileExpressionIOException() {\n        // Given\n        Path nonExistentFile = Path.of(\"nonExistentFile.txt\");\n\n        // When & Then\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.fileExpression(nonExistentFile, new BaseFaker(), context);\n        });\n\n        assertEquals(\"Failed to read \\\"nonExistentFile.txt\\\"\", exception.getMessage());\n    }\n}\n"}]