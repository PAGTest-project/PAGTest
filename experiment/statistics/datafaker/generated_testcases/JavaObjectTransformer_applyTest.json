[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Map;\nimport java.util.IdentityHashMap;\nimport java.util.function.Consumer;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass JavaObjectTransformer_applyTest {\n\n    private static final Map<Schema<Object, ?>, Consumer<Object>> SCHEMA2CONSUMER = new IdentityHashMap<>();\n    private static final Map<Class<?>, Constructor<?>> CLASS2CONSTRUCTOR = new IdentityHashMap<>();\n\n    @Test\n    void testApplyWithRecordClass() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = Schema.of();\n        Class<?> recordClass = MyRecord.class;\n        Constructor<?> recordConstructor = recordClass.getDeclaredConstructor(String.class);\n        CLASS2CONSTRUCTOR.put(recordClass, recordConstructor);\n\n        Object result = transformer.apply(\"test\", schema);\n\n        assertNotNull(result);\n        assertTrue(result instanceof MyRecord);\n    }\n\n    @Test\n    void testApplyWithNonRecordClassAndParameterlessConstructor() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = Schema.of();\n        Class<?> nonRecordClass = MyNonRecordClass.class;\n        Constructor<?> primaryConstructor = nonRecordClass.getDeclaredConstructor();\n        CLASS2CONSTRUCTOR.put(nonRecordClass, primaryConstructor);\n\n        Object result = transformer.apply(nonRecordClass, schema);\n\n        assertNotNull(result);\n        assertTrue(result instanceof MyNonRecordClass);\n    }\n\n    @Test\n    void testApplyWithNonRecordClassAndNoParameterlessConstructor() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = Schema.of();\n        Class<?> nonRecordClass = MyNonRecordClassWithParams.class;\n        Constructor<?> primaryConstructor = nonRecordClass.getDeclaredConstructor(String.class);\n        CLASS2CONSTRUCTOR.put(nonRecordClass, primaryConstructor);\n\n        Object result = transformer.apply(\"test\", schema);\n\n        assertNotNull(result);\n        assertTrue(result instanceof MyNonRecordClassWithParams);\n    }\n\n    @Test\n    void testApplyWithException() {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = Schema.of();\n        Class<?> invalidClass = InvalidClass.class;\n\n        assertThrows(RuntimeException.class, () -> transformer.apply(invalidClass, schema));\n    }\n\n    private static class MyRecord {\n        public MyRecord(String s) {}\n    }\n\n    private static class MyNonRecordClass {\n        public MyNonRecordClass() {}\n    }\n\n    private static class MyNonRecordClassWithParams {\n        public MyNonRecordClassWithParams(String s) {}\n    }\n\n    private static class InvalidClass {\n        private InvalidClass() {}\n    }\n}\n"}]