[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Timestamp;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class DateAndTime_birthdayTest {\n    private DateAndTime dateAndTime;\n    private BaseFaker faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new BaseFaker();\n        dateAndTime = new DateAndTime(faker);\n    }\n\n    @Test\n    public void testBirthdayWithEqualAges() {\n        int minAge = 30;\n        int maxAge = 30;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDate expectedDate = LocalDate.now().minusYears(maxAge);\n        assertEquals(Timestamp.valueOf(LocalDateTime.of(expectedDate, LocalTime.MIDNIGHT)), birthday);\n    }\n\n    @Test\n    public void testBirthdayWithDifferentAges() {\n        int minAge = 18;\n        int maxAge = 65;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isAfter(from) || birthday.toLocalDateTime().toLocalDate().isEqual(from));\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isBefore(to));\n    }\n}\n"}]