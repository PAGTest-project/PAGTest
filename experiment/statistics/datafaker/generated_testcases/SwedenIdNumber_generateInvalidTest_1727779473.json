[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.when;\n\npublic class SwedenIdNumber_generateInvalidTest {\n\n    private SwedenIdNumber swedenIdNumber;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        swedenIdNumber = new SwedenIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        // Given\n        when(faker.numerify(Mockito.anyString())).thenReturn(\"121212-1213\");\n        when(faker.options()).thenReturn(new BaseProviders.Options() {\n            @Override\n            public String option(String[] options) {\n                return options[0];\n            }\n        });\n\n        // When\n        String invalidSsn = swedenIdNumber.generateInvalid(faker);\n\n        // Then\n        assertThat(SwedenIdNumber.isValidSwedishSsn(invalidSsn)).isFalse();\n    }\n}\n"}]