[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class UkrainianIdNumber_generateValidTest {\n\n    private UkrainianIdNumber ukrainianIdNumber;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        ukrainianIdNumber = new UkrainianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        String dob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String numbers = \"1234\";\n        int checksum = 5; // Calculated checksum for the given dob and numbers\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.numerify(\"####\")).thenReturn(numbers);\n\n        IdNumber.IdNumberRequest request = Mockito.mock(IdNumber.IdNumberRequest.class);\n        PersonIdNumber result = ukrainianIdNumber.generateValid(faker, request);\n\n        String expectedUnzr = dob + \"-\" + numbers + checksum;\n        assertEquals(expectedUnzr, result.getIdNumber());\n        assertEquals(birthday, result.getBirthDate());\n    }\n}\n"}]