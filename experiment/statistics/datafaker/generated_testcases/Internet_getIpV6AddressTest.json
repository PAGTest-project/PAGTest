[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.service.RandomService;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.when;\n\npublic class Internet_getIpV6AddressTest {\n\n    @Test\n    public void testGetIpV6Address() throws UnknownHostException {\n        // Given\n        BaseFaker faker = Mockito.mock(BaseFaker.class);\n        RandomService randomService = Mockito.mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.hex(4, false)).thenReturn(\"abcd\");\n\n        Internet internet = new Internet(faker);\n\n        // When\n        InetAddress result = internet.getIpV6Address();\n\n        // Then\n        assertEquals(\"abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd\", result.getHostAddress());\n    }\n\n    @Test\n    public void testGetIpV6Address_UnknownHostException() {\n        // Given\n        BaseFaker faker = Mockito.mock(BaseFaker.class);\n        RandomService randomService = Mockito.mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.hex(4, false)).thenReturn(\"invalid\");\n\n        Internet internet = new Internet(faker);\n\n        // When and Then\n        assertThrows(RuntimeException.class, internet::getIpV6Address);\n    }\n}\n"}]