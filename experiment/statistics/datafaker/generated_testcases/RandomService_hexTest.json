[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Random;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class RandomService_hexTest {\n    private RandomService randomService;\n    private Random mockRandom;\n\n    @BeforeEach\n    public void setUp() {\n        mockRandom = mock(Random.class);\n        randomService = new RandomService(mockRandom);\n    }\n\n    @Test\n    public void testHexWithZeroLength() {\n        assertEquals(\"\", randomService.hex(0, true));\n        assertEquals(\"\", randomService.hex(0, false));\n    }\n\n    @Test\n    public void testHexWithPositiveLengthUppercase() {\n        doAnswer(invocation -> {\n            byte[] bytes = invocation.getArgument(0);\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = (byte) i; // Ensure each byte is within the range of HEX_UP\n            }\n            return null;\n        }).when(mockRandom).nextBytes(any(byte[].class));\n\n        String result = randomService.hex(5, true);\n        assertEquals(5, result.length());\n        assertEquals(\"01234\", result); // Since each byte is (i % 16), the result should be \"01234\"\n    }\n\n    @Test\n    public void testHexWithPositiveLengthLowercase() {\n        doAnswer(invocation -> {\n            byte[] bytes = invocation.getArgument(0);\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = (byte) i; // Ensure each byte is within the range of HEX_LOWER\n            }\n            return null;\n        }).when(mockRandom).nextBytes(any(byte[].class));\n\n        String result = randomService.hex(5, false);\n        assertEquals(5, result.length());\n        assertEquals(\"01234\", result); // Since each byte is (i % 16), the result should be \"01234\"\n    }\n}\n"}]