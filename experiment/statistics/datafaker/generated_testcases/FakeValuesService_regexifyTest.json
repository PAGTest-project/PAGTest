[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport com.github.curiousoddman.rgxgen.RgxGen;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\nclass FakeValuesService_regexifyTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private RandomService randomService;\n\n    @BeforeEach\n    void setUp() {\n        fakeValuesService = new FakeValuesService() {\n            @Override\n            public String regexify(String regex, FakerContext context) {\n                RgxGen rgxGen = expression2generex.get(regex);\n                if (rgxGen == null) {\n                    rgxGen = RgxGen.parse(regex);\n                    expression2generex.putIfAbsent(regex, rgxGen);\n                }\n                return rgxGen.generate(context.getRandomService().getRandomInternal());\n            }\n        };\n        context = Mockito.mock(FakerContext.class);\n        randomService = Mockito.mock(RandomService.class);\n        when(context.getRandomService()).thenReturn(randomService);\n    }\n\n    @Test\n    void testRegexify_NewRegex() {\n        String regex = \"[a-z]\";\n        RgxGen rgxGen = Mockito.mock(RgxGen.class);\n        when(rgxGen.generate(Mockito.any())).thenReturn(\"a\");\n        when(randomService.getRandomInternal()).thenReturn(new java.util.Random());\n\n        String result = fakeValuesService.regexify(regex, context);\n\n        assertEquals(\"a\", result);\n    }\n\n    @Test\n    void testRegexify_CachedRegex() {\n        String regex = \"[a-z]\";\n        RgxGen rgxGen = Mockito.mock(RgxGen.class);\n        fakeValuesService.expression2generex.put(regex, rgxGen);\n        when(rgxGen.generate(Mockito.any())).thenReturn(\"b\");\n        when(randomService.getRandomInternal()).thenReturn(new java.util.Random());\n\n        String result = fakeValuesService.regexify(regex, context);\n\n        assertEquals(\"b\", result);\n    }\n}\n"}]