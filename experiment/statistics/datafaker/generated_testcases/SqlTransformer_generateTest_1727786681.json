[{"strategy": "generate", "code": "\npackage net.datafaker.transformations.sql;\n\nimport net.datafaker.sequence.FakeSequence;\nimport net.datafaker.sequence.FakeStream;\nimport net.datafaker.transformations.Schema;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass SqlTransformer_generateTest {\n\n    @Test\n    void testGenerateWithEmptySchema() {\n        SqlTransformer<Object> transformer = new SqlTransformer.SqlTransformerBuilder<Object>().build();\n        Schema<Object, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field<?, ?>[0]);\n\n        String result = transformer.generate(List.of(), schema);\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    void testGenerateWithInfiniteFakeSequence() {\n        SqlTransformer<Object> transformer = new SqlTransformer.SqlTransformerBuilder<Object>().build();\n        FakeSequence<Object> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        assertThrows(IllegalArgumentException.class, () -> transformer.generate(fakeSequence, mock(Schema.class)));\n    }\n\n    @Test\n    void testGenerateWithFakeStream() {\n        SqlTransformer<Object> transformer = new SqlTransformer.SqlTransformerBuilder<Object>().build();\n        FakeStream<Object> fakeStream = mock(FakeStream.class);\n        Stream<Object> stream = Stream.of(new Object());\n        when(fakeStream.get()).thenReturn(stream);\n\n        Schema<Object, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field<?, ?>[]{mock(Field.class)});\n\n        String result = transformer.generate(fakeStream, schema);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testGenerateWithList() {\n        SqlTransformer<Object> transformer = new SqlTransformer.SqlTransformerBuilder<Object>().build();\n        List<Object> list = List.of(new Object());\n\n        Schema<Object, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field<?, ?>[]{mock(Field.class)});\n\n        String result = transformer.generate(list, schema);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testGenerateWithBatchMode() {\n        SqlTransformer<Object> transformer = new SqlTransformer.SqlTransformerBuilder<Object>().batch().build();\n        List<Object> list = List.of(new Object());\n\n        Schema<Object, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field<?, ?>[]{mock(Field.class)});\n\n        String result = transformer.generate(list, schema);\n        assertNotNull(result);\n    }\n}\n"}]