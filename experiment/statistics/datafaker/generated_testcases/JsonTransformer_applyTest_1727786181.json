[{"strategy": "generate", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass JsonTransformer_applyTest {\n\n    @Test\n    void testApplyWithSimpleField() {\n        // Given\n        JsonTransformer<Object> transformer = new JsonTransformer<>(true);\n        Schema<Object, ?> schema = mock(Schema.class);\n        SimpleField simpleField = mock(SimpleField.class);\n        Field<?, ?>[] fields = new Field[]{simpleField};\n        when(schema.getFields()).thenReturn(fields);\n        when(simpleField.getName()).thenReturn(\"name\");\n        when(simpleField.transform(any())).thenReturn(\"value\");\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"name\\\": \\\"value\\\"}\", result);\n    }\n\n    @Test\n    void testApplyWithCompositeField() {\n        // Given\n        JsonTransformer<Object> transformer = new JsonTransformer<>(true);\n        Schema<Object, ?> schema = mock(Schema.class);\n        CompositeField compositeField = mock(CompositeField.class);\n        Field<?, ?>[] fields = new Field[]{compositeField};\n        when(schema.getFields()).thenReturn(fields);\n        when(compositeField.getName()).thenReturn(\"composite\");\n        when(compositeField.transform(any())).thenReturn(new CompositeField(\"nested\", new Field[]{}));\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"composite\\\": {}}\", result);\n    }\n}\n"}]