[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseFaker;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class SouthAfricanIdNumber_generateValidTest {\n\n    private SouthAfricanIdNumber southAfricanIdNumber;\n    private BaseFaker faker;\n    private IdNumberRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        southAfricanIdNumber = new SouthAfricanIdNumber();\n        faker = mock(BaseFaker.class);\n        request = mock(IdNumberRequest.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        when(Utils.birthday(faker, request)).thenReturn(birthday);\n        when(Utils.gender(faker, request)).thenReturn(gender);\n        when(faker.number().numberBetween(5000, 10_000)).thenReturn(5001);\n        when(faker.options().option(anyString())).thenReturn(\"18\");\n\n        // When\n        PersonIdNumber result = southAfricanIdNumber.generateValid(faker, request);\n\n        // Then\n        String expectedBasePart = \"900101\" + \"5001\" + \"18\";\n        String expectedChecksum = String.valueOf(southAfricanIdNumber.calculateChecksum(expectedBasePart, 12));\n        String expectedIdNumber = expectedBasePart + expectedChecksum;\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]