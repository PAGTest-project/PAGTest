[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.service.RandomService;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class ChineseIdNumber_generateValidTest {\n\n    private BaseProviders faker;\n    private IdNumberRequest request;\n    private RandomService randomService;\n    private ChineseIdNumber chineseIdNumber;\n\n    @Before\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        request = Mockito.mock(IdNumberRequest.class);\n        randomService = Mockito.mock(RandomService.class);\n        chineseIdNumber = new ChineseIdNumber();\n\n        when(faker.random()).thenReturn(randomService);\n        when(faker.options().option(ChineseIdNumber.LOCATIONS)).thenReturn(\"110000\");\n        when(randomService.nextInt(10)).thenReturn(1, 2, 3);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(chineseIdNumber.birthday(faker, request)).thenReturn(birthday);\n        when(chineseIdNumber.gender(faker, request)).thenReturn(\"Male\");\n\n        PersonIdNumber result = chineseIdNumber.generateValid(faker, request);\n\n        assertEquals(\"11000019900101123\", result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(\"Male\", result.getGender());\n    }\n\n    @Test\n    public void testIdNumberChecksum() {\n        char[] res = \"11000019900101123\".toCharArray();\n        String expectedIdNumber = \"110000199001011231\";\n\n        String result = ChineseIdNumber.idNumber(res);\n\n        assertEquals(expectedIdNumber, result);\n    }\n\n    @Test\n    public void testFillBirthday() {\n        char[] res = new char[18];\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        int offset = 6;\n\n        chineseIdNumber.fillBirthday(res, offset, birthday);\n\n        assertEquals('1', res[offset]);\n        assertEquals('9', res[offset + 1]);\n        assertEquals('9', res[offset + 2]);\n        assertEquals('0', res[offset + 3]);\n        assertEquals('0', res[offset + 4]);\n        assertEquals('1', res[offset + 5]);\n        assertEquals('0', res[offset + 6]);\n        assertEquals('1', res[offset + 7]);\n    }\n}\n"}]