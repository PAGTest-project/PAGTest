[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class FakeValuesService_safeFetchTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n    }\n\n    @Test\n    public void testSafeFetchWithNullObject() {\n        String result = fakeValuesService.safeFetch(\"nonexistent_key\", context, \"default\");\n        assertEquals(\"default\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithSingleElementList() {\n        List<String> values = List.of(\"singleValue\");\n        context.getRandomService().setSeed(0); // Ensure deterministic behavior\n        String result = fakeValuesService.safeFetch(\"key\", context, \"default\");\n        assertEquals(\"singleValue\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithMultipleElementList() {\n        List<String> values = List.of(\"value1\", \"value2\", \"value3\");\n        context.getRandomService().setSeed(1); // Ensure deterministic behavior\n        String result = fakeValuesService.safeFetch(\"key\", context, \"default\");\n        assertEquals(\"value2\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithSlashDelimitedRegex() {\n        String regex = \"/[a-z]+/\";\n        String result = fakeValuesService.safeFetch(\"key\", context, \"default\");\n        assertTrue(result.startsWith(\"#{regexify '\"));\n        assertTrue(result.endsWith(\"'}\"));\n    }\n\n    @Test\n    public void testSafeFetchWithNonListNonRegexObject() {\n        String value = \"simpleString\";\n        String result = fakeValuesService.safeFetch(\"key\", context, \"default\");\n        assertEquals(\"simpleString\", result);\n    }\n}\n"}]