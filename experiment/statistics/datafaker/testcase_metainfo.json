[{"uris": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java.FakerConcurrencyModificationExceptionTest.[void]test1()", "name": "test1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void test1()", "original_string": "    @Test\n    void test1() {\n        faker.random().nextLong();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java", "class_name": "FakerConcurrencyModificationExceptionTest", "class_uri": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java.FakerConcurrencyModificationExceptionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java.FakerConcurrencyModificationExceptionTest.[void]test2()", "name": "test2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void test2()", "original_string": "    @Test\n    void test2() {\n        faker.random().nextLong();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java", "class_name": "FakerConcurrencyModificationExceptionTest", "class_uri": "src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java.FakerConcurrencyModificationExceptionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue759Test.java.Issue759Test.[void]issue759Test()", "name": "issue759Test", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void issue759Test()", "original_string": "    @RepeatedTest(10)\n    void issue759Test() throws InterruptedException {\n        int numThreads = 5;\n        int iterationsPerThread = 20000;\n        CountDownLatch countDownLatch = new CountDownLatch(numThreads * iterationsPerThread);\n\n        Faker faker = new Faker();\n\n        WorkerThread[] threads = new WorkerThread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            threads[i] = new WorkerThread(faker, iterationsPerThread, countDownLatch);\n        }\n\n        for (int i = 0; i < numThreads; i++) {\n            threads[i].start();\n        }\n\n        assertThat(countDownLatch.await(12, SECONDS))\n            .overridingErrorMessage(\"Test did not complete within 12 second\")\n            .isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue759Test.java", "class_name": "Issue759Test", "class_uri": "src/test/java/net/datafaker/Issue759Test.java.Issue759Test", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionEnglishFails()", "name": "testExpressionEnglishFails", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionEnglishFails()", "original_string": "    @Test\n    void testExpressionEnglishFails() {\n        Faker faker = new Faker(Locale.ENGLISH);\n        assertThat(faker.expression(\"#{name.first_name}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionFails()", "name": "testExpressionFails", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionFails()", "original_string": "    @Test\n    void testExpressionFails() {\n        Faker faker = new Faker();\n        assertThat(faker.expression(\"#{name.first_name}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionUsFails()", "name": "testExpressionUsFails", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionUsFails()", "original_string": "    @Test\n    void testExpressionUsFails() {\n        Faker faker = new Faker(new Locale(\"en\", \"US\"));\n        assertThat(faker.expression(\"#{name.first_name}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionAUWorks()", "name": "testExpressionAUWorks", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionAUWorks()", "original_string": "    @Test\n    void testExpressionAUWorks() {\n        Faker faker = new Faker(new Locale(\"en\", \"AU\"));\n        assertThat(faker.expression(\"#{name.first_name}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionNLWorks()", "name": "testExpressionNLWorks", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionNLWorks()", "original_string": "    @Test\n    void testExpressionNLWorks() {\n        Faker faker = new Faker(new Locale(\"nl\", \"nl\"));\n        assertThat(faker.expression(\"#{name.first_name}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionNLWithMiddleWorks()", "name": "testExpressionNLWithMiddleWorks", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionNLWithMiddleWorks()", "original_string": "    @Test\n    void testExpressionNLWithMiddleWorks() {\n        Faker faker = new Faker(new Locale(\"nl\", \"nl\"));\n        assertThat(faker.expression(\"#{name.name_with_middle}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionNLWithCity()", "name": "testExpressionNLWithCity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionNLWithCity()", "original_string": "    @Test\n    void testExpressionNLWithCity() {\n        Faker faker = new Faker();\n        assertThat(faker.expression(\"#{address.city}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test.[void]testExpressionNLWithFullAddress()", "name": "testExpressionNLWithFullAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExpressionNLWithFullAddress()", "original_string": "    @Test\n    void testExpressionNLWithFullAddress() {\n        Faker faker = new Faker(new Locale(\"nl\", \"nl\"));\n        assertThat(faker.expression(\"#{address.full_address}\")).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue1178Test.java", "class_name": "Issue1178Test", "class_uri": "src/test/java/net/datafaker/Issue1178Test.java.Issue1178Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]examplifyUppercaseLetters()", "name": "examplifyUppercaseLetters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void examplifyUppercaseLetters()", "original_string": "    @Test\n    void examplifyUppercaseLetters() {\n        assertThat(faker.examplify(\"ABC\")).matches(\"[A-Z]{3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]examplifyLowercaseLetters()", "name": "examplifyLowercaseLetters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void examplifyLowercaseLetters()", "original_string": "    @Test\n    void examplifyLowercaseLetters() {\n        assertThat(faker.examplify(\"abc\")).matches(\"[a-z]{3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]examplifyNumbers()", "name": "examplifyNumbers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void examplifyNumbers()", "original_string": "    @Test\n    void examplifyNumbers() {\n        assertThat(faker.examplify(\"489321\")).matches(\"[0-9]{6}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]examplifyMixed()", "name": "examplifyMixed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void examplifyMixed()", "original_string": "    @Test\n    void examplifyMixed() {\n        assertThat(faker.examplify(\"abc123ABC1zzz\")).matches(\"[a-z]{3}[0-9]{3}[A-Z]{3}[0-9][a-z]{3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]examplifyWithSpacesAndSpecialCharacters()", "name": "examplifyWithSpacesAndSpecialCharacters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void examplifyWithSpacesAndSpecialCharacters()", "original_string": "    @Test\n    void examplifyWithSpacesAndSpecialCharacters() {\n        assertThat(faker.examplify(\"The number 4!\")).matches(\"[A-Z][a-z]{2} [a-z]{6} [0-9]!\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]bothifyShouldGenerateLettersAndNumbers()", "name": "bothifyShouldGenerateLettersAndNumbers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bothifyShouldGenerateLettersAndNumbers()", "original_string": "    @Test\n    void bothifyShouldGenerateLettersAndNumbers() {\n        assertThat(faker.bothify(\"????##@gmail.com\")).matches(\"\\\\w{4}\\\\d{2}@gmail.com\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]letterifyShouldGenerateLetters()", "name": "letterifyShouldGenerateLetters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void letterifyShouldGenerateLetters()", "original_string": "    @Test\n    void letterifyShouldGenerateLetters() {\n        assertThat(faker.bothify(\"????\")).matches(\"\\\\w{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]letterifyShouldGenerateUpperCaseLetters()", "name": "letterifyShouldGenerateUpperCaseLetters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void letterifyShouldGenerateUpperCaseLetters()", "original_string": "    @Test\n    void letterifyShouldGenerateUpperCaseLetters() {\n        assertThat(faker.bothify(\"????\", true)).matches(\"[A-Z]{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]letterifyShouldLeaveNonSpecialCharactersAlone()", "name": "letterifyShouldLeaveNonSpecialCharactersAlone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void letterifyShouldLeaveNonSpecialCharactersAlone()", "original_string": "    @Test\n    void letterifyShouldLeaveNonSpecialCharactersAlone() {\n        assertThat(faker.bothify(\"ABC????DEF\")).matches(\"ABC\\\\w{4}DEF\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]numerifyShouldGenerateNumbers()", "name": "numerifyShouldGenerateNumbers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void numerifyShouldGenerateNumbers()", "original_string": "    @Test\n    void numerifyShouldGenerateNumbers() {\n        assertThat(faker.numerify(\"####\")).matches(\"\\\\d{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]numerifyShouldGenerateNumbersNotStartingWithZero()", "name": "numerifyShouldGenerateNumbersNotStartingWithZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(25)\n    void numerifyShouldGenerateNumbersNotStartingWithZero()", "original_string": "    @RepeatedTest(25)\n    void numerifyShouldGenerateNumbersNotStartingWithZero() {\n        assertThat(faker.numerify(\"\u00d8###\")).matches(\"[1-9]\\\\d{3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@RepeatedTest(25)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(25)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]numerifyShouldGenerateNonZeroNumbers()", "name": "numerifyShouldGenerateNonZeroNumbers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(25)\n    void numerifyShouldGenerateNonZeroNumbers()", "original_string": "    @RepeatedTest(25)\n    void numerifyShouldGenerateNonZeroNumbers() {\n        assertThat(faker.numerify(\"\u00d8\u00d8\")).matches(\"[1-9]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@RepeatedTest(25)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(25)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]numerifyShouldLeaveNonSpecialCharactersAlone()", "name": "numerifyShouldLeaveNonSpecialCharactersAlone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void numerifyShouldLeaveNonSpecialCharactersAlone()", "original_string": "    @Test\n    void numerifyShouldLeaveNonSpecialCharactersAlone() {\n        assertThat(faker.numerify(\"####123\")).matches(\"\\\\d{4}123\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]templatify()", "name": "templatify", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void templatify()", "original_string": "    @Test\n    void templatify() {\n        assertThat(faker.templatify(\"12??34\", '?', \"\u0442\u0435\u0441\u0442\", \"test\", \"\u6d4b\u8bd5\u6d4b\u8bd5\")).hasSize(12);\n        assertThat(faker.templatify(\"12??34\",\n            Map.of('1', new String[]{\"\u0442\u0435\u0441\u0442\", \"test\", \"\u6d4b\u8bd5\u6d4b\u8bd5\"}))).hasSize(9);\n        assertThat(faker.templatify(\"12??34\",\n            Map.of('1', new String[]{\"\"}))).hasSize(5);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]testRegexify(String)", "name": "testRegexify", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\n        \"\\\\d\",\n        \"\\\\w\",\n        \"[aeiou]{2,3}\",\n        \"[a-z]{2,3}\",\n        \"a{2,3}\",\n        \"a{2}\",\n        \"a*b+c?\",\n        \"[a-z1-9]\",\n        \"[a-z]{2,3}[0-9]{2,3}\",\n        \"(a|b){2,3}\",\n        \"[a-z]\",\n        \"(aeiou)\",\n        \"(a|b)\",\n        \"\\\\.\\\\*\\\\?\\\\+\",\n        \"^arn:.+:.+:.*:([0-9]{12}):(.+)$\",\n        \"\\\\s[\\\\s]\\\\d[\\\\d]\\\\w[\\\\w]\",\n    })\n    void testRegexify(String input)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\n        \"\\\\d\",\n        \"\\\\w\",\n        \"[aeiou]{2,3}\",\n        \"[a-z]{2,3}\",\n        \"a{2,3}\",\n        \"a{2}\",\n        \"a*b+c?\",\n        \"[a-z1-9]\",\n        \"[a-z]{2,3}[0-9]{2,3}\",\n        \"(a|b){2,3}\",\n        \"[a-z]\",\n        \"(aeiou)\",\n        \"(a|b)\",\n        \"\\\\.\\\\*\\\\?\\\\+\",\n        \"^arn:.+:.+:.*:([0-9]{12}):(.+)$\",\n        \"\\\\s[\\\\s]\\\\d[\\\\d]\\\\w[\\\\w]\",\n    })\n    void testRegexify(String input) {\n        var faker = new Faker();\n        assertThat(faker.regexify(input)).matches(input);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\n        \"\\\\d\",\n        \"\\\\w\",\n        \"[aeiou]{2,3}\",\n        \"[a-z]{2,3}\",\n        \"a{2,3}\",\n        \"a{2}\",\n        \"a*b+c?\",\n        \"[a-z1-9]\",\n        \"[a-z]{2,3}[0-9]{2,3}\",\n        \"(a|b){2,3}\",\n        \"[a-z]\",\n        \"(aeiou)\",\n        \"(a|b)\",\n        \"\\\\.\\\\*\\\\?\\\\+\",\n        \"^arn:.+:.+:.*:([0-9]{12}):(.+)$\",\n        \"\\\\s[\\\\s]\\\\d[\\\\d]\\\\w[\\\\w]\",\n    })", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\n        \"\\\\d\",\n        \"\\\\w\",\n        \"[aeiou]{2,3}\",\n        \"[a-z]{2,3}\",\n        \"a{2,3}\",\n        \"a{2}\",\n        \"a*b+c?\",\n        \"[a-z1-9]\",\n        \"[a-z]{2,3}[0-9]{2,3}\",\n        \"(a|b){2,3}\",\n        \"[a-z]\",\n        \"(aeiou)\",\n        \"(a|b)\",\n        \"\\\\.\\\\*\\\\?\\\\+\",\n        \"^arn:.+:.+:.*:([0-9]{12}):(.+)$\",\n        \"\\\\s[\\\\s]\\\\d[\\\\d]\\\\w[\\\\w]\",\n    })"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest case for issue https://github.com/datafaker-net/datafaker/issues/1091\n"}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]badExpressionTooManyArgs()", "name": "badExpressionTooManyArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void badExpressionTooManyArgs()", "original_string": "    @Test\n    void badExpressionTooManyArgs() {\n        assertThatThrownBy(() -> faker.expression(\"#{regexify 'a','a'}\"))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]badExpressionTooFewArgs()", "name": "badExpressionTooFewArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void badExpressionTooFewArgs()", "original_string": "    @Test\n    void badExpressionTooFewArgs() {\n        assertThatThrownBy(() -> faker.expression(\"#{regexify}\"))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]badExpressionCouldntCoerce()", "name": "badExpressionCouldntCoerce", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void badExpressionCouldntCoerce()", "original_string": "    @Test\n    void badExpressionCouldntCoerce() {\n        assertThatThrownBy(() -> faker.expression(\"#{number.number_between 'x','10'}\"))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]expression()", "name": "expression", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expression()", "original_string": "    @Test\n    void expression() {\n        assertThat(faker.expression(\"#{options.option 'a','b','c','d'}\")).matches(\"([abcd])\");\n        assertThat(faker.expression(\"#{options.option ''''}\")).matches(\"(')\");\n        assertThat(faker.expression(\"#{options.option '12','345','89','54321'}\")).matches(\"(12|345|89|54321)\");\n        assertThat(faker.expression(\"#{regexify '(a|b){2,3}'}\")).matches(\"([ab]){2,3}\");\n        assertThat(faker.expression(\"#{regexify '\\\\.\\\\*\\\\?\\\\+'}\")).matches(\"\\\\.\\\\*\\\\?\\\\+\");\n        assertThat(faker.expression(\"#{bothify '????','true'}\")).matches(\"[A-Z]{4}\");\n        assertThat(faker.expression(\"#{bothify '????','false'}\")).matches(\"[a-z]{4}\");\n        assertThat(faker.expression(\"#{letterify '????','true'}\")).matches(\"[A-Z]{4}\");\n        assertThat(faker.expression(\"#{templatify '????','?','1','2','q','r'}\")).matches(\"([12qr]){4}\");\n        assertThat(faker.expression(\"#{Name.first_name} #{Name.first_name} #{Name.last_name}\")).matches(\"[a-zA-Z']+ [a-zA-Z']+ [a-zA-Z']+\");\n        assertThat(faker.expression(\"#{number.number_between '1','10'}\")).matches(\"[1-9]\");\n        assertThat(faker.expression(\"#{color.name}\")).matches(\"[a-z\\\\s]+\");\n        assertThat(faker.expression(\"#{date.past '15','SECONDS','dd/MM/yyyy hh:mm:ss'}\"))\n            .matches(\"[0-9]{2}/[0-9]{2}/[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}\");\n        assertThat(faker.expression(\"#{date.birthday 'yy DDD hh:mm:ss'}\"))\n            .matches(\"[0-9]{2} [0-9]{3} [0-9]{2}:[0-9]{2}:[0-9]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]jsonExpressionTest()", "name": "jsonExpressionTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void jsonExpressionTest()", "original_string": "    @Test\n    void jsonExpressionTest() {\n        assertThat(faker.expression(\"#{json 'person','#{json ''first_name'',''#{Name.first_name}'',''last_name'',''#{Name.last_name}''}','address','#{json ''country'',''#{Address.country}'',''city'',''#{Address.city}''}'}\"))\n            .contains(\"\\\"address\\\": {\\\"country\\\":\");\n\n        assertThat(\n            faker.expression(\"#{jsona '-1','person',\" +\n                \"'#{json ''first_name'',''#{Name.first_name}'',''last_name'',''#{Name.last_name}''}',\" +\n                \" '2','addesses',\" +\n                \"'#{json ''address'',\" +\n                \"''#{json ''''country'''',''''#{Address.country}'''',''''city'''',''''#{Address.city}''''}''}'}\"))\n            .contains(\"\\\"addesses\\\": [{\\\"address\\\": {\\\"country\\\": \");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]testLimitForCsvExpression(int)", "name": "testLimitForCsvExpression", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCsvExpression(int limit)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCsvExpression(int limit) {\n        String csvFullExpression = faker.expression(\"#{csv ';','\\\"','false','\" + limit + \"','first_name','#{Name.first_name}','last_name','#{Name.last_name}'}\");\n        String csvShortExpression = faker.expression(\"#{csv '\" + limit + \"','first_name','#{Name.first_name}','last_name','#{Name.last_name}'}\");\n\n        int numberOfLinesFull = 0;\n        int numberOfLinesShort = 0;\n        for (int i = 0; i < csvFullExpression.length(); i++) {\n            if (csvFullExpression.regionMatches(i, System.lineSeparator(), 0, System.lineSeparator().length())) {\n                numberOfLinesFull++;\n            }\n        }\n\n        for (int i = 0; i < csvShortExpression.length(); i++) {\n            if (csvShortExpression.regionMatches(i, System.lineSeparator(), 0, System.lineSeparator().length())) {\n                numberOfLinesShort++;\n            }\n        }\n\n        assertThat(numberOfLinesFull).isEqualTo(limit);\n        assertThat(numberOfLinesShort).isEqualTo(limit + 1); // + header\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {0, 2, 3, 10, 20, 100})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]numberBetweenRepeated()", "name": "numberBetweenRepeated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void numberBetweenRepeated()", "original_string": "    @RepeatedTest(100)\n    void numberBetweenRepeated() {\n        assertThat(faker.expression(\"#{number.number_between '1','10'}\")).matches(\"[1-9]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]regexifyShouldGenerateSameValueForFakerWithSameSeed()", "name": "regexifyShouldGenerateSameValueForFakerWithSameSeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void regexifyShouldGenerateSameValueForFakerWithSameSeed()", "original_string": "    @Test\n    void regexifyShouldGenerateSameValueForFakerWithSameSeed() {\n        long seed = 1L;\n        String regex = \"\\\\d\";\n\n        String firstResult = new Faker(new Random(seed)).regexify(regex);\n        String secondResult = new Faker(new Random(seed)).regexify(regex);\n\n        assertThat(secondResult).isEqualTo(firstResult);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]resolveShouldReturnValueThatExists()", "name": "resolveShouldReturnValueThatExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolveShouldReturnValueThatExists()", "original_string": "    @Test\n    void resolveShouldReturnValueThatExists() {\n        assertThat(faker.resolve(\"address.city_prefix\")).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]resolveShouldThrowExceptionWhenPropertyDoesntExist()", "name": "resolveShouldThrowExceptionWhenPropertyDoesntExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolveShouldThrowExceptionWhenPropertyDoesntExist()", "original_string": "    @Test\n    void resolveShouldThrowExceptionWhenPropertyDoesntExist() {\n        assertThatThrownBy(() -> faker.resolve(\"address.nothing\"))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]datafaker87(String)", "name": "datafaker87", "arg_nums": 1, "params": [{"name": "expression", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"#{regexify '[a-z]{5}[A-Z]{5}'}\", \"#{Address.city}\"})\n    void datafaker87(String expression)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"#{regexify '[a-z]{5}[A-Z]{5}'}\", \"#{Address.city}\"})\n    void datafaker87(String expression) {\n        int n = 10;\n        int counter = 0;\n        for (int i = 0; i < n; i++) {\n            String expression1 = faker.expression(expression);\n            String expression2 = faker.expression(expression);\n            if (expression1.equals(expression2)) {\n                counter++;\n            }\n        }\n\n        assertThat(counter).isLessThan(n);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"#{regexify '[a-z]{5}[A-Z]{5}'}\", \"#{Address.city}\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"#{regexify '[a-z]{5}[A-Z]{5}'}\", \"#{Address.city}\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest case for issue https://github.com/datafaker-net/datafaker/issues/87\n"}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]fakerInstanceCanBeAcquiredViaUtilityMethods()", "name": "fakerInstanceCanBeAcquiredViaUtilityMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fakerInstanceCanBeAcquiredViaUtilityMethods()", "original_string": "    @Test\n    void fakerInstanceCanBeAcquiredViaUtilityMethods() {\n        assertThat(new Faker()).isInstanceOf(BaseFaker.class);\n        assertThat(new Faker(Locale.CANADA)).isInstanceOf(BaseFaker.class);\n        assertThat(new Faker(new Random(1))).isInstanceOf(BaseFaker.class);\n        assertThat(new Faker(Locale.CHINA, new Random(2))).isInstanceOf(BaseFaker.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]differentLocalesTest()", "name": "differentLocalesTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void differentLocalesTest()", "original_string": "    @Test\n    void differentLocalesTest() {\n        BaseFaker localFaker = new Faker();\n        Callable<String> stringCallable = () -> localFaker.name().firstName();\n        localFaker.doWith(stringCallable, new Locale(\"ru\", \"RU\"));\n        localFaker.doWith(stringCallable, Locale.GERMAN);\n        localFaker.doWith(stringCallable, Locale.SIMPLIFIED_CHINESE);\n        for (int i = 0; i < 10; i++) {\n            assertThat(localFaker.doWith(stringCallable, new Locale(\"ru\", \"RU\"))).matches(\"[\u0430-\u044f\u0410-\u042f\u0401\u0451 ]+\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]issue883Test()", "name": "issue883Test", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Timeout(value = 3, unit = TimeUnit.MINUTES)\n    void issue883Test()", "original_string": "    @Test\n    @Timeout(value = 3, unit = TimeUnit.MINUTES)\n    void issue883Test() throws InterruptedException {\n        for (int i = 0; i < 10_000; i++) {\n            Faker f = new Faker();\n            String s = f.ancient().god();\n            if (i % 1_000 == 0) {\n                Thread.sleep(10);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test\n    @Timeout(value = 3, unit = TimeUnit.MINUTES)", "marker_annotations": ["@Test"], "non_marker_annotations": ["@Timeout(value = 3, unit = TimeUnit.MINUTES)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]doWithLocaleExceptionTest()", "name": "doWithLocaleExceptionTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void doWithLocaleExceptionTest()", "original_string": "    @Test\n    void doWithLocaleExceptionTest() {\n        BaseFaker localFaker = new BaseFaker();\n        assertThatThrownBy(\n            () -> localFaker.doWith(() -> {\n                throw new Exception(\"\u304a\u3063\u3068\");\n            }, Locale.JAPAN))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]differentSeeds()", "name": "differentSeeds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void differentSeeds()", "original_string": "    @Test\n    void differentSeeds() {\n        BaseFaker localFaker = new Faker();\n        Callable<String> stringCallable = () -> localFaker.name().firstName();\n\n        assertThat(localFaker.doWith(stringCallable, 123))\n            .isEqualTo(localFaker.doWith(stringCallable, 123));\n        assertThat(localFaker.doWith(stringCallable, 987))\n            .isNotEqualTo(localFaker.doWith(stringCallable, 123))\n            .isEqualTo(localFaker.doWith(stringCallable, 987));\n\n        assertThatThrownBy(\n            () -> localFaker.doWith(() -> {\n                throw new Exception(\"Oops1\");\n            }, 123))\n            .isInstanceOf(RuntimeException.class);\n        assertThat(localFaker.doWith(stringCallable, Locale.CANADA, 123))\n            .isEqualTo(localFaker.doWith(stringCallable, Locale.CANADA, 123));\n        assertThat(localFaker.doWith(stringCallable, Locale.CANADA, 987))\n            .isNotEqualTo(localFaker.doWith(stringCallable, Locale.CANADA, 123))\n            .isEqualTo(localFaker.doWith(stringCallable, Locale.CANADA, 987));\n        assertThatThrownBy(\n            () -> localFaker.doWith(() -> {\n                throw new Exception(\"Oops2\");\n            }, Locale.ENGLISH, 123))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]shouldNotApplyCachingToMethodsWithParameters()", "name": "shouldNotApplyCachingToMethodsWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldNotApplyCachingToMethodsWithParameters()", "original_string": "    @Test\n    void shouldNotApplyCachingToMethodsWithParameters() {\n        // Test for issue: https://github.com/datafaker-net/datafaker/issues/716.\n        // No exception should be thrown\n\n        // Warm up start\n        String flight1 = faker.expression(\"#{Aviation.flight}\");\n        assertThat(flight1).matches(\"[A-z0-9]{2}\\\\d{1,4}\");\n        // Warm up end\n\n        String flight2 = faker.expression(\"#{Aviation.flight 'ICAO'}\");\n        assertThat(flight2).matches(\"[A-z]{3}\\\\d{1,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/FakerTest.java.FakerTest.[void]testDeterministicAndNonDeterministicProvidersReturnValues()", "name": "testDeterministicAndNonDeterministicProvidersReturnValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDeterministicAndNonDeterministicProvidersReturnValues()", "original_string": "    @Test\n    void testDeterministicAndNonDeterministicProvidersReturnValues() {\n        final int numberOfTestsPerMethod = 100;\n        final Reflections reflections = new Reflections(\"net.datafaker.providers\");\n        final Set<Class<?>> classes = reflections.get(SubTypes.of(AbstractProvider.class).asClass());\n        for (var clazz : classes) {\n            final Collection<Method> methods = Arrays.stream(clazz.getDeclaredMethods())\n                .filter(m -> Modifier.isPublic(m.getModifiers()) && m.getParameterCount() == 0).collect(Collectors.toSet());\n            if (methods.isEmpty()) continue;\n            Constructor<AbstractProvider<?>> constructor = null;\n            final AbstractProvider<?> ap;\n            try {\n                final Set<Constructor<AbstractProvider<?>>> constructorsWith1Arg =\n                    Arrays.stream(clazz.getDeclaredConstructors())\n                        .filter(c -> c.getParameterCount() == 1).map(c -> (Constructor<AbstractProvider<?>>) c)\n                        .collect(Collectors.toSet());\n                for (var c : constructorsWith1Arg) {\n                    final Class<?>[] types = c.getParameterTypes();\n                    if (types[0].isAssignableFrom(Faker.class)) {\n                        constructor = c;\n                        break;\n                    }\n                }\n                assertThat(constructor).isNotNull();\n                constructor.setAccessible(true);\n                ap = constructor.newInstance(faker);\n            } catch (InvocationTargetException | InstantiationException |\n                     IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n            for (Method m : methods) {\n                final var set = new HashSet<>();\n                try {\n                    int currentSize = 0;\n                    for (int i = 0; i < numberOfTestsPerMethod && currentSize <= 1; i++) {\n                        m.setAccessible(true);\n                        set.add(m.invoke(ap));\n                        currentSize = set.size();\n                    }\n                } catch (IllegalAccessException | InvocationTargetException e) {\n                    throw new RuntimeException(e);\n                }\n                if (m.isAnnotationPresent(Deterministic.class)) {\n                    assertThat(set)\n                        .as(\"Class: \" + ap.getClass().getName()\n                            + \", method: \" + m.getName() + \" should have the same return value\")\n                        .hasSize(1);\n                } else {\n                    assertThat(set)\n                        .as(\"Class: \" + ap.getClass().getName()\n                            + \", method: \" + m.getName() + \" should generate different return values\")\n                        .hasSizeGreaterThan(1);\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/FakerTest.java", "class_name": "FakerTest", "class_uri": "src/test/java/net/datafaker/FakerTest.java.FakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateFiniteStream()", "name": "generateFiniteStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateFiniteStream()", "original_string": "    @Test\n    void generateFiniteStream() {\n        Stream<String> finiteNames = faker.<String>stream()\n            .suppliers(() -> faker.name().firstName(), () -> faker.name().lastName())\n            .minLen(3)\n            .maxLen(5)\n            .generate();\n        assertThat(finiteNames).hasSizeBetween(3, 5);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateInfiniteStream()", "name": "generateInfiniteStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateInfiniteStream()", "original_string": "    @Test\n    void generateInfiniteStream() {\n        Stream<String> infiniteNames = faker.stream(() -> faker.name().firstName())\n            .generate();\n        assertThat(infiniteNames.spliterator().estimateSize()).isEqualTo(Long.MAX_VALUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateStreamOfNames()", "name": "generateStreamOfNames", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateStreamOfNames()", "original_string": "    @Test\n    void generateStreamOfNames() {\n        Stream<String> names = faker.stream(() -> faker.name().firstName())\n            .len(5)\n            .generate();\n        names.forEach(name -> assertThat(name).matches(\"[a-zA-Z']+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateStreamOfDigits()", "name": "generateStreamOfDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateStreamOfDigits()", "original_string": "    @Test\n    void generateStreamOfDigits() {\n        Stream<String> digitsInfinite = faker.stream(() -> faker.number().digit())\n            .generate();\n        digitsInfinite.limit(1_000).forEach(name -> assertThat(name).matches(\"\\\\d\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateNullStream()", "name": "generateNullStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateNullStream()", "original_string": "    @Test\n    void generateNullStream() {\n        Stream<String> names = faker.<String>stream()\n            .suppliers(() -> faker.name().firstName(), () -> faker.name().lastName())\n            .nullRate(1d)\n            .len(10)\n            .generate();\n        names.forEach(name -> assertThat(name).isNull());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]illegalNullRate(double)", "name": "illegalNullRate", "arg_nums": 1, "params": [{"name": "nullRate", "type": "double"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})\n    void illegalNullRate(double nullRate)", "original_string": "    @ParameterizedTest\n    @ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})\n    void illegalNullRate(double nullRate) {\n        assertThatThrownBy(\n            () -> faker.stream()\n                .suppliers(() -> faker.name().firstName(), () -> faker.name().lastName())\n                .nullRate(nullRate)\n                .minLen(3)\n                .maxLen(5)\n                .generate())\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Null rate should be between 0 and 1 (received: \" + nullRate + \")\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateStreamPassingSuppliersAsList()", "name": "generateStreamPassingSuppliersAsList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateStreamPassingSuppliersAsList()", "original_string": "    @Test\n    void generateStreamPassingSuppliersAsList() {\n        BaseFaker faker = new BaseFaker();\n        List<Supplier<String>> suppliers = List.of(() -> faker.name().firstName(), () -> faker.name().lastName());\n        Stream<String> stream = faker.stream(suppliers).len(3).generate();\n\n        assertThat(stream.collect(Collectors.toList())).hasSize(3);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateStreamWithRepeatableFaker()", "name": "generateStreamWithRepeatableFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateStreamWithRepeatableFaker()", "original_string": "    @Test\n    void generateStreamWithRepeatableFaker() {\n        BaseFaker seededFaker = new BaseFaker(new Random(10L));\n\n        Stream<String> names = faker.<String>stream()\n            .faker(seededFaker)\n            .suppliers(() -> seededFaker.name().firstName(), () -> seededFaker.name().lastName())\n            .minLen(1)\n            .maxLen(20)\n            .generate();\n\n        List<String> namesList = names.collect(Collectors.toList());\n        assertThat(namesList).hasSize(14);\n        assertThat(namesList.get(0)).isEqualTo(\"Flor\");\n        assertThat(namesList.get(1)).isEqualTo(\"Brian\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]generateStreamWithDifferentObjects()", "name": "generateStreamWithDifferentObjects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateStreamWithDifferentObjects()", "original_string": "    @Test\n    void generateStreamWithDifferentObjects() {\n        Stream<Object> objects = faker.stream()\n            .suppliers(() -> faker.name().firstName(), () -> faker.random().nextInt(100))\n            .maxLen(5)\n            .generate();\n\n        objects.forEach(object -> assertThat(object).isInstanceOfAny(Integer.class, String.class));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]checkWrongArguments()", "name": "checkWrongArguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checkWrongArguments()", "original_string": "    @Test\n    void checkWrongArguments() {\n        assertThatThrownBy(() ->\n            faker.stream()\n                .suppliers(() -> faker.name().firstName())\n                .minLen(10)\n                .maxLen(5)\n                .generate())\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Max length (5) must be not less than min length (10) and not negative\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]singletonTest()", "name": "singletonTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void singletonTest()", "original_string": "    @RepeatedTest(10)\n    void singletonTest() {\n        int limit = 10;\n        assertThat(faker.stream()\n            .minLen(limit)\n            .maxLen(limit)\n            .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n            .build()\n            .singleton()\n        ).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]isInfiniteTest()", "name": "isInfiniteTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void isInfiniteTest()", "original_string": "    @Test\n    void isInfiniteTest() {\n        FakeSequence<String> infiniteNames = faker.stream(() -> faker.name().firstName())\n            .build();\n        assertThat(infiniteNames.isInfinite()).isTrue();\n\n        FakeSequence<String> finiteNames = faker.stream(() -> faker.name().firstName())\n            .len(5)\n            .build();\n        assertThat(finiteNames.isInfinite()).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]toCsv()", "name": "toCsv", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toCsv()", "original_string": "    @Test\n    void toCsv() {\n        String separator = \"$$$\";\n        int limit = 5;\n        FakeSequence<Data> stream = faker.<Data>stream()\n            .minLen(limit)\n            .maxLen(limit)\n            .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n            .build();\n\n        CsvTransformer<Data> csvTransformer = CsvTransformer\n            .<Data>builder().header(true).separator(separator).build();\n        String csv = csvTransformer.generate(stream,\n            Schema.of(\n                field(\"name\", Data::name),\n                field(\"value\", Data::value),\n                field(\"range\", Data::range),\n                field(\"unit\", Data::unit)));\n\n        int numberOfLines = 0;\n        int numberOfSeparator = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, System.lineSeparator(), 0, System.lineSeparator().length())) {\n                numberOfLines++;\n            } else if (csv.regionMatches(i, separator, 0, separator.length())) {\n                numberOfSeparator++;\n            }\n        }\n\n        assertThat(numberOfLines).isEqualTo(5);\n        assertThat(numberOfSeparator).isEqualTo(18); // number of lines * (number of columns - 1)\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]toCsvFromInfiniteSequence()", "name": "toCsvFromInfiniteSequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toCsvFromInfiniteSequence()", "original_string": "    @Test\n    void toCsvFromInfiniteSequence() {\n        String separator = \"$$$\";\n        FakeSequence<Data> infiniteStream = faker.<Data>stream()\n            .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n            .build();\n\n        assertThatThrownBy(() ->\n            CsvTransformer.<Data>builder().separator(separator).build()\n                .generate(infiniteStream,\n                    Schema.of(\n                        field(\"name\", Data::name),\n                        field(\"value\", Data::value),\n                        field(\"range\", Data::range),\n                        field(\"unit\", Data::unit)))\n        ).isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"The sequence should be finite of size: FakeStream{minLength=-1, maxLength=-1, nullRate=0.0}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]toJson()", "name": "toJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toJson()", "original_string": "    @Test\n    void toJson() {\n        int limit = 10;\n        FakeSequence<Data> stream = faker.<Data>collection()\n            .minLen(limit)\n            .maxLen(limit)\n            .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n            .build();\n\n        JsonTransformer<Data> transformer = JsonTransformer.<Data>builder().build();\n\n        String json = transformer.generate(stream, Schema.of(\n            field(\"name\", Data::name),\n            field(\"value\", Data::value),\n            field(\"range\", Data::range),\n            field(\"unit\", Data::unit)\n        ));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < json.length(); i++) {\n            if (json.regionMatches(i, \"},\", 0, \"},\".length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(limit - 1).isEqualTo(numberOfLines); // limit - 1 since for the last line there is no comma\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]toJsonFromInfiniteSequence()", "name": "toJsonFromInfiniteSequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toJsonFromInfiniteSequence()", "original_string": "    @Test\n    void toJsonFromInfiniteSequence() {\n        FakeSequence<Data> infiniteStream = faker.<Data>stream()\n            .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n            .build();\n\n        assertThatThrownBy(() ->\n            JsonTransformer.<Data>builder().build()\n                .generate(infiniteStream,\n                    Schema.of(\n                        field(\"name\", Data::name),\n                        field(\"value\", Data::value),\n                        field(\"range\", Data::range),\n                        field(\"unit\", Data::unit)))\n        ).isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"The sequence should be finite of size: FakeStream{minLength=-1, maxLength=-1, nullRate=0.0}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]toNestedJson()", "name": "toNestedJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toNestedJson()", "original_string": "    @Test\n    void toNestedJson() {\n        final int limit = 3;\n        JsonTransformer<Name> transformer = JsonTransformer.<Name>builder().build();\n\n        FakeSequence<CompositeField<Address, String>> secondaryAddresses =\n            faker.<CompositeField<Address, String>>collection()\n                .suppliers(() ->\n                    compositeField(null, new Field[]{\n                        field(\"country\", () -> faker.address().country()),\n                        field(\"city\", () -> faker.address().city()),\n                        field(\"zipcode\", () -> faker.address().zipCode()),\n                        field(\"streetAddress\", () -> faker.address().streetAddress())\n                    })\n                )\n                .maxLen(1)\n                .minLen(1)\n                .build();\n\n        String json = transformer.generate(\n            faker.<Name>stream()\n                .suppliers(faker::name)\n                .maxLen(limit)\n                .minLen(limit)\n                .build(),\n            Schema.<Name, Object>of(\n                compositeField(\"primaryAddress\", new Field[]{\n                    field(\"country\", () -> faker.address().country()),\n                    field(\"city\", () -> faker.address().city()),\n                    field(\"zipcode\", () -> faker.address().zipCode()),\n                    field(\"streetAddress\", () -> faker.address().streetAddress())\n                }),\n                field(\"secondaryAddresses\", secondaryAddresses::get),\n                field(\"phones\", name -> faker.<String>collection().suppliers(() -> faker.phoneNumber().phoneNumber()).maxLen(3).build().get())\n            ));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < json.length(); i++) {\n            if (json.regionMatches(i, \"},\" + System.lineSeparator(), 0, (\"},\" + System.lineSeparator()).length())) {\n                numberOfLines++;\n            }\n        }\n        assertThat(numberOfLines).isEqualTo(limit - 1); // limit - 1 since for the last line there is no comma\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIterator()", "original_string": "    @Test\n    void testIterator() {\n        int fakeSequenceSize = 100;\n        FakeSequence<String> digits = faker\n            .stream(() -> faker.number().digit())\n            .len(fakeSequenceSize)\n            .build();\n\n        int count = 0;\n        for (String digit : digits) {\n            assertThat(digit).matches(\"\\\\d\");\n            count++;\n        }\n\n        assertThat(count).isEqualTo(fakeSequenceSize);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest.[void]testIteratorInfinite()", "name": "testIteratorInfinite", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIteratorInfinite()", "original_string": "    @Test\n    void testIteratorInfinite() {\n        FakeSequence<String> digits = faker\n            .stream(() -> faker.number().digit())\n            .build();\n\n        assertThat(digits.isInfinite()).isTrue();\n\n        int count = 0;\n        int amountOfElementsToTake = 1_000;\n        for (String digit : digits) {\n            assertThat(digit).matches(\"\\\\d\");\n            count++;\n            if (count == amountOfElementsToTake) {\n                break;\n            }\n        }\n\n        assertThat(count).isEqualTo(amountOfElementsToTake);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "class_name": "FakeStreamTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeStreamTest.java.FakeStreamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateCollection()", "name": "generateCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateCollection()", "original_string": "    @Test\n    void generateCollection() {\n        List<String> names = faker.<String>collection()\n            .suppliers(() -> faker.name().firstName(), () -> faker.name().lastName())\n            .minLen(3)\n            .maxLen(5).build().get();\n        assertThat(names).hasSizeBetween(3, 5);\n        for (String name : names) {\n            assertThat(name).matches(\"[a-zA-Z']+\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateSequence()", "name": "generateSequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateSequence()", "original_string": "    @Test\n    void generateSequence() {\n        List<String> digits = faker\n            .collection(() -> faker.number().digit())\n            .len(3, 10).generate();\n        assertThat(digits).hasSizeBetween(3, 10);\n        for (String digit : digits) {\n            assertThat(digit).matches(\"\\\\d\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateSequenceOfDefaultSize()", "name": "generateSequenceOfDefaultSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateSequenceOfDefaultSize()", "original_string": "    @Test\n    void generateSequenceOfDefaultSize() {\n        List<String> digits = faker\n            .collection(() -> faker.number().digit())\n            .generate();\n        assertThat(digits).hasSize(10);\n\n        digits = faker\n            .collection(() -> faker.number().digit())\n            .maxLen(-175)\n            .generate();\n        assertThat(digits).hasSize(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateEmptySequence()", "name": "generateEmptySequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateEmptySequence()", "original_string": "    @Test\n    void generateEmptySequence() {\n        List<Number> digits = faker\n            .collection(() -> faker.number().digit())\n            .maxLen(0)\n            .generate();\n        assertThat(digits).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]isInfiniteTest()", "name": "isInfiniteTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void isInfiniteTest()", "original_string": "    @Test\n    void isInfiniteTest() {\n        FakeSequence<String> digits = faker\n            .collection(() -> faker.number().digit())\n            .build();\n        assertThat(digits.isInfinite()).isFalse();\n\n        digits = faker\n            .collection(() -> faker.number().digit())\n            .minLen(3)\n            .maxLen(5)\n            .build();\n        assertThat(digits.isInfinite()).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateSequence5()", "name": "generateSequence5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateSequence5()", "original_string": "    @Test\n    void generateSequence5() {\n        List<String> digits = faker\n            .collection(() -> faker.number().digit())\n            .len(5).generate();\n        assertThat(digits).hasSize(5);\n        for (String digit : digits) {\n            assertThat(digit).matches(\"\\\\d\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateNullCollection()", "name": "generateNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateNullCollection()", "original_string": "    @Test\n    void generateNullCollection() {\n        List<String> names = faker.<String>collection()\n            .suppliers(() -> faker.name().firstName(), () -> faker.name().lastName())\n            .nullRate(1d)\n            .minLen(3)\n            .maxLen(5).build().get();\n        assertThat(names).hasSizeBetween(3, 5);\n        for (String name : names) {\n            assertThat(name).isNull();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]illegalNullRate(double)", "name": "illegalNullRate", "arg_nums": 1, "params": [{"name": "nullRate", "type": "double"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})\n    void illegalNullRate(double nullRate)", "original_string": "    @ParameterizedTest\n    @ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})\n    void illegalNullRate(double nullRate) {\n        assertThatThrownBy(\n            () -> faker.collection()\n                .suppliers(() -> faker.name().firstName(), () -> faker.name().lastName())\n                .nullRate(nullRate)\n                .minLen(3)\n                .maxLen(5).build().get())\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Null rate should be between 0 and 1 (received: \" + nullRate + \")\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(doubles = {Long.MIN_VALUE, Integer.MIN_VALUE, -1, -0.3, 2, 3, Integer.MAX_VALUE, Double.MAX_VALUE})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateCollectionPassingSuppliersAsList()", "name": "generateCollectionPassingSuppliersAsList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateCollectionPassingSuppliersAsList()", "original_string": "    @Test\n    void generateCollectionPassingSuppliersAsList() {\n        BaseFaker seededFaker = new BaseFaker(new Random(10L));\n        List<Supplier<String>> suppliers = List.of(() -> faker.name().firstName(), () -> faker.name().lastName());\n\n        List<String> names = faker.collection(suppliers).faker(seededFaker).len(3).generate();\n        assertThat(names).hasSize(3);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateCollectionWithRepeatableFaker()", "name": "generateCollectionWithRepeatableFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateCollectionWithRepeatableFaker()", "original_string": "    @Test\n    void generateCollectionWithRepeatableFaker() {\n        BaseFaker seededFaker = new BaseFaker(new Random(10L));\n\n        List<String> names = faker.<String>collection()\n            .faker(seededFaker)\n            .suppliers(() -> seededFaker.name().firstName(), () -> seededFaker.name().lastName())\n            .minLen(1)\n            .maxLen(20).build().get();\n\n        assertThat(names).hasSize(14);\n        assertThat(names.get(0)).isEqualTo(\"Flor\");\n        assertThat(names.get(1)).isEqualTo(\"Brian\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]generateCollectionWithDifferentObjects()", "name": "generateCollectionWithDifferentObjects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateCollectionWithDifferentObjects()", "original_string": "    @Test\n    void generateCollectionWithDifferentObjects() {\n        List<Object> objects = faker.collection()\n            .suppliers(() -> faker.name().firstName(), () -> faker.random().nextInt(100))\n            .maxLen(5).build().get();\n        assertThat(objects).hasSize(5);\n        for (Object object : objects) {\n            assertThat(object).isInstanceOfAny(Integer.class, String.class);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]checkWrongArguments()", "name": "checkWrongArguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checkWrongArguments()", "original_string": "    @Test\n    void checkWrongArguments() {\n        assertThatThrownBy(() ->\n            faker.collection()\n                .suppliers(() -> faker.name().firstName())\n                .minLen(10)\n                .maxLen(5).build().get())\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Max length (5) must be not less than min length (10) and not negative\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]toCsv()", "name": "toCsv", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toCsv()", "original_string": "    @Test\n    void toCsv() {\n        String separator = \"$$$\";\n        int limit = 5;\n        CsvTransformer<Data> csvTransformer = CsvTransformer.<Data>builder().header(true).separator(separator).build();\n        String csv = csvTransformer.generate(\n            faker.collection(BloodPressure::new, Glucose::new, Temperature::new)\n                .len(limit).generate(),\n            Schema.of(\n                field(\"name\", Data::name),\n                field(\"value\", Data::value),\n                field(\"range\", Data::range),\n                field(\"unit\", Data::unit)));\n        int numberOfLines = 0;\n        int numberOfSeparator = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, System.lineSeparator(), 0, System.lineSeparator().length())) {\n                numberOfLines++;\n            } else if (csv.regionMatches(i, separator, 0, separator.length())) {\n                numberOfSeparator++;\n            }\n        }\n        assertThat(limit).isEqualTo(numberOfLines);\n        assertThat((limit + 1) * (4 - 1)).isEqualTo(numberOfSeparator); // number of lines * (number of columns - 1)\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]toJson()", "name": "toJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toJson()", "original_string": "    @Test\n    void toJson() {\n        int limit = 10;\n\n        JsonTransformer<Data> transformer = JsonTransformer.<Data>builder().build();\n\n        String json = transformer.generate(\n            faker.<Data>collection().minLen(limit).maxLen(limit)\n                .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n                .build(), Schema.of(\n                field(\"name\", Data::name),\n                field(\"value\", Data::value),\n                field(\"range\", Data::range),\n                field(\"unit\", Data::unit)\n            ));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < json.length(); i++) {\n            if (json.regionMatches(i, \"},\", 0, \"},\".length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(limit - 1).isEqualTo(numberOfLines); // limit - 1 since for the last line there is no comma\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]toNestedJson()", "name": "toNestedJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toNestedJson()", "original_string": "    @Test\n    void toNestedJson() {\n        final int limit = 2;\n        JsonTransformer<Name> transformer = JsonTransformer.<Name>builder().build();\n\n        FakeSequence<CompositeField<Address, String>> secondaryAddresses =\n            faker.<CompositeField<Address, String>>collection()\n            .suppliers(() ->\n                compositeField(null, new Field[]{\n                    field(\"country\", () -> faker.address().country()),\n                    field(\"city\", () -> faker.address().city()),\n                    field(\"zipcode\", () -> faker.address().zipCode()),\n                    field(\"streetAddress\", () -> faker.address().streetAddress())\n                })\n            )\n            .maxLen(1)\n            .minLen(1)\n            .build();\n\n        String json = transformer.generate(\n            faker.<Name>collection().minLen(limit).maxLen(limit)\n                .suppliers(faker::name)\n                .build(),\n            Schema.of(\n                compositeField(\"primaryAddress\", new Field[]{\n                    field(\"country\", () -> faker.address().country()),\n                    field(\"city\", () -> faker.address().city()),\n                    field(\"zipcode\", () -> faker.address().zipCode()),\n                    field(\"streetAddress\", () -> faker.address().streetAddress())\n                }),\n                field(\"secondaryAddresses\", secondaryAddresses::get),\n                field(\"phones\", name -> faker.collection().suppliers(() -> faker.phoneNumber().phoneNumber()).maxLen(3).build().get())\n            ));\n\n\n        int numberOfLines = 0;\n        for (int i = 0; i < json.length(); i++) {\n            if (json.regionMatches(i, \"},\" + System.lineSeparator(), 0, (\"},\" + System.lineSeparator()).length())) {\n                numberOfLines++;\n            }\n        }\n        assertThat(numberOfLines).isEqualTo(limit - 1); // limit - 1 since for the last line there is no comma\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]singletonTest()", "name": "singletonTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void singletonTest()", "original_string": "    @RepeatedTest(10)\n    void singletonTest() {\n        int limit = 10;\n        assertThat(faker.<Data>collection().minLen(limit).maxLen(limit)\n            .suppliers(BloodPressure::new, Glucose::new, Temperature::new)\n            .build().singleton()).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIterator()", "original_string": "    @Test\n    void testIterator() {\n        int fakeSequenceSize = 10;\n        FakeSequence<String> digits = faker\n            .collection(() -> faker.number().digit())\n            .len(fakeSequenceSize)\n            .build();\n\n        int count = 0;\n        for (String digit : digits) {\n            assertThat(digit).matches(\"\\\\d\");\n            count++;\n        }\n\n        assertThat(count).isEqualTo(fakeSequenceSize);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "class_name": "FakeCollectionTest", "class_uri": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java.FakeCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HololiveTest.java.HololiveTest.[void]talent_jaLocale()", "name": "talent_jaLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void talent_jaLocale()", "original_string": "    @Test\n    void talent_jaLocale() {\n        assertThat(JA_FAKER.hololive().talent()).matches(\"^AZKi|[\\\\u3040-\\\\u30FF\\\\u4E00-\\\\u9FAF]+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HololiveTest.java", "class_name": "HololiveTest", "class_uri": "src/test/java/net/datafaker/providers/base/HololiveTest.java.HololiveTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]textShouldContain3RULowerCaseAnd5CustomSpecialSymbols()", "name": "textShouldContain3RULowerCaseAnd5CustomSpecialSymbols", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void textShouldContain3RULowerCaseAnd5CustomSpecialSymbols()", "original_string": "    @Test\n    void textShouldContain3RULowerCaseAnd5CustomSpecialSymbols() {\n        final String ruLowerCase = \"\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\";\n        final String customSpecialSymbols = \"!@#$%^&*;'][{}\";\n        final int ruCnt = 3;\n        final int specSmbCnt = 5;\n        final Text.TextRuleConfig config = Text.TextSymbolsBuilder.builder()\n            .len(faker.number().numberBetween(ruCnt + specSmbCnt, Math.max(ruCnt + specSmbCnt, 10)))\n            .with(ruLowerCase, ruCnt)\n            .with(customSpecialSymbols, specSmbCnt).build();\n\n        for (int i = 0; i < 10; i++) {\n            final String text = faker.text().text(config);\n            assertThat(text).matches(s -> {\n                int j = 0;\n                int curRuCnt = 0;\n                while (j < s.length() && curRuCnt < ruCnt) {\n                    if (ruLowerCase.indexOf(s.charAt(j++)) >= 0) curRuCnt++;\n                }\n                return curRuCnt >= ruCnt;\n            }).matches(s -> {\n                int j = 0;\n                int curSpecSmbCnt = 0;\n                while (j < s.length() && curSpecSmbCnt < specSmbCnt) {\n                    if (customSpecialSymbols.indexOf(s.charAt(j++)) >= 0) curSpecSmbCnt++;\n                }\n                return curSpecSmbCnt >= specSmbCnt;\n            });\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]exceptionIfLengthIsShorterThanNumberOfRequiredSymbols()", "name": "exceptionIfLengthIsShorterThanNumberOfRequiredSymbols", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void exceptionIfLengthIsShorterThanNumberOfRequiredSymbols()", "original_string": "    @Test\n    void exceptionIfLengthIsShorterThanNumberOfRequiredSymbols() {\n        assertThatThrownBy(() ->\n            faker.text().text(Text.TextSymbolsBuilder.builder()\n                .len(1)\n                .with(EN_LOWERCASE, 1)\n                .with(EN_UPPERCASE, 1)\n                .with(DIGITS, 1)\n                .throwIfLengthSmall(true)\n                .build()))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]everyTextShouldContainLowerCaseUpperCaseAndDigit()", "name": "everyTextShouldContainLowerCaseUpperCaseAndDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void everyTextShouldContainLowerCaseUpperCaseAndDigit()", "original_string": "    @Test\n    void everyTextShouldContainLowerCaseUpperCaseAndDigit() {\n        int count = 0;\n        final Text.TextRuleConfig config = Text.TextSymbolsBuilder.builder()\n            .len(faker.number().numberBetween(6, 10))\n            .with(EN_LOWERCASE, 1)\n            .with(EN_UPPERCASE, 1)\n            .with(DIGITS, 1).build();\n        while (count++ < 1000) {\n            String text = faker.text().text(config);\n            assertThat(text).is(new Condition<>(pw -> {\n                    for (int i = 0; i < pw.length(); i++) {\n                        if (Character.isLowerCase(pw.charAt(i))) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }, \"contains lower case\"))\n                .is(new Condition<>(pw -> {\n                    for (int i = 0; i < pw.length(); i++) {\n                        if (Character.isUpperCase(pw.charAt(i))) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }, \"contains upper case\"))\n                .is(new Condition<>(pw -> {\n                    for (int i = 0; i < pw.length(); i++) {\n                        if (Character.isDigit(pw.charAt(i))) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }, \"contains upper case\"));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]testCharacter()", "name": "testCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharacter()", "original_string": "    @Test\n    void testCharacter() {\n        final Pattern characterPattern = Pattern.compile(\"[A-Za-z]\");\n        for (int i = 0; i < 100; i++) {\n            Character character = faker.text().character();\n            assertThat(character.toString()).matches(characterPattern);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]testUppercaseCharacter()", "name": "testUppercaseCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest((100))\n    void testUppercaseCharacter()", "original_string": "    @RepeatedTest((100))\n    void testUppercaseCharacter() {\n        Character character = faker.text().uppercaseCharacter();\n        assertThat(character).isUpperCase();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@RepeatedTest((100))", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest((100))"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]testLowercaseCharacter()", "name": "testLowercaseCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest((100))\n    void testLowercaseCharacter()", "original_string": "    @RepeatedTest((100))\n    void testLowercaseCharacter() {\n        Character character = faker.text().lowercaseCharacter();\n        assertThat(character).isLowerCase();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@RepeatedTest((100))", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest((100))"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]testFixedLengthText()", "name": "testFixedLengthText", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFixedLengthText()", "original_string": "    @Test\n    void testFixedLengthText() {\n        for (int i = 0; i < 100; i++) {\n            String text = faker.text().text(i);\n            assertThat(text).hasSize(i);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest.[void]testDefaultLengthText()", "name": "testDefaultLengthText", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDefaultLengthText()", "original_string": "    @Test\n    void testDefaultLengthText() {\n        for (int i = 0; i < 100; i++) {\n            String text = faker.text().text();\n            assertThat(text).hasSizeBetween(20, 80);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TextTest.java", "class_name": "TextTest", "class_uri": "src/test/java/net/datafaker/providers/base/TextTest.java.TextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FamousLastWordsTest.java.FamousLastWordsTest.[void]testLastWords()", "name": "testLastWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(1000)\n    void testLastWords()", "original_string": "    @RepeatedTest(1000)\n    void testLastWords() {\n        assertThat(faker.famousLastWords().lastWords()).matches(\"^[A-Za-z- .,'!?-\u2026]+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FamousLastWordsTest.java", "class_name": "FamousLastWordsTest", "class_uri": "src/test/java/net/datafaker/providers/base/FamousLastWordsTest.java.FamousLastWordsTest", "attributes": {"modifiers": "@RepeatedTest(1000)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(1000)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[void]testName()", "name": "testName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testName()", "original_string": "    @Test\n    void testName() {\n        assertThat(company.name()).matches(\"[A-Za-z\\\\-&',. ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[void]testBuzzword()", "name": "testBuzzword", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBuzzword()", "original_string": "    @Test\n    void testBuzzword() {\n        assertThat(company.buzzword()).matches(\"(\\\\w+[ /-]?){1,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[void]testCatchPhrase()", "name": "testCatchPhrase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCatchPhrase()", "original_string": "    @Test\n    void testCatchPhrase() {\n        assertThat(company.catchPhrase()).matches(PHRASE_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[void]testBs()", "name": "testBs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBs()", "original_string": "    @Test\n    void testBs() {\n        assertThat(company.bs()).matches(PHRASE_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[void]testLogo()", "name": "testLogo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLogo()", "original_string": "    @Test\n    void testLogo() {\n        assertThat(company.logo()).matches(\"https://pigment.github.io/fake-logos/logos/medium/color/\\\\d+\\\\.png\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[void]testUrl()", "name": "testUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testUrl()", "original_string": "    @RepeatedTest(100)\n    void testUrl() {\n        assertThat(company.url()).matches(URL_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_getPrivateIpV4AddressTest.java.Internet_getPrivateIpV4AddressTest.[void]testGetPrivateIpV4Address()", "name": "testGetPrivateIpV4Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetPrivateIpV4Address()", "original_string": "    @Test\n    public void testGetPrivateIpV4Address() throws UnknownHostException {\n        // Given\n        when(randomService.nextInt(256)).thenReturn(10, 20, 30); // second, third, fourth octets\n        when(randomService.nextInt(5)).thenReturn(0); // first octet index\n\n        // When\n        InetAddress result = internet.getPrivateIpV4Address();\n\n        // Then\n        assertEquals(\"10.10.20.30\", result.getHostAddress());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_getPrivateIpV4AddressTest.java", "class_name": "Internet_getPrivateIpV4AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_getPrivateIpV4AddressTest.java.Internet_getPrivateIpV4AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java.GreekPhilosopherTest.[void]testName()", "name": "testName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testName()", "original_string": "    @RepeatedTest(10)\n    void testName() {\n        assertThat(faker.greekPhilosopher().name()).matches(\"^[a-zA-Z ]+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java", "class_name": "GreekPhilosopherTest", "class_uri": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java.GreekPhilosopherTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java.GreekPhilosopherTest.[void]testQuote()", "name": "testQuote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testQuote()", "original_string": "    @RepeatedTest(10)\n    void testQuote() {\n        assertThat(faker.greekPhilosopher().quote()).matches(\"^[a-zA-Z ,.']+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java", "class_name": "GreekPhilosopherTest", "class_uri": "src/test/java/net/datafaker/providers/base/GreekPhilosopherTest.java.GreekPhilosopherTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SuperheroTest.java.SuperheroTest.[void]testName()", "name": "testName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testName()", "original_string": "    @Test\n    void testName() {\n        assertThat(faker.superhero().name()).matches(\"[A-Za-z' -/]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SuperheroTest.java", "class_name": "SuperheroTest", "class_uri": "src/test/java/net/datafaker/providers/base/SuperheroTest.java.SuperheroTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFaker_getProviderTest.java.BaseFaker_getProviderTest.[void]testGetProvider()", "name": "testGetProvider", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetProvider()", "original_string": "    @Test\n    void testGetProvider() {\n        // Given\n        Class<AbstractProvider<ProviderRegistration>> clazz = (Class<AbstractProvider<ProviderRegistration>>) (Class<?>) AbstractProvider.class;\n        Function<ProviderRegistration, AbstractProvider<ProviderRegistration>> valueSupplier = mock(Function.class);\n        AbstractProvider<ProviderRegistration> expectedProvider = mock(AbstractProvider.class);\n        when(valueSupplier.apply(any())).thenReturn(expectedProvider);\n\n        // When\n        AbstractProvider<ProviderRegistration> result = baseFaker.getProvider(clazz, valueSupplier);\n\n        // Then\n        assertEquals(expectedProvider, result);\n        verify(providersCache).computeIfAbsent(eq(clazz), any());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFaker_getProviderTest.java", "class_name": "BaseFaker_getProviderTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFaker_getProviderTest.java.BaseFaker_getProviderTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LanguageCodeTest.java.LanguageCodeTest.[void]languageCodeISO639ShouldBe2LettersInLength()", "name": "languageCodeISO639ShouldBe2LettersInLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void languageCodeISO639ShouldBe2LettersInLength()", "original_string": "    @Test\n    void languageCodeISO639ShouldBe2LettersInLength() {\n        final LanguageCode languageCode = faker.languageCode();\n        assertThat(languageCode.iso639()).hasSize(2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LanguageCodeTest.java", "class_name": "LanguageCodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/LanguageCodeTest.java.LanguageCodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest.[void]creditCardNumber()", "name": "creditCardNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void creditCardNumber()", "original_string": "    @Test\n    void creditCardNumber() {\n        assertThat(business.creditCardNumber()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BusinessTest.java", "class_name": "BusinessTest", "class_uri": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest.[void]creditCardExpiry()", "name": "creditCardExpiry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void creditCardExpiry()", "original_string": "    @Test\n    void creditCardExpiry() {\n        // Given / When\n        String date = business.creditCardExpiry();\n        // Then\n        assertThat(date).isNotEmpty();\n        assertThat(date).matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BusinessTest.java", "class_name": "BusinessTest", "class_uri": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest.[void]securityCode()", "name": "securityCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void securityCode()", "original_string": "    @Test\n    void securityCode() {\n        assertThat(business.securityCode()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BusinessTest.java", "class_name": "BusinessTest", "class_uri": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest.[void]isValidCNPJ()", "name": "isValidCNPJ", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(1000)\n    void isValidCNPJ()", "original_string": "    @RepeatedTest(1000)\n    void isValidCNPJ() {\n        CNPJ cnpj = faker.cnpj();\n        assertThat(isCNPJValid(cnpj.valid())).describedAs(\"Current value \" + cnpj).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "class_name": "CNPJTest", "class_uri": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest", "attributes": {"modifiers": "@RepeatedTest(1000)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(1000)"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nA valid CNPJ is either a real number or a generated valid number.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest.[void]isInvalidCNPJ()", "name": "isInvalidCNPJ", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(1000)\n    void isInvalidCNPJ()", "original_string": "    @RepeatedTest(1000)\n    void isInvalidCNPJ() {\n        CNPJ cnpj = faker.cnpj();\n        assertThat(isCNPJValid(cnpj.invalid())).describedAs(\"Current value \" + cnpj).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "class_name": "CNPJTest", "class_uri": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest", "attributes": {"modifiers": "@RepeatedTest(1000)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(1000)"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nA invalid CNPJ is that does not meet the requirements of the algorithm\n"}, {"uris": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest.[void]valid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001()", "name": "valid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void valid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001()", "original_string": "    @Test\n    void valid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001() {\n        final CNPJ cnpj1 = faker.cnpj();\n        String cnpj = cnpj1.valid(true, true);\n        String branch = cnpj.substring(11, 15);\n\n        // branches are allowed to be 0001 even in multibranch mode. In this case,\n        // we are giving the system 5 chances to generate something different than 0001.\n        for (int i = 0; \"0001\".equals(branch) && i < 5; i++) {\n            cnpj = cnpj1.valid(true, true);\n            branch = cnpj.substring(11, 15);\n        }\n\n        assertThat(parseInt(branch)).isGreaterThan(1);\n        assertThat(isCNPJValid(cnpj)).describedAs(\"Current value \" + cnpj).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "class_name": "CNPJTest", "class_uri": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest.[void]invalid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001()", "name": "invalid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(1000)\n    void invalid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001()", "original_string": "    @RepeatedTest(1000)\n    void invalid_multiBranchIsTrue_shouldGenerateCNPJWithBranchNumberGreaterThan0001() {\n        final CNPJ cnpj1 = faker.cnpj();\n        String cnpj = cnpj1.invalid(true, true);\n        String branch = cnpj.substring(11, 15);\n\n        // branches are allowed to be 0001 even in multibranch mode. In this case,\n        // we are giving the system 5 chances to generate something different than 0001.\n        for (int i = 0; \"0001\".equals(branch) && i < 5 || \"0000\".equals(branch); i++) {\n            cnpj = cnpj1.invalid(true, true);\n            branch = cnpj.substring(11, 15);\n        }\n\n        assertThat(parseInt(branch)).describedAs(\"Branch \" + branch).isGreaterThan(1);\n        assertThat(isCNPJValid(cnpj)).describedAs(\"Current value \" + cnpj).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "class_name": "CNPJTest", "class_uri": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest", "attributes": {"modifiers": "@RepeatedTest(1000)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(1000)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest.[void]bug()", "name": "bug", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bug()", "original_string": "    @Test\n    void bug() {\n        isCNPJValid(\"57.615.644/1633-29\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "class_name": "CNPJTest", "class_uri": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest.[void]formattedCNPJ()", "name": "formattedCNPJ", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void formattedCNPJ()", "original_string": "    @Test\n    void formattedCNPJ() {\n        final Pattern cnpjExpression = Pattern.compile(\"(^\\\\d{2}\\\\x2E\\\\d{3}\\\\x2E\\\\d{3}\\\\x2F\\\\d{4}\\\\x2D\\\\d{2}$)\");\n\n        final CNPJ cnpj = faker.cnpj();\n        assertThat(cnpj.valid()).matches(cnpjExpression);\n        assertThat(cnpj.valid(true)).matches(cnpjExpression);\n        assertThat(cnpj.invalid()).matches(cnpjExpression);\n        assertThat(cnpj.invalid(true)).matches(cnpjExpression);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CNPJTest.java", "class_name": "CNPJTest", "class_uri": "src/test/java/net/datafaker/providers/base/CNPJTest.java.CNPJTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCNPJ has a main format. This test validate if the number is on the correct format\nEg: 11.111.111/0001-11\n"}, {"uris": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest.[void]scientificName()", "name": "scientificName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void scientificName()", "original_string": "    @RepeatedTest(100)\n    void scientificName() {\n        assertThat(animal.scientificName()).matches(\"[A-Z][a-z]+ [a-z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AnimalTest.java", "class_name": "AnimalTest", "class_uri": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest.[void]genus()", "name": "genus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void genus()", "original_string": "    @RepeatedTest(100)\n    void genus() {\n        assertThat(animal.genus()).matches(\"[A-Z][a-z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AnimalTest.java", "class_name": "AnimalTest", "class_uri": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest.[void]species()", "name": "species", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void species()", "original_string": "    @RepeatedTest(100)\n    void species() {\n        assertThat(animal.species()).matches(\"[a-z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AnimalTest.java", "class_name": "AnimalTest", "class_uri": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TireTest.java.TireTest.[void]testDefaultPrefixedCode()", "name": "testDefaultPrefixedCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDefaultPrefixedCode()", "original_string": "    @Test\n    void testDefaultPrefixedCode() {\n        assertThat(tire.code(true)).matches(\"P\" + CODE_PATTERN);\n        assertThat(tire.code(false)).matches(CODE_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TireTest.java", "class_name": "TireTest", "class_uri": "src/test/java/net/datafaker/providers/base/TireTest.java.TireTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TireTest.java.TireTest.[void]testMiscPrefixedCode()", "name": "testMiscPrefixedCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMiscPrefixedCode()", "original_string": "    @Test\n    void testMiscPrefixedCode() {\n        String prefix = \"misc\";\n        assertThat(tire.code(prefix)).matches(prefix + CODE_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TireTest.java", "class_name": "TireTest", "class_uri": "src/test/java/net/datafaker/providers/base/TireTest.java.TireTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java.ObjectMethodsTest.[void]methodByName()", "name": "methodByName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void methodByName()", "original_string": "    @Test\n    void methodByName() throws NoSuchMethodException {\n        assertThat(getMethodByName(person, \"age\")).isEqualTo(Person.class.getMethod(\"age\"));\n        assertThat(getMethodByName(person, \"name\")).isEqualTo(Person.class.getMethod(\"name\"));\n\n        assertThat(getMethodByName(personName, \"firstName\")).isEqualTo(PersonName.class.getMethod(\"firstName\"));\n        assertThat(getMethodByName(personName, \"lastName\")).isEqualTo(PersonName.class.getMethod(\"lastName\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java", "class_name": "ObjectMethodsTest", "class_uri": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java.ObjectMethodsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java.ObjectMethodsTest.[void]methodByReturnType()", "name": "methodByReturnType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void methodByReturnType()", "original_string": "    @Test\n    void methodByReturnType() {\n        assertThat((Age) executeMethodByReturnType(person, \"Age\")).isInstanceOf(Age.class);\n        assertThat((PersonName) executeMethodByReturnType(person, \"PersonName\")).isInstanceOf(PersonName.class);\n        assertThat((String) executeMethodByReturnType(personName, \"String\")).isEqualTo(\"John\");\n        assertThat((CharSequence) executeMethodByReturnType(personName, \"CharSequence\")).isEqualTo(\"Smith\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java", "class_name": "ObjectMethodsTest", "class_uri": "src/test/java/net/datafaker/providers/base/ObjectMethodsTest.java.ObjectMethodsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest.[void]testProviderList(TestSpec,TestInfo)", "name": "testProviderList", "arg_nums": 2, "params": [{"name": "testSpec", "type": "TestSpec"}, {"name": "testInfo", "type": "TestInfo"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}\")\n    @MethodSource(\"providerListTest\")\n    protected void testProviderList(TestSpec testSpec, TestInfo testInfo)", "original_string": "    @ParameterizedTest(name = \"{0}\")\n    @MethodSource(\"providerListTest\")\n    protected void testProviderList(TestSpec testSpec, TestInfo testInfo) {\n        if (testSpec.isDummy) {\n            // skip and log dummy\n            LOG.log(Level.WARNING, \"Dummy test for \" + testInfo.getTestClass().get());\n            return;\n        }\n        // Given\n        Set<String> actual = new HashSet<>(getBaseList(testSpec.key));\n        // When\n        String item = (String) testSpec.supplier.get();\n        // Then\n        assertThat(item).as(\"Check item isn't empty\").isNotEmpty();\n        String collection = \"\\\"\" + testSpec.key + \"\\\"\";\n        assertThat(actual).as(\"Check actual list isn't empty and contains the item for the key \" + collection).isNotEmpty()\n            .anyMatch(item::equals);\n        assertThat(actual).as(\"Actual should not have empty entries. \" + collection).noneMatch(single -> single.isBlank());\n        if (!testSpec.regex.isEmpty()) {\n            assertThat(item).as(\"Check item matches regex\").matches(Pattern.compile(testSpec.regex));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "class_name": "BaseFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}\")\n    @MethodSource(\"providerListTest\")\n    protected", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}\")", "@MethodSource(\"providerListTest\")", "protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest.[void]testNoDuplications(TestSpec)", "name": "testNoDuplications", "arg_nums": 1, "params": [{"name": "testSpec", "type": "TestSpec"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"providerListTest\")\n    void testNoDuplications(TestSpec testSpec)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"providerListTest\")\n    void testNoDuplications(TestSpec testSpec) {\n        if (testSpec.isDummy) {\n            return;\n        }\n\n        var terms = getBaseList(testSpec.key);\n\n        assertThat(new HashSet<>(terms))\n                .as(\"Check no duplications in \" + testSpec.key)\n                .hasSameSizeAs(terms);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "class_name": "BaseFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"providerListTest\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"providerListTest\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldReturnValuesInRandomOrderUsingRandomService()", "name": "fetchFromYaml_shouldReturnValuesInRandomOrderUsingRandomService", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldReturnValuesInRandomOrderUsingRandomService()", "original_string": "    @Test\n    void fetchFromYaml_shouldReturnValuesInRandomOrderUsingRandomService() {\n        String key = \"unique.values\";\n\n        RandomService randomService = Mockito.spy(new RandomService(new Random()));\n        doCallRealMethod().when(randomService).nextInt(anyInt(), anyInt());\n\n        faker = new BaseFaker(new Locale(\"test\"), randomService);\n\n        Set<String> results = new HashSet<>();\n\n        results.add(faker.unique().fetchFromYaml(key));\n        results.add(faker.unique().fetchFromYaml(key));\n        results.add(faker.unique().fetchFromYaml(key));\n        results.add(faker.unique().fetchFromYaml(key));\n        results.add(faker.unique().fetchFromYaml(key));\n\n        assertThat(results)\n            .hasSize(5)\n            .containsAll(defaultValues);\n\n        verify(randomService).nextInt(0, 4);\n        verify(randomService).nextInt(0, 3);\n        verify(randomService).nextInt(0, 2);\n        verify(randomService).nextInt(0, 1);\n        verify(randomService).nextInt(0, 0);\n        verifyNoMoreInteractions(randomService);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldThrowExceptionWhenAllPossibleValuesHaveBeenReturned()", "name": "fetchFromYaml_shouldThrowExceptionWhenAllPossibleValuesHaveBeenReturned", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldThrowExceptionWhenAllPossibleValuesHaveBeenReturned()", "original_string": "    @Test\n    void fetchFromYaml_shouldThrowExceptionWhenAllPossibleValuesHaveBeenReturned() {\n        String key = \"unique.single-value\";\n\n        assertThat(faker.unique().fetchFromYaml(key)).isEqualTo(\"theOnlyValue\");\n        assertThatThrownBy(() -> faker.unique().fetchFromYaml(key))\n            .hasMessage(\"All possible values have been generated for key unique.single-value under locale test\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldReturnValuesBasedOnKeyAndLocale()", "name": "fetchFromYaml_shouldReturnValuesBasedOnKeyAndLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldReturnValuesBasedOnKeyAndLocale()", "original_string": "    @Test\n    void fetchFromYaml_shouldReturnValuesBasedOnKeyAndLocale() {\n        String firstKey = \"unique.first-same-locale-value\";\n        String secondKey = \"unique.second-same-locale-value\";\n\n        String expectedValue = \"theSameValue\";\n\n        assertThat(faker.unique().fetchFromYaml(firstKey)).isEqualTo(expectedValue);\n        assertThat(faker.unique().fetchFromYaml(secondKey)).isEqualTo(expectedValue);\n        faker.getContext().setCurrentLocale(new Locale(\"test_EE\"));\n        assertThat(faker.unique().fetchFromYaml(firstKey)).isEqualTo(expectedValue);\n        assertThat(faker.unique().fetchFromYaml(secondKey)).isEqualTo(expectedValue);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldThrowExceptionWhenNoValuesFoundForKey()", "name": "fetchFromYaml_shouldThrowExceptionWhenNoValuesFoundForKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldThrowExceptionWhenNoValuesFoundForKey()", "original_string": "    @Test\n    void fetchFromYaml_shouldThrowExceptionWhenNoValuesFoundForKey() {\n        assertThatThrownBy(() -> faker.unique().fetchFromYaml(\"unique.nonexistent-values\"))\n            .hasMessage(\"No values found for key unique.nonexistent-values\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldThrowExceptionWhenNonListValueFoundForKey()", "name": "fetchFromYaml_shouldThrowExceptionWhenNonListValueFoundForKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldThrowExceptionWhenNonListValueFoundForKey()", "original_string": "    @Test\n    void fetchFromYaml_shouldThrowExceptionWhenNonListValueFoundForKey() {\n        assertThatThrownBy(() -> faker.unique().fetchFromYaml(\"unique\"))\n            .hasMessage(\"No values found for key unique\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldThrowExceptionWhenListOfListsFoundForKey()", "name": "fetchFromYaml_shouldThrowExceptionWhenListOfListsFoundForKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldThrowExceptionWhenListOfListsFoundForKey()", "original_string": "    @Test\n    void fetchFromYaml_shouldThrowExceptionWhenListOfListsFoundForKey() {\n        assertThatThrownBy(() -> faker.unique().fetchFromYaml(\"unique.list-of-lists\"))\n            .hasMessage(\"No values found for key unique.list-of-lists\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldNotInterfereWithValuesReturnedFromOtherFakers()", "name": "fetchFromYaml_shouldNotInterfereWithValuesReturnedFromOtherFakers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldNotInterfereWithValuesReturnedFromOtherFakers()", "original_string": "    @Test\n    void fetchFromYaml_shouldNotInterfereWithValuesReturnedFromOtherFakers() {\n        String key = \"unique.values\";\n\n        for (int x = 0; x < defaultValues.size(); x++) {\n            faker.unique().fetchFromYaml(key);\n        }\n\n        String result = faker.unique().resolve(key);\n\n        assertThat(defaultValues).contains(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldConvertIntegersToStrings()", "name": "fetchFromYaml_shouldConvertIntegersToStrings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldConvertIntegersToStrings()", "original_string": "    @Test\n    void fetchFromYaml_shouldConvertIntegersToStrings() {\n        assertThat(faker.unique().fetchFromYaml(\"unique.valid-integer\"))\n            .isEqualTo(\"123\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldConvertDecimalsToStrings()", "name": "fetchFromYaml_shouldConvertDecimalsToStrings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldConvertDecimalsToStrings()", "original_string": "    @Test\n    void fetchFromYaml_shouldConvertDecimalsToStrings() {\n        assertThat(faker.unique().fetchFromYaml(\"unique.valid-decimal\"))\n            .isEqualTo(\"12.34\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest.[void]fetchFromYaml_shouldConvertBooleansToStrings()", "name": "fetchFromYaml_shouldConvertBooleansToStrings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchFromYaml_shouldConvertBooleansToStrings()", "original_string": "    @Test\n    void fetchFromYaml_shouldConvertBooleansToStrings() {\n        assertThat(faker.unique().fetchFromYaml(\"unique.valid-boolean\"))\n            .isEqualTo(\"true\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniqueTest.java", "class_name": "UniqueTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniqueTest.java.UniqueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java.DateAndTime_birthdayTest.[void]testBirthdayWithEqualAges()", "name": "testBirthdayWithEqualAges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBirthdayWithEqualAges()", "original_string": "    @Test\n    public void testBirthdayWithEqualAges() {\n        int minAge = 30;\n        int maxAge = 30;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDate expectedDate = LocalDate.now().minusYears(maxAge);\n        assertEquals(Timestamp.valueOf(LocalDateTime.of(expectedDate, LocalTime.MIDNIGHT)), birthday);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java", "class_name": "DateAndTime_birthdayTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java.DateAndTime_birthdayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java.DateAndTime_birthdayTest.[void]testBirthdayWithDifferentAges()", "name": "testBirthdayWithDifferentAges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBirthdayWithDifferentAges()", "original_string": "    @Test\n    public void testBirthdayWithDifferentAges() {\n        int minAge = 18;\n        int maxAge = 65;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isAfter(from) || birthday.toLocalDateTime().toLocalDate().isEqual(from));\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isBefore(to) || birthday.toLocalDateTime().toLocalDate().isEqual(to));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java", "class_name": "DateAndTime_birthdayTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java.DateAndTime_birthdayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest.[void]key()", "name": "key", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void key()", "original_string": "    @Test\n    void key() {\n        assertThat(faker.music().key()).matches(\"([A-Z])+([b#])?\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MusicTest.java", "class_name": "MusicTest", "class_uri": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest.[void]chord()", "name": "chord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void chord()", "original_string": "    @Test\n    void chord() {\n        assertThat(faker.music().chord()).matches(\"([A-Z])+([b#])?+(-?[a-zA-Z0-9]{0,4})\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MusicTest.java", "class_name": "MusicTest", "class_uri": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest.[void]genre()", "name": "genre", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void genre()", "original_string": "    @RepeatedTest(100)\n    void genre() {\n        assertThat(faker.music().genre()).matches(\"[ -?\\\\w+]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MusicTest.java", "class_name": "MusicTest", "class_uri": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Locality_allSupportedLocalesTest.java.Locality_allSupportedLocalesTest.[void]testAllSupportedLocales()", "name": "testAllSupportedLocales", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllSupportedLocales()", "original_string": "    @Test\n    public void testAllSupportedLocales() {\n        Set<String> fileMasks = new HashSet<>();\n        List<String> result = locality.allSupportedLocales(fileMasks);\n        assertEquals(locality.allSupportedLocales(), result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Locality_allSupportedLocalesTest.java", "class_name": "Locality_allSupportedLocalesTest", "class_uri": "src/test/java/net/datafaker/providers/base/Locality_allSupportedLocalesTest.java.Locality_allSupportedLocalesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest.[void]compassDirectionWordWithCompassPoint(CompassPoint)", "name": "compassDirectionWordWithCompassPoint", "arg_nums": 1, "params": [{"name": "compassPointOfDirection", "type": "CompassPoint"}], "return_type": "void", "signature": "@ParameterizedTest\n    @EnumSource(CompassPoint.class)\n    void compassDirectionWordWithCompassPoint(CompassPoint compassPointOfDirection)", "original_string": "    @ParameterizedTest\n    @EnumSource(CompassPoint.class)\n    void compassDirectionWordWithCompassPoint(CompassPoint compassPointOfDirection) {\n        assertThat(faker.compass().compassPoint(compassPointOfDirection).word()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompassTest.java", "class_name": "CompassTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest", "attributes": {"modifiers": "@ParameterizedTest\n    @EnumSource(CompassPoint.class)", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(CompassPoint.class)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest.[void]compassDirectionWordWithoutCompassPoint()", "name": "compassDirectionWordWithoutCompassPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void compassDirectionWordWithoutCompassPoint()", "original_string": "    @Test\n    void compassDirectionWordWithoutCompassPoint() {\n        assertThat(faker.compass().word()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompassTest.java", "class_name": "CompassTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest.[void]compassDirectionAbbreviationWithCompassPoint(CompassPoint)", "name": "compassDirectionAbbreviationWithCompassPoint", "arg_nums": 1, "params": [{"name": "compassPointOfDirection", "type": "CompassPoint"}], "return_type": "void", "signature": "@ParameterizedTest\n    @EnumSource(CompassPoint.class)\n    void compassDirectionAbbreviationWithCompassPoint(CompassPoint compassPointOfDirection)", "original_string": "    @ParameterizedTest\n    @EnumSource(CompassPoint.class)\n    void compassDirectionAbbreviationWithCompassPoint(CompassPoint compassPointOfDirection) {\n        assertThat(faker.compass().compassPoint(compassPointOfDirection).abbreviation()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompassTest.java", "class_name": "CompassTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest", "attributes": {"modifiers": "@ParameterizedTest\n    @EnumSource(CompassPoint.class)", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(CompassPoint.class)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest.[void]compassDirectionAbbreviationWithoutCompassPoint()", "name": "compassDirectionAbbreviationWithoutCompassPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void compassDirectionAbbreviationWithoutCompassPoint()", "original_string": "    @Test\n    void compassDirectionAbbreviationWithoutCompassPoint() {\n        assertThat(faker.compass().abbreviation()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompassTest.java", "class_name": "CompassTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest.[void]compassAzimuthWithCompassPoint(CompassPoint)", "name": "compassAzimuthWithCompassPoint", "arg_nums": 1, "params": [{"name": "compassPointOfDirection", "type": "CompassPoint"}], "return_type": "void", "signature": "@ParameterizedTest\n    @EnumSource(CompassPoint.class)\n    void compassAzimuthWithCompassPoint(CompassPoint compassPointOfDirection)", "original_string": "    @ParameterizedTest\n    @EnumSource(CompassPoint.class)\n    void compassAzimuthWithCompassPoint(CompassPoint compassPointOfDirection) {\n        assertThat(faker.compass().compassPoint(compassPointOfDirection).azimuth()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompassTest.java", "class_name": "CompassTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest", "attributes": {"modifiers": "@ParameterizedTest\n    @EnumSource(CompassPoint.class)", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(CompassPoint.class)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest.[void]compassAzimuthWithoutCompassPoint()", "name": "compassAzimuthWithoutCompassPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void compassAzimuthWithoutCompassPoint()", "original_string": "    @Test\n    void compassAzimuthWithoutCompassPoint() {\n        assertThat(faker.compass().azimuth()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompassTest.java", "class_name": "CompassTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompassTest.java.CompassTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Company_urlTest.java.Company_urlTest.[void]testUrl()", "name": "testUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUrl()", "original_string": "    @Test\n    void testUrl() {\n        String url = company.url();\n        assertThat(url).matches(\"www\\\\.[a-zA-Z0-9-]+\\\\.[a-zA-Z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Company_urlTest.java", "class_name": "Company_urlTest", "class_uri": "src/test/java/net/datafaker/providers/base/Company_urlTest.java.Company_urlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[void]testDepartment()", "name": "testDepartment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDepartment()", "original_string": "    @Test\n    void testDepartment() {\n        assertThat(commerce.department()).matches(\"(\\\\w+(, | & )?){1,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[void]testProductName()", "name": "testProductName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testProductName()", "original_string": "    @Test\n    void testProductName() {\n        assertThat(commerce.productName()).matches(\"(\\\\w+ ?){3,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[void]testPrice()", "name": "testPrice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPrice()", "original_string": "    @Test\n    void testPrice() {\n        assertThat(commerce.price()).matches(\"\\\\d{1,3}\\\\\" + decimalSeparator + \"\\\\d{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[void]testPriceMinMax()", "name": "testPriceMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPriceMinMax()", "original_string": "    @Test\n    void testPriceMinMax() {\n        assertThat(commerce.price(100, 1000)).matches(\"\\\\d{3,4}\\\\\" + decimalSeparator + \"\\\\d{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[void]testPromotionCode()", "name": "testPromotionCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPromotionCode()", "original_string": "    @Test\n    void testPromotionCode() {\n        assertThat(commerce.promotionCode()).matches(PROMOTION_CODE_REGEX + PROMOTION_CODE_REGEX + \"\\\\d{6}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[void]testPromotionCodeDigits()", "name": "testPromotionCodeDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPromotionCodeDigits()", "original_string": "    @Test\n    void testPromotionCodeDigits() {\n        assertThat(commerce.promotionCode(3)).matches(PROMOTION_CODE_REGEX + PROMOTION_CODE_REGEX + \"\\\\d{3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]method_returnUpperCaseWithMinimum3Chars()", "name": "method_returnUpperCaseWithMinimum3Chars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void method_returnUpperCaseWithMinimum3Chars()", "original_string": "    @Test\n    void method_returnUpperCaseWithMinimum3Chars() {\n        assertThat(sip.method()).matches(\"^[A-Z]{3,}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]contentType_returnLowerCaseTwoWordsSepereatedBySlashMinimum3And4Chars()", "name": "contentType_returnLowerCaseTwoWordsSepereatedBySlashMinimum3And4Chars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void contentType_returnLowerCaseTwoWordsSepereatedBySlashMinimum3And4Chars()", "original_string": "    @Test\n    void contentType_returnLowerCaseTwoWordsSepereatedBySlashMinimum3And4Chars() {\n        assertThat(sip.contentType()).matches(\"^[a-z]{4,}/+[a-z\\\\d-]{3,}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]messagingPort_return4DigitIntBetween1000And9999()", "name": "messagingPort_return4DigitIntBetween1000And9999", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void messagingPort_return4DigitIntBetween1000And9999()", "original_string": "    @Test\n    void messagingPort_return4DigitIntBetween1000And9999() {\n        assertThat(sip.messagingPort()).isBetween(1000, 10000);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]rtpPort_returnPositiveEvenInt()", "name": "rtpPort_returnPositiveEvenInt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void rtpPort_returnPositiveEvenInt()", "original_string": "    @Test\n    void rtpPort_returnPositiveEvenInt() {\n        int sut = sip.rtpPort();\n        assertThat(sut).isGreaterThanOrEqualTo(2);\n        assertThat(sut % 2).isZero();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]provisionalResponseCode_return3DigitIntBetween100And199()", "name": "provisionalResponseCode_return3DigitIntBetween100And199", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void provisionalResponseCode_return3DigitIntBetween100And199()", "original_string": "    @Test\n    void provisionalResponseCode_return3DigitIntBetween100And199() {\n        assertThat(sip.provisionalResponseCode()).isBetween(100, 200);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]successResponse_Codereturn3DigitIntBetween200And299()", "name": "successResponse_Codereturn3DigitIntBetween200And299", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void successResponse_Codereturn3DigitIntBetween200And299()", "original_string": "    @Test\n    void successResponse_Codereturn3DigitIntBetween200And299() {\n        assertThat(sip.successResponseCode()).isBetween(200, 300);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]redirectResponseCode_Codereturn3DigitIntBetween300And399()", "name": "redirectResponseCode_Codereturn3DigitIntBetween300And399", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void redirectResponseCode_Codereturn3DigitIntBetween300And399()", "original_string": "    @Test\n    void redirectResponseCode_Codereturn3DigitIntBetween300And399() {\n        assertThat(sip.redirectResponseCode()).isBetween(300, 400);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]clientErrorResponseCode_Codereturn3DigitIntBetween400And499()", "name": "clientErrorResponseCode_Codereturn3DigitIntBetween400And499", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void clientErrorResponseCode_Codereturn3DigitIntBetween400And499()", "original_string": "    @Test\n    void clientErrorResponseCode_Codereturn3DigitIntBetween400And499() {\n        assertThat(sip.clientErrorResponseCode()).isBetween(400, 500);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]serverErrorResponseCode_Codereturn3DigitIntBetween500And599()", "name": "serverErrorResponseCode_Codereturn3DigitIntBetween500And599", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void serverErrorResponseCode_Codereturn3DigitIntBetween500And599()", "original_string": "    @Test\n    void serverErrorResponseCode_Codereturn3DigitIntBetween500And599() {\n        assertThat(sip.serverErrorResponseCode()).isBetween(500, 600);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]globalErrorResponseCode_Codereturn3DigitIntBetween600And699()", "name": "globalErrorResponseCode_Codereturn3DigitIntBetween600And699", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void globalErrorResponseCode_Codereturn3DigitIntBetween600And699()", "original_string": "    @Test\n    void globalErrorResponseCode_Codereturn3DigitIntBetween600And699() {\n        assertThat(sip.globalErrorResponseCode()).isBetween(600, 700);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]provisionalResponsePhrase_returnAnyNonDigitString()", "name": "provisionalResponsePhrase_returnAnyNonDigitString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void provisionalResponsePhrase_returnAnyNonDigitString()", "original_string": "    @Test\n    void provisionalResponsePhrase_returnAnyNonDigitString() {\n        assertThat(sip.provisionalResponsePhrase()).matches(\"\\\\D+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]successResponsePhrase_returnAnyNonDigitString()", "name": "successResponsePhrase_returnAnyNonDigitString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void successResponsePhrase_returnAnyNonDigitString()", "original_string": "    @Test\n    void successResponsePhrase_returnAnyNonDigitString() {\n        assertThat(sip.successResponsePhrase()).matches(\"\\\\D+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]redirectResponsePhrase_returnAnyNonDigitString()", "name": "redirectResponsePhrase_returnAnyNonDigitString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void redirectResponsePhrase_returnAnyNonDigitString()", "original_string": "    @Test\n    void redirectResponsePhrase_returnAnyNonDigitString() {\n        assertThat(sip.redirectResponsePhrase()).matches(\"\\\\D+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]clientErrorResponsePhrase_returnAnyNonDigitString()", "name": "clientErrorResponsePhrase_returnAnyNonDigitString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void clientErrorResponsePhrase_returnAnyNonDigitString()", "original_string": "    @Test\n    void clientErrorResponsePhrase_returnAnyNonDigitString() {\n        assertThat(sip.clientErrorResponsePhrase()).matches(\"\\\\D+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]serverErrorResponsePhrase_returnAnyNonDigitString()", "name": "serverErrorResponsePhrase_returnAnyNonDigitString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void serverErrorResponsePhrase_returnAnyNonDigitString()", "original_string": "    @Test\n    void serverErrorResponsePhrase_returnAnyNonDigitString() {\n        assertThat(sip.serverErrorResponsePhrase()).matches(\"\\\\D+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]globalErrorResponsePhrase_returnAnyNonDigitString()", "name": "globalErrorResponsePhrase_returnAnyNonDigitString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void globalErrorResponsePhrase_returnAnyNonDigitString()", "original_string": "    @Test\n    void globalErrorResponsePhrase_returnAnyNonDigitString() {\n        assertThat(sip.globalErrorResponsePhrase()).matches(\"\\\\D+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]bodyString_returnAValidSdpBodyString()", "name": "bodyString_returnAValidSdpBodyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bodyString_returnAValidSdpBodyString()", "original_string": "    @Test\n    void bodyString_returnAValidSdpBodyString() {\n        String[] sut = sip.bodyString().split(\"\\n\");\n\n        assertThat(sut).hasSize(7);\n\n        assertThat(sut[0]).isEqualTo(\"v=0\");\n\n        String[] secondLine = sut[1].split(\" \");\n        assertThat(secondLine[0]).startsWith(\"o=\");\n        assertThat(secondLine[1]).matches(\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\");\n        assertThat(secondLine[secondLine.length - 1]).matches(\"[a-z]+\\\\.\\\\w{2,4}\");\n\n        assertThat(sut[2]).isEqualTo(\"s=-\");\n\n        String[] fourthLine = sut[3].split(\" \");\n        assertThat(fourthLine[0]).isEqualTo(\"c=IN\");\n        assertThat(fourthLine[fourthLine.length - 1]).matches(\"^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$\");\n\n        assertThat(sut[4]).isEqualTo(\"t=0 0\");\n\n        String[] sixthLine = sut[5].split(\" \");\n        assertThat(sixthLine[0]).isEqualTo(\"m=audio\");\n        assertThat(Integer.parseInt(sixthLine[1])).isGreaterThanOrEqualTo(2);\n        assertThat(Integer.parseInt(sixthLine[1]) % 2).isZero();\n\n        assertThat(sut[6]).isEqualTo(\"a=rtpmap:0 PCMU/8000\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]bodyBytes_isNotNull()", "name": "bodyBytes_isNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bodyBytes_isNotNull()", "original_string": "    @Test\n    void bodyBytes_isNotNull() {\n        byte[] sut = sip.bodyBytes();\n\n        assertThat(sut).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest.[void]nameAddress_returnValidNameAddressString()", "name": "nameAddress_returnValidNameAddressString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void nameAddress_returnValidNameAddressString()", "original_string": "    @Test\n    void nameAddress_returnValidNameAddressString() {\n        String[] sut = sip.nameAddress().split(\"@\");\n\n        assertThat(sut[0].split(\":\")[1]).matches(\"\\\\w+\");\n        assertThat(sut[1].split(\":\")[0]).matches(\"^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SipTest.java", "class_name": "SipTest", "class_uri": "src/test/java/net/datafaker/providers/base/SipTest.java.SipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest.[void]testEqualsSameInstance()", "name": "testEqualsSameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEqualsSameInstance()", "original_string": "    @Test\n    void testEqualsSameInstance() {\n        assertTrue(provider1.equals(provider1));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java", "class_name": "AbstractProvider_equalsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest.[void]testEqualsDifferentInstancesSameFaker()", "name": "testEqualsDifferentInstancesSameFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEqualsDifferentInstancesSameFaker()", "original_string": "    @Test\n    void testEqualsDifferentInstancesSameFaker() {\n        assertTrue(provider1.equals(provider2));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java", "class_name": "AbstractProvider_equalsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest.[void]testEqualsDifferentFaker()", "name": "testEqualsDifferentFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEqualsDifferentFaker()", "original_string": "    @Test\n    void testEqualsDifferentFaker() {\n        assertFalse(provider1.equals(provider3));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java", "class_name": "AbstractProvider_equalsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest.[void]testEqualsDifferentClass()", "name": "testEqualsDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEqualsDifferentClass()", "original_string": "    @Test\n    void testEqualsDifferentClass() {\n        assertFalse(provider1.equals(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java", "class_name": "AbstractProvider_equalsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AbstractProvider_equalsTest.java.AbstractProvider_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java.Internet_macAddressTest.[void]testMacAddressWithNullPrefix()", "name": "testMacAddressWithNullPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMacAddressWithNullPrefix()", "original_string": "    @Test\n    public void testMacAddressWithNullPrefix() {\n        Internet internet = new Internet(new BaseFaker());\n        String result = internet.macAddress(null);\n        assertEquals(17, result.length());\n        assertTrue(result.matches(\"([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java", "class_name": "Internet_macAddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java.Internet_macAddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java.Internet_macAddressTest.[void]testMacAddressWithEmptyPrefix()", "name": "testMacAddressWithEmptyPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMacAddressWithEmptyPrefix()", "original_string": "    @Test\n    public void testMacAddressWithEmptyPrefix() {\n        Internet internet = new Internet(new BaseFaker());\n        String result = internet.macAddress(\"\");\n        assertEquals(17, result.length());\n        assertTrue(result.matches(\"([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java", "class_name": "Internet_macAddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java.Internet_macAddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java.Internet_macAddressTest.[void]testMacAddressWithValidPrefix()", "name": "testMacAddressWithValidPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMacAddressWithValidPrefix()", "original_string": "    @Test\n    public void testMacAddressWithValidPrefix() {\n        Internet internet = new Internet(new BaseFaker());\n        String result = internet.macAddress(\"00:1A:2B\");\n        assertEquals(17, result.length());\n        assertTrue(result.startsWith(\"00:1A:2B\"));\n        assertTrue(result.matches(\"00:1A:2B:([0-9A-Fa-f]{2}:){2}[0-9A-Fa-f]{2}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java", "class_name": "Internet_macAddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_macAddressTest.java.Internet_macAddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testCellPhone_enUS()", "name": "testCellPhone_enUS", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCellPhone_enUS()", "original_string": "    @Test\n    void testCellPhone_enUS() {\n        final BaseFaker f = new BaseFaker(Locale.US);\n        String cellPhone = f.phoneNumber().cellPhone();\n        assertThat(cellPhone).matches(\"\\\\(?\\\\d+\\\\)?([- .]\\\\d+){1,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testPhone_esMx()", "name": "testPhone_esMx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(COUNT)\n    void testPhone_esMx()", "original_string": "    @RepeatedTest(COUNT)\n    void testPhone_esMx() {\n        final BaseFaker f = new BaseFaker(new Locale(\"es\", \"MX\"));\n        final PhoneNumber phoneNumber = f.phoneNumber();\n        assertThat(phoneNumber.cellPhone()).matches(\"(044 )?\\\\(?\\\\d+\\\\)?([- .]\\\\d+){1,3}\");\n        assertThat(phoneNumber.phoneNumber()).matches(\"\\\\(?\\\\d+\\\\)?([- .]\\\\d+){1,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(COUNT)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(COUNT)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testPhone_CA(Locale)", "name": "testPhone_CA", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"canadianLocales\")\n    void testPhone_CA(Locale locale)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"canadianLocales\")\n    void testPhone_CA(Locale locale) {\n        String areaCode = \"263|354|382|403|587|780|825|236|250|368|428|604|672|778|204|431|506|\"\n            + \"709|782|902|226|249|289|343|365|416|437|519|548|613|647|705|807|905|367|\"\n            + \"418|438|450|468|474|514|579|581|584|683|742|753|819|873|306|639|867|879\";\n        Pattern canadianPhone = Pattern.compile(\"((\\\\+1)?(\\\\(?(%s)\\\\)?)|(%s))[- .]\\\\d{3}[- .]\\\\d{4}\".formatted(areaCode, areaCode));\n        PhoneNumber phoneNumber = new BaseFaker(locale).phoneNumber();\n        for (int i = 0; i < COUNT; i++) {\n            String phone = phoneNumber.cellPhone();\n            assertThat(phone).matches(canadianPhone);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"canadianLocales\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"canadianLocales\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testAllPhoneNumberNational(Locale)", "name": "testAllPhoneNumberNational", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberNational(Locale locale)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberNational(Locale locale) throws NumberParseException {\n        final BaseFaker faker = new BaseFaker(locale);\n        final PhoneNumber phoneNumberProvider = faker.phoneNumber();\n        for (int i = 0; i < COUNT; i++) {\n            String phoneNumber = phoneNumberProvider.phoneNumber();\n            Phonenumber.PhoneNumber proto = parse(phoneNumber, locale.getCountry());\n            assertThat(util.isValidNumberForRegion(proto, locale.getCountry()))\n                .as(() -> \"Invalid phone %s for locale %s\".formatted(phoneNumber, locale))\n                .isTrue();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"locales\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"locales\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testAllPhoneNumberInternational(Locale)", "name": "testAllPhoneNumberInternational", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberInternational(Locale locale)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberInternational(Locale locale) throws NumberParseException {\n        final BaseFaker faker = new BaseFaker(locale);\n        final PhoneNumber phoneNumberProvider = faker.phoneNumber();\n        for (int i = 0; i < COUNT; i++) {\n            String phoneNumber = phoneNumberProvider.phoneNumberInternational();\n            Phonenumber.PhoneNumber proto = parse(phoneNumber, locale.getCountry());\n            assertThat(util.isValidNumberForRegion(proto, locale.getCountry()))\n                .as(() -> \"Invalid phone %s for locale %s\".formatted(phoneNumber, locale))\n                .isTrue();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"locales\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"locales\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testAllPhoneNumberMobile(Locale)", "name": "testAllPhoneNumberMobile", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberMobile(Locale locale)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberMobile(Locale locale) throws NumberParseException {\n        final BaseFaker faker = new BaseFaker(locale);\n        final PhoneNumber phoneNumberProvider = faker.phoneNumber();\n        for (int i = 0; i < COUNT; i++) {\n            String phoneNumber = phoneNumberProvider.cellPhone();\n            Phonenumber.PhoneNumber proto = parse(phoneNumber, locale.getCountry());\n            assertThat(util.isValidNumberForRegion(proto, locale.getCountry()))\n                .as(() -> \"Invalid phone %s for locale %s\".formatted(phoneNumber, locale))\n                .isTrue();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"locales\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"locales\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testAllPhoneNumberMobileInternational(Locale)", "name": "testAllPhoneNumberMobileInternational", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberMobileInternational(Locale locale)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"locales\")\n    void testAllPhoneNumberMobileInternational(Locale locale) throws NumberParseException {\n        final BaseFaker faker = new BaseFaker(locale);\n        final PhoneNumber phoneNumberProvider = faker.phoneNumber();\n        for (int i = 0; i < COUNT; i++) {\n            String phoneNumber = phoneNumberProvider.cellPhoneInternational();\n            Phonenumber.PhoneNumber proto = parse(phoneNumber, locale.getCountry());\n            assertThat(util.isValidNumberForRegion(proto, locale.getCountry()))\n                .as(() -> \"Invalid phone %s for locale %s\".formatted(phoneNumber, locale))\n                .isTrue();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"locales\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"locales\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testCellPhone()", "name": "testCellPhone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCellPhone()", "original_string": "    @Test\n    void testCellPhone() {\n        assertThat(faker.phoneNumber().cellPhone()).matches(\"\\\\(?\\\\d+\\\\)?([- .]\\\\d+){1,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testPhoneNumber()", "name": "testPhoneNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPhoneNumber()", "original_string": "    @Test\n    void testPhoneNumber() {\n        assertThat(faker.phoneNumber().phoneNumber()).matches(\"\\\\(?\\\\d+\\\\)?([- .]x?\\\\d+){1,5}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testExtension()", "name": "testExtension", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExtension()", "original_string": "    @Test\n    void testExtension() {\n        assertThat(faker.phoneNumber().extension()).matches(\"\\\\d{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testSubscriberNumber()", "name": "testSubscriberNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSubscriberNumber()", "original_string": "    @Test\n    void testSubscriberNumber() {\n        assertThat(faker.phoneNumber().subscriberNumber()).matches(\"\\\\d{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]testSubscriberNumberWithLength()", "name": "testSubscriberNumberWithLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSubscriberNumberWithLength()", "original_string": "    @Test\n    void testSubscriberNumberWithLength() {\n        assertThat(faker.phoneNumber().subscriberNumber(10)).matches(\"\\\\d{10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]cellPhone_estonia()", "name": "cellPhone_estonia", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(COUNT)\n    void cellPhone_estonia()", "original_string": "    @RepeatedTest(COUNT)\n    void cellPhone_estonia() {\n        String cellPhone = noSpaces(ESTONIAN.phoneNumber().cellPhone());\n        assertThatPhone(cellPhone).matches(\"[358]\\\\d{6,7}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(COUNT)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(COUNT)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]phoneNumberNational_estonia()", "name": "phoneNumberNational_estonia", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(COUNT)\n    void phoneNumberNational_estonia()", "original_string": "    @RepeatedTest(COUNT)\n    void phoneNumberNational_estonia() {\n        String cellPhone = noSpaces(ESTONIAN.phoneNumber().phoneNumberNational());\n        assertThatPhone(cellPhone).matches(\"[34678]\\\\d{6,7}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(COUNT)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(COUNT)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]phoneNumberInternational_estonia()", "name": "phoneNumberInternational_estonia", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(COUNT)\n    void phoneNumberInternational_estonia()", "original_string": "    @RepeatedTest(COUNT)\n    void phoneNumberInternational_estonia() {\n        String cellPhone = noSpaces(ESTONIAN.phoneNumber().phoneNumberInternational());\n        assertThatPhone(cellPhone).matches(\"\\\\+372[34678]\\\\d{6,7}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(COUNT)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(COUNT)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]cellPhone_moldova()", "name": "cellPhone_moldova", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void cellPhone_moldova()", "original_string": "    @RepeatedTest(10)\n    void cellPhone_moldova() {\n        String phone = noSpaces(MOLDOVAN.phoneNumber().cellPhone());\n        assertThatPhone(phone).matches(\"0[567]\\\\d{7}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]phoneNumber_moldova()", "name": "phoneNumber_moldova", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void phoneNumber_moldova()", "original_string": "    @RepeatedTest(10)\n    void phoneNumber_moldova() {\n        String phone = noSpaces(MOLDOVAN.phoneNumber().phoneNumber());\n        assertThatPhone(phone).matches(\"0\\\\d{8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[void]phoneNumberInternational_moldova()", "name": "phoneNumberInternational_moldova", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void phoneNumberInternational_moldova()", "original_string": "    @RepeatedTest(10)\n    void phoneNumberInternational_moldova() {\n        String phone = noSpaces(MOLDOVAN.phoneNumber().phoneNumberInternational());\n        assertThatPhone(phone).matches(\"\\\\+373\\\\d{8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testCreatedDateForward()", "name": "testCreatedDateForward", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCreatedDateForward()", "original_string": "    @Test\n    void testCreatedDateForward() {\n        Date testDate = new Date();\n        Date constrainDate = new Date(testDate.getTime() + 3000000);\n        Date generated = twitter.createdTime(true, testDate, constrainDate);\n        boolean test = generated.after(testDate) && generated.before(constrainDate);\n        assertThat(test).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testCreatedDateBackward()", "name": "testCreatedDateBackward", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCreatedDateBackward()", "original_string": "    @Test\n    void testCreatedDateBackward() {\n        Date testDate = new Date();\n        Date constrainDate = new Date(testDate.getTime() - 3000000);\n        Date generated = twitter.createdTime(false, testDate, constrainDate);\n        boolean test = generated.before(testDate) && generated.after(constrainDate);\n        assertThat(test).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testShortTwitterIdLength()", "name": "testShortTwitterIdLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testShortTwitterIdLength()", "original_string": "    @Test\n    void testShortTwitterIdLength() {\n        int expectedLength = 6;\n        String generatedID = twitter.twitterId(expectedLength);\n        assertThat(generatedID).hasSize(expectedLength);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testLongTwitterIdLength()", "name": "testLongTwitterIdLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLongTwitterIdLength()", "original_string": "    @RepeatedTest(100)\n    void testLongTwitterIdLength() {\n        int expectedLength = 25;\n        String generatedID = twitter.twitterId(expectedLength);\n        assertThat(generatedID).hasSize(expectedLength);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testTwitterIdLength()", "name": "testTwitterIdLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTwitterIdLength()", "original_string": "    @Test\n    void testTwitterIdLength() {\n        int expectedLength = 15;\n        String generatedID = twitter.twitterId(expectedLength);\n        assertThat(generatedID).hasSize(expectedLength);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testTwitterIdUnique()", "name": "testTwitterIdUnique", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTwitterIdUnique()", "original_string": "    @Test\n    void testTwitterIdUnique() {\n        int expectedLength = 15;\n        String generatedIDOne = twitter.twitterId(expectedLength);\n        String generatedIDTwo = twitter.twitterId(expectedLength);\n        assertThat(generatedIDOne).isNotEqualTo(generatedIDTwo);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testTextLength()", "name": "testTextLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTextLength()", "original_string": "    @Test\n    void testTextLength() {\n        int sentenceMaxLength = 15;\n        int wordMaxLength = 5;\n        String text = twitter.text(null, sentenceMaxLength, wordMaxLength);\n        String[] textwords = text.split(\" \");\n        assertThat(textwords).hasSizeLessThanOrEqualTo(sentenceMaxLength);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]testTextKeyWords()", "name": "testTextKeyWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTextKeyWords()", "original_string": "    @Test\n    void testTextKeyWords() {\n        int sentenceMaxLength = 15;\n        int wordMaxLength = 5;\n        String[] keywords = {\"buy\", \"see\"};\n        String text = twitter.text(keywords, sentenceMaxLength, wordMaxLength);\n        String[] textwords = text.split(\" \");\n        boolean flag = true;\n        for (String keyword : keywords) {\n            boolean tmpFlag = false;\n            for (String textword : textwords) {\n                if (keyword.equals(textword)) {\n                    tmpFlag = true;\n                    break;\n                }\n            }\n            flag = tmpFlag;\n            if (!flag) {\n                break;\n            }\n        }\n        assertThat(flag).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]username()", "name": "username", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void username()", "original_string": "    @Test\n    void username() {\n        final Pattern pattern = Pattern.compile(\"[a-zA-Z\\\\d_\\\\-\\u4e00-\\u9fa5]+\");\n        for (int i = 0; i < 10; i++) {\n            assertThat(twitter.userName()).matches(pattern);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]userId()", "name": "userId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void userId()", "original_string": "    @Test\n    void userId() {\n        Pattern pattern = Pattern.compile(\"\\\\d+\");\n        for (int i = 0; i < 10; i++) {\n            assertThat(twitter.userId()).matches(pattern);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]linkTestRules()", "name": "linkTestRules", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void linkTestRules()", "original_string": "    @Test\n    void linkTestRules() {\n        final Pattern pattern = Pattern.compile(\"[A-Za-z\\\\d.:/]+\");\n        for (int i = 0; i < 10; i++) {\n            assertThat(twitter.getLink(\"John\", 6)).matches(pattern);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest.[void]linkTestKeyWords()", "name": "linkTestKeyWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void linkTestKeyWords()", "original_string": "    @Test\n    void linkTestKeyWords() {\n        for (int i = 0; i < 10; i++) {\n            assertThat(twitter.getLink(\"John\", 6)).contains(\"John\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TwitterTest.java", "class_name": "TwitterTest", "class_uri": "src/test/java/net/datafaker/providers/base/TwitterTest.java.TwitterTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testFutureTime()", "name": "testFutureTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFutureTime()", "original_string": "    @Test\n    void testFutureTime() {\n        LocalTime now = LocalTime.now();\n        for (int i = 0; i < 1000; i++) {\n            long future = faker.time().future(1, ChronoUnit.SECONDS);\n            assertThat(LocalTime.ofNanoOfDay(future))\n                .isAfter(now)\n                .isBefore(now.plusSeconds(10));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testFutureTimeWithMinimum()", "name": "testFutureTimeWithMinimum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFutureTimeWithMinimum()", "original_string": "    @Test\n    void testFutureTimeWithMinimum() {\n        LocalTime now = LocalTime.now();\n        for (int i = 0; i < 1000; i++) {\n            long future = faker.time().future(5, 4, ChronoUnit.SECONDS);\n            assertThat(LocalTime.ofNanoOfDay(future))\n                .isAfter(now)\n                .isBefore(now.plusSeconds(10))\n                .isAfter(now.plusSeconds(1));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testPastTimeWithMinimum()", "name": "testPastTimeWithMinimum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPastTimeWithMinimum()", "original_string": "    @Test\n    void testPastTimeWithMinimum() {\n        LocalTime now = LocalTime.now();\n        for (int i = 0; i < 1000; i++) {\n            long past = faker.time().past(5, 4, ChronoUnit.SECONDS);\n            assertThat(LocalTime.ofNanoOfDay(past))\n                .isBefore(now)\n                .isAfter(now.minusSeconds(6))\n                .isBefore(now.minusSeconds(2));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testPastTime()", "name": "testPastTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPastTime()", "original_string": "    @Test\n    void testPastTime() {\n        LocalTime now = LocalTime.now();\n        long past = faker.time().past(100, ChronoUnit.SECONDS);\n        assertThat(LocalTime.ofNanoOfDay(past)).isBefore(now);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testBetween()", "name": "testBetween", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetween()", "original_string": "    @Test\n    void testBetween() {\n        LocalTime now = LocalTime.now();\n        LocalTime then = now.plusSeconds(1);\n\n        for (int i = 0; i < 1000; i++) {\n            long time = faker.time().between(now, then);\n            assertThat(LocalTime.ofNanoOfDay(time))\n                .isBefore(then)\n                .isAfter(now);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testBetweenWithSameLocalTime()", "name": "testBetweenWithSameLocalTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenWithSameLocalTime()", "original_string": "    @Test\n    void testBetweenWithSameLocalTime() {\n        LocalTime now = LocalTime.now();\n\n        long time = faker.time().between(now, now);\n        assertThat(LocalTime.ofNanoOfDay(time)).isEqualTo(now);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testBetweenThenLargerThanNow()", "name": "testBetweenThenLargerThanNow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenThenLargerThanNow()", "original_string": "    @Test\n    void testBetweenThenLargerThanNow() {\n        LocalTime now = LocalTime.now();\n        LocalTime then = now.plusSeconds(1);\n        assertThatThrownBy(() -> faker.time().between(then, now))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Invalid time range: the upper bound time (%s) is before the lower bound (%s)\".formatted(now, then));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]testBetweenWithMask()", "name": "testBetweenWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testBetweenWithMask()", "original_string": "    @RepeatedTest(10)\n    void testBetweenWithMask() {\n        String pattern = \"HH:mm:ss\";\n        LocalTime now = LocalTime.ofNanoOfDay((long) (Math.random() * (NANOSECONDS_IN_DAY - NANOSECONDS_IN_MINUTE - 1)));\n        LocalTime then = now.plusMinutes(1);\n\n        String result = faker.time().between(now, then, pattern);\n        assertThat(result).matches(RE_TIME_BETWEEN);\n        TemporalAccessor timeBetween = DateTimeFormatter.ofPattern(pattern).parse(result);\n        assertThat(timeBetween.query(LocalTime::from)).isAfter(now.minusSeconds(1));\n        assertThat(timeBetween.query(LocalTime::from)).isBefore(then.plusSeconds(1));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]futureWithMask()", "name": "futureWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void futureWithMask()", "original_string": "    @Test\n    void futureWithMask() {\n        String pattern = \"mm:hh:ss\";\n        DateTimeFormatter.ofPattern(pattern).parse(faker.time().future(1, ChronoUnit.HOURS, pattern));\n        DateTimeFormatter.ofPattern(pattern).parse(faker.time().future(20, 1, ChronoUnit.HOURS, pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest.[void]pastWithMask()", "name": "pastWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void pastWithMask()", "original_string": "    @Test\n    void pastWithMask() {\n        String pattern = \"mm:hh:ss\";\n        DateTimeFormatter.ofPattern(pattern).parse(faker.time().past(1, ChronoUnit.MINUTES, pattern));\n        DateTimeFormatter.ofPattern(pattern).parse(faker.time().past(20, 1, ChronoUnit.MILLIS, pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeTest.java", "class_name": "TimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeTest.java.TimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest.[void]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void type()", "original_string": "    @Test\n    void type() {\n        assertThat(isNullOrEmpty(mbti.type())).isFalse();\n        assertThat(mbti.type()).matches(\"[A-Za-z,\\\\-.() ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "class_name": "MbtiTest", "class_uri": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest.[void]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void name()", "original_string": "    @Test\n    void name() {\n        assertThat(isNullOrEmpty(mbti.name())).isFalse();\n        assertThat(mbti.name()).matches(\"[A-Za-z,\\\\-.();:'$ ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "class_name": "MbtiTest", "class_uri": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest.[void]characteristic()", "name": "characteristic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void characteristic()", "original_string": "    @Test\n    void characteristic() {\n        assertThat(isNullOrEmpty(mbti.characteristic())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "class_name": "MbtiTest", "class_uri": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest.[void]personage()", "name": "personage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void personage()", "original_string": "    @Test\n    void personage() {\n        assertThat(isNullOrEmpty(mbti.personage())).isFalse();\n        assertThat(mbti.personage()).matches(\"[A-Za-z,\\\\-.()';:$ ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "class_name": "MbtiTest", "class_uri": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest.[void]merit()", "name": "merit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void merit()", "original_string": "    @Test\n    void merit() {\n        assertThat(isNullOrEmpty(mbti.merit())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "class_name": "MbtiTest", "class_uri": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest.[void]weakness()", "name": "weakness", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void weakness()", "original_string": "    @Test\n    void weakness() {\n        assertThat(isNullOrEmpty(mbti.weakness())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MbtiTest.java", "class_name": "MbtiTest", "class_uri": "src/test/java/net/datafaker/providers/base/MbtiTest.java.MbtiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java.FinancialTermsTest.[void]category(FinancialTerms.Category)", "name": "category", "arg_nums": 1, "params": [{"name": "category", "type": "FinancialTerms.Category"}], "return_type": "void", "signature": "@EnumSource(FinancialTerms.Category.class)\n    @ParameterizedTest\n    void category(FinancialTerms.Category category)", "original_string": "    @EnumSource(FinancialTerms.Category.class)\n    @ParameterizedTest\n    void category(FinancialTerms.Category category) {\n        assertThat(financialTerms.noun(category)).isNotBlank();\n        assertThat(financialTerms.verb(category)).isNotBlank();\n        assertThat(financialTerms.adjective(category)).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java", "class_name": "FinancialTermsTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java.FinancialTermsTest", "attributes": {"modifiers": "@EnumSource(FinancialTerms.Category.class)\n    @ParameterizedTest", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(FinancialTerms.Category.class)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java.FinancialTermsTest.[void]defaults()", "name": "defaults", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void defaults()", "original_string": "    @RepeatedTest(10)\n    void defaults() {\n        assertThat(financialTerms.noun()).isNotBlank();\n        assertThat(financialTerms.verb()).isNotBlank();\n        assertThat(financialTerms.adjective()).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java", "class_name": "FinancialTermsTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinancialTermsTest.java.FinancialTermsTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFaker_getFakerTest.java.BaseFaker_getFakerTest.[void]testGetFaker()", "name": "testGetFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetFaker()", "original_string": "    @Test\n    void testGetFaker() {\n        BaseFaker baseFaker = new BaseFaker();\n        BaseFaker result = baseFaker.getFaker();\n        assertEquals(baseFaker, result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFaker_getFakerTest.java", "class_name": "BaseFaker_getFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFaker_getFakerTest.java.BaseFaker_getFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest.[void]testUniversity()", "name": "testUniversity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUniversity()", "original_string": "    @Test\n    void testUniversity() {\n        assertThat(faker.educator().university()).matches(\"(\\\\w+ ?){2,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/EducatorTest.java", "class_name": "EducatorTest", "class_uri": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest.[void]testCourse()", "name": "testCourse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCourse()", "original_string": "    @Test\n    void testCourse() {\n        assertThat(faker.educator().course()).matches(\"(\\\\(?\\\\w+\\\\)? ?){3,6}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/EducatorTest.java", "class_name": "EducatorTest", "class_uri": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest.[void]testSubjectWithNumber()", "name": "testSubjectWithNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSubjectWithNumber()", "original_string": "    @RepeatedTest(10)\n    void testSubjectWithNumber() {\n        assertThat(faker.educator().subjectWithNumber()).matches(\"[a-zA-Z() ]+ [1-5][0-9]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/EducatorTest.java", "class_name": "EducatorTest", "class_uri": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest.[void]testSecondarySchool()", "name": "testSecondarySchool", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSecondarySchool()", "original_string": "    @Test\n    void testSecondarySchool() {\n        assertThat(faker.educator().secondarySchool()).matches(\"(\\\\w+ ?){2,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/EducatorTest.java", "class_name": "EducatorTest", "class_uri": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest.[void]testCampus()", "name": "testCampus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCampus()", "original_string": "    @Test\n    void testCampus() {\n        assertThat(faker.educator().campus()).matches(\"(\\\\w+ ?){1,2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/EducatorTest.java", "class_name": "EducatorTest", "class_uri": "src/test/java/net/datafaker/providers/base/EducatorTest.java.EducatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest.[void]testCurrency()", "name": "testCurrency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCurrency()", "original_string": "    @Test\n    void testCurrency() {\n        assertThat(faker.money().currency()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MoneyTest.java", "class_name": "MoneyTest", "class_uri": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest.[void]testCurrencyCode()", "name": "testCurrencyCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCurrencyCode()", "original_string": "    @Test\n    void testCurrencyCode() {\n        assertThat(faker.money().currencyCode()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MoneyTest.java", "class_name": "MoneyTest", "class_uri": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest.[void]testNumericCode()", "name": "testNumericCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNumericCode()", "original_string": "    @Test\n    void testNumericCode() {\n        assertThat(faker.money().currencyNumericCode()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MoneyTest.java", "class_name": "MoneyTest", "class_uri": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest.[void]testCurrencySymbol()", "name": "testCurrencySymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCurrencySymbol()", "original_string": "    @Test\n    void testCurrencySymbol() {\n        assertThat(faker.money().currencySymbol()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MoneyTest.java", "class_name": "MoneyTest", "class_uri": "src/test/java/net/datafaker/providers/base/MoneyTest.java.MoneyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithoutReplacementTest.java.Locality_localeStringWithoutReplacementTest.[void]testLocaleStringWithoutReplacement()", "name": "testLocaleStringWithoutReplacement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLocaleStringWithoutReplacement()", "original_string": "    @Test\n    void testLocaleStringWithoutReplacement() {\n        // Given\n        Random random = new Random(5); // Fixed seed for deterministic results\n\n        // When\n        String locale1 = locality.localeStringWithoutReplacement(random);\n        String locale2 = locality.localeStringWithoutReplacement(random);\n\n        // Then\n        assertNotEquals(locale1, locale2); // Since the seed is fixed, the first two locales should be different\n\n        // When\n        String locale3 = locality.localeStringWithoutReplacement(random);\n\n        // Then\n        assertTrue(!locale1.equals(locale3)); // The third locale should be different from the first one\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithoutReplacementTest.java", "class_name": "Locality_localeStringWithoutReplacementTest", "class_uri": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithoutReplacementTest.java.Locality_localeStringWithoutReplacementTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest.[void]nationality()", "name": "nationality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void nationality()", "original_string": "    @Test\n    void nationality() {\n        assertThat(nation.nationality()).matches(\"\\\\P{Cc}+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NationTest.java", "class_name": "NationTest", "class_uri": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest.[void]language()", "name": "language", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void language()", "original_string": "    @Test\n    void language() {\n        assertThat(nation.language()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NationTest.java", "class_name": "NationTest", "class_uri": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest.[void]capitalCity()", "name": "capitalCity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void capitalCity()", "original_string": "    @Test\n    void capitalCity() {\n        assertThat(nation.capitalCity()).matches(\"[A-Za-z .'()-]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NationTest.java", "class_name": "NationTest", "class_uri": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest.[void]flag()", "name": "flag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void flag()", "original_string": "    @Test\n    void flag() {\n        String flag = nation.flag();\n\n        // all utf8 emoji flags are at least 4 characters long and start with the same char\n        assertThat(flag).hasSizeGreaterThanOrEqualTo(4);\n        assertThat(flag.charAt(0)).isEqualTo('\\uD83C');\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NationTest.java", "class_name": "NationTest", "class_uri": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest.[void]isoLanguage()", "name": "isoLanguage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void isoLanguage()", "original_string": "    @Test\n    void isoLanguage() {\n        assertThat(nation.isoLanguage()).matches(\"[a-z]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NationTest.java", "class_name": "NationTest", "class_uri": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest.[void]isoCountry()", "name": "isoCountry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void isoCountry()", "original_string": "    @Test\n    void isoCountry() {\n        assertThat(nation.isoCountry()).matches(\"[A-Z]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NationTest.java", "class_name": "NationTest", "class_uri": "src/test/java/net/datafaker/providers/base/NationTest.java.NationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testFirstLevelDomainNotNull()", "name": "testFirstLevelDomainNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFirstLevelDomainNotNull()", "original_string": "    @Test\n    void testFirstLevelDomainNotNull() {\n        String ret = faker.domain().firstLevelDomain(\"example\");\n        assert (ret != null);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testFirstLevelDomain()", "name": "testFirstLevelDomain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFirstLevelDomain()", "original_string": "    @Test\n    void testFirstLevelDomain() {\n        String[] components = faker.domain().firstLevelDomain(\"example\").split(\"\\\\.\");\n        for (String str : components) {\n            assert (!str.isEmpty());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testSecondLevelDomainNotNull()", "name": "testSecondLevelDomainNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSecondLevelDomainNotNull()", "original_string": "    @Test\n    void testSecondLevelDomainNotNull() {\n        String ret = faker.domain().secondLevelDomain(\"example\");\n        assert (ret != null);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testSecondLevelDomain()", "name": "testSecondLevelDomain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSecondLevelDomain()", "original_string": "    @Test\n    void testSecondLevelDomain() {\n        String[] components = faker.domain().secondLevelDomain(\"example\").split(\"\\\\.\");\n        for (String str : components) {\n            assert (!str.isEmpty());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testFullDomainNotNull()", "name": "testFullDomainNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFullDomainNotNull()", "original_string": "    @Test\n    void testFullDomainNotNull() {\n        String ret = faker.domain().fullDomain(\"example\");\n        assert (ret != null);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testFullDomain()", "name": "testFullDomain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFullDomain()", "original_string": "    @Test\n    void testFullDomain() {\n        String[] components = faker.domain().fullDomain(\"example\").split(\"\\\\.\");\n        for (String str : components) {\n            assert (!str.isEmpty());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testValidDomainNotNull()", "name": "testValidDomainNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidDomainNotNull()", "original_string": "    @RepeatedTest(10)\n    void testValidDomainNotNull() {\n        String ret = faker.domain().validDomain(\"example\");\n        assert (ret != null);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest.[void]testValidDomain()", "name": "testValidDomain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testValidDomain()", "original_string": "    @Test\n    void testValidDomain() {\n        String[] components = faker.domain().validDomain(\"example\").split(\"\\\\.\");\n        for (String str : components) {\n            assert (!str.isEmpty());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DomainTest.java", "class_name": "DomainTest", "class_uri": "src/test/java/net/datafaker/providers/base/DomainTest.java.DomainTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java.DateAndTime_periodTest.[void]testPeriodValidRange()", "name": "testPeriodValidRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeriodValidRange()", "original_string": "    @Test\n    public void testPeriodValidRange() {\n        Period min = Period.of(1, 2, 3);\n        Period max = Period.of(4, 5, 6);\n        Period result = dateAndTime.period(min, max);\n        assertTrue(result.getYears() >= min.getYears() && result.getYears() <= max.getYears());\n        assertTrue(result.getMonths() >= min.getMonths() && result.getMonths() <= max.getMonths());\n        assertTrue(result.getDays() >= min.getDays() && result.getDays() <= max.getDays());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java", "class_name": "DateAndTime_periodTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java.DateAndTime_periodTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java.DateAndTime_periodTest.[void]testPeriodInvalidRange()", "name": "testPeriodInvalidRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeriodInvalidRange()", "original_string": "    @Test\n    public void testPeriodInvalidRange() {\n        Period min = Period.of(4, 5, 6);\n        Period max = Period.of(1, 2, 3);\n        assertThrows(IllegalArgumentException.class, () -> dateAndTime.period(min, max));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java", "class_name": "DateAndTime_periodTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java.DateAndTime_periodTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUsername()", "name": "testUsername", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testUsername()", "original_string": "    @RepeatedTest(100)\n    void testUsername() {\n        assertThat(faker.internet().username()).matches(\"^(\\\\w+)\\\\.(\\\\w+)$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]emailSubject()", "name": "emailSubject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void emailSubject()", "original_string": "    @RepeatedTest(10)\n    void emailSubject() {\n        assertThat(faker.internet().emailSubject()).isNotBlank();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUsernameWithSpaces()", "name": "testUsernameWithSpaces", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUsernameWithSpaces()", "original_string": "    @Test\n    void testUsernameWithSpaces() {\n        final Name name = Mockito.spy(new Name(mockedFaker));\n        doReturn(\"Compound Name\").when(name).firstName();\n        doReturn(name).when(mockedFaker).name();\n        assertThat(mockedFaker.internet().username()).matches(\"^(\\\\w+)\\\\.(\\\\w+)$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testEmailAddress()", "name": "testEmailAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEmailAddress()", "original_string": "    @Test\n    void testEmailAddress() {\n        String emailAddress = faker.internet().emailAddress();\n        assertThat(EmailValidator.getInstance().isValid(emailAddress)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testEmailAddressWithLocalPartParameter()", "name": "testEmailAddressWithLocalPartParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEmailAddressWithLocalPartParameter()", "original_string": "    @Test\n    void testEmailAddressWithLocalPartParameter() {\n        String emailAddress = faker.internet().emailAddress(\"john\");\n        assertThat(emailAddress).startsWith(\"john@\");\n        assertThat(EmailValidator.getInstance().isValid(emailAddress)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testSafeEmailAddress()", "name": "testSafeEmailAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSafeEmailAddress()", "original_string": "    @Test\n    void testSafeEmailAddress() {\n        List<String> emails = new ArrayList<>();\n        for (int i = 0; i < 100; i++) {\n            String emailAddress = faker.internet().safeEmailAddress();\n            assertThat(EmailValidator.getInstance().isValid(emailAddress)).isTrue();\n            emails.add(emailAddress);\n        }\n        final String safeDomain = faker.internet().resolve(\"internet.safe_email\");\n\n        assertThat(emails.stream().filter(t -> t.endsWith(\"@\" + safeDomain)).collect(Collectors.toList()))\n            .isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testSafeEmailAddressWithLocalPartParameter()", "name": "testSafeEmailAddressWithLocalPartParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSafeEmailAddressWithLocalPartParameter()", "original_string": "    @Test\n    void testSafeEmailAddressWithLocalPartParameter() {\n        List<String> emails = new ArrayList<>();\n        for (int i = 0; i < 100; i++) {\n            String emailAddress = faker.internet().safeEmailAddress(\"john\");\n            assertThat(emailAddress).startsWith(\"john@\");\n            assertThat(EmailValidator.getInstance().isValid(emailAddress)).isTrue();\n            emails.add(emailAddress);\n        }\n        final String safeDomain = faker.internet().resolve(\"internet.safe_email\");\n\n        assertThat(emails.stream().filter(t -> t.endsWith(\"@\" + safeDomain)).collect(Collectors.toList()))\n            .isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testEmailAddressDoesNotIncludeAccentsInTheLocalPart()", "name": "testEmailAddressDoesNotIncludeAccentsInTheLocalPart", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEmailAddressDoesNotIncludeAccentsInTheLocalPart()", "original_string": "    @Test\n    void testEmailAddressDoesNotIncludeAccentsInTheLocalPart() {\n        String emailAddress = faker.internet().emailAddress(\"\u00e1\u00e9\u00ed\u00f3\u00fa\");\n        assertThat(emailAddress).startsWith(\"aeiou@\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testSafeEmailAddressDoesNotIncludeAccentsInTheLocalPart()", "name": "testSafeEmailAddressDoesNotIncludeAccentsInTheLocalPart", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSafeEmailAddressDoesNotIncludeAccentsInTheLocalPart()", "original_string": "    @Test\n    void testSafeEmailAddressDoesNotIncludeAccentsInTheLocalPart() {\n        String emailAddress = faker.internet().safeEmailAddress(\"\u00e1\u00e9\u00ed\u00f3\u00fa\");\n        assertThat(emailAddress).startsWith(\"aeiou@\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testWebdomain()", "name": "testWebdomain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWebdomain()", "original_string": "    @Test\n    void testWebdomain() {\n        assertThat(faker.internet().webdomain()).matches(\"www\\\\.[\\\\w-]+\\\\.\\\\w+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUrl()", "name": "testUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testUrl()", "original_string": "    @RepeatedTest(100)\n    void testUrl() {\n        // This test assumes that java.net.URL has better validation than we can come up with in\n        // regex.\n        String url = faker.internet().url();\n        assertDoesNotThrow(() -> new URL(url));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testImage()", "name": "testImage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testImage()", "original_string": "    @Test\n    void testImage() {\n        String imageUrl = faker.internet().image();\n        assertThat(imageUrl).matches(\"^https://picsum\\\\.photos/\\\\d{1,4}/\\\\d{1,4}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testDomainName()", "name": "testDomainName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDomainName()", "original_string": "    @Test\n    void testDomainName() {\n        assertThat(faker.internet().domainName()).matches(\"[a-z]+\\\\.\\\\w{2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testDomainWord()", "name": "testDomainWord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDomainWord()", "original_string": "    @Test\n    void testDomainWord() {\n        assertThat(faker.internet().domainWord()).matches(\"[a-z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testDomainSuffix()", "name": "testDomainSuffix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDomainSuffix()", "original_string": "    @Test\n    void testDomainSuffix() {\n        assertThat(faker.internet().domainSuffix()).matches(\"\\\\w{2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testImageWithExplicitParams()", "name": "testImageWithExplicitParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testImageWithExplicitParams()", "original_string": "    @Test\n    void testImageWithExplicitParams() {\n        String imageUrl = faker.internet().image(800, 600, \"lorem\");\n        assertThat(imageUrl).matches(\"^https://picsum\\\\.photos/seed/lorem/800/600$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testHttpMethod()", "name": "testHttpMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHttpMethod()", "original_string": "    @Test\n    void testHttpMethod() {\n        assertThat(faker.internet().httpMethod()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPassword()", "name": "testPassword", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPassword()", "original_string": "    @Test\n    void testPassword() {\n        assertThat(faker.internet().password()).matches(\"[a-z\\\\d]{8,16}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPasswordWithFixedLength()", "name": "testPasswordWithFixedLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPasswordWithFixedLength()", "original_string": "    @Test\n    void testPasswordWithFixedLength() {\n        String password = new BaseFaker().internet().password(32, 32, true, true, true);\n        assertThat(password).hasSize(32);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPasswordIncludeDigit()", "name": "testPasswordIncludeDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPasswordIncludeDigit()", "original_string": "    @Test\n    void testPasswordIncludeDigit() {\n        assertThat(faker.internet().password()).matches(\"[a-z\\\\d]{8,16}\");\n        assertThat(faker.internet().password(false)).matches(\"[a-z]{8,16}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPasswordMinLengthMaxLength()", "name": "testPasswordMinLengthMaxLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPasswordMinLengthMaxLength()", "original_string": "    @Test\n    void testPasswordMinLengthMaxLength() {\n        assertThat(faker.internet().password(10, 25)).matches(\"[a-z\\\\d]{10,25}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPasswordMinLengthMaxLengthIncludeUpperCase()", "name": "testPasswordMinLengthMaxLengthIncludeUpperCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPasswordMinLengthMaxLengthIncludeUpperCase()", "original_string": "    @Test\n    void testPasswordMinLengthMaxLengthIncludeUpperCase() {\n        assertThat(faker.internet().password(1, 2, false)).matches(\"[a-z\\\\d]{1,2}\");\n        assertThat(faker.internet().password(10, 25, true)).matches(\"[a-zA-Z\\\\d]{10,25}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecial()", "name": "testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecial", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecial()", "original_string": "    @Test\n    void testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecial() {\n        assertThat(faker.internet().password(10, 25, false, false)).matches(\"[a-z\\\\d]{10,25}\");\n        assertThat(faker.internet().password(10, 25, false, true)).matches(\"[a-z\\\\d!@#$%^&*]{10,25}\");\n        assertThat(faker.internet().password(10, 25, true, true)).matches(\"[a-zA-Z\\\\d!@#$%^&*]{10,25}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPort()", "name": "testPort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testPort()", "original_string": "    @RepeatedTest(100)\n    void testPort() {\n        assertThat(faker.internet().port()).isBetween(0, 65535);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]shouldGenerateAPasswordWithMinAndMaxLength()", "name": "shouldGenerateAPasswordWithMinAndMaxLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateAPasswordWithMinAndMaxLength()", "original_string": "    @Test\n    void shouldGenerateAPasswordWithMinAndMaxLength() {\n        List<String> results = new ArrayList<>();\n        for (int i = 0; i < 300; i++) {\n            results.add(faker.internet().password(1, 10));\n        }\n\n        final List<String> min = results.stream().filter(x -> x.length() == 1).toList();\n        final List<String> max = results.stream().filter(x -> x.length() == 10).toList();\n\n        assertThat(min.size()).isPositive();\n        assertThat(max.size()).isPositive();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecialIncludeDigit()", "name": "testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecialIncludeDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecialIncludeDigit()", "original_string": "    @Test\n    void testPasswordMinLengthMaxLengthIncludeUpperCaseIncludeSpecialIncludeDigit() {\n        assertThat(faker.internet().password(10, 25, false, false, false)).matches(\"[a-z]{10,25}\");\n        assertThat(faker.internet().password(10, 25, false, true, true)).matches(\"[a-z\\\\d!@#$%^&*]{10,25}\");\n        assertThat(faker.internet().password(10, 25, true, true, false)).matches(\"[a-zA-Z!@#$%^&*]{10,25}\");\n        assertThat(faker.internet().password(10, 25, true, true, true)).matches(\"[a-zA-Z\\\\d!@#$%^&*]{10,25}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testMacAddress()", "name": "testMacAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMacAddress()", "original_string": "    @Test\n    void testMacAddress() {\n        Condition<String> colon = getCharacterCondition(':', 5);\n        assertThat(faker.internet().macAddress()).is(colon);\n        assertThat(faker.internet().macAddress(\"\")).is(colon);\n\n        assertThat(faker.internet().macAddress(\"fa:fa:fa\"))\n            .startsWith(\"fa:fa:fa\")\n            .is(colon);\n\n        assertThat(faker.internet().macAddress(\"01:02\"))\n            .startsWith(\"01:02\")\n            .is(colon);\n\n        // loop through 1000 times just to 'run it through the wringer'\n        for (int i = 0; i < 1000; i++) {\n            assertThat(faker.internet().macAddress()).matches(\"[0-9a-fA-F]{2}(:([0-9a-fA-F]{1,4})){5}\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testIpV4Address()", "name": "testIpV4Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIpV4Address()", "original_string": "    @Test\n    void testIpV4Address() {\n        Condition<String> colon = getCharacterCondition('.', 3);\n        assertThat(faker.internet().ipV4Address()).is(colon);\n        for (int i = 0; i < 100; i++) {\n            final String[] octets = faker.internet().getIpV4Address().getHostAddress().split(\"\\\\.\");\n            assertThat(parseInt(octets[0])).isBetween(0, 255);\n            assertThat(parseInt(octets[1])).isBetween(0, 255);\n            assertThat(parseInt(octets[2])).isBetween(0, 255);\n            assertThat(parseInt(octets[3])).isBetween(0, 255);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testIpV4Cidr()", "name": "testIpV4Cidr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIpV4Cidr()", "original_string": "    @Test\n    void testIpV4Cidr() {\n        assertThat(faker.internet().ipV4Cidr())\n            .is(getCharacterCondition('.', 3))\n            .is(getCharacterCondition('/', 1));\n\n        for (int i = 0; i < 1000; i++) {\n            assertThat(parseInt(faker.internet().ipV4Cidr().split(\"/\")[1]))\n                .isBetween(1, 32);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPrivateIpV4Address()", "name": "testPrivateIpV4Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPrivateIpV4Address()", "original_string": "    @Test\n    void testPrivateIpV4Address() {\n        String tenDot = \"^10\\\\..+\";\n        String oneTwoSeven = \"^127\\\\..+\";\n        String oneSixNine = \"^169\\\\.254\\\\..+\";\n        String oneNineTwo = \"^192\\\\.168\\\\..+\";\n        String oneSevenTwo = \"^172\\\\.(16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)\\\\..+\";\n\n        for (int i = 0; i < 1000; i++) {\n            String addr = faker.internet().getPrivateIpV4Address().getHostAddress();\n            assertThat(addr).is(anyOf(\n                new Condition<>(s -> s.matches(tenDot), \"tenDot\"),\n                new Condition<>(s -> s.matches(oneTwoSeven), \"oneTwoSeven\"),\n                new Condition<>(s -> s.matches(oneSixNine), \"oneSixNine\"),\n                new Condition<>(s -> s.matches(oneNineTwo), \"oneNineTwo\"),\n                new Condition<>(s -> s.matches(oneSevenTwo), \"oneSevenTwo\")\n            ));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testPublicIpV4Address()", "name": "testPublicIpV4Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPublicIpV4Address()", "original_string": "    @Test\n    void testPublicIpV4Address() {\n        String tenDot = \"^10\\\\.\";\n        String oneTwoSeven = \"^127\\\\.\";\n        String oneSixNine = \"^169\\\\.254\";\n        String oneNineTwo = \"^192\\\\.168\\\\.\";\n        String oneSevenTwo = \"^172\\\\.(16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)\\\\.\";\n\n        for (int i = 0; i < 1000; i++) {\n            String addr = faker.internet().getPublicIpV4Address().getHostAddress();\n            assertThat(addr).doesNotMatch(tenDot)\n                .doesNotMatch(oneTwoSeven)\n                .doesNotMatch(oneSixNine)\n                .doesNotMatch(oneNineTwo)\n                .doesNotMatch(oneSevenTwo);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testIpV6()", "name": "testIpV6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIpV6()", "original_string": "    @Test\n    void testIpV6() {\n        assertThat(faker.internet().ipV6Address()).is(getCharacterCondition(':', 7));\n\n        for (int i = 0; i < 1000; i++) {\n            assertThat(faker.internet().getIpV6Address().getHostAddress()).matches(IPV6_HOST_ADDRESS);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testIpV6Cidr()", "name": "testIpV6Cidr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIpV6Cidr()", "original_string": "    @Test\n    void testIpV6Cidr() {\n        assertThat(faker.internet().ipV6Cidr())\n            .is(getCharacterCondition(':', 7))\n            .is(getCharacterCondition('/', 1));\n\n        for (int i = 0; i < 1000; i++) {\n            assertThat(parseInt(faker.internet().ipV6Cidr().split(\"/\")[1]))\n                .isBetween(1, 128);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testSlugWithParams()", "name": "testSlugWithParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSlugWithParams()", "original_string": "    @RepeatedTest(10)\n    void testSlugWithParams() {\n        assertThat(faker.internet().slug(List.of(\"a\", \"b\"), \"-\")).matches(\"[a-zA-Z]+-[a-zA-Z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testSlug()", "name": "testSlug", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSlug()", "original_string": "    @RepeatedTest(10)\n    void testSlug() {\n        assertThat(faker.internet().slug()).matches(\"[a-zA-Z]+_[a-zA-Z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUuidv3ConstantRandomSeed()", "name": "testUuidv3ConstantRandomSeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUuidv3ConstantRandomSeed()", "original_string": "    @Test\n    void testUuidv3ConstantRandomSeed() {\n        final int randomSeed = 42;\n        // Two fakers, same random seed.\n        final BaseFaker faker1 = new BaseFaker(new Random(randomSeed));\n        final BaseFaker faker2 = new BaseFaker(new Random((randomSeed)));\n        // Keep it simple and without loops, three examples should suffice to act as the general case.\n        final String faker1Uuidv3First = faker1.internet().uuidv3();\n        final String faker1Uuidv3Second = faker1.internet().uuidv3();\n        final String faker1Uuidv3Third = faker1.internet().uuidv3();\n        final String faker2Uuidv3First = faker2.internet().uuidv3();\n        final String faker2Uuidv3Second = faker2.internet().uuidv3();\n        final String faker2Uuidv3Third = faker2.internet().uuidv3();\n        // Two different fakers with the same random seed should produce the same uuids.\n        assertThat(faker1Uuidv3First).isEqualTo(faker2Uuidv3First);\n        assertThat(faker1Uuidv3Second).isEqualTo(faker2Uuidv3Second);\n        assertThat(faker1Uuidv3Third).isEqualTo(faker2Uuidv3Third);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUuidv3()", "name": "testUuidv3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUuidv3()", "original_string": "    @RepeatedTest(10)\n    void testUuidv3() {\n        assertThat(faker.internet().uuidv3()).matches(\"^[0-9a-f]{8}-[0-9a-f]{4}-3[0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUuid()", "name": "testUuid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUuid()", "original_string": "    @RepeatedTest(10)\n    void testUuid() {\n        assertThat(faker.internet().uuid()).matches(\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUuidv4()", "name": "testUuidv4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUuidv4()", "original_string": "    @RepeatedTest(10)\n    void testUuidv4() {\n        assertThat(faker.internet().uuidv4()).matches(\"^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUuidv7()", "name": "testUuidv7", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUuidv7()", "original_string": "    @RepeatedTest(10)\n    void testUuidv7() {\n        assertThat(faker.internet().uuidv7()).matches(\"^[0-9a-f]{8}-[0-9a-f]{4}-7[0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testFarsiIDNs()", "name": "testFarsiIDNs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testFarsiIDNs()", "original_string": "    @RepeatedTest(100)\n    void testFarsiIDNs() {\n        // in this case, we're just making sure Farsi doesn't blow up.\n        // there have been issues with Farsi not being produced.\n        final BaseFaker f = new BaseFaker(new Locale(\"fa\"));\n        assertThat(f.internet().domainName()).isNotEmpty();\n        assertThat(f.internet().emailAddress()).isNotEmpty();\n        assertThat(f.internet().safeEmailAddress()).isNotEmpty();\n        assertThat(f.internet().webdomain()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testUserAgent()", "name": "testUserAgent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUserAgent()", "original_string": "    @Test\n    void testUserAgent() {\n        Internet.UserAgent[] agents = Internet.UserAgent.values();\n        for (Internet.UserAgent agent : agents) {\n            assertThat(faker.internet().userAgent(agent)).isNotEmpty();\n        }\n\n        //Test faker.internet().userAgentAny() for random user_agent retrieval.\n        assertThat(faker.internet().userAgent()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testBotUserAgent()", "name": "testBotUserAgent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBotUserAgent()", "original_string": "    @Test\n    void testBotUserAgent() {\n        Internet.BotUserAgent[] agents = Internet.BotUserAgent.values();\n        for (Internet.BotUserAgent agent : agents) {\n            assertThat(faker.internet().botUserAgent(agent)).isNotEmpty();\n        }\n\n        //Test faker.internet().userAgentAny() for random user_agent retrieval.\n        assertThat(faker.internet().botUserAgentAny()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[void]testSlugWithNull()", "name": "testSlugWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSlugWithNull()", "original_string": "    @Test\n    void testSlugWithNull() {\n        assertThat(faker.internet().slug(null, \"_\")).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomDigit()", "name": "testRandomDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomDigit()", "original_string": "    @Test\n    void testRandomDigit() {\n        Set<Integer> nums = new HashSet<>(10);\n        final Number number = faker.number();\n        for (int i = 0; i < 1000; ++i) {\n            int value = number.randomDigit();\n            assertThat(value).isLessThanOrEqualTo(9)\n                .isGreaterThanOrEqualTo(0);\n            nums.add(value);\n        }\n        assertThat(nums).contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomDigitNotZero()", "name": "testRandomDigitNotZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomDigitNotZero()", "original_string": "    @Test\n    void testRandomDigitNotZero() {\n        Set<Integer> nums = new HashSet<>(10);\n        final Number number = faker.number();\n        for (int i = 0; i < 1000; ++i) {\n            int value = number.randomDigitNotZero();\n            assertThat(value).isLessThanOrEqualTo(9)\n                .isGreaterThan(0);\n            nums.add(value);\n        }\n        assertThat(nums).contains(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomNumber()", "name": "testRandomNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomNumber()", "original_string": "    @Test\n    void testRandomNumber() {\n        long value = faker.number().randomNumber();\n        assertThat(value).isLessThan(Long.MAX_VALUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomNumberWithSingleDigitStrict()", "name": "testRandomNumberWithSingleDigitStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomNumberWithSingleDigitStrict()", "original_string": "    @Test\n    void testRandomNumberWithSingleDigitStrict() {\n        final Number number = faker.number();\n        for (int i = 0; i < 100; ++i) {\n            long value = number.randomNumber(1, true);\n            assertThat(value).isLessThan(10L)\n                .isGreaterThanOrEqualTo(0L);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomNumberWithZeroDigitsStrict()", "name": "testRandomNumberWithZeroDigitsStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomNumberWithZeroDigitsStrict()", "original_string": "    @Test\n    void testRandomNumberWithZeroDigitsStrict() {\n        final Number number = faker.number();\n        for (int i = 0; i < 100; ++i) {\n            long value = number.randomNumber(0, true);\n            assertThat(value).isZero();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomNumberWithGivenDigitsStrict()", "name": "testRandomNumberWithGivenDigitsStrict", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomNumberWithGivenDigitsStrict()", "original_string": "    @Test\n    void testRandomNumberWithGivenDigitsStrict() {\n        final Number number = faker.number();\n        for (int i = 1; i < 9; ++i) {\n            for (int x = 0; x < 100; ++x) {\n                long value = number.randomNumber(i, true);\n                String stringValue = String.valueOf(value);\n                assertThat(stringValue).hasSize(i);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomDouble()", "name": "testRandomDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomDouble()", "original_string": "    @Test\n    void testRandomDouble() {\n        final Number number = faker.number();\n        for (int i = 1; i < 5; ++i) {\n            for (int x = 0; x < 100; ++x) {\n                double value = number.randomDouble(i, 1, 1000);\n                String strVal = BigDecimal.valueOf(value).stripTrailingZeros().toString();\n                final int dotIndex = strVal.indexOf('.');\n                if (dotIndex != -1 && strVal.indexOf('+') == -1) {\n                    assertThat(strVal.length() - dotIndex - 1).isLessThanOrEqualTo(i);\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testNumberBetween()", "name": "testNumberBetween", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNumberBetween()", "original_string": "    @Test\n    void testNumberBetween() {\n        Number number = faker.number();\n        for (int i = 1; i < 100; ++i) {\n            int v = number.numberBetween(0, i);\n            assertThat(v).isLessThanOrEqualTo(i)\n                .isGreaterThanOrEqualTo(0);\n        }\n\n        for (long i = 1L; i < 100L; ++i) {\n            long v = number.numberBetween(0, i);\n            assertThat(v).isLessThanOrEqualTo(i)\n                .isGreaterThanOrEqualTo(0L);\n        }\n\n        int min1 = 1;\n        long v1 = number.numberBetween(min1, 980000000L);\n        assertThat(v1).isGreaterThan(min1)\n            .isLessThan(980000000L);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testLongNumberBetweenRepeated()", "name": "testLongNumberBetweenRepeated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLongNumberBetweenRepeated()", "original_string": "    @RepeatedTest(100)\n    void testLongNumberBetweenRepeated() {\n        long low = 1;\n        long high = 10;\n        long v = faker.number().numberBetween(low, high);\n        assertThat(v).isLessThan(high)\n            .isGreaterThanOrEqualTo(low);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testIntNumberBetweenRepeated()", "name": "testIntNumberBetweenRepeated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testIntNumberBetweenRepeated()", "original_string": "    @RepeatedTest(100)\n    void testIntNumberBetweenRepeated() {\n        int low = 1;\n        int high = 10;\n        int v = faker.number().numberBetween(low, high);\n        assertThat(v).isLessThan(high)\n            .isGreaterThanOrEqualTo(low);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testNumberBetweenOneAndThree()", "name": "testNumberBetweenOneAndThree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNumberBetweenOneAndThree()", "original_string": "    @Test\n    void testNumberBetweenOneAndThree() {\n        Set<Integer> nums = new HashSet<>(3);\n        final int lowerLimit = 0;\n        final int upperLimit = 3;\n        final Number number = faker.number();\n        for (int i = 0; i < 1000; ++i) {\n            int value = number.numberBetween(lowerLimit, upperLimit);\n            assertThat(value).isLessThan(upperLimit)\n                .isGreaterThanOrEqualTo(lowerLimit);\n            nums.add(value);\n        }\n        assertThat(nums).contains(0, 1, 2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testLongBetweenOneAndThree()", "name": "testLongBetweenOneAndThree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLongBetweenOneAndThree()", "original_string": "    @Test\n    void testLongBetweenOneAndThree() {\n        Set<Long> nums = new HashSet<>(3);\n        final long lowerLimit = 0;\n        final long upperLimit = 3;\n        final Number number = faker.number();\n        for (int i = 0; i < 1000; ++i) {\n            long value = number.numberBetween(lowerLimit, upperLimit);\n            assertThat(value).isLessThan(upperLimit)\n                .isGreaterThanOrEqualTo(lowerLimit);\n            nums.add(value);\n        }\n        assertThat(nums).contains(0L, 1L, 2L);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]numberBetweenIntIntZeroMinMax()", "name": "numberBetweenIntIntZeroMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void numberBetweenIntIntZeroMinMax()", "original_string": "    @Test\n    void numberBetweenIntIntZeroMinMax() {\n        assertThat(faker.number().numberBetween(0, 0))\n            .as(\"Calling numberBetween with min==max yields min, with 0\").isZero();\n        assertThat(faker.number().numberBetween(2, 2))\n            .as(\"Calling numberBetween with min==max yields min\")\n            .isEqualTo(2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]numberBetweenLongLongZeroMinMax()", "name": "numberBetweenLongLongZeroMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void numberBetweenLongLongZeroMinMax()", "original_string": "    @Test\n    void numberBetweenLongLongZeroMinMax() {\n        assertThat(faker.number().numberBetween(0L, 0L))\n            .as(\"Calling numberBetween with min==max yields min, with 0\").isZero();\n        assertThat(faker.number().numberBetween(2L, 2L))\n            .as(\"Calling numberBetween with min==max yields min\")\n            .isEqualTo(2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]randomDoubleRandomizationQuality()", "name": "randomDoubleRandomizationQuality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void randomDoubleRandomizationQuality()", "original_string": "    @Test\n    void randomDoubleRandomizationQuality() {\n        Function<Pair<Long, Long>, Double> minMaxRangeToUniquePercentageFunction = minMax -> {\n            final int min = minMax.getLeft().intValue(), max = minMax.getRight().intValue();\n            long numbersToGet = calculateNumbersToGet(min, max);\n\n            return uniquePercentageOfResults(numbersToGet, () -> faker.number().randomDouble(0, min, max));\n        };\n\n        final double percentGreaterThan80Percent = randomizationQualityTest(minMaxRangeToUniquePercentageFunction);\n        assertThat(percentGreaterThan80Percent).isGreaterThanOrEqualTo(percentRunsGtUniquePercentage);\n\n        // this covers Issue # 121, the number of times the function is called with the MIN/MAX values here\n        // is RANDOMIZATION_TESTS_MAX_NUMBERS_TO_GET\n        final double extremeRunUniquePercent = minMaxRangeToUniquePercentageFunction.apply(Pair.of((long) Integer.MIN_VALUE, (long) Integer.MAX_VALUE));\n        assertThat(extremeRunUniquePercent).isGreaterThanOrEqualTo(INDIVIDUAL_RUN_GT_PERCENT_UNIQUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGiven a number of min/max ranges\nfor each min/max range, call {@link net.datafaker.providers.base.Number#randomDouble(int, int, int)} with min/max 'n' times\ncalculate the uniqueness for that given min/max range.\nFor all 'uniqueness' values\nverify the percentage of 'uniqueness' ratios over 80% is 90%.\n<p>\nThis isn't perfect, but it ensures a pretty good degree of uniqueness in the random number generation.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]numberBetweenIntIntRandomizationQuality()", "name": "numberBetweenIntIntRandomizationQuality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void numberBetweenIntIntRandomizationQuality()", "original_string": "    @Test\n    void numberBetweenIntIntRandomizationQuality() {\n        Function<Pair<Long, Long>, Double> minMaxRangeToUniquePercentageFunction = minMax -> {\n            final int min = minMax.getLeft().intValue();\n            final int max = minMax.getRight().intValue();\n            long numbersToGet = calculateNumbersToGet(min, max);\n\n            return uniquePercentageOfResults(numbersToGet, () -> faker.number().numberBetween(min, max));\n        };\n\n        final double percentGreaterThan80Percent = randomizationQualityTest(minMaxRangeToUniquePercentageFunction);\n        assertThat(percentGreaterThan80Percent).isGreaterThanOrEqualTo(percentRunsGtUniquePercentage);\n\n        // this covers Issue # 121, the number of times the function is called with the MIN/MAX values here\n        // is RANDOMIZATION_TESTS_MAX_NUMBERS_TO_GET\n        final double extremeRunUniquePercent = minMaxRangeToUniquePercentageFunction.apply(Pair.of((long) Integer.MIN_VALUE, (long) Integer.MAX_VALUE));\n        assertThat(extremeRunUniquePercent).isGreaterThanOrEqualTo(INDIVIDUAL_RUN_GT_PERCENT_UNIQUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGiven a number of min/max ranges\nfor each min/max range, call numberBetween with min/max 'n' times\ncalculate the uniqueness for that given min/max range.\nFor all 'uniqueness' values\nverify the percentage of 'uniqueness' ratios over 80% is 90%.\n<p>\nThis isn't perfect, but it ensures a pretty good degree of uniqueness in the random number generation.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]numberBetweenLongLongRandomizationQuality()", "name": "numberBetweenLongLongRandomizationQuality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void numberBetweenLongLongRandomizationQuality()", "original_string": "    @Test\n    void numberBetweenLongLongRandomizationQuality() {\n        Function<Pair<Long, Long>, Double> minMaxRangeToUniquePercentageFunction = minMax -> {\n            final long min = minMax.getLeft(), max = minMax.getRight();\n            long numbersToGet = calculateNumbersToGet(min, max);\n\n            return uniquePercentageOfResults(numbersToGet, () -> faker.number().numberBetween(min, max));\n        };\n\n        final double percentGreaterThan80Percent = randomizationQualityTest(minMaxRangeToUniquePercentageFunction);\n        assertThat(percentGreaterThan80Percent).isGreaterThanOrEqualTo(percentRunsGtUniquePercentage);\n\n        // this covers Issue # 121, the number of times the function is called with the MIN/MAX values here\n        // is RANDOMIZATION_TESTS_MAX_NUMBERS_TO_GET.\n        final double extremeRunUniquePercent = minMaxRangeToUniquePercentageFunction.apply(Pair.of(Long.MIN_VALUE, Long.MAX_VALUE));\n        assertThat(extremeRunUniquePercent).isGreaterThanOrEqualTo(INDIVIDUAL_RUN_GT_PERCENT_UNIQUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGiven a number of min/max ranges\nfor each min/max range, call {@link net.datafaker.providers.base.Number#numberBetween(long, long)}  with min/max 'n' times\ncalculate the uniqueness for that given min/max range.\nFor all 'uniqueness' values\nverify the percentage of 'uniqueness' ratios over 80% is 90%.\n<p>\nThis isn't perfect, but it ensures a pretty good degree of uniqueness in the random number generation.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testRandomDoubleMaxEqualsMin()", "name": "testRandomDoubleMaxEqualsMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRandomDoubleMaxEqualsMin()", "original_string": "    @Test\n    void testRandomDoubleMaxEqualsMin() {\n        double actual = faker.number().randomDouble(1, 42, 42);\n\n        double expected = BigDecimal.valueOf(42).doubleValue();\n\n        assertThat(actual).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testDigit()", "name": "testDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDigit()", "original_string": "    @Test\n    void testDigit() {\n        String digit = faker.number().digit();\n\n        assertThat(digit).matches(\"[0-9]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testDigits()", "name": "testDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDigits()", "original_string": "    @Test\n    void testDigits() {\n        String digits = faker.number().digits(5);\n\n        assertThat(digits).matches(\"[0-9]{5}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testIntNumberBetweenQuality()", "name": "testIntNumberBetweenQuality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testIntNumberBetweenQuality()", "original_string": "    @Test\n    void testIntNumberBetweenQuality() {\n        //test whether the fake number made by numberBetween(int min, int max)\n        // is not randomly and evenly distributed\n        // (The difference between the average is less than 10%)\n        Map<Integer, Integer> map = new HashMap<>();\n        Random random = new Random();\n        int testCase = 100000;\n\n        int min = Math.abs(random.nextInt());\n        int max = min + Math.max(1, Math.abs(random.nextInt(100)));\n        double mean = testCase / (double) (max - min);\n        final Number number = faker.number();\n        for (int j = 0; j < testCase; j++) {\n            int r = number.numberBetween(min, max);\n            map.merge(r, 1, Integer::sum);\n        }\n\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n            assertThat((mean - count) / mean).isLessThan(0.2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testLongNumberBetweenQuality()", "name": "testLongNumberBetweenQuality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLongNumberBetweenQuality()", "original_string": "    @Test\n    void testLongNumberBetweenQuality() {\n        //test whether the fake number made by numberBetween(long min, long max)\n        // is not randomly and evenly distributed\n        // (The difference between the average is less than 10%)\n        Map<Long, Integer> map = new HashMap<>();\n        Random random = new Random();\n        int testCase = 100000;\n\n        long min = Math.abs(random.nextLong());\n        long max = min + Math.max(1, Math.abs(random.nextInt(200)));\n        double mean = testCase / (double) (max - min);\n        final Number number = faker.number();\n        for (int j = 0; j < testCase; j++) {\n            long r = number.numberBetween(min, max);\n            map.merge(r, 1, Integer::sum);\n        }\n\n        for (Map.Entry<Long, Integer> entry : map.entrySet()) {\n            int count = entry.getValue();\n            assertThat((mean - count) / mean).isLessThan(0.2);\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testNumberBetweenContain()", "name": "testNumberBetweenContain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNumberBetweenContain()", "original_string": "    @Test\n    void testNumberBetweenContain() {\n\n        Set<Integer> ints = new HashSet<>();\n        Set<Long> longs = new HashSet<>();\n        Random random = new Random();\n        int size = Math.abs(random.nextInt(100));\n\n        //test whether NumberBetween(int min, int max) can\n        // create all number between min and max(not included)\n        // and not use crossing the border\n        int minInt = Math.abs(random.nextInt());\n        int maxInt = minInt + size;\n        final Number number = faker.number();\n        for (int i = 0; i < 10000; ++i) {\n            int value = number.numberBetween(minInt, maxInt);\n            assertThat(value).isBetween(minInt, maxInt)\n                .isGreaterThanOrEqualTo(minInt);\n            ints.add(value);\n        }\n        assertThat(ints).hasSize(Math.max(1, size));\n\n        //test whether NumberBetween(long, long) can\n        // create all number between min and max(not included)\n        // and not use crossing the border\n        long minLong = Math.abs(random.nextLong());\n        long maxLong = minLong + size;\n        for (int i = 0; i < 10000; ++i) {\n            long value = number.numberBetween(minLong, maxLong);\n            assertThat(value).isBetween(minLong, maxLong)\n                .isGreaterThanOrEqualTo(minLong);\n            longs.add(value);\n        }\n        assertThat(longs).hasSize(Math.max(1, size));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testNumberBetweenBorder()", "name": "testNumberBetweenBorder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNumberBetweenBorder()", "original_string": "    @Test\n    void testNumberBetweenBorder() {\n\n        Random random = new Random();\n\n        //test whether NumberBetween(long, long) not use crossing the border\n        for (int i = 0; i <= 100; i++) {\n\n            //create long integer max and min\n            long size, min = 0, max = -1;\n            while (max < min) {\n                size = Math.abs(random.nextLong());\n                min = Math.abs(random.nextLong());\n                max = min + size;\n            }\n\n            final Number number = faker.number();\n            for (int j = 0; j < 100; j++) {\n                long value = number.numberBetween(min, max);\n                assertThat(value).isLessThan(max)\n                    .isGreaterThanOrEqualTo(min);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testPositive()", "name": "testPositive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testPositive()", "original_string": "    @RepeatedTest(10)\n    void testPositive() {\n        assertThat(faker.number().positive()).isGreaterThan(0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[void]testNegative()", "name": "testNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testNegative()", "original_string": "    @RepeatedTest(10)\n    void testNegative() {\n        assertThat(faker.number().negative()).isLessThan(0);\n\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest.[void]testBase()", "name": "testBase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testBase()", "original_string": "    @RepeatedTest(10)\n    void testBase() {\n        assertThat(faker.verb().base()).matches(WORDS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VerbTest.java", "class_name": "VerbTest", "class_uri": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest.[void]testPast()", "name": "testPast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testPast()", "original_string": "    @RepeatedTest(10)\n    void testPast() {\n        assertThat(faker.verb().past()).matches(WORDS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VerbTest.java", "class_name": "VerbTest", "class_uri": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest.[void]testPastParticiple()", "name": "testPastParticiple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testPastParticiple()", "original_string": "    @RepeatedTest(10)\n    void testPastParticiple() {\n        assertThat(faker.verb().pastParticiple()).matches(WORDS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VerbTest.java", "class_name": "VerbTest", "class_uri": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest.[void]testSimplePresent()", "name": "testSimplePresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSimplePresent()", "original_string": "    @RepeatedTest(10)\n    void testSimplePresent() {\n        assertThat(faker.verb().simplePresent()).matches(WORDS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VerbTest.java", "class_name": "VerbTest", "class_uri": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest.[void]testIngForm()", "name": "testIngForm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testIngForm()", "original_string": "    @RepeatedTest(10)\n    void testIngForm() {\n        assertThat(faker.verb().ingForm()).matches(WORDS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VerbTest.java", "class_name": "VerbTest", "class_uri": "src/test/java/net/datafaker/providers/base/VerbTest.java.VerbTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]weight()", "name": "weight", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void weight()", "original_string": "    @Test\n    void weight() {\n        assertThat(drone.weight()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxAscentSpeed()", "name": "maxAscentSpeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxAscentSpeed()", "original_string": "    @Test\n    void maxAscentSpeed() {\n        assertThat(drone.maxAscentSpeed()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxDescentSpeed()", "name": "maxDescentSpeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxDescentSpeed()", "original_string": "    @Test\n    void maxDescentSpeed() {\n        assertThat(drone.maxDescentSpeed()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]flightTime()", "name": "flightTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void flightTime()", "original_string": "    @Test\n    void flightTime() {\n        assertThat(drone.flightTime()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxAltitude()", "name": "maxAltitude", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxAltitude()", "original_string": "    @Test\n    void maxAltitude() {\n        assertThat(drone.maxAltitude()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxFlightDistance()", "name": "maxFlightDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxFlightDistance()", "original_string": "    @Test\n    void maxFlightDistance() {\n        assertThat(drone.maxFlightDistance()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxSpeed()", "name": "maxSpeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxSpeed()", "original_string": "    @Test\n    void maxSpeed() {\n        assertThat(drone.maxSpeed()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxWindResistance()", "name": "maxWindResistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxWindResistance()", "original_string": "    @Test\n    void maxWindResistance() {\n        assertThat(drone.maxWindResistance()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxAngularVelocity()", "name": "maxAngularVelocity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxAngularVelocity()", "original_string": "    @Test\n    void maxAngularVelocity() {\n        assertThat(drone.maxAngularVelocity()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxTiltAngle()", "name": "maxTiltAngle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxTiltAngle()", "original_string": "    @Test\n    void maxTiltAngle() {\n        assertThat(drone.maxTiltAngle()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]operatingTemperature()", "name": "operatingTemperature", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void operatingTemperature()", "original_string": "    @Test\n    void operatingTemperature() {\n        assertThat(drone.operatingTemperature()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]batteryCapacity()", "name": "batteryCapacity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batteryCapacity()", "original_string": "    @Test\n    void batteryCapacity() {\n        assertThat(drone.batteryCapacity()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]batteryVoltage()", "name": "batteryVoltage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batteryVoltage()", "original_string": "    @Test\n    void batteryVoltage() {\n        assertThat(drone.batteryVoltage()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]batteryWeight()", "name": "batteryWeight", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batteryWeight()", "original_string": "    @Test\n    void batteryWeight() {\n        assertThat(drone.batteryWeight()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]chargingTemperature()", "name": "chargingTemperature", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void chargingTemperature()", "original_string": "    @Test\n    void chargingTemperature() {\n        assertThat(drone.chargingTemperature()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxChargingPower()", "name": "maxChargingPower", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxChargingPower()", "original_string": "    @Test\n    void maxChargingPower() {\n        assertThat(drone.maxChargingPower()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[void]maxResolution()", "name": "maxResolution", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void maxResolution()", "original_string": "    @Test\n    void maxResolution() {\n        assertThat(drone.maxResolution()).isNotEmpty().doesNotContain(\"#\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java.InternetPasswordTest.[void]testPassword1000()", "name": "testPassword1000", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPassword1000()", "original_string": "    @Test\n    void testPassword1000() {\n        final Pattern specialCharacterPattern = Pattern.compile(\"[^a-zA-Z0-9]\");\n        final Pattern digitPattern = Pattern.compile(\"[0-9]\");\n        for (int i = 0; i < 1000; i++) {\n            String password = faker.internet().password(8, 16, true, true, true);\n            Matcher specialCharacterMatcher = specialCharacterPattern.matcher(password);\n            Matcher digitMatcher = digitPattern.matcher(password);\n\n            boolean isPasswordContainsSpecialCharacter = specialCharacterMatcher.find();\n            boolean isPasswordContainsDigit = digitMatcher.find();\n\n            assertThat(isPasswordContainsDigit).isTrue();\n            assertThat(isPasswordContainsSpecialCharacter).isTrue();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java", "class_name": "InternetPasswordTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java.InternetPasswordTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java.InternetPasswordTest.[void]passwordSpecial()", "name": "passwordSpecial", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void passwordSpecial()", "original_string": "    @Test\n    void passwordSpecial() {\n        boolean check = true;\n        for (int i = 0; i < 10; i++) {\n            String password = faker.internet().password(8, 16, true, true, true);\n            Pattern specialCharacterPattern = Pattern.compile(\"[^a-zA-Z0-9]\");\n            Matcher specialCharacterMatcher = specialCharacterPattern.matcher(password);\n            if (!specialCharacterMatcher.find()) {\n                check = false;\n                break;\n            }\n\n        }\n        assertThat(check).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java", "class_name": "InternetPasswordTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java.InternetPasswordTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java.InternetPasswordTest.[void]passwordMix()", "name": "passwordMix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void passwordMix()", "original_string": "    @Test\n    void passwordMix() {\n        boolean check = true;\n        for (int i = 0; i < 10; i++) {\n            String password = faker.internet().password(8, 16, true, true, true);\n            Pattern specialCharacterPattern = Pattern.compile(\"[^a-zA-Z0-9]\");\n            Matcher specialCharacterMatcher = specialCharacterPattern.matcher(password);\n            Pattern digitPattern = Pattern.compile(\"[0-9]\");\n            Matcher digitMatcher = digitPattern.matcher(password);\n            if (!specialCharacterMatcher.find()) {\n                check = false;\n                break;\n            }\n            if (!digitMatcher.find()) {\n                check = false;\n                break;\n            }\n        }\n        assertThat(check).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java", "class_name": "InternetPasswordTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetPasswordTest.java.InternetPasswordTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]bmp()", "name": "bmp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bmp()", "original_string": "    @Test\n    void bmp() {\n        assertThat(faker.image().base64BMP()).startsWith(\"data:image/bmp;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]gif()", "name": "gif", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void gif()", "original_string": "    @Test\n    void gif() {\n        assertThat(faker.image().base64GIF()).startsWith(\"data:image/gif;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]png()", "name": "png", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void png()", "original_string": "    @Test\n    void png() {\n        assertThat(faker.image().base64PNG()).startsWith(\"data:image/png;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]jpg()", "name": "jpg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void jpg()", "original_string": "    @Test\n    void jpg() {\n        assertThat(faker.image().base64JPG()).startsWith(\"data:image/jpeg;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]jpeg()", "name": "jpeg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void jpeg()", "original_string": "    @Test\n    void jpeg() {\n        assertThat(faker.image().base64JPEG()).startsWith(\"data:image/jpeg;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]svg()", "name": "svg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void svg()", "original_string": "    @Test\n    void svg() {\n        assertThat(faker.image().base64SVG()).startsWith(\"data:image/svg+xml;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]tiff()", "name": "tiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void tiff()", "original_string": "    @Test\n    void tiff() {\n        assertThat(faker.image().base64TIFF()).startsWith(\"data:image/tiff;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]base64(ImageType)", "name": "base64", "arg_nums": 1, "params": [{"name": "imageType", "type": "ImageType"}], "return_type": "void", "signature": "@ParameterizedTest\n    @EnumSource(ImageType.class)\n    void base64(ImageType imageType)", "original_string": "    @ParameterizedTest\n    @EnumSource(ImageType.class)\n    void base64(ImageType imageType) {\n        String base64Image = faker.image().base64(new Image.Base64ImageRuleConfig(imageType, 1000, 1000));\n\n        assertThat(base64Image)\n            .startsWith(\"data:\" + imageType.getMimeType() + \";base64,\");\n        assertThat(base64Image.substring(base64Image.indexOf(\",\") + 1))\n            .isNotBlank()\n            .isBase64();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@ParameterizedTest\n    @EnumSource(ImageType.class)", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(ImageType.class)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]defaultBuilder()", "name": "defaultBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void defaultBuilder()", "original_string": "    @Test\n    void defaultBuilder() {\n        String image = faker.image().base64(Image.ImageBuilder.builder()\n            .build());\n        assertThat(image).startsWith(\"data:image/\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]customBase64builder()", "name": "customBase64builder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void customBase64builder()", "original_string": "    @Test\n    void customBase64builder() {\n        String gif = faker.image().base64(Image.ImageBuilder.builder()\n            .type(ImageType.GIF)\n            .build());\n        assertThat(gif).startsWith(\"data:image/gif;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]tinyBase64builder()", "name": "tinyBase64builder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void tinyBase64builder()", "original_string": "    @Test\n    void tinyBase64builder() {\n        String tiny = faker.image().base64(Image.ImageBuilder.builder()\n            .height(1)\n            .width(1)\n            .type(ImageType.PNG)\n            .build());\n\n        assertThat(tiny).startsWith(\"data:image/png;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]largeBase64builder()", "name": "largeBase64builder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void largeBase64builder()", "original_string": "    @Test\n    void largeBase64builder() {\n        String large = faker.image().base64(Image.ImageBuilder.builder()\n            .height(1000)\n            .width(2000)\n            .type(ImageType.BMP)\n            .build());\n        assertThat(large).startsWith(\"data:image/bmp;base64,\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]shouldErrorOnIllegalType()", "name": "shouldErrorOnIllegalType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldErrorOnIllegalType()", "original_string": "    @Test\n    void shouldErrorOnIllegalType() {\n        assertThatIllegalArgumentException().isThrownBy(() -> Image.ImageBuilder.builder().type(null).build());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]shouldErrorOnNegativeWidth()", "name": "shouldErrorOnNegativeWidth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldErrorOnNegativeWidth()", "original_string": "    @Test\n    void shouldErrorOnNegativeWidth() {\n        assertThatIllegalArgumentException().isThrownBy(() -> Image.ImageBuilder.builder().width(-1).build());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]shouldErrorOnZeroWidth()", "name": "shouldErrorOnZeroWidth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldErrorOnZeroWidth()", "original_string": "    @Test\n    void shouldErrorOnZeroWidth() {\n        assertThatIllegalArgumentException().isThrownBy(() -> Image.ImageBuilder.builder().width(0).build());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]shouldErrorOnNegativeHeight()", "name": "shouldErrorOnNegativeHeight", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldErrorOnNegativeHeight()", "original_string": "    @Test\n    void shouldErrorOnNegativeHeight() {\n        assertThatIllegalArgumentException().isThrownBy(() -> Image.ImageBuilder.builder().height(-1).build());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest.[void]shouldErrorOnZeroHeight()", "name": "shouldErrorOnZeroHeight", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldErrorOnZeroHeight()", "original_string": "    @Test\n    void shouldErrorOnZeroHeight() {\n        assertThatIllegalArgumentException().isThrownBy(() -> Image.ImageBuilder.builder().height(0).build());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ImageTest.java", "class_name": "ImageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ImageTest.java.ImageTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]element()", "name": "element", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void element()", "original_string": "    @RepeatedTest(10)\n    void element() {\n        assertThat(science.element()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]elementSymbol()", "name": "elementSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void elementSymbol()", "original_string": "    @RepeatedTest(10)\n    void elementSymbol() {\n        assertThat(science.elementSymbol()).matches(\"[A-Za-z]{1,2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]scientist()", "name": "scientist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void scientist()", "original_string": "    @RepeatedTest(10)\n    void scientist() {\n        assertThat(science.scientist()).matches(\"[A-Za-z. -]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]tool()", "name": "tool", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void tool()", "original_string": "    @RepeatedTest(10)\n    void tool() {\n        assertThat(science.tool()).matches(\"[0-9A-Za-z. -]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]quark()", "name": "quark", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void quark()", "original_string": "    @RepeatedTest(10)\n    void quark() {\n        assertThat(science.quark()).matches(\"[A-Za-z]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]leptons()", "name": "leptons", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void leptons()", "original_string": "    @RepeatedTest(10)\n    void leptons() {\n        assertThat(science.leptons()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[void]bosons()", "name": "bosons", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void bosons()", "original_string": "    @RepeatedTest(10)\n    void bosons() {\n        assertThat(science.bosons()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_sentencesTest.java.Lorem_sentencesTest.[void]testSentencesWithPositiveCount()", "name": "testSentencesWithPositiveCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSentencesWithPositiveCount()", "original_string": "    @Test\n    void testSentencesWithPositiveCount() {\n        int sentenceCount = 5;\n        List<String> sentences = lorem.sentences(sentenceCount);\n        assertThat(sentences).hasSize(sentenceCount);\n        sentences.forEach(sentence -> assertThat(sentence).endsWith(\".\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_sentencesTest.java", "class_name": "Lorem_sentencesTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_sentencesTest.java.Lorem_sentencesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_sentencesTest.java.Lorem_sentencesTest.[void]testSentencesWithZeroCount()", "name": "testSentencesWithZeroCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSentencesWithZeroCount()", "original_string": "    @Test\n    void testSentencesWithZeroCount() {\n        int sentenceCount = 0;\n        List<String> sentences = lorem.sentences(sentenceCount);\n        assertThat(sentences).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_sentencesTest.java", "class_name": "Lorem_sentencesTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_sentencesTest.java.Lorem_sentencesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_getIpV6AddressTest.java.Internet_getIpV6AddressTest.[void]testGetIpV6Address()", "name": "testGetIpV6Address", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIpV6Address()", "original_string": "    @Test\n    public void testGetIpV6Address() throws UnknownHostException {\n        // Given\n        BaseFaker faker = Mockito.mock(BaseFaker.class);\n        RandomService randomService = Mockito.mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.hex(4, false)).thenReturn(\"abcd\");\n\n        Internet internet = new Internet(faker);\n\n        // When\n        InetAddress result = internet.getIpV6Address();\n\n        // Then\n        assertEquals(\"abcd:abcd:abcd:abcd:abcd:abcd:abcd:abcd\", result.getHostAddress());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_getIpV6AddressTest.java", "class_name": "Internet_getIpV6AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_getIpV6AddressTest.java.Internet_getIpV6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_getIpV6AddressTest.java.Internet_getIpV6AddressTest.[void]testGetIpV6Address_UnknownHostException()", "name": "testGetIpV6Address_UnknownHostException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIpV6Address_UnknownHostException()", "original_string": "    @Test\n    public void testGetIpV6Address_UnknownHostException() {\n        // Given\n        BaseFaker faker = Mockito.mock(BaseFaker.class);\n        RandomService randomService = Mockito.mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n        when(randomService.hex(4, false)).thenReturn(\"invalid\");\n\n        Internet internet = new Internet(faker);\n\n        // When and Then\n        assertThrows(RuntimeException.class, internet::getIpV6Address);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_getIpV6AddressTest.java", "class_name": "Internet_getIpV6AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_getIpV6AddressTest.java.Internet_getIpV6AddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]allSupportedLocales()", "name": "allSupportedLocales", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void allSupportedLocales()", "original_string": "    @Test\n    void allSupportedLocales() {\n        // Check that directory of locale resources exists\n        File resourceDirectory = new File(\"./src/main/resources\");\n        assertThat(resourceDirectory).exists();\n\n        List<String> allLocales = locality.allSupportedLocales();\n        assertThat(allLocales).hasSize(87);\n        assertThat(allLocales)\n            .as(\"Somebody forgot to add the new locale to Locality.LOCALES\")\n            .containsExactlyInAnyOrderElementsOf(findAllSupportedLocales(resourceDirectory));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to check that list of all locales support is loaded\n"}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]displayName()", "name": "displayName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void displayName()", "original_string": "    @Test\n    void displayName() {\n        assertThat(f.locality().displayName()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]localeStringRandom()", "name": "localeStringRandom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void localeStringRandom()", "original_string": "    @Test\n    void localeStringRandom() {\n        // Check that we get the same locale when using pseudorandom number generator with a fixed seed\n        final long fixedSeed = 5;\n\n        Random random1 = new Random(fixedSeed);\n        String randomLocale1 = locality.localeStringWithRandom(random1);\n\n        Random random2 = new Random(fixedSeed);\n        String randomLocale2 = locality.localeStringWithRandom(random2);\n\n        assertThat(randomLocale1).isEqualTo(randomLocale2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to check Locality's localeStringWithRandom method is using the random number generator\npassed as an argument. This is checked with a Random object that has a fixed seed and\nshould have deterministic results.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]localeStringWithRandom()", "name": "localeStringWithRandom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void localeStringWithRandom()", "original_string": "    @RepeatedTest(100)\n    void localeStringWithRandom() {\n        Random random = new Random();\n        String randomLocale = locality.localeStringWithRandom(random);\n        assertThat(locality.allSupportedLocales()).contains(randomLocale);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to check Locality's localeStringWithRandom method. It verifies that the randomly selected\nlocale is within the set of all supported locales\n"}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]localeStringWithoutReplacement()", "name": "localeStringWithoutReplacement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void localeStringWithoutReplacement()", "original_string": "    @Test\n    void localeStringWithoutReplacement() {\n        Random random = new Random();\n        // loop through all supported locales\n        for (int i = 0; i < 2; i++) {\n            Set<String> returnedLocales = IntStream.range(0, locality.allSupportedLocales().size())\n                .mapToObj(j -> locality.localeStringWithoutReplacement(random))\n                .collect(Collectors.toSet());\n\n            assertThat(locality.allSupportedLocales()).containsAll(returnedLocales);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]localeString()", "name": "localeString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void localeString()", "original_string": "    @Test\n    void localeString() {\n        assertThat(locality.allSupportedLocales()).contains(locality.localeString());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[void]localeWithoutReplacement()", "name": "localeWithoutReplacement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void localeWithoutReplacement()", "original_string": "    @Test\n    void localeWithoutReplacement() {\n        assertThat(locality.localeStringWithoutReplacement()).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BoolTest.java.BoolTest.[void]testBool()", "name": "testBool", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testBool()", "original_string": "    @RepeatedTest(100)\n    void testBool() {\n        assertThat(faker.bool().bool()).isIn(true, false);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BoolTest.java", "class_name": "BoolTest", "class_uri": "src/test/java/net/datafaker/providers/base/BoolTest.java.BoolTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CPFTest.java.CPFTest.[void]isValidCPF()", "name": "isValidCPF", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void isValidCPF()", "original_string": "    @RepeatedTest(100)\n    void isValidCPF() {\n        assertThat(isCPFValid(faker.cpf().valid())).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CPFTest.java", "class_name": "CPFTest", "class_uri": "src/test/java/net/datafaker/providers/base/CPFTest.java.CPFTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nA valid CPF is either a real number or a generated valid number.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/CPFTest.java.CPFTest.[void]isInvalidCPF()", "name": "isInvalidCPF", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void isInvalidCPF()", "original_string": "    @RepeatedTest(100)\n    void isInvalidCPF() {\n        assertThat(isCPFValid(faker.cpf().invalid())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CPFTest.java", "class_name": "CPFTest", "class_uri": "src/test/java/net/datafaker/providers/base/CPFTest.java.CPFTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nA invalid CPF is that dos not meet the requirements of the algorithm\n"}, {"uris": "src/test/java/net/datafaker/providers/base/CPFTest.java.CPFTest.[void]formattedCPF()", "name": "formattedCPF", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void formattedCPF()", "original_string": "    @RepeatedTest(100)\n    void formattedCPF() {\n        assertThat(faker.cpf().valid()).matches(CPF_EXPRESSION);\n        assertThat(faker.cpf().valid(true)).matches(CPF_EXPRESSION);\n        assertThat(faker.cpf().invalid()).matches(CPF_EXPRESSION);\n        assertThat(faker.cpf().invalid(true)).matches(CPF_EXPRESSION);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CPFTest.java", "class_name": "CPFTest", "class_uri": "src/test/java/net/datafaker/providers/base/CPFTest.java.CPFTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCPF has a main format. This test validate if the number is on the correct format\nEg: 111.111.111-11\n"}, {"uris": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest.[void]anyTest()", "name": "anyTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void anyTest()", "original_string": "    @RepeatedTest(100)\n    void anyTest() {\n        assertThat(relationship.any()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RelationshipTest.java", "class_name": "RelationshipTest", "class_uri": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest.[void]anyWithIllegalArgumentExceptionThrown()", "name": "anyWithIllegalArgumentExceptionThrown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void anyWithIllegalArgumentExceptionThrown()", "original_string": "    @Test\n    void anyWithIllegalArgumentExceptionThrown() {\n        when(mockFaker.fakeValuesService()).thenReturn(fakeValuesService);\n        when(fakeValuesService.resolve(any(), any(), any())).thenThrow(new IllegalArgumentException(\"Oops\"));\n\n        assertThatThrownBy(() -> relationship.any())\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Oops\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RelationshipTest.java", "class_name": "RelationshipTest", "class_uri": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest.[void]anyWithInvocationTargetExceptionThrown()", "name": "anyWithInvocationTargetExceptionThrown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void anyWithInvocationTargetExceptionThrown()", "original_string": "    @Test\n    void anyWithInvocationTargetExceptionThrown() {\n        when(mockFaker.fakeValuesService()).thenReturn(fakeValuesService);\n        when(fakeValuesService.resolve(any(), any(), any())).thenThrow(new NullPointerException(\"Oops\"));\n\n        assertThatThrownBy(() -> relationship.any())\n            .isInstanceOf(NullPointerException.class)\n            .hasMessage(\"Oops\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RelationshipTest.java", "class_name": "RelationshipTest", "class_uri": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest.[void]testNumerifyRandomnessCanBeControlled()", "name": "testNumerifyRandomnessCanBeControlled", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNumerifyRandomnessCanBeControlled()", "original_string": "    @Test\n    void testNumerifyRandomnessCanBeControlled() {\n        resetRandomSeed();\n        final String firstInvocation = faker.numerify(\"###\");\n\n        resetRandomSeed();\n        final String secondInvocation = faker.numerify(\"###\");\n        assertThat(firstInvocation).isEqualTo(secondInvocation);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "class_name": "RandomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest.[void]testLetterifyRandomnessCanBeControlled()", "name": "testLetterifyRandomnessCanBeControlled", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLetterifyRandomnessCanBeControlled()", "original_string": "    @Test\n    void testLetterifyRandomnessCanBeControlled() {\n        resetRandomSeed();\n        final String firstInvocation = faker.letterify(\"???\");\n\n        resetRandomSeed();\n        final String secondInvocation = faker.letterify(\"???\");\n        assertThat(firstInvocation).isEqualTo(secondInvocation);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "class_name": "RandomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest.[void]testNameRandomnessCanBeControlled()", "name": "testNameRandomnessCanBeControlled", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNameRandomnessCanBeControlled()", "original_string": "    @Test\n    void testNameRandomnessCanBeControlled() {\n        resetRandomSeed();\n        final String firstInvocation = faker.name().name();\n\n        resetRandomSeed();\n        final String secondInvocation = faker.name().name();\n        assertThat(firstInvocation).isEqualTo(secondInvocation);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "class_name": "RandomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest.[void]testEmailRandomnessCanBeControlled()", "name": "testEmailRandomnessCanBeControlled", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEmailRandomnessCanBeControlled()", "original_string": "    @Test\n    void testEmailRandomnessCanBeControlled() {\n        resetRandomSeed();\n        final String firstInvocation = faker.internet().emailAddress();\n\n        resetRandomSeed();\n        final String secondInvocation = faker.internet().emailAddress();\n        assertThat(firstInvocation).isEqualTo(secondInvocation);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "class_name": "RandomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]people()", "name": "people", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void people()", "original_string": "    @Test\n    void people() {\n        assertThat(slackEmoji.people()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]nature()", "name": "nature", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void nature()", "original_string": "    @Test\n    void nature() {\n        assertThat(slackEmoji.nature()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]food_and_drink()", "name": "food_and_drink", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void food_and_drink()", "original_string": "    @Test\n    void food_and_drink() {\n        assertThat(slackEmoji.foodAndDrink()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]celebration()", "name": "celebration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void celebration()", "original_string": "    @Test\n    void celebration() {\n        assertThat(slackEmoji.celebration()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]activity()", "name": "activity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void activity()", "original_string": "    @Test\n    void activity() {\n        assertThat(slackEmoji.activity()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]travel_and_places()", "name": "travel_and_places", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void travel_and_places()", "original_string": "    @Test\n    void travel_and_places() {\n        assertThat(slackEmoji.travelAndPlaces()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]objects_and_symbols()", "name": "objects_and_symbols", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void objects_and_symbols()", "original_string": "    @Test\n    void objects_and_symbols() {\n        assertThat(slackEmoji.objectsAndSymbols()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]custom()", "name": "custom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void custom()", "original_string": "    @Test\n    void custom() {\n        assertThat(slackEmoji.custom()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest.[void]emoji()", "name": "emoji", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void emoji()", "original_string": "    @Test\n    void emoji() {\n        assertThat(slackEmoji.emoji()).matches(EMOTICON_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java", "class_name": "SlackEmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/SlackEmojiTest.java.SlackEmojiTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ComputerTest.java.ComputerTest.[void]testOperatingSystem()", "name": "testOperatingSystem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testOperatingSystem()", "original_string": "    @Test\n    void testOperatingSystem() {\n        assertThat(computer.operatingSystem()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ComputerTest.java", "class_name": "ComputerTest", "class_uri": "src/test/java/net/datafaker/providers/base/ComputerTest.java.ComputerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLatinStreetName()", "name": "testLatinStreetName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"en\", \"id\", \"ca\", \"cs\"})\n    void testLatinStreetName()", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"en\", \"id\", \"ca\", \"cs\"})\n    void testLatinStreetName() {\n        final BaseFaker faker = new BaseFaker();\n        assertThat(faker.address().streetName()).isNotEmpty().doesNotMatch(CYRILLIC_LETTERS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"en\", \"id\", \"ca\", \"cs\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"en\", \"id\", \"ca\", \"cs\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCyrillicStreetName(String)", "name": "testCyrillicStreetName", "arg_nums": 1, "params": [{"name": "cyrillicLocale", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"be\", \"bg\", \"by\", \"mk\", \"ru\", \"ru_MD\", \"uk\"})\n    void testCyrillicStreetName(String cyrillicLocale)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"be\", \"bg\", \"by\", \"mk\", \"ru\", \"ru_MD\", \"uk\"})\n    void testCyrillicStreetName(String cyrillicLocale) {\n        final BaseFaker localFaker = new BaseFaker(new Locale(cyrillicLocale));\n        assertThat(localFaker.address().streetName()).isNotEmpty().matches(CYRILLIC_LETTERS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"be\", \"bg\", \"by\", \"mk\", \"ru\", \"ru_MD\", \"uk\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"be\", \"bg\", \"by\", \"mk\", \"ru\", \"ru_MD\", \"uk\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testStreetAddressStartsWithNumber()", "name": "testStreetAddressStartsWithNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStreetAddressStartsWithNumber()", "original_string": "    @Test\n    void testStreetAddressStartsWithNumber() {\n        final String streetAddressNumber = faker.address().streetAddress();\n        assertThat(streetAddressNumber).matches(\"[0-9]+ .+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testStreetAddressIsANumber()", "name": "testStreetAddressIsANumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStreetAddressIsANumber()", "original_string": "    @Test\n    void testStreetAddressIsANumber() {\n        final String streetAddressNumber = faker.address().streetAddressNumber();\n        assertThat(streetAddressNumber).matches(\"[0-9]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLatitude()", "name": "testLatitude", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLatitude()", "original_string": "    @RepeatedTest(100)\n    void testLatitude() {\n        String latStr = faker.address().latitude().replace(decimalSeparator, '.');\n        assertThat(latStr).is(IS_A_NUMBER);\n        Double lat = Double.valueOf(latStr);\n        assertThat(lat).isBetween(-90.0, 90.0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLongitude()", "name": "testLongitude", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLongitude()", "original_string": "    @RepeatedTest(100)\n    void testLongitude() {\n        String longStr = faker.address().longitude().replace(decimalSeparator, '.');\n        assertThat(longStr).is(IS_A_NUMBER);\n        Double lon = Double.valueOf(longStr);\n        assertThat(lon).isBetween(-180.0, 180.0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLocaleLatitude()", "name": "testLocaleLatitude", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testLocaleLatitude()", "original_string": "    @RepeatedTest(10)\n    void testLocaleLatitude() {\n        BaseFaker engFaker = new BaseFaker(Locale.ENGLISH);\n        String engLatStr = engFaker.address().latitude();\n        assertThat(engLatStr).matches(\"-?\\\\d{1,3}\\\\.\\\\d+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLocaleLongitude()", "name": "testLocaleLongitude", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testLocaleLongitude()", "original_string": "    @RepeatedTest(10)\n    void testLocaleLongitude() {\n        BaseFaker engFaker = new BaseFaker(Locale.ENGLISH);\n        String engLatStr = engFaker.address().longitude();\n        assertThat(engLatStr).matches(\"-?\\\\d{1,3}\\\\.\\\\d+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testTimeZone()", "name": "testTimeZone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTimeZone()", "original_string": "    @Test\n    void testTimeZone() {\n        assertThat(faker.address().timeZone()).matches(\"[A-Za-z_]+/[A-Za-z_]+[/A-Za-z_]*\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testState()", "name": "testState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testState()", "original_string": "    @Test\n    void testState() {\n        assertThat(faker.address().state()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCity()", "name": "testCity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCity()", "original_string": "    @Test\n    void testCity() {\n        assertThat(faker.address().city()).matches(\"[A-Za-z'() ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCityName()", "name": "testCityName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCityName()", "original_string": "    @Test\n    void testCityName() {\n        assertThat(faker.address().cityName()).matches(\"[A-Za-z'() ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCountry()", "name": "testCountry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCountry()", "original_string": "    @Test\n    void testCountry() {\n        assertThat(faker.address().country()).matches(\"[A-Za-z\\\\- &.,'()\\\\d]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCountryCode()", "name": "testCountryCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCountryCode()", "original_string": "    @Test\n    void testCountryCode() {\n        assertThat(faker.address().countryCode()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testStreetAddressIncludeSecondary()", "name": "testStreetAddressIncludeSecondary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStreetAddressIncludeSecondary()", "original_string": "    @Test\n    void testStreetAddressIncludeSecondary() {\n        assertThat(faker.address().streetAddress(true)).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCityWithLocaleFranceAndSeed()", "name": "testCityWithLocaleFranceAndSeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCityWithLocaleFranceAndSeed()", "original_string": "    @Test\n    void testCityWithLocaleFranceAndSeed() {\n        long seed = (long) (Long.MAX_VALUE * Math.random());\n        BaseFaker firstFaker = new BaseFaker(Locale.FRANCE, new Random(seed));\n        BaseFaker secondFaker = new BaseFaker(Locale.FRANCE, new Random(seed));\n        for (int i = 0; i < 100; i++) {\n            assertThat(firstFaker.address().city()).isEqualTo(secondFaker.address().city());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testFullAddress()", "name": "testFullAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFullAddress()", "original_string": "    @Test\n    void testFullAddress() {\n        assertThat(faker.address().fullAddress()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]fullAddress_estonia()", "name": "fullAddress_estonia", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fullAddress_estonia()", "original_string": "    @Test\n    void fullAddress_estonia() {\n        BaseFaker f = new BaseFaker(new Locale(\"et\", \"EE\"));\n        assertThat(f.address().fullAddress()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testZipCodeByState()", "name": "testZipCodeByState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testZipCodeByState()", "original_string": "    @Test\n    void testZipCodeByState() {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"en\", \"US\"));\n        assertThat(localFaker.address().zipCodeByState(localFaker.address().stateAbbr())).matches(\"[0-9]{5}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testHungarianZipCodeByState()", "name": "testHungarianZipCodeByState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHungarianZipCodeByState()", "original_string": "    @Test\n    void testHungarianZipCodeByState() {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"hu\"));\n        assertThat(localFaker.address().zipCodeByState(localFaker.address().stateAbbr())).matches(\"[0-9]{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCountyByZipCode()", "name": "testCountyByZipCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCountyByZipCode()", "original_string": "    @Test\n    void testCountyByZipCode() {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"en\", \"US\"));\n        assertThat(localFaker.address().countyByZipCode(\"47732\")).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCountyForWrongZipCode(String)", "name": "testCountyForWrongZipCode", "arg_nums": 1, "params": [{"name": "zipCode", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @NullSource\n    @ValueSource(strings = {\"1\", \"asd\", \"qwe\", \"wrong\"})\n    void testCountyForWrongZipCode(String zipCode)", "original_string": "    @ParameterizedTest\n    @NullSource\n    @ValueSource(strings = {\"1\", \"asd\", \"qwe\", \"wrong\"})\n    void testCountyForWrongZipCode(String zipCode) {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"en\", \"US\"));\n        assertThatThrownBy(() -> localFaker.address().countyByZipCode(zipCode))\n            .isInstanceOf(RuntimeException.class)\n            .hasMessage(\"County is not configured for postcode \" + zipCode);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@ParameterizedTest\n    @NullSource\n    @ValueSource(strings = {\"1\", \"asd\", \"qwe\", \"wrong\"})", "marker_annotations": ["@ParameterizedTest", "@NullSource"], "non_marker_annotations": ["@ValueSource(strings = {\"1\", \"asd\", \"qwe\", \"wrong\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testStreetPrefix()", "name": "testStreetPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStreetPrefix()", "original_string": "    @Test\n    void testStreetPrefix() {\n        assertThat(faker.address().streetPrefix()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testStreetSuffix()", "name": "testStreetSuffix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStreetSuffix()", "original_string": "    @Test\n    void testStreetSuffix() {\n        assertThat(faker.address().streetSuffix()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCityPrefix()", "name": "testCityPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCityPrefix()", "original_string": "    @Test\n    void testCityPrefix() {\n        assertThat(faker.address().cityPrefix()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCitySuffix()", "name": "testCitySuffix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCitySuffix()", "original_string": "    @Test\n    void testCitySuffix() {\n        assertThat(faker.address().citySuffix()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testMailbox()", "name": "testMailbox", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testMailbox()", "original_string": "    @RepeatedTest(10)\n    void testMailbox() {\n        assertThat(faker.address().mailBox()).matches(\"PO Box [0-9]{2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testZipIsFiveChars()", "name": "testZipIsFiveChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testZipIsFiveChars()", "original_string": "    @Test\n    void testZipIsFiveChars() {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"en\", \"US\"));\n        assertThat(localFaker.address().zipCode()).hasSize(5);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testZipPlus4IsTenChars()", "name": "testZipPlus4IsTenChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testZipPlus4IsTenChars()", "original_string": "    @Test\n    void testZipPlus4IsTenChars() {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"en\", \"US\"));\n        assertThat(localFaker.address().zipCodePlus4()).hasSize(10);  // includes dash\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testZipPlus4IsNineDigits()", "name": "testZipPlus4IsNineDigits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testZipPlus4IsNineDigits()", "original_string": "    @Test\n    void testZipPlus4IsNineDigits() {\n        final BaseFaker localFaker = new BaseFaker(new Locale(\"en\", \"US\"));\n        final String[] zipCodeParts = localFaker.address().zipCodePlus4().split(\"-\");\n        assertThat(zipCodeParts[0]).matches(\"[0-9]{5}\");\n        assertThat(zipCodeParts[1]).matches(\"[0-9]{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLatLonEnUs()", "name": "testLatLonEnUs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLatLonEnUs()", "original_string": "    @RepeatedTest(100)\n    void testLatLonEnUs() {\n        assertThat(US_FAKER.address().latLon())\n            .matches(BI_LAT_LON_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(US_FAKER.getContext().getLocale()), \",\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLatLonNl()", "name": "testLatLonNl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLatLonNl()", "original_string": "    @RepeatedTest(100)\n    void testLatLonNl() {\n        assertThat(NL_FAKER.address().latLon())\n            .matches(BI_LAT_LON_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(NL_FAKER.getContext().getLocale()), \",\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLonLatEnUs()", "name": "testLonLatEnUs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLonLatEnUs()", "original_string": "    @RepeatedTest(100)\n    void testLonLatEnUs() {\n        assertThat(US_FAKER.address().lonLat())\n            .matches(BI_LON_LAT_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(US_FAKER.getContext().getLocale()), \",\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLonLatNl()", "name": "testLonLatNl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLonLatNl()", "original_string": "    @RepeatedTest(100)\n    void testLonLatNl() {\n        assertThat(NL_FAKER.address().lonLat())\n            .matches(BI_LON_LAT_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(NL_FAKER.getContext().getLocale()), \",\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLonLatRU()", "name": "testLonLatRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLonLatRU()", "original_string": "    @Test\n    void testLonLatRU() {\n        assertThat(RU_FAKER.address().lonLat(\";\"))\n            .matches(BI_LON_LAT_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(RU_FAKER.getContext().getLocale()), \";\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testLatLonRU()", "name": "testLatLonRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLatLonRU()", "original_string": "    @Test\n    void testLatLonRU() {\n        assertThat(RU_FAKER.address().latLon(\";\"))\n            .matches(BI_LAT_LON_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(RU_FAKER.getContext().getLocale()), \";\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]cyrillicStreetName(String)", "name": "cyrillicStreetName", "arg_nums": 1, "params": [{"name": "locale", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"bg\", \"ru\", \"uk\", \"by\"})\n    void cyrillicStreetName(String locale)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"bg\", \"ru\", \"uk\", \"by\"})\n    void cyrillicStreetName(String locale) {\n        BaseFaker localFaker = new BaseFaker(new Locale(locale));\n        assertThat(localFaker.address().streetName()).isNotEmpty().matches(CYRILLIC_LETTERS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"bg\", \"ru\", \"uk\", \"by\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"bg\", \"ru\", \"uk\", \"by\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]dutchAddress()", "name": "dutchAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void dutchAddress()", "original_string": "    @RepeatedTest(100)\n    void dutchAddress() {\n        assertThat(NL_FAKER.address().stateAbbr()).matches(\"[A-Z]{2}\");\n        assertThat(NL_FAKER.address().fullAddress()).matches(\"[A-Z].+, [0-9]{4} [A-Z]{2}, [A-Z].+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]belgianSAddress()", "name": "belgianSAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void belgianSAddress()", "original_string": "    @RepeatedTest(100)\n    void belgianSAddress() {\n        assertThat(BELGIAN_FAKER.address().stateAbbr()).matches(\"[A-Z]{3}\");\n        assertThat(BELGIAN_FAKER.address().fullAddress()).matches(\"[A-Z].+, [0-9]{4}, [A-Z].+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]belgianZipcode()", "name": "belgianZipcode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void belgianZipcode()", "original_string": "    @RepeatedTest(100)\n    void belgianZipcode() {\n        assertThat(Integer.valueOf(BELGIAN_FAKER.address().zipCode())).isBetween(1000, 9992);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]australiaAddress()", "name": "australiaAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void australiaAddress()", "original_string": "    @RepeatedTest(100)\n    void australiaAddress() {\n        assertThat(AU_FAKER.address().fullAddress()).matches(\"(Unit|[0-9]).+, [A-Z].+, [A-Z]{2,3} [0-9]{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest.[void]testCityCnSuffix()", "name": "testCityCnSuffix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testCityCnSuffix()", "original_string": "    @RepeatedTest(100)\n    void testCityCnSuffix() {\n        assertThat(new Faker(Locale.CHINA).address().citySuffix()).matches(\"[\\\\u4e00-\\\\u9fa5]{1,7}(?:\u7701|\u81ea\u6cbb\u533a)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AddressTest.java", "class_name": "AddressTest", "class_uri": "src/test/java/net/datafaker/providers/base/AddressTest.java.AddressTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ColorTest.java.ColorTest.[void]testHex()", "name": "testHex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHex()", "original_string": "    @Test\n    void testHex() {\n        assertThat(color.hex()).matches(\"^#[0-9A-F]{6}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ColorTest.java", "class_name": "ColorTest", "class_uri": "src/test/java/net/datafaker/providers/base/ColorTest.java.ColorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ColorTest.java.ColorTest.[void]testHexNoHashSign()", "name": "testHexNoHashSign", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHexNoHashSign()", "original_string": "    @Test\n    void testHexNoHashSign() {\n        assertThat(color.hex(false)).matches(\"^[0-9A-F]{6}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ColorTest.java", "class_name": "ColorTest", "class_uri": "src/test/java/net/datafaker/providers/base/ColorTest.java.ColorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]shouldCreateFixedLengthString()", "name": "shouldCreateFixedLengthString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldCreateFixedLengthString()", "original_string": "    @Test\n    void shouldCreateFixedLengthString() {\n        assertThat(lorem.fixedString(10)).hasSize(10);\n        assertThat(lorem.fixedString(50)).hasSize(50);\n        assertThat(lorem.fixedString(0)).isEmpty();\n        assertThat(lorem.fixedString(-1)).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharacter()", "name": "testCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharacter()", "original_string": "    @Test\n    void testCharacter() {\n        assertThat(String.valueOf(lorem.character())).matches(\"[a-z\\\\d]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharacterIncludeUpperCase()", "name": "testCharacterIncludeUpperCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharacterIncludeUpperCase()", "original_string": "    @Test\n    void testCharacterIncludeUpperCase() {\n        assertThat(String.valueOf(lorem.character(false))).matches(\"[a-z\\\\d]\");\n        assertThat(String.valueOf(lorem.character(true))).matches(\"[a-zA-Z\\\\d]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersShouldIncludeMinAndMaxLenght()", "name": "testCharactersShouldIncludeMinAndMaxLenght", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersShouldIncludeMinAndMaxLenght()", "original_string": "    @Test\n    void testCharactersShouldIncludeMinAndMaxLenght() {\n        List<String> results = new ArrayList<>();\n        for (int i = 0; i < 300; i++) {\n            results.add(lorem.characters(1, 10));\n        }\n\n        final List<String> min = results.stream().filter(x -> x.length() == 1).collect(Collectors.toList());\n        final List<String> max = results.stream().filter(x -> x.length() == 10).collect(Collectors.toList());\n\n        assertThat(min).isNotEmpty();\n        assertThat(max).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharacters()", "name": "testCharacters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharacters()", "original_string": "    @Test\n    void testCharacters() {\n        assertThat(lorem.characters()).matches(\"[a-z\\\\d]{255}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersIncludeUpperCase()", "name": "testCharactersIncludeUpperCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersIncludeUpperCase()", "original_string": "    @Test\n    void testCharactersIncludeUpperCase() {\n        assertThat(lorem.characters(false)).matches(\"[a-z\\\\d]{255}\");\n        assertThat(lorem.characters(true)).matches(\"[a-zA-Z\\\\d]{255}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersWithLength()", "name": "testCharactersWithLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersWithLength()", "original_string": "    @Test\n    void testCharactersWithLength() {\n        assertThat(lorem.characters(2)).matches(\"[a-z\\\\d]{2}\");\n        assertThat(lorem.characters(500)).matches(\"[a-z\\\\d]{500}\");\n        assertThat(lorem.characters(0)).isEmpty();\n        assertThat(lorem.characters(-1)).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersWithLengthIncludeUppercase()", "name": "testCharactersWithLengthIncludeUppercase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersWithLengthIncludeUppercase()", "original_string": "    @Test\n    void testCharactersWithLengthIncludeUppercase() {\n        assertThat(lorem.characters(2, false)).matches(\"[a-z\\\\d]{2}\");\n        assertThat(lorem.characters(500, false)).matches(\"[a-z\\\\d]{500}\");\n        assertThat(lorem.characters(2, true)).matches(\"[a-zA-Z\\\\d]{2}\");\n        assertThat(lorem.characters(500, true)).matches(\"[a-zA-Z\\\\d]{500}\");\n        assertThat(lorem.characters(0, false)).isEmpty();\n        assertThat(lorem.characters(-1, true)).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersMinimumMaximumLength()", "name": "testCharactersMinimumMaximumLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersMinimumMaximumLength()", "original_string": "    @Test\n    void testCharactersMinimumMaximumLength() {\n        assertThat(lorem.characters(1, 10)).matches(\"[a-z\\\\d]{1,10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersMinimumMaximumLengthEquals()", "name": "testCharactersMinimumMaximumLengthEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testCharactersMinimumMaximumLengthEquals()", "original_string": "    @RepeatedTest(10)\n    void testCharactersMinimumMaximumLengthEquals() {\n        assertThat(lorem.characters(5, 5)).matches(\"[a-z\\\\d]{5}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersMinimumMaximumLengthEqualsIncludingUppercaseAndIncludingDigit()", "name": "testCharactersMinimumMaximumLengthEqualsIncludingUppercaseAndIncludingDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testCharactersMinimumMaximumLengthEqualsIncludingUppercaseAndIncludingDigit()", "original_string": "    @RepeatedTest(10)\n    void testCharactersMinimumMaximumLengthEqualsIncludingUppercaseAndIncludingDigit() {\n        assertThat(lorem.characters(6, 10, true, true)).matches(\"[a-zA-Z\\\\d]{6,10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersFixedLengthIncludingUppercaseAndIncludingDigit()", "name": "testCharactersFixedLengthIncludingUppercaseAndIncludingDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testCharactersFixedLengthIncludingUppercaseAndIncludingDigit()", "original_string": "    @RepeatedTest(10)\n    void testCharactersFixedLengthIncludingUppercaseAndIncludingDigit() {\n        assertThat(lorem.characters(10, true, true)).matches(\"[a-zA-Z\\\\d]{10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testFixedNumberOfCharactersEmpty()", "name": "testFixedNumberOfCharactersEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFixedNumberOfCharactersEmpty()", "original_string": "    @Test\n    void testFixedNumberOfCharactersEmpty() {\n        assertThat(lorem.characters(-1)).isEmpty();\n        assertThat(lorem.characters(0)).isEmpty();\n\n        assertThat(lorem.characters(-1, true, true, true)).isEmpty();\n        assertThat(lorem.characters(0, false, false, false)).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersMinimumMaximumLengthIncludeUppercase()", "name": "testCharactersMinimumMaximumLengthIncludeUppercase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersMinimumMaximumLengthIncludeUppercase()", "original_string": "    @Test\n    void testCharactersMinimumMaximumLengthIncludeUppercase() {\n        assertThat(lorem.characters(1, 10, true)).matches(\"[a-zA-Z\\\\d]{1,10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testCharactersMinimumMaximumLengthIncludeUppercaseIncludeDigit()", "name": "testCharactersMinimumMaximumLengthIncludeUppercaseIncludeDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCharactersMinimumMaximumLengthIncludeUppercaseIncludeDigit()", "original_string": "    @Test\n    void testCharactersMinimumMaximumLengthIncludeUppercaseIncludeDigit() {\n        assertThat(lorem.characters(1, 10, false, false)).matches(\"[a-zA-Z]{1,10}\");\n        assertThat(lorem.characters(2, 10, true, true)).matches(\"[a-zA-Z\\\\d]{1,10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testSentence()", "name": "testSentence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSentence()", "original_string": "    @Test\n    void testSentence() {\n        String sentence = lorem.sentence();\n        String[] words = sentence.split(\" \");\n\n        assertThat(words.length).isBetween(3, 9);\n        assertThat(sentence).endsWith(\".\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testSentenceWithWordCount()", "name": "testSentenceWithWordCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSentenceWithWordCount()", "original_string": "    @Test\n    void testSentenceWithWordCount() {\n        String sentence = lorem.sentence(10);\n        String[] words = sentence.split(\" \");\n\n        assertThat(words.length).isBetween(9, 15);\n        assertThat(sentence).endsWith(\".\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testSentenceWithWordCountAndRandomWordsToAdd()", "name": "testSentenceWithWordCountAndRandomWordsToAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSentenceWithWordCountAndRandomWordsToAdd()", "original_string": "    @RepeatedTest(10)\n    void testSentenceWithWordCountAndRandomWordsToAdd() {\n        assertThat(lorem.sentence(10, 10)).matches(\"(\\\\w+\\\\s?){10,20}\\\\.\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testSentenceFixedNumberOfWords()", "name": "testSentenceFixedNumberOfWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSentenceFixedNumberOfWords()", "original_string": "    @RepeatedTest(10)\n    void testSentenceFixedNumberOfWords() {\n        assertThat(lorem.sentence(10, 0)).matches(\"(\\\\w+\\\\s?){10}\\\\.\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testWords()", "name": "testWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWords()", "original_string": "    @Test\n    void testWords() {\n        assertThat(lorem.words()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testMaxLengthSentence()", "name": "testMaxLengthSentence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testMaxLengthSentence()", "original_string": "    @RepeatedTest(10)\n    void testMaxLengthSentence() {\n        Random rand = new Random();\n        // Test different lengths over 10 runs\n        int length = Math.abs(rand.nextInt(10000));\n        String s = lorem.maxLengthSentence(length);\n        assertThat(s).hasSize(length);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testMaxLengthWithEmptySentence()", "name": "testMaxLengthWithEmptySentence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMaxLengthWithEmptySentence()", "original_string": "    @Test\n    void testMaxLengthWithEmptySentence() {\n        String s = lorem.maxLengthSentence(0);\n        assertThat(s).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testMaxLengthWithNegativeLengthSentence()", "name": "testMaxLengthWithNegativeLengthSentence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMaxLengthWithNegativeLengthSentence()", "original_string": "    @Test\n    void testMaxLengthWithNegativeLengthSentence() {\n        String s = lorem.maxLengthSentence(-1);\n        assertThat(s).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testSentences()", "name": "testSentences", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSentences()", "original_string": "    @RepeatedTest(10)\n    void testSentences() {\n        String paragraph = lorem.paragraph();\n        int matches = StringUtils.countMatches(paragraph, \".\");\n        assertThat(matches).isBetween(3, 6);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[void]testSentencesWithCount()", "name": "testSentencesWithCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testSentencesWithCount()", "original_string": "    @RepeatedTest(10)\n    void testSentencesWithCount() {\n        String paragraph = lorem.paragraph(1);\n        int matches = StringUtils.countMatches(paragraph, \".\");\n        assertThat(matches).isBetween(1, 3);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testName()", "name": "testName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testName()", "original_string": "    @Test\n    void testName() {\n        assertThat(name.name()).matches(\"([\\\\w']+\\\\.?( )?){2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testNameWithMiddle()", "name": "testNameWithMiddle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNameWithMiddle()", "original_string": "    @Test\n    void testNameWithMiddle() {\n        assertThat(name.nameWithMiddle()).matches(\"([\\\\w']+\\\\.?( )?){3,}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testNameWithMiddleDoesNotHaveRepeatedName()", "name": "testNameWithMiddleDoesNotHaveRepeatedName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNameWithMiddleDoesNotHaveRepeatedName()", "original_string": "    @Test\n    void testNameWithMiddleDoesNotHaveRepeatedName() {\n        int theSameNameCnt = 0;\n        int total = 100;\n        for (int i = 0; i < total; i++) {\n            String nameWithMiddle = name.nameWithMiddle();\n            String[] splitNames = nameWithMiddle.split(\" \");\n            if (splitNames[0].equals(splitNames[1])) {\n                theSameNameCnt++;\n            }\n        }\n        assertThat(theSameNameCnt).isLessThan(total / 10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testFullName()", "name": "testFullName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFullName()", "original_string": "    @Test\n    void testFullName() {\n        assertThat(name.fullName()).matches(\"([\\\\w']+\\\\.?( )?){2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testFullNameArabic()", "name": "testFullNameArabic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFullNameArabic()", "original_string": "    @Test\n    void testFullNameArabic() {\n        BaseFaker localFaker = new BaseFaker(new Locale(\"ar\"));\n\n        for (int i = 0; i < 25; i++) {\n            assertThat(localFaker.name().fullName()).matches(\"^[\\\\u0600-\\\\u06FF\\\\u0750-\\\\u077F ]+$\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testFirstName()", "name": "testFirstName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFirstName()", "original_string": "    @Test\n    void testFirstName() {\n        assertThat(name.firstName()).matches(\"\\\\w+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testFemaleFirstName()", "name": "testFemaleFirstName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testFemaleFirstName()", "original_string": "    @RepeatedTest(10)\n    void testFemaleFirstName() {\n        assertThat(name.femaleFirstName()).matches(\"\\\\w+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testMaleFirstName()", "name": "testMaleFirstName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testMaleFirstName()", "original_string": "    @RepeatedTest(10)\n    void testMaleFirstName() {\n        assertThat(name.malefirstName()).matches(\"\\\\w+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testLastName()", "name": "testLastName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLastName()", "original_string": "    @Test\n    void testLastName() {\n        assertThat(name.lastName()).matches(\"[A-Za-z']+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testPrefix()", "name": "testPrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPrefix()", "original_string": "    @Test\n    void testPrefix() {\n        assertThat(name.prefix()).matches(\"\\\\w+\\\\.?\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testSuffix()", "name": "testSuffix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSuffix()", "original_string": "    @Test\n    void testSuffix() {\n        assertThat(name.suffix()).matches(\"\\\\w+\\\\.?\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]testTitle()", "name": "testTitle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTitle()", "original_string": "    @Test\n    void testTitle() {\n        assertThat(name.title()).matches(\"(\\\\w+\\\\.?( )?){3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest.[void]test()", "name": "test", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void test()", "original_string": "    @Test\n    void test() {\n        var faker = new BaseFaker(new Locale(\"id\"));\n        System.out.println(faker.name().name());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NameTest.java", "class_name": "NameTest", "class_uri": "src/test/java/net/datafaker/providers/base/NameTest.java.NameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest.[void]testFlag()", "name": "testFlag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testFlag()", "original_string": "    @RepeatedTest(10)\n    void testFlag() {\n        String flag = country.flag();\n        assertThat(flag).matches(\"^https://flags.fmcdn\\\\.net/data/flags/w580/[a-zA-Z0-9_]+\\\\.png$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CountryTest.java", "class_name": "CountryTest", "class_uri": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest.[void]testCurrency()", "name": "testCurrency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCurrency()", "original_string": "    @Test\n    void testCurrency() {\n        assertThat(faker.country().currency()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CountryTest.java", "class_name": "CountryTest", "class_uri": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest.[void]testCurrencyCode()", "name": "testCurrencyCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCurrencyCode()", "original_string": "    @Test\n    void testCurrencyCode() {\n        assertThat(faker.country().currencyCode()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CountryTest.java", "class_name": "CountryTest", "class_uri": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testVin()", "name": "testVin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testVin()", "original_string": "    @RepeatedTest(10)\n    void testVin() {\n        assertThat(faker.vehicle().vin()).matches(Vehicle.VIN_REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testManufacturer()", "name": "testManufacturer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testManufacturer()", "original_string": "    @RepeatedTest(10)\n    void testManufacturer() {\n        assertThat(faker.vehicle().manufacturer()).matches(INTERNATIONAL_WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testMake()", "name": "testMake", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testMake()", "original_string": "    @RepeatedTest(10)\n    void testMake() {\n        assertThat(faker.vehicle().make()).matches(INTERNATIONAL_WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testModel()", "name": "testModel", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testModel()", "original_string": "    @RepeatedTest(10)\n    void testModel() {\n        assertThat(faker.vehicle().model()).matches(INTERNATIONAL_WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testModelWithParams()", "name": "testModelWithParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testModelWithParams()", "original_string": "    @RepeatedTest(10)\n    void testModelWithParams() {\n        assertThat(faker.vehicle().model(\"Toyota\")).matches(INTERNATIONAL_WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testMakeAndModel()", "name": "testMakeAndModel", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testMakeAndModel()", "original_string": "    @RepeatedTest(10)\n    void testMakeAndModel() {\n        assertThat(faker.vehicle().makeAndModel()).matches(INTERNATIONAL_WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testStyle()", "name": "testStyle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testStyle()", "original_string": "    @RepeatedTest(10)\n    void testStyle() {\n        assertThat(faker.vehicle().style()).matches(WORD_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testColor()", "name": "testColor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testColor()", "original_string": "    @RepeatedTest(10)\n    void testColor() {\n        assertThat(faker.vehicle().color()).matches(WORD_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testUpholsteryColor()", "name": "testUpholsteryColor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUpholsteryColor()", "original_string": "    @RepeatedTest(10)\n    void testUpholsteryColor() {\n        assertThat(faker.vehicle().upholsteryColor()).matches(WORD_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testUpholsteryFabric()", "name": "testUpholsteryFabric", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUpholsteryFabric()", "original_string": "    @RepeatedTest(10)\n    void testUpholsteryFabric() {\n        assertThat(faker.vehicle().upholsteryFabric()).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testUpholstery()", "name": "testUpholstery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testUpholstery()", "original_string": "    @RepeatedTest(10)\n    void testUpholstery() {\n        assertThat(faker.vehicle().upholstery()).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testTransmission()", "name": "testTransmission", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testTransmission()", "original_string": "    @RepeatedTest(10)\n    void testTransmission() {\n        assertThat(faker.vehicle().transmission()).matches(WORD_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testDriveType()", "name": "testDriveType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testDriveType()", "original_string": "    @RepeatedTest(10)\n    void testDriveType() {\n        assertThat(faker.vehicle().driveType()).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testFuelType()", "name": "testFuelType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testFuelType()", "original_string": "    @RepeatedTest(10)\n    void testFuelType() {\n        assertThat(faker.vehicle().fuelType()).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testCarType()", "name": "testCarType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testCarType()", "original_string": "    @RepeatedTest(10)\n    void testCarType() {\n        assertThat(faker.vehicle().carType()).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testEngine()", "name": "testEngine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testEngine()", "original_string": "    @RepeatedTest(10)\n    void testEngine() {\n        assertThat(faker.vehicle().engine()).matches(\"\\\\d Cylinder Engine\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testCarOptions()", "name": "testCarOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testCarOptions()", "original_string": "    @RepeatedTest(10)\n    void testCarOptions() {\n        List<String> carOptions = faker.vehicle().carOptions();\n        assertThat(carOptions)\n            .hasSizeGreaterThanOrEqualTo(5)\n            .hasSizeLessThanOrEqualTo(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testCarOptionsMinMax()", "name": "testCarOptionsMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testCarOptionsMinMax()", "original_string": "    @RepeatedTest(10)\n    void testCarOptionsMinMax() {\n        List<String> carOptions = faker.vehicle().carOptions(11, 12);\n\n        assertThat(carOptions)\n            .hasSizeGreaterThanOrEqualTo(11)\n            .hasSizeLessThanOrEqualTo(12);\n\n        assertThat(carOptions.get(0)).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testStandardSpecsMinMax()", "name": "testStandardSpecsMinMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testStandardSpecsMinMax()", "original_string": "    @RepeatedTest(10)\n    void testStandardSpecsMinMax() {\n        List<String> standardSpecs = faker.vehicle().standardSpecs(13, 14);\n\n        assertThat(standardSpecs)\n            .hasSizeGreaterThanOrEqualTo(13)\n            .hasSizeLessThanOrEqualTo(14);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testStandardSpecs()", "name": "testStandardSpecs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testStandardSpecs()", "original_string": "    @RepeatedTest(10)\n    void testStandardSpecs() {\n        List<String> standardSpecs = faker.vehicle().standardSpecs();\n\n        assertThat(standardSpecs)\n            .hasSizeGreaterThanOrEqualTo(5)\n            .hasSizeLessThanOrEqualTo(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testDoor()", "name": "testDoor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testDoor()", "original_string": "    @RepeatedTest(10)\n    void testDoor() {\n        assertThat(faker.vehicle().doors()).matches(\"\\\\d\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testLicensePlate()", "name": "testLicensePlate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testLicensePlate()", "original_string": "    @RepeatedTest(10)\n    void testLicensePlate() {\n        assertThat(faker.vehicle().licensePlate()).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testLicensePlateWithParam()", "name": "testLicensePlateWithParam", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testLicensePlateWithParam()", "original_string": "    @RepeatedTest(10)\n    void testLicensePlateWithParam() {\n        assertThat(faker.vehicle().licensePlate(\"GA\")).matches(WORDS_MATCH);\n        assertThat(faker.vehicle().licensePlate(\"AL\")).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest.[void]testLicensePlateWithParam_Canada()", "name": "testLicensePlateWithParam_Canada", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testLicensePlateWithParam_Canada()", "original_string": "    @RepeatedTest(100)\n    void testLicensePlateWithParam_Canada() {\n        BaseFaker test = new BaseFaker(Locale.CANADA);\n        assertThat(test.vehicle().licensePlate(\"MB\")).matches(WORDS_MATCH);\n        assertThat(test.vehicle().licensePlate(\"ON\")).matches(WORDS_MATCH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/VehicleTest.java", "class_name": "VehicleTest", "class_uri": "src/test/java/net/datafaker/providers/base/VehicleTest.java.VehicleTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testFutureDate()", "name": "testFutureDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testFutureDate()", "original_string": "    @RepeatedTest(100)\n    void testFutureDate() {\n        assertThat(timeAndDate.future()).isInTheFuture();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testFutureDateWithBounds()", "name": "testFutureDateWithBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testFutureDateWithBounds()", "original_string": "    @RepeatedTest(100)\n    void testFutureDateWithBounds() {\n        Instant now = Instant.now();\n        Instant future = timeAndDate.future(1, TimeUnit.SECONDS, now);\n        assertThat(future).isBetween(now, now.plusSeconds(1));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testFutureDateWithMinimum()", "name": "testFutureDateWithMinimum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testFutureDateWithMinimum()", "original_string": "    @RepeatedTest(100)\n    void testFutureDateWithMinimum() {\n        Instant now = Instant.now();\n        Instant future = timeAndDate.future(5, 4, TimeUnit.SECONDS);\n        assertThat(future)\n            .isBetween(now.plusMillis(3500), now.plusMillis(5500));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testPastDateWithMinimum()", "name": "testPastDateWithMinimum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testPastDateWithMinimum()", "original_string": "    @RepeatedTest(100)\n    void testPastDateWithMinimum() {\n        final long now = System.currentTimeMillis();\n        Instant past = timeAndDate.past(5, 4, TimeUnit.SECONDS);\n        assertThat(past.toEpochMilli()).isLessThan(now)\n            .isGreaterThan(now - 5500)\n            .isLessThan(now - 3500);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testPastDateWithReferenceDate()", "name": "testPastDateWithReferenceDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testPastDateWithReferenceDate()", "original_string": "    @RepeatedTest(100)\n    void testPastDateWithReferenceDate() {\n        Instant now = Instant.now();\n        Instant past = timeAndDate.past(1, TimeUnit.SECONDS, now);\n        assertThat(past.toEpochMilli())\n            .isLessThan(now.toEpochMilli())\n            .isGreaterThan(now.toEpochMilli() - 1000);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testPastDate()", "name": "testPastDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testPastDate()", "original_string": "    @RepeatedTest(100)\n    void testPastDate() {\n        assertThat(timeAndDate.past()).isInThePast();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testPastDateWithBounds()", "name": "testPastDateWithBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testPastDateWithBounds()", "original_string": "    @RepeatedTest(100)\n    void testPastDateWithBounds() {\n        Instant now = Instant.now();\n        Instant past = timeAndDate.past(100, TimeUnit.SECONDS);\n        assertThat(past.toEpochMilli()).isLessThan(now.toEpochMilli());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testBetween()", "name": "testBetween", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testBetween()", "original_string": "    @RepeatedTest(100)\n    void testBetween() {\n        Instant now = Instant.now();\n        Instant then = Instant.now().plusMillis(1000);\n\n        Instant date = timeAndDate.between(now, then);\n        assertThat(date.toEpochMilli())\n            .isLessThan(then.toEpochMilli())\n            .isGreaterThanOrEqualTo(now.toEpochMilli());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testBetweenWithMaskReturningString()", "name": "testBetweenWithMaskReturningString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenWithMaskReturningString()", "original_string": "    @Test\n    void testBetweenWithMaskReturningString() {\n        Instant now = Instant.now();\n        Instant then = Instant.now().plusMillis(1000);\n\n        String pattern = \"YYYY MM.dd mm:hh:ss\";\n\n        DateTimeFormatter.ofPattern(pattern).parse(timeAndDate.between(now, then, pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testBetweenThenLargerThanNow()", "name": "testBetweenThenLargerThanNow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenThenLargerThanNow()", "original_string": "    @Test\n    void testBetweenThenLargerThanNow() {\n        Instant now = Instant.now();\n        Instant then = Instant.now().plusMillis(1000);\n\n        assertThatThrownBy(() -> timeAndDate.between(then, now))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Invalid date range: the upper bound date (%s) is before the lower bound (%s)\".formatted(now, then));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testBirthday()", "name": "testBirthday", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testBirthday()", "original_string": "    @RepeatedTest(100)\n    void testBirthday() {\n        final LocalDateTime now = LocalDateTime.now();\n        final LocalDate from = now.minusYears(TimeAndDate.DEFAULT_MIN_AGE).toLocalDate();\n        final LocalDate to = now.minusYears(TimeAndDate.DEFAULT_MAX_AGE).toLocalDate();\n        LocalDate birthday = timeAndDate.birthday();\n        assertThat(birthday).isBetween(to, from);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]testBirthdayWithAges()", "name": "testBirthdayWithAges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testBirthdayWithAges()", "original_string": "    @RepeatedTest(100)\n    void testBirthdayWithAges() {\n        LocalDate nw = LocalDate.now();\n        final Number number = faker.number();\n        int minAge = number.numberBetween(1, 99);\n        int maxAge = number.numberBetween(minAge, 100);\n\n        LocalDate from = nw.minusYears(maxAge);\n        LocalDate to = nw.minusYears(minAge);\n\n        LocalDate birthday = timeAndDate.birthday(minAge, maxAge);\n\n        assertThat(birthday).isBetween(from, to);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]birthdayWithMask()", "name": "birthdayWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void birthdayWithMask()", "original_string": "    @Test\n    void birthdayWithMask() {\n        String pattern = \"YYYY MM.dd\";\n        DateTimeFormatter.ofPattern(pattern).parse(timeAndDate.birthday(1, 50, pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]futureWithMask()", "name": "futureWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void futureWithMask()", "original_string": "    @Test\n    void futureWithMask() {\n        String pattern = \"YYYY MM.dd mm:hh:ss\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        dateTimeFormatter.parse(timeAndDate.future(1, TimeUnit.HOURS, pattern));\n        dateTimeFormatter.parse(timeAndDate.future(20, 1, TimeUnit.HOURS, pattern));\n        dateTimeFormatter.parse(timeAndDate.future(20, TimeUnit.HOURS, Instant.now(), pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]pastWithMask()", "name": "pastWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void pastWithMask()", "original_string": "    @Test\n    void pastWithMask() {\n        String pattern = \"YYYY MM.dd mm:hh:ss\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        dateTimeFormatter.parse(timeAndDate.past(1, TimeUnit.DAYS, pattern));\n        dateTimeFormatter.parse(timeAndDate.past(20, 1, TimeUnit.DAYS, pattern));\n        dateTimeFormatter.parse(timeAndDate.past(1, TimeUnit.DAYS, Instant.now(), pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]periodTest()", "name": "periodTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void periodTest()", "original_string": "    @Test\n    void periodTest() {\n        Period maxPeriod = Period.of(3, 2, 1);\n        Period minPeriod = Period.of(2, 1, 0);\n        Period period = timeAndDate.period(minPeriod, maxPeriod);\n\n        assertThat((period.getYears() * 12 + period.getMonths()) * 30 + period.getDays())\n            .isBetween((minPeriod.getYears() * 12 + minPeriod.getMonths()) * 30 + minPeriod.getDays(),\n                (maxPeriod.getYears() * 12 + maxPeriod.getMonths()) * 30 + maxPeriod.getDays());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]durationTest(long,long,ChronoUnit)", "name": "durationTest", "arg_nums": 3, "params": [{"name": "minValue", "type": "long"}, {"name": "maxValue", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMinMax\")\n    void durationTest(long minValue, long maxValue, ChronoUnit unit)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateDurationsWithMinMax\")\n    void durationTest(long minValue, long maxValue, ChronoUnit unit) {\n        Duration generated = timeAndDate.duration(minValue, maxValue, unit);\n        Duration min = Duration.of(minValue, unit);\n        Duration max = Duration.of(maxValue, unit);\n        assertThat(min)\n            .as(\"Duration must be equal or greater than min value\")\n            .isLessThanOrEqualTo(generated);\n        assertThat(max.compareTo(generated) > 0 || minValue >= maxValue && max.equals(generated))\n            .as(\"Duration must be lower than max value\").isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMinMax\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateDurationsWithMinMax\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]durationTest(long,ChronoUnit)", "name": "durationTest", "arg_nums": 2, "params": [{"name": "maxValue", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMaxOnly\")\n    void durationTest(long maxValue, ChronoUnit unit)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateDurationsWithMaxOnly\")\n    void durationTest(long maxValue, ChronoUnit unit) {\n        Duration generated = timeAndDate.duration(maxValue, unit);\n        Duration max = Duration.of(maxValue, unit);\n        assertThat(max.compareTo(generated) > 0 || maxValue == 0)\n            .as(\"Duration must be lower than max value\")\n            .isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMaxOnly\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateDurationsWithMaxOnly\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[void]maxLessThanMinPeriod(Period,Period)", "name": "maxLessThanMinPeriod", "arg_nums": 2, "params": [{"name": "min", "type": "Period"}, {"name": "max", "type": "Period"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generatePeriod\")\n    void maxLessThanMinPeriod(Period min, Period max)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generatePeriod\")\n    void maxLessThanMinPeriod(Period min, Period max) {\n        assertThatThrownBy(() -> timeAndDate.period(min, max))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generatePeriod\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generatePeriod\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java.BaseFaker_doWithTest.[void]testDoWithLocaleSuccess()", "name": "testDoWithLocaleSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoWithLocaleSuccess()", "original_string": "    @Test\n    public void testDoWithLocaleSuccess() throws Exception {\n        Callable<String> callable = () -> \"Test Result\";\n        Locale locale = Locale.FRENCH;\n\n        String result = faker.doWith(callable, locale);\n\n        assertEquals(\"Test Result\", result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java", "class_name": "BaseFaker_doWithTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java.BaseFaker_doWithTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java.BaseFaker_doWithTest.[void]testDoWithLocaleException()", "name": "testDoWithLocaleException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoWithLocaleException()", "original_string": "    @Test\n    public void testDoWithLocaleException() {\n        Callable<String> callable = () -> {\n            throw new Exception(\"Test Exception\");\n        };\n        Locale locale = Locale.FRENCH;\n\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            faker.doWith(callable, locale);\n        });\n\n        assertEquals(\"Test Exception\", exception.getCause().getMessage());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java", "class_name": "BaseFaker_doWithTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java.BaseFaker_doWithTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java.Azure_subscriptionIdTest.[void]testSubscriptionId()", "name": "testSubscriptionId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSubscriptionId()", "original_string": "    @Test\n    void testSubscriptionId() {\n        assertThat(azure.subscriptionId()).matches(\"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java", "class_name": "Azure_subscriptionIdTest", "class_uri": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java.Azure_subscriptionIdTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Name_titleTest.java.Name_titleTest.[void]testTitle()", "name": "testTitle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTitle()", "original_string": "    @Test\n    public void testTitle() {\n        String title = name.title();\n        assertThat(title).matches(\"[a-zA-Z\\\\s]+ [a-zA-Z\\\\s]+ [a-zA-Z\\\\s]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Name_titleTest.java", "class_name": "Name_titleTest", "class_uri": "src/test/java/net/datafaker/providers/base/Name_titleTest.java.Name_titleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]creditCard()", "name": "creditCard", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void creditCard()", "original_string": "    @RepeatedTest(100)\n    void creditCard() {\n        final String creditCard = finance.creditCard();\n        assertCardLuhnDigit(creditCard);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]nasdaqTicker()", "name": "nasdaqTicker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void nasdaqTicker()", "original_string": "    @RepeatedTest(10)\n    void nasdaqTicker() {\n        assertThat(finance.nasdaqTicker()).matches(\"[A-Z.-]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]nyseTicker()", "name": "nyseTicker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void nyseTicker()", "original_string": "    @RepeatedTest(10)\n    void nyseTicker() {\n        assertThat(finance.nyseTicker()).matches(\"[A-Z.-]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]bic()", "name": "bic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bic()", "original_string": "    @Test\n    void bic() {\n        assertThat(finance.bic()).matches(\"([A-Z]){4}([A-Z]){2}([0-9A-Z]){2}([0-9A-Z]{3})?\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]iban()", "name": "iban", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void iban()", "original_string": "    @RepeatedTest(100)\n    void iban() {\n        assertThat(finance.iban()).matches(\"[A-Z]{2}\\\\p{Alnum}{13,30}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]ibanWithCountryCode()", "name": "ibanWithCountryCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void ibanWithCountryCode()", "original_string": "    @Test\n    void ibanWithCountryCode() {\n        assertThat(finance.iban(\"DE\")).matches(\"DE\\\\d{20}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]ibanCountryCodes()", "name": "ibanCountryCodes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void ibanCountryCodes()", "original_string": "    @Test\n    void ibanCountryCodes() {\n        assertThat(Finance.ibanSupportedCountries()).isNotEmpty().hasSizeGreaterThan(70);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]ibanWithAllCountryCodes()", "name": "ibanWithAllCountryCodes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void ibanWithAllCountryCodes()", "original_string": "    @Test\n    void ibanWithAllCountryCodes() {\n        Set<String> ibanCountryCodes = Finance.ibanSupportedCountries();\n        for (String givenCountryCode : ibanCountryCodes) {\n            final String iban = finance.iban(givenCountryCode).toUpperCase(faker.getContext().getLocale());\n            assertThat(iban).isNotBlank();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]creditCardWithType()", "name": "creditCardWithType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void creditCardWithType()", "original_string": "    @Test\n    void creditCardWithType() {\n        for (CreditCardType type : CreditCardType.values()) {\n            final String creditCard = finance.creditCard(type);\n            assertCardLuhnDigit(creditCard);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]costaRicaIbanMustBeValid()", "name": "costaRicaIbanMustBeValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void costaRicaIbanMustBeValid()", "original_string": "    @Test\n    void costaRicaIbanMustBeValid() {\n        final String givenCountryCode = \"CR\";\n        final BaseFaker faker = new BaseFaker();\n        final String ibanFaker = finance.iban(givenCountryCode).toUpperCase(faker.getContext().getLocale());\n        assertThat(fr.marcwrobel.jbanking.iban.Iban.isValid(ibanFaker)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]visaCard()", "name": "visaCard", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void visaCard()", "original_string": "    @RepeatedTest(100)\n    void visaCard() {\n        String creditCard = finance.creditCard(CreditCardType.VISA).replace(\"-\", \"\");\n        assertThat(creditCard).startsWith(\"4\").hasSize(16);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]discoverCard()", "name": "discoverCard", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void discoverCard()", "original_string": "    @RepeatedTest(100)\n    void discoverCard() {\n        String creditCard = finance.creditCard(CreditCardType.DISCOVER).replace(\"-\", \"\");\n        assertThat(creditCard).startsWith(\"6\").hasSize(16);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]usRoutingNumber()", "name": "usRoutingNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void usRoutingNumber()", "original_string": "    @RepeatedTest(100)\n    void usRoutingNumber() {\n        String rtn = finance.usRoutingNumber();\n        assertThat(rtn).matches(\"\\\\d{9}\");\n        int check = 0;\n        for (int index = 0; index < 3; index++) {\n            final int pos = index * 3;\n            check += Character.getNumericValue(rtn.charAt(pos)) * 3;\n            check += Character.getNumericValue(rtn.charAt(pos + 1)) * 7;\n            check += Character.getNumericValue(rtn.charAt(pos + 2));\n        }\n        assertThat(check % 10).isZero();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest.[void]testAllCellPhoneForLocale()", "name": "testAllCellPhoneForLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(COUNT)\n    void testAllCellPhoneForLocale()", "original_string": "    @RepeatedTest(COUNT)\n    void testAllCellPhoneForLocale() throws NumberParseException {\n        String language = \"en\";\n        String region = \"GB\";\n        BaseFaker localFaker = new BaseFaker(new Locale(language, region));\n\n        String generatedNumber = localFaker.phoneNumber().phoneNumber();\n        Phonenumber.PhoneNumber parsedNumber = util.parse(generatedNumber, region);\n\n        assertThat(util.isValidNumber(parsedNumber))\n            .as(() -> \"Generated phone number %s for region %s\".formatted(generatedNumber, region))\n            .isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "class_name": "PhoneNumberValidityFinderTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest", "attributes": {"modifiers": "@RepeatedTest(COUNT)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(COUNT)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest.[void]testValidNumber()", "name": "testValidNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testValidNumber()", "original_string": "    @Test\n    void testValidNumber() throws NumberParseException {\n        String phoneNumber = \"0140 123456\";\n        String region = \"SE\";\n\n        Phonenumber.PhoneNumber parsedNumber = util.parse(phoneNumber, region);\n        assertThat(util.isValidNumber(parsedNumber)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "class_name": "PhoneNumberValidityFinderTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest.[void]testAllPhoneNumbers(Locale)", "name": "testAllPhoneNumbers", "arg_nums": 1, "params": [{"name": "supportedLocale", "type": "Locale"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"allSupportedLocales\")\n    void testAllPhoneNumbers(Locale supportedLocale)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"allSupportedLocales\")\n    void testAllPhoneNumbers(Locale supportedLocale) throws NumberParseException {\n        BaseFaker f = new BaseFaker(supportedLocale);\n        PhoneNumber phoneNumberGenerator = f.phoneNumber();\n        for (int i = 0; i < COUNT; i++) {\n            String generatedNumber = phoneNumberGenerator.phoneNumber();\n            Phonenumber.PhoneNumber parsedNumber = parse(generatedNumber, phoneNumberGenerator.countryCodeIso2());\n\n            assertThat(util.isValidNumber(parsedNumber))\n                .as(() -> \"Generated phone number %s for locale %s (country: %s)\".formatted(generatedNumber, supportedLocale, phoneNumberGenerator.countryCodeIso2()))\n                .isTrue();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "class_name": "PhoneNumberValidityFinderTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"allSupportedLocales\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"allSupportedLocales\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]isbn10DefaultIsNoSeparator()", "name": "isbn10DefaultIsNoSeparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void isbn10DefaultIsNoSeparator()", "original_string": "    @RepeatedTest(100)\n    void isbn10DefaultIsNoSeparator() {\n        final BaseFaker faker = new BaseFaker();\n        String isbn10 = faker.code().isbn10();\n\n        final ISBNValidator isbnValidator = ISBNValidator.getInstance(false);\n        assertIsValidISBN10(isbn10, isbnValidator);\n        assertThat(isbn10).doesNotContain(\"-\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]isbn13DefaultIsNoSeparator()", "name": "isbn13DefaultIsNoSeparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void isbn13DefaultIsNoSeparator()", "original_string": "    @RepeatedTest(100)\n    void isbn13DefaultIsNoSeparator() {\n        final BaseFaker faker = new BaseFaker();\n        String isbn13 = faker.code().isbn13();\n\n        final ISBNValidator isbnValidator = ISBNValidator.getInstance(false);\n        assertIsValidISBN13(isbn13, isbnValidator);\n        assertThat(isbn13).doesNotContain(\"-\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]testIsbn10()", "name": "testIsbn10", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testIsbn10()", "original_string": "    @RepeatedTest(100)\n    void testIsbn10() {\n        final BaseFaker faker = new BaseFaker();\n        final String isbn10NoSep = faker.code().isbn10(false);\n        final String isbn10Sep = faker.code().isbn10(true);\n        final ISBNValidator isbnValidator = ISBNValidator.getInstance(false);\n\n        assertThat(isbn10NoSep).hasSize(10);\n        assertIsValidISBN10(isbn10NoSep, isbnValidator);\n        assertThat(isbn10Sep).hasSize(13);\n        assertIsValidISBN10(isbn10Sep, isbnValidator);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]testIsbn13()", "name": "testIsbn13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testIsbn13()", "original_string": "    @RepeatedTest(100)\n    void testIsbn13() {\n        final BaseFaker faker = new BaseFaker();\n        final String isbn13NoSep = faker.code().isbn13(false);\n        final String isbn13Sep = faker.code().isbn13(true);\n        final ISBNValidator isbnValidator = ISBNValidator.getInstance(false);\n\n        assertThat(isbn13NoSep).hasSize(13);\n        assertIsValidISBN13(isbn13NoSep, isbnValidator);\n\n        assertThat(isbn13Sep).hasSize(17);\n        assertIsValidISBN13(isbn13Sep, isbnValidator);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]testOverrides()", "name": "testOverrides", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testOverrides()", "original_string": "    @RepeatedTest(100)\n    void testOverrides() {\n        BaseFaker faker = new BaseFaker(new Locale(\"test\"));\n\n        final String isbn10Sep = faker.code().isbn10(true);\n        final String isbn13Sep = faker.code().isbn13(true);\n\n        assertThat(isbn10Sep).matches(\"9971-\\\\d-\\\\d{4}-(\\\\d|X)\");\n\n        assertThat(isbn13Sep).matches(\"(333|444)-9971-\\\\d-\\\\d{4}-\\\\d\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]asin()", "name": "asin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void asin()", "original_string": "    @Test\n    void asin() {\n        assertThat(faker.code().asin()).matches(\"B000([A-Z]|\\\\d){6}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]imei()", "name": "imei", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void imei()", "original_string": "    @Test\n    void imei() {\n        String imei = faker.code().imei();\n\n        assertThat(imei).matches(\"\\\\A[\\\\d.:\\\\-\\\\s]+\\\\z\");\n        assertThat(LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(imei)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]ean8()", "name": "ean8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void ean8()", "original_string": "    @Test\n    void ean8() {\n        assertThat(faker.code().ean8()).matches(\"\\\\d{8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]gtin8()", "name": "gtin8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void gtin8()", "original_string": "    @Test\n    void gtin8() {\n        assertThat(faker.code().gtin8()).matches(\"\\\\d{8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]ean13()", "name": "ean13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void ean13()", "original_string": "    @Test\n    void ean13() {\n        String ean13 = faker.code().ean13();\n        assertThat(ean13).matches(\"\\\\d{13}\");\n        assertThat(EAN13CheckDigit.EAN13_CHECK_DIGIT.isValid(ean13)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]gtin13()", "name": "gtin13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void gtin13()", "original_string": "    @Test\n    void gtin13() {\n        String gtin13 = faker.code().gtin13();\n        assertThat(gtin13).matches(\"\\\\d{13}\");\n        assertThat(EAN13CheckDigit.EAN13_CHECK_DIGIT.isValid(gtin13)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]isbnGs1()", "name": "isbnGs1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void isbnGs1()", "original_string": "    @Test\n    void isbnGs1() {\n        String isbnGs1 = faker.code().isbnGs1();\n        assertThat(isbnGs1).matches(\"978|979\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]isbnGroup()", "name": "isbnGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void isbnGroup()", "original_string": "    @Test\n    void isbnGroup() {\n        String isbnGroup = faker.code().isbnGroup();\n        assertThat(isbnGroup).matches(\"[01]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]isbnRegistrant()", "name": "isbnRegistrant", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void isbnRegistrant()", "original_string": "    @RepeatedTest(100)\n    void isbnRegistrant() {\n        String isbnRegistrant = faker.code().isbnRegistrant();\n        assertThat(isbnRegistrant).matches(\"[0-9]{1,7}-[0-9]{1,6}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testAccountId()", "name": "testAccountId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAccountId()", "original_string": "    @Test\n    void testAccountId() {\n        assertThat(faker.aws().accountId()).matches(\"^\\\\d{10}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testAcmARN()", "name": "testAcmARN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAcmARN()", "original_string": "    @Test\n    void testAcmARN() {\n        assertThat(faker.aws().acmARN()).matches(\"^arn:aws:acm:\\\\w+-\\\\w+-\\\\d:\\\\d{10}:certificate/[\\\\w\\\\-]+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testAlbARN()", "name": "testAlbARN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAlbARN()", "original_string": "    @Test\n    void testAlbARN() {\n        assertThat(faker.aws().albARN()).matches(\"^arn:aws:elasticloadbalancing:\\\\w+-\\\\w+-\\\\d:\\\\d{10}:loadbalancer/app/[\\\\w]+/\\\\w+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testAlbTargetGroupARN()", "name": "testAlbTargetGroupARN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAlbTargetGroupARN()", "original_string": "    @Test\n    void testAlbTargetGroupARN() {\n        assertThat(faker.aws().albTargetGroupARN()).matches(\"^arn:aws:elasticloadbalancing:\\\\w+-\\\\w+-\\\\d:\\\\d{10}:targetgroup/[\\\\w]+/\\\\w+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testRoute53ZoneId()", "name": "testRoute53ZoneId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRoute53ZoneId()", "original_string": "    @Test\n    void testRoute53ZoneId() {\n        assertThat(faker.aws().route53ZoneId()).matches(\"^\\\\w{21}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testSecurityGroupId()", "name": "testSecurityGroupId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSecurityGroupId()", "original_string": "    @Test\n    void testSecurityGroupId() {\n        assertThat(faker.aws().securityGroupId()).matches(\"^sg-[0-9a-f]{17}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testSubnetId()", "name": "testSubnetId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSubnetId()", "original_string": "    @Test\n    void testSubnetId() {\n        assertThat(faker.aws().subnetId()).matches(\"^subnet-[0-9a-f]{17}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testVpcId()", "name": "testVpcId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testVpcId()", "original_string": "    @Test\n    void testVpcId() {\n        assertThat(faker.aws().vpcId()).matches(\"^vpc-[0-9a-f]{17}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[void]testRegion()", "name": "testRegion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRegion()", "original_string": "    @Test\n    void testRegion() {\n        String region = faker.aws().region();\n        assertThat(region).matches(\"^[a-z]{2}-(south|east|north|west|northeast|central|southeast)-\\\\d$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testOptionWithArray()", "name": "testOptionWithArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testOptionWithArray()", "original_string": "    @Test\n    void testOptionWithArray() {\n        assertThat(opt.option(options)).isIn((Object[]) options);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testOptionWithVarargsString()", "name": "testOptionWithVarargsString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testOptionWithVarargsString()", "original_string": "    @Test\n    void testOptionWithVarargsString() {\n        assertThat(opt.option(\"A\", \"B\", \"C\")).isIn((Object[]) options);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testOptionWithVarargs()", "name": "testOptionWithVarargs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testOptionWithVarargs()", "original_string": "    @Test\n    void testOptionWithVarargs() {\n        Integer[] integerOptions = {1, 3, 4, 5};\n        assertThat(opt.option(1, 3, 4, 5)).isIn((Object[]) integerOptions);\n        Long[] longOptions = {1L, 3L, 4L, 5L};\n        assertThat(opt.option(longOptions)).isIn((Object[]) longOptions);\n        Short[] shortOptions = {1, 3, 4};\n        assertThat(opt.option(shortOptions)).isIn((Object[]) shortOptions);\n        Byte[] byteOptions = {(byte) 11, (byte) 13, (byte) 14};\n        assertThat(opt.option(byteOptions)).isIn((Object[]) byteOptions);\n        Double[] doubleOptions = {1.1d, 13d, 14.2d};\n        assertThat(opt.option(doubleOptions)).isIn((Object[]) doubleOptions);\n        Float[] floatOptions = {1.2f, 13f, 14.2f};\n        assertThat(opt.option(floatOptions)).isIn((Object[]) floatOptions);\n        BigInteger[] bigIntegerOptions = {BigInteger.ONE, BigInteger.TEN, BigInteger.ZERO};\n        assertThat(opt.option(bigIntegerOptions)).isIn((Object[]) bigIntegerOptions);\n        BigDecimal[] bigDecimalOptions = {BigDecimal.ONE, BigDecimal.TEN, BigDecimal.ZERO};\n        assertThat(opt.option(bigDecimalOptions)).isIn((Object[]) bigDecimalOptions);\n        Boolean[] booleanOptions = {true, false};\n        assertThat(opt.option(booleanOptions)).isIn((Object[]) booleanOptions);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testSubset()", "name": "testSubset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSubset()", "original_string": "    @Test\n    void testSubset() {\n        Integer[] integerOptions = {1, 3, 4, 5};\n        assertThat(opt.subset(1, integerOptions))\n            .doesNotContainAnyElementsOf(List.of(2, 6))\n            .containsAnyElementsOf(List.of(integerOptions));\n        Long[] longOptions = {1L, 3L, 4L, 5L};\n        assertThat(opt.subset(1, longOptions))\n            .doesNotContainAnyElementsOf(List.of(2L, 6L))\n            .containsAnyElementsOf(List.of(longOptions));\n\n        assertThat(opt.subset(longOptions.length, longOptions))\n            .doesNotContainAnyElementsOf(List.of(2L, 6L))\n            .containsAnyElementsOf(List.of(longOptions)).hasSameSizeAs(longOptions);\n\n        assertThat(opt.subset(longOptions.length + 1, longOptions))\n            .doesNotContainAnyElementsOf(List.of(2L, 6L))\n            .containsAnyElementsOf(List.of(longOptions)).hasSameSizeAs(longOptions);\n\n        String[] strOptions = {\"1\", \"2\", \"3\"};\n        assertThat(opt.subset(strOptions.length + 1, strOptions))\n            .doesNotContainAnyElementsOf(List.of(\"q\", \"w\"))\n            .containsAnyElementsOf(List.of(strOptions)).hasSameSizeAs(strOptions);\n\n        assertThat(opt.subset(1, strOptions))\n            .doesNotContainAnyElementsOf(List.of(\"q\", \"w\"))\n            .containsAnyElementsOf(List.of(strOptions))\n            .hasSize(1);\n\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testSubsetWithDuplicate()", "name": "testSubsetWithDuplicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSubsetWithDuplicate()", "original_string": "    @Test\n    void testSubsetWithDuplicate() {\n        Object[] array = {1, 1, 2, 2};\n        assertThat(opt.subset(5, array)).hasSize(2);\n        String[] strArray = {\"a\", \"s\", \"s\", \"a\"};\n        assertThat(opt.subset(Integer.MAX_VALUE, strArray)).hasSize(2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testEmptySubset()", "name": "testEmptySubset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEmptySubset()", "original_string": "    @Test\n    void testEmptySubset() {\n        Object[] array = {1, 2, 3};\n        assertThat(opt.subset(0, array)).isEmpty();\n        assertThatThrownBy(() -> opt.subset(-1, array))\n            .isInstanceOf(IllegalArgumentException.class);\n        String[] strArray = {\"1\", \"2\", \"3\"};\n        assertThat(opt.subset(0, strArray)).isEmpty();\n        assertThatThrownBy(() -> opt.subset(-1, strArray)).isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testOptionWithEnum()", "name": "testOptionWithEnum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testOptionWithEnum()", "original_string": "    @Test\n    void testOptionWithEnum() {\n        assertThat(opt.option(Day.class)).isIn((Object[]) Day.values());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testNextArrayElement()", "name": "testNextArrayElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNextArrayElement()", "original_string": "    @Test\n    void testNextArrayElement() {\n        Integer[] array = {1, 2, 3, 5, 8, 13, 21};\n\n        for (int i = 1; i < 10; i++) {\n            assertThat(opt.nextElement(array)).isIn((Object[]) array);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest.[void]testNextListElement()", "name": "testNextListElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNextListElement()", "original_string": "    @Test\n    void testNextListElement() {\n        List<Integer> list = List.of(1, 2, 3, 5, 8, 13, 21);\n        for (int i = 1; i < 10; i++) {\n            assertThat(opt.nextElement(list)).isIn(list);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/net/datafaker/providers/base/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest.[void]testName()", "name": "testName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testName()", "original_string": "    @Test\n    void testName() {\n        assertThat(team.name()).matches(\"(\\\\w+( )?){2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TeamTest.java", "class_name": "TeamTest", "class_uri": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest.[void]testState()", "name": "testState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testState()", "original_string": "    @Test\n    void testState() {\n        assertThat(faker.team().state()).matches(\"(\\\\w+( )?){1,2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TeamTest.java", "class_name": "TeamTest", "class_uri": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest.[void]testStateWithZaLocale()", "name": "testStateWithZaLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStateWithZaLocale()", "original_string": "    @Test\n    void testStateWithZaLocale() {\n        BaseFaker zaFaker = new BaseFaker(new Locale(\"en\", \"ZA\"));\n        assertThat(zaFaker.team().state()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TeamTest.java", "class_name": "TeamTest", "class_uri": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest.[void]testDurationSeconds()", "name": "testDurationSeconds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDurationSeconds()", "original_string": "    @Test\n    void testDurationSeconds() {\n        final long maxSeconds = 55;\n        Duration randomDuration = faker.duration().atMostSeconds(maxSeconds);\n        Duration lowerBound = Duration.ofSeconds(0);\n        Duration upperBound = Duration.ofSeconds(maxSeconds);\n\n        assertThat(randomDuration).isBetween(lowerBound, upperBound);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DurationTest.java", "class_name": "DurationTest", "class_uri": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest.[void]testDurationMinutes()", "name": "testDurationMinutes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDurationMinutes()", "original_string": "    @Test\n    void testDurationMinutes() {\n        final long maxMins = 45;\n        Duration randomDuration = faker.duration().atMostMinutes(maxMins);\n        Duration lowerBound = Duration.ofMinutes(0);\n        Duration upperBound = Duration.ofMinutes(maxMins);\n\n        assertThat(randomDuration).isBetween(lowerBound, upperBound);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DurationTest.java", "class_name": "DurationTest", "class_uri": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest.[void]testDurationHours()", "name": "testDurationHours", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDurationHours()", "original_string": "    @Test\n    void testDurationHours() {\n        final long maxHours = 35;\n        Duration randomDuration = faker.duration().atMostHours(maxHours);\n        Duration lowerBound = Duration.ofHours(0);\n        Duration upperBound = Duration.ofHours(maxHours);\n\n        assertThat(randomDuration).isBetween(lowerBound, upperBound);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DurationTest.java", "class_name": "DurationTest", "class_uri": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest.[void]testDurationDays()", "name": "testDurationDays", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDurationDays()", "original_string": "    @Test\n    void testDurationDays() {\n        final long maxDays = 40;\n        Duration randomDuration = faker.duration().atMostDays(maxDays);\n        Duration lowerBound = Duration.ofDays(0);\n        Duration upperBound = Duration.ofDays(maxDays);\n\n        assertThat(randomDuration).isBetween(lowerBound, upperBound);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DurationTest.java", "class_name": "DurationTest", "class_uri": "src/test/java/net/datafaker/providers/base/DurationTest.java.DurationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void type()", "original_string": "    @Test\n    void type() {\n        assertThat(faker.barcode().type()).matches(\"(Code(128|39|93))|([EJ])AN(-\\\\d{1,2})*|Codabar|UCC|UPC(-([AE]))*|IS([BS])N|ITF|\" +\n            \"Ames\\\\sCode|NW-7|Monarch|Code\\\\s2\\\\sof\\\\s7|Rationalized|ANSI/AIM BC3-1995|USD-4|\" +\n            \"GS1 Databar|MSI Plessey\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testEan13()", "name": "testEan13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEan13()", "original_string": "    @Test\n    void testEan13() {\n        assertThat(String.valueOf(faker.barcode().ean13())).matches(\"[0-9]{13}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testGtin13()", "name": "testGtin13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGtin13()", "original_string": "    @Test\n    void testGtin13() {\n        assertThat(String.valueOf(faker.barcode().gtin13())).matches(\"[0-9]{13}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testEan8()", "name": "testEan8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEan8()", "original_string": "    @Test\n    void testEan8() {\n        assertThat(String.valueOf(faker.barcode().ean8())).matches(\"[0-9]{8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testGtin8()", "name": "testGtin8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGtin8()", "original_string": "    @Test\n    void testGtin8() {\n        assertThat(String.valueOf(faker.barcode().gtin8())).matches(\"[0-9]{8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testGtin14Length()", "name": "testGtin14Length", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGtin14Length()", "original_string": "    @Test\n    void testGtin14Length() {\n        assertThat(String.valueOf(faker.barcode().gtin14())).matches(\"[0-9]{14}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testGtin12Length()", "name": "testGtin12Length", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGtin12Length()", "original_string": "    @Test\n    void testGtin12Length() {\n        assertThat(String.valueOf(faker.barcode().gtin12())).matches(\"[0-9]{12}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testGtin12CheckSum()", "name": "testGtin12CheckSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGtin12CheckSum()", "original_string": "    @Test\n    void testGtin12CheckSum() {\n        long barcode = faker.barcode().gtin12();\n        assertThat(BarcodeTest.isBarcodeValid(barcode)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testGtin14CheckSum()", "name": "testGtin14CheckSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGtin14CheckSum()", "original_string": "    @Test\n    void testGtin14CheckSum() {\n        long barcode = faker.barcode().gtin14();\n        assertThat(BarcodeTest.isBarcodeValid(barcode)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testEan8CheckSum()", "name": "testEan8CheckSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEan8CheckSum()", "original_string": "    @Test\n    void testEan8CheckSum() {\n        long barcode = faker.barcode().ean8();\n        assertThat(BarcodeTest.isBarcodeValid(barcode)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[void]testEan13CheckSum()", "name": "testEan13CheckSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEan13CheckSum()", "original_string": "    @Test\n    void testEan13CheckSum() {\n        long barcode = faker.barcode().ean13();\n        char[] array = String.valueOf(barcode).toCharArray();\n        int sum = 0;\n        for (int i = 0; i < array.length; i++) {\n            int digit = Integer.parseInt(String.valueOf(array[i]));\n            if ((i + 1) % 2 == 0)\n                sum = sum + digit * 3;\n            else\n                sum = sum + digit;\n        }\n\n        assertThat(String.valueOf(sum)).endsWith(\"0\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest.[void]testSlugWithDefaultGlueAndWords()", "name": "testSlugWithDefaultGlueAndWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSlugWithDefaultGlueAndWords()", "original_string": "    @Test\n    public void testSlugWithDefaultGlueAndWords() {\n        BaseFaker faker = new BaseFaker();\n        Internet internet = new Internet(faker);\n        String result = internet.slug(null, null);\n        String[] parts = result.split(\"_\");\n        assertEquals(2, parts.length);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java", "class_name": "Internet_slugTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest.[void]testSlugWithCustomGlueAndWords()", "name": "testSlugWithCustomGlueAndWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSlugWithCustomGlueAndWords()", "original_string": "    @Test\n    public void testSlugWithCustomGlueAndWords() {\n        BaseFaker faker = new BaseFaker();\n        Internet internet = new Internet(faker);\n        String result = internet.slug(List.of(\"word1\", \"word2\"), \"-\");\n        assertEquals(\"word1-word2\", result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java", "class_name": "Internet_slugTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest.[void]testSlugWithCustomGlueAndNullWords()", "name": "testSlugWithCustomGlueAndNullWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSlugWithCustomGlueAndNullWords()", "original_string": "    @Test\n    public void testSlugWithCustomGlueAndNullWords() {\n        BaseFaker faker = new BaseFaker();\n        Internet internet = new Internet(faker);\n        String result = internet.slug(null, \"-\");\n        String[] parts = result.split(\"-\");\n        assertEquals(2, parts.length);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java", "class_name": "Internet_slugTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest.[void]testSlugWithNullGlueAndCustomWords()", "name": "testSlugWithNullGlueAndCustomWords", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSlugWithNullGlueAndCustomWords()", "original_string": "    @Test\n    public void testSlugWithNullGlueAndCustomWords() {\n        BaseFaker faker = new BaseFaker();\n        Internet internet = new Internet(faker);\n        String result = internet.slug(List.of(\"word1\", \"word2\"), null);\n        assertEquals(\"word1_word2\", result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java", "class_name": "Internet_slugTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java.Internet_slugTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testFutureDate()", "name": "testFutureDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFutureDate()", "original_string": "    @Test\n    void testFutureDate() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        DateAndTime date = faker.date();\n        for (int i = 0; i < 1000; i++) {\n            Date future = date.future(1, TimeUnit.SECONDS, now);\n            assertThat(future.getTime()).isGreaterThan(now.getTime())\n                .isLessThan(now.getTime() + 1000);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testFutureDateWithMinimum()", "name": "testFutureDateWithMinimum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFutureDateWithMinimum()", "original_string": "    @Test\n    void testFutureDateWithMinimum() {\n        final Date now = new Date();\n        DateAndTime date = faker.date();\n        for (int i = 0; i < 1000; i++) {\n            Date future = date.future(5, 4, TimeUnit.SECONDS);\n            assertThat(future.getTime()).isGreaterThan(now.getTime())\n                .isLessThan(now.getTime() + 5500)\n                .isGreaterThan(now.getTime() + 3500);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testPastDateWithMinimum()", "name": "testPastDateWithMinimum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPastDateWithMinimum()", "original_string": "    @Test\n    void testPastDateWithMinimum() {\n        DateAndTime date = faker.date();\n        for (int i = 0; i < 1000; i++) {\n            final long now = System.currentTimeMillis();\n            Date past = date.past(5, 4, TimeUnit.SECONDS);\n            assertThat(past.getTime()).isLessThan(now)\n                .isGreaterThan(now - 5500)\n                .isLessThan(now - 3500);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testPastDateWithReferenceDate()", "name": "testPastDateWithReferenceDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPastDateWithReferenceDate()", "original_string": "    @Test\n    void testPastDateWithReferenceDate() {\n        Date now = new Date();\n        DateAndTime date = faker.date();\n        for (int i = 0; i < 1000; i++) {\n            Date past = date.past(1, TimeUnit.SECONDS, now);\n            assertThat(past.getTime()).isLessThan(now.getTime())\n                .isGreaterThan(now.getTime() - 1000);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testPastDate()", "name": "testPastDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPastDate()", "original_string": "    @Test\n    void testPastDate() {\n        Date now = new Date();\n        Date past = faker.date().past(100, TimeUnit.SECONDS);\n        assertThat(past.getTime()).isLessThan(now.getTime());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testBetween()", "name": "testBetween", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetween()", "original_string": "    @Test\n    void testBetween() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        Timestamp then = new Timestamp(System.currentTimeMillis() + 1000);\n        DateAndTime dateAndTime = faker.date();\n        for (int i = 0; i < 1000; i++) {\n            Date date = dateAndTime.between(now, then);\n            assertThat(date.getTime()).isLessThan(then.getTime())\n                .isGreaterThanOrEqualTo(now.getTime());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testBetweenWithMaskReturningString()", "name": "testBetweenWithMaskReturningString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenWithMaskReturningString()", "original_string": "    @Test\n    void testBetweenWithMaskReturningString() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        Timestamp then = new Timestamp(System.currentTimeMillis() + 1000);\n        String pattern = \"YYYY MM.dd mm:hh:ss\";\n\n        DateTimeFormatter.ofPattern(pattern).parse(faker.date().between(now, then, pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testBetweenDateAsArgument()", "name": "testBetweenDateAsArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenDateAsArgument()", "original_string": "    @Test\n    void testBetweenDateAsArgument() {\n        faker.date().between(new Date(), new Date());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testBetweenThenLargerThanNow()", "name": "testBetweenThenLargerThanNow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBetweenThenLargerThanNow()", "original_string": "    @Test\n    void testBetweenThenLargerThanNow() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        Timestamp then = new Timestamp(System.currentTimeMillis() + 1000);\n        assertThatThrownBy(() -> faker.date().between(then, now))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"Invalid date range: the upper bound date (%s) is before the lower bound (%s)\".formatted(now, then));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testBirthday()", "name": "testBirthday", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBirthday()", "original_string": "    @Test\n    void testBirthday() {\n        final LocalDateTime localDate = LocalDateTime.now();\n        final long to = localDate.minusYears(18).truncatedTo(ChronoUnit.DAYS).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();\n        final long from = localDate.minusYears(65).truncatedTo(ChronoUnit.DAYS).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();\n        final DateAndTime date = faker.date();\n        for (int i = 0; i < 5000; i++) {\n            Timestamp birthday = date.birthday();\n            assertThat(birthday.getTime()).isLessThan(to)\n                .isGreaterThanOrEqualTo(from);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]testBirthdayWithAges()", "name": "testBirthdayWithAges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBirthdayWithAges()", "original_string": "    @Test\n    void testBirthdayWithAges() {\n        LocalDateTime nw = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);\n        final Number number = faker.number();\n        final DateAndTime date = faker.date();\n        final ZoneRules rules = ZoneId.systemDefault().getRules();\n        for (int i = 0; i < 5000; i++) {\n            int minAge = number.numberBetween(1, 99);\n            int maxAge = number.numberBetween(minAge, 100);\n\n            LocalDateTime from = nw.minusYears(maxAge);\n            LocalDateTime to = nw.minusYears(minAge);\n\n            Timestamp birthday = date.birthday(minAge, maxAge);\n\n            assertThat(birthday)\n                .isBetween(Timestamp.from(from.toInstant(rules.getOffset(from))),\n                    Timestamp.from(to.toInstant(rules.getOffset(to))), true, true);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]birthdayWithMask()", "name": "birthdayWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void birthdayWithMask()", "original_string": "    @Test\n    void birthdayWithMask() {\n        String pattern = \"YYYY MM.dd\";\n        DateTimeFormatter.ofPattern(pattern).parse(faker.date().birthday(1, 50, pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]futureWithMask()", "name": "futureWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void futureWithMask()", "original_string": "    @Test\n    void futureWithMask() {\n        String pattern = \"YYYY MM.dd mm:hh:ss\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        DateAndTime date = faker.date();\n        dateTimeFormatter.parse(date.future(1, TimeUnit.HOURS, pattern));\n        dateTimeFormatter.parse(date.future(20, 1, TimeUnit.HOURS, pattern));\n        dateTimeFormatter.parse(date.future(20, TimeUnit.HOURS, new Date(), pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]pastWithMask()", "name": "pastWithMask", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void pastWithMask()", "original_string": "    @Test\n    void pastWithMask() {\n        String pattern = \"YYYY MM.dd mm:hh:ss\";\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);\n        DateAndTime date = faker.date();\n        dateTimeFormatter.parse(date.past(1, TimeUnit.DAYS, pattern));\n        dateTimeFormatter.parse(date.past(20, 1, TimeUnit.DAYS, pattern));\n        dateTimeFormatter.parse(date.past(1, TimeUnit.DAYS, new Date(), pattern));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]periodTest()", "name": "periodTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void periodTest()", "original_string": "    @Test\n    void periodTest() {\n        Period maxPeriod = Period.of(3, 2, 1);\n        Period minPeriod = Period.of(2, 1, 0);\n        Period period = faker.date().period(minPeriod, maxPeriod);\n\n        assertThat((period.getYears() * 12 + period.getMonths()) * 30 + period.getDays())\n            .isBetween((minPeriod.getYears() * 12 + minPeriod.getMonths()) * 30 + minPeriod.getDays(),\n                (maxPeriod.getYears() * 12 + maxPeriod.getMonths()) * 30 + maxPeriod.getDays());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]invalidDuration(String)", "name": "invalidDuration", "arg_nums": 1, "params": [{"name": "invalid", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"null\", \"\", \"month\", \"year\", \"week\"})\n    void invalidDuration(String invalid)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"null\", \"\", \"month\", \"year\", \"week\"})\n    void invalidDuration(String invalid) {\n        assertThatThrownBy(() -> faker.date().duration(faker.random().nextLong(), invalid))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"null\", \"\", \"month\", \"year\", \"week\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"null\", \"\", \"month\", \"year\", \"week\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]durationTest(long,long,ChronoUnit)", "name": "durationTest", "arg_nums": 3, "params": [{"name": "minValue", "type": "long"}, {"name": "maxValue", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMinMax\")\n    void durationTest(long minValue, long maxValue, ChronoUnit unit)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateDurationsWithMinMax\")\n    void durationTest(long minValue, long maxValue, ChronoUnit unit) {\n        Duration generated = faker.date().duration(minValue, maxValue, unit);\n        Duration min = Duration.of(minValue, unit);\n        Duration max = Duration.of(maxValue, unit);\n        assertThat(min)\n            .as(\"Duration must be equal or greater than min value\")\n            .isLessThanOrEqualTo(generated);\n        assertThat(max.compareTo(generated) > 0 || minValue >= maxValue && max.equals(generated))\n            .as(\"Duration must be lower than max value\").isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMinMax\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateDurationsWithMinMax\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]durationTest(long,ChronoUnit)", "name": "durationTest", "arg_nums": 2, "params": [{"name": "maxValue", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMaxOnly\")\n    void durationTest(long maxValue, ChronoUnit unit)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateDurationsWithMaxOnly\")\n    void durationTest(long maxValue, ChronoUnit unit) {\n        Duration generated = faker.date().duration(maxValue, unit);\n        Duration max = Duration.of(maxValue, unit);\n        assertThat(max.compareTo(generated) > 0 || maxValue == 0)\n            .as(\"Duration must be lower than max value\")\n            .isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateDurationsWithMaxOnly\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateDurationsWithMaxOnly\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]durationTest(long,long,String)", "name": "durationTest", "arg_nums": 3, "params": [{"name": "minValue", "type": "long"}, {"name": "maxValue", "type": "long"}, {"name": "unit", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateDurationsFromStringWithMinMax\")\n    void durationTest(long minValue, long maxValue, String unit)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateDurationsFromStringWithMinMax\")\n    void durationTest(long minValue, long maxValue, String unit) {\n        Duration generated = faker.date().duration(minValue, maxValue, unit);\n        Duration min = Duration.of(minValue, DateAndTime.str2durationUnit(unit));\n        Duration max = Duration.of(maxValue, DateAndTime.str2durationUnit(unit));\n        assertThat(min).as(\"Duration must be equal or greater than min value\").isLessThanOrEqualTo(generated);\n        assertThat(max.compareTo(generated) > 0 || minValue >= maxValue && max.equals(generated))\n            .as(\"Duration must be lower than max value\")\n            .isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateDurationsFromStringWithMinMax\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateDurationsFromStringWithMinMax\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]durationTest(long,String)", "name": "durationTest", "arg_nums": 2, "params": [{"name": "maxValue", "type": "long"}, {"name": "unit", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateDurationsFromStringWithMaxOnly\")\n    void durationTest(long maxValue, String unit)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateDurationsFromStringWithMaxOnly\")\n    void durationTest(long maxValue, String unit) {\n        Duration generated = faker.date().duration(maxValue, unit);\n        Duration max = Duration.of(maxValue, DateAndTime.str2durationUnit(unit));\n        assertThat(max.compareTo(generated) > 0 || maxValue == 0).as(\"Duration must be lower than max value\").isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateDurationsFromStringWithMaxOnly\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateDurationsFromStringWithMaxOnly\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[void]maxLessThanMinPeriod(Period,Period)", "name": "maxLessThanMinPeriod", "arg_nums": 2, "params": [{"name": "min", "type": "Period"}, {"name": "max", "type": "Period"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generatePeriod\")\n    void maxLessThanMinPeriod(Period min, Period max)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generatePeriod\")\n    void maxLessThanMinPeriod(Period min, Period max) {\n        assertThatThrownBy(() -> faker.date().period(min, max))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generatePeriod\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generatePeriod\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_ipV4CidrTest.java.Internet_ipV4CidrTest.[void]testIpV4Cidr()", "name": "testIpV4Cidr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIpV4Cidr()", "original_string": "    @Test\n    public void testIpV4Cidr() {\n        Internet internet = new Internet(new BaseProviders() {\n            @Override\n            public RandomService random() {\n                return new RandomService() {\n                    @Override\n                    public int nextInt(int bound) {\n                        return 15; // Fixed value to ensure predictable CIDR suffix\n                    }\n                };\n            }\n        });\n\n        String cidr = internet.ipV4Cidr();\n        assertTrue(cidr.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+/16\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_ipV4CidrTest.java", "class_name": "Internet_ipV4CidrTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_ipV4CidrTest.java.Internet_ipV4CidrTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RestaurantTest.java.RestaurantTest.[void]namePrefix()", "name": "namePrefix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void namePrefix()", "original_string": "    @RepeatedTest(100)\n    void namePrefix() {\n        assertThat(restaurant.namePrefix())\n            .isNotEmpty()\n            .doesNotContain(\"#\", \"?\") // make sure bothify is applied\n            .matches(\"[A-Z0-9].*\");   // and that bothify only uses uppercase characters\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RestaurantTest.java", "class_name": "RestaurantTest", "class_uri": "src/test/java/net/datafaker/providers/base/RestaurantTest.java.RestaurantTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RestaurantTest.java.RestaurantTest.[void]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void name()", "original_string": "    @RepeatedTest(100)\n    void name() {\n        assertThat(restaurant.name())\n            .isNotEmpty()\n            .doesNotContain(\"#\", \"?\") // make sure bothify is applied\n            .matches(\"[A-Z0-9].*\");   // and that bothify only uses uppercase characters\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RestaurantTest.java", "class_name": "RestaurantTest", "class_uri": "src/test/java/net/datafaker/providers/base/RestaurantTest.java.RestaurantTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest.[void]temperatureCelsius()", "name": "temperatureCelsius", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void temperatureCelsius()", "original_string": "    @Test\n    void temperatureCelsius() {\n        assertThat(weather.temperatureCelsius()).matches(\"-?\\\\d+\u00b0C\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/WeatherTest.java", "class_name": "WeatherTest", "class_uri": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest.[void]temperatureFahrenheit()", "name": "temperatureFahrenheit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void temperatureFahrenheit()", "original_string": "    @Test\n    void temperatureFahrenheit() {\n        assertThat(weather.temperatureFahrenheit()).matches(\"-?\\\\d+\u00b0F\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/WeatherTest.java", "class_name": "WeatherTest", "class_uri": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest.[void]temperatureCelsiusInRange()", "name": "temperatureCelsiusInRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void temperatureCelsiusInRange()", "original_string": "    @Test\n    void temperatureCelsiusInRange() {\n        for (int i = 1; i < 100; i++) {\n            assertThat(weather.temperatureCelsius(-5, 5)).matches(\"-?[0-5]\u00b0C\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/WeatherTest.java", "class_name": "WeatherTest", "class_uri": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest.[void]temperatureFahrenheitInRange()", "name": "temperatureFahrenheitInRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void temperatureFahrenheitInRange()", "original_string": "    @Test\n    void temperatureFahrenheitInRange() {\n        for (int i = 1; i < 100; i++) {\n            assertThat(weather.temperatureFahrenheit(-5, 5)).matches(\"-?[0-5]\u00b0F\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/WeatherTest.java", "class_name": "WeatherTest", "class_uri": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testValid()", "name": "testValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testValid()", "original_string": "    @Test\n    void testValid() {\n        assertThat(faker.idNumber().valid()).matches(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testInvalid()", "name": "testInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testInvalid()", "original_string": "    @Test\n    void testInvalid() {\n        assertThat(faker.idNumber().invalid()).matches(\"[0-9]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testSsnValid()", "name": "testSsnValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSsnValid()", "original_string": "    @RepeatedTest(100)\n    void testSsnValid() {\n        assertThat(faker.idNumber().ssnValid()).matches(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n        assertThat(US.idNumber().valid()).matches(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testSsnInvalid()", "name": "testSsnInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSsnInvalid()", "original_string": "    @RepeatedTest(100)\n    void testSsnInvalid() {\n        String invalidSsn = US.idNumber().invalid();\n        if (!invalidSsn.startsWith(\"9\")) {\n            assertThat(invalidSsn).matches(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testValidSwedishSsn()", "name": "testValidSwedishSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testValidSwedishSsn()", "original_string": "    @RepeatedTest(100)\n    void testValidSwedishSsn() {\n        String actual = SWEDISH.idNumber().valid();\n        assertThat(actual).matches(SWEDISH_ID_NUMBER_PATTERN);\n        assertThat(SwedenIdNumber.isValidSwedishSsn(actual)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testInvalidSwedishSsn()", "name": "testInvalidSwedishSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testInvalidSwedishSsn()", "original_string": "    @RepeatedTest(100)\n    void testInvalidSwedishSsn() {\n        String actual = SWEDISH.idNumber().invalid();\n        assertThat(actual).matches(SWEDISH_ID_NUMBER_PATTERN);\n        assertThat(SwedenIdNumber.isValidSwedishSsn(actual)).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]southAfrica_valid()", "name": "southAfrica_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void southAfrica_valid()", "original_string": "    @RepeatedTest(100)\n    void southAfrica_valid() {\n        String actual = SOUTH_AFRICA.idNumber().valid();\n        assertThat(actual).matches(SOUTH_AFRICA_ID_NUMBER_PATTERN);\n        assertThat(SouthAfricanIdNumber.isValidEnZASsn(actual)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]southAfrica_invalid()", "name": "southAfrica_invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void southAfrica_invalid()", "original_string": "    @RepeatedTest(100)\n    void southAfrica_invalid() {\n        assertThat(SOUTH_AFRICA.idNumber().invalid()).matches(SOUTH_AFRICA_ID_NUMBER_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testSingaporeanFin()", "name": "testSingaporeanFin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSingaporeanFin()", "original_string": "    @RepeatedTest(100)\n    void testSingaporeanFin() {\n        assertThat(faker.idNumber().singaporeanFin()).matches(\"G[0-9]{7}[A-Z]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testSingaporeanFinBefore2000()", "name": "testSingaporeanFinBefore2000", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSingaporeanFinBefore2000()", "original_string": "    @RepeatedTest(100)\n    void testSingaporeanFinBefore2000() {\n        assertThat(faker.idNumber().singaporeanFinBefore2000()).matches(\"F[0-9]{7}[A-Z]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testSingaporeanUin()", "name": "testSingaporeanUin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSingaporeanUin()", "original_string": "    @RepeatedTest(100)\n    void testSingaporeanUin() {\n        assertThat(faker.idNumber().singaporeanUin()).matches(\"T[0-9]{7}[A-Z]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testSingaporeanUinBefore2000()", "name": "testSingaporeanUinBefore2000", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSingaporeanUinBefore2000()", "original_string": "    @RepeatedTest(100)\n    void testSingaporeanUinBefore2000() {\n        assertThat(faker.idNumber().singaporeanUinBefore2000()).matches(\"S[0-9]{7}[A-Z]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]testPeselNumber()", "name": "testPeselNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testPeselNumber()", "original_string": "    @RepeatedTest(100)\n    void testPeselNumber() {\n        assertThat(faker.idNumber().peselNumber()).matches(\"[0-9]{11}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]estonianPersonalCode_valid()", "name": "estonianPersonalCode_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void estonianPersonalCode_valid()", "original_string": "    @RepeatedTest(100)\n    void estonianPersonalCode_valid() {\n        assertThatPin(ESTONIAN.idNumber().valid()).matches(\"[1-6][0-9]{10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]estonianPersonalCode_invalid()", "name": "estonianPersonalCode_invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void estonianPersonalCode_invalid()", "original_string": "    @RepeatedTest(100)\n    void estonianPersonalCode_invalid() {\n        assertThatPin(ESTONIAN.idNumber().invalid()).matches(\"[1-6][0-9]{10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]albanianPersonalCode_valid()", "name": "albanianPersonalCode_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void albanianPersonalCode_valid()", "original_string": "    @RepeatedTest(100)\n    void albanianPersonalCode_valid() {\n        String pin = ALBANIAN.idNumber().valid();\n        assertThatPin(pin).matches(\"\\\\w\\\\d{8}\\\\w\");\n        assertThat(parseInt(pin.substring(2, 4)) % 50)\n            .as(() -> \"Valid PIN %s should have month number between 1..12 (for males) or 51..62 (for females)\".formatted(pin))\n            .isBetween(1, 12);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]albanianPersonalCode_invalid()", "name": "albanianPersonalCode_invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void albanianPersonalCode_invalid()", "original_string": "    @RepeatedTest(100)\n    void albanianPersonalCode_invalid() {\n        String pin = ALBANIAN.idNumber().invalid();\n        assertThatPin(pin).matches(\"\\\\w\\\\d{8}\\\\w\");\n        assertThat(parseInt(pin.substring(2, 4)))\n            .as(() -> \"Invalid PIN %s should have month greater than (any month + 50)\".formatted(pin))\n            .isGreaterThan(62);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]moldovaPersonalCode_valid(String)", "name": "moldovaPersonalCode_valid", "arg_nums": 1, "params": [{"name": "language", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"en\", \"ro\", \"ru\"})\n    void moldovaPersonalCode_valid(String language)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"en\", \"ro\", \"ru\"})\n    void moldovaPersonalCode_valid(String language) {\n        final var faker = new Faker(new Locale(language, \"MD\"));\n        for (int i = 0; i < 100; i++) {\n            String pin = faker.idNumber().valid();\n            assertThatPin(pin).matches(\"\\\\d{13}\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"en\", \"ro\", \"ru\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"en\", \"ro\", \"ru\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]moldovaPersonalCode_invalid(String)", "name": "moldovaPersonalCode_invalid", "arg_nums": 1, "params": [{"name": "language", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"en\", \"ro\", \"ru\"})\n    void moldovaPersonalCode_invalid(String language)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"en\", \"ro\", \"ru\"})\n    void moldovaPersonalCode_invalid(String language) {\n        final var faker = new Faker(new Locale(language, \"MD\"));\n        for (int i = 0; i < 100; i++) {\n            String pin = faker.idNumber().invalid();\n            assertThatPin(pin).matches(\"\\\\d{13}\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"en\", \"ro\", \"ru\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"en\", \"ro\", \"ru\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]bulgarianPersonalCode_valid()", "name": "bulgarianPersonalCode_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void bulgarianPersonalCode_valid()", "original_string": "    @RepeatedTest(100)\n    void bulgarianPersonalCode_valid() {\n        String pin = BULGARIAN.idNumber().valid();\n        assertThatPin(pin).matches(\"\\\\d{10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]bulgarianPersonalCode_invalid()", "name": "bulgarianPersonalCode_invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void bulgarianPersonalCode_invalid()", "original_string": "    @RepeatedTest(100)\n    void bulgarianPersonalCode_invalid() {\n        String pin = BULGARIAN.idNumber().invalid();\n        assertThatPin(pin).matches(\"\\\\d{10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]macedonianPersonalCode_valid()", "name": "macedonianPersonalCode_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void macedonianPersonalCode_valid()", "original_string": "    @RepeatedTest(100)\n    void macedonianPersonalCode_valid() {\n        String pin = MACEDONIAN.idNumber().valid();\n        assertThatPin(pin).matches(\"\\\\d{13}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]romanianPersonalCode_valid()", "name": "romanianPersonalCode_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void romanianPersonalCode_valid()", "original_string": "    @RepeatedTest(100)\n    void romanianPersonalCode_valid() {\n        String pin = ROMANIAN.idNumber().valid();\n        assertThatPin(pin).matches(\"\\\\d{13}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]macedonianPersonalCode_invalid()", "name": "macedonianPersonalCode_invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void macedonianPersonalCode_invalid()", "original_string": "    @RepeatedTest(100)\n    void macedonianPersonalCode_invalid() {\n        String pin = MACEDONIAN.idNumber().invalid();\n        assertThatPin(pin).matches(\"\\\\d{13}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]ukrainianUznr_valid()", "name": "ukrainianUznr_valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void ukrainianUznr_valid()", "original_string": "    @RepeatedTest(100)\n    void ukrainianUznr_valid() {\n        assertThatPin(UKRAINIAN.idNumber().valid()).matches(UKRAINIAN_UNZR_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[void]ukrainianUznr_invalid()", "name": "ukrainianUznr_invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void ukrainianUznr_invalid()", "original_string": "    @RepeatedTest(100)\n    void ukrainianUznr_invalid() {\n        assertThatPin(UKRAINIAN.idNumber().invalid()).matches(UKRAINIAN_UNZR_PATTERN);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest.[void]testWordsWithPositiveNumber()", "name": "testWordsWithPositiveNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWordsWithPositiveNumber()", "original_string": "    @Test\n    public void testWordsWithPositiveNumber() {\n        int num = 5;\n        List<String> result = lorem.words(num);\n        assertThat(result).hasSize(num);\n        for (String word : result) {\n            assertThat(word).isNotBlank();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java", "class_name": "Lorem_wordsTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest.[void]testWordsWithZero()", "name": "testWordsWithZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWordsWithZero()", "original_string": "    @Test\n    public void testWordsWithZero() {\n        int num = 0;\n        List<String> result = lorem.words(num);\n        assertThat(result).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java", "class_name": "Lorem_wordsTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest.[void]testWordsWithNegativeNumber()", "name": "testWordsWithNegativeNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWordsWithNegativeNumber()", "original_string": "    @Test\n    public void testWordsWithNegativeNumber() {\n        int num = -5;\n        List<String> result = lorem.words(num);\n        assertThat(result).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java", "class_name": "Lorem_wordsTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DrivingLicenseTest.java.DrivingLicenseTest.[void]drivingLicense(LicensePattern)", "name": "drivingLicense", "arg_nums": 1, "params": [{"name": "licensePattern", "type": "LicensePattern"}], "return_type": "void", "signature": "@ParameterizedTest\n    @EnumSource(LicensePattern.class)\n    void drivingLicense(LicensePattern licensePattern)", "original_string": "    @ParameterizedTest\n    @EnumSource(LicensePattern.class)\n    void drivingLicense(LicensePattern licensePattern) {\n        for (int i = 0; i < 100; i++) {\n            assertThat(drivingLicense.drivingLicense(licensePattern.abbv)).matches(licensePattern.pattern);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DrivingLicenseTest.java", "class_name": "DrivingLicenseTest", "class_uri": "src/test/java/net/datafaker/providers/base/DrivingLicenseTest.java.DrivingLicenseTest", "attributes": {"modifiers": "@ParameterizedTest\n    @EnumSource(LicensePattern.class)", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(LicensePattern.class)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testExtension()", "name": "testExtension", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testExtension()", "original_string": "    @RepeatedTest(10)\n    void testExtension() {\n        assertThat(faker.file().extension())\n            .matches(\"(flac|mp3|wav|bmp|gif|jpeg|jpg|png|tiff|css|csv|html|js|json|txt|mp4|avi|mov|webm|doc|docx|xls|xlsx|ppt|pptx|odt|ods|odp|pages|numbers|key|pdf)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testMimeTypeFormat()", "name": "testMimeTypeFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testMimeTypeFormat()", "original_string": "    @RepeatedTest(10)\n    void testMimeTypeFormat() {\n        assertThat(faker.file().mimeType()).matches(\".+/.+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testFileName()", "name": "testFileName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testFileName()", "original_string": "    @RepeatedTest(10)\n    void testFileName() {\n        assertThat(faker.file().fileName()).matches(\"([a-z\\\\-_]+)([\\\\\\\\/])([a-z\\\\-_]+)\\\\.([a-z0-9]+)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testFileNameSpecifyExtension()", "name": "testFileNameSpecifyExtension", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFileNameSpecifyExtension()", "original_string": "    @Test\n    void testFileNameSpecifyExtension() {\n        assertThat(faker.file().fileName(null, null, \"txt\", null))\n            .matches(\"([a-z\\\\-_]+)([\\\\\\\\/])([a-z\\\\-_]+)\\\\.txt\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testFileNameSpecifyDir()", "name": "testFileNameSpecifyDir", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFileNameSpecifyDir()", "original_string": "    @Test\n    void testFileNameSpecifyDir() {\n        assertThat(faker.file().fileName(\"my_dir\", null, null, null))\n            .matches(\"my_dir([\\\\\\\\/])([a-z\\\\-_]+)\\\\.([a-z0-9]+)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testFileNameSpecifySeparator()", "name": "testFileNameSpecifySeparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFileNameSpecifySeparator()", "original_string": "    @Test\n    void testFileNameSpecifySeparator() {\n        assertThat(faker.file().fileName(null, null, null, \"\\\\\"))\n            .matches(\"([a-z\\\\-_]+)\\\\\\\\([a-z\\\\-_]+)\\\\.([a-z0-9]+)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest.[void]testFileNameSpecifyName()", "name": "testFileNameSpecifyName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFileNameSpecifyName()", "original_string": "    @Test\n    void testFileNameSpecifyName() {\n        assertThat(faker.file().fileName(null, \"da_name\", null, null))\n            .matches(\"([a-z\\\\-_]+)([\\\\\\\\/])da_name\\\\.([a-z0-9]+)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FileTest.java", "class_name": "FileTest", "class_uri": "src/test/java/net/datafaker/providers/base/FileTest.java.FileTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest.[void]testMd2()", "name": "testMd2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMd2()", "original_string": "    @Test\n    void testMd2() {\n        assertThat(faker.hashing().md2()).matches(\"\\\\b[a-fA-F\\\\d]{32}\\\\b\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HashingTest.java", "class_name": "HashingTest", "class_uri": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest.[void]testMd5()", "name": "testMd5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMd5()", "original_string": "    @Test\n    void testMd5() {\n        assertThat(faker.hashing().md5()).matches(\"\\\\b[a-fA-F\\\\d]{32}\\\\b\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HashingTest.java", "class_name": "HashingTest", "class_uri": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest.[void]testSha1()", "name": "testSha1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSha1()", "original_string": "    @Test\n    void testSha1() {\n        assertThat(faker.hashing().sha1()).matches(\"\\\\b[a-fA-F\\\\d]{40}\\\\b\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HashingTest.java", "class_name": "HashingTest", "class_uri": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest.[void]testSha256()", "name": "testSha256", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSha256()", "original_string": "    @Test\n    void testSha256() {\n        assertThat(faker.hashing().sha256()).matches(\"\\\\b[a-fA-F\\\\d]{64}\\\\b\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HashingTest.java", "class_name": "HashingTest", "class_uri": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest.[void]testSha384()", "name": "testSha384", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSha384()", "original_string": "    @Test\n    void testSha384() {\n        assertThat(faker.hashing().sha384()).matches(\"\\\\b[a-fA-F\\\\d]{96}\\\\b\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HashingTest.java", "class_name": "HashingTest", "class_uri": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest.[void]testSha512()", "name": "testSha512", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSha512()", "original_string": "    @Test\n    void testSha512() {\n        assertThat(faker.hashing().sha512()).matches(\"\\\\b[a-fA-F\\\\d]{128}\\\\b\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HashingTest.java", "class_name": "HashingTest", "class_uri": "src/test/java/net/datafaker/providers/base/HashingTest.java.HashingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest.[void]testBetweenValidRange()", "name": "testBetweenValidRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBetweenValidRange()", "original_string": "    @Test\n    public void testBetweenValidRange() {\n        Timestamp from = new Timestamp(System.currentTimeMillis());\n        Timestamp to = new Timestamp(from.getTime() + 10000); // 10 seconds later\n\n        Timestamp result = dateAndTime.between(from, to);\n        assertTrue(result.getTime() >= from.getTime() && result.getTime() < to.getTime());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java", "class_name": "DateAndTime_betweenTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest.[void]testBetweenEqualDates()", "name": "testBetweenEqualDates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBetweenEqualDates()", "original_string": "    @Test\n    public void testBetweenEqualDates() {\n        Timestamp from = new Timestamp(System.currentTimeMillis());\n        Timestamp to = new Timestamp(from.getTime());\n\n        Timestamp result = dateAndTime.between(from, to);\n        assertEquals(from, result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java", "class_name": "DateAndTime_betweenTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest.[void]testBetweenInvalidRange()", "name": "testBetweenInvalidRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBetweenInvalidRange()", "original_string": "    @Test\n    public void testBetweenInvalidRange() {\n        Timestamp from = new Timestamp(System.currentTimeMillis() + 10000); // 10 seconds later\n        Timestamp to = new Timestamp(System.currentTimeMillis());\n\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            dateAndTime.between(from, to);\n        });\n\n        String expectedMessage = \"Invalid date range: the upper bound date (\" + to + \") is before the lower bound (\" + from + \")\";\n        assertEquals(expectedMessage, exception.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java", "class_name": "DateAndTime_betweenTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BookTest.java.BookTest.[void]testAuthor()", "name": "testAuthor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAuthor()", "original_string": "    @Test\n    void testAuthor() {\n        assertThat(book.author()).matches(\"([\\\\w']+\\\\.? ?){2,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BookTest.java", "class_name": "BookTest", "class_uri": "src/test/java/net/datafaker/providers/base/BookTest.java.BookTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testRegion()", "name": "testRegion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRegion()", "original_string": "    @Test\n    void testRegion() {\n        String region = faker.azure().region();\n        assertThat(region).matches(\"(eastus|eastus2|southcentralus|westus2|westus3|australiaeast|southeastasia|northeurope|swedencentral|uksouth|westeurope|centralus|southafricanorth|centralindia|eastasia|japaneast|koreacentral|canadacentral|francecentral|germanywestcentral|norwayeast|switzerlandnorth|uaenorth|brazilsouth|eastus2euap|qatarcentral|centralusstage|eastusstage|eastus2stage|northcentralusstage|southcentralusstage|westusstage|westus2stage|asia|asiapacific|australia|brazil|canada|europe|france|germany|global|india|japan|korea|norway|singapore|southafrica|switzerland|uae|uk|unitedstates|unitedstateseuap|eastasiastage|southeastasiastage|eastusstg|southcentralusstg|northcentralus|westus|jioindiawest|centraluseuap|westcentralus|southafricawest|australiacentral|australiacentral2|australiasoutheast|japanwest|jioindiacentral|koreasouth|southindia|westindia|canadaeast|francesouth|germanynorth|norwaywest|switzerlandwest|ukwest|uaecentral|brazilsoutheast)\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testAccountId()", "name": "testAccountId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAccountId()", "original_string": "    @Test\n    void testAccountId() {\n        assertThat(faker.azure().subscriptionId()).matches(\"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testTenantId()", "name": "testTenantId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTenantId()", "original_string": "    @Test\n    void testTenantId() {\n        assertThat(faker.azure().tenantId()).matches(\"[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testResourceGroup()", "name": "testResourceGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testResourceGroup()", "original_string": "    @Test\n    void testResourceGroup() {\n        assertThat(faker.azure().resourceGroup()).matches(\"^rg-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testManagementGroup()", "name": "testManagementGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testManagementGroup()", "original_string": "    @Test\n    void testManagementGroup() {\n        assertThat(faker.azure().managementGroup()).matches(\"^mg-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testApplicationGateway()", "name": "testApplicationGateway", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testApplicationGateway()", "original_string": "    @Test\n    void testApplicationGateway() {\n        assertThat(faker.azure().applicationGateway()).matches(\"^agw-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testBastionHost()", "name": "testBastionHost", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testBastionHost()", "original_string": "    @Test\n    void testBastionHost() {\n        assertThat(faker.azure().bastionHost()).matches(\"^bas-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testFirewall()", "name": "testFirewall", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFirewall()", "original_string": "    @Test\n    void testFirewall() {\n        assertThat(faker.azure().firewall()).matches(\"^afw-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testLoadBalancer()", "name": "testLoadBalancer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLoadBalancer()", "original_string": "    @Test\n    void testLoadBalancer() {\n        assertThat(faker.azure().loadBalancer()).matches(\"^lbi-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testNetworkSecurityGroup()", "name": "testNetworkSecurityGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNetworkSecurityGroup()", "original_string": "    @Test\n    void testNetworkSecurityGroup() {\n        assertThat(faker.azure().networkSecurityGroup()).matches(\"^nsg-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testVirtualNetwork()", "name": "testVirtualNetwork", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testVirtualNetwork()", "original_string": "    @Test\n    void testVirtualNetwork() {\n        assertThat(faker.azure().virtualNetwork()).matches(\"^vnet-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testVirtualWan()", "name": "testVirtualWan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testVirtualWan()", "original_string": "    @Test\n    void testVirtualWan() {\n        assertThat(faker.azure().virtualWan()).matches(\"^vwan-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testAppServiceEnvironment()", "name": "testAppServiceEnvironment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAppServiceEnvironment()", "original_string": "    @Test\n    void testAppServiceEnvironment() {\n        assertThat(faker.azure().appServiceEnvironment()).matches(\"^ase-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testAppServicePlan()", "name": "testAppServicePlan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAppServicePlan()", "original_string": "    @Test\n    void testAppServicePlan() {\n        assertThat(faker.azure().appServicePlan()).matches(\"^asp-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testLoadTesting()", "name": "testLoadTesting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLoadTesting()", "original_string": "    @Test\n    void testLoadTesting() {\n        assertThat(faker.azure().loadTesting()).matches(\"^lt-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testStaticWebApp()", "name": "testStaticWebApp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStaticWebApp()", "original_string": "    @Test\n    void testStaticWebApp() {\n        assertThat(faker.azure().staticWebApp()).matches(\"^stapp-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testVirtualMachine()", "name": "testVirtualMachine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testVirtualMachine()", "original_string": "    @Test\n    void testVirtualMachine() {\n        assertThat(faker.azure().virtualMachine()).matches(\"^vm-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testStorageAccount()", "name": "testStorageAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testStorageAccount()", "original_string": "    @Test\n    void testStorageAccount() {\n        assertThat(faker.azure().storageAccount()).matches(\"^st-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testContainerRegistry()", "name": "testContainerRegistry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainerRegistry()", "original_string": "    @Test\n    void testContainerRegistry() {\n        assertThat(faker.azure().containerRegistry()).matches(\"^cr-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testContainerApps()", "name": "testContainerApps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainerApps()", "original_string": "    @Test\n    void testContainerApps() {\n        assertThat(faker.azure().containerApps()).matches(\"^ca-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testContainerAppsEnvironment()", "name": "testContainerAppsEnvironment", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainerAppsEnvironment()", "original_string": "    @Test\n    void testContainerAppsEnvironment() {\n        assertThat(faker.azure().containerAppsEnvironment()).matches(\"^cae-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testContainerInstance()", "name": "testContainerInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainerInstance()", "original_string": "    @Test\n    void testContainerInstance() {\n        assertThat(faker.azure().containerInstance()).matches(\"^ci-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testCosmosDBDatabase()", "name": "testCosmosDBDatabase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCosmosDBDatabase()", "original_string": "    @Test\n    void testCosmosDBDatabase() {\n        assertThat(faker.azure().cosmosDBDatabase()).matches(\"^cosmos-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testSqlDatabase()", "name": "testSqlDatabase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSqlDatabase()", "original_string": "    @Test\n    void testSqlDatabase() {\n        assertThat(faker.azure().sqlDatabase()).matches(\"^sql-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testMysqlDatabase()", "name": "testMysqlDatabase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMysqlDatabase()", "original_string": "    @Test\n    void testMysqlDatabase() {\n        assertThat(faker.azure().mysqlDatabase()).matches(\"^mysql-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testPostgreSQLDatabase()", "name": "testPostgreSQLDatabase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPostgreSQLDatabase()", "original_string": "    @Test\n    void testPostgreSQLDatabase() {\n        assertThat(faker.azure().postgreSQLDatabase()).matches(\"^psql-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testServiceBus()", "name": "testServiceBus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testServiceBus()", "original_string": "    @Test\n    void testServiceBus() {\n        assertThat(faker.azure().serviceBus()).matches(\"^sb-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testServiceBusQueue()", "name": "testServiceBusQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testServiceBusQueue()", "original_string": "    @Test\n    void testServiceBusQueue() {\n        assertThat(faker.azure().serviceBusQueue()).matches(\"^sbq-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testServiceBusTopic()", "name": "testServiceBusTopic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testServiceBusTopic()", "original_string": "    @Test\n    void testServiceBusTopic() {\n        assertThat(faker.azure().serviceBusTopic()).matches(\"^sbt-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testKeyVault()", "name": "testKeyVault", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testKeyVault()", "original_string": "    @Test\n    void testKeyVault() {\n        assertThat(faker.azure().keyVault()).matches(\"^kv-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testLogAnalytics()", "name": "testLogAnalytics", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLogAnalytics()", "original_string": "    @Test\n    void testLogAnalytics() {\n        assertThat(faker.azure().logAnalytics()).matches(\"^log-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest.[void]testSpringApps()", "name": "testSpringApps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSpringApps()", "original_string": "    @Test\n    void testSpringApps() {\n        assertThat(faker.azure().springApps()).matches(\"^sa-[0-9a-f]{16}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AzureTest.java", "class_name": "AzureTest", "class_uri": "src/test/java/net/datafaker/providers/base/AzureTest.java.AzureTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SpaceTest.java.SpaceTest.[void]distanceMeasurement()", "name": "distanceMeasurement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void distanceMeasurement()", "original_string": "    @Test\n    void distanceMeasurement() {\n        assertThat(faker.space().distanceMeasurement()).matches(\"(?:\\\\w+ ?){2,3}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SpaceTest.java", "class_name": "SpaceTest", "class_uri": "src/test/java/net/datafaker/providers/base/SpaceTest.java.SpaceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniversityTest.java.UniversityTest.[void]testName()", "name": "testName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testName()", "original_string": "    @Test\n    void testName() {\n        assertThat(university.name()).matches(\"[A-Za-z'() ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniversityTest.java", "class_name": "UniversityTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniversityTest.java.UniversityTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest.[void]flight_ICAO()", "name": "flight_ICAO", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void flight_ICAO()", "original_string": "    @Test\n    void flight_ICAO() {\n        Pattern regex = Pattern.compile(\"[A-Z]{3}[0-9]+\");\n        assertThat(aviation.flight(\"ICAO\")).matches(regex);\n        assertThat(aviation.flight(\"icao\")).matches(regex);\n        assertThat(aviation.flight(\"Icao\")).matches(regex);\n        assertThat(aviation.flight(\"IcaO\")).matches(regex);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AviationTest.java", "class_name": "AviationTest", "class_uri": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest.[void]flight_IATA()", "name": "flight_IATA", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void flight_IATA()", "original_string": "    @Test\n    void flight_IATA() {\n        Pattern regex = Pattern.compile(\"[A-Z0-9]{2}\\\\d{1,4}\");\n        assertThat(aviation.flight(\"IATA\")).matches(regex);\n        assertThat(aviation.flight(\"iata\")).matches(regex);\n        assertThat(aviation.flight(\"test\")).matches(regex);\n        assertThat(aviation.flight(null)).matches(regex);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AviationTest.java", "class_name": "AviationTest", "class_uri": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest.[void]flight_default()", "name": "flight_default", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void flight_default()", "original_string": "    @Test\n    void flight_default() {\n        assertThat(aviation.flight()).matches(\"[A-Z0-9]{2}\\\\d{1,4}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AviationTest.java", "class_name": "AviationTest", "class_uri": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest.[void]aircraft()", "name": "aircraft", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void aircraft()", "original_string": "    @Test\n    void aircraft() {\n        assertThat(aviation.aircraft()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AviationTest.java", "class_name": "AviationTest", "class_uri": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest.[void]gate()", "name": "gate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void gate()", "original_string": "    @Test\n    void gate() {\n        assertThat(aviation.gate()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AviationTest.java", "class_name": "AviationTest", "class_uri": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest.[void]testDiagnosisCodeUS()", "name": "testDiagnosisCodeUS", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testDiagnosisCodeUS()", "original_string": "    @Test\n    void testDiagnosisCodeUS() {\n        // will use icd-10-cm - https://www.johndcook.com/blog/2019/05/05/regex_icd_codes/\n        BaseFaker faker = new BaseFaker(Locale.US);\n\n        for (int i = 0; i < 100; i++) { // Loading the US data is slow.\n            String actual = faker.medical().diagnosisCode();\n            assertThat(actual).matches(\"[A-TV-Z][0-9][0-9AB](\\\\.[0-9A-TV-Z]{0,4})?\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MedicalTest.java", "class_name": "MedicalTest", "class_uri": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest.[void]testDiagnosisCodeAU()", "name": "testDiagnosisCodeAU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testDiagnosisCodeAU()", "original_string": "    @RepeatedTest(100)\n    void testDiagnosisCodeAU() {\n        // will use icd-10-am - https://ace.ihpa.gov.au/Downloads/Current/ICD-10-AM-ACHI-ACS%2011th%20Edition/Education/11th%20Edition%20PDF%20files/Coding-Exercise-Workbook-Eleventh-Edition%20V2-15%20Jun%202019.pdf\n        BaseFaker faker = new BaseFaker(new Locale(\"en\", \"au\"));\n\n        String actual = faker.medical().diagnosisCode();\n        assertThat(actual).matches(\"[A-Z][0-9]{1,2}\\\\.[0-9]{1,2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MedicalTest.java", "class_name": "MedicalTest", "class_uri": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest.[void]testDiagnosisCodeNotAustraliaNorUS()", "name": "testDiagnosisCodeNotAustraliaNorUS", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testDiagnosisCodeNotAustraliaNorUS()", "original_string": "    @RepeatedTest(100)\n    void testDiagnosisCodeNotAustraliaNorUS() {\n        // will use icd-10 - variation of https://regexlib.com/REDetails.aspx?regexp_id=2276&AspxAutoDetectCookieSupport=1\n        BaseFaker faker = new BaseFaker(Locale.FRANCE);\n\n        String actual = faker.medical().diagnosisCode();\n        assertThat(actual).matches(\"^[A-Z][0-9]{1,2}(\\\\.[0-9])?$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MedicalTest.java", "class_name": "MedicalTest", "class_uri": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest.[void]testProcedureCodes()", "name": "testProcedureCodes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testProcedureCodes()", "original_string": "    @RepeatedTest(100)\n    void testProcedureCodes() {\n        // will use icd-10-pcs - https://regex101.com/library/nJ1wC4\n        String procedureCode = faker.medical().procedureCode();\n        assertThat(procedureCode).matches(\"^[a-hj-np-zA-HJ-NP-Z0-9]{7}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MedicalTest.java", "class_name": "MedicalTest", "class_uri": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testDefaultLocale()", "name": "testDefaultLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testDefaultLocale()", "original_string": "    @RepeatedTest(10)\n    void testDefaultLocale() {\n        assertThat(new BaseFaker().passport().valid())\n            .hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidDutch()", "name": "testValidDutch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidDutch()", "original_string": "    @RepeatedTest(10)\n    void testValidDutch() {\n        assertThat(new BaseFaker(new Locale(\"nl\", \"nl\")).passport().valid())\n            .hasSize(9)\n            .doesNotContain(\"O\")\n            .matches(\".*?\\\\d$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidChinese()", "name": "testValidChinese", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidChinese()", "original_string": "    @RepeatedTest(10)\n    void testValidChinese() {\n        assertThat(new BaseFaker(new Locale(\"zh\", \"CN\")).passport().valid())\n            .hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidUnitedStates()", "name": "testValidUnitedStates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidUnitedStates()", "original_string": "    @RepeatedTest(10)\n    void testValidUnitedStates() {\n        assertThat(new BaseFaker(new Locale(\"en\", \"US\")).passport().valid())\n            .hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidAustralia()", "name": "testValidAustralia", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidAustralia()", "original_string": "    @RepeatedTest(10)\n    void testValidAustralia() {\n        assertThat(new BaseFaker(new Locale(\"en\", \"AU\")).passport().valid())\n            .hasSize(8)\n            .matches(\"[A-Z][0-9]{7}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidCanada()", "name": "testValidCanada", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidCanada()", "original_string": "    @RepeatedTest(10)\n    void testValidCanada() {\n        assertThat(new BaseFaker(new Locale(\"en\", \"CA\")).passport().valid())\n            .hasSize(8);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidUnitedKingdom()", "name": "testValidUnitedKingdom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidUnitedKingdom()", "original_string": "    @RepeatedTest(10)\n    void testValidUnitedKingdom() {\n        assertThat(new BaseFaker(new Locale(\"en\", \"GB\")).passport().valid())\n            .hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidJapan()", "name": "testValidJapan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidJapan()", "original_string": "    @RepeatedTest(10)\n    void testValidJapan() {\n        assertThat(new BaseFaker(new Locale(\"ja\")).passport().valid())\n            .hasSize(9)\n            .matches(\"[MT][A-Z][0-9]{7}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidSpain()", "name": "testValidSpain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidSpain()", "original_string": "    @RepeatedTest(10)\n    void testValidSpain() {\n        assertThat(new BaseFaker(new Locale(\"es\")).passport().valid())\n            .matches(\"[A-z0-9]{2,3}[0-9]{6}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidBulgaria()", "name": "testValidBulgaria", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidBulgaria()", "original_string": "    @RepeatedTest(10)\n    void testValidBulgaria() {\n        assertThat(new BaseFaker(new Locale(\"bg\")).passport().valid())\n            .hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest.[void]testValidFinland()", "name": "testValidFinland", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidFinland()", "original_string": "    @RepeatedTest(10)\n    void testValidFinland() {\n        assertThat(new BaseFaker(new Locale(\"fi\", \"FI\")).passport().valid())\n            .hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PassportTest.java", "class_name": "PassportTest", "class_uri": "src/test/java/net/datafaker/providers/base/PassportTest.java.PassportTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java.DateAndTime_birthdayLocalDateTest.[void]testBirthdayLocalDateWithEqualAges()", "name": "testBirthdayLocalDateWithEqualAges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBirthdayLocalDateWithEqualAges()", "original_string": "    @Test\n    public void testBirthdayLocalDateWithEqualAges() {\n        int minAge = 30;\n        int maxAge = 30;\n        LocalDate result = dateAndTime.birthdayLocalDate(minAge, maxAge);\n        LocalDate expected = LocalDate.now().minusYears(maxAge);\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java", "class_name": "DateAndTime_birthdayLocalDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java.DateAndTime_birthdayLocalDateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java.DateAndTime_birthdayLocalDateTest.[void]testBirthdayLocalDateWithDifferentAges()", "name": "testBirthdayLocalDateWithDifferentAges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBirthdayLocalDateWithDifferentAges()", "original_string": "    @Test\n    public void testBirthdayLocalDateWithDifferentAges() {\n        int minAge = 18;\n        int maxAge = 65;\n        LocalDate result = dateAndTime.birthdayLocalDate(minAge, maxAge);\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n        assertTrue(result.isAfter(from) || result.isEqual(from));\n        assertTrue(result.isBefore(to) || result.isEqual(to));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java", "class_name": "DateAndTime_birthdayLocalDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java.DateAndTime_birthdayLocalDateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]addNullExistingPath()", "name": "addNullExistingPath", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void addNullExistingPath()", "original_string": "    @Test\n    void addNullExistingPath() {\n        assertThatThrownBy(() -> new BaseFaker().addPath(Locale.ENGLISH, null))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]addNonExistingPath()", "name": "addNonExistingPath", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void addNonExistingPath()", "original_string": "    @Test\n    void addNonExistingPath() {\n        assertThatThrownBy(() -> new BaseFaker().addPath(Locale.ENGLISH, Paths.get(\"non-existing-file\")))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]insectTest()", "name": "insectTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void insectTest()", "original_string": "    @RepeatedTest(10)\n    void insectTest() {\n        MyCustomFaker myFaker = new MyCustomFaker();\n        assertThat(myFaker.insect().nextInsectName()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]insectTestExpression()", "name": "insectTestExpression", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void insectTestExpression()", "original_string": "    @RepeatedTest(10)\n    void insectTestExpression() {\n        MyCustomFaker myFaker = new MyCustomFaker();\n        assertThat(myFaker.expression(\"#{Insect.nextInsectName}\")).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]insectAntTestExpressionFromFile()", "name": "insectAntTestExpressionFromFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void insectAntTestExpressionFromFile()", "original_string": "    @RepeatedTest(10)\n    void insectAntTestExpressionFromFile() {\n        MyCustomFaker myFaker = new MyCustomFaker();\n        assertThat(myFaker.insectFromFile().ant()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]insectBeeTestExpressionFromFile()", "name": "insectBeeTestExpressionFromFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void insectBeeTestExpressionFromFile()", "original_string": "    @RepeatedTest(10)\n    void insectBeeTestExpressionFromFile() {\n        MyCustomFaker myFaker = new MyCustomFaker();\n        assertThat(myFaker.insectFromFile().bee()).endsWith(\"bee\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]insectBeeTestExpressionFromFileWithoutExtraFaker()", "name": "insectBeeTestExpressionFromFileWithoutExtraFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void insectBeeTestExpressionFromFileWithoutExtraFaker()", "original_string": "    @Test\n    void insectBeeTestExpressionFromFileWithoutExtraFaker() {\n        BaseFaker faker = new BaseFaker();\n        assertThat(BaseFaker.getProvider(InsectFromFile.class, InsectFromFile::new, faker).bee()).endsWith(\"bee\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]insectTestWithoutExtraFaker()", "name": "insectTestWithoutExtraFaker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void insectTestWithoutExtraFaker()", "original_string": "    @Test\n    void insectTestWithoutExtraFaker() {\n        BaseFaker faker = new BaseFaker();\n        assertThat(BaseFaker.getProvider(Insect.class, Insect::new, faker).nextInsectName()).matches(\"[A-Za-z ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest.[void]testMultipleFakerContextsPerOneClassName()", "name": "testMultipleFakerContextsPerOneClassName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testMultipleFakerContextsPerOneClassName()", "original_string": "    @Test\n    void testMultipleFakerContextsPerOneClassName() {\n        class InsectFaker extends BaseFaker {\n            public InsectFaker(Locale locale) {\n                super(locale);\n            }\n\n            public Insect insect() {\n                return getProvider(Insect.class, Insect::new);\n            }\n        }\n        BaseFaker faker1 = new InsectFaker(Locale.ENGLISH);\n        BaseFaker faker2 = new InsectFaker(Locale.GERMAN);\n\n        Insect insect1 = faker1.getProvider(\"Insect\");\n        Insect insect2 = faker2.getProvider(\"Insect\");\n        assertThat(insect1).isNotNull();\n        assertThat(insect2).isNotNull();\n        assertThat(insect1).isNotSameAs(insect2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "class_name": "CustomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java.CustomFakerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": [{"original_string": "        class InsectFaker extends BaseFaker {\n            public InsectFaker(Locale locale) {\n                super(locale);\n            }\n\n            public Insect insect() {\n                return getProvider(Insect.class, Insect::new);\n            }\n        }", "definition": "        class InsectFaker extends BaseFaker", "class_docstring": "", "name": "InsectFaker", "super_interfaces": [], "superclasses": "BaseFaker", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "            public InsectFaker(Locale locale) {\n                super(locale);\n            }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "InsectFaker", "params": [{"name": "locale", "type": "Locale"}], "body": "                                              {\n                super(locale);\n            }", "signature": "public InsectFaker(Locale locale)"}, {"syntax_pass": true, "original_string": "            public Insect insect() {\n                return getProvider(Insect.class, Insect::new);\n            }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Insect", "classes": []}, "name": "insect", "params": [], "body": "                                   {\n                return getProvider(Insect.class, Insect::new);\n            }", "signature": "public Insect insect()"}]}]}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldHaveNinePlanets()", "name": "shouldHaveNinePlanets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldHaveNinePlanets()", "original_string": "    @Test\n    void shouldHaveNinePlanets() {\n        // PlanetName enum has 9 entries\n        assertThat(Planet.PlanetName.values()).hasSize(9);\n        // planet.yml has 9 names\n        assertThat(getBaseList(\"planet.name\")).hasSize(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectJupiterMetadata()", "name": "shouldReturnCorrectJupiterMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectJupiterMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectJupiterMetadata() {\n        String lengthOfDay = planet.lengthOfDay(JUPITER);\n        assertThat(lengthOfDay).isEqualTo(\"0d 9h 56m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(JUPITER);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"778,412,010 km\");\n\n        String equatorialGravity = planet.equatorialGravity(JUPITER);\n        assertThat(equatorialGravity).isEqualTo(\"24.79 m/s^2\");\n\n        String mass = planet.mass(JUPITER);\n        assertThat(mass).isEqualTo(\"1.8987\u00d710^27 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(JUPITER);\n        assertThat(equatorialRadius).isEqualTo(\"71,492 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectMarsMetadata()", "name": "shouldReturnCorrectMarsMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectMarsMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectMarsMetadata() {\n        String lengthOfDay = planet.lengthOfDay(MARS);\n        assertThat(lengthOfDay).isEqualTo(\"1d 0h 37m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(MARS);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"227,936,640 km\");\n\n        String equatorialGravity = planet.equatorialGravity(MARS);\n        assertThat(equatorialGravity).isEqualTo(\"3.71 m/s^2\");\n\n        String mass = planet.mass(MARS);\n        assertThat(mass).isEqualTo(\"6.4191\u00d710^23 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(MARS);\n        assertThat(equatorialRadius).isEqualTo(\"3,396.19 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectVenusMetadata()", "name": "shouldReturnCorrectVenusMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectVenusMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectVenusMetadata() {\n        String lengthOfDay = planet.lengthOfDay(VENUS);\n        assertThat(lengthOfDay).isEqualTo(\"243d 0h 0m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(VENUS);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"108,208,930 km\");\n\n        String equatorialGravity = planet.equatorialGravity(VENUS);\n        assertThat(equatorialGravity).isEqualTo(\"8.87 m/s^2\");\n\n        String mass = planet.mass(VENUS);\n        assertThat(mass).isEqualTo(\"4.8690\u00d710^24 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(VENUS);\n        assertThat(equatorialRadius).isEqualTo(\"6,051.8 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectUranusMetadata()", "name": "shouldReturnCorrectUranusMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectUranusMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectUranusMetadata() {\n        String lengthOfDay = planet.lengthOfDay(URANUS);\n        assertThat(lengthOfDay).isEqualTo(\"0d 17h 14m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(URANUS);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"2,870,972,200 km\");\n\n        String equatorialGravity = planet.equatorialGravity(URANUS);\n        assertThat(equatorialGravity).isEqualTo(\"8.87 m/s^2\");\n\n        String mass = planet.mass(URANUS);\n        assertThat(mass).isEqualTo(\"8.6849\u00d710^25 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(URANUS);\n        assertThat(equatorialRadius).isEqualTo(\"25,559 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectMercuryMetadata()", "name": "shouldReturnCorrectMercuryMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectMercuryMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectMercuryMetadata() {\n        String lengthOfDay = planet.lengthOfDay(MERCURY);\n        assertThat(lengthOfDay).isEqualTo(\"59d 0h 0m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(MERCURY);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"57,909,175 km\");\n\n        String equatorialGravity = planet.equatorialGravity(MERCURY);\n        assertThat(equatorialGravity).isEqualTo(\"3.70 m/s^2\");\n\n        String mass = planet.mass(MERCURY);\n        assertThat(mass).isEqualTo(\"3.302\u00d710^23 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(MERCURY);\n        assertThat(equatorialRadius).isEqualTo(\"2,440.53 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectNeptuneMetadata()", "name": "shouldReturnCorrectNeptuneMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectNeptuneMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectNeptuneMetadata() {\n        String lengthOfDay = planet.lengthOfDay(NEPTUNE);\n        assertThat(lengthOfDay).isEqualTo(\"0d 16h 6m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(NEPTUNE);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"4,498,252,900 km\");\n\n        String equatorialGravity = planet.equatorialGravity(NEPTUNE);\n        assertThat(equatorialGravity).isEqualTo(\"11.15 m/s^2\");\n\n        String mass = planet.mass(NEPTUNE);\n        assertThat(mass).isEqualTo(\"1.0244\u00d710^26 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(NEPTUNE);\n        assertThat(equatorialRadius).isEqualTo(\"24,764 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectEarthMetadata()", "name": "shouldReturnCorrectEarthMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectEarthMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectEarthMetadata() {\n        String lengthOfDay = planet.lengthOfDay(EARTH);\n        assertThat(lengthOfDay).isEqualTo(\"24h\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(EARTH);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"149,597,890 km\");\n\n        String equatorialGravity = planet.equatorialGravity(EARTH);\n        assertThat(equatorialGravity).isEqualTo(\"9.8 m/s^2\");\n\n        String mass = planet.mass(EARTH);\n        assertThat(mass).isEqualTo(\"5.972\u00d710^24 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(EARTH);\n        assertThat(equatorialRadius).isEqualTo(\"6,378.1366 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectSaturnMetadata()", "name": "shouldReturnCorrectSaturnMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectSaturnMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectSaturnMetadata() {\n        String lengthOfDay = planet.lengthOfDay(SATURN);\n        assertThat(lengthOfDay).isEqualTo(\"0d 10h 34m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(SATURN);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"1,426,725,400 km\");\n\n        String equatorialGravity = planet.equatorialGravity(SATURN);\n        assertThat(equatorialGravity).isEqualTo(\"10.44 m/s^2\");\n\n        String mass = planet.mass(SATURN);\n        assertThat(mass).isEqualTo(\"5.6851\u00d710^26 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(SATURN);\n        assertThat(equatorialRadius).isEqualTo(\"60,268 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[void]shouldReturnCorrectPlutoMetadata()", "name": "shouldReturnCorrectPlutoMetadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldReturnCorrectPlutoMetadata()", "original_string": "    @Test\n    void shouldReturnCorrectPlutoMetadata() {\n        String lengthOfDay = planet.lengthOfDay(PLUTO);\n        assertThat(lengthOfDay).isEqualTo(\"6d 9h 0m\");\n\n        String meanDistanceFromTheSun = planet.meanDistanceFromTheSun(PLUTO);\n        assertThat(meanDistanceFromTheSun).isEqualTo(\"5,906,380,000 km\");\n\n        String equatorialGravity = planet.equatorialGravity(PLUTO);\n        assertThat(equatorialGravity).isEqualTo(\"0.620 m/s^2\");\n\n        String mass = planet.mass(PLUTO);\n        assertThat(mass).isEqualTo(\"1.303x10^22 kg\");\n\n        String equatorialRadius = planet.equatorialRadius(PLUTO);\n        assertThat(equatorialRadius).isEqualTo(\"1,188.3 km\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_ipV6CidrTest.java.Internet_ipV6CidrTest.[void]testIpV6Cidr()", "name": "testIpV6Cidr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIpV6Cidr()", "original_string": "    @Test\n    public void testIpV6Cidr() {\n        Internet internet = new Internet(new BaseProviders() {\n            @Override\n            public RandomService random() {\n                return new RandomService() {\n                    @Override\n                    public int nextInt(int bound) {\n                        return 1; // Ensure predictable output for testing\n                    }\n                };\n            }\n\n            @Override\n            public Name name() {\n                return new Name() {\n                    @Override\n                    public String firstName() {\n                        return \"test\";\n                    }\n\n                    @Override\n                    public String lastName() {\n                        return \"user\";\n                    }\n                };\n            }\n\n            @Override\n            public String resolve(String key) {\n                return \"example.com\";\n            }\n\n            @Override\n            public FakerContext getContext() {\n                return new FakerContext() {\n                    @Override\n                    public java.util.Locale getLocale() {\n                        return java.util.Locale.getDefault();\n                    }\n                };\n            }\n        });\n\n        String result = internet.ipV6Cidr();\n        assertTrue(result.matches(\"([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}/\\\\d{1,3}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_ipV6CidrTest.java", "class_name": "Internet_ipV6CidrTest", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_ipV6CidrTest.java.Internet_ipV6CidrTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java.Locality_localeStringWithRandomTest.[void]testLocaleStringWithRandom()", "name": "testLocaleStringWithRandom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleStringWithRandom()", "original_string": "    @Test\n    public void testLocaleStringWithRandom() {\n        String locale = locality.localeStringWithRandom(random);\n        assertTrue(locality.allSupportedLocales().contains(locale));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java", "class_name": "Locality_localeStringWithRandomTest", "class_uri": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java.Locality_localeStringWithRandomTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Internet_uuidv7Test.java.Internet_uuidv7Test.[void]testUuidv7()", "name": "testUuidv7", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUuidv7()", "original_string": "    @Test\n    public void testUuidv7() {\n        // Given\n        BaseFaker faker = new BaseFaker();\n        Internet internet = new Internet(faker);\n        long timestamp = 1234567890L;\n        long randomBits1 = 9876543210L;\n        long randomBits2 = 1234567890L;\n\n        // When\n        String uuidv7 = internet.uuidv7();\n\n        // Then\n        assertNotNull(uuidv7);\n        UUID uuid = UUID.fromString(uuidv7);\n        assertEquals(7, uuid.version());\n        assertEquals(2, uuid.variant());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Internet_uuidv7Test.java", "class_name": "Internet_uuidv7Test", "class_uri": "src/test/java/net/datafaker/providers/base/Internet_uuidv7Test.java.Internet_uuidv7Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AppTest.java.AppTest.[void]testVersion()", "name": "testVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testVersion()", "original_string": "    @Test\n    void testVersion() {\n        assertThat(app.version()).matches(\"\\\\d\\\\.(?:\\\\d){1,2}(?:\\\\.\\\\d)?\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AppTest.java", "class_name": "AppTest", "class_uri": "src/test/java/net/datafaker/providers/base/AppTest.java.AppTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AppTest.java.AppTest.[void]testAuthor()", "name": "testAuthor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAuthor()", "original_string": "    @Test\n    void testAuthor() {\n        assertThat(app.author()).matches(\"(?:[\\\\w']+[-&,.]? ?){2,9}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AppTest.java", "class_name": "AppTest", "class_uri": "src/test/java/net/datafaker/providers/base/AppTest.java.AppTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest.[void]testHamletQuote()", "name": "testHamletQuote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHamletQuote()", "original_string": "    @Test\n    void testHamletQuote() {\n        assertThat(shakespeare.hamletQuote()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java", "class_name": "ShakespeareTest", "class_uri": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest.[void]testAsYouLikeItQuote()", "name": "testAsYouLikeItQuote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAsYouLikeItQuote()", "original_string": "    @Test\n    void testAsYouLikeItQuote() {\n        assertThat(shakespeare.asYouLikeItQuote()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java", "class_name": "ShakespeareTest", "class_uri": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest.[void]testKingRichardIIIQuote()", "name": "testKingRichardIIIQuote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testKingRichardIIIQuote()", "original_string": "    @Test\n    void testKingRichardIIIQuote() {\n        assertThat(shakespeare.kingRichardIIIQuote()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java", "class_name": "ShakespeareTest", "class_uri": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest.[void]testRomeoAndJulietQuote()", "name": "testRomeoAndJulietQuote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRomeoAndJulietQuote()", "original_string": "    @Test\n    void testRomeoAndJulietQuote() {\n        assertThat(shakespeare.romeoAndJulietQuote()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java", "class_name": "ShakespeareTest", "class_uri": "src/test/java/net/datafaker/providers/base/ShakespeareTest.java.ShakespeareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/TeaTest.java.TeaTest.[void]testVariety()", "name": "testVariety", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testVariety()", "original_string": "    @Test\n    void testVariety() {\n        assertThat(faker.tea().variety()).matches(\"^(?:[A-Z]['.\\\\-a-z]+[\\\\s-])*[A-Z]['.\\\\-a-z]+$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/TeaTest.java", "class_name": "TeaTest", "class_uri": "src/test/java/net/datafaker/providers/foods/TeaTest.java.TeaTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest.[void]measurement()", "name": "measurement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void measurement()", "original_string": "    @Test\n    void measurement() {\n        assertThat(food.measurement()).matches(\"([A-Za-z1-9/ ]+){2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java", "class_name": "HebrewFoodTest", "class_uri": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java.CoffeeTest.[void]notes()", "name": "notes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void notes()", "original_string": "    @Test\n    void notes() {\n        assertThat(faker.coffee().notes()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java", "class_name": "CoffeeTest", "class_uri": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java.CoffeeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java.CoffeeTest.[void]blendName()", "name": "blendName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void blendName()", "original_string": "    @Test\n    void blendName() {\n        assertThat(faker.coffee().blendName()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java", "class_name": "CoffeeTest", "class_uri": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java.CoffeeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/FoodTest.java.FoodTest.[void]measurement()", "name": "measurement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void measurement()", "original_string": "    @Test\n    void measurement() {\n        assertThat(faker.food().measurement()).matches(\"([A-Za-z1-9/ ]+){2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/FoodTest.java", "class_name": "FoodTest", "class_uri": "src/test/java/net/datafaker/providers/foods/FoodTest.java.FoodTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest.[void]battlegroundsScoreTest()", "name": "battlegroundsScoreTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void battlegroundsScoreTest()", "original_string": "    @Test\n    void battlegroundsScoreTest() {\n        int score = faker.hearthstone().battlegroundsScore();\n        assertThat(score).isBetween(0, 16000);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java", "class_name": "HearthstoneTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest.[void]standardRankTest()", "name": "standardRankTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void standardRankTest()", "original_string": "    @Test\n    void standardRankTest() {\n        String rank = faker.hearthstone().standardRank();\n        assertThat(rank).matches(\"[ A-Za-z0-9]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java", "class_name": "HearthstoneTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest.[void]wildRankTest()", "name": "wildRankTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void wildRankTest()", "original_string": "    @Test\n    void wildRankTest() {\n        String rank = faker.hearthstone().wildRank();\n        assertThat(rank).matches(\"[ A-Za-z0-9]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java", "class_name": "HearthstoneTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java.MinecraftTest.[void]testTileItemName()", "name": "testTileItemName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTileItemName()", "original_string": "    @Test\n    void testTileItemName() {\n        assertThat(faker.minecraft().tileItemName()).matches(\"([\\\\w()']+\\\\.?( )?){2,5}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java", "class_name": "MinecraftTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java.MinecraftTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java.Dota2Test.[void]dota2HeroQuote()", "name": "dota2HeroQuote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void dota2HeroQuote()", "original_string": "    @Test\n    void dota2HeroQuote() {\n        for (int i = 0; i < 5; i++) {\n            String randomHero = dota2.hero();\n\n            String snakeCasedRandomHero = randomHero.replace(\" \", \"_\").toLowerCase(Locale.ENGLISH);\n\n            String randomHeroQuote = dota2.heroQuote(snakeCasedRandomHero);\n\n            assertThat(randomHeroQuote).isNotEmpty();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java", "class_name": "Dota2Test", "class_uri": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java.Dota2Test", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/MedicalProcedureTest.java.MedicalProcedureTest.[void]testProcedureCodes()", "name": "testProcedureCodes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testProcedureCodes()", "original_string": "    @RepeatedTest(100)\n    void testProcedureCodes() {\n        // will use icd-10-pcs - https://regex101.com/library/nJ1wC4\n        String procedureCode = medicalProcedure.icd10();\n        assertThat(procedureCode).matches(\"^[a-hj-np-zA-HJ-NP-Z0-9]{7}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/MedicalProcedureTest.java", "class_name": "MedicalProcedureTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/MedicalProcedureTest.java.MedicalProcedureTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java.DiseaseTest.[void]testAnyDisease()", "name": "testAnyDisease", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testAnyDisease()", "original_string": "    @RepeatedTest(100)\n    void testAnyDisease() {\n        // when\n        String anyDisease = disease.anyDisease();\n\n        // then\n        assertThat(anyDisease).as(\"Any disease should use existing providers combined\")\n            .isNotBlank()\n            .isIn(allDiseases);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java", "class_name": "DiseaseTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java.DiseaseTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java.DiseaseTest.[void]testDiseaseCodes()", "name": "testDiseaseCodes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testDiseaseCodes()", "original_string": "    @RepeatedTest(100)\n    void testDiseaseCodes() {\n        String diseaseCode = disease.icd10();\n        assertThat(diseaseCode).matches(\"^[A-Z][0-9]{1,2}(\\\\.[0-9])?$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java", "class_name": "DiseaseTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java.DiseaseTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java.StarWarsTest.[void]callSign()", "name": "callSign", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void callSign()", "original_string": "    @Test\n    void callSign() {\n        assertThat(faker.starWars().callSign()).isNotEmpty().matches(\"\\\\w+\\\\s(Leader|\\\\d)$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java", "class_name": "StarWarsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java.StarWarsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java.StarWarsTest.[void]alternativeSpelling()", "name": "alternativeSpelling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void alternativeSpelling()", "original_string": "    @Test\n    void alternativeSpelling() {\n        assertThat(faker.starWars().alternateCharacterSpelling()).isNotEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java", "class_name": "StarWarsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java.StarWarsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/AvatarTest.java.AvatarTest.[void]testAvatar()", "name": "testAvatar", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testAvatar()", "original_string": "    @RepeatedTest(10)\n    void testAvatar() {\n        String avatar = getFaker().avatar().image();\n        assertThat(avatar).matches(\"^https://robohash.org/[a-z]{8}.png$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/AvatarTest.java", "class_name": "AvatarTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/AvatarTest.java.AvatarTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest.[void]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void actor()", "original_string": "    @RepeatedTest(100)\n    void actor() {\n        assertThat(oscarMovie.actor()).matches(\"\\\\P{Cc}+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java", "class_name": "OscarMovieTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest.[void]movieName()", "name": "movieName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void movieName()", "original_string": "    @RepeatedTest(10)\n    void movieName() {\n        assertThat(isNullOrEmpty(oscarMovie.movieName())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java", "class_name": "OscarMovieTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest.[void]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void quote()", "original_string": "    @RepeatedTest(10)\n    void quote() {\n        assertThat(isNullOrEmpty(oscarMovie.quote())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java", "class_name": "OscarMovieTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest.[void]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void character()", "original_string": "    @RepeatedTest(100)\n    void character() {\n        assertThat(oscarMovie.character()).matches(\"\\\\P{Cc}+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java", "class_name": "OscarMovieTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest.[void]releaseDate()", "name": "releaseDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void releaseDate()", "original_string": "    @RepeatedTest(100)\n    void releaseDate() {\n        assertThat(oscarMovie.releaseDate()).matches(\"[A-Za-z,0-9 ]+\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java", "class_name": "OscarMovieTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java.OscarMovieTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest.[void]testAllFakerMethodsThatReturnStrings(Locale,Random)", "name": "testAllFakerMethodsThatReturnStrings", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"dataParameters\")\n    void testAllFakerMethodsThatReturnStrings(Locale locale, Random random)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"dataParameters\")\n    void testAllFakerMethodsThatReturnStrings(Locale locale, Random random) throws Exception {\n        log.fine(() -> \"  (%s, %s)\".formatted(locale, random));\n        final Faker faker = init(locale, random);\n\n        Method[] methods = faker.getClass().getMethods();\n        for (Method provider : methods) {\n            if (AbstractProvider.class.isAssignableFrom(provider.getReturnType()) && provider.getParameterCount() == 0) {\n                log.fine(() -> \"    (%s), method: %s.%s()\".formatted(locale, provider.getDeclaringClass().getSimpleName(), provider.getName()));\n\n                AbstractProvider<?> providerImpl = (AbstractProvider<?>) provider.invoke(faker);\n                testAllMethodsThatReturnStringsActuallyReturnStrings(providerImpl);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "class_name": "FakerIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"dataParameters\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"dataParameters\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest.[void]testExceptionsNotCoveredInAboveTest(Locale,Random)", "name": "testExceptionsNotCoveredInAboveTest", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"dataParameters\")\n    void testExceptionsNotCoveredInAboveTest(Locale locale, Random random)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"dataParameters\")\n    void testExceptionsNotCoveredInAboveTest(Locale locale, Random random) {\n        final BaseFaker faker = init(locale, random);\n        assertThat(faker.bothify(\"####???\")).isNotNull();\n        assertThat(faker.letterify(\"????\")).isNotNull();\n        assertThat(faker.numerify(\"####\")).isNotNull();\n\n        assertThat(faker.lorem().paragraph(1)).isNotNull();\n        assertThat(faker.lorem().paragraphs(1)).isNotNull();\n\n        assertThat(faker.lorem().sentence(1)).isNotNull();\n        assertThat(faker.lorem().sentences(1)).isNotNull();\n\n        assertThat(faker.address().streetAddress()).isNotNull();\n\n        assertThat(faker.lorem().words()).isNotNull();\n        assertThat(faker.lorem().words(1)).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "class_name": "FakerIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"dataParameters\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"dataParameters\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/UkLocalDirectivesTest.java.UkLocalDirectivesTest.[void]resolvesDirectivesOnlyInYmlFile()", "name": "resolvesDirectivesOnlyInYmlFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolvesDirectivesOnlyInYmlFile()", "original_string": "    @Test\n    void resolvesDirectivesOnlyInYmlFile() {\n        final Locale uk = new Locale(\"uk\");\n\n        final String streetName = new BaseFaker(uk).address().streetName();\n\n        final List<String> masc = List.of(\"\u043f\u0440.\", \"\u043f\u0440\u043e\u0441\u043f\u0435\u043a\u0442\", \"\u043f\u0440\u043e\u0432.\", \"\u043f\u0440\u043e\u0432\u0443\u043b\u043e\u043a\");\n        final List<String> fem = List.of(\"\u0432\u0443\u043b.\", \"\u0432\u0443\u043b\u0438\u0446\u044f\", \"\u043f\u043b.\", \"\u043f\u043b\u043e\u0449\u0430\");\n\n        boolean startsWithMascPrefix = false;\n        boolean startsWithFemPrefix = false;\n\n        for (String mascPrefix : masc) {\n            startsWithMascPrefix |= streetName.startsWith(mascPrefix);\n        }\n        for (String femPrefix : fem) {\n            startsWithFemPrefix |= streetName.startsWith(femPrefix);\n        }\n\n        assertThat(startsWithFemPrefix || startsWithMascPrefix)\n            .as(\"the streetname starts with a fem or masc prefix\")\n            .isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/UkLocalDirectivesTest.java", "class_name": "UkLocalDirectivesTest", "class_uri": "src/test/java/net/datafaker/integration/UkLocalDirectivesTest.java.UkLocalDirectivesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nuk is interesting in that it has feminine and masculine prefixes for street names.  the feminine\nand masculine prefixes are NOT methods on Address though as they only make sense for this locale (and possibly\nothers).  This test shows we can resolve within the yml file without reaching out to any of the {@link BaseFaker}\nchild objects.\n"}, {"uris": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java.FakerRepeatabilityIntegrationTest.[void]shouldCreateRepeatableValues()", "name": "shouldCreateRepeatableValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldCreateRepeatableValues()", "original_string": "    @Test\n    void shouldCreateRepeatableValues() throws InvocationTargetException, IllegalAccessException {\n\n        Faker faker1 = new Faker(new Random(0));\n        Faker faker2 = new Faker(new Random(0));\n\n        Map<String, String> report1 = buildReport(faker1);\n        Map<String, String> report2 = buildReport(faker2);\n\n        for (var entry1: report1.entrySet()) {\n            assertThat(report2).containsEntry(entry1.getKey(), entry1.getValue());\n        }\n\n        for (var entry2: report2.entrySet()) {\n            assertThat(report1).containsEntry(entry2.getKey(), entry2.getValue());\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java", "class_name": "FakerRepeatabilityIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java.FakerRepeatabilityIntegrationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java.FakerRepeatabilityIntegrationTest.[void]shouldCreateUniqueValues()", "name": "shouldCreateUniqueValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldCreateUniqueValues()", "original_string": "    @Test\n    void shouldCreateUniqueValues() throws InvocationTargetException, IllegalAccessException {\n        Faker faker1 = new Faker();\n        Faker faker2 = new Faker();\n\n        Map<String, String> report1 = buildReport(faker1);\n        Map<String, String> report2 = buildReport(faker2);\n\n        MapDifference<String, String> difference = Maps.difference(report1, report2);\n\n        assertThat(difference.entriesDiffering()).hasSizeGreaterThan(difference.entriesInCommon().size());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java", "class_name": "FakerRepeatabilityIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java.FakerRepeatabilityIntegrationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java.MostSpecificLocaleTest.[void]resolvesTheMostSpecificLocale()", "name": "resolvesTheMostSpecificLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolvesTheMostSpecificLocale()", "original_string": "    @Test\n    void resolvesTheMostSpecificLocale() {\n        List<String> enDefaultCountries = fakeValuesService(en).fetchObject(\"address.default_country\", en);\n        List<String> enUsDefaultCountries = fakeValuesService(en_US).fetchObject(\"address.default_country\", en_US);\n\n        assertThat(enDefaultCountries).hasSize(1);\n        assertThat(enUsDefaultCountries).hasSize(3);\n\n        assertThat(enDefaultCountries).as(\"the default country for en is not en_US\").isNotEqualTo(enUsDefaultCountries);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java", "class_name": "MostSpecificLocaleTest", "class_uri": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java.MostSpecificLocaleTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java.Issue194SlashFormatRegexTest.[void]enGBZipCodeReturnsProperRegexifiedValue()", "name": "enGBZipCodeReturnsProperRegexifiedValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void enGBZipCodeReturnsProperRegexifiedValue()", "original_string": "    @Test\n    void enGBZipCodeReturnsProperRegexifiedValue() {\n        final Locale uk = new Locale(\"en\", \"GB\");\n\n        final String postalCode = new BaseFaker(uk).address().zipCode();\n\n        assertThat(postalCode).matches(\"[A-PR-UWYZ]([A-HK-Y][0-9][ABEHMNPRVWXY0-9]?|[0-9][ABCDEFGHJKPSTUW0-9]?) [0-9][ABD-HJLNP-UW-Z]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java", "class_name": "Issue194SlashFormatRegexTest", "class_uri": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java.Issue194SlashFormatRegexTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java.Issue194SlashFormatRegexTest.[void]enCAZipCodeReturnsProperRegexifiedValue()", "name": "enCAZipCodeReturnsProperRegexifiedValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void enCAZipCodeReturnsProperRegexifiedValue()", "original_string": "    @Test\n    void enCAZipCodeReturnsProperRegexifiedValue() {\n        final Locale uk = new Locale(\"en\", \"CA\");\n\n        final String postalCode = new BaseFaker(uk).address().zipCode();\n\n        assertThat(postalCode).matches(\"[A-CEJ-NPR-TVXY][0-9][A-CEJ-NPR-TV-Z] ?[0-9][A-CEJ-NPR-TV-Z][0-9]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java", "class_name": "Issue194SlashFormatRegexTest", "class_uri": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java.Issue194SlashFormatRegexTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java.Issue194SlashFormatRegexTest.[void]viZipCodeReturnsProperRegexifiedValue()", "name": "viZipCodeReturnsProperRegexifiedValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void viZipCodeReturnsProperRegexifiedValue()", "original_string": "    @Test\n    void viZipCodeReturnsProperRegexifiedValue() {\n        final Locale uk = new Locale(\"vi\");\n\n        final String postalCode = new BaseFaker(uk).address().zipCode();\n\n        assertThat(postalCode).matches(\"[A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java", "class_name": "Issue194SlashFormatRegexTest", "class_uri": "src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java.Issue194SlashFormatRegexTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]csvTestNew()", "name": "csvTestNew", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void csvTestNew()", "original_string": "    @Test\n    void csvTestNew() {\n        final BaseFaker faker = new BaseFaker();\n        String separator = \"@@@\";\n        int limit = 20;\n        Schema<String, String> schema =\n            Schema.of(\n                field(\"first_name\", () -> faker.name().firstName()),\n                field(\"last_name\", () -> faker.name().lastName()),\n                field(\"address\", () -> faker.address().streetAddress()));\n        CsvTransformer<String> transformer =\n            CsvTransformer.<String>builder().header(true).separator(separator).build();\n\n        String csv = transformer.generate(schema, limit);\n        int numberOfLines = 0;\n        int numberOfSeparator = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            } else if (csv.regionMatches(i, separator, 0, separator.length())) {\n                numberOfSeparator++;\n            }\n        }\n\n        assertThat(limit).isEqualTo(numberOfLines);\n        assertThat((limit + 1) * 2)\n            .isEqualTo(numberOfSeparator); // number of lines * (number of columns - 1)*/\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]csvTestWithQuotesNew()", "name": "csvTestWithQuotesNew", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void csvTestWithQuotesNew()", "original_string": "    @Test\n    void csvTestWithQuotesNew() {\n        String separator = \"$$$\";\n        int limit = 20;\n        final BaseFaker faker = new BaseFaker();\n        Schema<String, String> schema =\n            Schema.of(\n                field(\"first_name\", () -> faker.expression(\"#{Name.first_name}\")),\n                field(\"last_name\", () -> faker.expression(\"#{Name.last_name}\")));\n        CsvTransformer<String> transformer =\n            CsvTransformer.<String>builder().header(true).separator(separator).build();\n\n        String csv = transformer.generate(schema, limit);\n        int numberOfLines = 0;\n        int numberOfSeparator = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            } else if (csv.regionMatches(i, separator, 0, separator.length())) {\n                numberOfSeparator++;\n            }\n        }\n\n        assertThat(limit).isEqualTo(numberOfLines);\n        assertThat((limit + 1) * (schema.getFields().length - 1))\n            .isEqualTo(numberOfSeparator); // number of lines * (number of columns - 1)\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testCsvWithCommaNew()", "name": "testCsvWithCommaNew", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCsvWithCommaNew()", "original_string": "    @Test\n    void testCsvWithCommaNew() {\n        Schema<Object, ? extends CharSequence> schema =\n            Schema.of(field(\"values\", () -> \"1,2,3\"), field(\"title\", () -> \"The \\\"fabulous\\\" artist\"));\n        CsvTransformer<Object> transformer =\n            CsvTransformer.builder().header(true).separator(\",\").build();\n\n        String csv = transformer.generate(schema, 1);\n\n        String expected =\n            \"\\\"values\\\",\\\"title\\\"\" + LINE_SEPARATOR\n                + \"\\\"1,2,3\\\",\\\"The \\\"\\\"fabulous\\\"\\\" artist\\\"\";\n\n        assertThat(csv).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testCsvWithDifferentObjects()", "name": "testCsvWithDifferentObjects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCsvWithDifferentObjects()", "original_string": "    @Test\n    void testCsvWithDifferentObjects() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Object, ?> schema = Schema.of(\n            field(\"Number\", () -> faker.number().randomDigit()),\n            field(\"Bool\", () -> faker.bool().bool()),\n            field(\"String\", () -> faker.name().firstName()),\n            field(\"Text\", () -> \"The, \\\"fabulous\\\" artist'\")\n        );\n        CsvTransformer<Object> transformer =\n            CsvTransformer.builder().header(true).separator(\",\").build();\n\n        String csv = transformer.generate(schema, 4);\n\n        String expected =\n            \"\\\"Number\\\",\\\"Bool\\\",\\\"String\\\",\\\"Text\\\"\" + LINE_SEPARATOR\n                + \"3,false,\\\"Flor\\\",\\\"The, \\\"\\\"fabulous\\\"\\\" artist'\\\"\" + LINE_SEPARATOR\n                + \"6,true,\\\"Stephnie\\\",\\\"The, \\\"\\\"fabulous\\\"\\\" artist'\\\"\" + LINE_SEPARATOR\n                + \"1,false,\\\"Edythe\\\",\\\"The, \\\"\\\"fabulous\\\"\\\" artist'\\\"\" + LINE_SEPARATOR\n                + \"1,true,\\\"Dwight\\\",\\\"The, \\\"\\\"fabulous\\\"\\\" artist'\\\"\";\n\n        assertThat(csv).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testCsvWithDifferentObjectsFunction()", "name": "testCsvWithDifferentObjectsFunction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCsvWithDifferentObjectsFunction()", "original_string": "    @Test\n    void testCsvWithDifferentObjectsFunction() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n        CsvTransformer<Integer> transformer =\n            CsvTransformer.<Integer>builder().header(true).separator(\",\").build();\n\n        FakeSequence<Integer> fakeSequence = faker.<Integer>collection()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(5)\n            .build();\n        String csv = transformer.generate(fakeSequence, schema);\n\n        String expected =\n            \"\\\"Number\\\",\\\"Password\\\"\" + LINE_SEPARATOR\n                + \"3,\\\"nf3\\\"\" + LINE_SEPARATOR\n                + \"6,\\\"4b0v69\\\"\" + LINE_SEPARATOR\n                + \"7,\\\"00827v2\\\"\" + LINE_SEPARATOR\n                + \"1,\\\"5\\\"\" + LINE_SEPARATOR\n                + \"3,\\\"p6x\\\"\";\n\n        assertThat(csv).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testCsvWithDifferentObjectsFunctionStream()", "name": "testCsvWithDifferentObjectsFunctionStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCsvWithDifferentObjectsFunctionStream()", "original_string": "    @Test\n    void testCsvWithDifferentObjectsFunctionStream() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n        CsvTransformer<Integer> transformer =\n            CsvTransformer.<Integer>builder().header(true).separator(\",\").build();\n\n        FakeSequence<Integer> fakeSequence = faker.<Integer>stream()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(3)\n            .build();\n\n        String csv = transformer.generate(fakeSequence, schema);\n\n        String expected =\n            \"\\\"Number\\\",\\\"Password\\\"\" + LINE_SEPARATOR\n                + \"3,\\\"0p4\\\"\" + LINE_SEPARATOR\n                + \"8,\\\"714487nf\\\"\" + LINE_SEPARATOR\n                + \"5,\\\"0v691\\\"\";\n\n        assertThat(csv).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testCsvWithInfiniteSequence()", "name": "testCsvWithInfiniteSequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCsvWithInfiniteSequence()", "original_string": "    @Test\n    void testCsvWithInfiniteSequence() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> faker.number().digits(integer)),\n            field(\"String\", prefix -> prefix + \": \" + faker.name().firstName())\n        );\n        CsvTransformer<Integer> transformer =\n            CsvTransformer.<Integer>builder().header(true).separator(\",\").build();\n\n        FakeSequence<Integer> fakeSequence = faker.<Integer>stream()\n            .suppliers(() -> faker.number().randomDigit())\n            .build();\n        assertThatThrownBy(() -> transformer.generate(fakeSequence, schema))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"The sequence should be finite of size: FakeStream{minLength=-1, maxLength=-1, nullRate=0.0}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testLimitForCsv(int)", "name": "testLimitForCsv", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCsv(int limit)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCsv(int limit) {\n        final BaseFaker faker = new BaseFaker();\n        String csv = CsvTransformer.<Name>builder().separator(\" : \").header(false).build()\n            .generate(faker.<Name>collection().suppliers(faker::name).maxLen(limit + 1).build(),\n                Schema.of(field(\"firstName\", Name::firstName), field(\"lastname\", Name::lastName)));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(numberOfLines).isEqualTo(limit);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {0, 2, 3, 10, 20, 100})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testLimitForCsvNew(int)", "name": "testLimitForCsvNew", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCsvNew(int limit)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCsvNew(int limit) {\n        final BaseFaker faker = new BaseFaker();\n        Schema<Name, String> schema =\n            Schema.of(field(\"firstName\", Name::firstName), field(\"lastname\", Name::lastName));\n\n        CsvTransformer<Name> transformer =\n            CsvTransformer.<Name>builder().header(false).separator(\",\").build();\n        String csv =\n            transformer.generate(\n                faker.<Name>collection().suppliers(faker::name).maxLen(limit + 1).build(),\n                schema);\n\n        int numberOfLines = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(numberOfLines).isEqualTo(limit);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {0, 2, 3, 10, 20, 100})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testLimitForCollection(int)", "name": "testLimitForCollection", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20})\n    void testLimitForCollection(int limit)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20})\n    void testLimitForCollection(int limit) {\n        final BaseFaker faker = new BaseFaker();\n        String csv = CsvTransformer.<Name>builder().header(false).build()\n            .generate(faker.<Name>collection().suppliers(faker::name).maxLen(limit).build(),\n                Schema.of(field(\"firstName\", Name::firstName), field(\"lastName\", Name::lastName)));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(numberOfLines == 0 ? 0 : numberOfLines + 1).isEqualTo(limit);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {0, 2, 3, 10, 20})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testLimitForCollectionNew(int)", "name": "testLimitForCollectionNew", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCollectionNew(int limit)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})\n    void testLimitForCollectionNew(int limit) {\n        final BaseFaker faker = new BaseFaker();\n        Schema<Name, String> schema =\n            Schema.of(field(\"firstName\", Name::firstName), field(\"lastname\", Name::lastName));\n\n        CsvTransformer<Name> transformer =\n            CsvTransformer.<Name>builder().header(false).separator(\" : \").build();\n        String csv =\n            transformer.generate(\n                faker.<Name>collection().suppliers(faker::name).maxLen(limit + 1).build(),\n                schema);\n\n        int numberOfLines = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(numberOfLines).isEqualTo(limit);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {0, 2, 3, 10, 20, 100})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {0, 2, 3, 10, 20, 100})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testInfiniteCsv()", "name": "testInfiniteCsv", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testInfiniteCsv()", "original_string": "    @Test\n    void testInfiniteCsv() {\n        final BaseFaker faker = new BaseFaker();\n        FakeSequence<Name> infiniteSequence = faker.<Name>stream()\n            .suppliers(faker::name)\n            .build();\n\n        assertThatThrownBy(() ->\n            CsvTransformer.<Name>builder().separator(\" : \").header(false).build()\n                .generate(infiniteSequence,\n                    Schema.of(field(\"firstName\", Name::firstName), field(\"lastName\", Name::lastName)))\n        ).isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"The sequence should be finite of size: FakeStream{minLength=-1, maxLength=-1, nullRate=0.0}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]testInfiniteCsvWithLimit()", "name": "testInfiniteCsvWithLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testInfiniteCsvWithLimit()", "original_string": "    @Test\n    void testInfiniteCsvWithLimit() {\n        int limit = 10;\n        final BaseFaker faker = new BaseFaker();\n        FakeSequence<Name> infiniteSequence = faker.<Name>stream()\n            .suppliers(faker::name)\n            .len(limit)\n            .build();\n\n        String csv = CsvTransformer.<Name>builder().header(false).separator(\" : \").build()\n            .generate(infiniteSequence,\n                Schema.of(\n                    field(\"firstName\", Name::firstName),\n                    field(\"lastName\", Name::lastName)));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < csv.length(); i++) {\n            if (csv.regionMatches(i, LINE_SEPARATOR, 0, LINE_SEPARATOR.length())) {\n                numberOfLines++;\n            }\n        }\n\n        assertThat(numberOfLines + 1).isEqualTo(limit);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest.[void]supplierShouldBeDefinedInCaseOfNullInput()", "name": "supplierShouldBeDefinedInCaseOfNullInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void supplierShouldBeDefinedInCaseOfNullInput()", "original_string": "    @Test\n    void supplierShouldBeDefinedInCaseOfNullInput() {\n        Schema<Name, String> schema =\n            Schema.of(field(\"firstName\", Name::firstName), field(\"lastname\", Name::lastName));\n        assertThatThrownBy(() ->\n            CsvTransformer.<Name>builder()\n                .header(false).separator(\" : \")\n                .build()\n                .generate(schema, 1))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessageContaining(\"Input could be null only if suppliers are defined\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/CsvTest.java", "class_name": "CsvTest", "class_uri": "src/test/java/net/datafaker/formats/CsvTest.java.CsvTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]testJsonStream()", "name": "testJsonStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testJsonStream()", "original_string": "    @Test\n    void testJsonStream() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Object, ?> schema = Schema.of(\n            field(\"Text\", () -> faker.name().firstName()),\n            field(\"Bool\", () -> faker.bool().bool())\n        );\n\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Stream<CharSequence> json = transformer.generateStream(schema, 10);\n        String output = json.collect(Collectors.joining(LINE_SEPARATOR));\n        assertThat(output).isEqualTo(\"[\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Willis\\\", \\\"Bool\\\": false},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Carlena\\\", \\\"Bool\\\": true},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Stephnie\\\", \\\"Bool\\\": true},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Rutha\\\", \\\"Bool\\\": true},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Armand\\\", \\\"Bool\\\": true},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Margot\\\", \\\"Bool\\\": false},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Patrick\\\", \\\"Bool\\\": false},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Alphonse\\\", \\\"Bool\\\": false},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Louisa\\\", \\\"Bool\\\": true},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Caryn\\\", \\\"Bool\\\": false}\" + LINE_SEPARATOR +\n            \"]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]testGenerateFromSchemaWithLimit()", "name": "testGenerateFromSchemaWithLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromSchemaWithLimit()", "original_string": "    @Test\n    void testGenerateFromSchemaWithLimit() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Object, ?> schema = Schema.of(\n            field(\"Text\", () -> faker.name().firstName()),\n            field(\"Bool\", () -> faker.bool().bool())\n        );\n\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        String json = transformer.generate(schema, 2);\n        String expected = \"[\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Willis\\\", \\\"Bool\\\": false},\" + LINE_SEPARATOR +\n            \"{\\\"Text\\\": \\\"Carlena\\\", \\\"Bool\\\": true}\" + LINE_SEPARATOR +\n            \"]\";\n\n        assertThat(json).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]testGenerateFromFakeSequenceCollectionWithoutComma()", "name": "testGenerateFromFakeSequenceCollectionWithoutComma", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromFakeSequenceCollectionWithoutComma()", "original_string": "    @Test\n    void testGenerateFromFakeSequenceCollectionWithoutComma() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        JsonTransformer<Integer> transformer = JsonTransformer.<Integer>builder().withCommaBetweenObjects(false).build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>collection()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(5)\n            .build();\n\n        String json = transformer.generate(fakeSequence, schema);\n\n        String expected = \"[\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 3, \\\"Password\\\": \\\"nf3\\\"}\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 6, \\\"Password\\\": \\\"4b0v69\\\"}\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 7, \\\"Password\\\": \\\"00827v2\\\"}\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 1, \\\"Password\\\": \\\"5\\\"}\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 3, \\\"Password\\\": \\\"p6x\\\"}\" + LINE_SEPARATOR +\n            \"]\";\n\n        assertThat(json).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]testGenerateFromFakeSequenceCollection()", "name": "testGenerateFromFakeSequenceCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromFakeSequenceCollection()", "original_string": "    @Test\n    void testGenerateFromFakeSequenceCollection() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        JsonTransformer<Integer> transformer = JsonTransformer.<Integer>builder().build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>collection()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(5)\n            .build();\n\n        String json = transformer.generate(fakeSequence, schema);\n\n        String expected = \"[\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 3, \\\"Password\\\": \\\"nf3\\\"},\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 6, \\\"Password\\\": \\\"4b0v69\\\"},\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 7, \\\"Password\\\": \\\"00827v2\\\"},\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 1, \\\"Password\\\": \\\"5\\\"},\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 3, \\\"Password\\\": \\\"p6x\\\"}\" + LINE_SEPARATOR +\n            \"]\";\n\n        assertThat(json).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]testGenerateFromFakeSequenceStream()", "name": "testGenerateFromFakeSequenceStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromFakeSequenceStream()", "original_string": "    @Test\n    void testGenerateFromFakeSequenceStream() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        JsonTransformer<Integer> transformer = JsonTransformer.<Integer>builder().withCommaBetweenObjects(false).build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>stream()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(2)\n            .build();\n\n        String json = transformer.generate(fakeSequence, schema);\n\n        String expected = \"[\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 3, \\\"Password\\\": \\\"0p4\\\"}\" + LINE_SEPARATOR +\n            \"{\\\"Number\\\": 8, \\\"Password\\\": \\\"714487nf\\\"}\" + LINE_SEPARATOR +\n            \"]\";\n\n        assertThat(json).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]testGenerateFromInfiniteFakeSequence()", "name": "testGenerateFromInfiniteFakeSequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromInfiniteFakeSequence()", "original_string": "    @Test\n    void testGenerateFromInfiniteFakeSequence() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        JsonTransformer<Integer> transformer = JsonTransformer.<Integer>builder().build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>stream()\n            .suppliers(() -> faker.number().randomDigit())\n            .build();\n\n        assertThatThrownBy(() -> transformer.generate(fakeSequence, schema))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"The sequence should be finite of size: FakeStream{minLength=-1, maxLength=-1, nullRate=0.0}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]simpleJsonTestForJsonTransformer(Schema<String, String>,String)", "name": "simpleJsonTestForJsonTransformer", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void simpleJsonTestForJsonTransformer(Schema<String, String> schema, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void simpleJsonTestForJsonTransformer(Schema<String, String> schema, String expected) {\n        JsonTransformer<String> transformer = JsonTransformer.<String>builder().build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchema\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]outputArrayJsonTestForJsonTransformer(Schema<String, String>,String)", "name": "outputArrayJsonTestForJsonTransformer", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void outputArrayJsonTestForJsonTransformer(\n        Schema<String, String> schema, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void outputArrayJsonTestForJsonTransformer(\n        Schema<String, String> schema, String expected) {\n        JsonTransformer<String> transformer = JsonTransformer.<String>builder().build();\n\n        assertThat(transformer.generate(schema, 2).replaceAll(System.lineSeparator(), \"\"))\n            .isEqualTo(\"[\" + expected + \",\" + expected + \"]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchema\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]outputWithoutCommaForJsonTransformer(Schema<String, String>,String)", "name": "outputWithoutCommaForJsonTransformer", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void outputWithoutCommaForJsonTransformer(\n        Schema<String, String> schema, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void outputWithoutCommaForJsonTransformer(\n        Schema<String, String> schema, String expected) {\n        JsonTransformer<String> transformer = JsonTransformer.<String>builder().withCommaBetweenObjects(false).build();\n\n        assertThat(transformer.generate(schema, 2).replaceAll(System.lineSeparator(), \"\"))\n            .isEqualTo(\"[\" + expected + expected + \"]\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchema\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]jsonWithDifferentFieldFormatsInOneObjectTest()", "name": "jsonWithDifferentFieldFormatsInOneObjectTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void jsonWithDifferentFieldFormatsInOneObjectTest()", "original_string": "    @Test\n    void jsonWithDifferentFieldFormatsInOneObjectTest() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        final int limit = 2;\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n\n        String json = transformer.generate(\n            faker.collection().minLen(limit).maxLen(limit)\n                .suppliers(faker::name)\n                .build(), Schema.<Object, Object>of(\n                field(\"text\", () -> faker.name().firstName()),\n                field(\"array\", () ->\n                    faker\n                        .collection()\n                        .suppliers(() -> faker.phoneNumber().phoneNumber())\n                        .maxLen(3)\n                        .generate()\n                )\n            ));\n\n        int numberOfLines = 0;\n        for (int i = 0; i < json.length(); i++) {\n            if (json.regionMatches(i, \"},\", 0, \"},\".length())) {\n                numberOfLines++;\n            }\n        }\n        assertThat(numberOfLines).isEqualTo(limit - 1);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]jsonObjectCollectionTest()", "name": "jsonObjectCollectionTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void jsonObjectCollectionTest()", "original_string": "    @Test\n    void jsonObjectCollectionTest() {\n        JsonTransformer<Name> transformer = JsonTransformer.<Name>builder().build();\n\n        String json = transformer.generate(\n            Schema.of(\n                field(\"text\", () -> \"Mrs. Brian Braun\"),\n                field(\"objectCollection\", () -> List.of(\n                        compositeField(null, new Field[]{\n                                field(\"country\", () -> \"Denmark\"),\n                                field(\"city\", () -> \"Port Angel\")\n                            }\n                        ),\n                        compositeField(null, new Field[]{\n                                field(\"two\", () -> \"Denmark\"),\n                                field(\"one\", () -> \"Port Angel\")\n                            }\n                        )\n                    )\n                )\n            ), 1);\n        assertThat(json).isEqualTo(\"{\\\"text\\\": \\\"Mrs. Brian Braun\\\", \" +\n            \"\\\"objectCollection\\\": [{\\\"country\\\": \\\"Denmark\\\", \\\"city\\\": \\\"Port Angel\\\"}, {\\\"two\\\": \\\"Denmark\\\", \\\"one\\\": \\\"Port Angel\\\"}]}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[void]jsonCollectionOfCollectionsTest()", "name": "jsonCollectionOfCollectionsTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void jsonCollectionOfCollectionsTest()", "original_string": "    @Test\n    void jsonCollectionOfCollectionsTest() {\n        JsonTransformer<Name> transformer = JsonTransformer.<Name>builder().build();\n\n        String json = transformer.generate(\n            Schema.of(\n                field(\"text\", () -> \"Mrs. Brian Braun\"),\n                field(\"objectCollection\", () -> List.of(\n                        List.of(\n                            List.of(\n                                compositeField(null, new Field[]{\n                                        field(\"country\", () -> \"Denmark\"),\n                                        field(\"city\", () -> \"Port Angel\")\n                                    }\n                                ),\n                                compositeField(null, new Field[]{\n                                        field(\"two\", () -> \"Denmark\"),\n                                        field(\"one\", () -> \"Port Angel\")\n                                    }\n                                )\n                            )\n                        )\n                    )\n                )\n            ), 1);\n        assertThat(json).isEqualTo(\"{\\\"text\\\": \\\"Mrs. Brian Braun\\\", \" +\n            \"\\\"objectCollection\\\": [[[{\\\"country\\\": \\\"Denmark\\\", \\\"city\\\": \\\"Port Angel\\\"}, {\\\"two\\\": \\\"Denmark\\\", \\\"one\\\": \\\"Port Angel\\\"}]]]}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]generateFromFakeSequenceSeparated()", "name": "generateFromFakeSequenceSeparated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateFromFakeSequenceSeparated()", "original_string": "    @Test\n    void generateFromFakeSequenceSeparated() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        SqlTransformer<Integer> transformer = SqlTransformer.<Integer>builder().build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>collection()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(5)\n            .build();\n\n        String sql = transformer.generate(fakeSequence, schema);\n\n        String expected = \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\") VALUES (3, 'nf3');\" + LINE_SEPARATOR +\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\") VALUES (6, '4b0v69');\" + LINE_SEPARATOR +\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\") VALUES (7, '00827v2');\" + LINE_SEPARATOR +\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\") VALUES (1, '5');\" + LINE_SEPARATOR +\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\") VALUES (3, 'p6x');\";\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]generateFromFakeSequenceBatch()", "name": "generateFromFakeSequenceBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateFromFakeSequenceBatch()", "original_string": "    @Test\n    void generateFromFakeSequenceBatch() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        SqlTransformer<Integer> transformer = SqlTransformer.<Integer>builder()\n            .batch()\n            .build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>collection()\n            .suppliers(() -> faker.number().randomDigit())\n            .len(5)\n            .build();\n\n        String sql = transformer.generate(fakeSequence, schema);\n\n        String expected =\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\")\" + LINE_SEPARATOR +\n                \"VALUES (3, 'nf3'),\" + LINE_SEPARATOR +\n                \"       (6, '4b0v69'),\" + LINE_SEPARATOR +\n                \"       (7, '00827v2'),\" + LINE_SEPARATOR +\n                \"       (1, '5'),\" + LINE_SEPARATOR +\n                \"       (3, 'p6x');\";\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]generateFromEmptySchema()", "name": "generateFromEmptySchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateFromEmptySchema()", "original_string": "    @Test\n    void generateFromEmptySchema() {\n        BaseFaker faker = new BaseFaker();\n        Schema<Integer, Object> schema = Schema.of();\n\n        SqlTransformer<Integer> transformer = SqlTransformer.<Integer>builder()\n            .build();\n\n        FakeSequence<Integer> fakeSequence = faker.<Integer>stream()\n            .suppliers(() -> faker.number().randomDigit())\n            .build();\n\n        assertThat(transformer.generate(fakeSequence, schema)).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]generateFromInfiniteFakeSequenceBatch()", "name": "generateFromInfiniteFakeSequenceBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateFromInfiniteFakeSequenceBatch()", "original_string": "    @Test\n    void generateFromInfiniteFakeSequenceBatch() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", integer -> integer),\n            field(\"Password\", integer -> faker.internet().password(integer, integer))\n        );\n\n        SqlTransformer<Integer> transformer = SqlTransformer.<Integer>builder()\n            .batch()\n            .build();\n        FakeSequence<Integer> fakeSequence = faker.<Integer>stream()\n            .suppliers(() -> faker.number().randomDigit())\n            .build();\n\n        assertThatThrownBy(() -> transformer.generate(fakeSequence, schema))\n            .isInstanceOf(IllegalArgumentException.class)\n            .hasMessage(\"The sequence should be finite of size: FakeStream{minLength=-1, maxLength=-1, nullRate=0.0}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]testGenerateFromSchemaWithLimitSeparatedStatements()", "name": "testGenerateFromSchemaWithLimitSeparatedStatements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromSchemaWithLimitSeparatedStatements()", "original_string": "    @Test\n    void testGenerateFromSchemaWithLimitSeparatedStatements() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Object, ?> schema = Schema.of(\n            field(\"Text\", () -> faker.name().firstName()),\n            field(\"Bool\", () -> faker.bool().bool())\n        );\n\n        SqlTransformer<Object> transformer = SqlTransformer.builder().build();\n        String sql = transformer.generate(schema, 2);\n\n        String expected =\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Text\\\", \\\"Bool\\\") VALUES ('Willis', false);\" + LINE_SEPARATOR +\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Text\\\", \\\"Bool\\\") VALUES ('Carlena', true);\";\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]testGenerateFromSchemaWithLimitBatchModeStatements()", "name": "testGenerateFromSchemaWithLimitBatchModeStatements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGenerateFromSchemaWithLimitBatchModeStatements()", "original_string": "    @Test\n    void testGenerateFromSchemaWithLimitBatchModeStatements() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Object, ?> schema = Schema.of(\n            field(\"Text\", () -> faker.name().firstName()),\n            field(\"Bool\", () -> faker.bool().bool())\n        );\n\n        SqlTransformer<Object> transformer = SqlTransformer.builder()\n            .batch()\n            .build();\n        String sql = transformer.generate(schema, 2);\n\n        String expected =\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Text\\\", \\\"Bool\\\")\" + LINE_SEPARATOR +\n            \"VALUES ('Willis', false),\" + LINE_SEPARATOR +\n            \"       ('Carlena', true);\";\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]testForceQuotedWithSqlIdentifiers()", "name": "testForceQuotedWithSqlIdentifiers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testForceQuotedWithSqlIdentifiers()", "original_string": "    @Test\n    void testForceQuotedWithSqlIdentifiers() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Object, ?> schema = Schema.of(\n            field(\"TEXT\", () -> faker.name().firstName()),\n            field(\"BOOL\", () -> faker.bool().bool()));\n\n        SqlTransformer<Object> forceQuotedTransformer = SqlTransformer.builder()\n            .tableName(\"MY_TABLE\")\n            .forceUseSqlQuoteIdentifier()\n            .batch()\n            .build();\n        String sql = forceQuotedTransformer.generate(schema, 2);\n\n        String expected = \"INSERT INTO \\\"MY_TABLE\\\" (\\\"TEXT\\\", \\\"BOOL\\\")\" + LINE_SEPARATOR +\n            \"VALUES ('Willis', false),\" + LINE_SEPARATOR +\n            \"       ('Carlena', true);\";\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleSqlTestForSqlTransformer(Schema<String, String>,String,String)", "name": "simpleSqlTestForSqlTransformer", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void simpleSqlTestForSqlTransformer(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchema\")\n    void simpleSqlTestForSqlTransformer(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .sqlQuoteIdentifier(\"`\").schemaName(tableSchemaName).tableName(\"MY_TABLE\").build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchema\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchema\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleSqlTestForSqlTransformerOracle(Schema<String, String>,String,String)", "name": "simpleSqlTestForSqlTransformerOracle", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForOracle\")\n    void simpleSqlTestForSqlTransformerOracle(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForOracle\")\n    void simpleSqlTestForSqlTransformerOracle(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .schemaName(tableSchemaName).dialect(SqlDialect.ORACLE).build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForOracle\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForOracle\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleSqlTestForSqlTransformerPostgres(Schema<String, String>,String,String)", "name": "simpleSqlTestForSqlTransformerPostgres", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForPostgres\")\n    void simpleSqlTestForSqlTransformerPostgres(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForPostgres\")\n    void simpleSqlTestForSqlTransformerPostgres(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .schemaName(tableSchemaName).dialect(SqlDialect.POSTGRES).build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForPostgres\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForPostgres\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleSqlTestForSqlTransformerMSSQL(Schema<String, String>,String,String)", "name": "simpleSqlTestForSqlTransformerMSSQL", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForMSSQL\")\n    void simpleSqlTestForSqlTransformerMSSQL(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForMSSQL\")\n    void simpleSqlTestForSqlTransformerMSSQL(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .schemaName(tableSchemaName).dialect(SqlDialect.MSSQL).build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForMSSQL\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForMSSQL\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleSqlTestForSqlTransformerMySQL(Schema<String, String>,String,String)", "name": "simpleSqlTestForSqlTransformerMySQL", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForMySQL\")\n    void simpleSqlTestForSqlTransformerMySQL(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForMySQL\")\n    void simpleSqlTestForSqlTransformerMySQL(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .schemaName(tableSchemaName).dialect(SqlDialect.MYSQL).build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForMySQL\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForMySQL\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]batchSqlTestForSqlTransformerPostgres()", "name": "batchSqlTestForSqlTransformerPostgres", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batchSqlTestForSqlTransformerPostgres()", "original_string": "    @Test\n    void batchSqlTestForSqlTransformerPostgres() {\n        Faker faker = new Faker();\n        Schema<String, String> schema =\n            Schema.of(field(\"firstName\", () -> faker.name().firstName()),\n                field(\"lastName\", () -> faker.name().lastName()));\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .batch()\n                .dialect(SqlDialect.POSTGRES)\n                .build();\n        final int limit = 5;\n        String output = transformer.generate(schema, limit);\n        assertThat(output.split(LINE_SEPARATOR)).hasSize(limit + 1);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]sqlKeywordCaseCheck()", "name": "sqlKeywordCaseCheck", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void sqlKeywordCaseCheck()", "original_string": "    @Test\n    void sqlKeywordCaseCheck() {\n        Faker faker = new Faker();\n        Schema<String, String> schema =\n            Schema.of(field(\"firstName\", () -> faker.name().firstName()),\n                field(\"lastName\", () -> faker.name().lastName()));\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .keywordCase(SqlTransformer.Case.LOWERCASE)\n                .dialect(SqlDialect.POSTGRES).build();\n        final int limit = 1;\n        assertThat(transformer.generate(schema, limit))\n            .contains(\"insert into \")\n            .doesNotContain(\"INSERT INTO \")\n            .contains(\"values \")\n            .doesNotContain(\"VALUES\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]sqlKeywordCapitalCaseCheck()", "name": "sqlKeywordCapitalCaseCheck", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void sqlKeywordCapitalCaseCheck()", "original_string": "    @Test\n    void sqlKeywordCapitalCaseCheck() {\n        Faker faker = new Faker();\n        Schema<String, String> schema =\n            Schema.of(field(\"firstName\", () -> faker.name().firstName()),\n                field(\"lastName\", () -> faker.name().lastName()));\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .keywordCase(SqlTransformer.Case.CAPITAL)\n                .dialect(SqlDialect.POSTGRES).build();\n        final int limit = 1;\n        assertThat(transformer.generate(schema, limit))\n            .contains(\"Insert Into \")\n            .doesNotContain(\"INSERT INTO \")\n            .doesNotContain(\"insert into\")\n            .contains(\"Values \")\n            .doesNotContain(\"VALUES\")\n            .doesNotContain(\"values\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]batchSqlTestForSqlTransformerOracle()", "name": "batchSqlTestForSqlTransformerOracle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batchSqlTestForSqlTransformerOracle()", "original_string": "    @Test\n    void batchSqlTestForSqlTransformerOracle() {\n        Faker faker = new Faker();\n        Schema<String, String> schema =\n            Schema.of(field(\"firstName\", () -> faker.name().firstName()),\n                field(\"lastName\", () -> faker.name().lastName()));\n        SqlTransformer<String> transformerUpper =\n            SqlTransformer.<String>builder()\n                .batch()\n                .dialect(SqlDialect.ORACLE).build();\n        final int limit = 5;\n        String output = transformerUpper.generate(schema, limit);\n        assertThat(output.split(LINE_SEPARATOR)).hasSize(limit + 2);\n        assertThat(output)\n            .contains(\"INSERT ALL\")\n            .contains(\"INTO\")\n            .doesNotContain(\"INSERT INTO\")\n            .contains(\"SELECT 1 FROM dual;\");\n        SqlTransformer<String> transformerLower =\n            SqlTransformer.<String>builder()\n                .batch()\n                .keywordCase(SqlTransformer.Case.LOWERCASE)\n                .dialect(SqlDialect.ORACLE).build();\n        output = transformerLower.generate(schema, limit);\n        assertThat(output.split(LINE_SEPARATOR)).hasSize(limit + 2);\n        assertThat(output)\n            .contains(\"insert all\")\n            .contains(\"into\")\n            .doesNotContain(\"insert into\")\n            .contains(\"select 1 from dual;\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]batchSizeSqlTestForSqlTransformerOracle()", "name": "batchSizeSqlTestForSqlTransformerOracle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batchSizeSqlTestForSqlTransformerOracle()", "original_string": "    @Test\n    void batchSizeSqlTestForSqlTransformerOracle() {\n        Faker faker = new Faker();\n        Schema<String, String> schema =\n            Schema.of(field(\"firstName\", () -> faker.name().firstName()),\n                field(\"lastName\", () -> faker.name().lastName()));\n        SqlTransformer<String> transformerUpper =\n            SqlTransformer.<String>builder()\n                .batch(2)\n                .dialect(SqlDialect.ORACLE).build();\n        final int limit = 5;\n        String output = transformerUpper.generate(schema, limit);\n        assertThat(output.split(\"INSERT ALL\")).hasSize(4);\n        assertThat(output.split(\"SELECT 1 FROM dual\")).hasSize(4);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]batchSizeSqlTestForSqlTransformerPostgres()", "name": "batchSizeSqlTestForSqlTransformerPostgres", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batchSizeSqlTestForSqlTransformerPostgres()", "original_string": "    @Test\n    void batchSizeSqlTestForSqlTransformerPostgres() {\n        Faker faker = new Faker();\n        Schema<String, String> schema =\n            Schema.of(field(\"firstName\", () -> faker.name().firstName()),\n                field(\"lastName\", () -> faker.name().lastName()));\n        SqlTransformer<String> transformerUpper =\n            SqlTransformer.<String>builder()\n                .batch(2)\n                .dialect(SqlDialect.POSTGRES).build();\n        final int limit = 5;\n        String output = transformerUpper.generate(schema, limit);\n        assertThat(output.split(\"INSERT INTO\")).hasSize(4);\n        assertThat(output.split(\"VALUES \")).hasSize(4);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]arrayAndMultisetSqlTestForSqlTransformerCalcite(Schema<String, String>,String,String)", "name": "arrayAndMultisetSqlTestForSqlTransformerCalcite", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForCalcite\")\n    void arrayAndMultisetSqlTestForSqlTransformerCalcite(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForCalcite\")\n    void arrayAndMultisetSqlTestForSqlTransformerCalcite(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .schemaName(tableSchemaName).dialect(SqlDialect.CALCITE).build();\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForCalcite\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForCalcite\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]batchTestForSqlTransformerSparkSql()", "name": "batchTestForSqlTransformerSparkSql", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void batchTestForSqlTransformerSparkSql()", "original_string": "    @Test\n    void batchTestForSqlTransformerSparkSql() {\n        int batchSize =  5;\n        int records = 20;\n        Faker faker = new Faker();\n\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .dialect(SqlDialect.SPARKSQL)\n                .batch(batchSize)\n                .build();\n\n        String generation =\n            transformer\n                .generate(\n                    Schema.of(\n                        field(\"name\", () -> faker.cat().name()),\n                        field(\"breed\", () -> faker.cat().breed())\n                    ), records\n                );\n\n        assertThat(generation.split(\"INSERT INTO\")).hasSize((records / batchSize) + 1);\n        assertThat(generation.split(\"VALUES\")).hasSize((records / batchSize) + 1);\n        assertThat(generation.split(\";\")).hasSize((records / batchSize));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleSqlTestForSqlTransformerSparkSql(Schema<String, String>,String,String)", "name": "simpleSqlTestForSqlTransformerSparkSql", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForSparkSql\")\n    void simpleSqlTestForSqlTransformerSparkSql(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForSparkSql\")\n    void simpleSqlTestForSqlTransformerSparkSql(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer.<String>builder()\n                .schemaName(tableSchemaName)\n                .dialect(SqlDialect.SPARKSQL)\n                .build();\n\n        assertThat(transformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForSparkSql\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForSparkSql\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]simpleStreamTestForSqlTransformerSparkSql(Schema<String, String>,String,String)", "name": "simpleStreamTestForSqlTransformerSparkSql", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "tableSchemaName", "type": "String"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForSparkSql\")\n    void simpleStreamTestForSqlTransformerSparkSql(Schema<String, String> schema, String tableSchemaName, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestSchemaForSparkSql\")\n    void simpleStreamTestForSqlTransformerSparkSql(Schema<String, String> schema, String tableSchemaName, String expected) {\n        SqlTransformer<String> transformer =\n            SqlTransformer\n                .<String>builder()\n                .schemaName(tableSchemaName)\n                .dialect(SqlDialect.SPARKSQL).build();\n\n        String sql =\n            transformer\n                .generateStream(schema, 1)\n                .collect(Collectors.joining(LINE_SEPARATOR));\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestSchemaForSparkSql\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestSchemaForSparkSql\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[void]testSqlBatch()", "name": "testSqlBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSqlBatch()", "original_string": "    @Test\n    void testSqlBatch() {\n        BaseFaker faker = new BaseFaker(new Random(10L));\n        Schema<Integer, ?> schema = Schema.of(\n            field(\"Number\", () -> faker.number().digit()),\n            field(\"Password\", () -> faker.internet().uuidv3())\n        );\n\n        SqlTransformer<Integer> transformer =\n            SqlTransformer\n                .<Integer>builder()\n                .batch(3)\n                .build();\n\n        String sql =\n            transformer\n                .generateStream(schema, 4)\n                .collect(Collectors.joining(LINE_SEPARATOR));\n\n        String expected =\n            \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\")\" + LINE_SEPARATOR +\n                \"VALUES ('6', '09fd4007-40ba-39df-8cb1-65926bf7b8a9'),\" + LINE_SEPARATOR +\n                \"       ('8', '96c19757-1f18-3051-9acb-f56f0b5555ae'),\" + LINE_SEPARATOR +\n                \"       ('2', '8a4a0365-cd39-33c1-a52a-279b1076cf2d');\" + LINE_SEPARATOR +\n                \"INSERT INTO \\\"MyTable\\\" (\\\"Number\\\", \\\"Password\\\")\" + LINE_SEPARATOR +\n                \"VALUES ('6', 'e807efdd-b6db-319d-8342-a044274d3417');\";\n\n        assertThat(sql).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[void]xmlSchemaTest(Schema<String, String>,String)", "name": "xmlSchemaTest", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestXmlSchema\")\n    void xmlSchemaTest(Schema<String, String> schema, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestXmlSchema\")\n    void xmlSchemaTest(Schema<String, String> schema, String expected) {\n        XmlTransformer<String> xmlTransformer = new XmlTransformer.XmlTransformerBuilder<String>().build();\n        assertThat(xmlTransformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestXmlSchema\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestXmlSchema\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[void]xmlPrettySchemaTest(Schema<String, String>,String)", "name": "xmlPrettySchemaTest", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<String, String>"}, {"name": "expected", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"generateTestXmlPrettySchema\")\n    void xmlPrettySchemaTest(Schema<String, String> schema, String expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"generateTestXmlPrettySchema\")\n    void xmlPrettySchemaTest(Schema<String, String> schema, String expected) {\n        XmlTransformer<String> xmlTransformer = new XmlTransformer.XmlTransformerBuilder<String>().pretty(true).build();\n        assertThat(xmlTransformer.generate(schema, 1)).isEqualTo(expected);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"generateTestXmlPrettySchema\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"generateTestXmlPrettySchema\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[void]generateFromFakeSequence()", "name": "generateFromFakeSequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateFromFakeSequence()", "original_string": "    @Test\n    void generateFromFakeSequence() {\n        final BaseFaker faker = new BaseFaker();\n\n        Schema<Name, List<SimpleField<Name, String>>> schema = Schema.of(\n            field(\"root\",\n                () -> List.of(\n                    field(\"firstName\", Name::firstName),\n                    field(\"lastName\", Name::lastName))));\n\n        XmlTransformer<Name> transformer = new XmlTransformer.XmlTransformerBuilder<Name>().pretty(true).build();\n        String xml = transformer.generate(\n            faker.<Name>collection().suppliers(faker::name).maxLen(1).build(),\n            schema);\n\n        int numberOfLines = getNumberOfLines(xml);\n        assertThat(numberOfLines).isEqualTo(4);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[void]generateXMLWithThreeNestedLevels()", "name": "generateXMLWithThreeNestedLevels", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateXMLWithThreeNestedLevels()", "original_string": "    @Test\n    void generateXMLWithThreeNestedLevels() {\n        final BaseFaker faker = new BaseFaker();\n\n        FakeStream<?> address = (FakeStream<SimpleField<String, List<Object>>>)\n            faker.<SimpleField<String, List<Object>>>stream()\n                .suppliers(() ->\n                    field(\"address\",\n                        () -> List.of(\n                            field(\"country\", () -> faker.address().country()),\n                            field(\"city\", () -> faker.address().city()),\n                            field(\"streetAddress\", () -> faker.address().streetAddress()))))\n                .maxLen(3).build();\n\n        FakeStream<?> persons = (FakeStream<SimpleField<Object, List<Object>>>)\n            faker.<SimpleField<Object, List<Object>>>stream()\n                .suppliers(() ->\n                    field(\"person\",\n                        () -> List.of(\n                            field(\"firstname\", () -> faker.name().firstName()),\n                            field(\"lastname\", () -> faker.name().lastName()),\n                            field(\"addresses\", () -> address.get().collect(Collectors.toList())))))\n                .maxLen(3).build();\n\n\n        XmlTransformer<Object> xmlTransformer = new XmlTransformer.XmlTransformerBuilder<>().pretty(true).build();\n        String xml = xmlTransformer.generate(Schema.of(field(\"persons\", () -> persons.get().collect(Collectors.toList()))), 1).toString();\n        assertThat(xml).isNotEmpty();\n        int numberOfLines = getNumberOfLines(xml);\n        assertThat(numberOfLines).isEqualTo(65);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[void]generateXMLWithThreeNestedLevelsAndAttributes()", "name": "generateXMLWithThreeNestedLevelsAndAttributes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void generateXMLWithThreeNestedLevelsAndAttributes()", "original_string": "    @Test\n    void generateXMLWithThreeNestedLevelsAndAttributes() {\n        final BaseFaker faker = new BaseFaker();\n        FakeStream<Object> address =\n            (FakeStream<Object>) faker.stream()\n                .suppliers(() ->\n                    compositeField(\"address\",\n                        new Field[]{\n                            field(\"country\", () -> faker.address().country()),\n                            field(\"city\", () -> faker.address().city()),\n                            field(\"streetAddress\", () -> faker.address().streetAddress())}))\n                .maxLen(3).build();\n\n        FakeStream<Object> persons =\n            (FakeStream<Object>) faker.stream()\n                .suppliers(() ->\n                    compositeField(\"person\",\n                        new Field[]{\n                            field(\"firstname\", () -> faker.name().firstName()),\n                            field(\"lastname\", () -> faker.name().lastName()),\n                            field(null, () -> List.of(field(\"addresses\", () -> address.get().collect(Collectors.toList()))))}))\n                .maxLen(3).build();\n\n        XmlTransformer<Object> xmlTransformer = new XmlTransformer.XmlTransformerBuilder<>().pretty(true).build();\n        String xml = xmlTransformer.generate(Schema.of(field(\"persons\", () -> persons.get().collect(Collectors.toList()))), 1).toString();\n        assertThat(xml).isNotEmpty();\n        int numberOfLines = getNumberOfLines(xml);\n        assertThat(numberOfLines).isEqualTo(23);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityWithDefaultSchema()", "name": "shouldGenerateEntityWithDefaultSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityWithDefaultSchema()", "original_string": "    @Test\n    void shouldGenerateEntityWithDefaultSchema() {\n        var person = Faker.populate(Person.class);\n\n        assertThat(person).isNotNull();\n        assertThat(person.getName()).isEqualTo(\"Dr Alexis No\u00ebl\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityFromJavaRecordWithDefaultSchema()", "name": "shouldGenerateEntityFromJavaRecordWithDefaultSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityFromJavaRecordWithDefaultSchema()", "original_string": "    @Test\n    void shouldGenerateEntityFromJavaRecordWithDefaultSchema() {\n        var person = Faker.populate(PersonJavaRecord.class);\n\n        assertThat(person).isNotNull();\n        assertThat(person.name()).isEqualTo(\"Dr Alexis No\u00ebl\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityWithCustomSchema()", "name": "shouldGenerateEntityWithCustomSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityWithCustomSchema()", "original_string": "    @Test\n    void shouldGenerateEntityWithCustomSchema() {\n        var person = Faker.populate(Person.class, customSchema());\n\n        assertThat(person).isNotNull();\n        assertThat(person.getName()).isEqualTo(\"Aztar Ivy\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityFromJavaRecordWithCustomSchema()", "name": "shouldGenerateEntityFromJavaRecordWithCustomSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityFromJavaRecordWithCustomSchema()", "original_string": "    @Test\n    void shouldGenerateEntityFromJavaRecordWithCustomSchema() {\n        var person = Faker.populate(PersonJavaRecord.class, customSchema());\n\n        assertThat(person).isNotNull();\n        assertThat(person.name()).isEqualTo(\"Aztar Ivy\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityWithCustomSchemaWhenClassTemplateWithoutAnnotation()", "name": "shouldGenerateEntityWithCustomSchemaWhenClassTemplateWithoutAnnotation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityWithCustomSchemaWhenClassTemplateWithoutAnnotation()", "original_string": "    @Test\n    void shouldGenerateEntityWithCustomSchemaWhenClassTemplateWithoutAnnotation() {\n        var person = Faker.populate(SimplePerson.class, customSchema());\n\n        assertThat(person).isNotNull();\n        assertThat(person.name).isEqualTo(\"Aztar Ivy\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityFromJavaRecordWithCustomSchemaWhenClassTemplateWithoutAnnotation()", "name": "shouldGenerateEntityFromJavaRecordWithCustomSchemaWhenClassTemplateWithoutAnnotation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityFromJavaRecordWithCustomSchemaWhenClassTemplateWithoutAnnotation()", "original_string": "    @Test\n    void shouldGenerateEntityFromJavaRecordWithCustomSchemaWhenClassTemplateWithoutAnnotation() {\n        var person = Faker.populate(SimplePersonJavaRecord.class, customSchema());\n\n        assertThat(person).isNotNull();\n        assertThat(person.name).isEqualTo(\"Aztar Ivy\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityFromJavaRecordWithComplexSchemaWhenClassTemplateWithoutAnnotation()", "name": "shouldGenerateEntityFromJavaRecordWithComplexSchemaWhenClassTemplateWithoutAnnotation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityFromJavaRecordWithComplexSchemaWhenClassTemplateWithoutAnnotation()", "original_string": "    @Test\n    void shouldGenerateEntityFromJavaRecordWithComplexSchemaWhenClassTemplateWithoutAnnotation() {\n        var person = Faker.populate(ComplexPersonJavaRecord.class, complexSchema());\n\n        assertThat(person).isNotNull();\n        assertThat(person.name()).isEqualTo(\"Aztar Ivy\");\n        assertThat(person.address()).isEqualTo(\"Am Buttermarkt 46b, Dannerheim, BE 32422\");\n        assertThat(person.color()).isEqualTo(\"rot\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass()", "name": "shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass()", "original_string": "    @Test\n    void shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass() {\n        var person = Faker.populate(DefaultPerson.class);\n\n        assertThat(person).isNotNull();\n        assertThat(person.name).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass2()", "name": "shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass2()", "original_string": "    @Test\n    void shouldGenerateEntityWithDefaultSchemaAndInDefaultSchemaInCurrentClass2() {\n        final int expectedSize = 5;\n        final Schema schema = customSchema();\n        List<DefaultPerson> list = new FakeCollection.Builder<DefaultPerson>()\n            .suppliers(() -> Faker.populate(DefaultPerson.class, schema))\n            .len(expectedSize)\n            .generate();\n\n        assertThat(new HashSet<>(list)).hasSize(expectedSize);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[void]shouldGenerateEntityFromJavaRecordWithDefaultSchemaAndInDefaultSchemaInCurrentClass()", "name": "shouldGenerateEntityFromJavaRecordWithDefaultSchemaAndInDefaultSchemaInCurrentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void shouldGenerateEntityFromJavaRecordWithDefaultSchemaAndInDefaultSchemaInCurrentClass()", "original_string": "    @Test\n    void shouldGenerateEntityFromJavaRecordWithDefaultSchemaAndInDefaultSchemaInCurrentClass() {\n        var person = Faker.populate(DefaultPersonJavaRecord.class);\n\n        assertThat(person).isNotNull();\n        assertThat(person.name).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest.[void]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void valid()", "original_string": "    @RepeatedTest(100)\n    void valid() {\n        assertThat(idNumber.valid()).matches(REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java", "class_name": "MexicanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest.[void]validEsMXSsn()", "name": "validEsMXSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void validEsMXSsn()", "original_string": "    @RepeatedTest(100)\n    void validEsMXSsn() {\n        assertThat(idNumber.validEsMXSsn()).matches(REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java", "class_name": "MexicanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest.[void]invalid()", "name": "invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void invalid()", "original_string": "    @RepeatedTest(100)\n    void invalid() {\n        assertThat(idNumber.invalid()).matches(REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java", "class_name": "MexicanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest.[void]invalidEsMXSsn()", "name": "invalidEsMXSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void invalidEsMXSsn()", "original_string": "    @RepeatedTest(100)\n    void invalidEsMXSsn() {\n        assertThat(idNumber.invalidEsMXSsn()).matches(REGEX);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java", "class_name": "MexicanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MexicanIdNumberTest.java.MexicanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest.[void]testExistSsn()", "name": "testExistSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testExistSsn()", "original_string": "    @Test\n    void testExistSsn() {\n        assertThat(isValidEnZASsn(\"9202204720085\")).isFalse();\n        assertThat(isValidEnZASsn(\"foo2204720082\")).isFalse();\n        assertThat(isValidEnZASsn(\"9232454720082\")).isFalse();\n\n        assertThat(isValidEnZASsn(\"9202204720083\")).isTrue();\n        assertThat(isValidEnZASsn(\"8801235111088\")).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java", "class_name": "SouthAfricanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest.[void]testFakerSsn()", "name": "testFakerSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testFakerSsn()", "original_string": "    @RepeatedTest(100)\n    void testFakerSsn() {\n        final BaseFaker f = new BaseFaker(new Locale(\"en\", \"ZA\"));\n        final IdNumber idNumber = f.idNumber();\n        assertThat(isValidEnZASsn(idNumber.valid())).isTrue();\n        assertThat(isValidEnZASsn(idNumber.invalid())).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java", "class_name": "SouthAfricanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest.[void]testSsnFormat()", "name": "testSsnFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testSsnFormat()", "original_string": "    @RepeatedTest(100)\n    void testSsnFormat() {\n        final BaseFaker f = new BaseFaker(new Locale(\"en\", \"ZA\"));\n        assertThat(f.idNumber().valid()).matches(\"\\\\d{10}[01]8\\\\d\");\n        assertThat(f.idNumber().invalid()).matches(\"\\\\d{10}[01]8\\\\d\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java", "class_name": "SouthAfricanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest.[void]sequentialNumber_forMales()", "name": "sequentialNumber_forMales", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void sequentialNumber_forMales()", "original_string": "    @RepeatedTest(100)\n    void sequentialNumber_forMales() {\n        BaseFaker f = new BaseFaker(new Locale(\"en\", \"ZA\"));\n        String sequentialNumber = sequentialNumber(f, MALE);\n\n        assertThat(sequentialNumber).matches(\"\\\\d{4}\");\n        assertThat(parseInt(sequentialNumber)).isGreaterThanOrEqualTo(5000);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java", "class_name": "SouthAfricanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest.[void]sequentialNumber_forFemales()", "name": "sequentialNumber_forFemales", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void sequentialNumber_forFemales()", "original_string": "    @RepeatedTest(100)\n    void sequentialNumber_forFemales() {\n        BaseFaker f = new BaseFaker(new Locale(\"en\", \"ZA\"));\n        String sequentialNumber = sequentialNumber(f, FEMALE);\n\n        assertThat(sequentialNumber).matches(\"\\\\d{4}\");\n        assertThat(parseInt(sequentialNumber)).isLessThan(5000);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java", "class_name": "SouthAfricanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumberTest.java.SouthAfricanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthKoreanIdNumberTest.java.SouthKoreanIdNumberTest.[void]testValidKoKrRrn()", "name": "testValidKoKrRrn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testValidKoKrRrn()", "original_string": "    @RepeatedTest(100)\n    void testValidKoKrRrn() {\n        Faker f = new Faker(new Locale(\"en\", \"KR\"));\n        String rrn = f.idNumber().valid();\n\n        // Check if contains other character than digit\n        assertThat(rrn).matches(D_6_D_7);\n        // Check date\n        LocalDate date = LocalDate.parse(rrn.substring(0, 6), YYMMDD);\n        int currentYear = LocalDate.now().getYear();\n        assertThat(date.getYear()).isBetween(currentYear - 80, currentYear + 80);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthKoreanIdNumberTest.java", "class_name": "SouthKoreanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthKoreanIdNumberTest.java.SouthKoreanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/BulgarianIdNumberTest.java.BulgarianIdNumberTest.[void]checksum()", "name": "checksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksum()", "original_string": "    @Test\n    void checksum() {\n        assertThat(generator.checksum(\"803205603\")).isEqualTo(1);\n        assertThat(generator.checksum(\"800101000\")).isEqualTo(8);\n        assertThat(generator.checksum(\"750102001\")).isEqualTo(8);\n        assertThat(generator.checksum(\"820630876\")).isEqualTo(0);\n        assertThat(generator.checksum(\"560628204\")).isEqualTo(7);\n        assertThat(generator.checksum(\"752316926\")).isEqualTo(3);\n        assertThat(generator.checksum(\"755201000\")).isEqualTo(5);\n        assertThat(generator.checksum(\"754201103\")).isEqualTo(0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/BulgarianIdNumberTest.java", "class_name": "BulgarianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/BulgarianIdNumberTest.java.BulgarianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java.MoldovanIdNumberTest.[void]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void valid()", "original_string": "    @RepeatedTest(100)\n    void valid() {\n        String pin = generator.generateValid(faker);\n        assertThat(pin.length())\n            .as(() -> \"Presumably valid PIN: '%s'\".formatted(pin))\n            .isEqualTo(13);\n        assertThat(pin)\n            .as(() -> \"Presumably valid PIN: '%s'\".formatted(pin))\n            .matches(\"\\\\d{13}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java", "class_name": "MoldovanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java.MoldovanIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java.MoldovanIdNumberTest.[void]checksum()", "name": "checksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksum()", "original_string": "    @Test\n    void checksum() {\n        assertThat(generator.checksum(\"293270095431\")).isEqualTo('9');\n        assertThat(generator.checksum(\"201403700084\")).isEqualTo('3');\n        assertThat(generator.checksum(\"099220624701\")).isEqualTo('8');\n        assertThat(generator.checksum(\"200504212980\")).isEqualTo('9');\n        assertThat(generator.checksum(\"200504401269\")).isEqualTo('3');\n        assertThat(generator.checksum(\"200201100696\")).isEqualTo('1');\n        assertThat(generator.checksum(\"200403612722\")).isEqualTo('9');\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java", "class_name": "MoldovanIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MoldovanIdNumberTest.java.MoldovanIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest.[void]checksum()", "name": "checksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksum()", "original_string": "    @Test\n    void checksum() {\n        assertThat(EstonianIdNumber.checksum(\"3760503029\")).isEqualTo(9);\n        assertThat(EstonianIdNumber.checksum(\"3450123421\")).isEqualTo(5);\n        assertThat(EstonianIdNumber.checksum(\"4940313652\")).isEqualTo(6);\n        assertThat(EstonianIdNumber.checksum(\"5110712176\")).isEqualTo(0);\n        assertThat(EstonianIdNumber.checksum(\"6110712176\")).isEqualTo(0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java", "class_name": "EstonianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSamples from <a href=\"https://et.wikipedia.org/wiki/Isikukood\">...</a>\n"}, {"uris": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest.[void]firstDigit_18xx(int)", "name": "firstDigit_18xx", "arg_nums": 1, "params": [{"name": "year", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {1800, 1801, 1802, 1888, 1898, 1899})\n    void firstDigit_18xx(int year)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {1800, 1801, 1802, 1888, 1898, 1899})\n    void firstDigit_18xx(int year) {\n        assertThat(firstDigit(year, MALE)).isEqualTo(1);\n        assertThat(firstDigit(year, FEMALE)).isEqualTo(2);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java", "class_name": "EstonianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {1800, 1801, 1802, 1888, 1898, 1899})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {1800, 1801, 1802, 1888, 1898, 1899})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest.[void]firstDigit_19xx(int)", "name": "firstDigit_19xx", "arg_nums": 1, "params": [{"name": "year", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {1900, 1901, 1902, 1988, 1998, 1999})\n    void firstDigit_19xx(int year)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {1900, 1901, 1902, 1988, 1998, 1999})\n    void firstDigit_19xx(int year) {\n        assertThat(firstDigit(year, MALE)).isEqualTo(3);\n        assertThat(firstDigit(year, FEMALE)).isEqualTo(4);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java", "class_name": "EstonianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {1900, 1901, 1902, 1988, 1998, 1999})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {1900, 1901, 1902, 1988, 1998, 1999})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest.[void]firstDigit_20xx(int)", "name": "firstDigit_20xx", "arg_nums": 1, "params": [{"name": "year", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {2000, 2001, 2002, 2088, 2098, 2099})\n    void firstDigit_20xx(int year)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {2000, 2001, 2002, 2088, 2098, 2099})\n    void firstDigit_20xx(int year) {\n        assertThat(firstDigit(year, MALE)).isEqualTo(5);\n        assertThat(firstDigit(year, FEMALE)).isEqualTo(6);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java", "class_name": "EstonianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {2000, 2001, 2002, 2088, 2098, 2099})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {2000, 2001, 2002, 2088, 2098, 2099})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest.[void]firstDigit_21xx(int)", "name": "firstDigit_21xx", "arg_nums": 1, "params": [{"name": "year", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {2100, 2101, 2102, 2188, 2198, 2199})\n    void firstDigit_21xx(int year)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {2100, 2101, 2102, 2188, 2198, 2199})\n    void firstDigit_21xx(int year) {\n        assertThat(firstDigit(year, MALE)).isEqualTo(7);\n        assertThat(firstDigit(year, FEMALE)).isEqualTo(8);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java", "class_name": "EstonianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/EstonianIdNumberTest.java.EstonianIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {2100, 2101, 2102, 2188, 2198, 2199})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {2100, 2101, 2102, 2188, 2198, 2199})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]sample()", "name": "sample", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void sample()", "original_string": "    @RepeatedTest(100)\n    void sample() {\n        assertThat(impl.generateValid(faker)).matches(RE_THIRTEEN_DIGITS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]firstDigit_18xx()", "name": "firstDigit_18xx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void firstDigit_18xx()", "original_string": "    @Test\n    void firstDigit_18xx() {\n        for (int year = 1800; year <= 1899; year++) {\n            assertThat(impl.firstCharacter(LocalDate.of(year, 1, 1), MALE)).isEqualTo(3);\n            assertThat(impl.firstCharacter(LocalDate.of(year, 1, 1), FEMALE)).isEqualTo(4);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]firstDigit_19xx()", "name": "firstDigit_19xx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void firstDigit_19xx()", "original_string": "    @Test\n    void firstDigit_19xx() {\n        for (int year = 1900; year <= 1999; year++) {\n            assertThat(impl.firstCharacter(LocalDate.of(year, 1, 1), MALE)).isEqualTo(1);\n            assertThat(impl.firstCharacter(LocalDate.of(year, 1, 1), FEMALE)).isEqualTo(2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]firstDigit_20xx()", "name": "firstDigit_20xx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void firstDigit_20xx()", "original_string": "    @Test\n    void firstDigit_20xx() {\n        for (int year = 2000; year <= 2099; year++) {\n            assertThat(impl.firstCharacter(LocalDate.of(year, 1, 1), MALE)).isEqualTo(5);\n            assertThat(impl.firstCharacter(LocalDate.of(year, 1, 1), FEMALE)).isEqualTo(6);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]dateOfBirth()", "name": "dateOfBirth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void dateOfBirth()", "original_string": "    @Test\n    void dateOfBirth() {\n        assertThat(impl.dateOfBirth(LocalDate.of(1990, 1, 1))).isEqualTo(\"900101\");\n        assertThat(impl.dateOfBirth(LocalDate.of(1234, 12, 31))).isEqualTo(\"341231\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]countyCode()", "name": "countyCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void countyCode()", "original_string": "    @Test\n    void countyCode() {\n        Set<String> allCodes = new HashSet<>(48);\n        for (int i = 0; i < 10_000; i++) {\n            String countyCode = impl.countyCode(faker);\n            assertThat(countyCode).matches(RE_TWO_DIGITS);\n            allCodes.add(countyCode);\n        }\n\n        assertThat(allCodes).hasSize(48);\n        assertThat(allCodes).contains(\"01\");\n        assertThat(allCodes).contains(\"09\");\n        assertThat(allCodes).contains(\"10\");\n        assertThat(allCodes).contains(\"11\");\n        assertThat(allCodes).contains(\"19\");\n        assertThat(allCodes).contains(\"20\");\n        assertThat(allCodes).contains(\"21\");\n        assertThat(allCodes).contains(\"45\");\n        assertThat(allCodes).contains(\"46\");\n        assertThat(allCodes).contains(\"51\");\n        assertThat(allCodes).contains(\"52\");\n        assertThat(allCodes).doesNotContain(\"53\");\n        assertThat(allCodes).doesNotContain(\"47\");\n        assertThat(allCodes).doesNotContain(\"49\");\n        assertThat(allCodes).doesNotContain(\"50\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]sequenceNumber()", "name": "sequenceNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void sequenceNumber()", "original_string": "    @RepeatedTest(10)\n    void sequenceNumber() {\n        assertThat(impl.sequenceNumber(faker)).matches(RE_THREE_DIGITS);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest.[void]checksum()", "name": "checksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksum()", "original_string": "    @Test\n    void checksum() {\n        assertThat(impl.checksum(\"198081945678\")).isEqualTo(1);\n        assertThat(impl.checksum(\"293052637289\")).isEqualTo(4);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java", "class_name": "RomanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/RomanianIdNumberTest.java.RomanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/MacedonianIdNumberTest.java.MacedonianIdNumberTest.[void]checksum()", "name": "checksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksum()", "original_string": "    @Test\n    void checksum() {\n        assertThat(generator.checksum(\"010100650000\")).isEqualTo(6);\n        assertThat(generator.checksum(\"923456789012\")).isEqualTo(4);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/MacedonianIdNumberTest.java", "class_name": "MacedonianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/MacedonianIdNumberTest.java.MacedonianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]testGenderedPesel(Gender)", "name": "testGenderedPesel", "arg_nums": 1, "params": [{"name": "givenGender", "type": "Gender"}], "return_type": "void", "signature": "@ParameterizedTest\n    @EnumSource(value = Gender.class, names = {\"MALE\", \"FEMALE\"})\n    void testGenderedPesel(Gender givenGender)", "original_string": "    @ParameterizedTest\n    @EnumSource(value = Gender.class, names = {\"MALE\", \"FEMALE\"})\n    void testGenderedPesel(Gender givenGender) {\n        /*\n         * Given\n         */\n        final LocalDate givenBirthDate = new BaseFaker().timeAndDate().birthday(0, 100);\n        /*\n         * When\n         */\n        final String gotPesel = peselNumber.get(faker, givenBirthDate, givenGender);\n\n        /*\n         * Then\n         */\n        assertBasics(gotPesel);\n        assertBirthDate(givenBirthDate, gotPesel);\n        assertGender(givenGender, gotPesel);\n        assertControlDigit(gotPesel);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @EnumSource(value = Gender.class, names = {\"MALE\", \"FEMALE\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@EnumSource(value = Gender.class, names = {\"MALE\", \"FEMALE\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]testCenturiesPesel(int)", "name": "testCenturiesPesel", "arg_nums": 1, "params": [{"name": "givenBirthYear", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {1850, 1950, 2050, 2150, 2250})\n    void testCenturiesPesel(int givenBirthYear)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {1850, 1950, 2050, 2150, 2250})\n    void testCenturiesPesel(int givenBirthYear) {\n        /*\n         * Given\n         */\n        final LocalDate givenBirthDate = LocalDate.of(givenBirthYear, 6, 28);\n\n        /*\n         * When\n         */\n        final String gotPesel = peselNumber.get(faker, givenBirthDate, Gender.ANY);\n\n        /*\n         * Then\n         */\n        assertBasics(gotPesel);\n        assertBirthDate(givenBirthDate, gotPesel);\n        assertControlDigit(gotPesel);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {1850, 1950, 2050, 2150, 2250})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {1850, 1950, 2050, 2150, 2250})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]testInvalidCenturiesPesel(int)", "name": "testInvalidCenturiesPesel", "arg_nums": 1, "params": [{"name": "givenBirthYear", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {1799, 2300})\n    void testInvalidCenturiesPesel(int givenBirthYear)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {1799, 2300})\n    void testInvalidCenturiesPesel(int givenBirthYear) {\n        /*\n         * Given\n         */\n        final LocalDate givenBirthDate = LocalDate.of(givenBirthYear, 6, 28);\n\n        /*\n         * When\n         */\n        assertThatThrownBy(() -> peselNumber.get(faker, givenBirthDate, Gender.ANY))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {1799, 2300})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {1799, 2300})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]testNullGender()", "name": "testNullGender", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testNullGender()", "original_string": "    @Test\n    void testNullGender() {\n        /*\n         * Given\n         */\n        final LocalDate givenBirthDate = LocalDate.now();\n\n        /*\n         * When\n         */\n        final String gotPesel = peselNumber.get(faker, givenBirthDate, null);\n\n        /*\n         * Then\n         */\n        assertBasics(gotPesel);\n        assertBirthDate(givenBirthDate, gotPesel);\n        assertControlDigit(gotPesel);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/UtilsTest.java.UtilsTest.[void]digit_parsesGivenCharToNumber()", "name": "digit_parsesGivenCharToNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void digit_parsesGivenCharToNumber()", "original_string": "    @Test\n    void digit_parsesGivenCharToNumber() {\n        assertThat(digit('0')).isEqualTo(0);\n        assertThat(digit('1')).isEqualTo(1);\n        assertThat(digit('2')).isEqualTo(2);\n        assertThat(digit('8')).isEqualTo(8);\n        assertThat(digit('9')).isEqualTo(9);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/UtilsTest.java", "class_name": "UtilsTest", "class_uri": "src/test/java/net/datafaker/idnumbers/UtilsTest.java.UtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/UtilsTest.java.UtilsTest.[void]digitAt_parsesGivenCharToNumber()", "name": "digitAt_parsesGivenCharToNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void digitAt_parsesGivenCharToNumber()", "original_string": "    @Test\n    void digitAt_parsesGivenCharToNumber() {\n        assertThat(digitAt(\"12345\", 0)).isEqualTo(1);\n        assertThat(digitAt(\"12345\", 1)).isEqualTo(2);\n        assertThat(digitAt(\"12345\", 2)).isEqualTo(3);\n        assertThat(digitAt(\"12345\", 3)).isEqualTo(4);\n        assertThat(digitAt(\"12345\", 4)).isEqualTo(5);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/UtilsTest.java", "class_name": "UtilsTest", "class_uri": "src/test/java/net/datafaker/idnumbers/UtilsTest.java.UtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/UtilsTest.java.UtilsTest.[void]multiply_digits()", "name": "multiply_digits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void multiply_digits()", "original_string": "    @Test\n    void multiply_digits() {\n        assertThat(multiply(\"1\", new int[]{1})).isEqualTo(1);\n        assertThat(multiply(\"1\", new int[]{2})).isEqualTo(2);\n        assertThat(multiply(\"23\", new int[]{4, 5})).isEqualTo(2 * 4 + 3 * 5);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/UtilsTest.java", "class_name": "UtilsTest", "class_uri": "src/test/java/net/datafaker/idnumbers/UtilsTest.java.UtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest.[void]testValidChineseIdNumber()", "name": "testValidChineseIdNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(10)\n    void testValidChineseIdNumber()", "original_string": "    @RepeatedTest(10)\n    void testValidChineseIdNumber() {\n        String idNumber = faker.idNumber().valid();\n        final int length = idNumber.length();\n        assertThatSsnNumberValid(length, idNumber);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java", "class_name": "ChineseIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(10)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(10)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest.[void]testChecksumOfChineseIdNumber(String)", "name": "testChecksumOfChineseIdNumber", "arg_nums": 1, "params": [{"name": "idNumber", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @CsvSource({\n        \"420302198411073380\",\n        \"310104196302135471\",\n        \"330109197812225952\",\n        \"130303200202132943\",\n        \"370405198908011564\",\n        \"350403198610147315\",\n        \"640106198409178736\",\n        \"469002199907068677\",\n        \"440307199907065608\",\n        \"150301196606308919\",\n        \"21030319900605273X\"\n    })\n    void testChecksumOfChineseIdNumber(String idNumber)", "original_string": "    @ParameterizedTest\n    @CsvSource({\n        \"420302198411073380\",\n        \"310104196302135471\",\n        \"330109197812225952\",\n        \"130303200202132943\",\n        \"370405198908011564\",\n        \"350403198610147315\",\n        \"640106198409178736\",\n        \"469002199907068677\",\n        \"440307199907065608\",\n        \"150301196606308919\",\n        \"21030319900605273X\"\n    })\n    void testChecksumOfChineseIdNumber(String idNumber) {\n        String first17Digit = idNumber.substring(0, idNumber.length() - 1);\n        assertThat(ChineseIdNumber.idNumber(first17Digit.toCharArray())).isEqualTo(idNumber);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java", "class_name": "ChineseIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest", "attributes": {"modifiers": "@ParameterizedTest\n    @CsvSource({\n        \"420302198411073380\",\n        \"310104196302135471\",\n        \"330109197812225952\",\n        \"130303200202132943\",\n        \"370405198908011564\",\n        \"350403198610147315\",\n        \"640106198409178736\",\n        \"469002199907068677\",\n        \"440307199907065608\",\n        \"150301196606308919\",\n        \"21030319900605273X\"\n    })", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@CsvSource({\n        \"420302198411073380\",\n        \"310104196302135471\",\n        \"330109197812225952\",\n        \"130303200202132943\",\n        \"370405198908011564\",\n        \"350403198610147315\",\n        \"640106198409178736\",\n        \"469002199907068677\",\n        \"440307199907065608\",\n        \"150301196606308919\",\n        \"21030319900605273X\"\n    })"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest.[void]testValidZhCnIdNumber()", "name": "testValidZhCnIdNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testValidZhCnIdNumber()", "original_string": "    @RepeatedTest(100)\n    void testValidZhCnIdNumber() {\n        ChineseIdNumber id = new ChineseIdNumber();\n        String idNumber = id.generateValid(faker);\n        assertThatSsnNumberValid(idNumber.length(), idNumber);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java", "class_name": "ChineseIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java.PortugueseIdNumberTest.[void]testInvalid()", "name": "testInvalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testInvalid()", "original_string": "    @RepeatedTest(100)\n    void testInvalid() {\n        assertThat(ptFaker.idNumber().invalid()).matches(\"[0-9]{9,10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java", "class_name": "PortugueseIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java.PortugueseIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java.PortugueseIdNumberTest.[void]testValid()", "name": "testValid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void testValid()", "original_string": "    @RepeatedTest(100)\n    void testValid() {\n        assertThat(ptFaker.idNumber().valid()).matches(\"[0-9]{9,10}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java", "class_name": "PortugueseIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PortugueseIdNumberTest.java.PortugueseIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java.SwedishIdNumberTest.[void]validSwedishSsn()", "name": "validSwedishSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void validSwedishSsn()", "original_string": "    @Test\n    void validSwedishSsn() {\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"670919-9530\")).isTrue();\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"811228-9874\")).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java", "class_name": "SwedishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java.SwedishIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java.SwedishIdNumberTest.[void]invalidSwedishSsn()", "name": "invalidSwedishSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void invalidSwedishSsn()", "original_string": "    @Test\n    void invalidSwedishSsn() {\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"8112289873\")).isFalse();\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"foo228-9873\")).isFalse();\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"811228-9873\")).isFalse();\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"811228-9875\")).isFalse();\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"811200-9874\")).isFalse();\n        assertThat(SwedenIdNumber.isValidSwedishSsn(\"810028-9874\")).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java", "class_name": "SwedishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java.SwedishIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void valid()", "original_string": "    @RepeatedTest(100)\n    void valid() {\n        String pin = generator.generateValid(faker);\n        assertThat(pin.length()).isEqualTo(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]invalid()", "name": "invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void invalid()", "original_string": "    @RepeatedTest(100)\n    void invalid() {\n        String pin = generator.generateInvalid(faker);\n        assertThat(pin.length()).isEqualTo(10);\n        assertThat(parseInt(pin.substring(2, 4)))\n            .as(() -> \"Presumably invalid PIN: '%s'\".formatted(pin))\n            .isGreaterThan(92);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]yy()", "name": "yy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void yy()", "original_string": "    @Test\n    void yy() {\n        assertThat(generator.yy(1806)).isEqualTo(\"06\");\n        assertThat(generator.yy(1812)).isEqualTo(\"12\");\n        assertThat(generator.yy(1829)).isEqualTo(\"29\");\n        assertThat(generator.yy(1880)).isEqualTo(\"80\");\n        assertThat(generator.yy(1888)).isEqualTo(\"88\");\n        assertThat(generator.yy(1900)).isEqualTo(\"A0\");\n        assertThat(generator.yy(1911)).isEqualTo(\"B1\");\n        assertThat(generator.yy(1929)).isEqualTo(\"C9\");\n        assertThat(generator.yy(1981)).isEqualTo(\"I1\");\n        assertThat(generator.yy(2003)).isEqualTo(\"K3\");\n        assertThat(generator.yy(2016)).isEqualTo(\"L6\");\n        assertThat(generator.yy(2099)).isEqualTo(\"T9\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]mm()", "name": "mm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void mm()", "original_string": "    @Test\n    void mm() {\n        assertThat(generator.mm(1, MALE)).isEqualTo(\"01\");\n        assertThat(generator.mm(2, MALE)).isEqualTo(\"02\");\n        assertThat(generator.mm(9, MALE)).isEqualTo(\"09\");\n        assertThat(generator.mm(12, MALE)).isEqualTo(\"12\");\n        assertThat(generator.mm(1, FEMALE)).isEqualTo(\"51\");\n        assertThat(generator.mm(2, FEMALE)).isEqualTo(\"52\");\n        assertThat(generator.mm(8, FEMALE)).isEqualTo(\"58\");\n        assertThat(generator.mm(12, FEMALE)).isEqualTo(\"62\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]dd()", "name": "dd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void dd()", "original_string": "    @Test\n    void dd() {\n        assertThat(generator.dd(1)).isEqualTo(\"01\");\n        assertThat(generator.dd(9)).isEqualTo(\"09\");\n        assertThat(generator.dd(10)).isEqualTo(\"10\");\n        assertThat(generator.dd(31)).isEqualTo(\"31\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]checksum()", "name": "checksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksum()", "original_string": "    @Test\n    void checksum() {\n        assertThat(generator.checksum(\"J11024000\")).isEqualTo('R');\n        assertThat(generator.checksum(\"J45405000\")).isEqualTo('O');\n        assertThat(generator.checksum(\"J00923000\")).isEqualTo('N');\n        assertThat(generator.checksum(\"I05101999\")).isEqualTo('I');\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest.[void]checksumOfFirstChar()", "name": "checksumOfFirstChar", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void checksumOfFirstChar()", "original_string": "    @Test\n    void checksumOfFirstChar() {\n        assertThat(generator.checksumOfFirstChar('0')).isEqualTo(0);\n        assertThat(generator.checksumOfFirstChar('1')).isEqualTo(1);\n        assertThat(generator.checksumOfFirstChar('3')).isEqualTo(3);\n        assertThat(generator.checksumOfFirstChar('9')).isEqualTo(9);\n        assertThat(generator.checksumOfFirstChar('A')).isEqualTo(1);\n        assertThat(generator.checksumOfFirstChar('B')).isEqualTo(2);\n        assertThat(generator.checksumOfFirstChar('V')).isEqualTo(22);\n        assertThat(generator.checksumOfFirstChar('W')).isEqualTo(0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java", "class_name": "AlbanianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumberTest.java.AlbanianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest.[void]testIsValidSwedishSsn_ValidSsn()", "name": "testIsValidSwedishSsn_ValidSsn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidSwedishSsn_ValidSsn()", "original_string": "    @Test\n    public void testIsValidSwedishSsn_ValidSsn() {\n        // Given a valid Swedish SSN\n        String ssn = \"811228-9874\";\n\n        // When isValidSwedishSsn is called\n        boolean result = SwedenIdNumber.isValidSwedishSsn(ssn);\n\n        // Then it should return true\n        assertTrue(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java", "class_name": "SwedenIdNumber_isValidSwedishSsnTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest.[void]testIsValidSwedishSsn_InvalidLength()", "name": "testIsValidSwedishSsn_InvalidLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidSwedishSsn_InvalidLength()", "original_string": "    @Test\n    public void testIsValidSwedishSsn_InvalidLength() {\n        // Given an SSN with invalid length\n        String ssn = \"811228-987\";\n\n        // When isValidSwedishSsn is called\n        boolean result = SwedenIdNumber.isValidSwedishSsn(ssn);\n\n        // Then it should return false\n        assertFalse(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java", "class_name": "SwedenIdNumber_isValidSwedishSsnTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest.[void]testIsValidSwedishSsn_InvalidDate()", "name": "testIsValidSwedishSsn_InvalidDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidSwedishSsn_InvalidDate()", "original_string": "    @Test\n    public void testIsValidSwedishSsn_InvalidDate() {\n        // Given an SSN with an invalid date\n        String ssn = \"990230-1234\";\n\n        // When isValidSwedishSsn is called\n        boolean result = SwedenIdNumber.isValidSwedishSsn(ssn);\n\n        // Then it should return false\n        assertFalse(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java", "class_name": "SwedenIdNumber_isValidSwedishSsnTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest.[void]testIsValidSwedishSsn_InvalidChecksum()", "name": "testIsValidSwedishSsn_InvalidChecksum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsValidSwedishSsn_InvalidChecksum()", "original_string": "    @Test\n    public void testIsValidSwedishSsn_InvalidChecksum() {\n        // Given an SSN with an invalid checksum\n        String ssn = \"811228-9873\";\n\n        // When isValidSwedishSsn is called\n        boolean result = SwedenIdNumber.isValidSwedishSsn(ssn);\n\n        // Then it should return false\n        assertFalse(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java", "class_name": "SwedenIdNumber_isValidSwedishSsnTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SwedenIdNumber_isValidSwedishSsnTest.java.SwedenIdNumber_isValidSwedishSsnTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest.[void]centuryPrefix_forCitizens()", "name": "centuryPrefix_forCitizens", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void centuryPrefix_forCitizens()", "original_string": "    @Test\n    void centuryPrefix_forCitizens() {\n        assertThat(centuryPrefixCitizen(LocalDate.parse(\"1999-12-31\"))).as(\"19xx = S\").isEqualTo('S');\n        assertThat(centuryPrefixCitizen(LocalDate.parse(\"2000-12-31\"))).as(\"20xx = T\").isEqualTo('T');\n        assertThat(centuryPrefixCitizen(LocalDate.parse(\"2001-01-01\"))).as(\"20xx = T\").isEqualTo('T');\n        assertThat(centuryPrefixCitizen(LocalDate.parse(\"2101-01-01\"))).as(\"21xx = U\").isEqualTo('U');\n        assertThat(centuryPrefixCitizen(LocalDate.parse(\"2201-01-01\"))).as(\"22xx = V\").isEqualTo('V');\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java", "class_name": "SingaporeIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest.[void]centuryPrefix_forForeigner()", "name": "centuryPrefix_forForeigner", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void centuryPrefix_forForeigner()", "original_string": "    @Test\n    void centuryPrefix_forForeigner() {\n        assertThat(centuryPrefixForeigner(LocalDate.parse(\"1999-12-31\"))).as(\"19xx = F\").isEqualTo('F');\n        assertThat(centuryPrefixForeigner(LocalDate.parse(\"2000-12-31\"))).as(\"20xx = G\").isEqualTo('G');\n        assertThat(centuryPrefixForeigner(LocalDate.parse(\"2001-01-01\"))).as(\"20xx = G\").isEqualTo('G');\n        assertThat(centuryPrefixForeigner(LocalDate.parse(\"2101-01-01\"))).as(\"21xx = H\").isEqualTo('H');\n        assertThat(centuryPrefixForeigner(LocalDate.parse(\"2201-01-01\"))).as(\"22xx = I\").isEqualTo('I');\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java", "class_name": "SingaporeIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest.[void]randomBirthDate_20th_century()", "name": "randomBirthDate_20th_century", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void randomBirthDate_20th_century()", "original_string": "    @Test\n    void randomBirthDate_20th_century() {\n        Faker faker = new Faker();\n        for (int i = 0; i < 100; i++) {\n            assertThat(randomBirthDate(faker, SINGAPOREAN_TWENTIETH_CENTURY).getYear() / 100).isEqualTo(19);\n            assertThat(randomBirthDate(faker, FOREIGNER_TWENTIETH_CENTURY).getYear() / 100).isEqualTo(19);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java", "class_name": "SingaporeIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest.[void]randomBirthDate_21th_century()", "name": "randomBirthDate_21th_century", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void randomBirthDate_21th_century()", "original_string": "    @Test\n    void randomBirthDate_21th_century() {\n        Faker faker = new Faker();\n        for (int i = 0; i < 100; i++) {\n            assertThat(randomBirthDate(faker, SINGAPOREAN_TWENTY_FIRST_CENTURY).getYear() / 100).isEqualTo(20);\n            assertThat(randomBirthDate(faker, FOREIGNER_TWENTY_FIRST_CENTURY).getYear() / 100).isEqualTo(20);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java", "class_name": "SingaporeIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SingaporeIdNumberTest.java.SingaporeIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java.UkrainianIdNumberTest.[void]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void valid()", "original_string": "    @Test\n    void valid() {\n        IdNumber.IdNumberRequest request = new IdNumber.IdNumberRequest(1, 65, ANY);\n        PersonIdNumber person = ukrainianIdNumber.generateValid(faker, request);\n        String unzr = person.idNumber();\n        LocalDate bod = person.birthDate();\n\n        assertEquals(bod.getYear(), Integer.parseInt(unzr.substring(0, 4)));\n        assertEquals(bod.getMonthValue(), Integer.parseInt(unzr.substring(4, 6)));\n        assertEquals(bod.getDayOfMonth(), Integer.parseInt(unzr.substring(6, 8)));\n        assertTrue(isUnzrValid(unzr));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java", "class_name": "UkrainianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java.UkrainianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java.UkrainianIdNumberTest.[void]invalid()", "name": "invalid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void invalid()", "original_string": "    @Test\n    void invalid() {\n        String number = ukrainianIdNumber.generateInvalid(faker);\n        assertFalse(isUnzrValid(number));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java", "class_name": "UkrainianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java.UkrainianIdNumberTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_SameInstance()", "original_string": "    @Test\n    void testEquals_SameInstance() {\n        FakeValuesContext context = FakeValuesContext.of(Locale.US);\n        FakeValues fakeValues = FakeValues.of(context);\n        assertTrue(fakeValues.equals(fakeValues));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "class_name": "FakeValues_equalsTest", "class_uri": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest.[void]testEquals_DifferentInstanceSameContext()", "name": "testEquals_DifferentInstanceSameContext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_DifferentInstanceSameContext()", "original_string": "    @Test\n    void testEquals_DifferentInstanceSameContext() {\n        FakeValuesContext context = FakeValuesContext.of(Locale.US);\n        FakeValues fakeValues1 = FakeValues.of(context);\n        FakeValues fakeValues2 = FakeValues.of(context);\n        assertTrue(fakeValues1.equals(fakeValues2));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "class_name": "FakeValues_equalsTest", "class_uri": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest.[void]testEquals_DifferentContext()", "name": "testEquals_DifferentContext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_DifferentContext()", "original_string": "    @Test\n    void testEquals_DifferentContext() {\n        FakeValuesContext context1 = FakeValuesContext.of(Locale.US);\n        FakeValuesContext context2 = FakeValuesContext.of(Locale.UK);\n        FakeValues fakeValues1 = FakeValues.of(context1);\n        FakeValues fakeValues2 = FakeValues.of(context2);\n        assertFalse(fakeValues1.equals(fakeValues2));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "class_name": "FakeValues_equalsTest", "class_uri": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest.[void]testEquals_DifferentType()", "name": "testEquals_DifferentType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_DifferentType()", "original_string": "    @Test\n    void testEquals_DifferentType() {\n        FakeValuesContext context = FakeValuesContext.of(Locale.US);\n        FakeValues fakeValues = FakeValues.of(context);\n        assertFalse(fakeValues.equals(\"Not a FakeValues instance\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "class_name": "FakeValues_equalsTest", "class_uri": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]getAValueReturnsAValue()", "name": "getAValueReturnsAValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void getAValueReturnsAValue()", "original_string": "    @Test\n    void getAValueReturnsAValue() {\n        assertThat(fakeValues.get(PATH)).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest case for for https://github.com/datafaker-net/datafaker/issues/574\nTo test it need to change net.datafaker.service.FakeValues.loadValues to something from private\nPowermock can not test it because it requires JUnit4\n@Test\nvoid testLoadValues() {\nFakeValues fv = Mockito.spy(new FakeValues(Locale.ENGLISH));\nExecutorService service = new ForkJoinPool(2);\nCountDownLatch latch = new CountDownLatch(2);\nservice.submit(() -> {\nlatch.countDown();\ntry {\nlatch.await(10, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nthrow new RuntimeException(e);\n}\nfv.get(\"key\");\n});\nservice.submit(() -> {\nlatch.countDown();\ntry {\nlatch.await(10, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nthrow new RuntimeException(e);\n}\nfv.get(\"key\");\n});\nservice.shutdown();\ntry {\nservice.awaitTermination(10, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nthrow new RuntimeException(e);\n}\nverify(fv, times(1)).loadValues();\n}\n"}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]getAValueDoesNotReturnAValue()", "name": "getAValueDoesNotReturnAValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void getAValueDoesNotReturnAValue()", "original_string": "    @Test\n    void getAValueDoesNotReturnAValue() {\n        assertThat(fakeValues.get(\"dog\")).isNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]getAValueWithANonEnglishFile()", "name": "getAValueWithANonEnglishFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void getAValueWithANonEnglishFile()", "original_string": "    @Test\n    void getAValueWithANonEnglishFile() {\n        FakeValues frenchFakeValues = FakeValues.of(FakeValuesContext.of(Locale.FRENCH));\n        assertThat(frenchFakeValues.get(PATH)).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]getAValueForHebrewLocale()", "name": "getAValueForHebrewLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void getAValueForHebrewLocale()", "original_string": "    @Test\n    void getAValueForHebrewLocale() {\n        FakeValues hebrew = FakeValues.of(FakeValuesContext.of(new Locale(\"iw\")));\n        assertThat(hebrew.get(PATH)).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]correctPathForHebrewLanguage()", "name": "correctPathForHebrewLanguage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void correctPathForHebrewLanguage()", "original_string": "    @Test\n    void correctPathForHebrewLanguage() {\n        FakeValues hebrew = FakeValues.of(FakeValuesContext.of(new Locale(\"iw\")));\n        assertThat(hebrew.getPaths()).containsExactly(\"he\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]incorrectPathForHebrewLanguage()", "name": "incorrectPathForHebrewLanguage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void incorrectPathForHebrewLanguage()", "original_string": "    @Test\n    void incorrectPathForHebrewLanguage() {\n        FakeValues hebrew = FakeValues.of(FakeValuesContext.of(new Locale(\"iw\")));\n        assertThat(hebrew.getPaths()).doesNotContain(\"iw\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]correctLocale()", "name": "correctLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void correctLocale()", "original_string": "    @Test\n    void correctLocale() {\n        FakeValues fv = FakeValues.of(FakeValuesContext.of(new Locale(\"uk\")));\n        assertThat(fv.getLocale()).isEqualTo(new Locale(\"uk\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]getAValueFromALocaleThatCantBeLoaded()", "name": "getAValueFromALocaleThatCantBeLoaded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void getAValueFromALocaleThatCantBeLoaded()", "original_string": "    @Test\n    void getAValueFromALocaleThatCantBeLoaded() {\n        FakeValues fakeValues = FakeValues.of(FakeValuesContext.of(new Locale(\"nothing\")));\n        assertThat(fakeValues.get(PATH)).isNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]checkEquals(FakeValues,FakeValues,boolean)", "name": "checkEquals", "arg_nums": 3, "params": [{"name": "fv1", "type": "FakeValues"}, {"name": "fv2", "type": "FakeValues"}, {"name": "equals", "type": "boolean"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"fakeValuesProvider\")\n    void checkEquals(FakeValues fv1, FakeValues fv2, boolean equals)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"fakeValuesProvider\")\n    void checkEquals(FakeValues fv1, FakeValues fv2, boolean equals) {\n        if (equals) {\n            assertThat(fv1).isEqualTo(fv2);\n        } else {\n            assertThat(fv1).isNotEqualTo(fv2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"fakeValuesProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"fakeValuesProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java.FakeValuesGroupingTest.[void]handlesOneFakeValue()", "name": "handlesOneFakeValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void handlesOneFakeValue()", "original_string": "    @Test\n    void handlesOneFakeValue() {\n        assertThat(fakeValuesGrouping.get(\"address\")).isEqualTo(addressValues.get(\"address\"))\n            .isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java", "class_name": "FakeValuesGroupingTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java.FakeValuesGroupingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java.FakeValuesGroupingTest.[void]handlesMultipleFakeValues()", "name": "handlesMultipleFakeValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void handlesMultipleFakeValues()", "original_string": "    @Test\n    void handlesMultipleFakeValues() {\n        FakeValues catValues = FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"cat.yml\", \"creature\"));\n        fakeValuesGrouping.add(catValues);\n\n        assertThat(fakeValuesGrouping.get(\"address\")).isEqualTo(addressValues.get(\"address\"))\n            .isNotNull();\n\n        assertThat(fakeValuesGrouping.get(\"creature\")).isEqualTo(catValues.get(\"creature\"))\n            .isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java", "class_name": "FakeValuesGroupingTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java.FakeValuesGroupingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testPositiveBoundariesOnly(RandomService)", "name": "testPositiveBoundariesOnly", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testPositiveBoundariesOnly(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testPositiveBoundariesOnly(RandomService randomService) {\n        assertThatThrownBy(() -> randomService.nextLong(0L))\n            .isInstanceOf(IllegalArgumentException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testLongWithinBoundary(RandomService)", "name": "testLongWithinBoundary", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testLongWithinBoundary(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testLongWithinBoundary(RandomService randomService) {\n        assertThat(randomService.nextLong(1)).isZero();\n\n        for (int i = 1; i < 10; i++) {\n            assertThat(randomService.nextLong(2)).isLessThan(2L);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testLongMaxBoundary(RandomService)", "name": "testLongMaxBoundary", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testLongMaxBoundary(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testLongMaxBoundary(RandomService randomService) {\n        assertThat(randomService.nextLong(Long.MAX_VALUE)).isStrictlyBetween(0L, Long.MAX_VALUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testIntInRange(RandomService)", "name": "testIntInRange", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testIntInRange(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testIntInRange(RandomService randomService) {\n        final Condition<Integer> lessThanOrEqual = new Condition<>(t -> t <= 5, \"should be less than or equal 5\");\n        final Condition<Integer> greaterThanOrEqual = new Condition<>(t -> t >= -5, \"should be greater than or equal -5\");\n        for (int i = 1; i < 100; i++) {\n            assertThat(randomService.nextInt(-5, 5))\n                .is(allOf(lessThanOrEqual, greaterThanOrEqual));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]nextInt_returnsValueWithinGivenRange()", "name": "nextInt_returnsValueWithinGivenRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void nextInt_returnsValueWithinGivenRange()", "original_string": "    @Test\n    void nextInt_returnsValueWithinGivenRange() {\n        RandomService randomService = new RandomService();\n        for (int i = 0; i < 10_000; i++) {\n            assertThat(randomService.nextInt(2, 6))\n                .isGreaterThanOrEqualTo(2)\n                .isLessThanOrEqualTo(6);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]predictableRandomRange()", "name": "predictableRandomRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void predictableRandomRange()", "original_string": "    @Test\n    void predictableRandomRange() {\n        RandomService randomService = new RandomService(new Random(10));\n\n        int i1 = randomService.nextInt();\n        int i2 = randomService.nextInt(100);\n        int i3 = randomService.nextInt(0, 100);\n\n        float f1 = randomService.nextFloat();\n\n        long l1 = randomService.nextLong();\n        long l2 = randomService.nextLong(100);\n        long l3 = randomService.nextLong(100, 1000);\n\n        boolean b = randomService.nextBoolean();\n\n        assertThat(i1).isEqualTo(-1157793070);\n        assertThat(i2).isEqualTo(80);\n        assertThat(i3).isEqualTo(35);\n\n        assertThat(f1).isEqualTo(0.41291267F);\n\n        assertThat(l1).isEqualTo(1092083446069765248L);\n        assertThat(l2).isOne();\n        assertThat(l3).isEqualTo(836L);\n\n        assertThat(b).isFalse();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testDoubleInRange(RandomService)", "name": "testDoubleInRange", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testDoubleInRange(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testDoubleInRange(RandomService randomService) {\n        final Condition<Double> lessThanOrEqual = new Condition<>(t -> t <= 5d, \"should be less than or equal 5\");\n        final Condition<Double> greaterThanOrEqual = new Condition<>(t -> t >= -5d, \"should be greater than or equal -5\");\n        for (int i = 1; i < 100; i++) {\n            assertThat(randomService.nextDouble(-5, 5)).is(allOf(lessThanOrEqual, greaterThanOrEqual));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testLongInRange(RandomService)", "name": "testLongInRange", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testLongInRange(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testLongInRange(RandomService randomService) {\n        final Condition<Long> lessThanOrEqual = new Condition<>(t -> t <= 5_000_000_000L, \"should be less than or equal 5_000_000_000L\");\n        final Condition<Long> greaterThanOrEqual = new Condition<>(t -> t >= -5_000_000_000L, \"should be greater than or equal -5_000_000_000L\");\n        for (int i = 1; i < 1_000; i++) {\n            assertThat(randomService.nextLong(-5_000_000_000L, 5_000_000_000L)).is(allOf(lessThanOrEqual, greaterThanOrEqual));\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testHex(RandomService)", "name": "testHex", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testHex(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testHex(RandomService randomService) {\n        assertThat(randomService.hex(8)).matches(\"^[0-9A-F]{8}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[void]testDefaultHex(RandomService)", "name": "testDefaultHex", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testDefaultHex(RandomService randomService)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testDefaultHex(RandomService randomService) {\n        assertThat(randomService.hex()).matches(\"^[0-9A-F]{8}$\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"randomServiceProvider\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest.[void]testHexWithZeroLength()", "name": "testHexWithZeroLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHexWithZeroLength()", "original_string": "    @Test\n    public void testHexWithZeroLength() {\n        assertEquals(\"\", randomService.hex(0, true));\n        assertEquals(\"\", randomService.hex(0, false));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_hexTest.java", "class_name": "RandomService_hexTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest.[void]testHexWithPositiveLengthUppercase()", "name": "testHexWithPositiveLengthUppercase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHexWithPositiveLengthUppercase()", "original_string": "    @Test\n    public void testHexWithPositiveLengthUppercase() {\n        doAnswer(invocation -> {\n            byte[] bytes = invocation.getArgument(0);\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = (byte) i; // Ensure each byte is within the range of HEX_UP\n            }\n            return null;\n        }).when(mockRandom).nextBytes(any(byte[].class));\n\n        String result = randomService.hex(5, true);\n        assertEquals(5, result.length());\n        assertEquals(\"01234\", result); // Since each byte is (i % 16), the result should be \"01234\"\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_hexTest.java", "class_name": "RandomService_hexTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest.[void]testHexWithPositiveLengthLowercase()", "name": "testHexWithPositiveLengthLowercase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHexWithPositiveLengthLowercase()", "original_string": "    @Test\n    public void testHexWithPositiveLengthLowercase() {\n        doAnswer(invocation -> {\n            byte[] bytes = invocation.getArgument(0);\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = (byte) i; // Ensure each byte is within the range of HEX_LOWER\n            }\n            return null;\n        }).when(mockRandom).nextBytes(any(byte[].class));\n\n        String result = randomService.hex(5, false);\n        assertEquals(5, result.length());\n        assertEquals(\"01234\", result); // Since each byte is (i % 16), the result should be \"01234\"\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_hexTest.java", "class_name": "RandomService_hexTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_SameInstance()", "original_string": "    @Test\n    void testEquals_SameInstance() {\n        RandomService randomService = new RandomService();\n        assertTrue(randomService.equals(randomService));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "class_name": "RandomService_equalsTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest.[void]testEquals_DifferentInstancesWithSameRandom()", "name": "testEquals_DifferentInstancesWithSameRandom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_DifferentInstancesWithSameRandom()", "original_string": "    @Test\n    void testEquals_DifferentInstancesWithSameRandom() {\n        Random random = new Random();\n        RandomService randomService1 = new RandomService(random);\n        RandomService randomService2 = new RandomService(random);\n        assertTrue(randomService1.equals(randomService2));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "class_name": "RandomService_equalsTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest.[void]testEquals_DifferentInstancesWithDifferentRandom()", "name": "testEquals_DifferentInstancesWithDifferentRandom", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_DifferentInstancesWithDifferentRandom()", "original_string": "    @Test\n    void testEquals_DifferentInstancesWithDifferentRandom() {\n        RandomService randomService1 = new RandomService(new Random());\n        RandomService randomService2 = new RandomService(new Random());\n        assertFalse(randomService1.equals(randomService2));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "class_name": "RandomService_equalsTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_DifferentClass()", "original_string": "    @Test\n    void testEquals_DifferentClass() {\n        RandomService randomService = new RandomService();\n        assertFalse(randomService.equals(\"Not a RandomService\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "class_name": "RandomService_equalsTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest.[void]testEquals_Null()", "name": "testEquals_Null", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals_Null()", "original_string": "    @Test\n    void testEquals_Null() {\n        RandomService randomService = new RandomService();\n        assertFalse(randomService.equals(null));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "class_name": "RandomService_equalsTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java.FakeValuesService_jsonTest.[void]testJson_evenNumberOfFields()", "name": "testJson_evenNumberOfFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJson_evenNumberOfFields()", "original_string": "    @Test\n    public void testJson_evenNumberOfFields() {\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        String result = fakeValuesService.json(\"name\", \"John\", \"age\", \"30\");\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java", "class_name": "FakeValuesService_jsonTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java.FakeValuesService_jsonTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java.FakeValuesService_jsonTest.[void]testJson_oddNumberOfFields()", "name": "testJson_oddNumberOfFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJson_oddNumberOfFields()", "original_string": "    @Test\n    public void testJson_oddNumberOfFields() {\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            fakeValuesService.json(\"name\", \"John\", \"age\");\n        });\n        assertTrue(exception.getMessage().contains(\"even\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java", "class_name": "FakeValuesService_jsonTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java.FakeValuesService_jsonTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_fileExpressionTest.java.FakeValuesService_fileExpressionTest.[void]testFileExpressionSuccess()", "name": "testFileExpressionSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFileExpressionSuccess()", "original_string": "    @Test\n    public void testFileExpressionSuccess() throws IOException {\n        // Given\n        Path tempFile = Files.createTempFile(\"test\", \".txt\");\n        Files.write(tempFile, List.of(\"Hello\", \"World\"));\n\n        // When\n        String result = fakeValuesService.fileExpression(tempFile, new BaseFaker(), context);\n\n        // Then\n        assertEquals(\"Hello\" + System.lineSeparator() + \"World\", result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_fileExpressionTest.java", "class_name": "FakeValuesService_fileExpressionTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_fileExpressionTest.java.FakeValuesService_fileExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_fileExpressionTest.java.FakeValuesService_fileExpressionTest.[void]testFileExpressionIOException()", "name": "testFileExpressionIOException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFileExpressionIOException()", "original_string": "    @Test\n    public void testFileExpressionIOException() {\n        // Given\n        Path nonExistentFile = Path.of(\"nonExistentFile.txt\");\n\n        // When & Then\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.fileExpression(nonExistentFile, new BaseFaker(), context);\n        });\n\n        assertEquals(\"Failed to read \\\"nonExistentFile.txt\\\"\", exception.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_fileExpressionTest.java", "class_name": "FakeValuesService_fileExpressionTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_fileExpressionTest.java.FakeValuesService_fileExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java.FakeValuesGrouping_addTest.[void]testAddFakeValues()", "name": "testAddFakeValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddFakeValues()", "original_string": "    @Test\n    void testAddFakeValues() {\n        fakeValuesGrouping.add(addressValues);\n        assertThat(fakeValuesGrouping.get(\"address\")).isEqualTo(addressValues.get(\"address\")).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java", "class_name": "FakeValuesGrouping_addTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java.FakeValuesGrouping_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java.FakeValuesGrouping_addTest.[void]testAddFakeValuesGrouping()", "name": "testAddFakeValuesGrouping", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddFakeValuesGrouping()", "original_string": "    @Test\n    void testAddFakeValuesGrouping() {\n        FakeValuesGrouping anotherGrouping = new FakeValuesGrouping();\n        FakeValues nameValues = FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"name.yml\", \"name\"));\n        anotherGrouping.add(nameValues);\n\n        fakeValuesGrouping.add(anotherGrouping);\n        assertThat(fakeValuesGrouping.get(\"name\")).isEqualTo(nameValues.get(\"name\")).isNotNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java", "class_name": "FakeValuesGrouping_addTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java.FakeValuesGrouping_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java.FakeValuesGrouping_addTest.[void]testAddUnsupportedFakeValue()", "name": "testAddUnsupportedFakeValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddUnsupportedFakeValue()", "original_string": "    @Test\n    void testAddUnsupportedFakeValue() {\n        FakeValuesInterface unsupportedFakeValue = new FakeValuesInterface() {\n            @Override\n            public Object get(String key) {\n                return null;\n            }\n        };\n        assertThrows(RuntimeException.class, () -> fakeValuesGrouping.add(unsupportedFakeValue));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java", "class_name": "FakeValuesGrouping_addTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesGrouping_addTest.java.FakeValuesGrouping_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]fetchStringShouldReturnValue()", "name": "fetchStringShouldReturnValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchStringShouldReturnValue()", "original_string": "    @Test\n    void fetchStringShouldReturnValue() {\n        assertThat(fakeValuesService.fetchString(\"property.dummy\", mockedFaker.getContext())).isEqualTo(\"x\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]fetchShouldReturnValue()", "name": "fetchShouldReturnValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchShouldReturnValue()", "original_string": "    @Test\n    void fetchShouldReturnValue() {\n        assertThat(fakeValuesService.fetch(\"property.dummy\", mockedFaker.getContext())).isEqualTo(\"x\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]fetchObjectShouldReturnValue()", "name": "fetchObjectShouldReturnValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fetchObjectShouldReturnValue()", "original_string": "    @Test\n    void fetchObjectShouldReturnValue() {\n        List<String> dummy = fakeValuesService.fetchObject(\"property.dummy\", mockedFaker.getContext());\n        assertThat(dummy).isEqualTo(List.of(\"x\", \"y\", \"z\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]safeFetchShouldReturnValueInList()", "name": "safeFetchShouldReturnValueInList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void safeFetchShouldReturnValueInList()", "original_string": "    @Test\n    void safeFetchShouldReturnValueInList() {\n        doReturn(0).when(randomService).nextInt(anyInt());\n        assertThat(fakeValuesService.safeFetch(\"property.dummy\", mockedFaker.getContext(), null)).isEqualTo(\"x\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]safeFetchShouldReturnSimpleList()", "name": "safeFetchShouldReturnSimpleList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void safeFetchShouldReturnSimpleList()", "original_string": "    @Test\n    void safeFetchShouldReturnSimpleList() {\n        assertThat(fakeValuesService.safeFetch(\"property.simple\", mockedFaker.getContext(), null)).isEqualTo(\"hello\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]safeFetchShouldReturnEmptyStringWhenPropertyDoesntExist()", "name": "safeFetchShouldReturnEmptyStringWhenPropertyDoesntExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void safeFetchShouldReturnEmptyStringWhenPropertyDoesntExist()", "original_string": "    @Test\n    void safeFetchShouldReturnEmptyStringWhenPropertyDoesntExist() {\n        assertThat(fakeValuesService.safeFetch(\"property.dummy2\", mockedFaker.getContext(), \"\")).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]bothify2Args()", "name": "bothify2Args", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void bothify2Args()", "original_string": "    @Test\n    void bothify2Args() {\n        final DummyService dummy = mock(DummyService.class);\n\n        BaseFaker f = new BaseFaker();\n\n        String value = fakeValuesService.resolve(\"property.bothify_2\", dummy, f, context);\n        assertThat(value).matches(\"[A-Z]{2}\\\\d{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]regexifyDirective()", "name": "regexifyDirective", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void regexifyDirective()", "original_string": "    @Test\n    void regexifyDirective() {\n        final DummyService dummy = mock(DummyService.class);\n\n        String value = fakeValuesService.resolve(\"property.regexify1\", dummy, mockedFaker, mockedFaker.getContext());\n        assertThat(value).isIn(\"55\", \"44\", \"45\", \"54\");\n        verify(mockedFaker).regexify(\"[45]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]regexifySlashFormatDirective()", "name": "regexifySlashFormatDirective", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void regexifySlashFormatDirective()", "original_string": "    @Test\n    void regexifySlashFormatDirective() {\n        final DummyService dummy = mock(DummyService.class);\n\n        String value = fakeValuesService.resolve(\"property.regexify_slash_format\", dummy, mockedFaker, mockedFaker.getContext());\n        assertThat(value).isIn(\"55\", \"44\", \"45\", \"54\");\n        verify(mockedFaker).regexify(\"[45]{2}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]regexifyDirective2()", "name": "regexifyDirective2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void regexifyDirective2()", "original_string": "    @Test\n    void regexifyDirective2() {\n        final DummyService dummy = mock(DummyService.class);\n\n        String value = fakeValuesService.resolve(\"property.regexify_cell\", dummy, mockedFaker, mockedFaker.getContext());\n        assertThat(value).isIn(\"479\", \"459\");\n        verify(mockedFaker).regexify(\"4[57]9\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]resolveKeyToPropertyWithAPropertyWithoutAnObject()", "name": "resolveKeyToPropertyWithAPropertyWithoutAnObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolveKeyToPropertyWithAPropertyWithoutAnObject()", "original_string": "    @Test\n    void resolveKeyToPropertyWithAPropertyWithoutAnObject() {\n        // #{hello} -> DummyService.hello\n\n        // given\n        final DummyService dummy = mock(DummyService.class);\n        doReturn(\"Yo!\").when(dummy).hello();\n\n        // when\n        final String actual = fakeValuesService.resolve(\"property.simpleResolution\", dummy, mockedFaker, mockedFaker.getContext());\n\n        // then\n        assertThat(actual).isEqualTo(\"Yo!\");\n        verify(dummy).hello();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]resolveKeyToPropertyWithAList()", "name": "resolveKeyToPropertyWithAList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolveKeyToPropertyWithAList()", "original_string": "    @Test\n    void resolveKeyToPropertyWithAList() {\n        // property.resolutionWithList -> #{hello}\n        // #{hello} -> DummyService.hello\n        class Property extends AbstractProvider<BaseProviders> {\n            private Property(BaseProviders faker) {\n                super(faker);\n                ClassLoader classLoader = getClass().getClassLoader();\n                URL resource = classLoader.getResource(\"test.yml\");\n                faker.addUrl(new Locale(\"test\"), resource);\n            }\n\n            public String hello() {\n                return \"Yo!\";\n            }\n\n            public String hello2() {\n                return \"Yo2!\";\n            }\n\n            public String resolutionWithList() {\n                return resolve(\"property.resolutionWithList\");\n            }\n        }\n        class PropertyFaker extends BaseFaker {\n            private PropertyFaker() {\n                super(new Locale(\"test\"));\n            }\n\n            public Property property() {\n                return getProvider(Property.class, Property::new);\n            }\n        }\n        var testFaker = new PropertyFaker();\n        Property provider = testFaker.getProvider(\"Property\");\n        String actual = provider.resolutionWithList();\n        assertThat(actual).startsWith(\"Yo\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": [{"original_string": "        class Property extends AbstractProvider<BaseProviders> {\n            private Property(BaseProviders faker) {\n                super(faker);\n                ClassLoader classLoader = getClass().getClassLoader();\n                URL resource = classLoader.getResource(\"test.yml\");\n                faker.addUrl(new Locale(\"test\"), resource);\n            }\n\n            public String hello() {\n                return \"Yo!\";\n            }\n\n            public String hello2() {\n                return \"Yo2!\";\n            }\n\n            public String resolutionWithList() {\n                return resolve(\"property.resolutionWithList\");\n            }\n        }", "definition": "        class Property extends AbstractProvider<BaseProviders>", "class_docstring": " #{hello} -> DummyService.hello", "name": "Property", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "            private Property(BaseProviders faker) {\n                super(faker);\n                ClassLoader classLoader = getClass().getClassLoader();\n                URL resource = classLoader.getResource(\"test.yml\");\n                faker.addUrl(new Locale(\"test\"), resource);\n            }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "Property", "params": [{"name": "faker", "type": "BaseProviders"}], "body": "                                                  {\n                super(faker);\n                ClassLoader classLoader = getClass().getClassLoader();\n                URL resource = classLoader.getResource(\"test.yml\");\n                faker.addUrl(new Locale(\"test\"), resource);\n            }", "signature": "private Property(BaseProviders faker)"}, {"syntax_pass": true, "original_string": "            public String hello() {\n                return \"Yo!\";\n            }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "name": "hello", "params": [], "body": "                                  {\n                return \"Yo!\";\n            }", "signature": "public String hello()"}, {"syntax_pass": true, "original_string": "            public String hello2() {\n                return \"Yo2!\";\n            }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "name": "hello2", "params": [], "body": "                                   {\n                return \"Yo2!\";\n            }", "signature": "public String hello2()"}, {"syntax_pass": true, "original_string": "            public String resolutionWithList() {\n                return resolve(\"property.resolutionWithList\");\n            }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "name": "resolutionWithList", "params": [], "body": "                                               {\n                return resolve(\"property.resolutionWithList\");\n            }", "signature": "public String resolutionWithList()"}]}, {"original_string": "        class PropertyFaker extends BaseFaker {\n            private PropertyFaker() {\n                super(new Locale(\"test\"));\n            }\n\n            public Property property() {\n                return getProvider(Property.class, Property::new);\n            }\n        }", "definition": "        class PropertyFaker extends BaseFaker", "class_docstring": "", "name": "PropertyFaker", "super_interfaces": [], "superclasses": "BaseFaker", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "            private PropertyFaker() {\n                super(new Locale(\"test\"));\n            }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "PropertyFaker", "params": [], "body": "                                    {\n                super(new Locale(\"test\"));\n            }", "signature": "private PropertyFaker()"}, {"syntax_pass": true, "original_string": "            public Property property() {\n                return getProvider(Property.class, Property::new);\n            }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Property", "classes": []}, "name": "property", "params": [], "body": "                                       {\n                return getProvider(Property.class, Property::new);\n            }", "signature": "public Property property()"}]}]}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testLocaleChain()", "name": "testLocaleChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLocaleChain()", "original_string": "    @Test\n    void testLocaleChain() {\n        final List<SingletonLocale> chain = context.localeChain(Locale.SIMPLIFIED_CHINESE);\n\n        assertThat(chain).map(SingletonLocale::getLocale).contains(Locale.SIMPLIFIED_CHINESE, Locale.CHINESE, Locale.ENGLISH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testLocaleChainEnglish()", "name": "testLocaleChainEnglish", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLocaleChainEnglish()", "original_string": "    @Test\n    void testLocaleChainEnglish() {\n        final List<SingletonLocale> chain = new FakerContext(Locale.ENGLISH, null).localeChain(Locale.ENGLISH);\n\n        assertThat(chain).map(SingletonLocale::getLocale).contains(Locale.ENGLISH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testLocaleChainLanguageOnly()", "name": "testLocaleChainLanguageOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLocaleChainLanguageOnly()", "original_string": "    @Test\n    void testLocaleChainLanguageOnly() {\n        final List<SingletonLocale> chain = new FakerContext(Locale.CHINESE, null).localeChain(Locale.CHINESE);\n\n        assertThat(chain).map(SingletonLocale::getLocale).contains(Locale.CHINESE, Locale.ENGLISH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testLocalesChainGetter()", "name": "testLocalesChainGetter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLocalesChainGetter()", "original_string": "    @Test\n    void testLocalesChainGetter() {\n        final List<SingletonLocale> chain = context.getLocaleChain();\n\n        assertThat(chain).map(SingletonLocale::getLocale).contains(new Locale(\"test\"), Locale.ENGLISH);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testLocalesChainGetterRu()", "name": "testLocalesChainGetterRu", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLocalesChainGetterRu()", "original_string": "    @Test\n    void testLocalesChainGetterRu() {\n        final FakerContext FVS = new FakerContext(new Locale(\"ru\"), randomService);\n        final List<SingletonLocale> processedChain = FVS.localeChain(new Locale(\"ru\"));\n        final List<SingletonLocale> chain = FVS.getLocaleChain();\n\n        assertThat(chain).isEqualTo(processedChain);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testFakerContextSetLocale()", "name": "testFakerContextSetLocale", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFakerContextSetLocale()", "original_string": "    @Test\n    void testFakerContextSetLocale() {\n        final FakerContext fakerContext = new FakerContext(new Locale(\"en\"), randomService);\n        fakerContext.setLocale(new Locale(\"uk\"));\n        assertThat(fakerContext.getLocale()).isEqualTo(new Locale(\"uk\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]testFakerContextSetRandomService()", "name": "testFakerContextSetRandomService", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFakerContextSetRandomService()", "original_string": "    @Test\n    void testFakerContextSetRandomService() {\n        final FakerContext fakerContext = new FakerContext(Locale.US, randomService);\n        fakerContext.setRandomService(new RandomService());\n        assertThat(fakerContext.getRandomService()).usingRecursiveComparison().isEqualTo(new RandomService());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]checkFakerContextEquality(FakerContext,FakerContext,boolean)", "name": "checkFakerContextEquality", "arg_nums": 3, "params": [{"name": "fc1", "type": "FakerContext"}, {"name": "fc2", "type": "FakerContext"}, {"name": "equals", "type": "boolean"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"fakerContexts\")\n    void checkFakerContextEquality(FakerContext fc1, FakerContext fc2, boolean equals)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"fakerContexts\")\n    void checkFakerContextEquality(FakerContext fc1, FakerContext fc2, boolean equals) {\n        if (equals) {\n            assertThat(fc1).usingRecursiveComparison().isEqualTo(fc2);\n        } else {\n            assertThat(fc1).usingRecursiveComparison().isNotEqualTo(fc2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"fakerContexts\")", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"fakerContexts\")"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionWithInvalidFakerObject()", "name": "expressionWithInvalidFakerObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expressionWithInvalidFakerObject()", "original_string": "    @Test\n    void expressionWithInvalidFakerObject() {\n        expressionShouldFailWithContaining(\"#{ObjectNotOnFaker.methodName}\",\n            \"Unable to resolve #{ObjectNotOnFaker.methodName} directive\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionWithValidFakerObjectButInvalidMethod()", "name": "expressionWithValidFakerObjectButInvalidMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expressionWithValidFakerObjectButInvalidMethod()", "original_string": "    @Test\n    void expressionWithValidFakerObjectButInvalidMethod() {\n        expressionShouldFailWithContaining(\"#{Name.nonExistentMethod}\",\n            \"Unable to resolve #{Name.nonExistentMethod} directive\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionWithValidFakerObjectValidMethodInvalidArgs()", "name": "expressionWithValidFakerObjectValidMethodInvalidArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expressionWithValidFakerObjectValidMethodInvalidArgs()", "original_string": "    @Test\n    void expressionWithValidFakerObjectValidMethodInvalidArgs() {\n        expressionShouldFailWithContaining(\"#{Number.number_between 'x','y'}\",\n            \"Unable to resolve #{Number.number_between 'x','y'} directive\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTwo things are important here:\n1) the message in the exception should be USEFUL\n2) a {@link RuntimeException} should be thrown.\n<p>\nif the message changes, it's ok to update the test provided\nthe two conditions above are still true.\n"}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]futureDateExpression()", "name": "futureDateExpression", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void futureDateExpression()", "original_string": "    @RepeatedTest(100)\n    void futureDateExpression() {\n        LocalDateTime now = LocalDateTime.now(OffsetDateTime.now(ZoneId.systemDefault()).getOffset());\n        LocalDateTime nowPlus10Days = now.plusDays(10);\n        String expression = fakeValuesService.expression(\"#{date.future '10','TimeUnit.DAYS'}\", faker, context);\n        LocalDateTime date = LocalDateTime.parse(expression, DATE_TIME_FORMATTER);\n        assertThat(date).isStrictlyBetween(now, nowPlus10Days);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]pastDateExpression()", "name": "pastDateExpression", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@RepeatedTest(100)\n    void pastDateExpression()", "original_string": "    @RepeatedTest(100)\n    void pastDateExpression() {\n        LocalDateTime now = LocalDateTime.now(OffsetDateTime.now(ZoneId.systemDefault()).getOffset());\n        LocalDateTime nowMinus5Hours = now.minusHours(5);\n        String expression = fakeValuesService.expression(\"#{date.past '4','TimeUnit.HOURS'}\", faker, context);\n        LocalDateTime date = LocalDateTime.parse(expression, DATE_TIME_FORMATTER);\n        assertThat(date).isStrictlyBetween(nowMinus5Hours, now);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@RepeatedTest(100)", "marker_annotations": [], "non_marker_annotations": ["@RepeatedTest(100)"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionWithSingleEnumArg()", "name": "expressionWithSingleEnumArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expressionWithSingleEnumArg()", "original_string": "    @Test\n    void expressionWithSingleEnumArg() {\n        // https://github.com/datafaker-net/datafaker/issues/1274\n        String masterCard = fakeValuesService.expression(\"#{finance.creditCard 'CreditCardType.MASTERCARD'}\", faker, context);\n        assertThat(LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(masterCard.replace(\"-\", \"\"))).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionWithFourArguments()", "name": "expressionWithFourArguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expressionWithFourArguments()", "original_string": "    @Test\n    void expressionWithFourArguments() {\n        assertThat(fakeValuesService.expression(\"#{Internet.password '5','8','true','true'}\", faker, context))\n            .matches(\"[\\\\w\\\\d!%#$@_^&*]{5,8}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]fileExpressionTestFailure(String)", "name": "fileExpressionTestFailure", "arg_nums": 1, "params": [{"name": "filename", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(strings = {\"src/test/test.txt_null\", \"qwerty\", \"src\"})\n    void fileExpressionTestFailure(String filename)", "original_string": "    @ParameterizedTest\n    @ValueSource(strings = {\"src/test/test.txt_null\", \"qwerty\", \"src\"})\n    void fileExpressionTestFailure(String filename) {\n        assertThatThrownBy(() -> fakeValuesService.fileExpression(Paths.get(filename), faker, faker.getContext()))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(strings = {\"src/test/test.txt_null\", \"qwerty\", \"src\"})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(strings = {\"src/test/test.txt_null\", \"qwerty\", \"src\"})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]fileNoExpressionTest()", "name": "fileNoExpressionTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fileNoExpressionTest()", "original_string": "    @Test\n    void fileNoExpressionTest() throws IOException {\n        Path tmpPath = Files.createTempFile(\"tmp\", \"file\");\n        assertThat(String.join(\"\", Files.readAllLines(tmpPath)))\n            .isEqualTo(fakeValuesService.fileExpression(tmpPath, faker, faker.getContext()));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]fileExpressionTest()", "name": "fileExpressionTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fileExpressionTest()", "original_string": "    @Test\n    void fileExpressionTest() throws IOException {\n        Path path = Paths.get(\"src/test/test.txt\");\n        assertThat(String.join(System.lineSeparator(), Files.readAllLines(path)))\n            .isNotEqualTo(fakeValuesService.fileExpression(path, faker, context));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionCompletelyUnresolvable()", "name": "expressionCompletelyUnresolvable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void expressionCompletelyUnresolvable()", "original_string": "    @Test\n    void expressionCompletelyUnresolvable() {\n        expressionShouldFailWithContaining(\"#{x}\", \"Unable to resolve #{x} directive\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTwo things are important here:\n1) the message in the exception should be USEFUL\n2) a {@link RuntimeException} should be thrown.\n<p>\nif the message changes, it's ok to update the test provided\nthe two conditions above are still true.\n"}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]resolveUsingTheSameKeyTwice()", "name": "resolveUsingTheSameKeyTwice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void resolveUsingTheSameKeyTwice()", "original_string": "    @Test\n    void resolveUsingTheSameKeyTwice() {\n        // #{hello} -> DummyService.hello\n\n        // given\n        final DummyService dummy = mock(DummyService.class);\n        when(dummy.hello()).thenReturn(\"1\").thenReturn(\"2\");\n\n        // when\n        final String actual = fakeValuesService.resolve(\"property.sameResolution\", dummy, mockedFaker, mockedFaker.getContext());\n\n        // then\n        assertThat(actual).isEqualTo(\"1 2\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java.RandomService_nextLongTest.[void]testNextLongWithPositiveBound()", "name": "testNextLongWithPositiveBound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextLongWithPositiveBound()", "original_string": "    @Test\n    public void testNextLongWithPositiveBound() {\n        when(mockRandom.nextLong()).thenReturn(1234567890L);\n        long result = randomService.nextLong(100L);\n        assertEquals(90L, result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java", "class_name": "RandomService_nextLongTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java.RandomService_nextLongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java.RandomService_nextLongTest.[void]testNextLongWithNonPositiveBound()", "name": "testNextLongWithNonPositiveBound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextLongWithNonPositiveBound()", "original_string": "    @Test\n    public void testNextLongWithNonPositiveBound() {\n        assertThrows(IllegalArgumentException.class, () -> randomService.nextLong(0L));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java", "class_name": "RandomService_nextLongTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java.RandomService_nextLongTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest.[void]testPrimitiveToWrapper_Primitive()", "name": "testPrimitiveToWrapper_Primitive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPrimitiveToWrapper_Primitive()", "original_string": "    @Test\n    void testPrimitiveToWrapper_Primitive() {\n        Class<?> result = FakeValuesService.primitiveToWrapper(int.class);\n        assertEquals(Integer.class, result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java", "class_name": "FakeValuesService_primitiveToWrapperTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest.[void]testPrimitiveToWrapper_NonPrimitive()", "name": "testPrimitiveToWrapper_NonPrimitive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPrimitiveToWrapper_NonPrimitive()", "original_string": "    @Test\n    void testPrimitiveToWrapper_NonPrimitive() {\n        Class<?> result = FakeValuesService.primitiveToWrapper(String.class);\n        assertEquals(String.class, result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java", "class_name": "FakeValuesService_primitiveToWrapperTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest.[void]testPrimitiveToWrapper_Null()", "name": "testPrimitiveToWrapper_Null", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPrimitiveToWrapper_Null()", "original_string": "    @Test\n    void testPrimitiveToWrapper_Null() {\n        Class<?> result = FakeValuesService.primitiveToWrapper(null);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java", "class_name": "FakeValuesService_primitiveToWrapperTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/files/EnFileTest.java.EnFileTest.[void]fileNameConvention()", "name": "fileNameConvention", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void fileNameConvention()", "original_string": "    @Test\n    void fileNameConvention() {\n        assertThat(EnFile.getFiles()).allSatisfy(e -> assertThat(e.getFile()).isLowerCase());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/files/EnFileTest.java", "class_name": "EnFileTest", "class_uri": "src/test/java/net/datafaker/service/files/EnFileTest.java.EnFileTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTo adhere to conventions, please use lowercase names only.\n"}, {"uris": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java.WordUtilsTest.[void]capitalizeWord()", "name": "capitalizeWord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void capitalizeWord()", "original_string": "    @Test\n    void capitalizeWord() {\n        assertThat(WordUtils.capitalize(\"w\")).isEqualTo(\"W\");\n        assertThat(WordUtils.capitalize(\"W\")).isEqualTo(\"W\");\n\n        assertThat(WordUtils.capitalize(\"word\")).isEqualTo(\"Word\");\n        assertThat(WordUtils.capitalize(\"Word\")).isEqualTo(\"Word\");\n        assertThat(WordUtils.capitalize(\"WORD\")).isEqualTo(\"WORD\");\n        assertThat(WordUtils.capitalize(\"wORD\")).isEqualTo(\"WORD\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java", "class_name": "WordUtilsTest", "class_uri": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java.WordUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java.WordUtilsTest.[void]capitalizeNull()", "name": "capitalizeNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void capitalizeNull()", "original_string": "    @Test\n    void capitalizeNull() {\n        assertThat(WordUtils.capitalize(null)).isNull();\n        assertThat(WordUtils.capitalize(\"\")).isEmpty();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java", "class_name": "WordUtilsTest", "class_uri": "src/test/java/net/datafaker/internal/helper/WordUtilsTest.java.WordUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java.FakerIDNTest.[void]toASCIINoError()", "name": "toASCIINoError", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toASCIINoError()", "original_string": "    @Test\n    void toASCIINoError() {\n        assertThat(FakerIDN.toASCII(\"hello\")).isEqualTo(\"hello\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java", "class_name": "FakerIDNTest", "class_uri": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java.FakerIDNTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java.FakerIDNTest.[void]toASCIIResultIsEmptyException()", "name": "toASCIIResultIsEmptyException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void toASCIIResultIsEmptyException()", "original_string": "    @Test\n    void toASCIIResultIsEmptyException() { // http://\u023abby.com\n        assertThatThrownBy(() -> FakerIDN.toASCII(\"\u023a\"))\n            .isInstanceOf(RuntimeException.class);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java", "class_name": "FakerIDNTest", "class_uri": "src/test/java/net/datafaker/internal/helper/FakerIDNTest.java.FakerIDNTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest.[void]testCapitalize_nullInput()", "name": "testCapitalize_nullInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCapitalize_nullInput()", "original_string": "    @Test\n    public void testCapitalize_nullInput() {\n        assertNull(WordUtils.capitalize(null));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java", "class_name": "WordUtils_capitalizeTest", "class_uri": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest.[void]testCapitalize_emptyInput()", "name": "testCapitalize_emptyInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCapitalize_emptyInput()", "original_string": "    @Test\n    public void testCapitalize_emptyInput() {\n        assertEquals(\"\", WordUtils.capitalize(\"\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java", "class_name": "WordUtils_capitalizeTest", "class_uri": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest.[void]testCapitalize_alreadyCapitalized()", "name": "testCapitalize_alreadyCapitalized", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCapitalize_alreadyCapitalized()", "original_string": "    @Test\n    public void testCapitalize_alreadyCapitalized() {\n        assertEquals(\"Hello\", WordUtils.capitalize(\"Hello\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java", "class_name": "WordUtils_capitalizeTest", "class_uri": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest.[void]testCapitalize_needsCapitalization()", "name": "testCapitalize_needsCapitalization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCapitalize_needsCapitalization()", "original_string": "    @Test\n    public void testCapitalize_needsCapitalization() {\n        assertEquals(\"World\", WordUtils.capitalize(\"world\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java", "class_name": "WordUtils_capitalizeTest", "class_uri": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java.WordUtils_capitalizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]singleWord()", "name": "singleWord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void singleWord()", "original_string": "    @Test\n    void singleWord() {\n        assertThat(toJavaNames(\"variety\", false)).isEqualTo(\"Variety\");\n        assertThat(toJavaNames(\"variety\", true)).isEqualTo(\"variety\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]emptyString()", "name": "emptyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void emptyString()", "original_string": "    @Test\n    void emptyString() {\n        assertThat(toJavaNames(\"\", false)).isEqualTo(\"\");\n        assertThat(toJavaNames(\"\", true)).isEqualTo(\"\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]nullString()", "name": "nullString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void nullString()", "original_string": "    @Test\n    void nullString() {\n        assertThat(toJavaNames(null, false)).isNull();\n        assertThat(toJavaNames(null, true)).isNull();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]wordWithDigit()", "name": "wordWithDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void wordWithDigit()", "original_string": "    @Test\n    void wordWithDigit() {\n        assertThat(toJavaNames(\"dota2\", false)).isEqualTo(\"Dota2\");\n        assertThat(toJavaNames(\"dota2\", true)).isEqualTo(\"dota2\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]wordStartingWithDigit()", "name": "wordStartingWithDigit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void wordStartingWithDigit()", "original_string": "    @Test\n    void wordStartingWithDigit() {\n        assertThat(toJavaNames(\"1love\", false)).isEqualTo(\"1love\");\n        assertThat(toJavaNames(\"1love\", true)).isEqualTo(\"1love\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]singleCharacter()", "name": "singleCharacter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void singleCharacter()", "original_string": "    @Test\n    void singleCharacter() {\n        assertThat(toJavaNames(\"x\", false)).isEqualTo(\"X\");\n        assertThat(toJavaNames(\"x\", true)).isEqualTo(\"x\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]singleCharacterUnderscore()", "name": "singleCharacterUnderscore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void singleCharacterUnderscore()", "original_string": "    @Test\n    void singleCharacterUnderscore() {\n        assertThat(toJavaNames(\"_\", false)).isEqualTo(\"\");\n        assertThat(toJavaNames(\"_\", true)).isEqualTo(\"\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]onlyUnderscores()", "name": "onlyUnderscores", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void onlyUnderscores()", "original_string": "    @Test\n    void onlyUnderscores() {\n        assertThat(toJavaNames(\"__\", false)).isEqualTo(\"\");\n        assertThat(toJavaNames(\"___\", true)).isEqualTo(\"\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]multipleWordsSeparatedByUnderscores()", "name": "multipleWordsSeparatedByUnderscores", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void multipleWordsSeparatedByUnderscores()", "original_string": "    @Test\n    void multipleWordsSeparatedByUnderscores() {\n        assertThat(toJavaNames(\"big_bang_theory\", false)).isEqualTo(\"BigBangTheory\");\n        assertThat(toJavaNames(\"big_bang_theory\", true)).isEqualTo(\"bigBangTheory\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]multipleUnderscoresInRow()", "name": "multipleUnderscoresInRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void multipleUnderscoresInRow()", "original_string": "    @Test\n    void multipleUnderscoresInRow() {\n        assertThat(toJavaNames(\"big__bang___theory\", false)).isEqualTo(\"BigBangTheory\");\n        assertThat(toJavaNames(\"big__bang___theory\", true)).isEqualTo(\"bigBangTheory\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]upperFirstCharacterWithoutUnderscores()", "name": "upperFirstCharacterWithoutUnderscores", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void upperFirstCharacterWithoutUnderscores()", "original_string": "    @Test\n    void upperFirstCharacterWithoutUnderscores() {\n        assertThat(toJavaNames(\"A2013\", false)).isEqualTo(\"A2013\");\n        assertThat(toJavaNames(\"A2013\", true)).isEqualTo(\"a2013\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]upperFirstCharacterWithUnderscores()", "name": "upperFirstCharacterWithUnderscores", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void upperFirstCharacterWithUnderscores()", "original_string": "    @Test\n    void upperFirstCharacterWithUnderscores() {\n        assertThat(toJavaNames(\"IATA_airline\", false)).isEqualTo(\"IATAAirline\");\n        assertThat(toJavaNames(\"IATA_airline\", true)).isEqualTo(\"iATAAirline\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest.[void]endingWithUnderscore()", "name": "endingWithUnderscore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void endingWithUnderscore()", "original_string": "    @Test\n    void endingWithUnderscore() {\n        assertThat(toJavaNames(\"name_\", false)).isEqualTo(\"Name\");\n        assertThat(toJavaNames(\"name_\", true)).isEqualTo(\"name\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java", "class_name": "JavaNamesTest", "class_uri": "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java.JavaNamesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/CsvTransformer_getStartStreamTest.java.CsvTransformer_getStartStreamTest.[void]testGetStartStream()", "name": "testGetStartStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetStartStream()", "original_string": "    @Test\n    public void testGetStartStream() {\n        // Given\n        CsvTransformer<Object> transformer = CsvTransformer.builder().header(false).build();\n\n        // When\n        String result = transformer.getStartStream(Schema.of(Field.field(\"test\", () -> \"\")));\n\n        // Then\n        assertEquals(\"\", result);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/CsvTransformer_getStartStreamTest.java", "class_name": "CsvTransformer_getStartStreamTest", "class_uri": "src/test/java/net/datafaker/transformations/CsvTransformer_getStartStreamTest.java.CsvTransformer_getStartStreamTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest.[void]javaObjectTest()", "name": "javaObjectTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void javaObjectTest()", "original_string": "    @Test\n    void javaObjectTest() {\n        JavaObjectTransformer jTransformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = Schema.of(\n            field(\"firstName\", () -> faker.name().firstName()),\n            field(\"lastName\", () -> faker.name().lastName()),\n            field(\"birthDate\", () -> faker.date().birthday()),\n            field(\"registrationDate\", () -> faker.timeAndDate().past()),\n            field(\"id\", () -> faker.number().positive()));\n\n        Collection<Person> persons = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Person person = (Person) jTransformer.apply(Person.class, schema);\n            assertThat(person.birthDate).isNotNull();\n            assertThat(person.lastName).isNotNull();\n            assertThat(person.firstName).isNotNull();\n            assertThat(person.registrationDate).isNotNull();\n            persons.add(person);\n        }\n        assertThat(persons).hasSize(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java", "class_name": "JavaObjectTransformerTest", "class_uri": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest.[void]javaRecordTest()", "name": "javaRecordTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void javaRecordTest()", "original_string": "    @Test\n    void javaRecordTest() {\n        JavaObjectTransformer jTransformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = Schema.of(\n            field(\"firstName\", () -> faker.name().firstName()),\n            field(\"lastName\", () -> faker.name().lastName()),\n            field(\"phoneNumber\", () -> faker.phoneNumber().phoneNumberInternational()),\n            field(\"registrationDate\", () -> faker.timeAndDate().past()),\n            field(\"id\", () -> faker.number().positive()));\n\n        Collection<Client> clients = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Client client = (Client) jTransformer.apply(Client.class, schema);\n            assertThat(client.firstName()).isNotNull();\n            assertThat(client.lastName()).isNotNull();\n            assertThat(client.phoneNumber()).isNotNull();\n            assertThat(client.registrationDate()).isNotNull();\n            clients.add(client);\n        }\n        assertThat(clients).hasSize(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java", "class_name": "JavaObjectTransformerTest", "class_uri": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest.[void]javaStreamingTest()", "name": "javaStreamingTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void javaStreamingTest()", "original_string": "    @Test\n    void javaStreamingTest() {\n        JavaObjectTransformer jTransformer = (new JavaObjectTransformer()).from(Person.class);\n        Schema<Object, ?> schema = Schema.of(\n            field(\"firstName\", () -> faker.name().firstName()),\n            field(\"lastName\", () -> faker.name().lastName()),\n            field(\"birthDate\", () -> faker.date().birthday()),\n            field(\"registrationDate\", () -> faker.timeAndDate().past())\n            );\n\n        Collection<Person> persons = new ArrayList<>();\n        jTransformer\n            .generateStream(schema, 10)\n            .map(object -> (Person) object)\n            .forEach(person -> {\n                assertThat(person.birthDate).isNotNull();\n                assertThat(person.lastName).isNotNull();\n                assertThat(person.firstName).isNotNull();\n                assertThat(person.registrationDate).isNotNull();\n                persons.add((Person)person);\n            });\n\n        assertThat(persons).hasSize(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java", "class_name": "JavaObjectTransformerTest", "class_uri": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest.[void]javaEmptyStreamTest()", "name": "javaEmptyStreamTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void javaEmptyStreamTest()", "original_string": "    @Test\n    void javaEmptyStreamTest() {\n        JavaObjectTransformer jTransformer = (new JavaObjectTransformer());\n        Schema<Object, ?> schema = Schema.of(\n            field(\"firstName\", () -> faker.name().firstName()),\n            field(\"lastName\", () -> faker.name().lastName()),\n            field(\"birthDate\", () -> faker.date().birthday()),\n            field(\"registrationDate\", () -> faker.timeAndDate().past())\n        );\n\n        assertThat(jTransformer.generateStream(schema, 10).count()).isEqualTo(0);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java", "class_name": "JavaObjectTransformerTest", "class_uri": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest.[void]javaCollectionTest()", "name": "javaCollectionTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void javaCollectionTest()", "original_string": "    @Test\n    void javaCollectionTest() {\n        JavaObjectTransformer jTransformer = (new JavaObjectTransformer()).from(Person.class);\n        Schema<Object, ?> schema = Schema.of(\n            field(\"firstName\", () -> faker.name().firstName()),\n            field(\"lastName\", () -> faker.name().lastName()),\n            field(\"birthDate\", () -> faker.date().birthday()),\n            field(\"registrationDate\", () -> faker.timeAndDate().past())\n        );\n\n        Collection<Person> persons = new ArrayList<>();\n        jTransformer\n            .generate(schema, 10)\n            .stream()\n            .map(object -> (Person) object)\n            .forEach(person -> {\n                assertThat(person.birthDate).isNotNull();\n                assertThat(person.lastName).isNotNull();\n                assertThat(person.firstName).isNotNull();\n                assertThat(person.registrationDate).isNotNull();\n                persons.add((Person)person);\n            });\n\n        assertThat(persons).hasSize(10);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java", "class_name": "JavaObjectTransformerTest", "class_uri": "src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java.JavaObjectTransformerTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java.SqlTransformer_generateStreamTest.[void]testGenerateStreamWithEmptySchema()", "name": "testGenerateStreamWithEmptySchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGenerateStreamWithEmptySchema()", "original_string": "    @Test\n    public void testGenerateStreamWithEmptySchema() {\n        // Given\n        Schema<Object, ?> emptySchema = Schema.of();\n        SqlTransformer<Object> transformer = SqlTransformer.builder().build();\n\n        // When\n        Stream<CharSequence> result = transformer.generateStream(emptySchema, 10);\n\n        // Then\n        assertTrue(result.findAny().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java", "class_name": "SqlTransformer_generateStreamTest", "class_uri": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java.SqlTransformer_generateStreamTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java.SqlTransformer_generateStreamTest.[void]testGenerateStreamWithBatchMode()", "name": "testGenerateStreamWithBatchMode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGenerateStreamWithBatchMode()", "original_string": "    @Test\n    public void testGenerateStreamWithBatchMode() {\n        // Given\n        Schema<Object, ?> schema = Schema.of(new SimpleField<>(\"field1\", o -> \"value1\"));\n        SqlTransformer<Object> transformer = SqlTransformer.builder().batch(2).build();\n\n        // When\n        Stream<CharSequence> result = transformer.generateStream(schema, 5);\n\n        // Then\n        assertEquals(3, result.count());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java", "class_name": "SqlTransformer_generateStreamTest", "class_uri": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java.SqlTransformer_generateStreamTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java.SqlTransformer_generateStreamTest.[void]testGenerateStreamWithoutBatchMode()", "name": "testGenerateStreamWithoutBatchMode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGenerateStreamWithoutBatchMode()", "original_string": "    @Test\n    public void testGenerateStreamWithoutBatchMode() {\n        // Given\n        Schema<Object, ?> schema = Schema.of(new SimpleField<>(\"field1\", o -> \"value1\"));\n        SqlTransformer<Object> transformer = SqlTransformer.builder().build();\n\n        // When\n        Stream<CharSequence> result = transformer.generateStream(schema, 5);\n\n        // Then\n        assertEquals(5, result.count());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java", "class_name": "SqlTransformer_generateStreamTest", "class_uri": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java.SqlTransformer_generateStreamTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]