{"file_path": "src/test/java/net/datafaker/providers/base/CodeTest.java", "testclass_name": "CodeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.apache.commons.validator.routines.ISBNValidator;", "import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;", "import org.apache.commons.validator.routines.checkdigit.LuhnCheckDigit;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "CodeTest", "description": "Test suite for validating various code generation functionalities in the BaseFaker class.", "class_members": {"variables": [], "methods": [{"name": "assertIsValidISBN10", "signature": "void assertIsValidISBN10(String, ISBNValidator)"}, {"name": "assertIsValidISBN13", "signature": "void assertIsValidISBN13(String, ISBNValidator)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "isbn10DefaultIsNoSeparator", "primary_tested": ["BaseFaker.code().isbn10()"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN10(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-10 codes without separators."}, {"name": "isbn13DefaultIsNoSeparator", "primary_tested": ["BaseFaker.code().isbn13()"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN13(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-13 codes without separators."}, {"name": "testIsbn10", "primary_tested": ["BaseFaker.code().isbn10(boolean)"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN10(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-10 codes with and without separators."}, {"name": "testIsbn13", "primary_tested": ["BaseFaker.code().isbn13(boolean)"], "associated_methods": ["ISBNValidator.getInstance(boolean)", "CodeTest.assertIsValidISBN13(String, ISBNValidator)"], "external_dependencies": {"modules": ["BaseFaker", "ISBNValidator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-13 codes with and without separators."}, {"name": "testOverrides", "primary_tested": ["BaseFaker.code().isbn10(boolean)", "BaseFaker.code().isbn13(boolean)"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN-10 and ISBN-13 codes with separators using a specific locale."}, {"name": "asin", "primary_tested": ["BaseFaker.code().asin()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ASIN codes."}, {"name": "imei", "primary_tested": ["BaseFaker.code().imei()"], "associated_methods": ["LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(String)"], "external_dependencies": {"modules": ["BaseFaker", "LuhnCheckDigit"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of IMEI codes and validates them using the Luhn algorithm."}, {"name": "ean8", "primary_tested": ["BaseFaker.code().ean8()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of EAN-8 codes."}, {"name": "gtin8", "primary_tested": ["BaseFaker.code().gtin8()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of GTIN-8 codes."}, {"name": "ean13", "primary_tested": ["BaseFaker.code().ean13()"], "associated_methods": ["EAN13CheckDigit.EAN13_CHECK_DIGIT.isValid(String)"], "external_dependencies": {"modules": ["BaseFaker", "EAN13CheckDigit"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of EAN-13 codes and validates them using the EAN-13 check digit algorithm."}, {"name": "gtin13", "primary_tested": ["BaseFaker.code().gtin13()"], "associated_methods": ["EAN13CheckDigit.EAN13_CHECK_DIGIT.isValid(String)"], "external_dependencies": {"modules": ["BaseFaker", "EAN13CheckDigit"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of GTIN-13 codes and validates them using the EAN-13 check digit algorithm."}, {"name": "isbnGs1", "primary_tested": ["BaseFaker.code().isbnGs1()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN GS1 prefixes."}, {"name": "isbnGroup", "primary_tested": ["BaseFaker.code().isbnGroup()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN group identifiers."}, {"name": "isbnRegistrant", "primary_tested": ["BaseFaker.code().isbnRegistrant()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of ISBN registrant codes."}]}