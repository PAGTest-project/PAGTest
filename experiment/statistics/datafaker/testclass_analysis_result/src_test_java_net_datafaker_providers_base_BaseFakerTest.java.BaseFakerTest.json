{"file_path": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "testclass_name": "BaseFakerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.TestInfo;", "import org.junit.jupiter.api.TestInstance;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.mockito.MockitoAnnotations;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import java.util.function.Supplier;", "import java.util.logging.Level;", "import java.util.logging.Logger;", "import java.util.regex.Pattern;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "BaseFakerTest", "description": "Test suite for BaseFaker class, focusing on parameterized tests for provider lists and ensuring no duplications.", "class_members": {"variables": [{"name": "LOG", "type": "static final Logger"}, {"name": "faker", "type": "T"}], "methods": [{"name": "getFaker", "signature": "protected T getFaker()"}, {"name": "getBaseList", "signature": "protected List<String> getBaseList(String key)"}, {"name": "providerListTest", "signature": "protected Collection<TestSpec> providerListTest()"}], "nested_classes": [{"name": "TestSpec", "description": "Internal class to encapsulate test specifications for parameterized tests."}]}, "fixtures": ["resetMocks"], "test_cases": [{"name": "testProviderList", "primary_tested": ["BaseFaker.fakeValuesService().fetchObject(String,Context)"], "associated_methods": ["TestSpec.supplier.get()"], "external_dependencies": {"modules": ["Logger", "HashSet", "Pattern", "TestInfo"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "getBaseList", "type": "method"}], "project_specific_resources": ["Logger.log(Level,String)"]}, "category": "unit", "fixtures_used": ["resetMocks"], "description": "Tests that the provider list for a given key is not empty and contains the expected item, and that the item matches the specified regex if provided."}, {"name": "testNoDuplications", "primary_tested": ["BaseFaker.fakeValuesService().fetchObject(String,Context)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSet"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "getBaseList", "type": "method"}]}, "category": "unit", "fixtures_used": ["resetMocks"], "description": "Tests that there are no duplications in the provider list for a given key."}]}