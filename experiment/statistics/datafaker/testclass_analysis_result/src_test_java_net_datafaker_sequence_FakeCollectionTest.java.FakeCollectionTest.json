{"file_path": "src/test/java/net/datafaker/sequence/FakeCollectionTest.java", "testclass_name": "FakeCollectionTest", "dependencies": ["package net.datafaker.sequence;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.providers.base.Address;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.providers.base.Number;", "import net.datafaker.transformations.CompositeField;", "import net.datafaker.transformations.CsvTransformer;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.JsonTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.List;", "import java.util.Random;", "import java.util.function.Supplier;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "FakeCollectionTest", "description": "Test suite for generating collections and sequences using the FakeCollection class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "generateCollection", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection of names with a specified size range."}, {"name": "generateSequence", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a sequence of digits with a specified size range."}, {"name": "generateSequenceOfDefaultSize", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a sequence of digits with default size."}, {"name": "generateEmptySequence", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of an empty sequence."}, {"name": "isInfiniteTest", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the infinite property of a sequence."}, {"name": "generateSequence5", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a sequence of digits with a fixed size of 5."}, {"name": "generateNullCollection", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection of names with a null rate of 1."}, {"name": "illegalNullRate", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the handling of illegal null rates."}, {"name": "generateCollectionPassingSuppliersAsList", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection of names by passing suppliers as a list."}, {"name": "generateCollectionWithRepeatableFaker", "primary_tested": ["Name.firstName()", "Name.lastName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection of names with a repeatable faker."}, {"name": "generateCollectionWithDifferentObjects", "primary_tested": ["Name.firstName()", "Number.random().nextInt(int)"], "external_dependencies": {"modules": ["Name", "Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a collection with different types of objects."}, {"name": "checkWrongArguments", "primary_tested": ["Name.firstName()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the handling of wrong arguments for collection generation."}, {"name": "toCsv", "primary_tested": ["CsvTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["CsvTransformer", "Schema", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of CSV data from a collection."}, {"name": "toJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON data from a collection."}, {"name": "toNestedJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema", "BaseFaker", "Address"], "class_members": []}, "category": "unit", "description": "Tests the generation of nested JSON data from a collection."}, {"name": "singletonTest", "primary_tested": ["BloodPressure.new()", "Glucose.new()", "Temperature.new()"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a singleton from a collection."}, {"name": "testIterator", "primary_tested": ["Number.digit()"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the iteration over a sequence of digits."}]}