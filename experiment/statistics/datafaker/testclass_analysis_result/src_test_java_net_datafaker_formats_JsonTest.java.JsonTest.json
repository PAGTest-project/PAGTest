{"file_path": "src/test/java/net/datafaker/formats/JsonTest.java", "testclass_name": "JsonTest", "dependencies": ["package net.datafaker.formats;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.sequence.FakeSequence;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.JsonTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.AbstractMap;", "import java.util.Collections;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.Random;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static net.datafaker.transformations.Transformer.LINE_SEPARATOR;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;", "import static org.junit.jupiter.params.provider.Arguments.of;"], "name": "JsonTest", "description": "Test suite for JsonTransformer functionality, including generating JSON from schemas and sequences.", "class_members": {"variables": [], "methods": [{"name": "entry", "signature": "Map.Entry<Supplier<String>, Supplier<Object>> entry(Supplier<String> key, Supplier<Object> value)"}, {"name": "map", "signature": "Map<Supplier<String>, Supplier<Object>> map(Map.Entry<Supplier<String>, Supplier<Object>>... entries)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testJsonStream", "primary_tested": ["JsonTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "Collectors"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of a JSON stream from a schema."}, {"name": "testGenerateFromSchemaWithLimit", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of JSON from a schema with a limit on the number of objects."}, {"name": "testGenerateFromFakeSequenceCollectionWithoutComma", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of JSON from a fake sequence collection without commas between objects."}, {"name": "testGenerateFromFakeSequenceCollection", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of JSON from a fake sequence collection."}, {"name": "testGenerateFromFakeSequenceStream", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of JSON from a fake sequence stream."}, {"name": "testGenerateFromInfiniteFakeSequence", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of JSON from an infinite fake sequence, expecting an exception."}, {"name": "simpleJsonTestForJsonTransformer", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Tests the generation of simple JSON from a schema."}, {"name": "outputArrayJsonTestForJsonTransformer", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Tests the generation of an array JSON output from a schema."}, {"name": "outputWithoutCommaForJsonTransformer", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["Schema", "JsonTransformer"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON output without commas between objects from a schema."}, {"name": "jsonWithDifferentFieldFormatsInOneObjectTest", "primary_tested": ["JsonTransformer.generate(FakeSequence,Schema)"], "external_dependencies": {"modules": ["BaseFaker", "Schema", "JsonTransformer", "FakeSequence"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of JSON with different field formats in one object."}, {"name": "jsonObjectCollectionTest", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a schema with an object collection."}, {"name": "jsonCollectionOfCollectionsTest", "primary_tested": ["JsonTransformer.generate(Schema,int)"], "external_dependencies": {"modules": ["JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the generation of JSON from a schema with a collection of collections."}]}