{"file_path": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "testclass_name": "DateAndTimeTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.sql.Timestamp;", "import java.time.Duration;", "import java.time.LocalDate;", "import java.time.LocalDateTime;", "import java.time.LocalTime;", "import java.time.Period;", "import java.time.ZoneId;", "import java.time.format.DateTimeFormatter;", "import java.time.temporal.ChronoUnit;", "import java.time.zone.ZoneRules;", "import java.util.Date;", "import java.util.concurrent.TimeUnit;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "DateAndTimeTest", "description": "Unit tests for DateAndTime functionality, including future and past date generation, date ranges, birthdays, and durations.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}]}, "fixtures": [], "test_cases": [{"name": "testFutureDate", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime", "TimeUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of future dates within a specified range."}, {"name": "testFutureDateWithMinimum", "primary_tested": ["DateAndTime.future(int,int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of future dates with a minimum and maximum range."}, {"name": "testPastDateWithMinimum", "primary_tested": ["DateAndTime.past(int,int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of past dates with a minimum and maximum range."}, {"name": "testPastDateWithReferenceDate", "primary_tested": ["DateAndTime.past(int,TimeUnit,Date)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit", "Date"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of past dates relative to a reference date."}, {"name": "testPastDate", "primary_tested": ["DateAndTime.past(int,TimeUnit)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit", "Date"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of past dates within a specified range."}, {"name": "testBetween", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of dates between two specified timestamps."}, {"name": "testBetweenWithMaskReturningString", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp,String)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime", "DateTimeFormatter"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of dates between two specified timestamps with a date format mask."}, {"name": "testBetweenDateAsArgument", "primary_tested": ["DateAndTime.between(Date,Date)"], "external_dependencies": {"modules": ["DateAndTime", "Date"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of dates between two specified Date objects."}, {"name": "testBetweenThenLargerThanNow", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["Timestamp", "DateAndTime"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of an invalid date range where the upper bound is before the lower bound."}, {"name": "testBirthday", "primary_tested": ["DateAndTime.birthday()"], "external_dependencies": {"modules": ["DateAndTime", "LocalDateTime", "ZoneId", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of birthdays within a specified age range."}, {"name": "testBirthdayWithAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDateTime", "ZoneId", "ZoneRules", "Timestamp"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of birthdays within a specified age range with minimum and maximum ages."}, {"name": "birthdayWithMask", "primary_tested": ["DateAndTime.birthday(int,int,String)"], "external_dependencies": {"modules": ["DateAndTime", "DateTimeFormatter"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of birthdays with a date format mask."}, {"name": "futureWithMask", "primary_tested": ["DateAndTime.future(int,TimeUnit,String)", "DateAndTime.future(int,int,TimeUnit,String)", "DateAndTime.future(int,TimeUnit,Date,String)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit", "DateTimeFormatter", "Date"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of future dates with a date format mask."}, {"name": "pastWithMask", "primary_tested": ["DateAndTime.past(int,TimeUnit,String)", "DateAndTime.past(int,int,TimeUnit,String)", "DateAndTime.past(int,TimeUnit,Date,String)"], "external_dependencies": {"modules": ["DateAndTime", "TimeUnit", "DateTimeFormatter", "Date"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of past dates with a date format mask."}, {"name": "periodTest", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of periods within a specified range."}, {"name": "invalidDuration", "primary_tested": ["DateAndTime.duration(long,String)"], "external_dependencies": {"modules": ["DateAndTime"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of invalid duration units."}, {"name": "durationTest", "primary_tested": ["DateAndTime.duration(long,long,ChronoUnit)", "DateAndTime.duration(long,ChronoUnit)", "DateAndTime.duration(long,long,String)", "DateAndTime.duration(long,String)"], "external_dependencies": {"modules": ["DateAndTime", "Duration", "ChronoUnit"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the generation of durations within a specified range."}, {"name": "maxLessThanMinPeriod", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the handling of an invalid period range where the maximum period is less than the minimum period."}]}