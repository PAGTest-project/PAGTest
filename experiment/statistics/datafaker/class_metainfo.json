[{"uris": "src/test/java/net/datafaker/AbstractFakerTest.java.AbstractFakerTest", "name": "AbstractFakerTest", "file_path": "src/test/java/net/datafaker/AbstractFakerTest.java", "superclasses": "", "methods": ["[Faker]getFaker()"], "method_uris": ["src/test/java/net/datafaker/AbstractFakerTest.java.AbstractFakerTest.[Faker]getFaker()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AbstractFakerTest extends BaseFakerTest<Faker> {\n    protected Faker getFaker() {\n        return new Faker();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "name": "TestSetupExtension", "file_path": "src/test/java/net/datafaker/TestSetupExtension.java", "superclasses": "", "methods": ["[void]beforeAll(ExtensionContext)", "[void]afterAll(ExtensionContext)", "[void]beforeEach(ExtensionContext)", "[void]afterEach(ExtensionContext)", "[String]verdict(ExtensionContext)", "[String]memory()", "[long]mb(long)"], "method_uris": ["src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]beforeAll(ExtensionContext)", "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]afterAll(ExtensionContext)", "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]beforeEach(ExtensionContext)", "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]afterEach(ExtensionContext)", "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[String]verdict(ExtensionContext)", "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[String]memory()", "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[long]mb(long)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSetupExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback {\n  private static final AtomicLong counter = new AtomicLong(1000);\n  private static final ExtensionContext.Namespace namespace = ExtensionContext.Namespace.create(TestSetupExtension.class);\n\n  @Override\n  public void beforeAll(ExtensionContext context) throws IOException, URISyntaxException {\n      String loggingConfig = new File(getClass().getResource(\"/logging.properties\").toURI()).getAbsolutePath();\n      System.setProperty(\"java.util.logging.config.file\", loggingConfig);\n      getLogManager().readConfiguration();\n\n      Logger.getLogger(context.getDisplayName()).info(() -> \"Starting tests (%s)\".formatted(memory()));\n  }\n\n  @Override\n  public void afterAll(ExtensionContext context) {\n      Logger.getLogger(context.getDisplayName()).info(() -> \"Finished tests - %s (%s)\".formatted(verdict(context), memory()));\n  }\n\n  @Override\n  public void beforeEach(ExtensionContext context) {\n    TimeZone.setDefault(TimeZone.getTimeZone(\"Asia/Kaohsiung\"));\n    long testId = counter.incrementAndGet();\n    context.getStore(namespace).put(\"test-id\", testId);\n    context.getStore(namespace).put(\"original-thread-name\", Thread.currentThread().getName());\n\n    Thread.currentThread().setName(\"%s.%s#%d#\".formatted(context.getRequiredTestClass().getSimpleName(), context.getRequiredTestMethod().getName(), testId));\n\n    Logger.getLogger(context.getRequiredTestClass().getName()).info(() -> \"starting %s (%s)...\".formatted(context.getDisplayName(), memory()));\n    ThreadLocalLogHandler.start();\n  }\n\n  @Override\n  public void afterEach(ExtensionContext context) {\n      ThreadLocalLogHandler.finish(context.getExecutionException().isPresent());\n\n      Logger.getLogger(context.getRequiredTestClass().getName())\n          .info(() -> \"finished %s - %s (%s)\".formatted(context.getDisplayName(), verdict(context), memory()));\n\n      String originalThreadName = context.getStore(namespace).remove(\"original-thread-name\", String.class);\n      Thread.currentThread().setName(originalThreadName);\n      context.getStore(namespace).remove(\"test-id\");\n      TimeZone.setDefault(TimeZone.getTimeZone(\"Asia/Kaohsiung\"));\n  }\n\n  private String verdict(ExtensionContext context) {\n    return context.getExecutionException().isPresent() ?\n      (context.getExecutionException().get() instanceof TestAbortedException ? \"skipped\" : \"NOK\") :\n      \"OK\";\n  }\n\n  private String memory() {\n    long freeMemory = Runtime.getRuntime().freeMemory();\n    long maxMemory = Runtime.getRuntime().maxMemory();\n    long totalMemory = Runtime.getRuntime().totalMemory();\n    long usedMemory = totalMemory - freeMemory;\n    return \"memory used:\" + mb(usedMemory) + \", free:\" + mb(freeMemory) + \", total:\" + mb(totalMemory) + \", max:\" + mb(maxMemory);\n  }\n\n  private long mb(long bytes) {\n    return bytes / 1024 / 1024;\n  }\n}", "super_interfaces": ["BeforeAllCallback", "AfterAllCallback", "BeforeEachCallback", "AfterEachCallback"], "fields": [{"attribute_expression": "private static final AtomicLong counter = new AtomicLong(1000);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "AtomicLong", "name": "counter = new AtomicLong(1000)", "syntax_pass": true}, {"attribute_expression": "private static final ExtensionContext.Namespace namespace = ExtensionContext.Namespace.create(TestSetupExtension.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ExtensionContext.Namespace", "name": "namespace = ExtensionContext.Namespace.create(TestSetupExtension.class)", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/LogFormatter.java.LogFormatter", "name": "LogFormatter", "file_path": "src/test/java/net/datafaker/LogFormatter.java", "superclasses": "SimpleFormatter", "methods": ["[String]format(LogRecord)", "[String]time(LogRecord)"], "method_uris": ["src/test/java/net/datafaker/LogFormatter.java.LogFormatter.[String]format(LogRecord)", "src/test/java/net/datafaker/LogFormatter.java.LogFormatter.[String]time(LogRecord)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class LogFormatter extends SimpleFormatter {\n    private static final DateTimeFormatter dt = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSSSSS\");\n\n    @Override\n    public String format(LogRecord record) {\n        return \"[%s] %s %s\".formatted(currentThread().getName(), time(record), super.format(record));\n    }\n\n    private static String time(LogRecord record) {\n        return dt.format(record.getInstant().atZone(systemDefault()));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final DateTimeFormatter dt = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSSSSS\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateTimeFormatter", "name": "dt = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSSSSS\")", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "name": "ThreadLocalLogHandler", "file_path": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "superclasses": "Handler", "methods": ["[void]publish(LogRecord)", "[void]flush()", "[void]close()", "[void]start()", "[void]finish(boolean)", "[LogRecord]summaryLog(List<LogRecord>)"], "method_uris": ["src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]publish(LogRecord)", "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]flush()", "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]close()", "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]start()", "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]finish(boolean)", "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[LogRecord]summaryLog(List<LogRecord>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ThreadLocalLogHandler extends Handler {\n    private static final ThreadLocal<List<LogRecord>> logs = new ThreadLocal<>();\n    private static final ConsoleHandler consoleHandler = new ConsoleHandler();\n\n    static {\n        consoleHandler.setLevel(Level.FINE);\n    }\n\n    @Override\n    public void publish(LogRecord record) {\n        if (logs.get() != null) {\n            logs.get().add(record);\n        }\n    }\n\n    @Override\n    public void flush() {\n    }\n\n    @Override\n    public void close() throws SecurityException {\n        logs.remove();\n    }\n\n    static void start() {\n        logs.set(new ArrayList<>());\n    }\n\n    static void finish(boolean writeLogs) {\n        if (writeLogs) {\n            List<LogRecord> threadLogs = logs.get();\n            if (!threadLogs.isEmpty()) {\n                consoleHandler.publish(summaryLog(threadLogs));\n                for (LogRecord log : threadLogs) {\n                    consoleHandler.publish(log);\n                }\n            }\n        }\n        logs.remove();\n    }\n\n    private static LogRecord summaryLog(List<LogRecord> logs) {\n        LogRecord record = new LogRecord(INFO, \"Written %d logs during the test:\".formatted(logs.size()));\n        record.setLoggerName(ThreadLocalLogHandler.class.getName());\n        return record;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final ThreadLocal<List<LogRecord>> logs = new ThreadLocal<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ThreadLocal<List<LogRecord>>", "name": "logs = new ThreadLocal<>()", "syntax_pass": true}, {"attribute_expression": "private static final ConsoleHandler consoleHandler = new ConsoleHandler();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ConsoleHandler", "name": "consoleHandler = new ConsoleHandler()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "name": "ProvidersDocsGenerator", "file_path": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "superclasses": "", "methods": ["[void]main(String[])", "[void]initSubtypes()", "[void]generateProvidersDocs(BufferedWriter)", "[String]extractGroupName(Class<?>)", "[String]extractCommentFromJavadoc(String)", "[void]constructHeaderInProvidersFile(Writer)", "[String]providersPerVersionTable()", "[Map<String, Integer>]extractProvidersPerVersion()", "[String]formatGroupName(String)"], "method_uris": ["src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]main(String[])", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]initSubtypes()", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]generateProvidersDocs(BufferedWriter)", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]extractGroupName(Class<?>)", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]extractCommentFromJavadoc(String)", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]constructHeaderInProvidersFile(Writer)", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]providersPerVersionTable()", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[Map<String, Integer>]extractProvidersPerVersion()", "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]formatGroupName(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ProvidersDocsGenerator {\n    private final JavaParser parser = new JavaParser();\n\n    // Specify destination of 'providers.md' file\n    private static final String DESTINATION_PLACE_OF_PROVIDERS_FILE = \"target/test-classes/providers.md\";\n    private final Reflections reflections = new Reflections(\"net.datafaker.providers\");\n    private final Comparator<Class<?>> providersComparatorBySimpleName = Comparator\n        .comparing(Class::getSimpleName);\n    private final Set<Class<?>> subTypes = new TreeSet<>(providersComparatorBySimpleName);\n\n    // Exclude non-providers from generation\n    private static final Set<String> providersToExcludeFromGeneration = Set.of(\"CustomFakerTest\", \"InsectFromFile\", \"Insect\");\n\n    private final Set<String> fakersWithoutSinceTag = new HashSet<>();\n\n    public static void main(String[] args) {\n        ProvidersDocsGenerator providersDocsGenerator = new ProvidersDocsGenerator();\n        providersDocsGenerator.initSubtypes();\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(DESTINATION_PLACE_OF_PROVIDERS_FILE))) {\n            providersDocsGenerator.constructHeaderInProvidersFile(writer);\n            providersDocsGenerator.generateProvidersDocs(writer);\n            writer.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        System.out.println(\"Written documentation to \" + DESTINATION_PLACE_OF_PROVIDERS_FILE);\n    }\n\n    private void initSubtypes() {\n        subTypes.addAll(\n            reflections.get(SubTypes.of(AbstractProvider.class).asClass())\n                .stream()\n                .filter(t -> !providersToExcludeFromGeneration.contains(t.getSimpleName()))\n                .collect(Collectors.toSet()));\n    }\n\n    void generateProvidersDocs(BufferedWriter writer) throws IOException {\n        for (Class<?> clazz : subTypes) {\n            String groupName = extractGroupName(clazz);\n            String comment = extractCommentFromJavadoc(\"src/main/java/net/datafaker/providers/\" + groupName + \"/\" + clazz.getSimpleName() + \".java\");\n            writer.write(Column.generateRow(' ', clazz.getSimpleName(), comment, formatGroupName(groupName)));\n        }\n        System.out.println(\"Providers without '@since' tag: \" + fakersWithoutSinceTag);\n    }\n\n    private String extractGroupName(Class<?> clazz) {\n        // `packageName` should be such format: net.datafaker.providers.<groupName> (e.g. base, sport, movie)\n        String packageName = clazz.getPackage().getName();\n        // And just splitting by '.' we're getting groupName (e.g. base, sport, movie)\n        return packageName.split(\"\\\\.\")[3];\n    }\n\n    /**\n     * The implementation assumes that the JavaDoc with the '@since' tag\n     * will always be at the very beginning of a class.\n     *\n     * @param filePath              Path to the Faker(provider) to be searched\n     * @return Entire first JavaDoc in the class\n     */\n    private String extractCommentFromJavadoc(String filePath) {\n        try {\n            final File file = new File(filePath);\n\n            Optional<CommentsCollection> commentsCollection =\n                parser.parse(file).getCommentsCollection();\n\n            if (commentsCollection.isEmpty()) {\n                fakersWithoutSinceTag.add(filePath);\n                return \"\";\n            }\n\n            Optional<JavadocComment> javadocComments = commentsCollection.get().getJavadocComments()\n                .stream()\n                .findFirst();\n\n            if (javadocComments.isEmpty()) {\n                fakersWithoutSinceTag.add(filePath);\n                return \"\";\n            }\n\n            String comment = javadocComments.get().getContent();\n            boolean containsSinceTag = comment.contains(\"@since\");\n\n            if (!containsSinceTag) {\n                fakersWithoutSinceTag.add(filePath);\n            }\n\n            return comment;\n        } catch (FileNotFoundException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n\n    /**\n     * Writes header and table header to new 'providers.md'\n     */\n    private void constructHeaderInProvidersFile(Writer writer) throws IOException {\n        final String header = TextBlock.HEADER.getText();\n        final String groupDescriptions = TextBlock.GROUP_DESCRIPTIONS.getText();\n        final String providersPerVersionTable = providersPerVersionTable();\n        final String totalProviders = \"\\nDatafaker comes with a total of \" + subTypes.size() + \" data providers:\" + \"\\n\\n\";\n\n        writer.write(header);\n        writer.write(groupDescriptions);\n        writer.write(providersPerVersionTable);\n        writer.write(totalProviders);\n        writer.write(Column.generateHeaderRow(' '));\n        writer.write(Column.generateEmptyRow('-'));\n    }\n\n    private String providersPerVersionTable() {\n        Map<String, Integer> providersPerVersion = extractProvidersPerVersion();\n\n        StringBuilder sb = new StringBuilder()\n            .append(\"\\nNumber of providers per Datafaker version\\n\")\n            .append(\"\\n| Version | Number of new providers | Total number of providers |\")\n            .append(\"\\n|---------|-------------------------|---------------------------|\\n\");\n\n        int cumulativeCountOfProvidersPerVersion = 0;\n        for (Map.Entry<String, Integer> entry : providersPerVersion.entrySet()) {\n            cumulativeCountOfProvidersPerVersion += entry.getValue();\n            sb.append(\"| \").append(entry.getKey()).append(\" | \")\n                .append(entry.getValue().toString()).append(\" | \")\n                .append(cumulativeCountOfProvidersPerVersion).append(\" |\\n\");\n        }\n\n        return sb.toString();\n    }\n\n    /**\n     * Searching through all providers {@link subTypes}, getting since tag, and building\n     * {@link TreeMap} with count of each since tag (version).\n     * @return {@link TreeMap} with count of providers per each version\n     */\n    private Map<String, Integer> extractProvidersPerVersion() {\n        Map<String, Integer> providersPerVersion = new TreeMap<>(Comparator.naturalOrder());\n\n        for (Class<?> clazz : subTypes) {\n            String groupName = extractGroupName(clazz);\n            String comment = extractCommentFromJavadoc(\"src/main/java/net/datafaker/providers/\" + groupName + \"/\" + clazz.getSimpleName() + \".java\");\n            String sinceTag = Column.SINCE.getValue(comment);\n\n            if (!providersPerVersion.containsKey(sinceTag)) {\n                providersPerVersion.put(sinceTag, 0);\n            }\n            providersPerVersion.computeIfPresent(sinceTag, (key, value) -> value + 1);\n        }\n\n        return providersPerVersion;\n    }\n\n    private String formatGroupName(String groupName) {\n        return Character.toUpperCase(groupName.charAt(0)) + groupName.substring(1);\n    }\n\n    private enum Column {\n        NAME(\"Name\", 93),\n        DESCRIPTION(\"Description\", 132, Pattern.compile(\".* \\\\* ([A-Z].+)\"), comment -> comment.group(1).trim()),\n        GROUP(\"Group\", 50),\n        SINCE(\"Since\", 7, Pattern.compile(\"@since\\\\s+\\\\d\\\\.\\\\d+\\\\.\\\\d\"), comment -> comment.group().substring(\"@since\".length()).trim());\n        private final String columnName;\n        private final int length;\n        private final Pattern pattern2extract;\n        private final Function<Matcher, String> extractor;\n\n        Column(String columnName, int length, Pattern pattern2extract, Function<Matcher, String> extractor) {\n            this.columnName = columnName;\n            this.length = length;\n            this.pattern2extract = pattern2extract;\n            this.extractor = extractor;\n        }\n\n        Column(String columnName, int length) {\n            this(columnName, length, null, null);\n        }\n\n        public static String generateEmptyRow(char padSymbol) {\n            return generateBaseHeaderRow(padSymbol, i -> \"\");\n        }\n\n        public static String generateHeaderRow(char padSymbol) {\n            return generateBaseHeaderRow(padSymbol, i -> values()[i].columnName);\n        }\n\n        private static String generateBaseHeaderRow(char padSymbol, Function<Integer, String> int2Name) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"|\");\n            for (int i = 0; i < values().length; i++) {\n                sb.append(generateColumn(int2Name.apply(i), padSymbol, values()[i].length));\n                sb.append(\"|\");\n            }\n            return sb.append(\"\\n\").toString();\n        }\n\n        public static String generateRow(char padSymbol, String clazzName, String javaDocComment, String groupName) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"|\").append(generateColumn(getName(clazzName, groupName.toLowerCase(Locale.ROOT)), padSymbol, NAME.length)).append(\"|\");\n            for (int i = 1; i < values().length; i++) {\n                if (values()[i] == GROUP) {\n                    sb.append(generateColumn(groupName, padSymbol, GROUP.length)).append(\"|\");\n                    continue;\n                }\n                sb.append(generateColumn(values()[i].getValue(javaDocComment), padSymbol, values()[i].length));\n                sb.append(\"|\");\n            }\n            return sb.append(\"\\n\").toString();\n        }\n\n        public static String generateColumn(String name, char padSymbol, int length) {\n            if (name.length() >= length) return name;\n            return padSymbol + name + Strings.repeat(String.valueOf(padSymbol), length - name.length() - 1);\n        }\n\n        public String getValue(String javaDocComment) {\n            Matcher comment = pattern2extract.matcher(javaDocComment);\n\n            if (comment.find()) {\n                return extractor.apply(comment);\n            }\n            return \"\";\n        }\n\n        public static String getName(String clazzName, String groupName) {\n            return \"[\" + addSpaceBetweenNameOfProvider(clazzName) + \"](https://javadoc.io/doc/net.datafaker/datafaker/latest/net/datafaker/providers/\" + groupName + \"/\" + clazzName + \".html)\";\n        }\n\n        private static String addSpaceBetweenNameOfProvider(String providerName) {\n            if (providerName.isEmpty()) {\n                throw new IllegalArgumentException(\"Supplied provider's name is empty!\");\n            }\n\n            StringBuilder providerBuilder = new StringBuilder();\n            providerBuilder.append(providerName.charAt(0));\n\n            for (int i = 1; i < providerName.length(); i++) {\n                if (Character.isUpperCase(providerName.charAt(i)) && Character.isLowerCase(providerName.charAt(i - 1))) {\n                    providerBuilder.append(' ');\n                }\n                providerBuilder.append(providerName.charAt(i));\n            }\n            return providerBuilder.toString();\n        }\n    }\n\n    private enum TextBlock {\n        HEADER(\"# Fake Data Providers\\n\"),\n        GROUP_DESCRIPTIONS(\"\"\"\n\n            #### Provider groups:\n            - Base (Providers of everyday data)\n            - Entertainment (Providers for movies, shows, books)\n            - Food (Providers for different types of food)\n            - Sport (Providers for different types of sport)\n            - Videogame (Video game providers)\n            \"\"\");\n\n        private final String text;\n\n        TextBlock(String text) {\n            this.text = text;\n        }\n\n        public String getText() {\n            return text;\n        }\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final JavaParser parser = new JavaParser();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "JavaParser", "name": "parser = new JavaParser()", "syntax_pass": true}, {"attribute_expression": "private static final String DESTINATION_PLACE_OF_PROVIDERS_FILE = \"target/test-classes/providers.md\";", "docstring": " Specify destination of 'providers.md' file", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DESTINATION_PLACE_OF_PROVIDERS_FILE = \"target/test-classes/providers.md\"", "syntax_pass": true}, {"attribute_expression": "private final Reflections reflections = new Reflections(\"net.datafaker.providers\");", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Reflections", "name": "reflections = new Reflections(\"net.datafaker.providers\")", "syntax_pass": true}, {"attribute_expression": "private final Comparator<Class<?>> providersComparatorBySimpleName = Comparator\n        .comparing(Class::getSimpleName);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Comparator<Class<?>>", "name": "providersComparatorBySimpleName = Comparator\n        .comparing(Class::getSimpleName)", "syntax_pass": true}, {"attribute_expression": "private final Set<Class<?>> subTypes = new TreeSet<>(providersComparatorBySimpleName);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Set<Class<?>>", "name": "subTypes = new TreeSet<>(providersComparatorBySimpleName)", "syntax_pass": true}, {"attribute_expression": "private static final Set<String> providersToExcludeFromGeneration = Set.of(\"CustomFakerTest\", \"InsectFromFile\", \"Insect\");", "docstring": " Exclude non-providers from generation", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Set<String>", "name": "providersToExcludeFromGeneration = Set.of(\"CustomFakerTest\", \"InsectFromFile\", \"Insect\")", "syntax_pass": true}, {"attribute_expression": "private final Set<String> fakersWithoutSinceTag = new HashSet<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Set<String>", "name": "fakersWithoutSinceTag = new HashSet<>()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/script/RandomImageGenerator.java.RandomImageGenerator", "name": "RandomImageGenerator", "file_path": "src/test/java/net/datafaker/script/RandomImageGenerator.java", "superclasses": "", "methods": ["[void]main(String[])"], "method_uris": ["src/test/java/net/datafaker/script/RandomImageGenerator.java.RandomImageGenerator.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RandomImageGenerator {\n\n    public static void main(String[] args) {\n        Faker faker = new Faker();\n\n        System.out.println(\"PNG Image:\");\n        System.out.println(faker.image().base64PNG());\n        System.out.println(\"JPG Image:\");\n        System.out.println(faker.image().base64JPEG());\n        System.out.println(\"GIF Image:\");\n        System.out.println(faker.image().base64GIF());\n        System.out.println(\"SVG Image:\");\n        System.out.println(faker.image().base64SVG());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "name": "ProviderGenerator", "file_path": "src/test/java/net/datafaker/script/ProviderGenerator.java", "superclasses": "", "methods": ["[void]main(String[])", "[void]generateProvider()", "[void]processFaker(File,Map<String, Object>)", "[void]createFakerRegistration(File)", "[void]createCreator(File,String,Set<String>,ProviderType)", "[void]createTest(File,Set<String>,ProviderType)", "[String]toJavaConvention(String)"], "method_uris": ["src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]main(String[])", "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]generateProvider()", "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]processFaker(File,Map<String, Object>)", "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]createFakerRegistration(File)", "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]createCreator(File,String,Set<String>,ProviderType)", "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]createTest(File,Set<String>,ProviderType)", "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[String]toJavaConvention(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ProviderGenerator {\n\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    private final ProviderType providerType = ProviderType.SHOW;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        new ProviderGenerator().generateProvider();\n    }\n\n    void generateProvider() throws FileNotFoundException {\n        File dir = new File(\"src/main/resources/en\");\n\n        File[] files = dir.listFiles((dir1, name) -> name.toLowerCase().contains(\"cowboy_bebop.yml\"));\n\n        List<File> fileList = Arrays.asList(files);\n        Collections.shuffle(fileList);\n        List<File> filesToProcess = fileList.stream().limit(5).toList();\n\n        System.out.println(files.length + \" files\");\n\n        for (File file : filesToProcess) {\n            final Map<String, Object> valuesMap = new Yaml().loadAs(new FileReader(file), Map.class);\n\n            Map<String, Object> en = (Map<String, Object>) valuesMap.get(\"en\");\n            Map<String, Object> faker = (Map<String, Object>) en.get(\"faker\");\n\n            System.out.println(file);\n            processFaker(file, faker);\n        }\n    }\n\n    private void processFaker(File file, Map<String, Object> faker) {\n        String key = (String) faker.keySet().toArray()[0];\n        Map<String, Object> subject = (Map<String, Object>) faker.get(key);\n\n        // Special case for games\n        if (\"games\".equals(key)) {\n            String key2 = subject.keySet().iterator().next();\n            subject = (Map<String, Object>) subject.get(key2);\n            key = key + \".\" + key2;\n        }\n\n        Set<String> strings = subject.keySet();\n\n        createCreator(file, key, strings, providerType);\n        createTest(file, strings, providerType);\n        createFakerRegistration(file);\n    }\n\n    private void createFakerRegistration(File file) {\n        String className = toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")));\n        String methodName = StringUtils.uncapitalize(toJavaConvention(className));\n\n        System.out.println();\n        System.out.println(\"default \" + className + \" \" + methodName + \"() {\");\n        System.out.println(\"    return getProvider(\" + className + \".class, \" + className + \"::new);\");\n        System.out.println(\"}\");\n    }\n\n    private void createCreator(File file, String key, Set<String> strings, ProviderType providerType) {\n        String className = toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")));\n\n        System.out.println(\"package \" + providerType.getPackageName() + \";\");\n        System.out.println();\n        System.out.println(\"import \" + AbstractProvider.class.getName() + \";\");\n        System.out.println();\n        System.out.println(\"/**\");\n        System.out.println(\" * @since 2.0.2\");\n        System.out.println(\" */\");\n        System.out.println(\"public class \" + className + \" extends \" + AbstractProvider.class.getSimpleName() + \"<\" + providerType.getProviderRegistrySimpleName() + \"> {\");\n        System.out.println();\n        System.out.println(\"    protected \" + className + \"(\" + providerType.getProviderRegistrySimpleName() + \" faker) {\");\n        System.out.println(\"        super(faker);\");\n        System.out.println(\"    }\");\n        System.out.println();\n\n        for (String string : strings) {\n            String methodName = StringUtils.uncapitalize(toJavaConvention(string));\n\n            System.out.println(\"    public String \" + methodName + \"() {\\n\" +\n                \"        return resolve(\\\"\" + key + \".\" + string + \"\\\");\\n\" +\n                \"    }\");\n            System.out.println();\n        }\n\n        System.out.println(\"}\");\n    }\n\n    private void createTest(File file, Set<String> strings, ProviderType providerType) {\n        String className = toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")));\n        // replace the first letter with a lowercase letter\n        String methodName = StringUtils.uncapitalize(toJavaConvention(className));\n\n        System.out.println(\"package \" + providerType.getPackageName() + \";\");\n        System.out.println();\n        System.out.println(\"import \" + Test.class.getName() + \";\");\n        System.out.println(\"import static \" + Assertions.class.getName() + \".assertThat;\");\n\n        System.out.println();\n        System.out.println(\"class \" + className + \"Test extends \" + providerType.getTestSuperclassSimpleName() + \" {\");\n        System.out.println();\n\n        for (String string : strings) {\n            String testMethodName = StringUtils.uncapitalize(toJavaConvention(string));\n\n            System.out.println(\"    @\" + Test.class.getSimpleName());\n            System.out.println(\"    void \" + testMethodName + \"() {\");\n            System.out.println(\"        assertThat(faker.\" + methodName + \"().\" + testMethodName + \"()).isNotEmpty();\");\n            System.out.println(\"    }\");\n            System.out.println();\n        }\n\n        System.out.println(\"}\");\n    }\n\n    private String toJavaConvention(String baseName) {\n\n        // replace underscores with spaces\n        String withoutUnderscore = baseName.replace(\"_\", \" \");\n        // for every word in the name, capitalize the first letter\n        String capitalizedWords = WordUtils.capitalize(withoutUnderscore);\n        // remove all spaces\n        return capitalizedWords.replace(\" \", \"\");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final ProviderType providerType = ProviderType.SHOW;", "docstring": "", "modifiers": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"FieldCanBeLocal\")", "private", "final"], "comments": [], "type": "ProviderType", "name": "providerType = ProviderType.SHOW", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure", "name": "BloodPressure", "file_path": "src/test/java/net/datafaker/sequence/Data.java", "superclasses": "", "methods": ["[String]name()", "[String]value()", "[String]range()", "[String]unit()"], "method_uris": ["src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]name()", "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]value()", "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]range()", "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]unit()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BloodPressure implements Data {\n\n    @Override\n    public String name() {\n        return \"Mean Blood Pressure\";\n    }\n\n    @Override\n    public String value() {\n        return new BaseFaker().random().nextInt(60, 180) + \"\";\n    }\n\n    @Override\n    public String range() {\n        return \"\";\n    }\n\n    @Override\n    public String unit() {\n        return \"mm Hg\";\n    }\n}", "super_interfaces": ["Data"], "fields": []}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Glucose", "name": "Glucose", "file_path": "src/test/java/net/datafaker/sequence/Data.java", "superclasses": "", "methods": ["[String]name()", "[String]value()", "[String]range()", "[String]unit()"], "method_uris": ["src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]name()", "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]value()", "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]range()", "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]unit()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class Glucose implements Data {\n\n    @Override\n    public String name() {\n        return \"Glucose\";\n    }\n\n    @Override\n    public String value() {\n        return \"%.1f\".formatted(new BaseFaker().random().nextDouble(3.2, 5.5));\n    }\n\n    @Override\n    public String range() {\n        return \"3.2-5.5\";\n    }\n\n    @Override\n    public String unit() {\n        return \"mmol/L\";\n    }\n}", "super_interfaces": ["Data"], "fields": []}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Temperature", "name": "Temperature", "file_path": "src/test/java/net/datafaker/sequence/Data.java", "superclasses": "", "methods": ["[String]name()", "[String]value()", "[String]range()", "[String]unit()"], "method_uris": ["src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]name()", "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]value()", "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]range()", "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]unit()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class Temperature implements Data {\n\n    @Override\n    public String name() {\n        return \"Temperature\";\n    }\n\n    @Override\n    public String value() {\n        return new BaseFaker().random().nextInt(30, 50) + \"\";\n    }\n\n    @Override\n    public String range() {\n        return \"\";\n    }\n\n    @Override\n    public String unit() {\n        return \"degrees C\";\n    }\n}", "super_interfaces": ["Data"], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/RobinTest.java.RobinTest", "name": "RobinTest", "file_path": "src/test/java/net/datafaker/providers/base/RobinTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/RobinTest.java.RobinTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class RobinTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Robin robin = faker.robin();\n        return List.of(TestSpec.of(robin::quote, \"robin.quotes\", \"^(\\\\w+\\\\.?-?'?\\\\s?)+(\\\\(?)?(\\\\w+\\\\s?\\\\.?)+(\\\\))?$\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/NigeriaTest.java.NigeriaTest", "name": "NigeriaTest", "file_path": "src/test/java/net/datafaker/providers/base/NigeriaTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/NigeriaTest.java.NigeriaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class NigeriaTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Nigeria nigeria = faker.nigeria();\n        return List.of(TestSpec.of(nigeria::places, \"nigeria.places\"),\n                TestSpec.of(nigeria::food, \"nigeria.food\"),\n                TestSpec.of(nigeria::name, \"nigeria.name\"),\n                TestSpec.of(nigeria::schools, \"nigeria.schools\"),\n                TestSpec.of(nigeria::celebrities, \"nigeria.celebrities\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/HipsterTest.java.HipsterTest", "name": "HipsterTest", "file_path": "src/test/java/net/datafaker/providers/base/HipsterTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/HipsterTest.java.HipsterTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HipsterTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hipster hipster = faker.hipster();\n        return List.of(TestSpec.of(hipster::word, \"hipster.words\", \"^([\\\\w-+&']+ ?)+$\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ConstructionTest.java.ConstructionTest", "name": "ConstructionTest", "file_path": "src/test/java/net/datafaker/providers/base/ConstructionTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ConstructionTest.java.ConstructionTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ConstructionTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Construction construction = faker.construction();\n        return List.of(TestSpec.of(construction::heavyEquipment, \"construction.heavy_equipment\"),\n                TestSpec.of(construction::materials, \"construction.materials\"),\n                TestSpec.of(construction::subcontractCategories, \"construction.subcontract_categories\"),\n                TestSpec.of(construction::roles, \"construction.roles\"),\n                TestSpec.of(construction::trades, \"construction.trades\"),\n                TestSpec.of(construction::standardCostCodes, \"construction.standard_cost_codes\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/AustraliaTest.java.AustraliaTest", "name": "AustraliaTest", "file_path": "src/test/java/net/datafaker/providers/base/AustraliaTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/AustraliaTest.java.AustraliaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class AustraliaTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Australia australia = faker.australia();\n        return List.of(TestSpec.of(australia::locations, \"australia.locations\"),\n            TestSpec.of(australia::animals, \"australia.animals\"),\n            TestSpec.of(australia::states, \"australia.states\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/DogTest.java.DogTest", "name": "DogTest", "file_path": "src/test/java/net/datafaker/providers/base/DogTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/DogTest.java.DogTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DogTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Dog dog = faker.dog();\n        return List.of(TestSpec.of(dog::name, \"creature.dog.name\"),\n            TestSpec.of(dog::breed, \"creature.dog.breed\"),\n            TestSpec.of(dog::sound, \"creature.dog.sound\"),\n            TestSpec.of(dog::memePhrase, \"creature.dog.meme_phrase\"),\n            TestSpec.of(dog::age, \"creature.dog.age\"),\n            TestSpec.of(dog::gender, \"creature.dog.gender\"),\n            TestSpec.of(dog::coatLength, \"creature.dog.coat_length\"),\n            TestSpec.of(dog::size, \"creature.dog.size\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/DeviceTest.java.DeviceTest", "name": "DeviceTest", "file_path": "src/test/java/net/datafaker/providers/base/DeviceTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/DeviceTest.java.DeviceTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DeviceTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Device device = faker.device();\n        return List.of(TestSpec.of(device::modelName, \"device.model_name\"),\n                TestSpec.of(device::platform, \"device.platform\"),\n                TestSpec.of(device::manufacturer, \"device.manufacturer\"),\n                TestSpec.of(device::serial, \"device.serial\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ArtistTest.java.ArtistTest", "name": "ArtistTest", "file_path": "src/test/java/net/datafaker/providers/base/ArtistTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ArtistTest.java.ArtistTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ArtistTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Artist artist = faker.artist();\n        return List.of(TestSpec.of(artist::name, \"artist.names\", \"(\\\\w+ ?){1,2}\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CoinTest.java.CoinTest", "name": "CoinTest", "file_path": "src/test/java/net/datafaker/providers/base/CoinTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CoinTest.java.CoinTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CoinTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Coin coin = faker.coin();\n        return List.of(TestSpec.of(coin::flip, \"coin.flip\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/AncientTest.java.AncientTest", "name": "AncientTest", "file_path": "src/test/java/net/datafaker/providers/base/AncientTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/AncientTest.java.AncientTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class AncientTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Ancient ancient = faker.ancient();\n        return List.of(TestSpec.of(ancient::god, \"ancient.god\"),\n            TestSpec.of(ancient::primordial, \"ancient.primordial\"),\n            TestSpec.of(ancient::titan, \"ancient.titan\"),\n            TestSpec.of(ancient::hero, \"ancient.hero\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CatTest.java.CatTest", "name": "CatTest", "file_path": "src/test/java/net/datafaker/providers/base/CatTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CatTest.java.CatTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CatTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Cat cat = faker.cat();\n        return List.of(TestSpec.of(cat::name, \"creature.cat.name\"),\n            TestSpec.of(cat::breed, \"creature.cat.breed\"),\n            TestSpec.of(cat::registry, \"creature.cat.registry\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CosmereTest.java.CosmereTest", "name": "CosmereTest", "file_path": "src/test/java/net/datafaker/providers/base/CosmereTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CosmereTest.java.CosmereTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CosmereTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Cosmere cosmere = faker.cosmere();\n        return List.of(TestSpec.of(cosmere::aons, \"cosmere.aons\"),\n                TestSpec.of(cosmere::shardWorlds, \"cosmere.shard_worlds\"),\n                TestSpec.of(cosmere::shards, \"cosmere.shards\"),\n                TestSpec.of(cosmere::surges, \"cosmere.surges\"),\n                TestSpec.of(cosmere::knightsRadiant, \"cosmere.knights_radiant\"),\n                TestSpec.of(cosmere::metals, \"cosmere.metals\"),\n                TestSpec.of(cosmere::allomancers, \"cosmere.allomancers\"),\n                TestSpec.of(cosmere::feruchemists, \"cosmere.feruchemists\"),\n                TestSpec.of(cosmere::heralds, \"cosmere.heralds\"),\n                TestSpec.of(cosmere::sprens, \"cosmere.sprens\")\n                );\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/MilitaryTest.java.MilitaryTest", "name": "MilitaryTest", "file_path": "src/test/java/net/datafaker/providers/base/MilitaryTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MilitaryTest.java.MilitaryTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MilitaryTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Military military = faker.military();\n        return List.of(TestSpec.of(military::armyRank, \"military.army_rank\"),\n                TestSpec.of(military::marinesRank, \"military.marines_rank\"),\n                TestSpec.of(military::navyRank, \"military.navy_rank\"),\n                TestSpec.of(military::airForceRank, \"military.air_force_rank\"),\n                TestSpec.of(military::dodPaygrade, \"military.dod_paygrade\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ApplianceTest.java.ApplianceTest", "name": "ApplianceTest", "file_path": "src/test/java/net/datafaker/providers/base/ApplianceTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ApplianceTest.java.ApplianceTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ApplianceTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Appliance appliance = faker.appliance();\n        return List.of(TestSpec.of(appliance::brand, \"appliance.brand\", \"[A-Za-z .-]+\"),\n                TestSpec.of(appliance::equipment, \"appliance.equipment\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/SubscriptionTest.java.SubscriptionTest", "name": "SubscriptionTest", "file_path": "src/test/java/net/datafaker/providers/base/SubscriptionTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/SubscriptionTest.java.SubscriptionTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SubscriptionTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Subscription subscription = faker.subscription();\n        return List.of(TestSpec.of(subscription::plans, \"subscription.plans\"),\n                TestSpec.of(subscription::statuses, \"subscription.statuses\"),\n                TestSpec.of(subscription::paymentMethods, \"subscription.payment_methods\"),\n                TestSpec.of(subscription::subscriptionTerms, \"subscription.subscription_terms\"),\n                TestSpec.of(subscription::paymentTerms, \"subscription.payment_terms\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/OlympicSportTest.java.OlympicSportTest", "name": "OlympicSportTest", "file_path": "src/test/java/net/datafaker/providers/base/OlympicSportTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/OlympicSportTest.java.OlympicSportTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class OlympicSportTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        OlympicSport olympicSport = faker.olympicSport();\n        return List.of(TestSpec.of(olympicSport::summerOlympics, \"olympic_sport.summer_olympics\"),\n                TestSpec.of(olympicSport::winterOlympics, \"olympic_sport.winter_olympics\"),\n                TestSpec.of(olympicSport::summerParalympics, \"olympic_sport.summer_paralympics\"),\n                TestSpec.of(olympicSport::winterParalympics, \"olympic_sport.winter_paralympics\"),\n                TestSpec.of(olympicSport::ancientOlympics, \"olympic_sport.ancient_olympics\"),\n                TestSpec.of(olympicSport::unusual, \"olympic_sport.unusual\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/HouseTest.java.HouseTest", "name": "HouseTest", "file_path": "src/test/java/net/datafaker/providers/base/HouseTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/HouseTest.java.HouseTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HouseTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        House house = faker.house();\n        return List.of(TestSpec.of(house::furniture, \"house.furniture\"),\n            TestSpec.of(house::room, \"house.rooms\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CryptoCoinTest.java.CryptoCoinTest", "name": "CryptoCoinTest", "file_path": "src/test/java/net/datafaker/providers/base/CryptoCoinTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CryptoCoinTest.java.CryptoCoinTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CryptoCoinTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        CryptoCoin cryptoCoin = faker.cryptoCoin();\n        return List.of(TestSpec.of(cryptoCoin::coin, \"crypto_coin.coin\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/StockTest.java.StockTest", "name": "StockTest", "file_path": "src/test/java/net/datafaker/providers/base/StockTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/StockTest.java.StockTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StockTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Stock stock = faker.stock();\n        return List.of(TestSpec.of(stock::nsdqSymbol, \"stock.symbol_nsdq\"),\n                TestSpec.of(stock::nyseSymbol, \"stock.symbol_nyse\"),\n                TestSpec.of(stock::nseSymbol, \"stock.symbol_nse\"),\n                TestSpec.of(stock::lseSymbol, \"stock.symbol_lse\"),\n                TestSpec.of(stock::exchanges, \"stock.exchanges\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/MountaineeringTest.java.MountaineeringTest", "name": "MountaineeringTest", "file_path": "src/test/java/net/datafaker/providers/base/MountaineeringTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MountaineeringTest.java.MountaineeringTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MountaineeringTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Mountaineering mountaineering = faker.mountaineering();\n        return List.of(TestSpec.of(mountaineering::mountaineer, \"mountaineering.mountaineer\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/BloodTypeTest.java.BloodTypeTest", "name": "BloodTypeTest", "file_path": "src/test/java/net/datafaker/providers/base/BloodTypeTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/BloodTypeTest.java.BloodTypeTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BloodTypeTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        BloodType bloodType = faker.bloodtype();\n        return List.of(TestSpec.of(bloodType::aboTypes, \"blood_type.abo_types\", \"[A-Za-z]+\"),\n            TestSpec.of(bloodType::rhTypes, \"blood_type.rh_types\", \"[A-Za-z+-]+\"),\n            TestSpec.of(bloodType::pTypes, \"blood_type.p_types\", \"[A-Za-z\\\\d]+\"),\n            TestSpec.of(bloodType::bloodGroup, \"blood_type.blood_group\", \"(A|B|AB|O)[+-]\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/MatzTest.java.MatzTest", "name": "MatzTest", "file_path": "src/test/java/net/datafaker/providers/base/MatzTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MatzTest.java.MatzTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MatzTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Matz matz = faker.matz();\n        return List.of(TestSpec.of(matz::quote, \"matz.quotes\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/MountainTest.java.MountainTest", "name": "MountainTest", "file_path": "src/test/java/net/datafaker/providers/base/MountainTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MountainTest.java.MountainTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MountainTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Mountain mountain = faker.mountain();\n        return List.of(TestSpec.of(mountain::name, \"mountain.name\"),\n                TestSpec.of(mountain::range, \"mountain.range\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/GenderTest.java.GenderTest", "name": "GenderTest", "file_path": "src/test/java/net/datafaker/providers/base/GenderTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/GenderTest.java.GenderTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class GenderTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Gender gender = faker.gender();\n        return List.of(TestSpec.of(gender::types, \"gender.types\", \"(\\\\w+ ?){1,2}\"),\n            TestSpec.of(gender::binaryTypes, \"gender.binary_types\"),\n            TestSpec.of(gender::shortBinaryTypes, \"gender.short_binary_types\", \"[fm]\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/NatoPhoneticAlphabetTest.java.NatoPhoneticAlphabetTest", "name": "NatoPhoneticAlphabetTest", "file_path": "src/test/java/net/datafaker/providers/base/NatoPhoneticAlphabetTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/NatoPhoneticAlphabetTest.java.NatoPhoneticAlphabetTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class NatoPhoneticAlphabetTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        NatoPhoneticAlphabet natoAlpha = faker.natoPhoneticAlphabet();\n        return List.of(TestSpec.of(natoAlpha::codeWord, \"nato_phonetic_alphabet.code_word\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/KpopTest.java.KpopTest", "name": "KpopTest", "file_path": "src/test/java/net/datafaker/providers/base/KpopTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/KpopTest.java.KpopTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class KpopTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Kpop kpop = faker.kpop();\n        return List.of(TestSpec.of(kpop::iGroups, \"kpop.i_groups\"),\n                TestSpec.of(kpop::iiGroups, \"kpop.ii_groups\"),\n                TestSpec.of(kpop::iiiGroups, \"kpop.iii_groups\"),\n                TestSpec.of(kpop::girlGroups, \"kpop.girl_groups\"),\n                TestSpec.of(kpop::boyBands, \"kpop.boy_bands\"),\n                TestSpec.of(kpop::solo, \"kpop.solo\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CameraTest.java.CameraTest", "name": "CameraTest", "file_path": "src/test/java/net/datafaker/providers/base/CameraTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CameraTest.java.CameraTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CameraTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Camera camera = faker.camera();\n        return List.of(TestSpec.of(camera::brand, \"camera.brand\", \"^[a-zA-Z0-9 -]+$\"),\n            TestSpec.of(camera::model, \"camera.model\", \"^[a-zA-Z0-9 -]+$\"),\n            TestSpec.of(camera::brandWithModel, \"camera.brand_with_model\", \"^[a-zA-Z0-9 -]+$\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/FunnyNameTest.java.FunnyNameTest", "name": "FunnyNameTest", "file_path": "src/test/java/net/datafaker/providers/base/FunnyNameTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/FunnyNameTest.java.FunnyNameTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FunnyNameTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        FunnyName funnyName = faker.funnyName();\n        return List.of(TestSpec.of(funnyName::name, \"funny_name.name\", \"^(\\\\w+\\\\.?\\\\s?'?-?)+$\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/DcComicsTest.java.DcComicsTest", "name": "DcComicsTest", "file_path": "src/test/java/net/datafaker/providers/base/DcComicsTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/DcComicsTest.java.DcComicsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DcComicsTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\nprotected Collection<TestSpec> providerListTest() { \n        DcComics dcComics = faker.dcComics();\n        return List.of(TestSpec.of(dcComics::hero, \"dc_comics.hero\"),\n                TestSpec.of(dcComics::heroine, \"dc_comics.heroine\"),\n                TestSpec.of(dcComics::villain, \"dc_comics.villain\"),\n                TestSpec.of(dcComics::name, \"dc_comics.name\"),\n                TestSpec.of(dcComics::title, \"dc_comics.title\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/IndustrySegmentsTest.java.IndustrySegmentsTest", "name": "IndustrySegmentsTest", "file_path": "src/test/java/net/datafaker/providers/base/IndustrySegmentsTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/IndustrySegmentsTest.java.IndustrySegmentsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class IndustrySegmentsTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        IndustrySegments industrySegment = faker.industrySegments();\n        return List.of(TestSpec.of(industrySegment::industry, \"industry_segments.industry\"),\n                TestSpec.of(industrySegment::superSector, \"industry_segments.super_sector\"),\n                TestSpec.of(industrySegment::sector, \"industry_segments.sector\"),\n                TestSpec.of(industrySegment::subSector, \"industry_segments.sub_sector\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/HackerTest.java.HackerTest", "name": "HackerTest", "file_path": "src/test/java/net/datafaker/providers/base/HackerTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/HackerTest.java.HackerTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HackerTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hacker hacker = faker.hacker();\n        return List.of(TestSpec.of(hacker::abbreviation, \"hacker.abbreviation\", \"[A-Z]{2,4}\"),\n            TestSpec.of(hacker::adjective, \"hacker.adjective\", \"(?:\\\\w+[- ]?){1,2}\"),\n            TestSpec.of(hacker::noun, \"hacker.noun\"),\n            TestSpec.of(hacker::verb, \"hacker.verb\"),\n            TestSpec.of(hacker::ingverb, \"hacker.ingverb\", \"\\\\w+ing(?: \\\\w+)?\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ZodiacTest.java.ZodiacTest", "name": "ZodiacTest", "file_path": "src/test/java/net/datafaker/providers/base/ZodiacTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ZodiacTest.java.ZodiacTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ZodiacTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Zodiac zodiac = faker.zodiac();\n        return List.of(TestSpec.of(zodiac::sign, \"zodiac.signs\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/DungeonsAndDragonsTest.java.DungeonsAndDragonsTest", "name": "DungeonsAndDragonsTest", "file_path": "src/test/java/net/datafaker/providers/base/DungeonsAndDragonsTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/DungeonsAndDragonsTest.java.DungeonsAndDragonsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DungeonsAndDragonsTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        DungeonsAndDragons dnd = faker.dungeonsAndDragons();\n        return List.of(TestSpec.of(dnd::alignments, \"dnd.alignments\"),\n            TestSpec.of(dnd::backgrounds, \"dnd.backgrounds\"),\n            TestSpec.of(dnd::cities, \"dnd.cities\"),\n            TestSpec.of(dnd::klasses, \"dnd.klasses\"),\n            TestSpec.of(dnd::languages, \"dnd.languages\"),\n            TestSpec.of(dnd::meleeWeapons, \"dnd.melee_weapons\"),\n            TestSpec.of(dnd::monsters, \"dnd.monsters\"),\n            TestSpec.of(dnd::races, \"dnd.races\"),\n            TestSpec.of(dnd::rangedWeapons, \"dnd.ranged_weapons\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CommunityTest.java.CommunityTest", "name": "CommunityTest", "file_path": "src/test/java/net/datafaker/providers/base/CommunityTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CommunityTest.java.CommunityTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CommunityTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Community community = faker.community();\n        return List.of(TestSpec.of(community::character, \"community.characters\"),\n                TestSpec.of(community::quote, \"community.quotes\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/SizeTest.java.SizeTest", "name": "SizeTest", "file_path": "src/test/java/net/datafaker/providers/base/SizeTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/SizeTest.java.SizeTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SizeTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Size size = faker.size();\n        return List.of(TestSpec.of(size::adjective, \"size.adjective\", \"[a-zA-Z]+(-[a-zA-Z]+)?\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/MarketingTest.java.MarketingTest", "name": "MarketingTest", "file_path": "src/test/java/net/datafaker/providers/base/MarketingTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MarketingTest.java.MarketingTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MarketingTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Marketing marketing = faker.marketing();\n        return List.of(TestSpec.of(marketing::buzzwords, \"marketing.buzzwords\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/TransportTest.java.TransportTest", "name": "TransportTest", "file_path": "src/test/java/net/datafaker/providers/base/TransportTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/TransportTest.java.TransportTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TransportTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Transport transport = faker.transport();\n        return List.of(TestSpec.of(transport::type, \"transport.type\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/HorseTest.java.HorseTest", "name": "HorseTest", "file_path": "src/test/java/net/datafaker/providers/base/HorseTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/HorseTest.java.HorseTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HorseTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Horse horse = faker.horse();\n        return List.of(TestSpec.of(horse::name, \"creature.horse.name\"),\n                TestSpec.of(horse::breed, \"creature.horse.breed\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/LocationTest.java.LocationTest", "name": "LocationTest", "file_path": "src/test/java/net/datafaker/providers/base/LocationTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/LocationTest.java.LocationTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class LocationTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Location location = faker.location();\n        return List.of(\n            TestSpec.of(location::building, \"location.building\"),\n            TestSpec.of(location::nature, \"location.nature\"),\n            TestSpec.of(location::otherworldly, \"location.otherworldly\"),\n            TestSpec.of(location::privateSpace, \"location.private_space\"),\n            TestSpec.of(location::publicSpace, \"location.public_space\"),\n            TestSpec.of(location::work, \"location.work\")\n        );\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/PhotographyTest.java.PhotographyTest", "name": "PhotographyTest", "file_path": "src/test/java/net/datafaker/providers/base/PhotographyTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/PhotographyTest.java.PhotographyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class PhotographyTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Photography photo = faker.photography();\n        return List.of(TestSpec.of(photo::aperture, \"photography.aperture\"),\n            TestSpec.of(photo::term, \"photography.term\"),\n            TestSpec.of(photo::brand, \"photography.brand\"),\n            TestSpec.of(photo::camera, \"photography.camera\"),\n            TestSpec.of(photo::lens, \"photography.lens\"),\n            TestSpec.of(photo::genre, \"photography.genre\"),\n            TestSpec.of(photo::imageTag, \"photography.imagetag\"),\n            TestSpec.of(photo::shutter, \"photography.shutter\", \"\\\\d+/?\\\\d*\"),\n            TestSpec.of(photo::iso, \"photography.iso\", \"\\\\d+\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityExample.java.LocalityExample", "name": "LocalityExample", "file_path": "src/test/java/net/datafaker/providers/base/LocalityExample.java", "superclasses": "", "methods": ["[void]main(String[])"], "method_uris": ["src/test/java/net/datafaker/providers/base/LocalityExample.java.LocalityExample.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class LocalityExample {\n\n    /**\n     * Example to illustrate use of Locality to randomly select\n     * locales (language and geographical/political/cultural region) when using Faker\n     *\n     * @param args Command-line arguments\n     */\n    public static void main(String[] args) {\n        BaseFaker defaultFaker = new BaseFaker();\n\n        // EXAMPLE: GET LIST OF ALL SUPPORTED LOCALES\n        List<String> allLocales = defaultFaker.locality().allSupportedLocales();\n        System.out.println(\"All supported locales: \" + Arrays.toString(allLocales.toArray()));\n\n        // EXAMPLE: GET A FAKER OBJECT WITH A RANDOM LOCALE (SELECTED WITH REPLACEMENT)\n        // Instantiate a Faker object with a randomized locale\n        Locale pickedLocale = Locale.forLanguageTag(defaultFaker.locality().localeString());\n        BaseFaker faker = new BaseFaker(pickedLocale);\n\n        // Use Faker object to generate data in the randomly selected locale\n        String fullName = faker.name().fullName();\n        String streetAddress = faker.address().streetAddress();\n        String phoneNumber = faker.phoneNumber().phoneNumber();\n\n        System.out.println(\"EXAMPLE: SELECT A RANDOM LOCALE (WITH REPLACEMENT)\");\n        System.out.println(\"Random Locale: \" + pickedLocale.toString());\n        System.out.println(\"  Full Name: \" + fullName);\n        System.out.println(\"  Street Address: \" + streetAddress);\n        System.out.println(\"  Phone Number: \" + phoneNumber);\n\n        // EXAMPLE: ROTATE THROUGH ALL SUPPORTED LOCALES TO GENERATE USER DATA\n        //   LOCALES PICKED AT RANDOM (SELECTED WITHOUT REPLACEMENT)\n        System.out.println(\"EXAMPLE: ROTATE THROUGH ALL LOCALES AT RANDOM (WITHOUT REPLACEMENT)\");\n        BaseFaker currentFaker;\n\n        int numSupportedLocales = allLocales.size();\n        for (int i = 0; i < numSupportedLocales; i++) {\n            Locale currentLocale = Locale.forLanguageTag(defaultFaker.locality().localeStringWithoutReplacement());\n            System.out.println(\"Random Locale: \" + currentLocale.toString());\n            currentFaker = new BaseFaker(currentLocale);\n            System.out.println(\"  First Name: \" + currentFaker.name().firstName());\n            System.out.println(\"  Last Name: \" + currentFaker.name().lastName());\n            System.out.println(\"  Street Address: \" + currentFaker.address().streetAddress());\n            System.out.println(\"  Phone Number: \" + currentFaker.phoneNumber().phoneNumber());\n        }\n\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/MeasurementTest.java.MeasurementTest", "name": "MeasurementTest", "file_path": "src/test/java/net/datafaker/providers/base/MeasurementTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MeasurementTest.java.MeasurementTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MeasurementTest extends BaseFakerTest<BaseFaker> {\n\n    public static final String WORDS = \"^[a-z ]+$\";\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Measurement measurement = faker.measurement();\n        return List.of(TestSpec.of(measurement::height, \"measurement.height\"),\n            TestSpec.of(measurement::length, \"measurement.length\"),\n            TestSpec.of(measurement::volume, \"measurement.volume\"),\n            TestSpec.of(measurement::weight, \"measurement.weight\"),\n            TestSpec.of(measurement::metricLength, \"measurement.metric_length\"),\n            TestSpec.of(measurement::metricHeight, \"measurement.metric_height\"),\n            TestSpec.of(measurement::metricVolume, \"measurement.metric_volume\"),\n            TestSpec.of(measurement::metricWeight, \"measurement.metric_weight\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final String WORDS = \"^[a-z ]+$\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "WORDS = \"^[a-z ]+$\"", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/base/LargeLanguageModelTest.java.LargeLanguageModelTest", "name": "LargeLanguageModelTest", "file_path": "src/test/java/net/datafaker/providers/base/LargeLanguageModelTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/LargeLanguageModelTest.java.LargeLanguageModelTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class LargeLanguageModelTest extends BaseFakerTest<BaseFaker> {\n\n    private final LargeLanguageModel llm = faker.largeLanguageModel();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(llm::textModel, \"largelanguagemodel.text_models\"),\n            TestSpec.of(llm::embeddingModel, \"largelanguagemodel.embeddings\"),\n            TestSpec.of(llm::tokenizer, \"largelanguagemodel.tokenizers\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final LargeLanguageModel llm = faker.largeLanguageModel();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "LargeLanguageModel", "name": "llm = faker.largeLanguageModel()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/base/MoodTest.java.MoodTest", "name": "MoodTest", "file_path": "src/test/java/net/datafaker/providers/base/MoodTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/MoodTest.java.MoodTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MoodTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Mood mood = faker.mood();\n        return List.of(TestSpec.of(mood::feeling, \"mood.feeling\"),\n            TestSpec.of(mood::emotion, \"mood.emotion\"),\n            TestSpec.of(mood::tone, \"mood.tone\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/DemographicTest.java.DemographicTest", "name": "DemographicTest", "file_path": "src/test/java/net/datafaker/providers/base/DemographicTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/DemographicTest.java.DemographicTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DemographicTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Demographic demographic = faker.demographic();\n        return List.of(TestSpec.of(demographic::race, \"demographic.race\", \"(\\\\w+ ?)+\"),\n            TestSpec.of(demographic::educationalAttainment, \"demographic.educational_attainment\", \"(?U)([\\\\w'-]+ ?)+\"),\n            TestSpec.of(demographic::demonym, \"demographic.demonym\", \"(?U)([\\\\w'-]+ ?)+\"),\n            TestSpec.of(demographic::maritalStatus, \"demographic.marital_status\", \"(\\\\w+ ?)+\"),\n            TestSpec.of(demographic::sex, \"demographic.sex\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/PronounsTest.java.PronounsTest", "name": "PronounsTest", "file_path": "src/test/java/net/datafaker/providers/base/PronounsTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/PronounsTest.java.PronounsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class PronounsTest extends BaseFakerTest<BaseFaker> {\n\n    private final Pronouns pronouns = faker.pronouns();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(pronouns::subjective, \"pronouns.subjective\"),\n            TestSpec.of(pronouns::objective, \"pronouns.objective\"),\n            TestSpec.of(pronouns::possessive, \"pronouns.possessive\"),\n            TestSpec.of(pronouns::reflexive, \"pronouns.reflexive\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Pronouns pronouns = faker.pronouns();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Pronouns", "name": "pronouns = faker.pronouns()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/base/WordTest.java.WordTest", "name": "WordTest", "file_path": "src/test/java/net/datafaker/providers/base/WordTest.java", "superclasses": "", "methods": ["[Collection<BaseFakerTest.TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/WordTest.java.WordTest.[Collection<BaseFakerTest.TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class WordTest extends BaseFakerTest<BaseFaker> {\n\n    private final Word word = faker.word();\n\n    @Override\n    protected Collection<BaseFakerTest.TestSpec> providerListTest() {\n        return List.of(\n            BaseFakerTest.TestSpec.of(word::adjective, \"words.adjective\"),\n            BaseFakerTest.TestSpec.of(word::adverb, \"words.adverb\"),\n            BaseFakerTest.TestSpec.of(word::conjunction, \"words.conjunction\"),\n            BaseFakerTest.TestSpec.of(word::interjection, \"words.interjection\"),\n            BaseFakerTest.TestSpec.of(word::noun, \"words.noun\"),\n            BaseFakerTest.TestSpec.of(word::preposition, \"words.preposition\"),\n            BaseFakerTest.TestSpec.of(word::verb, \"words.verb\"));\n    }\n\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Word word = faker.word();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Word", "name": "word = faker.word()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/base/HobbyTest.java.HobbyTest", "name": "HobbyTest", "file_path": "src/test/java/net/datafaker/providers/base/HobbyTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/HobbyTest.java.HobbyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HobbyTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hobby hobby = faker.hobby();\n        return List.of(TestSpec.of(hobby::activity, \"hobby.activity\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/GarmentSizeTest.java.GarmentSizeTest", "name": "GarmentSizeTest", "file_path": "src/test/java/net/datafaker/providers/base/GarmentSizeTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/GarmentSizeTest.java.GarmentSizeTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class GarmentSizeTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        GarmentSize garmetSize = faker.garmentSize();\n        return List.of(TestSpec.of(garmetSize::size, \"garments_sizes.sizes\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CultureSeriesTest.java.CultureSeriesTest", "name": "CultureSeriesTest", "file_path": "src/test/java/net/datafaker/providers/base/CultureSeriesTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CultureSeriesTest.java.CultureSeriesTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CultureSeriesTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        CultureSeries cultureSeries = faker.cultureSeries();\n        return List.of(TestSpec.of(cultureSeries::books, \"culture_series.books\"),\n                TestSpec.of(cultureSeries::cultureShips, \"culture_series.culture_ships\"),\n                TestSpec.of(cultureSeries::cultureShipClasses, \"culture_series.culture_ship_classes\"),\n                TestSpec.of(cultureSeries::cultureShipClassAbvs, \"culture_series.culture_ship_class_abvs\"),\n                TestSpec.of(cultureSeries::civs, \"culture_series.civs\"),\n                TestSpec.of(cultureSeries::planets, \"culture_series.planets\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/EmojiTest.java.EmojiTest", "name": "EmojiTest", "file_path": "src/test/java/net/datafaker/providers/base/EmojiTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/EmojiTest.java.EmojiTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class EmojiTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Emoji emoji = faker.emoji();\n        \n        return List.of(TestSpec.of(emoji::smiley, \"emoji.smileys\"),\n            TestSpec.of(emoji::cat, \"emoji.cats\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CurrencyTest.java.CurrencyTest", "name": "CurrencyTest", "file_path": "src/test/java/net/datafaker/providers/base/CurrencyTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CurrencyTest.java.CurrencyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CurrencyTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Currency currency = faker.currency();\n        return List.of(TestSpec.of(currency::name, \"currency.name\", \"[\\\\w'.\\\\-() ]+\"),\n            TestSpec.of(currency::code, \"currency.code\", \"[A-Z]{3}\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/BrandTest.java.BrandTest", "name": "BrandTest", "file_path": "src/test/java/net/datafaker/providers/base/BrandTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/BrandTest.java.BrandTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BrandTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Brand brand = faker.brand();\n        return List.of(\n            TestSpec.of(brand::sport, \"brand.sport\"),\n            TestSpec.of(brand::car, \"vehicle.makes\"),\n            TestSpec.of(brand::watch, \"brand.watch\")\n        );\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ProgrammingLanguageTest.java.ProgrammingLanguageTest", "name": "ProgrammingLanguageTest", "file_path": "src/test/java/net/datafaker/providers/base/ProgrammingLanguageTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ProgrammingLanguageTest.java.ProgrammingLanguageTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ProgrammingLanguageTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        ProgrammingLanguage lang = faker.programmingLanguage();\n        return List.of(TestSpec.of(lang::name, \"programming_language.name\", \"[A-Za-z\\\\d :,.+*()#/\u2013\\\\-@\u03c0\u00e9\u00f6\u00fc'\u2032!]+\"),\n            TestSpec.of(lang::creator, \"programming_language.creator\", \"[A-Za-z .,\\\\-]+\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/CannabisTest.java.CannabisTest", "name": "CannabisTest", "file_path": "src/test/java/net/datafaker/providers/base/CannabisTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/CannabisTest.java.CannabisTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CannabisTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Cannabis cannabis = faker.cannabis();\n        return List.of(TestSpec.of(cannabis::strains, \"cannabis.strains\"),\n                TestSpec.of(cannabis::cannabinoidAbbreviations, \"cannabis.cannabinoid_abbreviations\"),\n                TestSpec.of(cannabis::cannabinoids, \"cannabis.cannabinoids\"),\n                TestSpec.of(cannabis::terpenes, \"cannabis.terpenes\"),\n                TestSpec.of(cannabis::medicalUses, \"cannabis.medical_uses\"),\n                TestSpec.of(cannabis::healthBenefits, \"cannabis.health_benefits\"),\n                TestSpec.of(cannabis::categories, \"cannabis.categories\"),\n                TestSpec.of(cannabis::types, \"cannabis.types\"),\n                TestSpec.of(cannabis::buzzwords, \"cannabis.buzzwords\"),\n                TestSpec.of(cannabis::brands, \"cannabis.brands\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/JobTest.java.JobTest", "name": "JobTest", "file_path": "src/test/java/net/datafaker/providers/base/JobTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/JobTest.java.JobTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class JobTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Job job = faker.job();\n        return List.of(TestSpec.of(job::field, \"job.field\"),\n            TestSpec.of(job::seniority, \"job.seniority\"),\n            TestSpec.of(job::position, \"job.position\"),\n            TestSpec.of(job::keySkills, \"job.key_skills\", \"(?:[A-Za-z-]+ ?){1,3}\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ElectricalComponentsTest.java.ElectricalComponentsTest", "name": "ElectricalComponentsTest", "file_path": "src/test/java/net/datafaker/providers/base/ElectricalComponentsTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ElectricalComponentsTest.java.ElectricalComponentsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ElectricalComponentsTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        ElectricalComponents electricalComponents = faker.electricalComponents();\n        return List.of(TestSpec.of(electricalComponents::active, \"electrical_components.active\"),\n            TestSpec.of(electricalComponents::passive, \"electrical_components.passive\"),\n            TestSpec.of(electricalComponents::electromechanical, \"electrical_components.electromechanical\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/YodaTest.java.YodaTest", "name": "YodaTest", "file_path": "src/test/java/net/datafaker/providers/base/YodaTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/YodaTest.java.YodaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "\n@author Luka Obradovic (luka@vast.com)\n", "original_string": "class YodaTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Yoda yoda = faker.yoda();\n        return List.of(TestSpec.of(yoda::quote, \"yoda.quotes\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/ChiquitoTest.java.ChiquitoTest", "name": "ChiquitoTest", "file_path": "src/test/java/net/datafaker/providers/base/ChiquitoTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/ChiquitoTest.java.ChiquitoTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ChiquitoTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Chiquito chiquito = faker.chiquito();\n        return List.of(TestSpec.of(chiquito::expressions, \"chiquito.expressions\"),\n            TestSpec.of(chiquito::terms, \"chiquito.terms\"),\n            TestSpec.of(chiquito::sentences, \"chiquito.sentences\"),\n            TestSpec.of(chiquito::jokes, \"chiquito.jokes\"));\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/base/RockBandTest.java.RockBandTest", "name": "RockBandTest", "file_path": "src/test/java/net/datafaker/providers/base/RockBandTest.java", "superclasses": "", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/base/RockBandTest.java.RockBandTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class RockBandTest extends BaseFakerTest<BaseFaker> {\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        RockBand band = faker.rockBand();\n        return List.of(TestSpec.of(band::name, \"rock_band.name\", \"([\\\\w'/.,&]+ ?)+\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/foods/BeerTest.java.BeerTest", "name": "BeerTest", "file_path": "src/test/java/net/datafaker/providers/foods/BeerTest.java", "superclasses": "FoodFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/foods/BeerTest.java.BeerTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BeerTest extends FoodFakerTest {\n\n    private final Beer beer = getFaker().beer();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(beer::brand, \"beer.brand\"),\n            TestSpec.of(beer::hop, \"beer.hop\"),\n            TestSpec.of(beer::malt, \"beer.malt\"),\n            TestSpec.of(beer::name, \"beer.name\"),\n            TestSpec.of(beer::style, \"beer.style\"),\n            TestSpec.of(beer::yeast, \"beer.yeast\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Beer beer = getFaker().beer();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Beer", "name": "beer = getFaker().beer()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/foods/DessertTest.java.DessertTest", "name": "DessertTest", "file_path": "src/test/java/net/datafaker/providers/foods/DessertTest.java", "superclasses": "FoodFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/foods/DessertTest.java.DessertTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DessertTest extends FoodFakerTest {\n\n    private final Dessert dessert = getFaker().dessert();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dessert::flavor, \"dessert.flavor\"),\n            TestSpec.of(dessert::topping, \"dessert.topping\"),\n            TestSpec.of(dessert::variety, \"dessert.variety\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Dessert dessert = getFaker().dessert();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Dessert", "name": "dessert = getFaker().dessert()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/foods/FoodFakerTest.java.FoodFakerTest", "name": "FoodFakerTest", "file_path": "src/test/java/net/datafaker/providers/foods/FoodFakerTest.java", "superclasses": "", "methods": ["[FoodFaker]getFaker()"], "method_uris": ["src/test/java/net/datafaker/providers/foods/FoodFakerTest.java.FoodFakerTest.[FoodFaker]getFaker()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FoodFakerTest extends BaseFakerTest<FoodFaker> {\n    @Override\n    protected FoodFaker getFaker() {\n        return new FoodFaker();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/sport/Formula1Test.java.Formula1Test", "name": "Formula1Test", "file_path": "src/test/java/net/datafaker/providers/sport/Formula1Test.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/Formula1Test.java.Formula1Test.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class Formula1Test extends SportFakerTest {\n\n    private final Formula1 formula1 = getFaker().formula1();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(formula1::circuit, \"formula1.circuit\"),\n            TestSpec.of(formula1::driver, \"formula1.driver\"),\n            TestSpec.of(formula1::grandPrix, \"formula1.grand_prix\"),\n            TestSpec.of(formula1::team, \"formula1.team\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Formula1 formula1 = getFaker().formula1();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Formula1", "name": "formula1 = getFaker().formula1()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/EnglandFootBallTest.java.EnglandFootBallTest", "name": "EnglandFootBallTest", "file_path": "src/test/java/net/datafaker/providers/sport/EnglandFootBallTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/EnglandFootBallTest.java.EnglandFootBallTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class EnglandFootBallTest extends SportFakerTest {\n\n    private final EnglandFootBall englandFootBall = getFaker().englandfootball();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(englandFootBall::league, \"englandfootball.leagues\"),\n            TestSpec.of(englandFootBall::team, \"englandfootball.teams\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final EnglandFootBall englandFootBall = getFaker().englandfootball();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "EnglandFootBall", "name": "englandFootBall = getFaker().englandfootball()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/VolleyballTest.java.VolleyballTest", "name": "VolleyballTest", "file_path": "src/test/java/net/datafaker/providers/sport/VolleyballTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/VolleyballTest.java.VolleyballTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class VolleyballTest extends SportFakerTest {\n\n    private final Volleyball volleyball = getFaker().volleyball();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(volleyball::coach, \"volleyball.coach\"),\n            TestSpec.of(volleyball::formation, \"volleyball.formation\"),\n            TestSpec.of(volleyball::player, \"volleyball.player\"),\n            TestSpec.of(volleyball::position, \"volleyball.position\"),\n            TestSpec.of(volleyball::team, \"volleyball.team\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Volleyball volleyball = getFaker().volleyball();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Volleyball", "name": "volleyball = getFaker().volleyball()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/ChessTest.java.ChessTest", "name": "ChessTest", "file_path": "src/test/java/net/datafaker/providers/sport/ChessTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/ChessTest.java.ChessTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ChessTest extends SportFakerTest {\n\n    private final Chess chess = getFaker().chess();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(chess::opening, \"chess.openings\"),\n            TestSpec.of(chess::player, \"chess.players\"),\n            TestSpec.of(chess::title, \"chess.titles\"),\n            TestSpec.of(chess::tournament, \"chess.tournaments\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Chess chess = getFaker().chess();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Chess", "name": "chess = getFaker().chess()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/BaseballTest.java.BaseballTest", "name": "BaseballTest", "file_path": "src/test/java/net/datafaker/providers/sport/BaseballTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/BaseballTest.java.BaseballTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class BaseballTest extends SportFakerTest {\n\n    private final Baseball baseball = getFaker().baseball();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(baseball::coaches, \"baseball.coaches\"),\n            TestSpec.of(baseball::players, \"baseball.players\"),\n            TestSpec.of(baseball::positions, \"baseball.positions\"),\n            TestSpec.of(baseball::teams, \"baseball.teams\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Baseball baseball = getFaker().baseball();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Baseball", "name": "baseball = getFaker().baseball()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/FootballTest.java.FootballTest", "name": "FootballTest", "file_path": "src/test/java/net/datafaker/providers/sport/FootballTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/FootballTest.java.FootballTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FootballTest extends SportFakerTest {\n\n    private final Football football = getFaker().football();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(football::coaches, \"football.coaches\"),\n            TestSpec.of(football::competitions, \"football.competitions\"),\n            TestSpec.of(football::players, \"football.players\"),\n            TestSpec.of(football::positions, \"football.positions\"),\n            TestSpec.of(football::teams, \"football.teams\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Football football = getFaker().football();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Football", "name": "football = getFaker().football()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/BasketballTest.java.BasketballTest", "name": "BasketballTest", "file_path": "src/test/java/net/datafaker/providers/sport/BasketballTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/BasketballTest.java.BasketballTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BasketballTest extends SportFakerTest {\n\n    private final Basketball basketball = getFaker().basketball();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(basketball::coaches, \"basketball.coaches\"),\n            TestSpec.of(basketball::players, \"basketball.players\"),\n            TestSpec.of(basketball::positions, \"basketball.positions\"),\n            TestSpec.of(basketball::teams, \"basketball.teams\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Basketball basketball = getFaker().basketball();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Basketball", "name": "basketball = getFaker().basketball()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/sport/SportFakerTest.java.SportFakerTest", "name": "SportFakerTest", "file_path": "src/test/java/net/datafaker/providers/sport/SportFakerTest.java", "superclasses": "", "methods": ["[SportFaker]getFaker()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/SportFakerTest.java.SportFakerTest.[SportFaker]getFaker()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SportFakerTest extends BaseFakerTest<SportFaker> {\n    @Override\n    protected SportFaker getFaker() {\n        return new SportFaker();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/sport/CricketTest.java.CricketTest", "name": "CricketTest", "file_path": "src/test/java/net/datafaker/providers/sport/CricketTest.java", "superclasses": "SportFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/sport/CricketTest.java.CricketTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CricketTest extends SportFakerTest {\n\n    private final Cricket cricket = getFaker().cricket();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(cricket::formats, \"cricket.formats\"),\n            TestSpec.of(cricket::players, \"cricket.players\"),\n            TestSpec.of(cricket::teams, \"cricket.teams\"),\n            TestSpec.of(cricket::tournaments, \"cricket.tournaments\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Cricket cricket = getFaker().cricket();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Cricket", "name": "cricket = getFaker().cricket()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/ClashOfClansTest.java.ClashOfClansTest", "name": "ClashOfClansTest", "file_path": "src/test/java/net/datafaker/providers/videogame/ClashOfClansTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/ClashOfClansTest.java.ClashOfClansTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ClashOfClansTest extends VideoGameFakerTest {\n\n    private final ClashOfClans clashOfClans = getFaker().clashOfClans();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(clashOfClans::defensiveBuilding, \"clash_of_clans.defensive_buildings\"),\n            TestSpec.of(clashOfClans::rank, \"clash_of_clans.ranks\"),\n            TestSpec.of(clashOfClans::troop, \"clash_of_clans.troops\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final ClashOfClans clashOfClans = getFaker().clashOfClans();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ClashOfClans", "name": "clashOfClans = getFaker().clashOfClans()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/DarkSoulsTest.java.DarkSoulsTest", "name": "DarkSoulsTest", "file_path": "src/test/java/net/datafaker/providers/videogame/DarkSoulsTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/DarkSoulsTest.java.DarkSoulsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DarkSoulsTest extends VideoGameFakerTest {\n\n    private final DarkSouls darkSouls = getFaker().darkSouls();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(darkSouls::classes, \"dark_souls.classes\"),\n            TestSpec.of(darkSouls::covenants, \"dark_souls.covenants\"),\n            TestSpec.of(darkSouls::shield, \"dark_souls.shield\"),\n            TestSpec.of(darkSouls::stats, \"dark_souls.stats\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final DarkSouls darkSouls = getFaker().darkSouls();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DarkSouls", "name": "darkSouls = getFaker().darkSouls()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/WorldOfWarcraftTest.java.WorldOfWarcraftTest", "name": "WorldOfWarcraftTest", "file_path": "src/test/java/net/datafaker/providers/videogame/WorldOfWarcraftTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/WorldOfWarcraftTest.java.WorldOfWarcraftTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class WorldOfWarcraftTest extends VideoGameFakerTest {\n\n    private final WorldOfWarcraft worldOfWarcraft = getFaker().worldOfWarcraft();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(worldOfWarcraft::hero, \"games.world_of_warcraft.hero\"),\n            TestSpec.of(worldOfWarcraft::quotes, \"games.world_of_warcraft.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final WorldOfWarcraft worldOfWarcraft = getFaker().worldOfWarcraft();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WorldOfWarcraft", "name": "worldOfWarcraft = getFaker().worldOfWarcraft()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/Battlefield1Test.java.Battlefield1Test", "name": "Battlefield1Test", "file_path": "src/test/java/net/datafaker/providers/videogame/Battlefield1Test.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/Battlefield1Test.java.Battlefield1Test.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class Battlefield1Test extends VideoGameFakerTest {\n\n    private final Battlefield1 battlefield1 = getFaker().battlefield1();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(battlefield1::classes, \"battlefield1.classes\"),\n            TestSpec.of(battlefield1::faction, \"battlefield1.faction\"),\n            TestSpec.of(battlefield1::map, \"battlefield1.map\"),\n            TestSpec.of(battlefield1::vehicle, \"battlefield1.vehicle\"),\n            TestSpec.of(battlefield1::weapon, \"battlefield1.weapon\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Battlefield1 battlefield1 = getFaker().battlefield1();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Battlefield1", "name": "battlefield1 = getFaker().battlefield1()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/RedDeadRedemption2Test.java.RedDeadRedemption2Test", "name": "RedDeadRedemption2Test", "file_path": "src/test/java/net/datafaker/providers/videogame/RedDeadRedemption2Test.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/RedDeadRedemption2Test.java.RedDeadRedemption2Test.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RedDeadRedemption2Test extends VideoGameFakerTest {\n\n    private final RedDeadRedemption2 redDeadRedemption2 = getFaker().redDeadRedemption2();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(redDeadRedemption2::protagonist, \"red_dead_redemption2.protagonists\"),\n            TestSpec.of(redDeadRedemption2::gangMember, \"red_dead_redemption2.gang_members\"),\n            TestSpec.of(redDeadRedemption2::majorCharacter, \"red_dead_redemption2.major_characters\"),\n            TestSpec.of(redDeadRedemption2::animal, \"red_dead_redemption2.animals\"),\n            TestSpec.of(redDeadRedemption2::state, \"red_dead_redemption2.states\"),\n            TestSpec.of(redDeadRedemption2::region, \"red_dead_redemption2.regions\"),\n            TestSpec.of(redDeadRedemption2::settlement, \"red_dead_redemption2.settlements\"),\n            TestSpec.of(redDeadRedemption2::quote, \"red_dead_redemption2.quotes\"),\n            TestSpec.of(redDeadRedemption2::weapon, \"red_dead_redemption2.weapons\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final RedDeadRedemption2 redDeadRedemption2 = getFaker().redDeadRedemption2();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RedDeadRedemption2", "name": "redDeadRedemption2 = getFaker().redDeadRedemption2()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/HalfLifeTest.java.HalfLifeTest", "name": "HalfLifeTest", "file_path": "src/test/java/net/datafaker/providers/videogame/HalfLifeTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/HalfLifeTest.java.HalfLifeTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HalfLifeTest extends VideoGameFakerTest {\n\n    private final HalfLife halfLife = getFaker().halfLife();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(halfLife::character, \"games.half_life.character\"),\n            TestSpec.of(halfLife::enemy, \"games.half_life.enemy\"),\n            TestSpec.of(halfLife::location, \"games.half_life.location\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HalfLife halfLife = getFaker().halfLife();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HalfLife", "name": "halfLife = getFaker().halfLife()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/LeagueOfLegendsTest.java.LeagueOfLegendsTest", "name": "LeagueOfLegendsTest", "file_path": "src/test/java/net/datafaker/providers/videogame/LeagueOfLegendsTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/LeagueOfLegendsTest.java.LeagueOfLegendsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class LeagueOfLegendsTest extends VideoGameFakerTest {\n\n    private final LeagueOfLegends leagueOfLegends = getFaker().leagueOfLegends();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(leagueOfLegends::champion, \"games.league_of_legends.champion\"),\n            TestSpec.of(leagueOfLegends::location, \"games.league_of_legends.location\"),\n            TestSpec.of(leagueOfLegends::masteries, \"games.league_of_legends.masteries\"),\n            TestSpec.of(leagueOfLegends::quote, \"games.league_of_legends.quote\"),\n            TestSpec.of(leagueOfLegends::rank, \"games.league_of_legends.rank\"),\n            TestSpec.of(leagueOfLegends::summonerSpell, \"games.league_of_legends.summoner_spell\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final LeagueOfLegends leagueOfLegends = getFaker().leagueOfLegends();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "LeagueOfLegends", "name": "leagueOfLegends = getFaker().leagueOfLegends()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/EldenRingTest.java.EldenRingTest", "name": "EldenRingTest", "file_path": "src/test/java/net/datafaker/providers/videogame/EldenRingTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/EldenRingTest.java.EldenRingTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class EldenRingTest extends VideoGameFakerTest {\n\n    private final EldenRing eldenRing = getFaker().eldenRing();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(eldenRing::location, \"elden_ring.location\"),\n            TestSpec.of(eldenRing::npc, \"elden_ring.npc\"),\n            TestSpec.of(eldenRing::skill, \"elden_ring.skill\"),\n            TestSpec.of(eldenRing::spell, \"elden_ring.spell\"),\n            TestSpec.of(eldenRing::weapon, \"elden_ring.weapon\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final EldenRing eldenRing = getFaker().eldenRing();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "EldenRing", "name": "eldenRing = getFaker().eldenRing()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/VideoGameFakerTest.java.VideoGameFakerTest", "name": "VideoGameFakerTest", "file_path": "src/test/java/net/datafaker/providers/videogame/VideoGameFakerTest.java", "superclasses": "", "methods": ["[VideoGameFaker]getFaker()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/VideoGameFakerTest.java.VideoGameFakerTest.[VideoGameFaker]getFaker()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VideoGameFakerTest extends BaseFakerTest<VideoGameFaker> {\n    @Override\n    protected VideoGameFaker getFaker() {\n        return new VideoGameFaker();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/videogame/HeroesOfTheStormTest.java.HeroesOfTheStormTest", "name": "HeroesOfTheStormTest", "file_path": "src/test/java/net/datafaker/providers/videogame/HeroesOfTheStormTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/HeroesOfTheStormTest.java.HeroesOfTheStormTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class HeroesOfTheStormTest extends VideoGameFakerTest {\n\n    private final HeroesOfTheStorm heroesOfTheStorm = getFaker().heroesOfTheStorm();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(heroesOfTheStorm::battleground, \"heroes_of_the_storm.battlegrounds\"),\n            TestSpec.of(heroesOfTheStorm::hero, \"heroes_of_the_storm.heroes\"),\n            TestSpec.of(heroesOfTheStorm::heroClass, \"heroes_of_the_storm.classes\"),\n            TestSpec.of(heroesOfTheStorm::quote, \"heroes_of_the_storm.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HeroesOfTheStorm heroesOfTheStorm = getFaker().heroesOfTheStorm();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HeroesOfTheStorm", "name": "heroesOfTheStorm = getFaker().heroesOfTheStorm()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/SonicTheHedgehogTest.java.SonicTheHedgehogTest", "name": "SonicTheHedgehogTest", "file_path": "src/test/java/net/datafaker/providers/videogame/SonicTheHedgehogTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/SonicTheHedgehogTest.java.SonicTheHedgehogTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SonicTheHedgehogTest extends VideoGameFakerTest {\n\n    private final SonicTheHedgehog sonicTheHedgehog = getFaker().sonicTheHedgehog();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(sonicTheHedgehog::character, \"games.sonic_the_hedgehog.character\"),\n            TestSpec.of(sonicTheHedgehog::game, \"games.sonic_the_hedgehog.game\"),\n            TestSpec.of(sonicTheHedgehog::zone, \"games.sonic_the_hedgehog.zone\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SonicTheHedgehog sonicTheHedgehog = getFaker().sonicTheHedgehog();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SonicTheHedgehog", "name": "sonicTheHedgehog = getFaker().sonicTheHedgehog()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/SuperMarioTest.java.SuperMarioTest", "name": "SuperMarioTest", "file_path": "src/test/java/net/datafaker/providers/videogame/SuperMarioTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/SuperMarioTest.java.SuperMarioTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SuperMarioTest extends VideoGameFakerTest {\n\n    private final SuperMario superMario = getFaker().superMario();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(superMario::characters, \"games.super_mario.characters\"),\n            TestSpec.of(superMario::games, \"games.super_mario.games\"),\n            TestSpec.of(superMario::locations, \"games.super_mario.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SuperMario superMario = getFaker().superMario();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SuperMario", "name": "superMario = getFaker().superMario()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/EsportsTest.java.EsportsTest", "name": "EsportsTest", "file_path": "src/test/java/net/datafaker/providers/videogame/EsportsTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/EsportsTest.java.EsportsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class EsportsTest extends VideoGameFakerTest {\n\n    private final Esports esports = getFaker().esports();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(esports::event, \"esport.events\"),\n            TestSpec.of(esports::game, \"esport.games\"),\n            TestSpec.of(esports::league, \"esport.leagues\"),\n            TestSpec.of(esports::player, \"esport.players\"),\n            TestSpec.of(esports::team, \"esport.teams\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Esports esports = getFaker().esports();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Esports", "name": "esports = getFaker().esports()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/ZeldaTest.java.ZeldaTest", "name": "ZeldaTest", "file_path": "src/test/java/net/datafaker/providers/videogame/ZeldaTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/ZeldaTest.java.ZeldaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ZeldaTest extends VideoGameFakerTest {\n\n    private final Zelda zelda = getFaker().zelda();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(zelda::character, \"games.zelda.characters\"),\n            TestSpec.of(zelda::game, \"games.zelda.games\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Zelda zelda = getFaker().zelda();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Zelda", "name": "zelda = getFaker().zelda()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/VideoGameTest.java.VideoGameTest", "name": "VideoGameTest", "file_path": "src/test/java/net/datafaker/providers/videogame/VideoGameTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/VideoGameTest.java.VideoGameTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class VideoGameTest extends VideoGameFakerTest {\n\n    private final VideoGame videoGame = getFaker().videoGame();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(videoGame::genre, \"video_game.genre\"),\n            TestSpec.of(videoGame::platform, \"video_game.platform\"),\n            TestSpec.of(videoGame::title, \"video_game.title\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final VideoGame videoGame = getFaker().videoGame();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "VideoGame", "name": "videoGame = getFaker().videoGame()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/MarvelSnapTest.java.MarvelSnapTest", "name": "MarvelSnapTest", "file_path": "src/test/java/net/datafaker/providers/videogame/MarvelSnapTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/MarvelSnapTest.java.MarvelSnapTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class MarvelSnapTest extends VideoGameFakerTest {\n\n    private final MarvelSnap marvelSnap = getFaker().marvelSnap();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(marvelSnap::character, \"games.marvel_snap.characters\"),\n            TestSpec.of(marvelSnap::event, \"games.marvel_snap.events\"),\n            TestSpec.of(marvelSnap::rank, \"games.marvel_snap.rank\"),\n            TestSpec.of(marvelSnap::zone, \"games.marvel_snap.zones\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final MarvelSnap marvelSnap = getFaker().marvelSnap();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "MarvelSnap", "name": "marvelSnap = getFaker().marvelSnap()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/FalloutTest.java.FalloutTest", "name": "FalloutTest", "file_path": "src/test/java/net/datafaker/providers/videogame/FalloutTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/FalloutTest.java.FalloutTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FalloutTest extends VideoGameFakerTest {\n\n    private final Fallout fallout = getFaker().fallout();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(fallout::character, \"fallout.characters\"),\n            TestSpec.of(fallout::faction, \"fallout.factions\"),\n            TestSpec.of(fallout::location, \"fallout.locations\"),\n            TestSpec.of(fallout::quote, \"fallout.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Fallout fallout = getFaker().fallout();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Fallout", "name": "fallout = getFaker().fallout()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/MystTest.java.MystTest", "name": "MystTest", "file_path": "src/test/java/net/datafaker/providers/videogame/MystTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/MystTest.java.MystTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MystTest extends VideoGameFakerTest {\n\n    private final Myst myst = getFaker().myst();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(myst::ages, \"games.myst.ages\"),\n            TestSpec.of(myst::characters, \"games.myst.characters\"),\n            TestSpec.of(myst::creatures, \"games.myst.creatures\"),\n            TestSpec.of(myst::games, \"games.myst.games\"),\n            TestSpec.of(myst::quotes, \"games.myst.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Myst myst = getFaker().myst();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Myst", "name": "myst = getFaker().myst()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/MassEffectTest.java.MassEffectTest", "name": "MassEffectTest", "file_path": "src/test/java/net/datafaker/providers/videogame/MassEffectTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/MassEffectTest.java.MassEffectTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MassEffectTest extends VideoGameFakerTest {\n\n    private final MassEffect massEffect = getFaker().massEffect();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(massEffect::character, \"mass_effect.characters\"),\n            TestSpec.of(massEffect::cluster, \"mass_effect.cluster\"),\n            TestSpec.of(massEffect::planet, \"mass_effect.planets\"),\n            TestSpec.of(massEffect::quote, \"mass_effect.quotes\"),\n            TestSpec.of(massEffect::specie, \"mass_effect.species\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final MassEffect massEffect = getFaker().massEffect();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "MassEffect", "name": "massEffect = getFaker().massEffect()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/ControlTest.java.ControlTest", "name": "ControlTest", "file_path": "src/test/java/net/datafaker/providers/videogame/ControlTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/ControlTest.java.ControlTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ControlTest extends VideoGameFakerTest {\n\n    private final Control control = getFaker().control();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(control::alteredItem, \"control.altered_item\"),\n            TestSpec.of(control::alteredWorldEvent, \"control.altered_world_event\"),\n            TestSpec.of(control::character, \"control.character\"),\n            TestSpec.of(control::hiss, \"control.hiss\"),\n            TestSpec.of(control::location, \"control.location\"),\n            TestSpec.of(control::objectOfPower, \"control.object_of_power\"),\n            TestSpec.of(control::quote, \"control.quote\"),\n            TestSpec.of(control::theBoard, \"control.the_board\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Control control = getFaker().control();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Control", "name": "control = getFaker().control()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/TouhouTest.java.TouhouTest", "name": "TouhouTest", "file_path": "src/test/java/net/datafaker/providers/videogame/TouhouTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/TouhouTest.java.TouhouTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TouhouTest extends VideoGameFakerTest {\n\n    private final Touhou touhou = getFaker().touhou();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(touhou::characterFirstName, \"touhou.first_name\"),\n            TestSpec.of(touhou::characterLastName, \"touhou.last_name\"),\n            TestSpec.of(touhou::characterName, \"touhou.full_name\"),\n            TestSpec.of(touhou::gameName, \"touhou.game_name\"),\n            TestSpec.of(touhou::trackName, \"touhou.track_name\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Touhou touhou = getFaker().touhou();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Touhou", "name": "touhou = getFaker().touhou()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/StreetFighterTest.java.StreetFighterTest", "name": "StreetFighterTest", "file_path": "src/test/java/net/datafaker/providers/videogame/StreetFighterTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/StreetFighterTest.java.StreetFighterTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StreetFighterTest extends VideoGameFakerTest {\n\n    private final StreetFighter streetFighter = getFaker().streetFighter();\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(streetFighter::characters, \"games.street_fighter.characters\"),\n            TestSpec.of(streetFighter::moves, \"games.street_fighter.moves\"),\n            TestSpec.of(streetFighter::stages, \"games.street_fighter.stages\"),\n            TestSpec.of(streetFighter::quotes, \"games.street_fighter.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final StreetFighter streetFighter = getFaker().streetFighter();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "StreetFighter", "name": "streetFighter = getFaker().streetFighter()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/StarCraftTest.java.StarCraftTest", "name": "StarCraftTest", "file_path": "src/test/java/net/datafaker/providers/videogame/StarCraftTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/StarCraftTest.java.StarCraftTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StarCraftTest extends VideoGameFakerTest {\n\n    private final StarCraft starCraft = getFaker().starCraft();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(starCraft::building, \"starcraft.buildings\"),\n            TestSpec.of(starCraft::character, \"starcraft.characters\"),\n            TestSpec.of(starCraft::planet, \"starcraft.planets\"),\n            TestSpec.of(starCraft::unit, \"starcraft.units\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final StarCraft starCraft = getFaker().starCraft();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "StarCraft", "name": "starCraft = getFaker().starCraft()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/ElderScrollsTest.java.ElderScrollsTest", "name": "ElderScrollsTest", "file_path": "src/test/java/net/datafaker/providers/videogame/ElderScrollsTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/ElderScrollsTest.java.ElderScrollsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ElderScrollsTest extends VideoGameFakerTest {\n\n    private final ElderScrolls elderScrolls = getFaker().elderScrolls();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(elderScrolls::city, \"games.elder_scrolls.city\"),\n            TestSpec.of(elderScrolls::creature, \"games.elder_scrolls.creature\"),\n            TestSpec.of(elderScrolls::dragon, \"games.elder_scrolls.dragon\"),\n            TestSpec.of(elderScrolls::firstName, \"games.elder_scrolls.first_name\"),\n            TestSpec.of(elderScrolls::lastName, \"games.elder_scrolls.last_name\"),\n            TestSpec.of(elderScrolls::quote, \"games.elder_scrolls.quote\"),\n            TestSpec.of(elderScrolls::race, \"games.elder_scrolls.race\"),\n            TestSpec.of(elderScrolls::region, \"games.elder_scrolls.region\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final ElderScrolls elderScrolls = getFaker().elderScrolls();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ElderScrolls", "name": "elderScrolls = getFaker().elderScrolls()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/WarhammerFantasyTest.java.WarhammerFantasyTest", "name": "WarhammerFantasyTest", "file_path": "src/test/java/net/datafaker/providers/videogame/WarhammerFantasyTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/WarhammerFantasyTest.java.WarhammerFantasyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class WarhammerFantasyTest extends VideoGameFakerTest {\n\n    private final WarhammerFantasy warhammerFantasy = getFaker().warhammerFantasy();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(warhammerFantasy::creatures, \"games.warhammer_fantasy.creatures\"),\n            TestSpec.of(warhammerFantasy::factions, \"games.warhammer_fantasy.factions\"),\n            TestSpec.of(warhammerFantasy::heros, \"games.warhammer_fantasy.heros\"),\n            TestSpec.of(warhammerFantasy::locations, \"games.warhammer_fantasy.locations\"),\n            TestSpec.of(warhammerFantasy::quotes, \"games.warhammer_fantasy.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final WarhammerFantasy warhammerFantasy = getFaker().warhammerFantasy();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WarhammerFantasy", "name": "warhammerFantasy = getFaker().warhammerFantasy()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/OverwatchTest.java.OverwatchTest", "name": "OverwatchTest", "file_path": "src/test/java/net/datafaker/providers/videogame/OverwatchTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/OverwatchTest.java.OverwatchTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class OverwatchTest extends VideoGameFakerTest {\n\n    private final Overwatch overwatch = getFaker().overwatch();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(overwatch::hero, \"games.overwatch.heroes\"),\n            TestSpec.of(overwatch::location, \"games.overwatch.locations\"),\n            TestSpec.of(overwatch::quote, \"games.overwatch.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Overwatch overwatch = getFaker().overwatch();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Overwatch", "name": "overwatch = getFaker().overwatch()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/SoulKnightTest.java.SoulKnightTest", "name": "SoulKnightTest", "file_path": "src/test/java/net/datafaker/providers/videogame/SoulKnightTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/SoulKnightTest.java.SoulKnightTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SoulKnightTest extends VideoGameFakerTest {\n\n    private final SoulKnight soulKnight = getFaker().soulKnight();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(soulKnight::bosses, \"soul_knight.bosses\"),\n            TestSpec.of(soulKnight::buffs, \"soul_knight.buffs\"),\n            TestSpec.of(soulKnight::enemies, \"soul_knight.enemies\"),\n            TestSpec.of(soulKnight::statues, \"soul_knight.statues\"),\n            TestSpec.of(soulKnight::weapons, \"soul_knight.weapons\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SoulKnight soulKnight = getFaker().soulKnight();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SoulKnight", "name": "soulKnight = getFaker().soulKnight()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/SuperSmashBrosTest.java.SuperSmashBrosTest", "name": "SuperSmashBrosTest", "file_path": "src/test/java/net/datafaker/providers/videogame/SuperSmashBrosTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/SuperSmashBrosTest.java.SuperSmashBrosTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SuperSmashBrosTest extends VideoGameFakerTest {\n\n    private final SuperSmashBros superSmashBros = getFaker().superSmashBros();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(superSmashBros::fighter, \"games.super_smash_bros.fighter\"),\n            TestSpec.of(superSmashBros::stage, \"games.super_smash_bros.stage\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SuperSmashBros superSmashBros = getFaker().superSmashBros();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SuperSmashBros", "name": "superSmashBros = getFaker().superSmashBros()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/videogame/FinalFantasyXIVTest.java.FinalFantasyXIVTest", "name": "FinalFantasyXIVTest", "file_path": "src/test/java/net/datafaker/providers/videogame/FinalFantasyXIVTest.java", "superclasses": "VideoGameFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/videogame/FinalFantasyXIVTest.java.FinalFantasyXIVTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FinalFantasyXIVTest extends VideoGameFakerTest {\n\n    private final FinalFantasyXIV finalFantasyXIV = getFaker().finalFantasyXIV();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(finalFantasyXIV::character, \"final_fantasy_xiv.characters\"),\n            TestSpec.of(finalFantasyXIV::job, \"final_fantasy_xiv.jobs\"),\n            TestSpec.of(finalFantasyXIV::race, \"final_fantasy_xiv.races\"),\n            TestSpec.of(finalFantasyXIV::dataCenter, \"final_fantasy_xiv.data_centers\"),\n            TestSpec.of(finalFantasyXIV::zone, \"final_fantasy_xiv.zones\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final FinalFantasyXIV finalFantasyXIV = getFaker().finalFantasyXIV();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FinalFantasyXIV", "name": "finalFantasyXIV = getFaker().finalFantasyXIV()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/healthcare/MedicationTest.java.MedicationTest", "name": "MedicationTest", "file_path": "src/test/java/net/datafaker/providers/healthcare/MedicationTest.java", "superclasses": "HealthcareFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/healthcare/MedicationTest.java.MedicationTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MedicationTest extends HealthcareFakerTest {\n\n    private final Medication medication = getFaker().medication();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(medication::drugName, \"healthcare.medication.drug_name\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Medication medication = getFaker().medication();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Medication", "name": "medication = getFaker().medication()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/healthcare/HealthcareFakerTest.java.HealthcareFakerTest", "name": "HealthcareFakerTest", "file_path": "src/test/java/net/datafaker/providers/healthcare/HealthcareFakerTest.java", "superclasses": "", "methods": ["[HealthcareFaker]getFaker()"], "method_uris": ["src/test/java/net/datafaker/providers/healthcare/HealthcareFakerTest.java.HealthcareFakerTest.[HealthcareFaker]getFaker()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HealthcareFakerTest extends BaseFakerTest<HealthcareFaker> {\n    @Override\n    protected HealthcareFaker getFaker() {\n        return new HealthcareFaker();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/healthcare/ObservationTest.java.ObservationTest", "name": "ObservationTest", "file_path": "src/test/java/net/datafaker/providers/healthcare/ObservationTest.java", "superclasses": "HealthcareFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/healthcare/ObservationTest.java.ObservationTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ObservationTest extends HealthcareFakerTest {\n\n    private final Observation observation = getFaker().observation();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(observation::symptom, \"healthcare.observation.symptom\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Observation observation = getFaker().observation();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Observation", "name": "observation = getFaker().observation()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/healthcare/CareProviderTest.java.CareProviderTest", "name": "CareProviderTest", "file_path": "src/test/java/net/datafaker/providers/healthcare/CareProviderTest.java", "superclasses": "HealthcareFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/healthcare/CareProviderTest.java.CareProviderTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CareProviderTest extends HealthcareFakerTest {\n\n    private final CareProvider careProvider = getFaker().careProvider();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(careProvider::hospitalName, \"healthcare.care_provider.hospital_name\"),\n            TestSpec.of(careProvider::medicalProfession, \"healthcare.care_provider.medical_profession\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final CareProvider careProvider = getFaker().careProvider();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CareProvider", "name": "careProvider = getFaker().careProvider()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAirTest.java.FreshPrinceOfBelAirTest", "name": "FreshPrinceOfBelAirTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAirTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAirTest.java.FreshPrinceOfBelAirTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FreshPrinceOfBelAirTest extends EntertainmentFakerTest {\n\n    private final FreshPrinceOfBelAir freshPrinceOfBelAir = getFaker().freshPrinceOfBelAir();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(freshPrinceOfBelAir::characters, \"fresh_prince_of_bel_air.characters\"),\n            TestSpec.of(freshPrinceOfBelAir::celebrities, \"fresh_prince_of_bel_air.celebrities\"),\n            TestSpec.of(freshPrinceOfBelAir::quotes, \"fresh_prince_of_bel_air.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final FreshPrinceOfBelAir freshPrinceOfBelAir = getFaker().freshPrinceOfBelAir();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FreshPrinceOfBelAir", "name": "freshPrinceOfBelAir = getFaker().freshPrinceOfBelAir()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/KaamelottTest.java.KaamelottTest", "name": "KaamelottTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/KaamelottTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/KaamelottTest.java.KaamelottTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class KaamelottTest extends EntertainmentFakerTest {\n\n    private final Kaamelott kaamelott = getFaker().kaamelott();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(kaamelott::character, \"kaamelott.characters\"),\n            TestSpec.of(kaamelott::quote, \"kaamelott.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Kaamelott kaamelott = getFaker().kaamelott();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Kaamelott", "name": "kaamelott = getFaker().kaamelott()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/LordOfTheRingsTest.java.LordOfTheRingsTest", "name": "LordOfTheRingsTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/LordOfTheRingsTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/LordOfTheRingsTest.java.LordOfTheRingsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "\n@author Luka Obradovic (luka@vast.com)\n", "original_string": "class LordOfTheRingsTest extends EntertainmentFakerTest {\n\n    private final LordOfTheRings lordOfTheRings = getFaker().lordOfTheRings();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(lordOfTheRings::character, \"lord_of_the_rings.characters\"),\n            TestSpec.of(lordOfTheRings::location, \"lord_of_the_rings.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final LordOfTheRings lordOfTheRings = getFaker().lordOfTheRings();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "LordOfTheRings", "name": "lordOfTheRings = getFaker().lordOfTheRings()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DragonBallTest.java.DragonBallTest", "name": "DragonBallTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DragonBallTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DragonBallTest.java.DragonBallTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DragonBallTest extends EntertainmentFakerTest {\n\n    private final DragonBall dragonBall = getFaker().dragonBall();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dragonBall::character, \"dragon_ball.characters\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final DragonBall dragonBall = getFaker().dragonBall();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DragonBall", "name": "dragonBall = getFaker().dragonBall()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DoctorWhoTest.java.DoctorWhoTest", "name": "DoctorWhoTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DoctorWhoTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DoctorWhoTest.java.DoctorWhoTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DoctorWhoTest extends EntertainmentFakerTest {\n\n    private final DoctorWho doctorWho = getFaker().doctorWho();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(doctorWho::character, \"dr_who.character\"),\n            TestSpec.of(doctorWho::doctor, \"dr_who.the_doctors\"),\n            TestSpec.of(doctorWho::actor, \"dr_who.actors\"),\n            TestSpec.of(doctorWho::catchPhrase, \"dr_who.catch_phrases\"),\n            TestSpec.of(doctorWho::quote, \"dr_who.quotes\"),\n            TestSpec.of(doctorWho::villain, \"dr_who.villains\"),\n            TestSpec.of(doctorWho::species, \"dr_who.species\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final DoctorWho doctorWho = getFaker().doctorWho();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DoctorWho", "name": "doctorWho = getFaker().doctorWho()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SiliconValleyTest.java.SiliconValleyTest", "name": "SiliconValleyTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SiliconValleyTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SiliconValleyTest.java.SiliconValleyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SiliconValleyTest extends EntertainmentFakerTest {\n\n    private final SiliconValley siliconValley = getFaker().siliconValley();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(siliconValley::app, \"silicon_valley.apps\"),\n            TestSpec.of(siliconValley::character, \"silicon_valley.characters\"),\n            TestSpec.of(siliconValley::company, \"silicon_valley.companies\"),\n            TestSpec.of(siliconValley::email, \"silicon_valley.email\"),\n            TestSpec.of(siliconValley::invention, \"silicon_valley.inventions\"),\n            TestSpec.of(siliconValley::motto, \"silicon_valley.mottos\"),\n            TestSpec.of(siliconValley::quote, \"silicon_valley.quotes\"),\n            TestSpec.of(siliconValley::url, \"silicon_valley.urls\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SiliconValley siliconValley = getFaker().siliconValley();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SiliconValley", "name": "siliconValley = getFaker().siliconValley()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/GameOfThronesTest.java.GameOfThronesTest", "name": "GameOfThronesTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/GameOfThronesTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/GameOfThronesTest.java.GameOfThronesTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class GameOfThronesTest extends EntertainmentFakerTest {\n\n    private final GameOfThrones gameOfThrones = getFaker().gameOfThrones();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(gameOfThrones::character, \"game_of_thrones.characters\"),\n            TestSpec.of(gameOfThrones::city, \"game_of_thrones.cities\"),\n            TestSpec.of(gameOfThrones::dragon, \"game_of_thrones.dragons\"),\n            TestSpec.of(gameOfThrones::house, \"game_of_thrones.houses\"),\n            TestSpec.of(gameOfThrones::quote, \"game_of_thrones.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final GameOfThrones gameOfThrones = getFaker().gameOfThrones();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "GameOfThrones", "name": "gameOfThrones = getFaker().gameOfThrones()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxyTest.java.HitchhikersGuideToTheGalaxyTest", "name": "HitchhikersGuideToTheGalaxyTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxyTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxyTest.java.HitchhikersGuideToTheGalaxyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HitchhikersGuideToTheGalaxyTest extends EntertainmentFakerTest {\n\n    private final HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy = getFaker().hitchhikersGuideToTheGalaxy();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(hitchhikersGuideToTheGalaxy::character, \"hitchhikers_guide_to_the_galaxy.characters\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::location, \"hitchhikers_guide_to_the_galaxy.locations\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::marvinQuote, \"hitchhikers_guide_to_the_galaxy.marvin_quote\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::planet, \"hitchhikers_guide_to_the_galaxy.planets\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::species, \"hitchhikers_guide_to_the_galaxy.species\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::starship, \"hitchhikers_guide_to_the_galaxy.starships\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::quote, \"hitchhikers_guide_to_the_galaxy.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy = getFaker().hitchhikersGuideToTheGalaxy();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HitchhikersGuideToTheGalaxy", "name": "hitchhikersGuideToTheGalaxy = getFaker().hitchhikersGuideToTheGalaxy()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BossaNovaTest.java.BossaNovaTest", "name": "BossaNovaTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BossaNovaTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BossaNovaTest.java.BossaNovaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BossaNovaTest extends EntertainmentFakerTest {\n\n    private final BossaNova bossaNova = getFaker().bossaNova();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(bossaNova::artist, \"bossa_nova.artists\"),\n            TestSpec.of(bossaNova::song, \"bossa_nova.songs\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final BossaNova bossaNova = getFaker().bossaNova();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BossaNova", "name": "bossaNova = getFaker().bossaNova()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/Babylon5Test.java.Babylon5Test", "name": "Babylon5Test", "file_path": "src/test/java/net/datafaker/providers/entertainment/Babylon5Test.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/Babylon5Test.java.Babylon5Test.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class Babylon5Test extends EntertainmentFakerTest {\n\n    private final Babylon5 babylon5 = getFaker().babylon5();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(babylon5::character, \"babylon5.characters\"),\n            TestSpec.of(babylon5::quote, \"babylon5.quotes\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Babylon5 babylon5 = getFaker().babylon5();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Babylon5", "name": "babylon5 = getFaker().babylon5()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/ChuckNorrisTest.java.ChuckNorrisTest", "name": "ChuckNorrisTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/ChuckNorrisTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/ChuckNorrisTest.java.ChuckNorrisTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ChuckNorrisTest extends EntertainmentFakerTest {\n\n    private final ChuckNorris chuckNorris = getFaker().chuckNorris();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(chuckNorris::fact, \"chuck_norris.fact\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final ChuckNorris chuckNorris = getFaker().chuckNorris();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ChuckNorris", "name": "chuckNorris = getFaker().chuckNorris()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/EntertainmentTest.java.EntertainmentTest", "name": "EntertainmentTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/EntertainmentTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/EntertainmentTest.java.EntertainmentTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class EntertainmentTest extends EntertainmentFakerTest {\n\n    private final Show show = getFaker().show();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(show::adultMusical, \"show.adult_musical\"),\n            TestSpec.of(show::play, \"show.play\"),\n            TestSpec.of(show::kidsMusical, \"show.kids_musical\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Show show = getFaker().show();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Show", "name": "show = getFaker().show()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheVentureBrosTest.java.TheVentureBrosTest", "name": "TheVentureBrosTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TheVentureBrosTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TheVentureBrosTest.java.TheVentureBrosTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TheVentureBrosTest extends EntertainmentFakerTest {\n\n    private final TheVentureBros theVentureBros = getFaker().theVentureBros();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theVentureBros::character, \"the_venture_bros.character\"),\n            TestSpec.of(theVentureBros::organization, \"the_venture_bros.organization\"),\n            TestSpec.of(theVentureBros::quote, \"the_venture_bros.quote\"),\n            TestSpec.of(theVentureBros::vehicle, \"the_venture_bros.vehicle\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TheVentureBros theVentureBros = getFaker().theVentureBros();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TheVentureBros", "name": "theVentureBros = getFaker().theVentureBros()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/MovieTest.java.MovieTest", "name": "MovieTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/MovieTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/MovieTest.java.MovieTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MovieTest extends EntertainmentFakerTest {\n\n    private final Movie movie = getFaker().movie();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(movie::quote, \"movie.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Movie movie = getFaker().movie();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Movie", "name": "movie = getFaker().movie()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DumbAndDumberTest.java.DumbAndDumberTest", "name": "DumbAndDumberTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DumbAndDumberTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DumbAndDumberTest.java.DumbAndDumberTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DumbAndDumberTest extends EntertainmentFakerTest {\n\n    private final DumbAndDumber dumbAndDumber = getFaker().dumbAndDumber();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dumbAndDumber::actor, \"dumb_and_dumber.actors\"),\n            TestSpec.of(dumbAndDumber::character, \"dumb_and_dumber.characters\"),\n            TestSpec.of(dumbAndDumber::quote, \"dumb_and_dumber.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final DumbAndDumber dumbAndDumber = getFaker().dumbAndDumber();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DumbAndDumber", "name": "dumbAndDumber = getFaker().dumbAndDumber()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FinalSpaceTest.java.FinalSpaceTest", "name": "FinalSpaceTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/FinalSpaceTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/FinalSpaceTest.java.FinalSpaceTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FinalSpaceTest extends EntertainmentFakerTest {\n\n    private final FinalSpace finalSpace = getFaker().finalSpace();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(finalSpace::character, \"final_space.characters\"),\n            TestSpec.of(finalSpace::quote, \"final_space.quotes\"),\n            TestSpec.of(finalSpace::vehicle, \"final_space.vehicles\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final FinalSpace finalSpace = getFaker().finalSpace();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FinalSpace", "name": "finalSpace = getFaker().finalSpace()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FamilyGuyTest.java.FamilyGuyTest", "name": "FamilyGuyTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/FamilyGuyTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/FamilyGuyTest.java.FamilyGuyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FamilyGuyTest extends EntertainmentFakerTest {\n\n    private final FamilyGuy familyGuy = getFaker().familyGuy();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(familyGuy::character, \"family_guy.character\"),\n            TestSpec.of(familyGuy::location, \"family_guy.location\"),\n            TestSpec.of(familyGuy::quote, \"family_guy.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final FamilyGuy familyGuy = getFaker().familyGuy();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FamilyGuy", "name": "familyGuy = getFaker().familyGuy()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StargateTest.java.StargateTest", "name": "StargateTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/StargateTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/StargateTest.java.StargateTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StargateTest extends EntertainmentFakerTest {\n\n    private final Stargate stargate = getFaker().stargate();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(stargate::characters, \"stargate.characters\"),\n            TestSpec.of(stargate::planets, \"stargate.planets\"),\n            TestSpec.of(stargate::quotes, \"stargate.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Stargate stargate = getFaker().stargate();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Stargate", "name": "stargate = getFaker().stargate()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SouthParkTest.java.SouthParkTest", "name": "SouthParkTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SouthParkTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SouthParkTest.java.SouthParkTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SouthParkTest extends EntertainmentFakerTest {\n\n    private final SouthPark southPark = getFaker().southPark();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(southPark::characters, \"south_park.characters\"),\n            TestSpec.of(southPark::quotes, \"south_park.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SouthPark southPark = getFaker().southPark();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SouthPark", "name": "southPark = getFaker().southPark()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SpongebobTest.java.SpongebobTest", "name": "SpongebobTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SpongebobTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SpongebobTest.java.SpongebobTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SpongebobTest extends EntertainmentFakerTest {\n\n    private final Spongebob spongebob = getFaker().spongebob();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(spongebob::characters, \"spongebob.characters\"),\n            TestSpec.of(spongebob::episodes, \"spongebob.episodes\"),\n            TestSpec.of(spongebob::quotes, \"spongebob.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Spongebob spongebob = getFaker().spongebob();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Spongebob", "name": "spongebob = getFaker().spongebob()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DepartedTest.java.DepartedTest", "name": "DepartedTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DepartedTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DepartedTest.java.DepartedTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DepartedTest extends EntertainmentFakerTest {\n\n    private final Departed departed = getFaker().departed();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(departed::actor, \"departed.actors\"),\n            TestSpec.of(departed::character, \"departed.characters\"),\n            TestSpec.of(departed::quote, \"departed.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Departed departed = getFaker().departed();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Departed", "name": "departed = getFaker().departed()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/WitcherTest.java.WitcherTest", "name": "WitcherTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/WitcherTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/WitcherTest.java.WitcherTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class WitcherTest extends EntertainmentFakerTest {\n\n    private final Witcher witcher = getFaker().witcher();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(witcher::book, \"games.witcher.books\"),\n            TestSpec.of(witcher::character, \"games.witcher.characters\"),\n            TestSpec.of(witcher::location, \"games.witcher.locations\"),\n            TestSpec.of(witcher::monster, \"games.witcher.monsters\"),\n            TestSpec.of(witcher::potion, \"games.witcher.potions\"),\n            TestSpec.of(witcher::quote, \"games.witcher.quotes\"),\n            TestSpec.of(witcher::sign, \"games.witcher.signs\"),\n            TestSpec.of(witcher::school, \"games.witcher.schools\"),\n            TestSpec.of(witcher::witcher, \"games.witcher.witchers\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Witcher witcher = getFaker().witcher();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Witcher", "name": "witcher = getFaker().witcher()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/CowboyBebopTest.java.CowboyBebopTest", "name": "CowboyBebopTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/CowboyBebopTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/CowboyBebopTest.java.CowboyBebopTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class CowboyBebopTest extends EntertainmentFakerTest {\n\n    private final CowboyBebop cowboyBebop = getFaker().cowboyBebop();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(cowboyBebop::character, \"cowboy_bebop.character\"),\n            TestSpec.of(cowboyBebop::episode, \"cowboy_bebop.episode\"),\n            TestSpec.of(cowboyBebop::song, \"cowboy_bebop.song\"),\n            TestSpec.of(cowboyBebop::quote, \"cowboy_bebop.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final CowboyBebop cowboyBebop = getFaker().cowboyBebop();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CowboyBebop", "name": "cowboyBebop = getFaker().cowboyBebop()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DuneTest.java.DuneTest", "name": "DuneTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DuneTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DuneTest.java.DuneTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DuneTest extends EntertainmentFakerTest {\n\n    private final Dune dune = getFaker().dune();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dune::character, \"dune.characters\"),\n            TestSpec.of(dune::title, \"dune.titles\"),\n            TestSpec.of(dune::planet, \"dune.planets\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.ALIA), \"dune.quotes.alia\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.DUNCAN), \"dune.quotes.duncan\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.EMPEROR), \"dune.quotes.emperor\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.GURNEY), \"dune.quotes.gurney\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.IRULAN), \"dune.quotes.irulan\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.LETO), \"dune.quotes.leto\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.JESSICA), \"dune.quotes.jessica\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.BARON_HARKONNEN), \"dune.quotes.baron_harkonnen\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.GUILD_NAVIGATOR), \"dune.quotes.guild_navigator\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.LIET_KYNES), \"dune.quotes.liet_kynes\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.MAPES), \"dune.quotes.mapes\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.MOHIAM), \"dune.quotes.mohiam\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.PARDOT_KYNES), \"dune.quotes.pardot_kynes\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.PAUL), \"dune.quotes.paul\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.PITER), \"dune.quotes.piter\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.STILGAR), \"dune.quotes.stilgar\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.THUFIR), \"dune.quotes.thufir\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.YUEH), \"dune.quotes.yueh\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.BENE_GESSERIT), \"dune.sayings.bene_gesserit\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.MENTAT), \"dune.sayings.mentat\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.FREMEN), \"dune.sayings.fremen\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.MUADDIB), \"dune.sayings.muaddib\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.ORANGE_CATHOLIC_BIBLE), \"dune.sayings.orange_catholic_bible\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Dune dune = getFaker().dune();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Dune", "name": "dune = getFaker().dune()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/PokemonTest.java.PokemonTest", "name": "PokemonTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/PokemonTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/PokemonTest.java.PokemonTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class PokemonTest extends EntertainmentFakerTest {\n\n    private final Pokemon pokemon = getFaker().pokemon();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(pokemon::location, \"games.pokemon.locations\"),\n            TestSpec.of(pokemon::move, \"games.pokemon.moves\"),\n            TestSpec.of(pokemon::name, \"games.pokemon.names\"),\n            TestSpec.of(pokemon::type, \"games.pokemon.types\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Pokemon pokemon = getFaker().pokemon();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Pokemon", "name": "pokemon = getFaker().pokemon()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheExpanseTest.java.TheExpanseTest", "name": "TheExpanseTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TheExpanseTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TheExpanseTest.java.TheExpanseTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TheExpanseTest extends EntertainmentFakerTest {\n\n    private final TheExpanse theExpanse = getFaker().theExpanse();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theExpanse::characters, \"the_expanse.characters\"),\n            TestSpec.of(theExpanse::locations, \"the_expanse.locations\"),\n            TestSpec.of(theExpanse::quotes, \"the_expanse.quotes\"),\n            TestSpec.of(theExpanse::ships, \"the_expanse.ships\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TheExpanse theExpanse = getFaker().theExpanse();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TheExpanse", "name": "theExpanse = getFaker().theExpanse()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/GratefulDeadTest.java.GratefulDeadTest", "name": "GratefulDeadTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/GratefulDeadTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/GratefulDeadTest.java.GratefulDeadTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class GratefulDeadTest extends EntertainmentFakerTest {\n\n    private final GratefulDead gratefulDead = getFaker().gratefulDead();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(gratefulDead::players, \"grateful_dead.players\"),\n            TestSpec.of(gratefulDead::songs, \"grateful_dead.songs\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final GratefulDead gratefulDead = getFaker().gratefulDead();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "GratefulDead", "name": "gratefulDead = getFaker().gratefulDead()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BojackHorsemanTest.java.BojackHorsemanTest", "name": "BojackHorsemanTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BojackHorsemanTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BojackHorsemanTest.java.BojackHorsemanTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BojackHorsemanTest extends EntertainmentFakerTest {\n\n    private final BojackHorseman bojackHorseman = getFaker().bojackHorseman();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(bojackHorseman::characters, \"bojack_horseman.characters\"),\n            TestSpec.of(bojackHorseman::quotes, \"bojack_horseman.quotes\"),\n            TestSpec.of(bojackHorseman::tongueTwisters, \"bojack_horseman.tongue_twisters\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final BojackHorseman bojackHorseman = getFaker().bojackHorseman();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BojackHorseman", "name": "bojackHorseman = getFaker().bojackHorseman()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SuitsTest.java.SuitsTest", "name": "SuitsTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SuitsTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SuitsTest.java.SuitsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SuitsTest extends EntertainmentFakerTest {\n\n    private final Suits suits = getFaker().suits();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(suits::characters, \"suits.characters\"),\n            TestSpec.of(suits::quotes, \"suits.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Suits suits = getFaker().suits();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Suits", "name": "suits = getFaker().suits()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HowToTrainYourDragonTest.java.HowToTrainYourDragonTest", "name": "HowToTrainYourDragonTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/HowToTrainYourDragonTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/HowToTrainYourDragonTest.java.HowToTrainYourDragonTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HowToTrainYourDragonTest extends EntertainmentFakerTest {\n\n    private final HowToTrainYourDragon howToTrainYourDragon = getFaker().howToTrainYourDragon();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(howToTrainYourDragon::characters, \"how_to_train_your_dragon.characters\"),\n            TestSpec.of(howToTrainYourDragon::dragons, \"how_to_train_your_dragon.dragons\"),\n            TestSpec.of(howToTrainYourDragon::locations, \"how_to_train_your_dragon.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HowToTrainYourDragon howToTrainYourDragon = getFaker().howToTrainYourDragon();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HowToTrainYourDragon", "name": "howToTrainYourDragon = getFaker().howToTrainYourDragon()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TwinPeaksTest.java.TwinPeaksTest", "name": "TwinPeaksTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TwinPeaksTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TwinPeaksTest.java.TwinPeaksTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TwinPeaksTest extends EntertainmentFakerTest {\n\n    private final TwinPeaks twinPeaks = getFaker().twinPeaks();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(twinPeaks::character, \"twin_peaks.characters\"),\n            TestSpec.of(twinPeaks::location, \"twin_peaks.locations\"),\n            TestSpec.of(twinPeaks::quote, \"twin_peaks.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TwinPeaks twinPeaks = getFaker().twinPeaks();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TwinPeaks", "name": "twinPeaks = getFaker().twinPeaks()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/VForVendettaTest.java.VForVendettaTest", "name": "VForVendettaTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/VForVendettaTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/VForVendettaTest.java.VForVendettaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class VForVendettaTest extends EntertainmentFakerTest {\n\n    private final VForVendetta vForVendetta = getFaker().vForVendetta();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(vForVendetta::characters, \"v_for_vendetta.characters\"),\n            TestSpec.of(vForVendetta::quotes, \"v_for_vendetta.quotes\"),\n            TestSpec.of(vForVendetta::speeches, \"v_for_vendetta.speeches\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final VForVendetta vForVendetta = getFaker().vForVendetta();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "VForVendetta", "name": "vForVendetta = getFaker().vForVendetta()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/RuPaulDragRaceTest.java.RuPaulDragRaceTest", "name": "RuPaulDragRaceTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/RuPaulDragRaceTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/RuPaulDragRaceTest.java.RuPaulDragRaceTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class RuPaulDragRaceTest extends EntertainmentFakerTest {\n\n    private final RuPaulDragRace ruPaulDragRace = getFaker().ruPaulDragRace();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(ruPaulDragRace::queen, \"rupaul.queens\"),\n            TestSpec.of(ruPaulDragRace::quote, \"rupaul.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final RuPaulDragRace ruPaulDragRace = getFaker().ruPaulDragRace();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RuPaulDragRace", "name": "ruPaulDragRace = getFaker().ruPaulDragRace()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/MoneyHeistTest.java.MoneyHeistTest", "name": "MoneyHeistTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/MoneyHeistTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/MoneyHeistTest.java.MoneyHeistTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class MoneyHeistTest extends EntertainmentFakerTest {\n\n    private final MoneyHeist moneyHeist = getFaker().moneyHeist();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(moneyHeist::character, \"money_heist.characters\"),\n            TestSpec.of(moneyHeist::heist, \"money_heist.heists\"),\n            TestSpec.of(moneyHeist::quote, \"money_heist.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final MoneyHeist moneyHeist = getFaker().moneyHeist();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "MoneyHeist", "name": "moneyHeist = getFaker().moneyHeist()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BreakingBadTest.java.BreakingBadTest", "name": "BreakingBadTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BreakingBadTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BreakingBadTest.java.BreakingBadTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BreakingBadTest extends EntertainmentFakerTest {\n\n    private final BreakingBad breakingBad = getFaker().breakingBad();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(breakingBad::character, \"breaking_bad.characters\"),\n            TestSpec.of(breakingBad::episode, \"breaking_bad.episodes\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final BreakingBad breakingBad = getFaker().breakingBad();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BreakingBad", "name": "breakingBad = getFaker().breakingBad()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BackToTheFutureTest.java.BackToTheFutureTest", "name": "BackToTheFutureTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BackToTheFutureTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BackToTheFutureTest.java.BackToTheFutureTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BackToTheFutureTest extends EntertainmentFakerTest {\n\n    private final BackToTheFuture backToTheFuture = getFaker().backToTheFuture();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(backToTheFuture::character, \"back_to_the_future.characters\"),\n            TestSpec.of(backToTheFuture::date, \"back_to_the_future.dates\"),\n            TestSpec.of(backToTheFuture::quote, \"back_to_the_future.quotes\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final BackToTheFuture backToTheFuture = getFaker().backToTheFuture();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BackToTheFuture", "name": "backToTheFuture = getFaker().backToTheFuture()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FullmetalAlchemistTest.java.FullmetalAlchemistTest", "name": "FullmetalAlchemistTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/FullmetalAlchemistTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/FullmetalAlchemistTest.java.FullmetalAlchemistTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FullmetalAlchemistTest extends EntertainmentFakerTest {\n\n    private final FullmetalAlchemist fullmetalAlchemist = getFaker().fullMetalAlchemist();\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(fullmetalAlchemist::character, \"fma_brotherhood.characters\"),\n            TestSpec.of(fullmetalAlchemist::city, \"fma_brotherhood.cities\"),\n            TestSpec.of(fullmetalAlchemist::country, \"fma_brotherhood.countries\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final FullmetalAlchemist fullmetalAlchemist = getFaker().fullMetalAlchemist();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FullmetalAlchemist", "name": "fullmetalAlchemist = getFaker().fullMetalAlchemist()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/NewGirlTest.java.NewGirlTest", "name": "NewGirlTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/NewGirlTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/NewGirlTest.java.NewGirlTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class NewGirlTest extends EntertainmentFakerTest {\n\n    private final NewGirl newGirl = getFaker().newGirl();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(newGirl::characters, \"new_girl.characters\"),\n            TestSpec.of(newGirl::quotes, \"new_girl.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final NewGirl newGirl = getFaker().newGirl();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "NewGirl", "name": "newGirl = getFaker().newGirl()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FriendsTest.java.FriendsTest", "name": "FriendsTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/FriendsTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/FriendsTest.java.FriendsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FriendsTest extends EntertainmentFakerTest {\n\n    private final Friends friends = getFaker().friends();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(friends::character, \"friends.characters\"),\n            TestSpec.of(friends::quote, \"friends.quotes\"),\n            TestSpec.of(friends::location, \"friends.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Friends friends = getFaker().friends();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Friends", "name": "friends = getFaker().friends()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HowIMetYourMotherTest.java.HowIMetYourMotherTest", "name": "HowIMetYourMotherTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/HowIMetYourMotherTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/HowIMetYourMotherTest.java.HowIMetYourMotherTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HowIMetYourMotherTest extends EntertainmentFakerTest {\n\n    private final HowIMetYourMother howIMetYourMother = getFaker().howIMetYourMother();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(howIMetYourMother::catchPhrase, \"how_i_met_your_mother.catch_phrase\"),\n            TestSpec.of(howIMetYourMother::character, \"how_i_met_your_mother.character\"),\n            TestSpec.of(howIMetYourMother::highFive, \"how_i_met_your_mother.high_five\"),\n            TestSpec.of(howIMetYourMother::quote, \"how_i_met_your_mother.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HowIMetYourMother howIMetYourMother = getFaker().howIMetYourMother();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HowIMetYourMother", "name": "howIMetYourMother = getFaker().howIMetYourMother()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SwordArtOnlineTest.java.SwordArtOnlineTest", "name": "SwordArtOnlineTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SwordArtOnlineTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SwordArtOnlineTest.java.SwordArtOnlineTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SwordArtOnlineTest extends EntertainmentFakerTest {\n\n    private final SwordArtOnline swordArtOnline = getFaker().swordArtOnline();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(swordArtOnline::gameName, \"sword_art_online.game_name\"),\n            TestSpec.of(swordArtOnline::item, \"sword_art_online.item\"),\n            TestSpec.of(swordArtOnline::location, \"sword_art_online.location\"),\n            TestSpec.of(swordArtOnline::realName, \"sword_art_online.real_name\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SwordArtOnline swordArtOnline = getFaker().swordArtOnline();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SwordArtOnline", "name": "swordArtOnline = getFaker().swordArtOnline()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/AquaTeenHungerForceTest.java.AquaTeenHungerForceTest", "name": "AquaTeenHungerForceTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/AquaTeenHungerForceTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/AquaTeenHungerForceTest.java.AquaTeenHungerForceTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class AquaTeenHungerForceTest extends EntertainmentFakerTest {\n\n    private final AquaTeenHungerForce aquaTeenHungerForce = getFaker().aquaTeenHungerForce();\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(aquaTeenHungerForce::character, \"aqua_teen_hunger_force.character\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final AquaTeenHungerForce aquaTeenHungerForce = getFaker().aquaTeenHungerForce();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "AquaTeenHungerForce", "name": "aquaTeenHungerForce = getFaker().aquaTeenHungerForce()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/LebowskiTest.java.LebowskiTest", "name": "LebowskiTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/LebowskiTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/LebowskiTest.java.LebowskiTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class LebowskiTest extends EntertainmentFakerTest {\n\n    private final Lebowski lebowski = getFaker().lebowski();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(lebowski::actor, \"lebowski.actors\"),\n            TestSpec.of(lebowski::character, \"lebowski.characters\"),\n            TestSpec.of(lebowski::quote, \"lebowski.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Lebowski lebowski = getFaker().lebowski();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Lebowski", "name": "lebowski = getFaker().lebowski()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/EntertainmentFakerTest.java.EntertainmentFakerTest", "name": "EntertainmentFakerTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/EntertainmentFakerTest.java", "superclasses": "", "methods": ["[EntertainmentFaker]getFaker()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/EntertainmentFakerTest.java.EntertainmentFakerTest.[EntertainmentFaker]getFaker()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class EntertainmentFakerTest extends BaseFakerTest<EntertainmentFaker> {\n    @Override\n    protected EntertainmentFaker getFaker() {\n        return new EntertainmentFaker();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheKingkillerChronicleTest.java.TheKingkillerChronicleTest", "name": "TheKingkillerChronicleTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TheKingkillerChronicleTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TheKingkillerChronicleTest.java.TheKingkillerChronicleTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TheKingkillerChronicleTest extends EntertainmentFakerTest {\n\n    private final TheKingkillerChronicle theKingkillerChronicle = getFaker().theKingkillerChronicle();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theKingkillerChronicle::book, \"the_kingkiller_chronicle.books\"),\n            TestSpec.of(theKingkillerChronicle::character, \"the_kingkiller_chronicle.characters\"),\n            TestSpec.of(theKingkillerChronicle::creature, \"the_kingkiller_chronicle.creatures\"),\n            TestSpec.of(theKingkillerChronicle::location, \"the_kingkiller_chronicle.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TheKingkillerChronicle theKingkillerChronicle = getFaker().theKingkillerChronicle();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TheKingkillerChronicle", "name": "theKingkillerChronicle = getFaker().theKingkillerChronicle()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/ResidentEvilTest.java.ResidentEvilTest", "name": "ResidentEvilTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/ResidentEvilTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/ResidentEvilTest.java.ResidentEvilTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class ResidentEvilTest extends EntertainmentFakerTest {\n\n    private final ResidentEvil residentEvil = getFaker().residentEvil();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(residentEvil::biologicalAgent, \"games.resident_evil.biological-agents\"),\n            TestSpec.of(residentEvil::character, \"games.resident_evil.characters\"),\n            TestSpec.of(residentEvil::creature, \"games.resident_evil.creatures\"),\n            TestSpec.of(residentEvil::equipment, \"games.resident_evil.equipments\"),\n            TestSpec.of(residentEvil::location, \"games.resident_evil.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final ResidentEvil residentEvil = getFaker().residentEvil();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ResidentEvil", "name": "residentEvil = getFaker().residentEvil()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SeinfeldTest.java.SeinfeldTest", "name": "SeinfeldTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SeinfeldTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SeinfeldTest.java.SeinfeldTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SeinfeldTest extends EntertainmentFakerTest {\n\n    private final Seinfeld seinfeld = getFaker().seinfeld();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(seinfeld::business, \"seinfeld.business\"),\n            TestSpec.of(seinfeld::character, \"seinfeld.character\"),\n            TestSpec.of(seinfeld::quote, \"seinfeld.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Seinfeld seinfeld = getFaker().seinfeld();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Seinfeld", "name": "seinfeld = getFaker().seinfeld()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DetectiveConanTest.java.DetectiveConanTest", "name": "DetectiveConanTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DetectiveConanTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DetectiveConanTest.java.DetectiveConanTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class DetectiveConanTest extends EntertainmentFakerTest {\n\n    private final DetectiveConan detectiveConan = getFaker().detectiveConan();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(detectiveConan::characters, \"detective_conan.characters\"),\n            TestSpec.of(detectiveConan::gadgets, \"detective_conan.gadgets\"),\n            TestSpec.of(detectiveConan::vehicles, \"detective_conan.vehicles\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final DetectiveConan detectiveConan = getFaker().detectiveConan();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DetectiveConan", "name": "detectiveConan = getFaker().detectiveConan()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BrooklynNineNineTest.java.BrooklynNineNineTest", "name": "BrooklynNineNineTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BrooklynNineNineTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BrooklynNineNineTest.java.BrooklynNineNineTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BrooklynNineNineTest extends EntertainmentFakerTest {\n\n    private final BrooklynNineNine brooklynNineNine = getFaker().brooklynNineNine();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(brooklynNineNine::characters, \"brooklyn_nine_nine.characters\"),\n            TestSpec.of(brooklynNineNine::quotes, \"brooklyn_nine_nine.quotes\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final BrooklynNineNine brooklynNineNine = getFaker().brooklynNineNine();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BrooklynNineNine", "name": "brooklynNineNine = getFaker().brooklynNineNine()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DoraemonTest.java.DoraemonTest", "name": "DoraemonTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/DoraemonTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/DoraemonTest.java.DoraemonTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class DoraemonTest extends EntertainmentFakerTest {\n\n    private final Doraemon doraemon = getFaker().doraemon();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(doraemon::character, \"doraemon.characters\"),\n            TestSpec.of(doraemon::gadget, \"doraemon.gadgets\"),\n            TestSpec.of(doraemon::location, \"doraemon.locations\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Doraemon doraemon = getFaker().doraemon();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Doraemon", "name": "doraemon = getFaker().doraemon()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheRoomTest.java.TheRoomTest", "name": "TheRoomTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TheRoomTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TheRoomTest.java.TheRoomTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TheRoomTest extends EntertainmentFakerTest {\n\n    private final TheRoom theRoom = getFaker().theRoom();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theRoom::actors, \"the_room.actors\"),\n            TestSpec.of(theRoom::characters, \"the_room.characters\"),\n            TestSpec.of(theRoom::locations, \"the_room.locations\"),\n            TestSpec.of(theRoom::quotes, \"the_room.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TheRoom theRoom = getFaker().theRoom();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TheRoom", "name": "theRoom = getFaker().theRoom()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/NarutoTest.java.NarutoTest", "name": "NarutoTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/NarutoTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/NarutoTest.java.NarutoTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class NarutoTest extends EntertainmentFakerTest {\n\n    private final Naruto naruto = getFaker().naruto();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(naruto::character, \"naruto.characters\"),\n            TestSpec.of(naruto::demon, \"naruto.demons\"),\n            TestSpec.of(naruto::eye, \"naruto.eyes\"),\n            TestSpec.of(naruto::village, \"naruto.villages\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Naruto naruto = getFaker().naruto();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Naruto", "name": "naruto = getFaker().naruto()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheThickOfItTest.java.TheThickOfItTest", "name": "TheThickOfItTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TheThickOfItTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TheThickOfItTest.java.TheThickOfItTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TheThickOfItTest extends EntertainmentFakerTest {\n\n    private final TheThickOfIt theThickOfIt = getFaker().theThickOfIt();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theThickOfIt::characters, \"the_thick_of_it.characters\"),\n            TestSpec.of(theThickOfIt::departments, \"the_thick_of_it.departments\"),\n            TestSpec.of(theThickOfIt::positions, \"the_thick_of_it.positions\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TheThickOfIt theThickOfIt = getFaker().theThickOfIt();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TheThickOfIt", "name": "theThickOfIt = getFaker().theThickOfIt()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HobbitTest.java.HobbitTest", "name": "HobbitTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/HobbitTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/HobbitTest.java.HobbitTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HobbitTest extends EntertainmentFakerTest {\n\n    private final Hobbit hobbit = getFaker().hobbit();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(hobbit::character, \"hobbit.character\"),\n            TestSpec.of(hobbit::location, \"hobbit.location\"),\n            TestSpec.of(hobbit::thorinsCompany, \"hobbit.thorins_company\"),\n            TestSpec.of(hobbit::quote, \"hobbit.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Hobbit hobbit = getFaker().hobbit();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Hobbit", "name": "hobbit = getFaker().hobbit()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OnePieceTest.java.OnePieceTest", "name": "OnePieceTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/OnePieceTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/OnePieceTest.java.OnePieceTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class OnePieceTest extends EntertainmentFakerTest {\n\n    private final OnePiece onePiece = getFaker().onePiece();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(onePiece::akumasNoMi, \"one_piece.akumas_no_mi\"),\n            TestSpec.of(onePiece::character, \"one_piece.characters\"),\n            TestSpec.of(onePiece::island, \"one_piece.islands\"),\n            TestSpec.of(onePiece::location, \"one_piece.locations\"),\n            TestSpec.of(onePiece::quote, \"one_piece.quotes\"),\n            TestSpec.of(onePiece::sea, \"one_piece.seas\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final OnePiece onePiece = getFaker().onePiece();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "OnePiece", "name": "onePiece = getFaker().onePiece()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SimpsonsTest.java.SimpsonsTest", "name": "SimpsonsTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SimpsonsTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SimpsonsTest.java.SimpsonsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpsonsTest extends EntertainmentFakerTest {\n\n    private final Simpsons simpsons = getFaker().simpsons();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(simpsons::character, \"simpsons.characters\"),\n            TestSpec.of(simpsons::location, \"simpsons.locations\"),\n            TestSpec.of(simpsons::quote, \"simpsons.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Simpsons simpsons = getFaker().simpsons();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Simpsons", "name": "simpsons = getFaker().simpsons()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheItCrowdTest.java.TheItCrowdTest", "name": "TheItCrowdTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TheItCrowdTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TheItCrowdTest.java.TheItCrowdTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TheItCrowdTest extends EntertainmentFakerTest {\n\n    private final TheItCrowd theItCrowd = getFaker().theItCrowd();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theItCrowd::actors, \"the_it_crowd.actors\"),\n            TestSpec.of(theItCrowd::characters, \"the_it_crowd.characters\"),\n            TestSpec.of(theItCrowd::emails, \"the_it_crowd.emails\"),\n            TestSpec.of(theItCrowd::quotes, \"the_it_crowd.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final TheItCrowd theItCrowd = getFaker().theItCrowd();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "TheItCrowd", "name": "theItCrowd = getFaker().theItCrowd()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/JokeTest.java.JokeTest", "name": "JokeTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/JokeTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/JokeTest.java.JokeTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class JokeTest extends EntertainmentFakerTest {\n\n    private final Joke joke = getFaker().joke();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(joke::pun, \"joke.puns\"),\n            TestSpec.of(joke::knockKnock, \"joke.knock_knocks\")\n        );\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Joke joke = getFaker().joke();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Joke", "name": "joke = getFaker().joke()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BoardgameTest.java.BoardgameTest", "name": "BoardgameTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BoardgameTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BoardgameTest.java.BoardgameTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BoardgameTest extends EntertainmentFakerTest {\n\n    private final Boardgame boardgame = faker.boardgame();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(boardgame::name, \"boardgame.name\"),\n            TestSpec.of(boardgame::category, \"boardgame.category\"),\n            TestSpec.of(boardgame::mechanic, \"boardgame.mechanic\"),\n            TestSpec.of(boardgame::subdomain, \"boardgame.subdomain\"),\n            TestSpec.of(boardgame::designer, \"boardgame.designer\"),\n            TestSpec.of(boardgame::artist, \"boardgame.artist\"),\n            TestSpec.of(boardgame::publisher, \"boardgame.publisher\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Boardgame boardgame = faker.boardgame();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Boardgame", "name": "boardgame = faker.boardgame()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FuturamaTest.java.FuturamaTest", "name": "FuturamaTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/FuturamaTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/FuturamaTest.java.FuturamaTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FuturamaTest extends EntertainmentFakerTest {\n\n    private final Futurama futurama = getFaker().futurama();\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(futurama::character, \"futurama.characters\"),\n            TestSpec.of(futurama::location, \"futurama.locations\"),\n            TestSpec.of(futurama::hermesCatchPhrase, \"futurama.hermes_catchphrases\"),\n            TestSpec.of(futurama::quote, \"futurama.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Futurama futurama = getFaker().futurama();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Futurama", "name": "futurama = getFaker().futurama()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StrangerThingsTest.java.StrangerThingsTest", "name": "StrangerThingsTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/StrangerThingsTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/StrangerThingsTest.java.StrangerThingsTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StrangerThingsTest extends EntertainmentFakerTest {\n\n    private final StrangerThings strangerThings = getFaker().strangerThings();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(strangerThings::character, \"stranger_things.character\"),\n            TestSpec.of(strangerThings::quote, \"stranger_things.quote\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final StrangerThings strangerThings = getFaker().strangerThings();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "StrangerThings", "name": "strangerThings = getFaker().strangerThings()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StarTrekTest.java.StarTrekTest", "name": "StarTrekTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/StarTrekTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/StarTrekTest.java.StarTrekTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StarTrekTest extends EntertainmentFakerTest {\n\n    private final StarTrek starTrek = getFaker().starTrek();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(starTrek::character, \"star_trek.character\"),\n            TestSpec.of(starTrek::location, \"star_trek.location\"),\n            TestSpec.of(starTrek::klingon, \"star_trek.klingon\"),\n            TestSpec.of(starTrek::species, \"star_trek.species\"),\n            TestSpec.of(starTrek::villain, \"star_trek.villain\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final StarTrek starTrek = getFaker().starTrek();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "StarTrek", "name": "starTrek = getFaker().starTrek()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BigBangTheoryTest.java.BigBangTheoryTest", "name": "BigBangTheoryTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BigBangTheoryTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BigBangTheoryTest.java.BigBangTheoryTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BigBangTheoryTest extends EntertainmentFakerTest {\n\n    private final BigBangTheory bigBangTheory = getFaker().bigBangTheory();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(bigBangTheory::character, \"big_bang_theory.characters\"),\n            TestSpec.of(bigBangTheory::quote, \"big_bang_theory.quotes\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final BigBangTheory bigBangTheory = getFaker().bigBangTheory();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BigBangTheory", "name": "bigBangTheory = getFaker().bigBangTheory()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StudioGhibliTest.java.StudioGhibliTest", "name": "StudioGhibliTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/StudioGhibliTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/StudioGhibliTest.java.StudioGhibliTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class StudioGhibliTest extends EntertainmentFakerTest {\n\n    private final StudioGhibli studioGhibli = getFaker().studioGhibli();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(studioGhibli::character, \"studio_ghibli.characters\"),\n            TestSpec.of(studioGhibli::movie, \"studio_ghibli.movies\"),\n            TestSpec.of(studioGhibli::quote, \"studio_ghibli.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final StudioGhibli studioGhibli = getFaker().studioGhibli();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "StudioGhibli", "name": "studioGhibli = getFaker().studioGhibli()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/GhostbustersTest.java.GhostbustersTest", "name": "GhostbustersTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/GhostbustersTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/GhostbustersTest.java.GhostbustersTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class GhostbustersTest extends EntertainmentFakerTest {\n\n    private final Ghostbusters ghostbusters = getFaker().ghostbusters();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(ghostbusters::actor, \"ghostbusters.actors\"),\n            TestSpec.of(ghostbusters::character, \"ghostbusters.characters\"),\n            TestSpec.of(ghostbusters::quote, \"ghostbusters.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Ghostbusters ghostbusters = getFaker().ghostbusters();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Ghostbusters", "name": "ghostbusters = getFaker().ghostbusters()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BuffyTest.java.BuffyTest", "name": "BuffyTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/BuffyTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/BuffyTest.java.BuffyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class BuffyTest extends EntertainmentFakerTest {\n\n    private final Buffy buffy = getFaker().buffy();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(buffy::characters, \"buffy.characters\"),\n            TestSpec.of(buffy::quotes, \"buffy.quotes\"),\n            TestSpec.of(buffy::celebrities, \"buffy.celebrities\"),\n            TestSpec.of(buffy::bigBads, \"buffy.big_bads\"),\n            TestSpec.of(buffy::episodes, \"buffy.episodes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Buffy buffy = getFaker().buffy();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Buffy", "name": "buffy = getFaker().buffy()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TronTest.java.TronTest", "name": "TronTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/TronTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/TronTest.java.TronTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class TronTest extends EntertainmentFakerTest {\n\n    private final Tron tron = getFaker().tron();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ALAN_BRADLEY), \"tron.alternate_character_spellings.alan_bradley\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.CLU), \"tron.alternate_character_spellings.clu\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.DR_LORA_BAINES), \"tron.alternate_character_spellings.dr_lora_baines\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.DR_WALTER_GIBBS), \"tron.alternate_character_spellings.dr_walter_gibbs\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ED_DILLINGER), \"tron.alternate_character_spellings.ed_dillinger\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.KEVIN_FLYNN), \"tron.alternate_character_spellings.kevin_flynn\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.MCP), \"tron.alternate_character_spellings.mcp\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ROY_KLEINBERG), \"tron.alternate_character_spellings.roy_kleinberg\"),\n            TestSpec.of(() -> tron.character(Tron.Character.OTHER), \"tron.characters.other\"),\n            TestSpec.of(() -> tron.character(Tron.Character.PROGRAM), \"tron.characters.programs\"),\n            TestSpec.of(() -> tron.character(Tron.Character.USER), \"tron.characters.users\"),\n            TestSpec.of(tron::game, \"tron.games\"),\n            TestSpec.of(tron::location, \"tron.locations\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.ALAN_BRADLEY), \"tron.quotes.alan_bradley\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.BIT), \"tron.quotes.bit\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.CLU), \"tron.quotes.clu\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.CROM), \"tron.quotes.crom\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.DR_LORA_BAINES), \"tron.quotes.dr_lora_baines\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.DR_WALTER_GIBBS), \"tron.quotes.dr_walter_gibbs\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.DUMONT), \"tron.quotes.dumont\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.ED_DILLINGER), \"tron.quotes.ed_dillinger\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.KEVIN_FLYNN), \"tron.quotes.kevin_flynn\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.MCP), \"tron.quotes.mcp\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.PROGRAM), \"tron.quotes.program\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.RAM), \"tron.quotes.ram\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.SARK), \"tron.quotes.sark\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.TRON), \"tron.quotes.tron\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.YORI), \"tron.quotes.yori\"),\n            TestSpec.of(tron::tagline, \"tron.taglines\"),\n            TestSpec.of(tron::vehicle, \"tron.vehicles\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Tron tron = getFaker().tron();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Tron", "name": "tron = getFaker().tron()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SupernaturalTest.java.SupernaturalTest", "name": "SupernaturalTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/SupernaturalTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/SupernaturalTest.java.SupernaturalTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class SupernaturalTest extends EntertainmentFakerTest {\n\n    private final Supernatural supernatural = getFaker().supernatural();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(supernatural::character, \"supernatural.character\"),\n            TestSpec.of(supernatural::creature, \"supernatural.creature\"),\n            TestSpec.of(supernatural::weapon, \"supernatural.weapon\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Supernatural supernatural = getFaker().supernatural();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supernatural", "name": "supernatural = getFaker().supernatural()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HarryPotterTest.java.HarryPotterTest", "name": "HarryPotterTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/HarryPotterTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/HarryPotterTest.java.HarryPotterTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HarryPotterTest extends EntertainmentFakerTest {\n\n    private final HarryPotter harryPotter = getFaker().harryPotter();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(harryPotter::book, \"harry_potter.books\"),\n            TestSpec.of(harryPotter::character, \"harry_potter.characters\"),\n            TestSpec.of(harryPotter::house, \"harry_potter.houses\"),\n            TestSpec.of(harryPotter::location, \"harry_potter.locations\"),\n            TestSpec.of(harryPotter::quote, \"harry_potter.quotes\"),\n            TestSpec.of(harryPotter::spell, \"harry_potter.spells\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HarryPotter harryPotter = getFaker().harryPotter();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HarryPotter", "name": "harryPotter = getFaker().harryPotter()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HeyArnoldTest.java.HeyArnoldTest", "name": "HeyArnoldTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/HeyArnoldTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/HeyArnoldTest.java.HeyArnoldTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class HeyArnoldTest extends EntertainmentFakerTest {\n\n    private final HeyArnold heyArnold = getFaker().heyArnold();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(heyArnold::characters, \"hey_arnold.characters\"),\n            TestSpec.of(heyArnold::locations, \"hey_arnold.locations\"),\n            TestSpec.of(heyArnold::quotes, \"hey_arnold.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final HeyArnold heyArnold = getFaker().heyArnold();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "HeyArnold", "name": "heyArnold = getFaker().heyArnold()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/PrincessBrideTest.java.PrincessBrideTest", "name": "PrincessBrideTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/PrincessBrideTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/PrincessBrideTest.java.PrincessBrideTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class PrincessBrideTest extends EntertainmentFakerTest {\n\n    private final PrincessBride princessBride = getFaker().princessBride();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(princessBride::character, \"princess_bride.characters\"),\n            TestSpec.of(princessBride::quote, \"princess_bride.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final PrincessBride princessBride = getFaker().princessBride();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "PrincessBride", "name": "princessBride = getFaker().princessBride()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/providers/entertainment/RickAndMortyTest.java.RickAndMortyTest", "name": "RickAndMortyTest", "file_path": "src/test/java/net/datafaker/providers/entertainment/RickAndMortyTest.java", "superclasses": "EntertainmentFakerTest", "methods": ["[Collection<TestSpec>]providerListTest()"], "method_uris": ["src/test/java/net/datafaker/providers/entertainment/RickAndMortyTest.java.RickAndMortyTest.[Collection<TestSpec>]providerListTest()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class RickAndMortyTest extends EntertainmentFakerTest {\n\n    private final RickAndMorty rickAndMorty = getFaker().rickAndMorty();\n\n    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(rickAndMorty::character, \"rick_and_morty.characters\"),\n            TestSpec.of(rickAndMorty::location, \"rick_and_morty.locations\"),\n            TestSpec.of(rickAndMorty::quote, \"rick_and_morty.quotes\")\n        );\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final RickAndMorty rickAndMorty = getFaker().rickAndMorty();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RickAndMorty", "name": "rickAndMorty = getFaker().rickAndMorty()", "syntax_pass": true}]}, {"uris": "src/test/java/net/datafaker/annotations/dto/Person.java.Person", "name": "Person", "file_path": "src/test/java/net/datafaker/annotations/dto/Person.java", "superclasses": "", "methods": ["[String]getName()", "[void]setName(String)"], "method_uris": ["src/test/java/net/datafaker/annotations/dto/Person.java.Person.[String]getName()", "src/test/java/net/datafaker/annotations/dto/Person.java.Person.[void]setName(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "@FakeForSchema(\"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\")\npublic class Person {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private String name;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker", "name": "Faker", "file_path": "src/main/java/net/datafaker/Faker.java", "superclasses": "BaseFaker", "methods": ["[]Faker()", "[]Faker(Locale)", "[]Faker(Random)", "[]Faker(Locale,Random)", "[]Faker(Locale,RandomService)", "[]Faker(FakeValuesService,FakerContext)"], "method_uris": ["src/main/java/net/datafaker/Faker.java.Faker.[]Faker()", "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Locale)", "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Random)", "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Locale,Random)", "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Locale,RandomService)", "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(FakeValuesService,FakerContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Faker extends BaseFaker implements BaseProviders, SportProviders, FoodProviders, EntertainmentProviders, VideoGameProviders, HealthcareProviders {\n    public Faker() {\n    }\n\n    public Faker(Locale locale) {\n        super(locale);\n    }\n\n    public Faker(Random random) {\n        super(random);\n    }\n\n    public Faker(Locale locale, Random random) {\n        super(locale, random);\n    }\n\n    public Faker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }\n\n    public Faker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }\n}", "super_interfaces": ["BaseProviders", "SportProviders", "FoodProviders", "EntertainmentProviders", "VideoGameProviders", "HealthcareProviders"], "fields": []}, {"uris": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream", "name": "FakeStream", "file_path": "src/main/java/net/datafaker/sequence/FakeStream.java", "superclasses": "", "methods": ["[]FakeStream(List<Supplier<T>>,int,int,RandomService,double)", "[Stream<T>]get()", "[boolean]isInfinite()", "[Iterator<T>]iterator()", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[]FakeStream(List<Supplier<T>>,int,int,RandomService,double)", "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[Stream<T>]get()", "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[boolean]isInfinite()", "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[Iterator<T>]iterator()", "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[String]toString()"], "overrides": null, "attributes": [{"original_string": "    public static class Builder<T> extends FakeSequence.Builder<T> {\n        public Builder() {\n            super();\n        }\n\n        public Builder(List<Supplier<T>> list) {\n            super(list);\n        }\n\n        @SafeVarargs\n        public Builder(Supplier<T>... elems) {\n            super(elems);\n        }\n\n        @Override\n        public FakeStream<T> build() {\n            if (maxLength >= 0 && minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeStream<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }\n    }", "definition": "    public static class Builder<T> extends FakeSequence.Builder<T>", "class_docstring": "", "name": "Builder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public Builder() {\n            super();\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [], "body": "                         {\n            super();\n        }", "signature": "public Builder()"}, {"syntax_pass": true, "original_string": "        public Builder(List<Supplier<T>> list) {\n            super(list);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [{"name": "list", "type": "List<Supplier<T>>"}], "body": "                                               {\n            super(list);\n        }", "signature": "public Builder(List<Supplier<T>> list)"}, {"syntax_pass": true, "original_string": "        @SafeVarargs\n        public Builder(Supplier<T>... elems) {\n            super(elems);\n        }", "docstring": "", "attributes": {"modifiers": "@SafeVarargs\n        public", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [], "body": "                                             {\n            super(elems);\n        }", "signature": "@SafeVarargs\n        public Builder(Supplier<T>... elems)"}, {"syntax_pass": true, "original_string": "        @Override\n        public FakeStream<T> build() {\n            if (maxLength >= 0 && minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeStream<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeStream<T>", "classes": []}, "name": "build", "params": [], "body": "                                     {\n            if (maxLength >= 0 && minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeStream<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }", "signature": "@Override\n        public FakeStream<T> build()"}]}], "class_docstring": "", "original_string": "public class FakeStream<T> extends FakeSequence<T> {\n    private FakeStream(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate) {\n        super(suppliers, minLength, maxLength, randomService, nullRate);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Stream<T> get() {\n        if (isInfinite()) {\n            return Stream.generate(this::singleton);\n        }\n\n        int size = randomService.nextInt(minLength, maxLength);\n        return Stream.generate(this::singleton).limit(size);\n    }\n\n    public boolean isInfinite() {\n        return maxLength < 0;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        return get().iterator();\n    }\n\n    public static class Builder<T> extends FakeSequence.Builder<T> {\n        public Builder() {\n            super();\n        }\n\n        public Builder(List<Supplier<T>> list) {\n            super(list);\n        }\n\n        @SafeVarargs\n        public Builder(Supplier<T>... elems) {\n            super(elems);\n        }\n\n        @Override\n        public FakeStream<T> build() {\n            if (maxLength >= 0 && minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeStream<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"FakeStream{minLength=%d, maxLength=%d, nullRate=%s}\".formatted(minLength, maxLength, nullRate);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection", "name": "FakeCollection", "file_path": "src/main/java/net/datafaker/sequence/FakeCollection.java", "superclasses": "", "methods": ["[]FakeCollection(List<Supplier<T>>,int,int,RandomService,double)", "[List<T>]get()", "[Iterator<T>]iterator()"], "method_uris": ["src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection.[]FakeCollection(List<Supplier<T>>,int,int,RandomService,double)", "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection.[List<T>]get()", "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection.[Iterator<T>]iterator()"], "overrides": null, "attributes": [{"original_string": "    public static class Builder<T> extends FakeSequence.Builder<T> {\n        public Builder() {\n            super();\n        }\n\n        public Builder(List<Supplier<T>> list) {\n            super(list);\n        }\n\n        @SafeVarargs\n        public Builder(Supplier<T>... elems) {\n            super(elems);\n        }\n\n        public FakeCollection<T> build() {\n            if (maxLength < 0) {\n                maxLen(FAKE_COLLECTION_DEFAULT_SIZE);\n            }\n\n            if (minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeCollection<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }\n    }", "definition": "    public static class Builder<T> extends FakeSequence.Builder<T>", "class_docstring": "", "name": "Builder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public Builder() {\n            super();\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [], "body": "                         {\n            super();\n        }", "signature": "public Builder()"}, {"syntax_pass": true, "original_string": "        public Builder(List<Supplier<T>> list) {\n            super(list);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [{"name": "list", "type": "List<Supplier<T>>"}], "body": "                                               {\n            super(list);\n        }", "signature": "public Builder(List<Supplier<T>> list)"}, {"syntax_pass": true, "original_string": "        @SafeVarargs\n        public Builder(Supplier<T>... elems) {\n            super(elems);\n        }", "docstring": "", "attributes": {"modifiers": "@SafeVarargs\n        public", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [], "body": "                                             {\n            super(elems);\n        }", "signature": "@SafeVarargs\n        public Builder(Supplier<T>... elems)"}, {"syntax_pass": true, "original_string": "        public FakeCollection<T> build() {\n            if (maxLength < 0) {\n                maxLen(FAKE_COLLECTION_DEFAULT_SIZE);\n            }\n\n            if (minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeCollection<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeCollection<T>", "classes": []}, "name": "build", "params": [], "body": "                                         {\n            if (maxLength < 0) {\n                maxLen(FAKE_COLLECTION_DEFAULT_SIZE);\n            }\n\n            if (minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeCollection<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }", "signature": "public FakeCollection<T> build()"}]}], "class_docstring": "", "original_string": "public class FakeCollection<T> extends FakeSequence<T> {\n    private static final int FAKE_COLLECTION_DEFAULT_SIZE = 10;\n\n    private FakeCollection(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate) {\n        super(suppliers, minLength, maxLength, randomService, nullRate);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<T> get() {\n        int size = randomService.nextInt(minLength, maxLength);\n        List<T> result = new ArrayList<>(size);\n        while (result.size() < size) {\n            result.add(singleton());\n        }\n        return result;\n    }\n\n    @Override\n    public Iterator<T> iterator() {\n        return get().iterator();\n    }\n\n    public static class Builder<T> extends FakeSequence.Builder<T> {\n        public Builder() {\n            super();\n        }\n\n        public Builder(List<Supplier<T>> list) {\n            super(list);\n        }\n\n        @SafeVarargs\n        public Builder(Supplier<T>... elems) {\n            super(elems);\n        }\n\n        public FakeCollection<T> build() {\n            if (maxLength < 0) {\n                maxLen(FAKE_COLLECTION_DEFAULT_SIZE);\n            }\n\n            if (minLength > maxLength) {\n                throw new IllegalArgumentException(\"Max length (%s) must be not less than min length (%s) and not negative\".formatted(maxLength, minLength));\n            }\n            minLength = minLength < 0 ? maxLength : minLength;\n\n            RandomService randomService;\n            if (faker == null) {\n                randomService = new RandomService();\n            } else {\n                randomService = faker.random();\n            }\n\n            return new FakeCollection<>(suppliers, minLength, maxLength, randomService, nullRate);\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int FAKE_COLLECTION_DEFAULT_SIZE = 10;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "FAKE_COLLECTION_DEFAULT_SIZE = 10", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "name": "Verb", "file_path": "src/main/java/net/datafaker/providers/base/Verb.java", "superclasses": "", "methods": ["[]Verb(BaseProviders)", "[String]base()", "[String]past()", "[String]pastParticiple()", "[String]simplePresent()", "[String]ingForm()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Verb.java.Verb.[]Verb(BaseProviders)", "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]base()", "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]past()", "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]pastParticiple()", "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]simplePresent()", "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]ingForm()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Verb extends AbstractProvider<BaseProviders> {\n\n    protected Verb(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates the base form of a random verb.\n     *\n     * @return a string of base form of a verb.\n     */\n    public String base() {\n        return resolve(\"verbs.base\");\n    }\n\n    /**\n     * This method generates a random verb in past tense.\n     *\n     * @return a string of verb in past tense.\n     */\n    public String past() {\n        return resolve(\"verbs.past\");\n    }\n\n    /**\n     * This method generates a random verb in past participle tense.\n     *\n     * @return a string of verb in past participle tense.\n     */\n    public String pastParticiple() {\n        return resolve(\"verbs.past_participle\");\n    }\n\n    /**\n     * This method generates a random verb in simple present tense.\n     *\n     * @return a string of verb in simple present tense.\n     */\n    public String simplePresent() {\n        return resolve(\"verbs.simple_present\");\n    }\n\n    /**\n     * This method generates a random verb in -ing form.\n     *\n     * @return a string of verb in -ing form.\n     */\n    public String ingForm() {\n        return resolve(\"verbs.ing_form\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Camera.java.Camera", "name": "Camera", "file_path": "src/main/java/net/datafaker/providers/base/Camera.java", "superclasses": "", "methods": ["[]Camera(BaseProviders)", "[String]brand()", "[String]model()", "[String]brandWithModel()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Camera.java.Camera.[]Camera(BaseProviders)", "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[String]brand()", "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[String]model()", "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[String]brandWithModel()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.4.0\n", "original_string": "public class Camera extends AbstractProvider<BaseProviders> {\n\n    protected Camera(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random camera brand.\n     *\n     * @return a string of camera brand.\n     */\n    public String brand() {\n        return resolve(\"camera.brand\");\n    }\n\n    /**\n     * This method generates a random camera model.\n     *\n     * @return a string of camera model.\n     */\n    public String model() {\n        return resolve(\"camera.model\");\n    }\n\n    /**\n     * This method generates a random camera brand with a model.\n     *\n     * @return a string of camera brand with a model.\n     */\n    public String brandWithModel() {\n        return resolve(\"camera.brand_with_model\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "name": "CNPJ", "file_path": "src/main/java/net/datafaker/providers/base/CNPJ.java", "superclasses": "", "methods": ["[]CNPJ(BaseProviders)", "[String]valid()", "[String]valid(boolean)", "[String]valid(boolean,boolean)", "[String]invalid()", "[String]invalid(boolean)", "[String]invalid(boolean,boolean)"], "method_uris": ["src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[]CNPJ(BaseProviders)", "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]valid()", "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]valid(boolean)", "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]valid(boolean,boolean)", "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]invalid()", "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]invalid(boolean)", "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]invalid(boolean,boolean)"], "overrides": null, "attributes": [], "class_docstring": "\nThe Brazil National Registry of Legal Entities number (CNPJ) is a company identification number that must be obtained from the Department of Federal Revenue prior to the start of any business activities.\n\n@see <a href=\"https://en.wikipedia.org/wiki/CNPJ\">CNPJ</a>\n@since 1.1.0\n", "original_string": "public class CNPJ extends AbstractProvider<BaseProviders> {\n\n    protected CNPJ(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Return valid and formatted\n     *\n     * @return a valid CNPJ\n     * @see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n     */\n    public String valid() {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, true, true, false);\n    }\n\n    /**\n     * Return valid and formatted\n     *\n     * @param formatted a CNPJ (un)formatted\n     * @return a valid CNPJ\n     * @see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n     */\n    public String valid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, true, false);\n    }\n\n    /**\n     * Return valid and formatted. Also, it generates a multi-branch CNPJ.\n     * <p>\n     * CNPJ numbers follow this format:\n     * {@code AA.AAA.AAA/BBBB-CC }\n     * Where A is the number of the company, B is the branch number and C are verification digits.\n     * If the parameter {@code multiBranch} is false, B will always be 0001.\n     * Otherwise, this number will vary between 0001 and 9999 .\n     *\n     * @param formatted   a CNPJ (un)formatted\n     * @param multiBranch CPNJ from a random company branch\n     * @return a valid CNPJ\n     * @see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n     */\n    public String valid(boolean formatted, boolean multiBranch) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, true, multiBranch);\n    }\n\n    /**\n     * Return invalid and formatted\n     *\n     * @return an invalid CNPJ\n     * @see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n     */\n    public String invalid() {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, true, false, false);\n    }\n\n    /**\n     * Return invalid and (un)formatted\n     *\n     * @return an invalid CNPJ\n     * @see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n     */\n    public String invalid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, false, false);\n    }\n\n    /**\n     * Return invalid and (un)formatted. Also, it generates a multi-branch CNPJ.\n     * <p>\n     * CNPJ numbers follow this format:\n     * {@code AA.AAA.AAA/BBBB-CC }\n     * Where A is the number of the company, B is the branch number and C are verification digits.\n     * If the parameter {@code multiBranch} is false, B will always be 0001.\n     * Otherwise, this number will vary between 0001 and 9999 .\n     *\n     * @return an invalid CNPJ\n     * @see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n     */\n    public String invalid(boolean formatted, boolean multiBranch) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, false, multiBranch);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents", "name": "ElectricalComponents", "file_path": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java", "superclasses": "", "methods": ["[]ElectricalComponents(BaseProviders)", "[String]active()", "[String]passive()", "[String]electromechanical()"], "method_uris": ["src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[]ElectricalComponents(BaseProviders)", "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[String]active()", "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[String]passive()", "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[String]electromechanical()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.4.0\n", "original_string": "public class ElectricalComponents extends AbstractProvider<BaseProviders> {\n\n    protected ElectricalComponents(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String active() {\n        return resolve(\"electrical_components.active\");\n    }\n\n    public String passive() {\n        return resolve(\"electrical_components.passive\");\n    }\n\n    public String electromechanical() {\n        return resolve(\"electrical_components.electromechanical\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money", "name": "Money", "file_path": "src/main/java/net/datafaker/providers/base/Money.java", "superclasses": "", "methods": ["[]Money(BaseProviders)", "[String]currency()", "[String]currencyCode()", "[String]currencyNumericCode()", "[String]currencySymbol()", "[Currency]getRandomCurrency()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Money.java.Money.[]Money(BaseProviders)", "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currency()", "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currencyCode()", "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currencyNumericCode()", "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currencySymbol()", "src/main/java/net/datafaker/providers/base/Money.java.Money.[Currency]getRandomCurrency()"], "overrides": null, "attributes": [], "class_docstring": "\nSupport for different kind of money currencies.\n\n@since 1.5.0\n", "original_string": "public class Money extends AbstractProvider<BaseProviders> {\n\n    private final List<Currency> availableCurrencies;\n\n    public Money(BaseProviders faker) {\n        super(faker);\n        this.availableCurrencies = List.copyOf(Currency.getAvailableCurrencies());\n    }\n\n    /**\n     * This method returns a currency value in a more descriptive manner like \"United States dollar\", etc.\n     *\n     * @see Currency#getDisplayName()\n     * @return detailed currency value.\n     */\n    public String currency() {\n        return getRandomCurrency().getDisplayName();\n    }\n\n    /**\n     * Returns a random ISO 4217 currency code (ex. EUR, USD)\n     *\n     * @see Currency#getCurrencyCode()\n     * @return an ISO 4217 currency code\n     */\n    public String currencyCode() {\n        return getRandomCurrency().getCurrencyCode();\n    }\n\n    /**\n     * Returns the 3-digit ISO 4217 numeric code of a random currency.\n     *\n     * @see Currency#getNumericCodeAsString()\n     * @return an ISO 4217 currency numeric code\n     * @since 2.2.0\n     */\n    public String currencyNumericCode() {\n        return getRandomCurrency().getNumericCodeAsString();\n    }\n\n    /**\n     * @see Currency#getSymbol()\n     * @return an ISO 4217 currency symbol\n     * @since 2.2.0\n     */\n    public String currencySymbol() {\n        return getRandomCurrency().getSymbol();\n    }\n\n    private Currency getRandomCurrency() {\n        int randomIndex = faker.random().nextInt(availableCurrencies.size());\n        return availableCurrencies.get(randomIndex);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final List<Currency> availableCurrencies;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<Currency>", "name": "availableCurrencies", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "name": "Sip", "file_path": "src/main/java/net/datafaker/providers/base/Sip.java", "superclasses": "", "methods": ["[]Sip(BaseProviders)", "[String]method()", "[String]contentType()", "[int]messagingPort()", "[int]rtpPort()", "[int]provisionalResponseCode()", "[int]successResponseCode()", "[int]redirectResponseCode()", "[int]clientErrorResponseCode()", "[int]serverErrorResponseCode()", "[int]globalErrorResponseCode()", "[String]provisionalResponsePhrase()", "[String]successResponsePhrase()", "[String]redirectResponsePhrase()", "[String]clientErrorResponsePhrase()", "[String]serverErrorResponsePhrase()", "[String]globalErrorResponsePhrase()", "[String]bodyString()", "[byte[]]bodyBytes()", "[String]nameAddress()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Sip.java.Sip.[]Sip(BaseProviders)", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]method()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]contentType()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]messagingPort()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]rtpPort()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]provisionalResponseCode()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]successResponseCode()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]redirectResponseCode()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]clientErrorResponseCode()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]serverErrorResponseCode()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]globalErrorResponseCode()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]provisionalResponsePhrase()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]successResponsePhrase()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]redirectResponsePhrase()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]clientErrorResponsePhrase()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]serverErrorResponsePhrase()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]globalErrorResponsePhrase()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]bodyString()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[byte[]]bodyBytes()", "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]nameAddress()"], "overrides": null, "attributes": [], "class_docstring": "\nFaker class for generating Session Initiation Protocol (SIP) related data.\n\n@author TomerFi\n@since 0.8.0\n", "original_string": "public class Sip extends AbstractProvider<BaseProviders> {\n\n    private final int[] portPool = new int[5001];\n\n    public Sip(final BaseProviders faker) {\n        super(faker);\n        for (int i = 0; i < portPool.length; i++) {\n            portPool[i] = 40000 + 2 * i;\n        }\n    }\n\n    /**\n     * The various SIP methods are listed in <a href=\"https://en.wikipedia.org/wiki/Session_Initiation_Protocol\">https://en.wikipedia.org/wiki/Session_Initiation_Protocol</a>.\n     *\n     * @return a SIP method String, e.g. {@code INVITE}.\n     */\n    public String method() {\n        return resolve(\"sip.methods\");\n    }\n\n    /**\n     * Content types are based on <a href=\"https://tools.ietf.org/html/rfc5621\">https://tools.ietf.org/html/rfc5621</a> and\n     * <a href=\"https://tools.ietf.org/html/rfc3261\">https://tools.ietf.org/html/rfc3261</a>.\n     *\n     * @return a SIP content-type declaration String, e.g. {@code application/sdp}\n     */\n    public String contentType() {\n        return resolve(\"sip.content.types\");\n    }\n\n    /**\n     * Get a 4 digit random port for SIP messaging.\n     *\n     * @return a SIP messaging port int, e.g. 5060.\n     */\n    public int messagingPort() {\n        return faker.random().nextInt(1000, 9999);\n    }\n\n    /**\n     * Get a 5 digit positive even port for rtp udp communication.\n     *\n     * @return an RTP UDP 5 digit port int, e.g. 40002.\n     */\n    public int rtpPort() {\n        return portPool[faker.random().nextInt(portPool.length)];\n    }\n\n    /**\n     * Proviosional code, the various response codes are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a 3 digit SIP provision response code between 100 and 199 int, e.g. {@code 180}.\n     */\n    public int provisionalResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.provisional\"));\n    }\n\n    /**\n     * Success code, the various response codes are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a 3 digit SIP success response code between 200 and 299 int, e.g. {@code 200}.\n     */\n    public int successResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.success\"));\n    }\n\n    /**\n     * Redirection code, the various response codes are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a 3 digit SIP redirection response code between 300 and 399 int, e.g. {@code 301}.\n     */\n    public int redirectResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.redirection\"));\n    }\n\n    /**\n     * Client error code, the various response codes are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a 3 digit SIP client error response code between 400 and 499 int, e.g. {@code 486}.\n     */\n    public int clientErrorResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.clientError\"));\n    }\n\n    /**\n     * Server error code, the various response codes are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a 3 digit SIP server error response code between 500 and 599 int, e.g. {@code 503}.\n     */\n    public int serverErrorResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.serverError\"));\n    }\n\n    /**\n     * Global error code, the various response codes are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a 3 digit SIP global error response code between 600 and 699 int, e.g. {@code 608}.\n     */\n    public int globalErrorResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.globalError\"));\n    }\n\n    /**\n     * Proviosional phrase, the various response phrases are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a SIP provisional response phrase String, e.g. {@code Ringing}.\n     */\n    public String provisionalResponsePhrase() {\n        return resolve(\"sip.response.phrases.provisional\");\n    }\n\n    /**\n     * Success phrase, the various response phrases are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a SIP success response phrase String, e.g. {@code OK}.\n     */\n    public String successResponsePhrase() {\n        return resolve(\"sip.response.phrases.success\");\n    }\n\n    /**\n     * Redirection phrase, the various response phrases are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a SIP redirection response phrase String, e.g. {@code Moved Permanently}.\n     */\n    public String redirectResponsePhrase() {\n        return resolve(\"sip.response.phrases.redirection\");\n    }\n\n    /**\n     * Client error phrase, the various response phrases are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a SIP client error response phrase String, e.g. {@code Busy Here}.\n     */\n    public String clientErrorResponsePhrase() {\n        return resolve(\"sip.response.phrases.clientError\");\n    }\n\n    /**\n     * Server error phrase, the various response phrases are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a SIP server error response phrase String, e.g. {@code Service Unavailable}.\n     */\n    public String serverErrorResponsePhrase() {\n        return resolve(\"sip.response.phrases.serverError\");\n    }\n\n    /**\n     * Server error phrase, the various response phrases are listed in\n     * <a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n     *\n     * @return a SIP global error response phrase String, e.g. {@code Rejected}.\n     */\n    public String globalErrorResponsePhrase() {\n        return resolve(\"sip.response.phrases.globalError\");\n    }\n\n    /**\n     * Body example of SDP type can be found in <a href=\"https://tools.ietf.org/html/rfc5621\">https://tools.ietf.org/html/rfc5621</a>.\n     *\n     * @return a fake SDP type SIP body String.\n     */\n    public String bodyString() {\n        return \"v=0\\n\" +\n            \"o=\" + faker.name().firstName() + \" \" + faker.internet().uuid() + \" IN IP4 \" + faker.internet().domainName() + \"\\n\" +\n            \"s=-\\n\" +\n            \"c=IN IP4 \" + faker.internet().ipV4Address() + \"\\n\" +\n            \"t=0 0\\n\" +\n            \"m=audio \" + rtpPort() + \" RTP/AVP 0\\n\" +\n            \"a=rtpmap:0 PCMU/8000\";\n    }\n\n    /**\n     * Body example of SDP type can be found in <a href=\"https://tools.ietf.org/html/rfc5621\">https://tools.ietf.org/html/rfc5621</a>.\n     *\n     * @return a fake SDP type SIP body byte array.\n     */\n    public byte[] bodyBytes() {\n        return bodyString().getBytes(UTF_8);\n    }\n\n    /**\n     * Return a valid name address to use with {@code to/from} headers.\n     *\n     * @return a valid name address String, e.g. {@code <sip:fakeName@10.1.2.3:5060>}.\n     */\n    public String nameAddress() {\n        return \"<sip:\" + faker.name().firstName() + \"@\" + faker.internet().ipV4Address() + \":\" + messagingPort() + \">\";\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final int[] portPool = new int[5001];", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int[]", "name": "portPool = new int[5001]", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Marketing.java.Marketing", "name": "Marketing", "file_path": "src/main/java/net/datafaker/providers/base/Marketing.java", "superclasses": "", "methods": ["[]Marketing(BaseProviders)", "[String]buzzwords()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Marketing.java.Marketing.[]Marketing(BaseProviders)", "src/main/java/net/datafaker/providers/base/Marketing.java.Marketing.[String]buzzwords()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates marketing buzzwords.\n\n@since 1.2.0\n", "original_string": "public class Marketing extends AbstractProvider<BaseProviders> {\n\n    protected Marketing(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String buzzwords() {\n        return resolve(\"marketing.buzzwords\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Yoda.java.Yoda", "name": "Yoda", "file_path": "src/main/java/net/datafaker/providers/base/Yoda.java", "superclasses": "", "methods": ["[]Yoda(BaseProviders)", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Yoda.java.Yoda.[]Yoda(BaseProviders)", "src/main/java/net/datafaker/providers/base/Yoda.java.Yoda.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Yoda extends AbstractProvider<BaseProviders> {\n\n    protected Yoda(final BaseProviders faker) {\n        super(faker);\n    }\n\n    public String quote() {\n        return resolve(\"yoda.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "name": "Locality", "file_path": "src/main/java/net/datafaker/providers/base/Locality.java", "superclasses": "", "methods": ["[]Locality(BaseProviders)", "[List<String>]allSupportedLocales(Set<String>)", "[List<String>]allSupportedLocales()", "[String]displayName()", "[String]localeString()", "[String]localeStringWithRandom(Random)", "[String]localeStringWithoutReplacement()", "[String]localeStringWithoutReplacement(Random)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Locality.java.Locality.[]Locality(BaseProviders)", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[List<String>]allSupportedLocales(Set<String>)", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[List<String>]allSupportedLocales()", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]displayName()", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeString()", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeStringWithRandom(Random)", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeStringWithoutReplacement()", "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeStringWithoutReplacement(Random)"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates random locales in different forms.\n\n@since 1.7.0\n", "original_string": "public class Locality extends AbstractProvider<BaseProviders> {\n    private static final List<String> LOCALES = List.of(\n        \"_al\", \"_bg\", \"_by\", \"_ca\", \"_ch\", \"_cn\", \"_cz\", \"_ee\", \"_ge\", \"_md\", \"_mk\", \"_ru\", \"_us\",\n        \"ar\", \"be\", \"bg\", \"by\", \"ca\", \"ca-cat\", \"cs\", \"cs-cz\",\n        \"da-dk\", \"de\", \"de-at\", \"de-ch\",\n        \"el-gr\", \"en\", \"en-au\", \"en-au-ocker\", \"en-bork\", \"en-ca\", \"en-gb\", \"en-ind\", \"en-md\", \"en-ms\", \"en-nep\",\n        \"en-ng\", \"en-nz\", \"en-pak\", \"en-ph\", \"en-pk\", \"en-sg\", \"en-ug\", \"en-us\", \"en-za\",\n        \"es\", \"es-ar\", \"es-mx\", \"es-py\", \"et\", \"fa\", \"fi-fi\", \"fr\", \"fr-ca\", \"fr-ch\",\n        \"he\", \"hr\", \"hu\", \"hy\", \"id\", \"id-id\", \"it\", \"ja\", \"ka\", \"ko\", \"lv\", \"mk\",\n        \"nb-no\", \"nl\", \"nl-be\", \"no-no\", \"pl\", \"pt\", \"pt-br\",\n        \"ro-md\", \"ru\", \"ru-md\", \"sk\", \"sq\", \"sv\", \"sv-se\",\n        \"th\", \"tr\", \"uk\", \"vi\", \"zh-cn\", \"zh-tw\"\n    );\n\n    private final List<String> shuffledLocales = new ArrayList<>();\n    private int shuffledLocaleIndex = 0;\n\n    /**\n     * Constructor for Locality class\n     */\n    public Locality(BaseProviders baseProviders) {\n        super(baseProviders);\n    }\n\n    /**\n     * @param fileMasks is not used anymore\n     * @deprecated Use {{@link #allSupportedLocales()}} instead\n     */\n    @Deprecated\n    @SuppressWarnings(\"unused\")\n    public List<String> allSupportedLocales(Set<String> fileMasks) {\n        return allSupportedLocales();\n    }\n\n    /**\n     * Retrieves list of all locales supported by Datafaker\n     *\n     * @return a List of Strings with the name of the locale (e.g. \"es\", \"es-MX\")\n     */\n    @Deterministic\n    public final List<String> allSupportedLocales() {\n        return LOCALES;\n    }\n\n    /**\n     * Select a locale at random and returns display name of the locale\n     *\n     * @return locale in the form: \"English (United States) or English\"\n     */\n    public String displayName() {\n        int randomIndex = faker.random().nextInt(LOCALES.size());\n        Locale locale = Locale.forLanguageTag(LOCALES.get(randomIndex));\n\n        String displayLanguage = locale.getDisplayLanguage(Locale.ROOT);\n        String displayCountry = locale.getDisplayCountry(Locale.ROOT);\n        if (!displayCountry.isEmpty()) {\n            displayLanguage += \" (\" + displayCountry + \")\";\n        }\n\n        return displayLanguage.isEmpty() ? Locale.ENGLISH.getDisplayLanguage(Locale.ROOT) : displayLanguage;\n    }\n\n    /**\n     * @return Randomly selected locale (e.g. \"es\", \"es-MX\").\n     * Locale is selected at random WITH replacement from all supported locales\n     */\n    public String localeString() {\n        return localeStringWithRandom(faker.random().getRandomInternal());\n    }\n\n    /**\n     * Select a locale at random with replacement\n     *\n     * @param random random number generator (can utilize seed for deterministic random selection)\n     * @return String of a randomly selected locale (e.g. \"es\", \"es-MX\")\n     */\n    public String localeStringWithRandom(Random random) {\n\n        // Randomly select a locale from list of all locales supported\n        int randomIndex = random.nextInt(LOCALES.size());\n        return LOCALES.get(randomIndex);\n    }\n\n    /**\n     * @return Randomly selected locale (e.g. \"es\", \"es-MX\").\n     * Locale is selected at random WITHOUT replacement from all supported locales\n     */\n    public String localeStringWithoutReplacement() {\n        return localeStringWithoutReplacement(faker.random().getRandomInternal());\n    }\n\n    /**\n     * Select a locale at random without replacement. This can be used to rotate through all supported locales\n     *\n     * @param random random number generator (can utilize seed for deterministic random selection)\n     * @return String of a randomly selected locale (e.g. \"es\", \"es-MX\")\n     */\n    public synchronized String localeStringWithoutReplacement(Random random) {\n        if (shuffledLocales.isEmpty() || shuffledLocaleIndex >= shuffledLocales.size() - 1) {\n            // copy list of locales supported into shuffledLocales\n            shuffledLocales.clear();\n            shuffledLocales.addAll(LOCALES);\n            shuffledLocaleIndex = 0;\n            Collections.shuffle(shuffledLocales, random);\n        }\n\n        // retrieve next locale in shuffledLocales and increase the index\n        return shuffledLocales.get(shuffledLocaleIndex++);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final List<String> LOCALES = List.of(\n        \"_al\", \"_bg\", \"_by\", \"_ca\", \"_ch\", \"_cn\", \"_cz\", \"_ee\", \"_ge\", \"_md\", \"_mk\", \"_ru\", \"_us\",\n        \"ar\", \"be\", \"bg\", \"by\", \"ca\", \"ca-cat\", \"cs\", \"cs-cz\",\n        \"da-dk\", \"de\", \"de-at\", \"de-ch\",\n        \"el-gr\", \"en\", \"en-au\", \"en-au-ocker\", \"en-bork\", \"en-ca\", \"en-gb\", \"en-ind\", \"en-md\", \"en-ms\", \"en-nep\",\n        \"en-ng\", \"en-nz\", \"en-pak\", \"en-ph\", \"en-pk\", \"en-sg\", \"en-ug\", \"en-us\", \"en-za\",\n        \"es\", \"es-ar\", \"es-mx\", \"es-py\", \"et\", \"fa\", \"fi-fi\", \"fr\", \"fr-ca\", \"fr-ch\",\n        \"he\", \"hr\", \"hu\", \"hy\", \"id\", \"id-id\", \"it\", \"ja\", \"ka\", \"ko\", \"lv\", \"mk\",\n        \"nb-no\", \"nl\", \"nl-be\", \"no-no\", \"pl\", \"pt\", \"pt-br\",\n        \"ro-md\", \"ru\", \"ru-md\", \"sk\", \"sq\", \"sv\", \"sv-se\",\n        \"th\", \"tr\", \"uk\", \"vi\", \"zh-cn\", \"zh-tw\"\n    );", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<String>", "name": "LOCALES = List.of(\n        \"_al\", \"_bg\", \"_by\", \"_ca\", \"_ch\", \"_cn\", \"_cz\", \"_ee\", \"_ge\", \"_md\", \"_mk\", \"_ru\", \"_us\",\n        \"ar\", \"be\", \"bg\", \"by\", \"ca\", \"ca-cat\", \"cs\", \"cs-cz\",\n        \"da-dk\", \"de\", \"de-at\", \"de-ch\",\n        \"el-gr\", \"en\", \"en-au\", \"en-au-ocker\", \"en-bork\", \"en-ca\", \"en-gb\", \"en-ind\", \"en-md\", \"en-ms\", \"en-nep\",\n        \"en-ng\", \"en-nz\", \"en-pak\", \"en-ph\", \"en-pk\", \"en-sg\", \"en-ug\", \"en-us\", \"en-za\",\n        \"es\", \"es-ar\", \"es-mx\", \"es-py\", \"et\", \"fa\", \"fi-fi\", \"fr\", \"fr-ca\", \"fr-ch\",\n        \"he\", \"hr\", \"hu\", \"hy\", \"id\", \"id-id\", \"it\", \"ja\", \"ka\", \"ko\", \"lv\", \"mk\",\n        \"nb-no\", \"nl\", \"nl-be\", \"no-no\", \"pl\", \"pt\", \"pt-br\",\n        \"ro-md\", \"ru\", \"ru-md\", \"sk\", \"sq\", \"sv\", \"sv-se\",\n        \"th\", \"tr\", \"uk\", \"vi\", \"zh-cn\", \"zh-tw\"\n    )", "syntax_pass": true}, {"attribute_expression": "private final List<String> shuffledLocales = new ArrayList<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "List<String>", "name": "shuffledLocales = new ArrayList<>()", "syntax_pass": true}, {"attribute_expression": "private int shuffledLocaleIndex = 0;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "int", "name": "shuffledLocaleIndex = 0", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Hipster.java.Hipster", "name": "Hipster", "file_path": "src/main/java/net/datafaker/providers/base/Hipster.java", "superclasses": "", "methods": ["[]Hipster(BaseProviders)", "[String]word()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Hipster.java.Hipster.[]Hipster(BaseProviders)", "src/main/java/net/datafaker/providers/base/Hipster.java.Hipster.[String]word()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Hipster extends AbstractProvider<BaseProviders> {\n\n    protected Hipster(final BaseProviders faker) {\n        super(faker);\n    }\n\n    public String word() {\n        return resolve(\"hipster.words\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Coin.java.Coin", "name": "Coin", "file_path": "src/main/java/net/datafaker/providers/base/Coin.java", "superclasses": "", "methods": ["[]Coin(BaseProviders)", "[String]flip()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Coin.java.Coin.[]Coin(BaseProviders)", "src/main/java/net/datafaker/providers/base/Coin.java.Coin.[String]flip()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Coin extends AbstractProvider<BaseProviders> {\n\n    protected Coin(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return coin side e.g. \"Heads\", \"Tails\".\n     */\n    public String flip() {\n        return resolve(\"coin.flip\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "name": "FinancialTerms", "file_path": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "superclasses": "", "methods": ["[]FinancialTerms(BaseProviders)", "[String]noun()", "[String]noun(Category)", "[String]verb()", "[String]verb(Category)", "[String]adjective()", "[String]adjective(Category)"], "method_uris": ["src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[]FinancialTerms(BaseProviders)", "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]noun()", "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]noun(Category)", "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]verb()", "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]verb(Category)", "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]adjective()", "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]adjective(Category)"], "overrides": null, "attributes": [], "class_docstring": "\nProvides financial terms.\n\n@since 2.4.0\n", "original_string": "public class FinancialTerms extends AbstractProvider<BaseProviders> {\n\n    public FinancialTerms(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String noun() {\n        return noun(faker.options().option(FinancialTerms.Category.class));\n    }\n\n    public String noun(Category category) {\n        return resolve(\"financial_terms.\" + category.getName() + \".nouns\");\n    }\n\n    public String verb() {\n        return verb(faker.options().option(FinancialTerms.Category.class));\n    }\n\n    public String verb(Category category) {\n        return resolve(\"financial_terms.\" + category.getName() + \".verbs\");\n    }\n\n    public String adjective() {\n        return adjective(faker.options().option(FinancialTerms.Category.class));\n    }\n\n    public String adjective(Category category) {\n        return resolve(\"financial_terms.\" + category.getName() + \".adjectives\");\n    }\n\n    public enum Category {\n        ACCOUNT_MANAGEMENT(\"account_management\"),\n        TRANSACTIONS(\"transactions\"),\n        PAYMENTS(\"payments\"),\n        TRANSFERS(\"transfers\"),\n        INVESTMENTS(\"investments\"),\n        LOANS(\"loans\"),\n        ALERTS_AND_NOTIFICATIONS(\"alerts_and_notifications\"),\n        CUSTOMER_SUPPORT(\"customer_support\"),\n        SECURITY(\"security\"),\n        REGULATORY_COMPLIANCE(\"regulatory_compliance\"),\n        MARKET_DATA(\"market_data\"),\n        USER_ACTIVITY(\"user_activity\"),\n        BANKING(\"banking\"),\n        CARDS(\"cards\"),\n        CRYPTOCURRENCY(\"cryptocurrency\"),\n        INSURANCE(\"insurance\"),\n        REWARDS_AND_LOYALTY(\"rewards_and_loyalty\"),\n        MISCELLANEOUS(\"miscellaneous\");\n\n        private final String name;\n\n        Category(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Unique.java.Unique", "name": "Unique", "file_path": "src/main/java/net/datafaker/providers/base/Unique.java", "superclasses": "", "methods": ["[]Unique(BaseProviders)", "[String]fetchFromYaml(String)", "[String]removeAtIndex(List<String>,int)", "[List<String>]fetchValues(String)", "[NoSuchElementException]noValuesFoundException(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Unique.java.Unique.[]Unique(BaseProviders)", "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[String]fetchFromYaml(String)", "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[String]removeAtIndex(List<String>,int)", "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[List<String>]fetchValues(String)", "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[NoSuchElementException]noValuesFoundException(String)"], "overrides": null, "attributes": [], "class_docstring": "\nThis class contains methods that ensure uniqueness across separate invocations.\n<p>\nThis can be helpful for unit tests and automated tests where certain values need to be different.\n\n@since 1.6.0\n", "original_string": "public class Unique extends AbstractProvider<BaseProviders> {\n\n    private final Map<Locale, Map<String, List<String>>> valuesByKeyAndLocale = new HashMap<>();\n\n    public Unique(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Returns a random value from the YAML files that is guaranteed to be unique for the given key and locale set on\n     * the current faker instance.\n     * <p>\n     * Since unique values are tracked by both the key and the locale, manually changing the locale could cause\n     * this method to return the same value for a given key if there is not a separate locale for the given key.\n     *\n     * @param key the key of the values to fetch from the YAML files\n     * @return a unique random value based on {@code key} and the current locale\n     * @throws NoSuchElementException if {@code key} does not correspond to a list of valid data types in the YAML\n     *                                files, or if all possible values found for {@code key} and current locale\n     *                                have been returned\n     */\n    public String fetchFromYaml(String key) {\n        Locale locale = faker.getContext().getLocale();\n\n        Map<String, List<String>> valuesByKey = valuesByKeyAndLocale.getOrDefault(locale, new HashMap<>());\n        List<String> values = valuesByKey.get(key);\n\n        if (values == null) {\n            values = fetchValues(key);\n        }\n\n        if (values.isEmpty()) {\n            throw new NoSuchElementException(\"All possible values have been generated for key %s under locale %s\".formatted(\n                key,\n                locale));\n        }\n\n        int index = faker.random().nextInt(0, values.size() - 1);\n        String value = removeAtIndex(values, index);\n\n        valuesByKey.put(key, values);\n        valuesByKeyAndLocale.put(locale, valuesByKey);\n\n        return value;\n    }\n\n    private String removeAtIndex(List<String> values, int index) {\n        int lastIndex = values.size() - 1;\n        Collections.swap(values, index, lastIndex);\n        return values.remove(lastIndex);\n    }\n\n    private List<String> fetchValues(String key) {\n        Object object = faker.fakeValuesService().fetchObject(key, faker.getContext());\n\n        if (!(object instanceof List)) {\n            throw noValuesFoundException(key);\n        }\n\n        List<String> values = ((List<?>) object).stream()\n            .filter(value -> !(value instanceof List))\n            .map(String::valueOf)\n            .collect(Collectors.toList());\n\n        if (values.isEmpty()) {\n            throw noValuesFoundException(key);\n        }\n\n        return values;\n    }\n\n    private NoSuchElementException noValuesFoundException(String key) {\n        return new NoSuchElementException(\"No values found for key %s\".formatted(\n            key));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Map<Locale, Map<String, List<String>>> valuesByKeyAndLocale = new HashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<Locale, Map<String, List<String>>>", "name": "valuesByKeyAndLocale = new HashMap<>()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Music.java.Music", "name": "Music", "file_path": "src/main/java/net/datafaker/providers/base/Music.java", "superclasses": "", "methods": ["[]Music(BaseProviders)", "[String]instrument()", "[String]key()", "[String]chord()", "[String]genre()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Music.java.Music.[]Music(BaseProviders)", "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]instrument()", "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]key()", "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]chord()", "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]genre()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Music extends AbstractProvider<BaseProviders> {\n\n    private static final String[] KEYS = {\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"};\n    private static final String[] KEY_VARIANTS = {\"b\", \"#\", \"\"};\n    private static final String[] CHORD_TYPES = {\"\", \"maj\", \"6\", \"maj7\", \"m\", \"m7\", \"-7\", \"7\", \"dom7\", \"dim\", \"dim7\", \"m7b5\"};\n\n    protected Music(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String instrument() {\n        return resolve(\"music.instruments\");\n    }\n\n    public String key() {\n        return faker.options().option(KEYS) + faker.options().option(KEY_VARIANTS);\n    }\n\n    public String chord() {\n        return key() + faker.options().option(CHORD_TYPES);\n    }\n\n    public String genre() {\n        return resolve(\"music.genres\");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String[] KEYS = {\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "KEYS = {\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] KEY_VARIANTS = {\"b\", \"#\", \"\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "KEY_VARIANTS = {\"b\", \"#\", \"\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] CHORD_TYPES = {\"\", \"maj\", \"6\", \"maj7\", \"m\", \"m7\", \"-7\", \"7\", \"dom7\", \"dim\", \"dim7\", \"m7b5\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "CHORD_TYPES = {\"\", \"maj\", \"6\", \"maj7\", \"m\", \"m7\", \"-7\", \"7\", \"dom7\", \"dim\", \"dim7\", \"m7b5\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "name": "Hashing", "file_path": "src/main/java/net/datafaker/providers/base/Hashing.java", "superclasses": "", "methods": ["[]Hashing(BaseProviders)", "[String]md2()", "[String]md5()", "[String]sha1()", "[String]sha384()", "[String]sha256()", "[String]sha512()", "[String]generateString(String,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[]Hashing(BaseProviders)", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]md2()", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]md5()", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha1()", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha384()", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha256()", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha512()", "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]generateString(String,String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Hashing extends AbstractProvider<BaseProviders> {\n\n    protected Hashing(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String md2() {\n        return generateString(\"MD2\", \"%032x\");\n    }\n\n    public String md5() {\n        return generateString(\"MD5\", \"%032x\");\n    }\n\n    public String sha1() {\n        return generateString(\"SHA-1\", \"%040x\");\n    }\n\n    public String sha384() {\n        return generateString(\"SHA-384\", \"%096x\");\n    }\n\n    public String sha256() {\n        return generateString(\"SHA-256\", \"%064x\");\n    }\n\n    public String sha512() {\n        return generateString(\"SHA-512\", \"%0128x\");\n    }\n\n    private String generateString(String algorithm, String format) {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            String characters = faker.lorem().characters();\n            messageDigest.update(characters.getBytes(StandardCharsets.UTF_8), 0, characters.length());\n            return format.formatted(new BigInteger(1, messageDigest.digest()));\n        } catch (NoSuchAlgorithmException noSuchAlgorithmException) {\n            throw new RuntimeException(\"Failed to generate string using algorithm \\\"%s\\\" and format \\\"%s\\\"\"\n                .formatted(algorithm, format), noSuchAlgorithmException);\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "name": "Barcode", "file_path": "src/main/java/net/datafaker/providers/base/Barcode.java", "superclasses": "", "methods": ["[]Barcode(BaseProviders)", "[long]ean13()", "[long]ean8()", "[long]gtin14()", "[long]gtin12()", "[long]gtin13()", "[long]gtin8()", "[int]roundToHighestMultiplyOfTen(int)", "[long]ean(int)", "[int]calculateVar(int,int,int)", "[String]type()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[]Barcode(BaseProviders)", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]ean13()", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]ean8()", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin14()", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin12()", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin13()", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin8()", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[int]roundToHighestMultiplyOfTen(int)", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]ean(int)", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[int]calculateVar(int,int,int)", "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[String]type()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.9.0\n", "original_string": "public class Barcode extends AbstractProvider<BaseProviders> {\n\n    public Barcode(BaseProviders faker) {\n        super(faker);\n    }\n\n    public long ean13() {\n        return ean(13);\n    }\n\n    public long ean8() {\n        return ean(8);\n    }\n\n    public long gtin14() {\n        return ean(14);\n    }\n\n    public long gtin12() {\n        return ean(12);\n    }\n\n    public long gtin13() {\n        return ean13();\n    }\n\n    public long gtin8() {\n        return ean8();\n    }\n\n    private static int roundToHighestMultiplyOfTen(int number) {\n        if (number % 10 == 0) {\n            return number;\n        } else {\n            int ones = number % 10;\n            int add = 10 - ones;\n            return number + add;\n        }\n    }\n\n    private long ean(int length) {\n        long firstPart = switch (length) {\n            case 8, 12, 13, 14 -> this.faker.number().randomNumber(length - 1, true);\n            default -> 0;\n        };\n        int odd = 0;\n        int even = 0;\n        long number = firstPart;\n        int i = 0;\n        while (number > 0) {\n            i++;\n            if (i % 2 == 1) {\n                odd += number % 10;\n            } else {\n                even += number % 10;\n            }\n\n            number /= 10;\n        }\n        if (i % 2 == 0) {\n            int tmp = even;\n            even = odd;\n            odd = tmp;\n        }\n\n        final int var = calculateVar(length, odd, even);\n\n        int rounded = roundToHighestMultiplyOfTen((var));\n        int checkDigit = rounded - var;\n        int product = 10;\n        while (product <= checkDigit) {\n            product *= 10;\n        }\n        return firstPart * product + checkDigit;\n    }\n\n    private int calculateVar(int length, int odd, int even){\n        return switch(length) {\n            case 13 -> odd + even + (even << 1);\n            case 8, 12, 14 -> odd + even + (odd << 1);\n            default -> 0;\n        };\n    }\n\n    public String type() {\n        return resolve(\"barcode.types\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Animal.java.Animal", "name": "Animal", "file_path": "src/main/java/net/datafaker/providers/base/Animal.java", "superclasses": "", "methods": ["[]Animal(BaseProviders)", "[String]name()", "[String]scientificName()", "[String]genus()", "[String]species()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Animal.java.Animal.[]Animal(BaseProviders)", "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]name()", "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]scientificName()", "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]genus()", "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]species()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Animal extends AbstractProvider<BaseProviders> {\n\n    protected Animal(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"creature.animal.name\");\n    }\n\n    public String scientificName() {\n        return genus() + \" \" + species();\n    }\n\n    public String genus() {\n        return WordUtils.capitalize(faker.resolve(\"creature.animal.genus\"));\n    }\n\n    public String species() {\n        return resolve(\"creature.animal.species\").toLowerCase();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "name": "ObjectMethods", "file_path": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "superclasses": "", "methods": ["[Map<String, Method>]scanMethodsByName(Class<?>)", "[Map<String, Method>]scanMethodsByReturnType(Class<?>)", "[boolean]isUseful(Method)", "[Method]getMethodByName(Object,String)", "[Method]getMethodByReturnType(Object,String)", "[T]executeMethodByReturnType(Object,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Map<String, Method>]scanMethodsByName(Class<?>)", "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Map<String, Method>]scanMethodsByReturnType(Class<?>)", "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[boolean]isUseful(Method)", "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Method]getMethodByName(Object,String)", "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Method]getMethodByReturnType(Object,String)", "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[T]executeMethodByReturnType(Object,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ObjectMethods {\n    private static final Map<Class<?>, Map<String, Method>> METHODS_BY_NAME = new IdentityHashMap<>();\n    private static final Map<Class<?>, Map<String, Method>> METHODS_BY_RETURN_TYPE = new IdentityHashMap<>();\n    private static final Set<String> IGNORED_METHODS = Set.of(\"equals\", \"hashCode\", \"toString\", \"Builder\", \"stream\");\n\n    private static synchronized Map<String, Method> scanMethodsByName(Class<?> clazz) {\n        return Stream.of(clazz.getMethods())\n            .filter(ObjectMethods::isUseful)\n            .collect(toMap(Method::getName, method -> method));\n    }\n\n    private static synchronized Map<String, Method> scanMethodsByReturnType(Class<?> clazz) {\n        return Stream.of(clazz.getMethods())\n            .filter(ObjectMethods::isUseful)\n            .collect(toMap(method -> method.getReturnType().getSimpleName(), method -> method));\n    }\n\n    /**\n     * Later we could mark all provider methods with some annotation like \"@Provider\" instead of this shaky logic\n     */\n    private static boolean isUseful(Method method) {\n        return method.getParameterCount() == 0\n            && method.getDeclaringClass() != Object.class\n            && method.getReturnType() != void.class\n            && !IGNORED_METHODS.contains(method.getName());\n    }\n\n    public static Method getMethodByName(Object object, String methodName) {\n        return METHODS_BY_NAME.computeIfAbsent(object.getClass(), ObjectMethods::scanMethodsByName).get(methodName);\n    }\n\n    private static Method getMethodByReturnType(Object object, String returnTypeSimpleName) {\n        return METHODS_BY_RETURN_TYPE.computeIfAbsent(object.getClass(), ObjectMethods::scanMethodsByReturnType).get(returnTypeSimpleName);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T executeMethodByReturnType(Object object, String returnTypeSimpleName) {\n        try {\n            Method method = getMethodByReturnType(object, returnTypeSimpleName);\n            if (method == null) return null;\n            method.setAccessible(true);\n            return (T) method.invoke(object);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Failed to call method %s.%s()\".formatted(object.getClass().getName(), returnTypeSimpleName), e);\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Map<Class<?>, Map<String, Method>> METHODS_BY_NAME = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Map<String, Method>>", "name": "METHODS_BY_NAME = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Map<String, Method>> METHODS_BY_RETURN_TYPE = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Map<String, Method>>", "name": "METHODS_BY_RETURN_TYPE = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private static final Set<String> IGNORED_METHODS = Set.of(\"equals\", \"hashCode\", \"toString\", \"Builder\", \"stream\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Set<String>", "name": "IGNORED_METHODS = Set.of(\"equals\", \"hashCode\", \"toString\", \"Builder\", \"stream\")", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Compass.java.Compass", "name": "Compass", "file_path": "src/main/java/net/datafaker/providers/base/Compass.java", "superclasses": "", "methods": ["[]Compass(BaseProviders)", "[Compass]compassPoint(CompassPoint)", "[String]word()", "[String]abbreviation()", "[String]azimuth()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Compass.java.Compass.[]Compass(BaseProviders)", "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[Compass]compassPoint(CompassPoint)", "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[String]word()", "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[String]abbreviation()", "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[String]azimuth()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class Compass extends AbstractProvider<BaseProviders> {\n\n    public enum CompassPoint {\n        CARDINAL(\"cardinal\"),\n        ORDINAL(\"ordinal\"),\n        HALF_WIND(\"half-wind\"),\n        QUARTER_WIND(\"quarter-wind\");\n\n        private final String yamlKey;\n\n        CompassPoint(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n    }\n\n    private CompassPoint compassPoint;\n\n    protected Compass(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Specify point of direction. If not specified, point of direction will be randomly selected.\n     *\n     * @param compassPoint point of direction.\n     * @return itself with specified point of direction.\n     * @see CompassPoint\n     */\n    public Compass compassPoint(CompassPoint compassPoint) {\n        this.compassPoint = compassPoint;\n        return this;\n    }\n\n    /**\n     * Returns full-size name of direction according to the specified {@link CompassPoint} point of direction.\n     * <p>\n     * Specify point of direction using {@link Compass#compassPoint(CompassPoint)} method.\n     * <p>\n     * Typical call of this method: {@code compass().compassPoint(CompassPoint.CARDINAL).word();}\n     *\n     * @return the full-size direction word according to the specified {@link CompassPoint}. Otherwise, the point of direction will be selected randomly.\n     */\n    public String word() {\n        if (compassPoint == null) {\n            return resolve(\"compass.direction\");\n        }\n\n        return resolve(\"compass.\" + compassPoint.yamlKey + \".word\");\n    }\n\n    /**\n     * Returns abbreviation of direction according to the specified {@link CompassPoint} point of direction.\n     * <p>\n     * Specify point of direction using {@link Compass#compassPoint(CompassPoint)} method.\n     * <p>\n     * Typical call of this method: {@code compass().compassPoint(CompassPoint.CARDINAL).abbreviation();}\n     *\n     * @return the abbreviation of direction according to the specified {@link CompassPoint}. Otherwise, the point of direction will be selected randomly.\n     */\n    public String abbreviation() {\n        if (compassPoint == null) {\n            return resolve(\"compass.abbreviation\");\n        }\n\n        return resolve(\"compass.\" + compassPoint.yamlKey + \".abbreviation\");\n    }\n\n    /**\n     * Returns appropriate azimuth of direction according to the specified {@link CompassPoint} point of direction.\n     * <p>\n     * Specify point of direction using {@link Compass#compassPoint(CompassPoint)} method.\n     * <p>\n     * Typical call of this method: {@code compass().compassPoint(CompassPoint.CARDINAL).azimuth();}\n     *\n     * @return the appropriate azimuth of the direction according to the specified {@link CompassPoint}. Otherwise, the point of direction will be selected randomly.\n     */\n    public String azimuth() {\n        if (compassPoint == null) {\n            return resolve(\"compass.azimuth\");\n        }\n\n        return resolve(\"compass.\" + compassPoint.yamlKey + \".azimuth\");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private CompassPoint compassPoint;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CompassPoint", "name": "compassPoint", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "name": "Educator", "file_path": "src/main/java/net/datafaker/providers/base/Educator.java", "superclasses": "", "methods": ["[]Educator(BaseProviders)", "[String]university()", "[String]course()", "[String]subjectWithNumber()", "[String]secondarySchool()", "[String]campus()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Educator.java.Educator.[]Educator(BaseProviders)", "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]university()", "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]course()", "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]subjectWithNumber()", "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]secondarySchool()", "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]campus()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Educator extends AbstractProvider<BaseProviders> {\n\n    protected Educator(BaseProviders faker) {\n        super(faker);\n    }\n\n    // TODO - move these all out to en.yml by default. \n    public String university() {\n        return resolve(\"educator.name\")\n            + \" \"\n            + resolve(\"educator.tertiary.type\");\n    }\n\n    public String course() {\n        return resolve(\"educator.tertiary.degree.type\")\n            + \" \"\n            + resolve(\"educator.tertiary.degree.subject\");\n    }\n\n    public String subjectWithNumber() {\n        return resolve(\"educator.tertiary.degree.subject\")\n            + \" \"\n            + faker.numerify(resolve(\"educator.tertiary.degree.course_number\"));\n    }\n\n    public String secondarySchool() {\n        return resolve(\"educator.name\")\n            + \" \"\n            + resolve(\"educator.secondary\");\n    }\n\n    public String campus() {\n        return resolve(\"educator.name\") + \" Campus\";\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "name": "Computer", "file_path": "src/main/java/net/datafaker/providers/base/Computer.java", "superclasses": "", "methods": ["[]Computer(BaseProviders)", "[String]type()", "[String]platform()", "[String]operatingSystem()", "[String]linux()", "[String]macos()", "[String]windows()", "[String]brand()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Computer.java.Computer.[]Computer(BaseProviders)", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]type()", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]platform()", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]operatingSystem()", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]linux()", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]macos()", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]windows()", "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]brand()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates different attributes related to computers, such as operating systems, types, platforms and brands.\n\n@since 1.5.0\n", "original_string": "public class Computer extends AbstractProvider<BaseProviders> {\n\n    protected Computer(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String type() {\n        return resolve(\"computer.type\");\n    }\n\n    public String platform() {\n        return resolve(\"computer.platform\");\n    }\n\n    public String operatingSystem() {\n        return resolve(\"computer.os.\" + faker.options().option(\"linux\", \"macos\", \"windows\"));\n    }\n\n    public String linux() {\n        return resolve(\"computer.os.linux\");\n    }\n\n    public String macos() {\n        return resolve(\"computer.os.macos\");\n    }\n\n    public String windows() {\n        return resolve(\"computer.os.windows\");\n    }\n\n    public String brand() { return resolve(\"computer.brand\"); }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Transport.java.Transport", "name": "Transport", "file_path": "src/main/java/net/datafaker/providers/base/Transport.java", "superclasses": "", "methods": ["[]Transport(BaseProviders)", "[String]type()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Transport.java.Transport.[]Transport(BaseProviders)", "src/main/java/net/datafaker/providers/base/Transport.java.Transport.[String]type()"], "overrides": null, "attributes": [], "class_docstring": "\nProvides different kind of transport.\n\n@since 2.0.0\n", "original_string": "public class Transport extends AbstractProvider<BaseProviders> {\n\n    public Transport(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return transport type in the descriptive manner just like \"Car\", \"Aircraft\", etc.\n     */\n    public String type() {\n        return resolve(\"transport.type\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "name": "Weather", "file_path": "src/main/java/net/datafaker/providers/base/Weather.java", "superclasses": "", "methods": ["[]Weather(BaseProviders)", "[String]description()", "[String]temperatureCelsius()", "[String]temperatureFahrenheit()", "[String]temperatureCelsius(int,int)", "[String]temperatureFahrenheit(int,int)", "[String]temperature(int,int,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Weather.java.Weather.[]Weather(BaseProviders)", "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]description()", "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureCelsius()", "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureFahrenheit()", "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureCelsius(int,int)", "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureFahrenheit(int,int)", "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperature(int,int,String)"], "overrides": null, "attributes": [], "class_docstring": "\nA generator for weather data.\n\n@since 0.8.0\n", "original_string": "public class Weather extends AbstractProvider<BaseProviders> {\n\n    private static final int DEFAULT_MIN_TEMP_C = -30;\n    private static final int DEFAULT_MAX_TEMP_C = 38;\n    private static final int DEFAULT_MIN_TEMP_F = -22;\n    private static final int DEFAULT_MAX_TEMP_F = 100;\n\n    protected Weather(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generates a short weather description.\n     */\n    public String description() {\n        return resolve(\"weather.description\");\n    }\n\n    /**\n     * Generates a random temperature celsius between -30 and 38 degrees.\n     *\n     * @return String that represents temperature in format 5\u00b0C\n     */\n    public String temperatureCelsius() {\n        return temperature(DEFAULT_MIN_TEMP_C, DEFAULT_MAX_TEMP_C, \"weather.temperature.celsius\");\n    }\n\n    /**\n     * Generates a random temperature fahrenheit between -22 and 100 degrees.\n     *\n     * @return String that represents temperature in format 5\u00b0F\n     */\n    public String temperatureFahrenheit() {\n        return temperature(DEFAULT_MIN_TEMP_F, DEFAULT_MAX_TEMP_F, \"weather.temperature.fahrenheit\");\n    }\n\n    /**\n     * Generates a random temperature celsius between two temperatures.\n     *\n     * @param minTemperature the minimal temperature\n     * @param maxTemperature the maximal temperature\n     * @return String that represents temperature in format 5\u00b0C\n     */\n    public String temperatureCelsius(int minTemperature, int maxTemperature) {\n        return temperature(minTemperature, maxTemperature, \"weather.temperature.celsius\");\n    }\n\n    /**\n     * Generates a random temperature fahrenheit between two temperatures.\n     *\n     * @param minTemperature the minimal temperature\n     * @param maxTemperature the maximal temperature\n     * @return String that represents temperature in format 5\u00b0F\n     */\n    public String temperatureFahrenheit(int minTemperature, int maxTemperature) {\n        return temperature(minTemperature, maxTemperature, \"weather.temperature.fahrenheit\");\n    }\n\n    private String temperature(int minTemperature, int maxTemperature, String degreeKey) {\n        return faker.random().nextInt(minTemperature, maxTemperature) + resolve(degreeKey);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int DEFAULT_MIN_TEMP_C = -30;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MIN_TEMP_C = -30", "syntax_pass": true}, {"attribute_expression": "private static final int DEFAULT_MAX_TEMP_C = 38;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MAX_TEMP_C = 38", "syntax_pass": true}, {"attribute_expression": "private static final int DEFAULT_MIN_TEMP_F = -22;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MIN_TEMP_F = -22", "syntax_pass": true}, {"attribute_expression": "private static final int DEFAULT_MAX_TEMP_F = 100;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MAX_TEMP_F = 100", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Hobby.java.Hobby", "name": "Hobby", "file_path": "src/main/java/net/datafaker/providers/base/Hobby.java", "superclasses": "", "methods": ["[]Hobby(BaseProviders)", "[String]activity()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Hobby.java.Hobby.[]Hobby(BaseProviders)", "src/main/java/net/datafaker/providers/base/Hobby.java.Hobby.[String]activity()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.3.0\n", "original_string": "public class Hobby extends AbstractProvider<BaseProviders> {\n\n    protected Hobby(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String activity() {\n        return resolve(\"hobby.activity\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "name": "AbstractProvider", "file_path": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "superclasses": "", "methods": ["[]AbstractProvider(T)", "[ProviderRegistration]getFaker()", "[String]resolve(String)", "[String]resolve(String,Supplier<String>)", "[boolean]equals(Object)", "[int]hashCode()", "[List<G>]loadGenerators(Class<G>)", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[]AbstractProvider(T)", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[ProviderRegistration]getFaker()", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[String]resolve(String)", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[String]resolve(String,Supplier<String>)", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[boolean]equals(Object)", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[int]hashCode()", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[List<G>]loadGenerators(Class<G>)", "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AbstractProvider<T extends ProviderRegistration> {\n    protected final T faker;\n\n    protected AbstractProvider(T faker) {\n        this.faker = faker;\n    }\n\n    public final ProviderRegistration getFaker() {\n        return faker;\n    }\n\n    protected String resolve(String key) {\n        return faker.fakeValuesService().resolve(key, this, faker.getContext());\n    }\n\n    protected String resolve(String key, Supplier<String> message) {\n        return faker.fakeValuesService().resolve(key, this, faker, message, faker.getContext());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof AbstractProvider<?> that)) return false;\n\n        return Objects.equals(faker, that.faker);\n    }\n\n    @Override\n    public int hashCode() {\n        return getClass().hashCode();\n    }\n\n    protected final <G> List<G> loadGenerators(Class<G> generatorClass) {\n        return ServiceLoader.load(generatorClass).stream()\n            .map(ServiceLoader.Provider::get)\n            .toList();\n    }\n\n    @Override\n    public String toString() {\n        return \"%s(%s)@%s\".formatted(getClass().getSimpleName(), faker, Integer.toHexString(hashCode()));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "protected final T faker;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "T", "name": "faker", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/App.java.App", "name": "App", "file_path": "src/main/java/net/datafaker/providers/base/App.java", "superclasses": "", "methods": ["[]App(BaseProviders)", "[String]name()", "[String]version()", "[String]author()"], "method_uris": ["src/main/java/net/datafaker/providers/base/App.java.App.[]App(BaseProviders)", "src/main/java/net/datafaker/providers/base/App.java.App.[String]name()", "src/main/java/net/datafaker/providers/base/App.java.App.[String]version()", "src/main/java/net/datafaker/providers/base/App.java.App.[String]author()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class App extends AbstractProvider<BaseProviders> {\n\n    protected App(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"app.name\");\n    }\n\n    public String version() {\n        return faker.numerify(faker.resolve(\"app.version\"));\n    }\n\n    public String author() {\n        return resolve(\"app.author\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "name": "Drone", "file_path": "src/main/java/net/datafaker/providers/base/Drone.java", "superclasses": "", "methods": ["[]Drone(BaseProviders)", "[String]name()", "[String]weight()", "[String]maxAscentSpeed()", "[String]maxDescentSpeed()", "[String]flightTime()", "[String]maxAltitude()", "[String]maxFlightDistance()", "[String]maxSpeed()", "[String]maxWindResistance()", "[String]maxAngularVelocity()", "[String]maxTiltAngle()", "[String]operatingTemperature()", "[String]batteryCapacity()", "[String]batteryVoltage()", "[String]batteryType()", "[String]batteryWeight()", "[String]chargingTemperature()", "[String]maxChargingPower()", "[String]iso()", "[String]maxResolution()", "[String]photoFormat()", "[String]videoFormat()", "[String]maxShutterSpeed()", "[String]minShutterSpeed()", "[String]shutterSpeedUnits()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Drone.java.Drone.[]Drone(BaseProviders)", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]name()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]weight()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxAscentSpeed()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxDescentSpeed()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]flightTime()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxAltitude()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxFlightDistance()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxSpeed()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxWindResistance()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxAngularVelocity()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxTiltAngle()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]operatingTemperature()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryCapacity()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryVoltage()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryType()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryWeight()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]chargingTemperature()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxChargingPower()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]iso()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxResolution()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]photoFormat()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]videoFormat()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxShutterSpeed()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]minShutterSpeed()", "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]shutterSpeedUnits()"], "overrides": null, "attributes": [], "class_docstring": "\nAn unmanned aerial vehicle (UAV), commonly known as a drone, is an aircraft without any human pilot, crew, or passengers on board.\n\n@since 1.7.0\n", "original_string": "public class Drone extends AbstractProvider<BaseProviders> {\n\n    protected Drone(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"drone.name\");\n    }\n\n    public String weight() {\n        return faker.numerify(resolve(\"drone.weight\"));\n    }\n\n    public String maxAscentSpeed() {\n        return faker.numerify(resolve(\"drone.max_ascent_speed\"));\n    }\n\n    public String maxDescentSpeed() {\n        return faker.numerify(resolve(\"drone.max_descent_speed\"));\n    }\n\n    public String flightTime() {\n        return faker.numerify(resolve(\"drone.flight_time\"));\n    }\n\n    public String maxAltitude() {\n        return faker.numerify(resolve(\"drone.max_altitude\"));\n    }\n\n    public String maxFlightDistance() {\n        return faker.numerify(resolve(\"drone.max_flight_distance\"));\n    }\n\n    public String maxSpeed() {\n        return faker.numerify(resolve(\"drone.max_speed\"));\n    }\n\n    public String maxWindResistance() {\n        return faker.numerify(resolve(\"drone.max_wind_resistance\"));\n    }\n\n    public String maxAngularVelocity() {\n        return faker.numerify(resolve(\"drone.max_angular_velocity\"));\n    }\n\n    public String maxTiltAngle() {\n        return faker.numerify(resolve(\"drone.max_tilt_angle\"));\n    }\n\n    public String operatingTemperature() {\n        return faker.numerify(resolve(\"drone.operating_temperature\"));\n    }\n\n    public String batteryCapacity() {\n        return faker.numerify(resolve(\"drone.battery_capacity\"));\n    }\n\n    public String batteryVoltage() {\n        return faker.numerify(resolve(\"drone.battery_voltage\"));\n    }\n\n    public String batteryType() {\n        return resolve(\"drone.battery_type\");\n    }\n\n    public String batteryWeight() {\n        return faker.numerify(resolve(\"drone.battery_weight\"));\n    }\n\n    public String chargingTemperature() {\n        return faker.numerify(resolve(\"drone.charging_temperature\"));\n    }\n\n    public String maxChargingPower() {\n        return faker.numerify(resolve(\"drone.max_charging_power\"));\n    }\n\n    public String iso() {\n        return resolve(\"drone.iso\");\n    }\n\n    public String maxResolution() {\n        return faker.numerify(resolve(\"drone.max_resolution\"));\n    }\n\n    public String photoFormat() {\n        return resolve(\"drone.photo_format\");\n    }\n\n    public String videoFormat() {\n        return resolve(\"drone.video_format\");\n    }\n\n    public String maxShutterSpeed() {\n        return resolve(\"drone.max_shutter_speed\");\n    }\n\n    public String minShutterSpeed() {\n        return resolve(\"drone.min_shutter_speed\");\n    }\n\n    @Deterministic\n    public String shutterSpeedUnits() {\n        return resolve(\"drone.shutter_speed_units\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "name": "Commerce", "file_path": "src/main/java/net/datafaker/providers/base/Commerce.java", "superclasses": "", "methods": ["[]Commerce(BaseProviders)", "[String]department()", "[String]productName()", "[String]material()", "[String]brand()", "[String]vendor()", "[String]price()", "[String]price(double,double)", "[String]promotionCode()", "[String]promotionCode(int)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[]Commerce(BaseProviders)", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]department()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]productName()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]material()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]brand()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]vendor()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]price()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]price(double,double)", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]promotionCode()", "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]promotionCode(int)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Commerce extends AbstractProvider<BaseProviders> {\n    private final DecimalFormatSymbols decimalFormatSymbols;\n\n    protected Commerce(BaseProviders faker) {\n        super(faker);\n        decimalFormatSymbols = new DecimalFormatSymbols(faker.getContext().getLocale());\n    }\n\n    public String department() {\n        int numberOfDepartments = Math.max(faker.random().nextInt(4), 1);\n        SortedSet<String> departments = new TreeSet<>();\n        while (departments.size() < numberOfDepartments) {\n            departments.add(faker.resolve(\"commerce.department\"));\n        }\n        if (departments.size() > 1) {\n            String lastDepartment = departments.last();\n\n            return String.join(\", \", departments.headSet(lastDepartment)) + \" & \" + lastDepartment;\n        } else {\n            return departments.first();\n        }\n    }\n\n    public String productName() {\n        return String.join(\" \",\n            resolve(\"commerce.product_name.adjective\"),\n            resolve(\"commerce.product_name.material\"),\n            resolve(\"commerce.product_name.product\")\n        );\n    }\n\n    public String material() {\n        return resolve(\"commerce.product_name.material\");\n    }\n\n    public String brand() {\n        return resolve(\"commerce.brand\");\n    }\n\n    public String vendor() {\n        return resolve(\"commerce.vendor\");\n    }\n\n    /**\n     * Generate a random price between 0.00 and 100.00\n     */\n    public String price() {\n        return price(0, 100);\n    }\n\n    public String price(double min, double max) {\n        double price = min + (faker.random().nextDouble() * (max - min));\n        return new DecimalFormat(\"#0.00\", decimalFormatSymbols).format(price);\n    }\n\n    public String promotionCode() {\n        return promotionCode(6);\n    }\n\n    public String promotionCode(int digits) {\n        return String.join(faker.resolve(\"commerce.promotion_code.adjective\"),\n            resolve(\"commerce.promotion_code.noun\"),\n            faker.number().digits(digits));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final DecimalFormatSymbols decimalFormatSymbols;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "DecimalFormatSymbols", "name": "decimalFormatSymbols", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Australia.java.Australia", "name": "Australia", "file_path": "src/main/java/net/datafaker/providers/base/Australia.java", "superclasses": "", "methods": ["[]Australia(BaseProviders)", "[String]locations()", "[String]animals()", "[String]states()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Australia.java.Australia.[]Australia(BaseProviders)", "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[String]locations()", "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[String]animals()", "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[String]states()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.2.0\n", "original_string": "public class Australia extends AbstractProvider<BaseProviders> {\n\n    protected Australia(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String locations() {\n        return resolve(\"australia.locations\");\n    }\n\n    public String animals() {\n        return resolve(\"australia.animals\");\n    }\n\n    public String states() {\n        return resolve(\"australia.states\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "name": "Twitter", "file_path": "src/main/java/net/datafaker/providers/base/Twitter.java", "superclasses": "", "methods": ["[]Twitter(BaseProviders)", "[Date]createdTime(boolean,Date,Date)", "[String]twitterId(int)", "[String]text(String[],int,int)", "[String]userName()", "[String]userId()", "[String]getLink(String,int)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[]Twitter(BaseProviders)", "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[Date]createdTime(boolean,Date,Date)", "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]twitterId(int)", "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]text(String[],int,int)", "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]userName()", "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]userId()", "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]getLink(String,int)"], "overrides": null, "attributes": [], "class_docstring": "\nCreates fake Twitter messages.\n\n@since 0.9.0\n", "original_string": "public class Twitter extends AbstractProvider<BaseProviders> {\n    private static final Logger LOGGER = Logger.getLogger(Twitter.class.getName());\n    private static final DateTimeFormatter DATE_TIME_FORMATTER =\n        DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\").withZone(ZoneId.systemDefault());\n    private static final String BASIC_STRING = \"QabR0cYdZ1efSg2hi3jNOPkTUM4VLlmXK5nJo6WIpHGqF7rEs8tDuC9vwBxAyz\";\n\n    /**\n     * @param faker used as constructor\n     */\n    protected Twitter(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Used to fake a new Twitter Date.\n     *\n     * @param forward     to determined if the returned date is later (or before) the given date.\n     * @param base        the base date given as a start point.\n     * @param constraints used to constrain the returned date range.\n     * @return a new date later (or before) the base date with respect to the constraint (no later/earlier than the constraint).\n     * @deprecated better to use TimeAndDate for more flexibility\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public Date createdTime(boolean forward, Date base, Date constraints) {\n        final RandomService random = faker.random();\n        final long time = base.getTime();\n        if (forward) {\n            return new Date(time + (long) (random.nextDouble() * (constraints.getTime() - time)));\n        } else {\n            return new Date(time - (long) (random.nextDouble() * (time - constraints.getTime())));\n        }\n    }\n\n    /**\n     * Used to fake a new Twitter ID without collision using both current time and uuid as seeds.\n     *\n     * @param expectedLength the expected length of the twitter id. Should be greater or equals to 6 and\n     *                       less than or equals to 25.\n     * @return a new Twitter ID consists of purely numbers.\n     */\n    public String twitterId(int expectedLength) {\n        if (expectedLength <= 6 || expectedLength >= 25) {\n            LOGGER.warning(\"expectedLength <= 6 may easily cause twitter id collision. And expectedLength >= 25\" +\n                \" can be easily out of bound.\");\n        }\n        int hashCodeV = UUID.randomUUID().toString().hashCode();\n        if (hashCodeV < 0) {\n            hashCodeV = -hashCodeV;\n        }\n        String id1 = String.valueOf(hashCodeV);\n\n        String newDate = DATE_TIME_FORMATTER.format(Instant.now());\n        int capacity = Math.max(0, expectedLength - id1.length() - newDate.length());\n        StringBuilder result = new StringBuilder(capacity);\n        RandomService random = faker.random();\n        for (int i = 0; i < capacity; i++) {\n            result.append(random.nextInt(10));\n        }\n        result.append(newDate);\n\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        int j = 0;\n        while (i < id1.length() || j < result.length()) {\n            if (i < id1.length()) {\n                sb.append(id1.charAt(i++));\n            }\n            if (j < result.length()) {\n                sb.append(result.charAt(j++));\n            }\n        }\n        String id = sb.toString();\n        int start = random.nextInt(id.length() - expectedLength + 1);\n        id = id.substring(start, start + expectedLength);\n        return id;\n    }\n\n    /**\n     * To fake a new text context for the Twitter.\n     *\n     * @param keywords          the keywords that you wish to appear in the text.\n     * @param sentenceMaxLength the text should be in range of the sentence max length.\n     * @param wordMaxLength     each word should be in range of the word max length.\n     * @return a new fake text for the Twitter.\n     */\n    public String text(String[] keywords, int sentenceMaxLength, int wordMaxLength) {\n        if (wordMaxLength <= 2) {\n            LOGGER.warning(\"Word length less than 2 is dangerous. Exceptions can be raised.\");\n        }\n        ArrayList<String> text = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        RandomService random = faker.random();\n        int sentenceLength = random.nextInt(1, sentenceMaxLength);\n\n        for (int i = 0; i < sentenceLength; i++) {\n            int tmpWordLength = random.nextInt(3, wordMaxLength);\n            for (int j = 0; j < tmpWordLength; j++) {\n                sb.append(BASIC_STRING.charAt(random.nextInt(BASIC_STRING.length())));\n            }\n            text.add(sb.toString());\n            sb.setLength(0);\n        }\n        if (keywords != null) {\n            for (String keyword : keywords) {\n                int position = random.nextInt(text.size());\n                text.add(position, keyword);\n            }\n        }\n        return String.join(\" \", text);\n    }\n\n    /**\n     * @return Return a user name using the twitter.user_name.\n     */\n    public String userName() {\n        return resolve(\"twitter.user_name\");\n    }\n\n    /**\n     * @return Return a user id using the twitter.user_name.\n     */\n    public String userId() {\n        return resolve(\"twitter.user_id\");\n    }\n\n    /**\n     * return a fake link to a Twitter message. The extra length is expected to be larger than 4.\n     *\n     * @param username    the username will be used in the link.\n     * @param extraLength the expected length of the extra link part.\n     * @return return a fake link to a Twitter message.\n     */\n    public String getLink(String username, int extraLength) {\n        if (extraLength <= 4) {\n            LOGGER.warning(\"Extra length <=4 can cause collision.\");\n        }\n        RandomService random = faker.random();\n        final char[] res = new char[extraLength + 1];\n        res[0] = '/';\n        for (int i = 1; i < res.length; i++) {\n            res[i] = BASIC_STRING.charAt(random.nextInt(BASIC_STRING.length()));\n        }\n        return \"https://twitter.com/\" + username + String.valueOf(res);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Logger LOGGER = Logger.getLogger(Twitter.class.getName());", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "LOGGER = Logger.getLogger(Twitter.class.getName())", "syntax_pass": true}, {"attribute_expression": "private static final DateTimeFormatter DATE_TIME_FORMATTER =\n        DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\").withZone(ZoneId.systemDefault());", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateTimeFormatter", "name": "DATE_TIME_FORMATTER =\n        DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\").withZone(ZoneId.systemDefault())", "syntax_pass": true}, {"attribute_expression": "private static final String BASIC_STRING = \"QabR0cYdZ1efSg2hi3jNOPkTUM4VLlmXK5nJo6WIpHGqF7rEs8tDuC9vwBxAyz\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "BASIC_STRING = \"QabR0cYdZ1efSg2hi3jNOPkTUM4VLlmXK5nJo6WIpHGqF7rEs8tDuC9vwBxAyz\"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments", "name": "IndustrySegments", "file_path": "src/main/java/net/datafaker/providers/base/IndustrySegments.java", "superclasses": "", "methods": ["[]IndustrySegments(BaseProviders)", "[String]industry()", "[String]superSector()", "[String]sector()", "[String]subSector()"], "method_uris": ["src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[]IndustrySegments(BaseProviders)", "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]industry()", "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]superSector()", "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]sector()", "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]subSector()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class IndustrySegments extends AbstractProvider<BaseProviders> {\n\n    protected IndustrySegments(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String industry() {\n        return resolve(\"industry_segments.industry\");\n    }\n\n    public String superSector() {\n        return resolve(\"industry_segments.super_sector\");\n    }\n\n    public String sector() {\n        return resolve(\"industry_segments.sector\");\n    }\n\n    public String subSector() {\n        return resolve(\"industry_segments.sub_sector\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "name": "IdNumber", "file_path": "src/main/java/net/datafaker/providers/base/IdNumber.java", "superclasses": "", "methods": ["[]IdNumber(BaseProviders)", "[String]valid()", "[String]invalid()", "[PersonIdNumber]valid(IdNumberRequest)", "[Optional<IdNumberGenerator>]countryProvider()", "[String]country()", "[String]ssnValid()", "[String]validSvSeSsn()", "[String]invalidSvSeSsn()", "[String]validEnZaSsn()", "[String]inValidEnZaSsn()", "[String]singaporeanFin()", "[String]singaporeanFinBefore2000()", "[String]singaporeanUin()", "[String]singaporeanUinBefore2000()", "[String]validZhCNSsn()", "[String]validPtNif()", "[String]invalidPtNif()", "[String]validEsMXSsn()", "[String]invalidEsMXSsn()", "[String]peselNumber()", "[String]peselNumber(LocalDate,Gender)", "[String]validKoKrRrn()", "[String]validGeIDNumber()", "[T]provider(Class<T>)", "[T]create(Class<T>)"], "method_uris": ["src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[]IdNumber(BaseProviders)", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]valid()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalid()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[PersonIdNumber]valid(IdNumberRequest)", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[Optional<IdNumberGenerator>]countryProvider()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]country()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]ssnValid()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validSvSeSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalidSvSeSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validEnZaSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]inValidEnZaSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanFin()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanFinBefore2000()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanUin()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanUinBefore2000()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validZhCNSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validPtNif()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalidPtNif()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validEsMXSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalidEsMXSsn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]peselNumber()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]peselNumber(LocalDate,Gender)", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validKoKrRrn()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validGeIDNumber()", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[T]provider(Class<T>)", "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[T]create(Class<T>)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class IdNumber extends AbstractProvider<BaseProviders> {\n\n    private final Map<Class<? extends IdNumberGenerator>, IdNumberGenerator> providers = new ConcurrentHashMap<>();\n    private final Map<String, IdNumberGenerator> countryProviders = new ConcurrentHashMap<>();\n\n    protected IdNumber(BaseProviders faker) {\n        super(faker);\n        List<IdNumberGenerator> idNumbers = loadGenerators(IdNumberGenerator.class);\n        for (IdNumberGenerator idNumber : idNumbers) {\n            countryProviders.put(idNumber.countryCode(), idNumber);\n        }\n    }\n\n    public String valid() {\n        return countryProvider()\n            .map(p -> p.generateValid(faker))\n            .orElseGet(() -> faker.numerify(faker.resolve(\"id_number.valid\")));\n    }\n\n    public String invalid() {\n        return countryProvider()\n            .map(p -> p.generateInvalid(faker))\n            .orElseGet(() -> faker.numerify(faker.resolve(\"id_number.invalid\")));\n    }\n\n    public PersonIdNumber valid(IdNumberRequest request) {\n        return countryProvider()\n            .map(p -> p.generateValid(faker, request))\n            .orElseThrow(() -> new IllegalArgumentException(\"ID Number generation not supported for country '%s'\".formatted(country())));\n    }\n\n    public record IdNumberRequest(\n        int minAge,\n        int maxAge,\n        GenderRequest gender\n    ) {}\n\n    public enum GenderRequest {\n        FEMALE, MALE, ANY\n    }\n\n    private Optional<IdNumberGenerator> countryProvider() {\n        return Optional.ofNullable(countryProviders.get(country()));\n    }\n\n    private String country() {\n        return faker.getContext().getLocale().getCountry();\n    }\n\n    public String ssnValid() {\n        return provider(AmericanIdNumber.class).generateValid(faker);\n    }\n\n    /**\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker faker = new Faker(new Locale(\"sv\", \"SE\"));\n     *   String idNumber = faker.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validSvSeSsn() {\n        return provider(SwedenIdNumber.class).generateValid(faker);\n    }\n\n    @Deprecated\n    public String invalidSvSeSsn() {\n        return provider(SwedenIdNumber.class).generateInvalid(faker);\n    }\n\n    /**\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker faker = new Faker(new Locale(\"en\", \"ZA\"));\n     *   String idNumber = faker.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validEnZaSsn() {\n        return provider(SouthAfricanIdNumber.class).getValidSsn(faker);\n    }\n\n    @Deprecated\n    public String inValidEnZaSsn() {\n        return provider(SouthAfricanIdNumber.class).getInValidSsn(faker);\n    }\n\n    public String singaporeanFin() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.FOREIGNER_TWENTY_FIRST_CENTURY);\n    }\n\n    public String singaporeanFinBefore2000() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.FOREIGNER_TWENTIETH_CENTURY);\n    }\n\n    public String singaporeanUin() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.SINGAPOREAN_TWENTY_FIRST_CENTURY);\n    }\n\n    public String singaporeanUinBefore2000() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.SINGAPOREAN_TWENTIETH_CENTURY);\n    }\n\n    /**\n     * Generate a valid Chinese id number\n     *\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker faker = new Faker(new Locale(\"zh\", \"CN\"));\n     *   String idNumber = faker.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validZhCNSsn() {\n        return provider(ChineseIdNumber.class).generateValid(faker);\n    }\n\n    /**\n     * Generate a valid Chinese id number\n     *\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker faker = new Faker(new Locale(\"pt\", \"PT\"));\n     *   String idNumber = faker.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validPtNif() {\n        return provider(PortugueseIdNumber.class).generateValid(faker);\n    }\n\n    @Deprecated\n    public String invalidPtNif() {\n        return provider(PortugueseIdNumber.class).generateInvalid(faker);\n    }\n\n    /**\n     * @return A valid Mexican CURP\n     *\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker faker = new Faker(new Locale(\"es\", \"MX\"));\n     *   String idNumber = faker.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validEsMXSsn() {\n        return provider(MexicanIdNumber.class).get(faker);\n    }\n\n    /**\n     * @return An invalid Mexican CURP\n     *\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker faker = new Faker(new Locale(\"es\", \"MX\"));\n     *   String idNumber = faker.idNumber().invalid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String invalidEsMXSsn() {\n        return provider(MexicanIdNumber.class).generateInvalid(faker);\n    }\n\n    /**\n     * Generates a valid PESEL number for a person of random gender and age between\n     * 0 and 100.\n     *\n     * @return A valid PESEL number\n     */\n    public String peselNumber() {\n        return peselNumber(faker.timeAndDate().birthday(0, 100), Gender.ANY);\n    }\n\n    /**\n     * Generates a valid PESEL number for a person with given gender and birthdate.\n     *\n     * @param birthDate Given birthdate\n     * @param gender    Person's gender. Null value means {@link PolishIdNumber.Gender#ANY}\n     * @return A valid PESEL number\n     */\n    public String peselNumber(LocalDate birthDate, Gender gender) {\n        return new PolishIdNumber().get(faker, birthDate, gender);\n    }\n\n    /**\n     * Generates a valid RRN (Resident Registration Number) for a person of random binary gender and default random age\n     *\n     * @return A valid RRN\n     * @since 1.8.0\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker f = new Faker(new Locale(\"en\", \"KR\"));\n     *   String rrn = f.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validKoKrRrn() {\n        return provider(SouthKoreanIdNumber.class).getValidRrn(faker);\n    }\n\n    /**\n     * Generates valid ID number for Georgian citizens and Residents\n     *\n     * @deprecated Instead of calling this method directly, use faker with locale:\n     * <pre>\n     * {@code\n     *   Faker f = new Faker(new Locale(\"en\", \"GE\"));\n     *   String idNumber = f.idNumber().valid();\n     * }\n     * </pre>\n     */\n    @Deprecated\n    public String validGeIDNumber() {\n    \treturn faker.numerify(\"###########\");\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T extends IdNumberGenerator> T provider(Class<T> clazz) {\n        return (T) providers.computeIfAbsent(clazz, aClass -> create(clazz));\n    }\n\n    private <T extends IdNumberGenerator> T create(Class<T> clazz) {\n        try {\n            return clazz.getDeclaredConstructor().newInstance();\n        } catch (InstantiationException | NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n            throw new RuntimeException(\"Failed to instantiate class \" + clazz.getName(), e);\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Map<Class<? extends IdNumberGenerator>, IdNumberGenerator> providers = new ConcurrentHashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<Class<? extends IdNumberGenerator>, IdNumberGenerator>", "name": "providers = new ConcurrentHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final Map<String, IdNumberGenerator> countryProviders = new ConcurrentHashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, IdNumberGenerator>", "name": "countryProviders = new ConcurrentHashMap<>()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "name": "Hacker", "file_path": "src/main/java/net/datafaker/providers/base/Hacker.java", "superclasses": "", "methods": ["[]Hacker(BaseProviders)", "[String]abbreviation()", "[String]adjective()", "[String]noun()", "[String]verb()", "[String]ingverb()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[]Hacker(BaseProviders)", "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]abbreviation()", "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]adjective()", "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]noun()", "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]verb()", "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]ingverb()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Hacker extends AbstractProvider<BaseProviders> {\n\n    protected Hacker(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String abbreviation() {\n        return resolve(\"hacker.abbreviation\");\n    }\n\n    public String adjective() {\n        return resolve(\"hacker.adjective\");\n    }\n\n    public String noun() {\n        return resolve(\"hacker.noun\");\n    }\n\n    public String verb() {\n        return resolve(\"hacker.verb\");\n    }\n\n    public String ingverb() {\n        return resolve(\"hacker.ingverb\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "name": "Restaurant", "file_path": "src/main/java/net/datafaker/providers/base/Restaurant.java", "superclasses": "", "methods": ["[]Restaurant(BaseProviders)", "[String]namePrefix()", "[String]nameSuffix()", "[String]name()", "[String]type()", "[String]description()", "[String]review()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[]Restaurant(BaseProviders)", "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]namePrefix()", "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]nameSuffix()", "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]name()", "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]type()", "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]description()", "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]review()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.2.0\n", "original_string": "public class Restaurant extends AbstractProvider<BaseProviders> {\n\n    protected Restaurant(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String namePrefix() {\n        return faker.bothify(resolve(\"restaurant.name_prefix\"), true);\n    }\n\n    public String nameSuffix() {\n        return resolve(\"restaurant.name_suffix\");\n    }\n\n    public String name() {\n        return resolve(\"restaurant.name\");\n    }\n\n    public String type() {\n        return resolve(\"restaurant.type\");\n    }\n\n    public String description() {\n        return resolve(\"restaurant.description\");\n    }\n\n    public String review() {\n        return resolve(\"restaurant.review\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "name": "Kpop", "file_path": "src/main/java/net/datafaker/providers/base/Kpop.java", "superclasses": "", "methods": ["[]Kpop(BaseProviders)", "[String]iGroups()", "[String]iiGroups()", "[String]iiiGroups()", "[String]girlGroups()", "[String]boyBands()", "[String]solo()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[]Kpop(BaseProviders)", "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]iGroups()", "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]iiGroups()", "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]iiiGroups()", "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]girlGroups()", "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]boyBands()", "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]solo()"], "overrides": null, "attributes": [], "class_docstring": "\nK-pop, short for Korean popular music, is a genre of music originating in South Korea as part of South Korean culture.\n\n@since 1.3.0\n", "original_string": "public class Kpop extends AbstractProvider<BaseProviders> {\n\n    protected Kpop(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String iGroups() {\n        return resolve(\"kpop.i_groups\");\n    }\n\n    public String iiGroups() {\n        return resolve(\"kpop.ii_groups\");\n    }\n\n    public String iiiGroups() {\n        return resolve(\"kpop.iii_groups\");\n    }\n\n    public String girlGroups() {\n        return resolve(\"kpop.girl_groups\");\n    }\n\n    public String boyBands() {\n        return resolve(\"kpop.boy_bands\");\n    }\n\n    public String solo() {\n        return resolve(\"kpop.solo\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "name": "DungeonsAndDragons", "file_path": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "superclasses": "", "methods": ["[]DungeonsAndDragons(BaseProviders)", "[String]alignments()", "[String]backgrounds()", "[String]cities()", "[String]klasses()", "[String]languages()", "[String]meleeWeapons()", "[String]monsters()", "[String]races()", "[String]rangedWeapons()"], "method_uris": ["src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[]DungeonsAndDragons(BaseProviders)", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]alignments()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]backgrounds()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]cities()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]klasses()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]languages()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]meleeWeapons()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]monsters()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]races()", "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]rangedWeapons()"], "overrides": null, "attributes": [], "class_docstring": "\nDungeons and Dragons is a fantasy tabletop role-playing game originally designed by Gary Gygax and Dave Arneson.\n<p>\nThis faker is dedicated to Bart van Kuik, a lifelong DnD player, and lifelong friend.\n\n@since 1.7.0\n", "original_string": "public class DungeonsAndDragons extends AbstractProvider<BaseProviders> {\n\n    protected DungeonsAndDragons(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String alignments() {\n        return resolve(\"dnd.alignments\");\n    }\n\n    public String backgrounds() {\n        return resolve(\"dnd.backgrounds\");\n    }\n\n    public String cities() {\n        return resolve(\"dnd.cities\");\n    }\n\n    public String klasses() {\n        return resolve(\"dnd.klasses\");\n    }\n\n    public String languages() {\n        return resolve(\"dnd.languages\");\n    }\n\n    public String meleeWeapons() {\n        return resolve(\"dnd.melee_weapons\");\n    }\n\n    public String monsters() {\n        return resolve(\"dnd.monsters\");\n    }\n\n    public String races() {\n        return resolve(\"dnd.races\");\n    }\n\n    public String rangedWeapons() {\n        return resolve(\"dnd.ranged_weapons\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code", "name": "Code", "file_path": "src/main/java/net/datafaker/providers/base/Code.java", "superclasses": "", "methods": ["[]Code(BaseProviders)", "[String]isbnGs1()", "[String]isbnGroup()", "[String]isbnRegistrant()", "[String]isbn10()", "[String]isbn10(boolean)", "[String]isbn13()", "[String]isbn13(boolean)", "[int]isbn10CheckDigit(CharSequence)", "[int]isbn13CheckDigit(CharSequence)", "[String]stripIsbnSeparator(CharSequence)", "[String]asin()", "[String]imei()", "[String]ean8()", "[String]gtin8()", "[String]gtin13()", "[String]ean13()", "[String]gtin(String,int[])"], "method_uris": ["src/main/java/net/datafaker/providers/base/Code.java.Code.[]Code(BaseProviders)", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbnGs1()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbnGroup()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbnRegistrant()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn10()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn10(boolean)", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn13()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn13(boolean)", "src/main/java/net/datafaker/providers/base/Code.java.Code.[int]isbn10CheckDigit(CharSequence)", "src/main/java/net/datafaker/providers/base/Code.java.Code.[int]isbn13CheckDigit(CharSequence)", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]stripIsbnSeparator(CharSequence)", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]asin()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]imei()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]ean8()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]gtin8()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]gtin13()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]ean13()", "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]gtin(String,int[])"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates codes such as ISBN, gin, ean and others.\n<p>\nFor ISBN Rules, see <a href=\"https://en.wikipedia.org/wiki/International_Standard_Book_Number\">https://en.wikipedia.org/wiki/International_Standard_Book_Number</a>.\n\n@since 0.8.0\n", "original_string": "public class Code extends AbstractProvider<BaseProviders> {\n\n    private static final int[] GTIN_8_CHECK_DIGITS = {3, 1, 3, 1, 3, 1, 3};\n    private static final int[] GTIN_13_CHECK_DIGITS = {1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3};\n    private static final String[] REPORTING_BODY_IDENTIFIERS\n        = {\"01\", \"10\", \"30\", \"33\", \"35\", \"44\", \"45\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"86\", \"91\", \"98\", \"99\"};\n\n    protected Code(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This can be overridden by specifying\n     * <code>\n     * code:\n     * isbn_gs1: \"some expression\"\n     * </code>\n     * in the appropriate yml file.\n     *\n     * @return a GS1 code for an ISBN13, currently is only 978 and 979\n     */\n    public String isbnGs1() {\n        return faker.options().option(\"978\", \"979\");\n    }\n\n    /**\n     * This can be overridden by specifying\n     * <code>\n     * code:\n     * isbn_group: \"some expression\"\n     * </code>\n     * in the appropriate yml file.\n     *\n     * @return an ISBN group number\n     */\n    public String isbnGroup() {\n        return faker.options().option(\"0\", \"1\");\n    }\n\n    /**\n     * This can be overridden by specifying\n     * <code>\n     * code:\n     * isbn_registrant: \"some expression\"\n     * </code>\n     * in the appropriate yml file.\n     *\n     * @return an ISBN registrant 'element' with separator\n     */\n    public String isbnRegistrant() {\n        int ct = faker.random().nextInt(6) + 1;\n        return switch (ct) {\n            case 6 -> faker.number().numberBetween(0, 1) + faker.number().digit() + \"-\" + faker.number().digits(6);\n            case 5 -> faker.number().numberBetween(200, 699) + \"-\" + faker.number().digits(5);\n            case 4 -> faker.number().numberBetween(7000, 8499) + \"-\" + faker.number().digits(4);\n            case 3 -> faker.number().numberBetween(85000, 89999) + \"-\" + faker.number().digits(3);\n            case 2 -> faker.number().numberBetween(900000, 949999) + \"-\" + faker.number().digits(2);\n            case 1 -> faker.number().numberBetween(9500000, 9999999) + \"-\" + faker.number().digits(1);\n            default -> throw new IllegalStateException(\"Invalid random \" + ct);\n        };\n    }\n\n    /**\n     * @return a valid ISBN10 number with no separators (ex. 9604250590)\n     */\n    public String isbn10() {\n        return isbn10(false);\n    }\n\n    /**\n     * @param separator true if you want separators returned, false otherwise\n     * @return a valid ISBN10 number with or without separators (ex. 9604250590, 960-425-059-0)\n     */\n    public String isbn10(boolean separator) {\n        // The registration group identifier is a 1- to 5-digit number\n        final StringBuilder isbn10 = new StringBuilder()\n            .append(faker.expression(\"#{code.isbn_group}\"))\n            .append('-')\n            .append(faker.expression(\"#{code.isbn_registrant}\"))\n            .append('-');\n\n        final int checkDigit = isbn10CheckDigit(isbn10);\n        isbn10.append(checkDigit != 10 ? checkDigit : \"X\");\n        return separator ? isbn10.toString() : stripIsbnSeparator(isbn10);\n    }\n\n    /**\n     * @return a valid ISBN13 number with no separators (ex. 9789604250590)\n     */\n    public String isbn13() {\n        return isbn13(false);\n    }\n\n    /**\n     * @param separator true if you want separators returned, false otherwise\n     * @return a valid ISBN13 number with or without separators (ex. 9789604250590, 978-960-425-059-0)\n     */\n    public String isbn13(boolean separator) {\n        // The registration group identifier is a 1- to 5-digit number\n        final StringBuilder isbn13 = new StringBuilder()\n            .append(faker.expression(\"#{code.isbn_gs1}\"))\n            .append('-')\n            .append(faker.expression(\"#{code.isbn_group}\"))\n            .append('-')\n            .append(faker.expression(\"#{code.isbn_registrant}\"))\n            .append('-');\n\n        final int checkDigit = isbn13CheckDigit(isbn13);\n        isbn13.append(checkDigit);\n        return separator ? isbn13.toString() : stripIsbnSeparator(isbn13);\n    }\n\n    private int isbn10CheckDigit(CharSequence t) {\n        String value = stripIsbnSeparator(t);\n        int sum = 0;\n        for (int i = 0; i < value.length(); i++) {\n            sum += ((i + 1) * Integer.parseInt(value.substring(i, i + 1)));\n        }\n        return sum % 11;\n    }\n\n    private int isbn13CheckDigit(CharSequence t) {\n        String value = stripIsbnSeparator(t);\n        int sum = 0;\n        int multiplier;\n        for (int i = 0; i < value.length(); i++) {\n            multiplier = i % 2 == 0 ? 1 : 3;\n            sum += multiplier * Integer.parseInt(value.subSequence(i, i + 1).toString());\n        }\n\n        return (10 - sum % 10) % 10;\n    }\n\n    private String stripIsbnSeparator(CharSequence t) {\n        return t.toString().replace(\"-\", \"\");\n    }\n\n    public String asin() {\n        return resolve(\"code.asin\");\n    }\n\n    public String imei() {\n        char[] str = new char[15];\n        int len = str.length;\n\n        // Fill in the first two values of the string based with the specified prefix.\n        String arr = faker.options().option(REPORTING_BODY_IDENTIFIERS);\n        str[0] = arr.charAt(0);\n        str[1] = arr.charAt(1);\n\n        // Fill all the remaining numbers except for the last one with random values.\n        for (int i = 2; i < len - 1; i++) {\n            str[i] = Character.forDigit(faker.number().numberBetween(0, 9), 10);\n        }\n\n        // Calculate the Luhn checksum of the values thus far\n        int lenOffset = (len + 1) % 2;\n        int sum = 0;\n        for (int i = 0; i < len - 1; i++) {\n            if ((i + lenOffset) % 2 != 0) {\n                int t = Character.getNumericValue(str[i]) << 1;\n\n                if (t > 9) {\n                    t -= 9;\n                }\n\n                sum += t;\n            } else {\n                sum += Character.getNumericValue(str[i]);\n            }\n        }\n\n        // Choose the last digit so that it causes the entire string to pass the checksum.\n        str[len - 1] = Character.forDigit(((10 - (sum % 10)) % 10), 10);\n\n        return new String(str);\n    }\n\n    public String ean8() {\n        return gtin8();\n    }\n\n    public String gtin8() {\n        return gtin(\"\\\\d{7}\", GTIN_8_CHECK_DIGITS);\n    }\n\n    public String gtin13() {\n        return gtin(\"\\\\d{12}\", GTIN_13_CHECK_DIGITS);\n    }\n\n    public String ean13() {\n        return gtin13();\n    }\n\n    private String gtin(String regex, int[] checkDigits) {\n        List<Character> values = faker.regexify(regex)\n            .chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.toList());\n\n        int sum = 0;\n        for (int i = 0; i < values.size(); i++) {\n            sum += Character.getNumericValue(values.get(i)) * checkDigits[i];\n        }\n        int checkDigit = 10 - sum % 10;\n        if (checkDigit == 10) {\n            values.add(Character.forDigit(0, 10));\n        } else {\n            values.add(Character.forDigit(checkDigit, 10));\n        }\n\n        return values.stream()\n            .map(String::valueOf)\n            .collect(Collectors.joining());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int[] GTIN_8_CHECK_DIGITS = {3, 1, 3, 1, 3, 1, 3};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "GTIN_8_CHECK_DIGITS = {3, 1, 3, 1, 3, 1, 3}", "syntax_pass": true}, {"attribute_expression": "private static final int[] GTIN_13_CHECK_DIGITS = {1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "GTIN_13_CHECK_DIGITS = {1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3}", "syntax_pass": true}, {"attribute_expression": "private static final String[] REPORTING_BODY_IDENTIFIERS\n        = {\"01\", \"10\", \"30\", \"33\", \"35\", \"44\", \"45\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"86\", \"91\", \"98\", \"99\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "REPORTING_BODY_IDENTIFIERS\n        = {\"01\", \"10\", \"30\", \"33\", \"35\", \"44\", \"45\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"86\", \"91\", \"98\", \"99\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "name": "Medical", "file_path": "src/main/java/net/datafaker/providers/base/Medical.java", "superclasses": "", "methods": ["[]Medical(BaseProviders)", "[String]medicineName()", "[String]diseaseName()", "[String]hospitalName()", "[String]symptoms()", "[String]diagnosisCode()", "[String]procedureCode()", "[String]medicalProfession()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Medical.java.Medical.[]Medical(BaseProviders)", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]medicineName()", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]diseaseName()", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]hospitalName()", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]symptoms()", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]diagnosisCode()", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]procedureCode()", "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]medicalProfession()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n@deprecated since 2.3.0. This faker is deprecated due to migration\nto healthcare-specific aggregated into {@link net.datafaker.providers.healthcare.HealthcareFaker} fakers with similar methods.\n", "original_string": "@Deprecated(since = \"2.3.0\", forRemoval = true)\npublic class Medical extends AbstractProvider<BaseProviders> {\n\n    protected Medical(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Medication#drugName()} instead.\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String medicineName() {\n        return resolve(\"medical.medicine_name\");\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Disease#anyDisease()} instead.\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String diseaseName() {\n        return resolve(\"medical.disease_name\");\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.CareProvider#hospitalName()} instead.\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String hospitalName() {\n        return resolve(\"medical.hospital_name\");\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Observation#symptom()} instead\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String symptoms() {\n        return resolve(\"medical.symptoms\");\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Disease#icd10()} instead.\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String diagnosisCode() {\n        String regex = resolve(\"medical.diagnosis_code.icd10\");\n        return faker.regexify(regex);\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.MedicalProcedure#icd10()} instead.\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String procedureCode() {\n        String regex = resolve(\"medical.procedure_code.icd10\");\n        return faker.regexify(regex);\n    }\n\n    /**\n     * @deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.CareProvider#medicalProfession()} instead.\n     */\n    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String medicalProfession() {\n        return resolve(\"medical.medical_professions\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "name": "SlackEmoji", "file_path": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "superclasses": "", "methods": ["[]SlackEmoji(BaseProviders)", "[String]people()", "[String]nature()", "[String]foodAndDrink()", "[String]celebration()", "[String]activity()", "[String]travelAndPlaces()", "[String]objectsAndSymbols()", "[String]custom()", "[String]emoji()"], "method_uris": ["src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[]SlackEmoji(BaseProviders)", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]people()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]nature()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]foodAndDrink()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]celebration()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]activity()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]travelAndPlaces()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]objectsAndSymbols()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]custom()", "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]emoji()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class SlackEmoji extends AbstractProvider<BaseProviders> {\n\n    protected SlackEmoji(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String people() {\n        return resolve(\"slack_emoji.people\");\n    }\n\n    public String nature() {\n        return resolve(\"slack_emoji.nature\");\n    }\n\n    public String foodAndDrink() {\n        return resolve(\"slack_emoji.food_and_drink\");\n    }\n\n    public String celebration() {\n        return resolve(\"slack_emoji.celebration\");\n    }\n\n    public String activity() {\n        return resolve(\"slack_emoji.activity\");\n    }\n\n    public String travelAndPlaces() {\n        return resolve(\"slack_emoji.travel_and_places\");\n    }\n\n    public String objectsAndSymbols() {\n        return resolve(\"slack_emoji.objects_and_symbols\");\n    }\n\n    public String custom() {\n        return resolve(\"slack_emoji.custom\");\n    }\n\n    public String emoji() {\n        return resolve(\"slack_emoji.emoji\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "name": "Vehicle", "file_path": "src/main/java/net/datafaker/providers/base/Vehicle.java", "superclasses": "", "methods": ["[]Vehicle(BaseProviders)", "[String]vin()", "[String]manufacturer()", "[String]make()", "[String]model()", "[String]model(String)", "[String]makeAndModel()", "[String]style()", "[String]color()", "[String]upholsteryColor()", "[String]upholsteryFabric()", "[String]upholstery()", "[String]transmission()", "[String]driveType()", "[String]fuelType()", "[String]carType()", "[String]engine()", "[List<String>]carOptions()", "[List<String>]carOptions(int,int)", "[List<String>]standardSpecs()", "[List<String>]standardSpecs(int,int)", "[String]doors()", "[String]licensePlate()", "[String]licensePlate(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[]Vehicle(BaseProviders)", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]vin()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]manufacturer()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]make()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]model()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]model(String)", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]makeAndModel()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]style()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]color()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]upholsteryColor()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]upholsteryFabric()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]upholstery()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]transmission()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]driveType()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]fuelType()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]carType()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]engine()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]carOptions()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]carOptions(int,int)", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]standardSpecs()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]standardSpecs(int,int)", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]doors()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]licensePlate()", "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]licensePlate(String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Vehicle extends AbstractProvider<BaseProviders> {\n\n    static final String VIN_REGEX = \"([A-HJ-NPR-Z0-9]){3}[A-HJ-NPR-Z0-9]{5}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-0]{1}[A-HJ-NPR-Z0-9]{1}\\\\d{5}\";\n\n    public Vehicle(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String vin() {\n        return faker.regexify(VIN_REGEX);\n    }\n\n    public String manufacturer() {\n        return resolve(\"vehicle.manufacture\");\n    }\n\n    public String make() {\n        return resolve(\"vehicle.makes\");\n    }\n\n    public String model() {\n        return model(make());\n    }\n\n    public String model(String make) {\n        return resolve(\"vehicle.models_by_make.\" + make);\n    }\n\n    public String makeAndModel() {\n        String make = make();\n        return make + \" \" + model(make);\n    }\n\n    public String style() {\n        return resolve(\"vehicle.styles\");\n    }\n\n    public String color() {\n        return resolve(\"vehicle.colors\");\n    }\n\n    public String upholsteryColor() {\n        return resolve(\"vehicle.upholstery_colors\");\n    }\n\n    public String upholsteryFabric() {\n        return resolve(\"vehicle.upholstery_fabrics\");\n    }\n\n    public String upholstery() {\n        return resolve(\"vehicle.upholsteries\");\n    }\n\n    public String transmission() {\n        return resolve(\"vehicle.transmissions\");\n    }\n\n    public String driveType() {\n        return resolve(\"vehicle.drive_types\");\n    }\n\n    public String fuelType() {\n        return resolve(\"vehicle.fuel_types\");\n    }\n\n    public String carType() {\n        return resolve(\"vehicle.car_types\");\n    }\n\n    public String engine() {\n        return resolve(\"vehicle.engine_sizes\")\n            + \" \"\n            + resolve(\"vehicle.cylinder_engine\");\n    }\n\n    public List<String> carOptions() {\n        return carOptions(5, 10);\n    }\n\n    public List<String> carOptions(int min, int max) {\n        int optionSize = faker.number().numberBetween(min, max);\n        List<String> arr = new ArrayList<>(optionSize);\n        while (optionSize > 0) {\n            arr.add(faker.resolve(\"vehicle.car_options\"));\n            optionSize -= 1;\n        }\n        return arr;\n    }\n\n    public List<String> standardSpecs() {\n        return standardSpecs(5, 10);\n    }\n\n    public List<String> standardSpecs(int min, int max) {\n        int standardSpecsSize = faker.number().numberBetween(min, max);\n        List<String> arr = new ArrayList<>(standardSpecsSize);\n        while (standardSpecsSize > 0) {\n            arr.add(faker.resolve(\"vehicle.standard_specs\"));\n            standardSpecsSize -= 1;\n        }\n        return arr;\n    }\n\n    public String doors() {\n        return resolve(\"vehicle.doors\");\n    }\n\n    public String licensePlate() {\n        return faker.bothify(faker.resolve(\"vehicle.license_plate\"));\n    }\n\n    public String licensePlate(String stateAbbreviation) {\n\n        if (\"\".equals(stateAbbreviation)) {\n            return null;\n        }\n\n        String licensePlatesByState = resolve(\"vehicle.license_plate_by_state.\" + stateAbbreviation);\n        return licensePlatesByState == null ? null : faker.bothify(licensePlatesByState).toUpperCase(Locale.ROOT);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "static final String VIN_REGEX = \"([A-HJ-NPR-Z0-9]){3}[A-HJ-NPR-Z0-9]{5}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-0]{1}[A-HJ-NPR-Z0-9]{1}\\\\d{5}\";", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "String", "name": "VIN_REGEX = \"([A-HJ-NPR-Z0-9]){3}[A-HJ-NPR-Z0-9]{5}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-0]{1}[A-HJ-NPR-Z0-9]{1}\\\\d{5}\"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet", "name": "NatoPhoneticAlphabet", "file_path": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java", "superclasses": "", "methods": ["[]NatoPhoneticAlphabet(BaseProviders)", "[String]codeWord()"], "method_uris": ["src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet.[]NatoPhoneticAlphabet(BaseProviders)", "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet.[String]codeWord()"], "overrides": null, "attributes": [], "class_docstring": "\nThe NATO phonetic alphabet is the most widely used radiotelephone spelling alphabet.\n\n@since 1.2.0\n", "original_string": "public class NatoPhoneticAlphabet extends AbstractProvider<BaseProviders> {\n\n    protected NatoPhoneticAlphabet(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String codeWord() {\n        return resolve(\"nato_phonetic_alphabet.code_word\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance", "name": "Appliance", "file_path": "src/main/java/net/datafaker/providers/base/Appliance.java", "superclasses": "", "methods": ["[]Appliance(BaseProviders)", "[String]brand()", "[String]equipment()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Appliance.java.Appliance.[]Appliance(BaseProviders)", "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance.[String]brand()", "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance.[String]equipment()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.0.0\n", "original_string": "public class Appliance extends AbstractProvider<BaseProviders> {\n\n    protected Appliance(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String brand() {\n        return resolve(\"appliance.brand\");\n    }\n\n    public String equipment() {\n        return resolve(\"appliance.equipment\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "name": "FakeDuration", "file_path": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "superclasses": "", "methods": ["[]FakeDuration(BaseProviders)", "[long]getNumberBetween(long)", "[Duration]atMostMinutes(long)", "[Duration]atMostHours(long)", "[Duration]atMostDays(long)", "[Duration]atMostSeconds(long)"], "method_uris": ["src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[]FakeDuration(BaseProviders)", "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[long]getNumberBetween(long)", "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostMinutes(long)", "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostHours(long)", "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostDays(long)", "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostSeconds(long)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class FakeDuration extends AbstractProvider<BaseProviders> {\n\n    protected FakeDuration(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Returns a random long between 0 and max inclusive\n     *\n     * @param max: upper bound of number range\n     * @return a random long between 0 and max inclusive\n     */\n    private long getNumberBetween(long max) {\n        return this.faker.random().nextLong(max + 1);  // nextLong max is exclusive\n    }\n\n    /**\n     * Returns a Duration object representing a random duration of minutes in the given range\n     *\n     * @param minutesMax: max number of minutes for Duration (inclusive)\n     * @return a Duration object representing a number of minutes in the given range\n     */\n    public Duration atMostMinutes(long minutesMax) {\n        return Duration.ofMinutes(getNumberBetween(minutesMax));\n    }\n\n    /**\n     * Returns a Duration object representing a random duration of hours in the given range\n     *\n     * @param hoursMax: max number of hours for Duration (inclusive)\n     * @return a Duration object representing a number of hours in the given range\n     */\n    public Duration atMostHours(long hoursMax) {\n        return Duration.ofHours(getNumberBetween(hoursMax));\n    }\n\n    /**\n     * Returns a Duration object representing a random duration of days in the given range\n     *\n     * @param daysMax: max number of days for Duration (inclusive)\n     * @return a Duration object representing a number of days in the given range\n     */\n    public Duration atMostDays(long daysMax) {\n        return Duration.ofDays(getNumberBetween(daysMax));\n    }\n\n    /**\n     * Returns a Duration object representing a random duration of seconds in the given range\n     *\n     * @param secondsMax: max number of seconds for Duration (inclusive)\n     * @return a Duration object representing a number of seconds in the given range\n     */\n    public Duration atMostSeconds(long secondsMax) {\n        return Duration.ofSeconds(getNumberBetween(secondsMax));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Matz.java.Matz", "name": "Matz", "file_path": "src/main/java/net/datafaker/providers/base/Matz.java", "superclasses": "", "methods": ["[]Matz(BaseProviders)", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Matz.java.Matz.[]Matz(BaseProviders)", "src/main/java/net/datafaker/providers/base/Matz.java.Matz.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Matz extends AbstractProvider<BaseProviders> {\n\n    protected Matz(final BaseProviders faker) {\n        super(faker);\n    }\n\n    public String quote() {\n        return resolve(\"matz.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense", "name": "DrivingLicense", "file_path": "src/main/java/net/datafaker/providers/base/DrivingLicense.java", "superclasses": "", "methods": ["[]DrivingLicense(BaseProviders)", "[String]drivingLicense(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense.[]DrivingLicense(BaseProviders)", "src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense.[String]drivingLicense(String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class DrivingLicense extends AbstractProvider<BaseProviders> {\n\n    protected DrivingLicense(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String drivingLicense(String stateAbbreviation) {\n        return faker.bothify(faker.resolve(\"driving_license.usa.\" + stateAbbreviation)).toUpperCase(Locale.ROOT);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Robin.java.Robin", "name": "Robin", "file_path": "src/main/java/net/datafaker/providers/base/Robin.java", "superclasses": "", "methods": ["[]Robin(BaseProviders)", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Robin.java.Robin.[]Robin(BaseProviders)", "src/main/java/net/datafaker/providers/base/Robin.java.Robin.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Robin extends AbstractProvider<BaseProviders> {\n\n    protected Robin(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String quote() {\n        return resolve(\"robin.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image", "name": "Image", "file_path": "src/main/java/net/datafaker/providers/base/Image.java", "superclasses": "", "methods": ["[]Image(BaseProviders)", "[String]base64BMP()", "[String]base64GIF()", "[String]base64JPG()", "[String]base64JPEG()", "[String]base64PNG()", "[String]base64SVG()", "[String]base64TIFF()", "[String]base64(Base64ImageRuleConfig)", "[String]generateBase64RasterImage(ImageType,int,int)", "[String]generateBase64VectorImage(ImageType,int,int)", "[Color]randomColor()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Image.java.Image.[]Image(BaseProviders)", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64BMP()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64GIF()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64JPG()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64JPEG()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64PNG()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64SVG()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64TIFF()", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64(Base64ImageRuleConfig)", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]generateBase64RasterImage(ImageType,int,int)", "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]generateBase64VectorImage(ImageType,int,int)", "src/main/java/net/datafaker/providers/base/Image.java.Image.[Color]randomColor()"], "overrides": null, "attributes": [{"original_string": "    public static class ImageBuilder {\n        private ImageType imageType = PNG;\n        private int width = DEFAULT_WIDTH;\n        private int height = DEFAULT_HEIGHT;\n\n        private ImageBuilder() {\n        }\n\n        public static ImageBuilder builder() {\n            return new ImageBuilder();\n        }\n\n        public Base64ImageRuleConfig build() {\n            return new Base64ImageRuleConfig(imageType, width, height);\n        }\n\n        public ImageBuilder type(ImageType imageType) {\n            if(imageType == null) {\n                throw new IllegalArgumentException(\"Type cannot be null\");\n            }\n\n            this.imageType = imageType;\n            return this;\n        }\n\n        public ImageBuilder width(int width) {\n            if (width <= 0) {\n                throw new IllegalArgumentException(\"Width must be greater than 0\");\n            }\n\n            this.width = width;\n            return this;\n        }\n\n        public ImageBuilder height(int height) {\n            if (height <= 0) {\n                throw new IllegalArgumentException(\"Height must be greater than 0\");\n            }\n\n            this.height = height;\n            return this;\n        }\n    }", "definition": "    public static class ImageBuilder", "class_docstring": "", "name": "ImageBuilder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private ImageType imageType = PNG;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ImageType", "name": "imageType = PNG", "syntax_pass": true}, {"attribute_expression": "private int width = DEFAULT_WIDTH;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "int", "name": "width = DEFAULT_WIDTH", "syntax_pass": true}, {"attribute_expression": "private int height = DEFAULT_HEIGHT;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "int", "name": "height = DEFAULT_HEIGHT", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        private ImageBuilder() {\n        }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "ImageBuilder", "params": [], "body": "                               {\n        }", "signature": "private ImageBuilder()"}, {"syntax_pass": true, "original_string": "        public static ImageBuilder builder() {\n            return new ImageBuilder();\n        }", "docstring": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ImageBuilder", "classes": []}, "name": "builder", "params": [], "body": "                                             {\n            return new ImageBuilder();\n        }", "signature": "public static ImageBuilder builder()"}, {"syntax_pass": true, "original_string": "        public Base64ImageRuleConfig build() {\n            return new Base64ImageRuleConfig(imageType, width, height);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Base64ImageRuleConfig", "classes": []}, "name": "build", "params": [], "body": "                                             {\n            return new Base64ImageRuleConfig(imageType, width, height);\n        }", "signature": "public Base64ImageRuleConfig build()"}, {"syntax_pass": true, "original_string": "        public ImageBuilder type(ImageType imageType) {\n            if(imageType == null) {\n                throw new IllegalArgumentException(\"Type cannot be null\");\n            }\n\n            this.imageType = imageType;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ImageBuilder", "classes": []}, "name": "type", "params": [{"name": "imageType", "type": "ImageType"}], "body": "                                                      {\n            if(imageType == null) {\n                throw new IllegalArgumentException(\"Type cannot be null\");\n            }\n\n            this.imageType = imageType;\n            return this;\n        }", "signature": "public ImageBuilder type(ImageType imageType)"}, {"syntax_pass": true, "original_string": "        public ImageBuilder width(int width) {\n            if (width <= 0) {\n                throw new IllegalArgumentException(\"Width must be greater than 0\");\n            }\n\n            this.width = width;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ImageBuilder", "classes": []}, "name": "width", "params": [{"name": "width", "type": "int"}], "body": "                                             {\n            if (width <= 0) {\n                throw new IllegalArgumentException(\"Width must be greater than 0\");\n            }\n\n            this.width = width;\n            return this;\n        }", "signature": "public ImageBuilder width(int width)"}, {"syntax_pass": true, "original_string": "        public ImageBuilder height(int height) {\n            if (height <= 0) {\n                throw new IllegalArgumentException(\"Height must be greater than 0\");\n            }\n\n            this.height = height;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ImageBuilder", "classes": []}, "name": "height", "params": [{"name": "height", "type": "int"}], "body": "                                               {\n            if (height <= 0) {\n                throw new IllegalArgumentException(\"Height must be greater than 0\");\n            }\n\n            this.height = height;\n            return this;\n        }", "signature": "public ImageBuilder height(int height)"}]}], "class_docstring": "\nGenerates base64 encoded raster and vector images.\n\n@since 2.3.0\n", "original_string": "public class Image extends AbstractProvider<BaseProviders> {\n\n    private static final int DEFAULT_WIDTH = 256;\n    private static final int DEFAULT_HEIGHT = 256;\n\n    public enum ImageType {\n        // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n        BMP(\"image/bmp\"),\n        GIF(\"image/gif\"),\n        JPEG(\"image/jpeg\"),\n        PNG(\"image/png\"),\n        SVG(\"image/svg+xml\"),\n        TIFF(\"image/tiff\");\n\n        private final String mimeType;\n\n        ImageType(String mimeType) {\n            this.mimeType = mimeType;\n        }\n\n        public String getMimeType() {\n            return mimeType;\n        }\n    }\n\n    protected Image(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String base64BMP() {\n        return base64(ImageBuilder.builder().type(BMP).build());\n    }\n\n    public String base64GIF() {\n        return base64(ImageBuilder.builder().type(GIF).build());\n    }\n\n    public String base64JPG() {\n        return base64JPEG();\n    }\n\n    public String base64JPEG() {\n        return base64(ImageBuilder.builder().type(JPEG).build());\n    }\n\n    public String base64PNG() {\n        return base64(ImageBuilder.builder().type(PNG).build());\n    }\n\n    public String base64SVG() {\n        return base64(ImageBuilder.builder().type(SVG).build());\n    }\n\n    public String base64TIFF() {\n        return generateBase64RasterImage(TIFF, DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    }\n\n    public String base64(Base64ImageRuleConfig config) {\n        if (config.imageType == SVG) {\n            return generateBase64VectorImage(config.imageType(), config.width(), config.height());\n        } else {\n            return generateBase64RasterImage(config.imageType(), config.width(), config.height());\n        }\n    }\n\n    public record Base64ImageRuleConfig(ImageType imageType, int width, int height) { }\n\n    public static class ImageBuilder {\n        private ImageType imageType = PNG;\n        private int width = DEFAULT_WIDTH;\n        private int height = DEFAULT_HEIGHT;\n\n        private ImageBuilder() {\n        }\n\n        public static ImageBuilder builder() {\n            return new ImageBuilder();\n        }\n\n        public Base64ImageRuleConfig build() {\n            return new Base64ImageRuleConfig(imageType, width, height);\n        }\n\n        public ImageBuilder type(ImageType imageType) {\n            if(imageType == null) {\n                throw new IllegalArgumentException(\"Type cannot be null\");\n            }\n\n            this.imageType = imageType;\n            return this;\n        }\n\n        public ImageBuilder width(int width) {\n            if (width <= 0) {\n                throw new IllegalArgumentException(\"Width must be greater than 0\");\n            }\n\n            this.width = width;\n            return this;\n        }\n\n        public ImageBuilder height(int height) {\n            if (height <= 0) {\n                throw new IllegalArgumentException(\"Height must be greater than 0\");\n            }\n\n            this.height = height;\n            return this;\n        }\n    }\n\n    private String generateBase64RasterImage(ImageType imageType, int width, int height) {\n        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics = bufferedImage.createGraphics();\n\n        int boxSize = Math.max(1, width / 8);\n\n        // Fill the image with white background\n        graphics.setColor(WHITE);\n        graphics.fillRect(0, 0, width, height);\n\n        // Draw random colored boxes\n        for (int y = 0; y < height; y += boxSize) {\n            for (int x = 0; x < width; x += boxSize) {\n                Color randomColor = randomColor();\n                graphics.setColor(randomColor);\n                graphics.fillRect(x, y, boxSize, boxSize);\n            }\n        }\n        graphics.dispose();\n\n        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n            ImageIO.write(bufferedImage, imageType.name(), baos);\n            byte[] imageBytes = baos.toByteArray();\n            return \"data:\" + imageType.mimeType + \";base64,\" + Base64.getEncoder().encodeToString(imageBytes);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate image %s of size %sx%s\".formatted(imageType, width, height), e);\n        }\n    }\n\n    private String generateBase64VectorImage(ImageType imageType, int width, int height) {\n        StringBuilder svg = new StringBuilder();\n        svg.append(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\").append(DEFAULT_WIDTH).append(\"\\\" height=\\\"\").append(DEFAULT_HEIGHT).append(\"\\\">\");\n\n        int boxSize = Math.max(1, width / 8);\n\n        for (int y = 0; y < height; y += boxSize) {\n            for (int x = 0; x < width; x += boxSize) {\n                Color randomColor = randomColor();\n                String color = String.format(\"#%02x%02x%02x\", randomColor.getRed(), randomColor.getGreen(), randomColor.getBlue());\n                svg.append(\"<rect x=\\\"\").append(x).append(\"\\\" y=\\\"\").append(y).append(\"\\\" width=\\\"\").append(boxSize).append(\"\\\" height=\\\"\").append(boxSize).append(\"\\\" fill=\\\"\").append(color).append(\"\\\"/>\");\n            }\n        }\n\n        svg.append(\"</svg>\");\n\n        String svgString = svg.toString();\n        String base64Svg = Base64.getEncoder().encodeToString(svgString.getBytes());\n        return \"data:\" + imageType.mimeType + \";base64,\" + base64Svg;\n    }\n\n    private Color randomColor() {\n        // Convert the bytes to unsigned integers (0-255) for RGB\n        byte[] randomBytes = faker.random().nextRandomBytes(3);\n        int red = randomBytes[0] & 0xFF;\n        int green = randomBytes[1] & 0xFF;\n        int blue = randomBytes[2] & 0xFF;\n        return new Color(red, green, blue);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int DEFAULT_WIDTH = 256;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_WIDTH = 256", "syntax_pass": true}, {"attribute_expression": "private static final int DEFAULT_HEIGHT = 256;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_HEIGHT = 256", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "name": "Dog", "file_path": "src/main/java/net/datafaker/providers/base/Dog.java", "superclasses": "", "methods": ["[]Dog(BaseProviders)", "[String]name()", "[String]breed()", "[String]sound()", "[String]memePhrase()", "[String]age()", "[String]coatLength()", "[String]gender()", "[String]size()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Dog.java.Dog.[]Dog(BaseProviders)", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]name()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]breed()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]sound()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]memePhrase()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]age()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]coatLength()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]gender()", "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]size()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Dog extends AbstractProvider<BaseProviders> {\n\n    protected Dog(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"creature.dog.name\");\n    }\n\n    public String breed() {\n        return resolve(\"creature.dog.breed\");\n    }\n\n    public String sound() {\n        return resolve(\"creature.dog.sound\");\n    }\n\n    public String memePhrase() {\n        return resolve(\"creature.dog.meme_phrase\");\n    }\n\n    public String age() {\n        return resolve(\"creature.dog.age\");\n    }\n\n    public String coatLength() {\n        return resolve(\"creature.dog.coat_length\");\n    }\n\n    public String gender() {\n        return resolve(\"creature.dog.gender\");\n    }\n\n    public String size() {\n        return resolve(\"creature.dog.size\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time", "name": "Time", "file_path": "src/main/java/net/datafaker/providers/base/Time.java", "superclasses": "", "methods": ["[]Time(BaseProviders)", "[long]future(int,ChronoUnit)", "[String]future(int,ChronoUnit,String)", "[long]future(int,int,ChronoUnit)", "[String]future(int,int,ChronoUnit,String)", "[long]past(int,ChronoUnit)", "[String]past(int,ChronoUnit,String)", "[long]past(int,int,ChronoUnit)", "[String]past(int,int,ChronoUnit,String)", "[long]between(LocalTime,LocalTime)", "[String]between(LocalTime,LocalTime,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Time.java.Time.[]Time(BaseProviders)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]future(int,ChronoUnit)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]future(int,ChronoUnit,String)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]future(int,int,ChronoUnit)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]future(int,int,ChronoUnit,String)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]past(int,ChronoUnit)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]past(int,ChronoUnit,String)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]past(int,int,ChronoUnit)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]past(int,int,ChronoUnit,String)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]between(LocalTime,LocalTime)", "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]between(LocalTime,LocalTime,String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.4.0\n", "original_string": "public class Time extends AbstractProvider<BaseProviders> {\n\n    protected Time(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generates a future time from now.\n     *\n     * @param atMost at most this amount of time ahead from now exclusive.\n     * @param unit   the time unit.\n     * @return a future time from now.\n     */\n    public long future(int atMost, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atMostTime = now.plus(atMost, unit).toNanoOfDay();\n        final long time = now.toNanoOfDay();\n        return faker.number().numberBetween(time, atMostTime);\n    }\n\n    /**\n     * Generates and converts to string representation a future time from now.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param unit    the time unit.\n     * @param pattern time pattern to convert to string.\n     * @return a string representation of a future time from now.\n     */\n    public String future(int atMost, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(future(atMost, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    /**\n     * Generates a future time from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param minimum the minimum amount of time in the future from now.\n     * @param unit    the time unit.\n     * @return a future time from now, with a minimum time.\n     */\n    public long future(int atMost, int minimum, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atMostTime = now.plus(atMost, unit).toNanoOfDay();\n        final long time = now.plus(minimum, unit).toNanoOfDay();\n        return faker.number().numberBetween(time, atMostTime);\n    }\n\n    /**\n     * Generates and converts to string representation\n     * of a future time from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param minimum the minimum amount of time in the future from now.\n     * @param unit    the time unit.\n     * @param pattern time pattern to convert to string.\n     * @return a string representation of a future time from now, with a minimum time.\n     */\n    public String future(int atMost, int minimum, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(future(atMost, minimum, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    /**\n     * Generates a past time from now.\n     *\n     * @param atLeast at most this amount of time earlier from now exclusive.\n     * @param unit    the time unit.\n     * @return a past time from now.\n     */\n    public long past(int atLeast, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atLeastTime = now.minus(atLeast, unit).toNanoOfDay();\n        final long time = now.toNanoOfDay();\n        return faker.number().numberBetween(atLeastTime, time);\n    }\n\n    /**\n     * Generates a string representation of a past time from now.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param unit    the time unit.\n     * @param pattern time pattern to convert to string.\n     * @return a string representation of a past time from now.\n     */\n    public String past(int atMost, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(past(atMost, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    /**\n     * Generates a past time from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param minimum the minimum amount of time in the past from now.\n     * @param unit    the time unit.\n     * @return a past time from now.\n     */\n    public long past(int atMost, int minimum, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atMostTime = now.minus(atMost, unit).toNanoOfDay();\n        final long time = now.minus(minimum, unit).toNanoOfDay();\n        return faker.number().numberBetween(atMostTime, time);\n    }\n\n    /**\n     * Generates and converts to string representation a past time from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param minimum the minimum amount of time in the past from now.\n     * @param unit    the time unit.\n     * @param pattern time pattern to convert to string.\n     * @return a string representation of a past time from now, with a minimum time.\n     */\n    public String past(int atMost, int minimum, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(past(atMost, minimum, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    /**\n     * Generates a random time between two times.\n     *\n     * @param from the lower bound inclusive\n     * @param to   the upper bound exclusive\n     * @return a random time between {@code from} and {@code to}.\n     * @throws IllegalArgumentException if the {@code to} time represents an earlier time than {@code from} time.\n     */\n    public long between(LocalTime from, LocalTime to) throws IllegalArgumentException {\n        if (to.isBefore(from)) {\n            throw new IllegalArgumentException(\"Invalid time range: the upper bound time (%s) is before the lower bound (%s)\".formatted(to, from));\n        }\n\n        if (from.equals(to)) {\n            return from.toNanoOfDay();\n        }\n\n        return faker.number().numberBetween(from.toNanoOfDay(), to.toNanoOfDay());\n    }\n\n    /**\n     * Generates a string representation of a random time between two times.\n     *\n     * @param from    the lower bound inclusive\n     * @param to      the upper bound exclusive\n     * @param pattern time pattern to convert to string.\n     * @return a string representation of a random time between {@code from} and {@code to}.\n     * @throws IllegalArgumentException if the {@code to} time represents an earlier time than {@code from} time.\n     */\n    public String between(LocalTime from, LocalTime to, String pattern) throws IllegalArgumentException {\n        return LocalTime.ofNanoOfDay(between(from, to)).format(DateTimeFormatter.ofPattern(pattern));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel", "name": "LargeLanguageModel", "file_path": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java", "superclasses": "", "methods": ["[]LargeLanguageModel(BaseProviders)", "[String]textModel()", "[String]embeddingModel()", "[String]tokenizer()"], "method_uris": ["src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[]LargeLanguageModel(BaseProviders)", "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[String]textModel()", "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[String]embeddingModel()", "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[String]tokenizer()"], "overrides": null, "attributes": [], "class_docstring": "\nProviders related to Large Language Models (LLMs)\n\n@since 2.3.0\n", "original_string": "public class LargeLanguageModel extends AbstractProvider<BaseProviders> {\n\n    protected LargeLanguageModel(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String textModel() {\n        return resolve(\"largelanguagemodel.text_models\");\n    }\n\n    public String embeddingModel() {\n        return resolve(\"largelanguagemodel.embeddings\");\n    }\n\n    public String tokenizer() {\n        return resolve(\"largelanguagemodel.tokenizers\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Hololive.java.Hololive", "name": "Hololive", "file_path": "src/main/java/net/datafaker/providers/base/Hololive.java", "superclasses": "", "methods": ["[]Hololive(BaseProviders)", "[String]talent()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Hololive.java.Hololive.[]Hololive(BaseProviders)", "src/main/java/net/datafaker/providers/base/Hololive.java.Hololive.[String]talent()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Hololive extends AbstractProvider<BaseProviders> {\n\n    protected Hololive(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String talent() {\n        return resolve(\"hololive.talent\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "name": "Photography", "file_path": "src/main/java/net/datafaker/providers/base/Photography.java", "superclasses": "", "methods": ["[]Photography(BaseProviders)", "[String]term()", "[String]brand()", "[String]camera()", "[String]lens()", "[String]genre()", "[String]imageTag()", "[String]aperture()", "[String]shutter()", "[String]iso()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Photography.java.Photography.[]Photography(BaseProviders)", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]term()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]brand()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]camera()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]lens()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]genre()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]imageTag()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]aperture()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]shutter()", "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]iso()"], "overrides": null, "attributes": [], "class_docstring": "\nProvides photography related strings.\n\n@since 0.8.0\n", "original_string": "public class Photography extends AbstractProvider<BaseProviders> {\n\n    protected Photography(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return a photography term.\n     */\n    public String term() {\n        return resolve(\"photography.term\");\n    }\n\n    /**\n     * @return a photography brand.\n     */\n    public String brand() {\n        return resolve(\"photography.brand\");\n    }\n\n    /**\n     * @return a name of camera model/make.\n     */\n    public String camera() {\n        return resolve(\"photography.camera\");\n    }\n\n    /**\n     * @return some lens description like 500mm/8.\n     */\n    public String lens() {\n        return resolve(\"photography.lens\");\n    }\n\n    /**\n     * @return a photography genre.\n     */\n    public String genre() {\n        return resolve(\"photography.genre\");\n    }\n\n    /**\n     * @return some string to tag an image.\n     */\n    public String imageTag() {\n        return resolve(\"photography.imagetag\");\n    }\n\n    /**\n     * @return some aperture description like f/1.4 .\n     */\n    public String aperture() {\n        return resolve(\"photography.aperture\");\n    }\n\n    /**\n     * @return some shutter description like 1/25 .\n     */\n    public String shutter() {\n        return resolve(\"photography.shutter\");\n    }\n\n    /**\n     * @return some ISO value like 3200.\n     */\n    public String iso() {\n        return resolve(\"photography.iso\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "name": "Lorem", "file_path": "src/main/java/net/datafaker/providers/base/Lorem.java", "superclasses": "", "methods": ["[]Lorem(BaseProviders)", "[char]character()", "[char]character(boolean)", "[String]characters()", "[String]characters(boolean)", "[String]characters(int,int)", "[String]characters(int,int,boolean)", "[String]characters(int,int,boolean,boolean)", "[String]characters(int)", "[String]characters(int,boolean)", "[String]characters(int,int,boolean,boolean,boolean)", "[String]characters(int,boolean,boolean)", "[String]characters(int,boolean,boolean,boolean)", "[List<String>]words(int)", "[List<String>]words()", "[String]word()", "[String]supplemental()", "[String]sentence()", "[String]sentence(int)", "[String]sentence(int,int)", "[List<String>]sentences(int)", "[String]paragraph(int)", "[String]paragraph()", "[List<String>]paragraphs(int)", "[String]fixedString(int)", "[String]maxLengthSentence(int)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[]Lorem(BaseProviders)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[char]character()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[char]character(boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int,boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int,boolean,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,boolean,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]words(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]words()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]word()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]supplemental()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]sentence()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]sentence(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]sentence(int,int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]sentences(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]paragraph(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]paragraph()", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]paragraphs(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]fixedString(int)", "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]maxLengthSentence(int)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Lorem extends AbstractProvider<BaseProviders> {\n\n    protected Lorem(BaseProviders faker) {\n        super(faker);\n    }\n\n    public char character() {\n        return character(false);\n    }\n\n    public char character(boolean includeUppercase) {\n        return characters(includeUppercase ? 2 : 1, includeUppercase).charAt(0);\n    }\n\n    public String characters() {\n        return characters(255, false);\n    }\n\n    public String characters(boolean includeUppercase) {\n        return characters(255, includeUppercase);\n    }\n\n    public String characters(int minimumLength, int maximumLength) {\n        return characters(faker.random().nextInt(minimumLength, maximumLength), false);\n    }\n\n    public String characters(int minimumLength, int maximumLength, boolean includeUppercase) {\n        return characters(minimumLength, maximumLength, includeUppercase, false);\n    }\n\n    public String characters(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeDigit) {\n        return characters(minimumLength, maximumLength, includeUppercase, false, includeDigit);\n    }\n\n    public String characters(int fixedNumberOfCharacters) {\n        return characters(fixedNumberOfCharacters, false);\n    }\n\n    public String characters(int fixedNumberOfCharacters, boolean includeUppercase) {\n        return faker.internet().password(fixedNumberOfCharacters, fixedNumberOfCharacters, includeUppercase);\n    }\n\n    public String characters(int minimumLength, int maximumLength,\n                             boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        return faker.internet().password(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n    }\n\n    public String characters(int fixedNumberOfCharacters, boolean includeUppercase, boolean includeDigit) {\n        return characters(fixedNumberOfCharacters, includeUppercase, false, includeDigit);\n    }\n\n    public String characters(int fixedNumberOfCharacters,\n                             boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        return faker.internet().password(fixedNumberOfCharacters, fixedNumberOfCharacters, includeUppercase, includeSpecial, includeDigit);\n    }\n\n    public List<String> words(int num) {\n        List<String> returnList = new ArrayList<>();\n        for (int i = 0; i < num; i++) {\n            returnList.add(word());\n        }\n        return returnList;\n    }\n\n    public List<String> words() {\n        return words(3);\n    }\n\n    public String word() {\n        return resolve(\"lorem.words\");\n    }\n\n    public String supplemental() {\n        return resolve(\"lorem.supplemental\");\n    }\n\n    /**\n     * Create a sentence with a random number of words within the range 4..10.\n     *\n     * @return a random sentence\n     */\n    public String sentence() {\n        return sentence(3);\n    }\n\n    /**\n     * Create a sentence with a random number of words within the range (wordCount+1)..(wordCount+6).\n     *\n     * @return a random sentence\n     */\n    public String sentence(int wordCount) {\n        return sentence(wordCount, 6);\n    }\n\n    /**\n     * Create a sentence with a random number of words within the range (wordCount+1)..(wordCount+randomWordsToAdd).\n     * <p>\n     * Set {@code randomWordsToAdd} to 0 to generate sentences with a fixed number of words.\n     *\n     * @return a random sentence\n     */\n    public String sentence(int wordCount, int randomWordsToAdd) {\n        int numberOfWordsToAdd = randomWordsToAdd == 0 ? 0 : faker.random().nextInt(randomWordsToAdd);\n        final int totalWordCount = wordCount + numberOfWordsToAdd;\n        StringBuilder sb = new StringBuilder();\n        if (totalWordCount > 0) {\n            sb.append(WordUtils.capitalize(word()));\n        }\n        for (int i = 1; i < totalWordCount; i++) {\n            sb.append(\" \").append(word());\n        }\n        return sb.append(\".\").toString();\n    }\n\n    public List<String> sentences(int sentenceCount) {\n        List<String> sentences = new ArrayList<>(sentenceCount);\n        for (int i = 0; i < sentenceCount; i++) {\n            sentences.add(sentence());\n        }\n        return sentences;\n    }\n\n    /**\n     * Creates a paragraph with a range (sentenceCount)...(&lt;sentenceCount+3)\n     */\n    public String paragraph(int sentenceCount) {\n        return String.join(\" \", sentences(sentenceCount + faker.random().nextInt(3)));\n    }\n\n    public String paragraph() {\n        return paragraph(3);\n    }\n\n    public List<String> paragraphs(int paragraphCount) {\n        List<String> paragraphs = new ArrayList<>(paragraphCount);\n        for (int i = 0; i < paragraphCount; i++) {\n            paragraphs.add(paragraph());\n        }\n        return paragraphs;\n    }\n\n    /**\n     * Create a string with a fixed size. Can be useful for testing\n     * validator based on length string for example\n     *\n     * @param numberOfLetters size of the expected String\n     * @return a string with a fixed size\n     */\n    public String fixedString(int numberOfLetters) {\n        if (numberOfLetters <= 0) {\n            return \"\";\n        }\n\n        StringBuilder builder = new StringBuilder();\n        while (builder.length() < numberOfLetters) {\n            builder.append(sentence());\n        }\n        return builder.substring(0, numberOfLetters);\n    }\n\n    /**\n     * Create a Lorem Ipsum sentence with fixed length.\n     *\n     * @param fixedLength size of the expected Lorem Ipsum sentence.\n     * @return a string with a fixed size.\n     * Return empty string if input size is 0 or negative.\n     */\n    public String maxLengthSentence(final int fixedLength) {\n        if (fixedLength <= 0) {\n            return \"\";\n        }\n\n        String sentence = sentence(fixedLength);\n        final char space = ' ';\n        while (space == sentence.charAt(fixedLength - 1)) {\n            sentence = sentence(fixedLength);\n        }\n\n        return sentence.substring(0, fixedLength);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Business.java.Business", "name": "Business", "file_path": "src/main/java/net/datafaker/providers/base/Business.java", "superclasses": "", "methods": ["[]Business(BaseProviders)", "[String]creditCardNumber()", "[String]creditCardType()", "[String]creditCardExpiry()", "[String]securityCode()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Business.java.Business.[]Business(BaseProviders)", "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]creditCardNumber()", "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]creditCardType()", "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]creditCardExpiry()", "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]securityCode()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Business extends AbstractProvider<BaseProviders> {\n\n    protected Business(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String creditCardNumber() {\n        return faker.numerify(resolve(\"business.credit_card_numbers_format\"));\n    }\n\n    public String creditCardType() {\n        return resolve(\"business.credit_card_types\");\n    }\n\n    public String creditCardExpiry() {\n        return faker.date().future(365 * faker.number().numberBetween(1, 20), TimeUnit.DAYS, \"YYYY-MM-dd\");\n    }\n\n    public String securityCode() {\n        return faker.numerify(resolve(\"business.security_code\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/File.java.File", "name": "File", "file_path": "src/main/java/net/datafaker/providers/base/File.java", "superclasses": "", "methods": ["[]File(BaseProviders)", "[String]extension()", "[String]mimeType()", "[String]fileName()", "[String]fileName(String,String,String,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/File.java.File.[]File(BaseProviders)", "src/main/java/net/datafaker/providers/base/File.java.File.[String]extension()", "src/main/java/net/datafaker/providers/base/File.java.File.[String]mimeType()", "src/main/java/net/datafaker/providers/base/File.java.File.[String]fileName()", "src/main/java/net/datafaker/providers/base/File.java.File.[String]fileName(String,String,String,String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class File extends AbstractProvider<BaseProviders> {\n\n    protected File(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String extension() {\n        return resolve(\"file.extension\");\n    }\n\n    public String mimeType() {\n        return resolve(\"file.mime_type\");\n    }\n\n    public String fileName() {\n        return fileName(null, null, null, null);\n    }\n\n    public String fileName(String dirOrNull, String nameOrNull, String extensionOrNull, String separatorOrNull) {\n        final String sep = separatorOrNull == null ? System.getProperty(\"file.separator\") : separatorOrNull;\n        final String dir = dirOrNull == null ? faker.internet().slug() : dirOrNull;\n        final String name = nameOrNull == null ? faker.lorem().word().toLowerCase(faker.getContext().getLocale()) : nameOrNull;\n        final String ext = extensionOrNull == null ? extension() : extensionOrNull;\n        return dir + sep + name + \".\" + ext;\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "name": "Aviation", "file_path": "src/main/java/net/datafaker/providers/base/Aviation.java", "superclasses": "", "methods": ["[]Aviation(BaseProviders)", "[String]aircraft()", "[String]airplane()", "[String]warplane()", "[String]general()", "[String]cargo()", "[String]armyHelicopter()", "[String]civilHelicopter()", "[String]airport()", "[String]airportName()", "[String]METAR()", "[String]manufacturer()", "[String]specialTypeDesignator()", "[String]engineType()", "[String]flight(String)", "[String]flight()", "[String]flightStatus()", "[String]gate()", "[String]airline()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[]Aviation(BaseProviders)", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]aircraft()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airplane()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]warplane()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]general()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]cargo()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]armyHelicopter()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]civilHelicopter()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airport()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airportName()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]METAR()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]manufacturer()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]specialTypeDesignator()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]engineType()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]flight(String)", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]flight()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]flightStatus()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]gate()", "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airline()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates aviation related strings.\n\n@since 0.8.0\n", "original_string": "public class Aviation extends AbstractProvider<BaseProviders> {\n\n    protected Aviation(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return one of the 6 types of aircraft:\n     * airplane, warplane, general, cargo, army helicopter, civil helicopter.\n     */\n    public String aircraft() {\n        return resolve(List.of(\"aviation.aircraft.airplane\", \"aviation.aircraft.warplane\",\n            \"aviation.aircraft.army_helicopter\", \"aviation.aircraft.civil_helicopter\",\n            \"aviation.aircraft.general\", \"aviation.aircraft.cargo\")\n            .get(faker.number().numberBetween(0, 6)));\n    }\n\n    public String airplane() {\n        return resolve(\"aviation.aircraft.airplane\");\n    }\n\n    public String warplane() {\n        return resolve(\"aviation.aircraft.warplane\");\n    }\n\n    /**\n     * @return general aviation aircraft.\n     * See also: <a href=\"https://www.iaopa.eu/what-is-general-aviation\">...ICAO defines general aviation operation by exception: those flight activities not involving commercial air transportation or aerial work.</a>\n     */\n    public String general() {\n        return resolve(\"aviation.aircraft.general\");\n    }\n\n    /**\n     * @return a cargo aircraft which is dedicated to transport freight.\n     */\n    public String cargo() {\n        return resolve(\"aviation.aircraft.cargo\");\n    }\n\n    public String armyHelicopter() {\n        return resolve(\"aviation.aircraft.army_helicopter\");\n    }\n\n    public String civilHelicopter() {\n        return resolve(\"aviation.aircraft.civil_helicopter\");\n    }\n\n    /**\n     * Returns an airport ICAO code.\n     * See also: <a href=\"https://en.wikipedia.org/wiki/List_of_airports_by_ICAO_code:_A\">https://en.wikipedia.org/wiki/List_of_airports_by_ICAO_code:_A</a>\n     */\n    public String airport() {\n        return resolve(\"aviation.airport\");\n    }\n\n    /**\n     * @return an airport name. Source: <a href=\"http://www.flugzeuginfo.net/table_airportcodes_country-location_en.php\">http://www.flugzeuginfo.net/table_airportcodes_country-location_en.php</a>\n     */\n    public String airportName() {\n        return resolve(\"aviation.airport_name\");\n    }\n\n    /**\n     * Provides a METAR weather report.\n     * Have a look at <a href=\"https://en.wikipedia.org/wiki/METAR\">https://en.wikipedia.org/wiki/METAR</a>\n     */\n    public String METAR() {\n        return resolve(\"aviation.metar\");\n    }\n\n    /**\n     * Provides a name of an aviation-related manufacturer.\n     * Sources: <a href=\"https://www.icao.int/publications/DOC8643/Pages/Manufacturers.aspx\">ICAO publications</a>\n     * and <a href=\"https://www.aviationfanatic.com/ent_list.php?ent=3&pg=1\">aviationfanatic.com</a>\n     */\n    public String manufacturer() {\n        return resolve(\"aviation.manufacturer\");\n    }\n\n    /**\n     * Provides an aircraft special type designator.\n     * Source: <a href=\"https://www.icao.int/publications/DOC8643/Pages/SpecialDesignators.aspx\">ICAO publications</a>\n     */\n    public String specialTypeDesignator() {\n        return resolve(\"aviation.aircraft_type_special_designator\");\n    }\n\n    /**\n     * Provides engine type name.\n     * Source: <a href=\"https://www.icao.int/publications/DOC8643/Pages/Search.aspx\">ICAO publications</a>\n     */\n    public String engineType() {\n        return resolve(\"aviation.engine_type\");\n    }\n\n    /**\n     * Returns a flight number (IATA or ICAO format).\n     *\n     * @return A random flight number with IATA or ICAO format in a String.\n     */\n    public String flight(String type) {\n        String airline;\n        if (\"ICAO\".equalsIgnoreCase(type)) {\n            airline = resolve(\"aviation.ICAO_airline\");\n        } else {\n            airline = resolve(\"aviation.IATA_airline\");\n        }\n        int number = faker.number().numberBetween(0, 9999);\n        return airline + number;\n    }\n\n    /**\n     * Returns a flight number without specifying flight number format.\n     *\n     * @return A random flight number with IATA format in a String.\n     */\n    public String flight() {\n        return flight(\"IATA\");\n    }\n\n    /**\n     * Returns a flight status.\n     *\n     *  @return A randomly selected flight status in a String.\n     */\n    public String flightStatus() {\n        return resolve(\"aviation.flight_status\");\n    }\n\n    /**\n     * Returns a gate id.\n     *\n     *  @return A random airport gate id.\n     */\n    public String gate() {\n        var shouldBePureNumeric = faker.random().nextBoolean();\n\n        String gate;\n        if (shouldBePureNumeric) {\n            gate = String.valueOf(faker.number().numberBetween(1, 256));\n        } else {\n            gate = faker.regexify(\"[A-Z]\") + faker.number().numberBetween(1, 256);\n        }\n\n        return gate;\n    }\n\n    /**\n     * Returns an airline name.\n     *\n     * @return A randomly selected airline name in a String.\n     */\n    public String airline() {\n        return resolve(\"aviation.airline\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "name": "Superhero", "file_path": "src/main/java/net/datafaker/providers/base/Superhero.java", "superclasses": "", "methods": ["[]Superhero(BaseProviders)", "[String]name()", "[String]prefix()", "[String]suffix()", "[String]power()", "[String]descriptor()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[]Superhero(BaseProviders)", "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]name()", "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]prefix()", "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]suffix()", "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]power()", "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]descriptor()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Superhero extends AbstractProvider<BaseProviders> {\n\n    protected Superhero(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"superhero.name\");\n    }\n\n    public String prefix() {\n        return resolve(\"superhero.prefix\");\n    }\n\n    public String suffix() {\n        return resolve(\"superhero.suffix\");\n    }\n\n    public String power() {\n        return resolve(\"superhero.power\");\n    }\n\n    public String descriptor() {\n        return resolve(\"superhero.descriptor\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Team.java.Team", "name": "Team", "file_path": "src/main/java/net/datafaker/providers/base/Team.java", "superclasses": "", "methods": ["[]Team(BaseProviders)", "[String]name()", "[String]creature()", "[String]state()", "[String]sport()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Team.java.Team.[]Team(BaseProviders)", "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]name()", "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]creature()", "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]state()", "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]sport()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Team extends AbstractProvider<BaseProviders> {\n\n    protected Team(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"team.name\");\n    }\n\n    public String creature() {\n        return resolve(\"team.creature\");\n    }\n\n    public String state() {\n        return resolve(\"address.state\");\n    }\n\n    public String sport() {\n        return resolve(\"team.sport\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science", "name": "Science", "file_path": "src/main/java/net/datafaker/providers/base/Science.java", "superclasses": "", "methods": ["[]Science(BaseProviders)", "[String]element()", "[String]elementSymbol()", "[String]unit()", "[String]scientist()", "[String]tool()", "[String]quark()", "[String]leptons()", "[String]bosons()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Science.java.Science.[]Science(BaseProviders)", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]element()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]elementSymbol()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]unit()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]scientist()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]tool()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]quark()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]leptons()", "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]bosons()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Science extends AbstractProvider<BaseProviders> {\n\n    protected Science(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String element() {\n        return resolve(\"science.element\");\n    }\n\n    public String elementSymbol() {\n        return resolve(\"science.element_symbol\");\n    }\n\n    public String unit() {\n        return resolve(\"science.unit\");\n    }\n\n    public String scientist() {\n        return resolve(\"science.scientist\");\n    }\n\n    public String tool() {\n        return resolve(\"science.tool\");\n    }\n\n    public String quark() {\n        return resolve(\"science.particles.quarks\");\n    }\n\n    public String leptons() {\n        return resolve(\"science.particles.leptons\");\n    }\n\n    public String bosons() {\n        return resolve(\"science.particles.bosons\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "name": "Nation", "file_path": "src/main/java/net/datafaker/providers/base/Nation.java", "superclasses": "", "methods": ["[]Nation(BaseProviders)", "[String]nationality()", "[String]language()", "[String]capitalCity()", "[String]flag()", "[String]isoLanguage()", "[String]isoCountry()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Nation.java.Nation.[]Nation(BaseProviders)", "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]nationality()", "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]language()", "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]capitalCity()", "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]flag()", "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]isoLanguage()", "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]isoCountry()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Nation extends AbstractProvider<BaseProviders> {\n\n    private static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;\n\n    protected Nation(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String nationality() {\n        return resolve(\"nation.nationality\");\n    }\n\n    public String language() {\n        return resolve(\"nation.language\");\n    }\n\n    public String capitalCity() {\n        return resolve(\"nation.capital_city\");\n    }\n\n    public String flag() {\n        @SuppressWarnings(\"unchecked\")\n        List<Integer> flagInts = (List<Integer>) faker.fakeValuesService().fetch(\"nation.flag\", faker.getContext());\n\n        ByteBuffer byteBuffer = MappedByteBuffer.allocate(flagInts.size());\n\n        for (Integer flagInt : flagInts) {\n            byteBuffer.put(flagInt.byteValue());\n        }\n\n        return new String(byteBuffer.array(), UTF8_CHARSET);\n    }\n\n    public String isoLanguage() {\n        String[] isoLangs = Locale.getISOLanguages();\n        return isoLangs[faker.random().nextInt(isoLangs.length)];\n    }\n\n    public String isoCountry() {\n        String[] isoCountries = Locale.getISOCountries();\n        return isoCountries[faker.random().nextInt(isoCountries.length)];\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Charset UTF8_CHARSET = StandardCharsets.UTF_8;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Charset", "name": "UTF8_CHARSET = StandardCharsets.UTF_8", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher", "name": "GreekPhilosopher", "file_path": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java", "superclasses": "", "methods": ["[]GreekPhilosopher(BaseProviders)", "[String]name()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher.[]GreekPhilosopher(BaseProviders)", "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher.[String]name()", "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class GreekPhilosopher extends AbstractProvider<BaseProviders> {\n\n    protected GreekPhilosopher(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random greek philosopher's name.\n     *\n     * @return a string of greek philosopher's name.\n     */\n    public String name() {\n        return resolve(\"greek_philosophers.names\");\n    }\n\n    /**\n     * This method generates a random greek philosopher's quote.\n     *\n     * @return a string of greek philosopher's quote.\n     */\n    public String quote() {\n        return resolve(\"greek_philosophers.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text", "name": "Text", "file_path": "src/main/java/net/datafaker/providers/base/Text.java", "superclasses": "", "methods": ["[Character]character()", "[Character]uppercaseCharacter()", "[Character]lowercaseCharacter()", "[String]text()", "[String]text(boolean)", "[String]text(int)", "[String]text(int,int)", "[String]text(int,int,boolean)", "[String]text(int,int,boolean,boolean)", "[String]text(int,int,boolean,boolean,boolean)", "[]Text(BaseProviders)", "[String]text(TextRuleConfig)", "[String]textWithNotMoreThan256DiffSymbols(TextRuleConfig,byte[],int,int)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Text.java.Text.[Character]character()", "src/main/java/net/datafaker/providers/base/Text.java.Text.[Character]uppercaseCharacter()", "src/main/java/net/datafaker/providers/base/Text.java.Text.[Character]lowercaseCharacter()", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text()", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(boolean)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int,boolean)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int,boolean,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[]Text(BaseProviders)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(TextRuleConfig)", "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]textWithNotMoreThan256DiffSymbols(TextRuleConfig,byte[],int,int)"], "overrides": null, "attributes": [{"original_string": "    public static class TextRuleConfig {\n        private final char[][] textKeys;\n        private final int[] required;\n        private final int fixedNumberOfCharacters;\n\n        private final int numberOfRequiredSymbols;\n\n        private TextRuleConfig(int fixedNumberOfCharacters, Map<String, Integer> map, int numberOfRequiredSymbols) {\n            this.fixedNumberOfCharacters = fixedNumberOfCharacters;\n            this.numberOfRequiredSymbols = numberOfRequiredSymbols;\n            this.textKeys = new char[map.size()][];\n            this.required = new int[map.size()];\n            int i = 0;\n            for (Map.Entry<String, Integer> entry: map.entrySet()) {\n                textKeys[i] = entry.getKey().toCharArray();\n                required[i] = entry.getValue();\n                i++;\n            }\n        }\n\n        public int getFixedNumberOfCharacters() {\n            return fixedNumberOfCharacters;\n        }\n\n        public int getNumberOfRequiredSymbols() {\n            return numberOfRequiredSymbols;\n        }\n\n    }", "definition": "    public static class TextRuleConfig", "class_docstring": "", "name": "TextRuleConfig", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private final char[][] textKeys;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "char[][]", "name": "textKeys", "syntax_pass": true}, {"attribute_expression": "private final int[] required;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int[]", "name": "required", "syntax_pass": true}, {"attribute_expression": "private final int fixedNumberOfCharacters;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "fixedNumberOfCharacters", "syntax_pass": true}, {"attribute_expression": "private final int numberOfRequiredSymbols;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "numberOfRequiredSymbols", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        private TextRuleConfig(int fixedNumberOfCharacters, Map<String, Integer> map, int numberOfRequiredSymbols) {\n            this.fixedNumberOfCharacters = fixedNumberOfCharacters;\n            this.numberOfRequiredSymbols = numberOfRequiredSymbols;\n            this.textKeys = new char[map.size()][];\n            this.required = new int[map.size()];\n            int i = 0;\n            for (Map.Entry<String, Integer> entry: map.entrySet()) {\n                textKeys[i] = entry.getKey().toCharArray();\n                required[i] = entry.getValue();\n                i++;\n            }\n        }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "TextRuleConfig", "params": [{"name": "fixedNumberOfCharacters", "type": "int"}, {"name": "map", "type": "Map<String, Integer>"}, {"name": "numberOfRequiredSymbols", "type": "int"}], "body": "                                                                                                                   {\n            this.fixedNumberOfCharacters = fixedNumberOfCharacters;\n            this.numberOfRequiredSymbols = numberOfRequiredSymbols;\n            this.textKeys = new char[map.size()][];\n            this.required = new int[map.size()];\n            int i = 0;\n            for (Map.Entry<String, Integer> entry: map.entrySet()) {\n                textKeys[i] = entry.getKey().toCharArray();\n                required[i] = entry.getValue();\n                i++;\n            }\n        }", "signature": "private TextRuleConfig(int fixedNumberOfCharacters, Map<String, Integer> map, int numberOfRequiredSymbols)"}, {"syntax_pass": true, "original_string": "        public int getFixedNumberOfCharacters() {\n            return fixedNumberOfCharacters;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "name": "getFixedNumberOfCharacters", "params": [], "body": "                                                {\n            return fixedNumberOfCharacters;\n        }", "signature": "public int getFixedNumberOfCharacters()"}, {"syntax_pass": true, "original_string": "        public int getNumberOfRequiredSymbols() {\n            return numberOfRequiredSymbols;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "name": "getNumberOfRequiredSymbols", "params": [], "body": "                                                {\n            return numberOfRequiredSymbols;\n        }", "signature": "public int getNumberOfRequiredSymbols()"}]}, {"original_string": "    public static class TextSymbolsBuilder {\n        private int length;\n        private final Map<String, Integer> map = new HashMap<>();\n        private boolean throwIfLengthSmall = false;\n\n        private TextSymbolsBuilder() {\n        }\n\n        public static TextSymbolsBuilder builder() {\n            return new TextSymbolsBuilder();\n        }\n\n        public TextSymbolsBuilder with(String listOfSymbols, int times) {\n            if (times < 0) {\n                throw new IllegalArgumentException(\"times should be non-negative: \" + times);\n            }\n            map.put(listOfSymbols, times);\n            return this;\n        }\n\n        public TextSymbolsBuilder with(String listOfSymbols) {\n            return with(listOfSymbols, 0);\n        }\n\n        public TextSymbolsBuilder len(int len) {\n            this.length = len;\n            return this;\n        }\n\n        public TextSymbolsBuilder throwIfLengthSmall(boolean throwIfLengthSmall) {\n            this.throwIfLengthSmall = throwIfLengthSmall;\n            return this;\n        }\n\n        public TextRuleConfig build() {\n            int minSize = map.values().stream().filter(t -> t > 0).reduce(0, Integer::sum);\n            if (minSize > length && throwIfLengthSmall) {\n                throw new IllegalArgumentException(\"Min length (%s) should be not smaller than number of required characters (%s)\".formatted(length, minSize));\n            }\n            return new TextRuleConfig(length, map, minSize);\n        }\n    }", "definition": "    public static class TextSymbolsBuilder", "class_docstring": "", "name": "TextSymbolsBuilder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private int length;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "int", "name": "length", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Integer> map = new HashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Integer>", "name": "map = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "private boolean throwIfLengthSmall = false;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "throwIfLengthSmall = false", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        private TextSymbolsBuilder() {\n        }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "TextSymbolsBuilder", "params": [], "body": "                                     {\n        }", "signature": "private TextSymbolsBuilder()"}, {"syntax_pass": true, "original_string": "        public static TextSymbolsBuilder builder() {\n            return new TextSymbolsBuilder();\n        }", "docstring": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "TextSymbolsBuilder", "classes": []}, "name": "builder", "params": [], "body": "                                                   {\n            return new TextSymbolsBuilder();\n        }", "signature": "public static TextSymbolsBuilder builder()"}, {"syntax_pass": true, "original_string": "        public TextSymbolsBuilder with(String listOfSymbols, int times) {\n            if (times < 0) {\n                throw new IllegalArgumentException(\"times should be non-negative: \" + times);\n            }\n            map.put(listOfSymbols, times);\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "TextSymbolsBuilder", "classes": []}, "name": "with", "params": [{"name": "listOfSymbols", "type": "String"}, {"name": "times", "type": "int"}], "body": "                                                                        {\n            if (times < 0) {\n                throw new IllegalArgumentException(\"times should be non-negative: \" + times);\n            }\n            map.put(listOfSymbols, times);\n            return this;\n        }", "signature": "public TextSymbolsBuilder with(String listOfSymbols, int times)"}, {"syntax_pass": true, "original_string": "        public TextSymbolsBuilder with(String listOfSymbols) {\n            return with(listOfSymbols, 0);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "TextSymbolsBuilder", "classes": []}, "name": "with", "params": [{"name": "listOfSymbols", "type": "String"}], "body": "                                                             {\n            return with(listOfSymbols, 0);\n        }", "signature": "public TextSymbolsBuilder with(String listOfSymbols)"}, {"syntax_pass": true, "original_string": "        public TextSymbolsBuilder len(int len) {\n            this.length = len;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "TextSymbolsBuilder", "classes": []}, "name": "len", "params": [{"name": "len", "type": "int"}], "body": "                                               {\n            this.length = len;\n            return this;\n        }", "signature": "public TextSymbolsBuilder len(int len)"}, {"syntax_pass": true, "original_string": "        public TextSymbolsBuilder throwIfLengthSmall(boolean throwIfLengthSmall) {\n            this.throwIfLengthSmall = throwIfLengthSmall;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "TextSymbolsBuilder", "classes": []}, "name": "throwIfLengthSmall", "params": [{"name": "throwIfLengthSmall", "type": "boolean"}], "body": "                                                                                 {\n            this.throwIfLengthSmall = throwIfLengthSmall;\n            return this;\n        }", "signature": "public TextSymbolsBuilder throwIfLengthSmall(boolean throwIfLengthSmall)"}, {"syntax_pass": true, "original_string": "        public TextRuleConfig build() {\n            int minSize = map.values().stream().filter(t -> t > 0).reduce(0, Integer::sum);\n            if (minSize > length && throwIfLengthSmall) {\n                throw new IllegalArgumentException(\"Min length (%s) should be not smaller than number of required characters (%s)\".formatted(length, minSize));\n            }\n            return new TextRuleConfig(length, map, minSize);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "TextRuleConfig", "classes": []}, "name": "build", "params": [], "body": "                                      {\n            int minSize = map.values().stream().filter(t -> t > 0).reduce(0, Integer::sum);\n            if (minSize > length && throwIfLengthSmall) {\n                throw new IllegalArgumentException(\"Min length (%s) should be not smaller than number of required characters (%s)\".formatted(length, minSize));\n            }\n            return new TextRuleConfig(length, map, minSize);\n        }", "signature": "public TextRuleConfig build()"}]}], "class_docstring": "\nGenerates random text in a flexible way.\n\n@since 1.7.0\n", "original_string": "public class Text extends AbstractProvider<BaseProviders> {\n\n    private final Map<TextConfigPojo, TextRuleConfig> configMap = new WeakHashMap<>();\n\n    public Character character() {\n        return text(1, 1, true).charAt(0);\n    }\n\n    public Character uppercaseCharacter() {\n        return text(1, 1).toUpperCase(faker.getContext().getLocale()).charAt(0);\n    }\n\n    public Character lowercaseCharacter() {\n        return text(1, 1, false).charAt(0);\n    }\n\n    /**\n     * @return A lowercase string of 20 to 80 characters long.\n     */\n    public String text() {\n        return text(false);\n    }\n\n    /**\n     * @param includeDigit if digits should be included\n     * @return A lowercase string of 20 to 80 characters long.\n     */\n    public String text(boolean includeDigit) {\n        return text(20, 80, false, false, includeDigit);\n    }\n\n    /**\n     * @param length The length of the string to return\n     * @return A lowercase string of exact length\n     */\n    public String text(int length) {\n        return text(length, length, false);\n    }\n\n    /**\n     * @param minimumLength The minimum length (inclusive)\n     * @param maximumLength The maximum length (inclusive)\n     * @return A lowercase string between minimum and maximum length (inclusive)\n     */\n    public String text(int minimumLength, int maximumLength) {\n        return text(minimumLength, maximumLength, false);\n    }\n\n    public String text(int minimumLength, int maximumLength, boolean includeUppercase) {\n        return text(minimumLength, maximumLength, includeUppercase, false);\n    }\n\n    public String text(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial) {\n        return text(minimumLength, maximumLength, includeUppercase, includeSpecial, false);\n    }\n\n    public String text(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        final int len = faker.number().numberBetween(minimumLength, maximumLength + 1);\n        TextConfigPojo pojo = new TextConfigPojo(len, includeUppercase, includeSpecial, includeDigit);\n        Text.TextRuleConfig config = configMap.get(pojo);\n        if (config == null) {\n            TextSymbolsBuilder builder =\n                TextSymbolsBuilder.builder()\n                    .with(Text.EN_LOWERCASE);\n            if (includeUppercase) builder = builder.with(Text.EN_UPPERCASE, 1);\n            if (includeSpecial) builder = builder.with(Text.DEFAULT_SPECIAL, 1);\n            if (includeDigit) builder = builder.with(Text.DIGITS, 1);\n\n            config = builder.len(len).build();\n            configMap.putIfAbsent(pojo, config);\n        }\n\n\n        return faker.text().text(config);\n    }\n\n    public static final String EN_LOWERCASE = \"abcdefghijklmnopqrstuvwxyz\";\n    public static final String EN_UPPERCASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    public static final String DIGITS = \"0123456789\";\n    public static final String DEFAULT_SPECIAL = \"!@#$%^&*\";\n\n    public Text(BaseProviders faker) {\n        super(faker);\n    }\n\n    public static class TextRuleConfig {\n        private final char[][] textKeys;\n        private final int[] required;\n        private final int fixedNumberOfCharacters;\n\n        private final int numberOfRequiredSymbols;\n\n        private TextRuleConfig(int fixedNumberOfCharacters, Map<String, Integer> map, int numberOfRequiredSymbols) {\n            this.fixedNumberOfCharacters = fixedNumberOfCharacters;\n            this.numberOfRequiredSymbols = numberOfRequiredSymbols;\n            this.textKeys = new char[map.size()][];\n            this.required = new int[map.size()];\n            int i = 0;\n            for (Map.Entry<String, Integer> entry: map.entrySet()) {\n                textKeys[i] = entry.getKey().toCharArray();\n                required[i] = entry.getValue();\n                i++;\n            }\n        }\n\n        public int getFixedNumberOfCharacters() {\n            return fixedNumberOfCharacters;\n        }\n\n        public int getNumberOfRequiredSymbols() {\n            return numberOfRequiredSymbols;\n        }\n\n    }\n\n    public static class TextSymbolsBuilder {\n        private int length;\n        private final Map<String, Integer> map = new HashMap<>();\n        private boolean throwIfLengthSmall = false;\n\n        private TextSymbolsBuilder() {\n        }\n\n        public static TextSymbolsBuilder builder() {\n            return new TextSymbolsBuilder();\n        }\n\n        public TextSymbolsBuilder with(String listOfSymbols, int times) {\n            if (times < 0) {\n                throw new IllegalArgumentException(\"times should be non-negative: \" + times);\n            }\n            map.put(listOfSymbols, times);\n            return this;\n        }\n\n        public TextSymbolsBuilder with(String listOfSymbols) {\n            return with(listOfSymbols, 0);\n        }\n\n        public TextSymbolsBuilder len(int len) {\n            this.length = len;\n            return this;\n        }\n\n        public TextSymbolsBuilder throwIfLengthSmall(boolean throwIfLengthSmall) {\n            this.throwIfLengthSmall = throwIfLengthSmall;\n            return this;\n        }\n\n        public TextRuleConfig build() {\n            int minSize = map.values().stream().filter(t -> t > 0).reduce(0, Integer::sum);\n            if (minSize > length && throwIfLengthSmall) {\n                throw new IllegalArgumentException(\"Min length (%s) should be not smaller than number of required characters (%s)\".formatted(length, minSize));\n            }\n            return new TextRuleConfig(length, map, minSize);\n        }\n    }\n\n    /**\n     * Allows to configure custom expected rules. Example\n     * <pre>\n     * {@code\n     *     faker.text().text(Text.TextSymbolsBuilder.builder()\n     *                 .len(5)\n     *                 .with(EN_LOWERCASE, 1)\n     *                 .with(EN_UPPERCASE, 1)\n     *                 .with(DIGITS, 1);\n     * }\n     * </pre>\n     * This will generate a text with length 5 containing minimum 1 lower case and 1 upper case symbol\n     * from en locale and minimum 1 digit.\n     * Custom symbol sets are also possible\n     * <pre>\n     * {@code\n     *     final String ruLowerCase = \"\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\";\n     *     final String customSpecialSymbols = \"!@#$%^*;'][{}\";\n     *     final int ruCnt = 3;\n     *     final int specSmbCnt = 5;\n     *     final Text.TextRuleConfig config = Text.TextSymbolsBuilder.builder()\n     *         .len(faker.number().numberBetween(ruCnt + specSmbCnt, Math.max(ruCnt + specSmbCnt, 10)))\n     *         .with(ruLowerCase, ruCnt)\n     *         .with(customSpecialSymbols, specSmbCnt).build();\n     *     final String text = faker.text().text(config);\n     * }\n     * </pre>\n     * This will generate a string with length between 8 and 10.\n     * The string will contain min 3 lower case symbols\n     * from ru locale and minimum 5 symbols from the defined string var\n     * {@code final String customSpecialSymbols = \"!@#$%^*;'][{}\";}.\n     */\n    public String text(TextRuleConfig textRuleConfig) {\n        final int fixedNumberOfCharacters = textRuleConfig.getFixedNumberOfCharacters();\n        final int numberOfRequiredSymbols = textRuleConfig.getNumberOfRequiredSymbols();\n        if (fixedNumberOfCharacters < numberOfRequiredSymbols) {\n            return \"\";\n        }\n        char[] buffer = new char[fixedNumberOfCharacters];\n        int idx = 0;\n        int maxDiffSymbols = 0;\n        for (int i = 0; i < textRuleConfig.textKeys.length; i++) {\n            maxDiffSymbols += textRuleConfig.textKeys[i].length;\n        }\n        // 256 is a length of byte value range\n        if (maxDiffSymbols <= 256) {\n            return textWithNotMoreThan256DiffSymbols(\n                textRuleConfig, faker.random().nextRandomBytes(2 * fixedNumberOfCharacters),\n                fixedNumberOfCharacters, numberOfRequiredSymbols);\n        }\n        int numberOfRequired = 0;\n        int[] required = Arrays.copyOf(textRuleConfig.required, textRuleConfig.required.length);\n        while (idx < buffer.length) {\n            if (numberOfRequiredSymbols > numberOfRequired\n                && numberOfRequiredSymbols - numberOfRequired == buffer.length - idx) {\n                for (int j = 0; j < textRuleConfig.textKeys.length; j++) {\n                    while (required[j] > 0) {\n                        buffer[idx++] = textRuleConfig.textKeys[j][faker.random().nextInt(textRuleConfig.textKeys[j].length)];\n                        numberOfRequired++;\n                        required[j]--;\n                    }\n                    if (idx == buffer.length) break;\n                }\n            } else {\n                int index = faker.random().nextInt(required.length);\n                if (required[index] > 0) {\n                    numberOfRequired++;\n                    required[index]--;\n                }\n                buffer[idx++] = textRuleConfig.textKeys[index][faker.random().nextInt(textRuleConfig.textKeys[index].length)];\n            }\n        }\n        return String.valueOf(buffer);\n    }\n\n    private String textWithNotMoreThan256DiffSymbols(\n        TextRuleConfig textRuleConfig, byte[] bytes, int fixedNumberOfCharacters, int numberOfRequiredSymbols) {\n        char[] buffer = new char[fixedNumberOfCharacters];\n        int idx = 0;\n        int bytesCounter = 0;\n        int numberOfRequired = 0;\n        int[] required = Arrays.copyOf(textRuleConfig.required, textRuleConfig.required.length);\n        while (idx < buffer.length) {\n            if (numberOfRequiredSymbols > numberOfRequired\n                && numberOfRequiredSymbols - numberOfRequired == buffer.length - idx) {\n                for (int j = 0; j < textRuleConfig.textKeys.length; j++) {\n                    while (required[j] > 0) {\n                        buffer[idx++] = textRuleConfig.textKeys[j][((char) (bytes[bytesCounter++])) % textRuleConfig.textKeys[j].length];\n                        numberOfRequired++;\n                        required[j]--;\n                    }\n                    if (idx == buffer.length) break;\n                }\n            } else {\n                int index = ((char) (bytes[bytesCounter++])) % textRuleConfig.textKeys.length;\n                if (required[index] > 0) {\n                    numberOfRequired++;\n                    required[index]--;\n                }\n                buffer[idx++] = textRuleConfig.textKeys[index][((char) bytes[bytesCounter++]) % textRuleConfig.textKeys[index].length];\n            }\n        }\n        return String.valueOf(buffer);\n    }\n\n    private record TextConfigPojo(int length, boolean includeUppercase, boolean includeSpecial, boolean includeDigit) { }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Map<TextConfigPojo, TextRuleConfig> configMap = new WeakHashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<TextConfigPojo, TextRuleConfig>", "name": "configMap = new WeakHashMap<>()", "syntax_pass": true}, {"attribute_expression": "public static final String EN_LOWERCASE = \"abcdefghijklmnopqrstuvwxyz\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "EN_LOWERCASE = \"abcdefghijklmnopqrstuvwxyz\"", "syntax_pass": true}, {"attribute_expression": "public static final String EN_UPPERCASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "EN_UPPERCASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "syntax_pass": true}, {"attribute_expression": "public static final String DIGITS = \"0123456789\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "DIGITS = \"0123456789\"", "syntax_pass": true}, {"attribute_expression": "public static final String DEFAULT_SPECIAL = \"!@#$%^&*\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "DEFAULT_SPECIAL = \"!@#$%^&*\"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient", "name": "Ancient", "file_path": "src/main/java/net/datafaker/providers/base/Ancient.java", "superclasses": "", "methods": ["[]Ancient(BaseProviders)", "[String]god()", "[String]primordial()", "[String]titan()", "[String]hero()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[]Ancient(BaseProviders)", "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]god()", "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]primordial()", "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]titan()", "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]hero()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Ancient extends AbstractProvider<BaseProviders> {\n\n    protected Ancient(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String god() {\n        return resolve(\"ancient.god\");\n    }\n\n    public String primordial() {\n        return resolve(\"ancient.primordial\");\n    }\n\n    public String titan() {\n        return resolve(\"ancient.titan\");\n    }\n\n    public String hero() {\n        return resolve(\"ancient.hero\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "name": "Cosmere", "file_path": "src/main/java/net/datafaker/providers/base/Cosmere.java", "superclasses": "", "methods": ["[]Cosmere(BaseProviders)", "[String]aons()", "[String]shardWorlds()", "[String]shards()", "[String]surges()", "[String]knightsRadiant()", "[String]metals()", "[String]allomancers()", "[String]feruchemists()", "[String]heralds()", "[String]sprens()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[]Cosmere(BaseProviders)", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]aons()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]shardWorlds()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]shards()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]surges()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]knightsRadiant()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]metals()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]allomancers()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]feruchemists()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]heralds()", "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]sprens()"], "overrides": null, "attributes": [], "class_docstring": "\nThe cosmere is a fictional shared universe where several of Brandon Sanderson's books take place.\n\n@since 1.7.0\n", "original_string": "public class Cosmere extends AbstractProvider<BaseProviders> {\n\n    protected Cosmere(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String aons() {\n        return resolve(\"cosmere.aons\");\n    }\n\n    public String shardWorlds() {\n        return resolve(\"cosmere.shard_worlds\");\n    }\n\n    public String shards() {\n        return resolve(\"cosmere.shards\");\n    }\n\n    public String surges() {\n        return resolve(\"cosmere.surges\");\n    }\n\n    public String knightsRadiant() {\n        return resolve(\"cosmere.knights_radiant\");\n    }\n\n    public String metals() {\n        return resolve(\"cosmere.metals\");\n    }\n\n    public String allomancers() {\n        return resolve(\"cosmere.allomancers\");\n    }\n\n    public String feruchemists() {\n        return resolve(\"cosmere.feruchemists\");\n    }\n\n    public String heralds() {\n        return resolve(\"cosmere.heralds\");\n    }\n\n    public String sprens() {\n        return resolve(\"cosmere.sprens\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "name": "Finance", "file_path": "src/main/java/net/datafaker/providers/base/Finance.java", "superclasses": "", "methods": ["[]Finance(BaseProviders)", "[String]nasdaqTicker()", "[String]nyseTicker()", "[String]stockMarket()", "[Set<String>]ibanSupportedCountries()", "[String]creditCard(CreditCardType)", "[int]sumOfDigits(int)", "[String]creditCard()", "[String]bic()", "[String]iban()", "[String]iban(String)", "[String]usRoutingNumber()", "[CreditCardType]randomCreditCardType()", "[String]calculateIbanChecksum(String,String)", "[String]padLeftZeros(String,int)", "[Map<String, String>]createCountryCodeToBasicBankAccountNumberPatternMap()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Finance.java.Finance.[]Finance(BaseProviders)", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]nasdaqTicker()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]nyseTicker()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]stockMarket()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[Set<String>]ibanSupportedCountries()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]creditCard(CreditCardType)", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[int]sumOfDigits(int)", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]creditCard()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]bic()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]iban()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]iban(String)", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]usRoutingNumber()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[CreditCardType]randomCreditCardType()", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]calculateIbanChecksum(String,String)", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]padLeftZeros(String,int)", "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[Map<String, String>]createCountryCodeToBasicBankAccountNumberPatternMap()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Finance extends AbstractProvider<BaseProviders> {\n\n    public static final BigInteger A_CODE = BigInteger.valueOf(97L);\n\n    public enum CreditCardType {\n        VISA,\n        MASTERCARD,\n        DISCOVER,\n        AMERICAN_EXPRESS,\n        DINERS_CLUB,\n        JCB,\n        SWITCH,\n        SOLO,\n        DANKORT,\n        FORBRUGSFORENINGEN,\n        LASER\n    }\n\n    protected Finance(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Stock#nsdqSymbol} instead.\n     */\n    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String nasdaqTicker() {\n        return resolve(\"finance.ticker.nasdaq\");\n    }\n\n    /**\n     * @deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Stock#nyseSymbol} instead.\n     */\n    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String nyseTicker() {\n        return resolve(\"finance.ticker.nyse\");\n    }\n\n    /**\n     * @deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Stock#exchanges} instead.\n     */\n    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String stockMarket() {\n        return resolve(\"finance.stock_market\");\n    }\n\n    private static final Map<String, String> countryCodeToBasicBankAccountNumberPattern =\n        createCountryCodeToBasicBankAccountNumberPatternMap();\n\n    /** Get the set of country codes supported for IBAN generation */\n    @Deterministic\n    public static Set<String> ibanSupportedCountries() {\n        return countryCodeToBasicBankAccountNumberPattern.keySet();\n    }\n\n    public String creditCard(CreditCardType creditCardType) {\n        final String key = \"finance.credit_card.\" + creditCardType.toString().toLowerCase(Locale.ROOT);\n        String value = resolve(key);\n        final String template = faker.numerify(value);\n\n        int[] digits = template.chars().filter(Character::isDigit).boxed().mapToInt(t -> t - '0').toArray();\n        int luhnSum = 0;\n        int multiplier = 1;\n        for (int i = digits.length - 1; i >= 0; i--) {\n            multiplier = (multiplier == 2 ? 1 : 2);\n            luhnSum += sumOfDigits(digits[i] * multiplier);\n        }\n        int luhnDigit = (10 - (luhnSum % 10)) % 10;\n        StringBuilder res = new StringBuilder(template.length());\n        for (int i = 0; i < template.length(); i++) {\n            final char c = template.charAt(i);\n            switch (c) {\n                case '/', '\\\\' -> {if (!res.isEmpty() && i != template.length() - 1) {res.append(' ');}}\n                case 'L' -> res.append(luhnDigit);\n                default -> res.append(c);\n            }\n        }\n        return res.toString().trim();\n    }\n\n    private int sumOfDigits(int value) {\n        int res = 0;\n        while (value > 0) {\n            res += value % 10;\n            value /= 10;\n        }\n        return res;\n    }\n\n    public String creditCard() {\n        CreditCardType type = randomCreditCardType();\n        return creditCard(type);\n    }\n\n    /**\n     * Generates a random Business Identifier Code\n     */\n    public String bic() {\n        return faker.regexify(\"([A-Z]){4}([A-Z]){2}([0-9A-Z]){2}([0-9A-Z]{3})?\");\n    }\n\n    public String iban() {\n        List<String> countryCodes = new ArrayList<>(countryCodeToBasicBankAccountNumberPattern.keySet());\n        String randomCountryCode = countryCodes.get(faker.random().nextInt(countryCodes.size()));\n        return iban(randomCountryCode);\n    }\n\n    public String iban(String countryCode) {\n        String basicBankAccountNumber = faker.regexify(countryCodeToBasicBankAccountNumberPattern.get(countryCode));\n        String checkSum = calculateIbanChecksum(countryCode, basicBankAccountNumber);\n        return countryCode + checkSum + basicBankAccountNumber;\n    }\n\n    public String usRoutingNumber() {\n        final int random = faker.random().nextInt(12) + 1;\n        final String base =\n            // 01 through 12 are the \"normal\" routing numbers, and correspond to the 12 Federal Reserve Banks.\n            (random < 10 ? \"0\" : \"\") + random\n            + faker.numerify(\"#\".repeat(6));\n        int check =\n           Character.getNumericValue(base.charAt(0)) * 3\n            + Character.getNumericValue(base.charAt(1)) * 7\n            + Character.getNumericValue(base.charAt(2))\n            + Character.getNumericValue(base.charAt(3)) * 3\n            + Character.getNumericValue(base.charAt(4)) * 7\n            + Character.getNumericValue(base.charAt(5))\n            + Character.getNumericValue(base.charAt(6)) * 3\n            + Character.getNumericValue(base.charAt(7)) * 7;\n        check = Math.abs(check % 10 - 10) % 10;\n\n        return base + check;\n    }\n\n    private CreditCardType randomCreditCardType() {\n        return CreditCardType.values()[this.faker.random().nextInt(CreditCardType.values().length)];\n    }\n\n    private static String calculateIbanChecksum(String countryCode, String basicBankAccountNumber) {\n        String basis = (basicBankAccountNumber + countryCode).toLowerCase(Locale.ROOT) + \"00\";\n\n        final StringBuilder sb = new StringBuilder(basis.length());\n        for (int i = 0; i < basis.length(); i++) {\n            final char c = basis.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append((c - 'a') + 10);\n            } else {\n                sb.append(c);\n            }\n        }\n\n        int mod97 = new BigInteger(sb.toString()).mod(A_CODE).intValue();\n        return padLeftZeros(String.valueOf(98 - mod97), 2);\n    }\n\n    private static String padLeftZeros(String inputString, int length) {\n        if (inputString.length() >= length) {\n            return inputString;\n        }\n        StringBuilder sb = new StringBuilder(length);\n        while (sb.length() < length - inputString.length()) {\n            sb.append('0');\n        }\n        sb.append(inputString);\n\n        return sb.toString();\n    }\n\n    private static Map<String, String> createCountryCodeToBasicBankAccountNumberPatternMap() {\n        // source: https://www.swift.com/standards/data-standards/iban\n        // version 87\n        Map<String, String> ibanFormats = new HashMap<>();\n        ibanFormats.put(\"AD\", \"\\\\d{4}\\\\d{4}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"AE\", \"\\\\d{3}\\\\d{16}\");\n        ibanFormats.put(\"AL\", \"\\\\d{8}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"AT\", \"\\\\d{5}\\\\d{11}\");\n        ibanFormats.put(\"AZ\", \"[A-Z]{4}[0-9A-Za-z]{20}\");\n        ibanFormats.put(\"BA\", \"\\\\d{3}\\\\d{3}\\\\d{8}\\\\d{2}\");\n        ibanFormats.put(\"BE\", \"\\\\d{3}\\\\d{7}\\\\d{2}\");\n        ibanFormats.put(\"BG\", \"[A-Z]{4}\\\\d{4}\\\\d{2}[0-9A-Za-z]{8}\");\n        ibanFormats.put(\"BH\", \"[A-Z]{4}[0-9A-Za-z]{14}\");\n        ibanFormats.put(\"BR\", \"\\\\d{8}\\\\d{5}\\\\d{10}[A-Z]{1}[0-9A-Za-z]{1}\");\n        ibanFormats.put(\"BY\", \"[0-9A-Za-z]{4}\\\\d{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"CH\", \"\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"CR\", \"0\\\\d{3}\\\\d{14}\");\n        ibanFormats.put(\"CY\", \"\\\\d{3}\\\\d{5}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"CZ\", \"\\\\d{4}\\\\d{6}\\\\d{10}\");\n        ibanFormats.put(\"DE\", \"\\\\d{8}\\\\d{10}\");\n        ibanFormats.put(\"DK\", \"\\\\d{4}\\\\d{9}\\\\d{1}\");\n        ibanFormats.put(\"DO\", \"[0-9A-Za-z]{4}\\\\d{20}\");\n        ibanFormats.put(\"EE\", \"\\\\d{2}\\\\d{2}\\\\d{11}\\\\d{1}\");\n        ibanFormats.put(\"EG\", \"\\\\d{4}\\\\d{4}\\\\d{17}\");\n        ibanFormats.put(\"ES\", \"\\\\d{4}\\\\d{4}\\\\d{1}\\\\d{1}\\\\d{10}\");\n        ibanFormats.put(\"FI\", \"\\\\d{6}\\\\d{7}\\\\d{1}\");\n        ibanFormats.put(\"FO\", \"\\\\d{4}\\\\d{9}\\\\d{1}\");\n        ibanFormats.put(\"FR\", \"\\\\d{5}\\\\d{5}[0-9A-Za-z]{11}\\\\d{2}\");\n        ibanFormats.put(\"GB\", \"[A-Z]{4}\\\\d{6}\\\\d{8}\");\n        ibanFormats.put(\"GE\", \"[A-Z]{2}\\\\d{16}\");\n        ibanFormats.put(\"GI\", \"[A-Z]{4}[0-9A-Za-z]{15}\");\n        ibanFormats.put(\"GL\", \"\\\\d{4}\\\\d{9}\\\\d{1}\");\n        ibanFormats.put(\"GR\", \"\\\\d{3}\\\\d{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"GT\", \"[0-9A-Za-z]{4}[0-9A-Za-z]{20}\");\n        ibanFormats.put(\"HR\", \"\\\\d{7}\\\\d{10}\");\n        ibanFormats.put(\"HU\", \"\\\\d{3}\\\\d{4}\\\\d{1}\\\\d{15}\\\\d{1}\");\n        ibanFormats.put(\"IE\", \"[A-Z]{4}\\\\d{6}\\\\d{8}\");\n        ibanFormats.put(\"IL\", \"\\\\d{3}\\\\d{3}\\\\d{13}\");\n        ibanFormats.put(\"IQ\", \"[A-Z]{4}\\\\d{3}\\\\d{12}\");\n        ibanFormats.put(\"IS\", \"\\\\d{4}\\\\d{2}\\\\d{6}\\\\d{10}\");\n        ibanFormats.put(\"IT\", \"[A-Z]{1}\\\\d{5}\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"JO\", \"[A-Z]{4}\\\\d{4}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"KW\", \"[A-Z]{4}[0-9A-Za-z]{22}\");\n        ibanFormats.put(\"KZ\", \"\\\\d{3}[0-9A-Za-z]{13}\");\n        ibanFormats.put(\"LB\", \"\\\\d{4}[0-9A-Za-z]{20}\");\n        ibanFormats.put(\"LC\", \"[A-Z]{4}[0-9A-Za-z]{24}\");\n        ibanFormats.put(\"LI\", \"\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"LT\", \"\\\\d{5}\\\\d{11}\");\n        ibanFormats.put(\"LU\", \"\\\\d{3}[0-9A-Za-z]{13}\");\n        ibanFormats.put(\"LV\", \"[A-Z]{4}[0-9A-Za-z]{13}\");\n        ibanFormats.put(\"MC\", \"\\\\d{5}\\\\d{5}[0-9A-Za-z]{11}\\\\d{2}\");\n        ibanFormats.put(\"MD\", \"[0-9A-Za-z]{2}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"ME\", \"\\\\d{3}\\\\d{13}\\\\d{2}\");\n        ibanFormats.put(\"MK\", \"\\\\d{3}[0-9A-Za-z]{10}\\\\d{2}\");\n        ibanFormats.put(\"MR\", \"\\\\d{5}\\\\d{5}\\\\d{11}\\\\d{2}\");\n        ibanFormats.put(\"MT\", \"[A-Z]{4}\\\\d{5}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"MU\", \"[A-Z]{4}\\\\d{2}\\\\d{2}\\\\d{12}\\\\d{3}[A-Z]{3}\");\n        ibanFormats.put(\"NL\", \"[A-Z]{4}\\\\d{10}\");\n        ibanFormats.put(\"NO\", \"\\\\d{4}\\\\d{6}\\\\d{1}\");\n        ibanFormats.put(\"PK\", \"[A-Z]{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"PL\", \"\\\\d{8}\\\\d{16}\");\n        ibanFormats.put(\"PS\", \"[A-Z]{4}[0-9A-Za-z]{21}\");\n        ibanFormats.put(\"PT\", \"\\\\d{4}\\\\d{4}\\\\d{11}\\\\d{2}\");\n        ibanFormats.put(\"QA\", \"[A-Z]{4}[0-9A-Za-z]{21}\");\n        ibanFormats.put(\"RO\", \"[A-Z]{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"RS\", \"\\\\d{3}\\\\d{13}\\\\d{2}\");\n        ibanFormats.put(\"SA\", \"\\\\d{2}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"SC\", \"[A-Z]{4}d{2}\\\\d{2}\\\\d{16}[A-Z]{3}\");\n        ibanFormats.put(\"SE\", \"\\\\d{3}\\\\d{16}\\\\d{1}\");\n        ibanFormats.put(\"SI\", \"\\\\d{5}\\\\d{8}\\\\d{2}\");\n        ibanFormats.put(\"SK\", \"\\\\d{4}\\\\d{6}\\\\d{10}\");\n        ibanFormats.put(\"SM\", \"[A-Z]{1}\\\\d{5}\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"ST\", \"\\\\d{8}\\\\d{11}\\\\d{2}\");\n        ibanFormats.put(\"SV\", \"[A-Z]{4}\\\\d{20}\");\n        ibanFormats.put(\"TL\", \"\\\\d{3}\\\\d{14}\\\\d{2}\");\n        ibanFormats.put(\"TN\", \"\\\\d{2}\\\\d{3}\\\\d{13}\\\\d{2}\");\n        ibanFormats.put(\"TR\", \"\\\\d{5}\\\\d{1}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"UA\", \"\\\\d{6}[0-9A-Za-z]{19}\");\n        ibanFormats.put(\"VA\", \"\\\\d{3}\\\\d{15}\");\n        ibanFormats.put(\"VG\", \"[A-Z]{4}\\\\d{16}\");\n        ibanFormats.put(\"XK\", \"\\\\d{4}\\\\d{10}\\\\d{2}\");\n        return ibanFormats;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final BigInteger A_CODE = BigInteger.valueOf(97L);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "BigInteger", "name": "A_CODE = BigInteger.valueOf(97L)", "syntax_pass": true}, {"attribute_expression": "private static final Map<String, String> countryCodeToBasicBankAccountNumberPattern =\n        createCountryCodeToBasicBankAccountNumberPatternMap();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<String, String>", "name": "countryCodeToBasicBankAccountNumberPattern =\n        createCountryCodeToBasicBankAccountNumberPatternMap()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "name": "Construction", "file_path": "src/main/java/net/datafaker/providers/base/Construction.java", "superclasses": "", "methods": ["[]Construction(BaseProviders)", "[String]heavyEquipment()", "[String]materials()", "[String]subcontractCategories()", "[String]roles()", "[String]trades()", "[String]standardCostCodes()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Construction.java.Construction.[]Construction(BaseProviders)", "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]heavyEquipment()", "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]materials()", "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]subcontractCategories()", "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]roles()", "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]trades()", "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]standardCostCodes()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Construction extends AbstractProvider<BaseProviders> {\n\n    protected Construction(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String heavyEquipment() {\n        return resolve(\"construction.heavy_equipment\");\n    }\n\n    public String materials() {\n        return resolve(\"construction.materials\");\n    }\n\n    public String subcontractCategories() {\n        return resolve(\"construction.subcontract_categories\");\n    }\n\n    public String roles() {\n        return resolve(\"construction.roles\");\n    }\n\n    public String trades() {\n        return resolve(\"construction.trades\");\n    }\n\n    public String standardCostCodes() {\n        return resolve(\"construction.standard_cost_codes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Currency.java.Currency", "name": "Currency", "file_path": "src/main/java/net/datafaker/providers/base/Currency.java", "superclasses": "", "methods": ["[]Currency(BaseProviders)", "[String]name()", "[String]code()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Currency.java.Currency.[]Currency(BaseProviders)", "src/main/java/net/datafaker/providers/base/Currency.java.Currency.[String]name()", "src/main/java/net/datafaker/providers/base/Currency.java.Currency.[String]code()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n@deprecated since 2.2.0. For removal in 3.0.0 version. This faker is deprecated due to the existence\nof duplicate {@link Money} faker with similar methods. Use {@link Money} instead.\n", "original_string": "@Deprecated(since = \"2.2.0\", forRemoval = true)\npublic class Currency extends AbstractProvider<BaseProviders> {\n\n    public Currency(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Money#currency} instead.\n     */\n    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String name() {\n        return resolve(\"currency.name\");\n    }\n\n    /**\n     * @deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Money#currencyCode()} instead.\n     * @return an alphabetic currency code (ex. USD)\n     */\n    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String code() {\n        return resolve(\"currency.code\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "name": "Aws", "file_path": "src/main/java/net/datafaker/providers/base/Aws.java", "superclasses": "", "methods": ["[]Aws(BaseProviders)", "[String]region()", "[String]service()", "[String]accountId()", "[String]acmARN()", "[String]albARN()", "[String]albTargetGroupARN()", "[String]route53ZoneId()", "[String]securityGroupId()", "[String]subnetId()", "[String]vpcId()", "[String]appName()", "[String]randHex(int)", "[String]randHex()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Aws.java.Aws.[]Aws(BaseProviders)", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]region()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]service()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]accountId()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]acmARN()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]albARN()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]albTargetGroupARN()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]route53ZoneId()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]securityGroupId()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]subnetId()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]vpcId()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]appName()", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]randHex(int)", "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]randHex()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.3.0\n", "original_string": "public class Aws extends AbstractProvider<BaseProviders> {\n\n    private final Text.TextRuleConfig configForRoute53ZoneId;\n\n    protected Aws(BaseProviders faker) {\n        super(faker);\n        configForRoute53ZoneId = Text.TextSymbolsBuilder.builder()\n                                 .with(EN_UPPERCASE).len(21).build();\n    }\n\n    public String region() {\n        return resolve(\"aws.regions\");\n    }\n\n    public String service() {\n        return resolve(\"aws.services\");\n    }\n\n    public String accountId() {\n        return faker.numerify(\"0#########\");\n    }\n\n    public String acmARN() {\n        return \"arn:aws:acm:\" +\n            region() +\n            \":\" +\n            accountId() +\n            \":certificate/\" +\n            faker.internet().uuid();\n    }\n\n    public String albARN() {\n        return \"arn:aws:elasticloadbalancing:\" +\n            region() +\n            \":\" +\n            accountId() +\n            \":loadbalancer/app/\" +\n            appName() +\n            \"/\" +\n            randHex();\n    }\n\n    public String albTargetGroupARN() {\n        return \"arn:aws:elasticloadbalancing:\" +\n            region() +\n            \":\" +\n            accountId() +\n            \":targetgroup/\" +\n            appName() +\n            \"/\" +\n            randHex();\n    }\n\n    public String route53ZoneId() {\n        return faker.text().text(configForRoute53ZoneId);\n    }\n\n    public String securityGroupId() {\n        return \"sg-\" + randHex(17);\n    }\n\n    public String subnetId() {\n        return \"subnet-\" + randHex(17);\n    }\n\n    public String vpcId() {\n        return \"vpc-\" + randHex(17);\n    }\n\n    private String appName() {\n        return faker.app().name().toLowerCase().replaceAll(\"\\\\W+\", \"\");\n    }\n\n    private String randHex(int length) {\n        return faker.random().hex(length, false);\n    }\n\n    private String randHex() {\n        return randHex(16);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Text.TextRuleConfig configForRoute53ZoneId;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Text.TextRuleConfig", "name": "configForRoute53ZoneId", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options", "name": "Options", "file_path": "src/main/java/net/datafaker/providers/base/Options.java", "superclasses": "", "methods": ["[]Options(BaseProviders)", "[E]option()", "[char]option(char[])", "[int]option(int[])", "[long]option(long[])", "[float]option(float[])", "[double]option(double[])", "[short]option(short[])", "[boolean]option(boolean[])", "[byte]option(byte[])", "[Set<E>]subset(int)", "[String]option()", "[Set<String>]subset(int)", "[E]option(Class<E>)", "[E]nextElement(E[])", "[E]nextElement(List<E>)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Options.java.Options.[]Options(BaseProviders)", "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]option()", "src/main/java/net/datafaker/providers/base/Options.java.Options.[char]option(char[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[int]option(int[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[long]option(long[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[float]option(float[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[double]option(double[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[short]option(short[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[boolean]option(boolean[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[byte]option(byte[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[Set<E>]subset(int)", "src/main/java/net/datafaker/providers/base/Options.java.Options.[String]option()", "src/main/java/net/datafaker/providers/base/Options.java.Options.[Set<String>]subset(int)", "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]option(Class<E>)", "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]nextElement(E[])", "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]nextElement(List<E>)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Options extends AbstractProvider<BaseProviders> {\n\n    protected Options(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Returns a random element from an varargs.\n     *\n     * @param options The varargs to take a random element from.\n     * @param <E>     The type of the elements in the varargs.\n     * @return A randomly selected element from the varargs.\n     */\n    @SafeVarargs\n    public final <E> E option(E... options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final char option(char[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final int option(int[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final long option(long[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final float option(float[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final double option(double[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final short option(short[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final boolean option(boolean[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    public final byte option(byte[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    /**\n     * Returns a random unique subset of elements from an varargs.\n     *\n     * @param size    The size of subset to return.\n     * @param options The varargs to take a random element from.\n     * @param <E>     The type of the elements in the varargs.\n     * @return A randomly selected unique subset from the varargs.\n     * If size is negative then {@code IllegalArgumentException} will be thrown.\n     * If size is zero then an empty subset will be returned.\n     * If size is larger than a unique set from options then all options will be returned.\n     */\n    public final <E> Set<E> subset(int size, E... options) {\n        if (size < 0) {\n            throw new IllegalArgumentException(\"size should be not negative: \" + size);\n        }\n        if (size == 0) {\n            return Collections.emptySet();\n        }\n        List<E> opts = Stream.of(options).distinct().collect(Collectors.toList());\n        if (size >= opts.size()) {\n            return new HashSet<>(opts);\n        }\n        int i = 0;\n        Set<E> set = new HashSet<>();\n        while (i < size) {\n            int randomIndex = faker.random().nextInt(opts.size());\n            set.add(opts.get(randomIndex));\n            opts.remove(randomIndex);\n            i++;\n        }\n\n        return set;\n    }\n\n    /**\n     * Returns a random String element from an varargs.\n     *\n     * @param options The varargs to take a random element from.\n     * @return A randomly selected element from the varargs.\n     */\n    public String option(String... options) {\n        return options[faker.random().nextInt(options.length)];\n    }\n\n    /**\n     * Returns a random unique subset of elements from an varargs.\n     *\n     * @param size    The size of subset to return.\n     * @param options The varargs to take a random element from.\n     * @return A randomly selected unique subset from the varargs.\n     * If size is negative then {@code IllegalArgumentException} will be thrown.\n     * If size is zero then an empty subset will be returned.\n     * If size is larger than a unique set from options then all options will be returned.\n     */\n    public final Set<String> subset(int size, String... options) {\n        if (size < 0) {\n            throw new IllegalArgumentException(\"size should be not negative: \" + size);\n        }\n        if (size == 0) {\n            return Collections.emptySet();\n        }\n        List<String> opts = Stream.of(options).distinct().collect(Collectors.toList());\n        if (size >= opts.size()) {\n            return new HashSet<>(opts);\n        }\n        int i = 0;\n        Set<String> set = new HashSet<>();\n        while (i < size) {\n            int randomIndex = faker.random().nextInt(opts.size());\n            set.add(opts.get(randomIndex));\n            opts.remove(randomIndex);\n            i++;\n        }\n\n        return set;\n    }\n\n    /**\n     * Returns a random element from Enum.\n     *\n     * @param enumeration The Enum to take a random element from.\n     * @return A randomly selected element from the enum.\n     */\n    public <E extends Enum<E>> E option(Class<E> enumeration) {\n        E[] enumConstants = enumeration.getEnumConstants();\n        return enumConstants[faker.random().nextInt(enumConstants.length)];\n    }\n\n    /**\n     * Returns a random element from an array.\n     *\n     * @param array The array to take a random element from.\n     * @param <E>   The type of the elements in the array.\n     * @return A randomly selected element from the array.\n     */\n    public <E> E nextElement(E[] array) {\n        return array[faker.random().nextInt(array.length)];\n    }\n\n    /**\n     * Returns a random element from a list.\n     *\n     * @param list The list to take a random element from.\n     * @param <E>  The type of the elements in the list.\n     * @return A randomly selected element from the list.\n     */\n    public <E> E nextElement(List<E> list) {\n        return list.get(faker.random().nextInt(list.size()));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "name": "DcComics", "file_path": "src/main/java/net/datafaker/providers/base/DcComics.java", "superclasses": "", "methods": ["[]DcComics(BaseProviders)", "[String]hero()", "[String]heroine()", "[String]villain()", "[String]name()", "[String]title()"], "method_uris": ["src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[]DcComics(BaseProviders)", "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]hero()", "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]heroine()", "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]villain()", "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]name()", "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]title()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class DcComics extends AbstractProvider<BaseProviders> {\n\n    public DcComics(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String hero() {\n        return resolve(\"dc_comics.hero\");\n    }\n\n    public String heroine() {\n        return resolve(\"dc_comics.heroine\");\n    }\n\n    public String villain() {\n        return resolve(\"dc_comics.villain\");\n    }\n\n    public String name() {\n        return resolve(\"dc_comics.name\");\n    }\n\n    public String title() {\n        return resolve(\"dc_comics.title\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Horse.java.Horse", "name": "Horse", "file_path": "src/main/java/net/datafaker/providers/base/Horse.java", "superclasses": "", "methods": ["[]Horse(BaseProviders)", "[String]name()", "[String]breed()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Horse.java.Horse.[]Horse(BaseProviders)", "src/main/java/net/datafaker/providers/base/Horse.java.Horse.[String]name()", "src/main/java/net/datafaker/providers/base/Horse.java.Horse.[String]breed()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.3.0\n", "original_string": "public class Horse extends AbstractProvider<BaseProviders> {\n\n    protected Horse(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"creature.horse.name\");\n    }\n\n    public String breed() {\n        return resolve(\"creature.horse.breed\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Color.java.Color", "name": "Color", "file_path": "src/main/java/net/datafaker/providers/base/Color.java", "superclasses": "", "methods": ["[]Color(BaseProviders)", "[String]name()", "[String]hex()", "[String]hex(boolean)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Color.java.Color.[]Color(BaseProviders)", "src/main/java/net/datafaker/providers/base/Color.java.Color.[String]name()", "src/main/java/net/datafaker/providers/base/Color.java.Color.[String]hex()", "src/main/java/net/datafaker/providers/base/Color.java.Color.[String]hex(boolean)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Color extends AbstractProvider<BaseProviders> {\n\n    protected Color(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"color.name\");\n    }\n\n    public String hex() {\n        return hex(true);\n    }\n\n    public String hex(boolean includeHashSign) {\n        String hexString = faker.random().hex(6);\n        if (includeHashSign)\n            return \"#\" + hexString;\n        return hexString;\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "name": "TimeAndDate", "file_path": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "superclasses": "", "methods": ["[]TimeAndDate(BaseProviders)", "[Instant]future()", "[Instant]future(long,TimeUnit)", "[String]future(long,TimeUnit,String)", "[Instant]future(long,long,TimeUnit)", "[String]future(long,long,TimeUnit,String)", "[Instant]future(long,TimeUnit,Instant)", "[String]future(long,TimeUnit,Instant,String)", "[Instant]past()", "[Instant]past(long,TimeUnit)", "[String]past(long,TimeUnit,String)", "[Instant]past(long,long,TimeUnit)", "[String]past(long,long,TimeUnit,String)", "[Instant]past(long,TimeUnit,Instant)", "[String]past(long,TimeUnit,Instant,String)", "[Instant]between(Instant,Instant)", "[String]between(Instant,Instant,String)", "[LocalDate]birthday()", "[String]birthday(String)", "[LocalDate]birthday(int,int)", "[String]birthday(int,int,String)", "[Duration]duration(long,ChronoUnit)", "[Duration]duration(long,long,ChronoUnit)", "[Period]period(Period,Period)", "[String]formatInstant(TemporalAccessor,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[]TimeAndDate(BaseProviders)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future()", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future(long,TimeUnit)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]future(long,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future(long,long,TimeUnit)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]future(long,long,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future(long,TimeUnit,Instant)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]future(long,TimeUnit,Instant,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past()", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past(long,TimeUnit)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]past(long,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past(long,long,TimeUnit)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]past(long,long,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past(long,TimeUnit,Instant)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]past(long,TimeUnit,Instant,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]between(Instant,Instant)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]between(Instant,Instant,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[LocalDate]birthday()", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]birthday(String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[LocalDate]birthday(int,int)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]birthday(int,int,String)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Duration]duration(long,ChronoUnit)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Duration]duration(long,long,ChronoUnit)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Period]period(Period,Period)", "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]formatInstant(TemporalAccessor,String)"], "overrides": null, "attributes": [], "class_docstring": "\nA generator of random times and dates.\n<p>\nThis class is similar to {@link DateAndTime}, but migrated to the newer Java 8+ Time API.\n\n@since 2.3.0\n", "original_string": "public class TimeAndDate extends AbstractProvider<BaseProviders> {\n\n    static final int DEFAULT_MIN_AGE = 18;\n    static final int DEFAULT_MAX_AGE = 65;\n\n    protected TimeAndDate(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generates a future date from now.\n     */\n    public Instant future() {\n        long FIFTY_YEARS = TimeUnit.DAYS.toMillis(18262);\n        return future(faker.number().numberBetween(1, FIFTY_YEARS), MILLISECONDS);\n    }\n\n    /**\n     * Generates a future date from now.\n     *\n     * @param atMost at most this amount of time ahead from now exclusive.\n     * @param unit   the time unit.\n     * @return a future date from now.\n     */\n    public Instant future(long atMost, TimeUnit unit) {\n        Instant aBitLaterThanNow = Instant.now().plusMillis(1);\n        return future(atMost, unit, aBitLaterThanNow);\n    }\n\n    /**\n     * Generates and converts to string representation a future date from now.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a future date from now.\n     */\n    public String future(long atMost, TimeUnit unit, String pattern) {\n        return formatInstant(future(atMost, unit), pattern);\n    }\n\n    /**\n     * Generates a future date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param minimum the minimum amount of time in the future from now.\n     * @param unit    the time unit.\n     * @return a future date from now, with a minimum time.\n     */\n    public Instant future(long atMost, long minimum, TimeUnit unit) {\n        Instant minimumDate = Instant.now().plus(minimum, unit.toChronoUnit());\n        return future(atMost - minimum, unit, minimumDate);\n    }\n\n    /**\n     * Generates and converts to string representation\n     * of a future date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param minimum the minimum amount of time in the future from now.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a future date from now, with a minimum time.\n     */\n    public String future(long atMost, long minimum, TimeUnit unit, String pattern) {\n        return formatInstant(future(atMost, minimum, unit), pattern);\n    }\n\n    /**\n     * Generates a future date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the future date relative to this date.\n     * @return a future date relative to {@code referenceDate}.\n     */\n    public Instant future(long atMost, TimeUnit unit, Instant referenceDate) {\n        long upperBoundMillis = unit.toMillis(atMost);\n        long futureMillis = referenceDate.toEpochMilli() + 1 + faker.random().nextLong(upperBoundMillis - 1);\n        return Instant.ofEpochMilli(futureMillis);\n    }\n\n    /**\n     * Generates and converts to string representation\n     * a future date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the future date relative to this date.\n     * @param pattern       date time pattern to convert to string.\n     * @return a string representation of a future date relative to {@code referenceDate}.\n     */\n    public String future(long atMost, TimeUnit unit, Instant referenceDate, String pattern) {\n        return formatInstant(future(atMost, unit, referenceDate), pattern);\n    }\n\n    /**\n     * Generates a past date from now.\n     */\n     public Instant past() {\n         long FIFTY_YEARS = TimeUnit.DAYS.toMillis(18262);\n         return past(faker.number().numberBetween(1, FIFTY_YEARS), MILLISECONDS);\n    }\n\n    /**\n     * Generates a past date from now.\n     *\n     * @param atMost at most this amount of time earlier from now exclusive.\n     * @param unit   the time unit.\n     * @return a past date from now.\n     */\n    public Instant past(long atMost, TimeUnit unit) {\n        Instant aBitEarlierThanNow = Instant.now().minusMillis(1);\n        return past(atMost, unit, aBitEarlierThanNow);\n    }\n\n    /**\n     * Generates a string representation of a past date from now.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a past date from now.\n     */\n    public String past(long atMost, TimeUnit unit, String pattern) {\n        return formatInstant(past(atMost, unit), pattern);\n    }\n\n    /**\n     * Generates a past date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param minimum the minimum amount of time in the past from now.\n     * @param unit    the time unit.\n     * @return a past date from now.\n     */\n    public Instant past(long atMost, long minimum, TimeUnit unit) {\n        Instant minimumDate = Instant.now().minusMillis(unit.toMillis(minimum));\n        return past(atMost - minimum, unit, minimumDate);\n    }\n\n    /**\n     * Generates and converts to string representation a past date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param minimum the minimum amount of time in the past from now.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a past date from now, with a minimum time.\n     */\n    public String past(long atMost, long minimum, TimeUnit unit, String pattern) {\n        return formatInstant(past(atMost, minimum, unit), pattern);\n    }\n\n    /**\n     * Generates a past date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the past date relative to this date.\n     * @return a past date relative to {@code referenceDate}.\n     */\n    public Instant past(long atMost, TimeUnit unit, Instant referenceDate) {\n        long upperBoundMillis = unit.toMillis(atMost);\n        long pastMillis = referenceDate.toEpochMilli() - 1 - faker.random().nextLong(upperBoundMillis - 1);\n        return Instant.ofEpochMilli(pastMillis);\n    }\n    /**\n     * Generates a string representation of a past date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the past date relative to this date.\n     * @param pattern       date time pattern to convert to string.\n     * @return a string representation of a past date relative to {@code referenceDate}.\n     */\n    public String past(long atMost, TimeUnit unit, Instant referenceDate, String pattern) {\n        return formatInstant(past(atMost, unit, referenceDate), pattern);\n    }\n\n    /**\n     * Generates a random date between two dates.\n     *\n     * @param from the lower bound inclusive\n     * @param to   the upper bound exclusive\n     * @return a random date between {@code from} and {@code to}.\n     * @throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n     */\n    public Instant between(Instant from, Instant to) throws IllegalArgumentException {\n        if (to.isBefore(from)) {\n            throw new IllegalArgumentException(\"Invalid date range: the upper bound date (%s) is before the lower bound (%s)\".formatted(to, from));\n        }\n\n        if (from.equals(to)) {\n            return from;\n        }\n\n        long offsetMillis = faker.random().nextLong(to.toEpochMilli() - from.toEpochMilli());\n        return from.plusMillis(offsetMillis);\n    }\n\n    /**\n     * Generates a string representation of a random date between two dates.\n     *\n     * @param from    the lower bound inclusive\n     * @param to      the upper bound exclusive\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a random date between {@code from} and {@code to}.\n     * @throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n     */\n    public String between(Instant from, Instant to, String pattern) throws IllegalArgumentException {\n        return formatInstant(between(from, to), pattern);\n    }\n\n    /**\n     * Generates a random birthday between 65 and 18 years ago from now.\n     *\n     * @return a random birthday between 65 and 18 years ago from now.\n     */\n    public LocalDate birthday() {\n        return birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE);\n    }\n\n    /**\n     * Generates a string representation of a random birthday between 65 and 18 years ago from now.\n     *\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a random birthday between 65 and 18 years ago from now.\n     */\n    public String birthday(String pattern) {\n        return formatInstant(birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE), pattern);\n    }\n\n    /**\n     * Generates a random birthday between two ages from now.\n     *\n     * @param minAge the minimal age\n     * @param maxAge the maximal age\n     * @return a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n     * Negative {@code minAge} and {@code maxAge} are supported.\n     */\n    public LocalDate birthday(int minAge, int maxAge) {\n        LocalDate localDate = LocalDate.now();\n        LocalDate from = localDate.minusYears(maxAge);\n        if (minAge == maxAge) {\n            return from;\n        } else {\n            long start = from.toEpochDay();\n            long stop = localDate.minusYears(minAge).toEpochDay();\n\n            return LocalDate.ofEpochDay(faker.random().nextLong(start, stop));\n        }\n    }\n\n    /**\n     * Generates and converts to string representation a random birthday between two ages from now.\n     *\n     * @param minAge  the minimal age\n     * @param maxAge  the maximal age\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n     * @throws IllegalArgumentException if the {@code maxAge} is lower than {@code minAge}.\n     */\n    public String birthday(int minAge, int maxAge, String pattern) {\n        return formatInstant(birthday(minAge, maxAge), pattern);\n    }\n\n    /**\n     * Generates a random Duration lower than max.\n     *\n     * @param max  the maximum value\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return a random Duration lower than {@code max}.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    public Duration duration(long max, ChronoUnit unit) {\n        return duration(0, max, unit);\n    }\n\n    /**\n     * Generates a random Duration between min and max.\n     *\n     * @param min  the maximum value\n     * @param max  the minimal value\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return a random Duration between {@code min} inclusive and {@code max} exclusive if {@code max} greater {@code min}.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    public Duration duration(long min, long max, ChronoUnit unit) {\n        return Duration.of(faker.random().nextLong(min, max), unit);\n    }\n\n    /**\n     * Generates a random Period between min and max.\n     *\n     * @param min the minimal value\n     * @param max the maximum value\n     * @return a random Period between {@code min} inclusive and {@code max} inclusive if {@code max} greater {@code min}.\n     * @throws IllegalArgumentException if the {@code min} is greater than {@code max}.\n     */\n    public Period period(Period min, Period max) {\n        if (max.minus(min).isNegative()) {\n            throw new IllegalArgumentException(\"Max period(\" + max + \") should be not less than min (\" + min + \")\");\n        }\n        return Period.of(\n            faker.random().nextInt(min.getYears(), max.getYears()),\n            faker.random().nextInt(min.getMonths(), max.getMonths()),\n            faker.random().nextInt(min.getDays(), max.getDays()));\n    }\n\n    private static String formatInstant(TemporalAccessor instant, String pattern) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern)\n            .withZone(ZoneId.systemDefault());\n\n        return formatter.format(instant);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "static final int DEFAULT_MIN_AGE = 18;", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MIN_AGE = 18", "syntax_pass": true}, {"attribute_expression": "static final int DEFAULT_MAX_AGE = 65;", "docstring": "", "modifiers": "static final", "marker_annotations": [], "non_marker_annotations": ["static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MAX_AGE = 65", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/RockBand.java.RockBand", "name": "RockBand", "file_path": "src/main/java/net/datafaker/providers/base/RockBand.java", "superclasses": "", "methods": ["[]RockBand(BaseProviders)", "[String]name()"], "method_uris": ["src/main/java/net/datafaker/providers/base/RockBand.java.RockBand.[]RockBand(BaseProviders)", "src/main/java/net/datafaker/providers/base/RockBand.java.RockBand.[String]name()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class RockBand extends AbstractProvider<BaseProviders> {\n\n    protected RockBand(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"rock_band.name\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "name": "OlympicSport", "file_path": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "superclasses": "", "methods": ["[]OlympicSport(BaseProviders)", "[String]summerOlympics()", "[String]winterOlympics()", "[String]summerParalympics()", "[String]winterParalympics()", "[String]ancientOlympics()", "[String]unusual()"], "method_uris": ["src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[]OlympicSport(BaseProviders)", "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]summerOlympics()", "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]winterOlympics()", "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]summerParalympics()", "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]winterParalympics()", "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]ancientOlympics()", "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]unusual()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.8.0\n", "original_string": "public class OlympicSport extends AbstractProvider<BaseProviders> {\n\n    protected OlympicSport(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String summerOlympics() {\n        return resolve(\"olympic_sport.summer_olympics\");\n    }\n\n    public String winterOlympics() {\n        return resolve(\"olympic_sport.winter_olympics\");\n    }\n\n    public String summerParalympics() {\n        return resolve(\"olympic_sport.summer_paralympics\");\n    }\n\n    public String winterParalympics() {\n        return resolve(\"olympic_sport.winter_paralympics\");\n    }\n\n    public String ancientOlympics() {\n        return resolve(\"olympic_sport.ancient_olympics\");\n    }\n\n    public String unusual() {\n        return resolve(\"olympic_sport.unusual\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "name": "PhoneNumber", "file_path": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "superclasses": "", "methods": ["[]PhoneNumber(BaseProviders)", "[String]countryCodeIso2()", "[String]cellPhone()", "[String]cellPhoneInternational()", "[String]phoneNumber()", "[String]phoneNumberInternational()", "[String]phoneNumberNational()", "[String]extension()", "[String]subscriberNumber(int)", "[String]subscriberNumber()", "[String]countryCodeIso2(Locale)", "[String]detectCountryByLanguage(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[]PhoneNumber(BaseProviders)", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]countryCodeIso2()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]cellPhone()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]cellPhoneInternational()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]phoneNumber()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]phoneNumberInternational()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]phoneNumberNational()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]extension()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]subscriberNumber(int)", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]subscriberNumber()", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]countryCodeIso2(Locale)", "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]detectCountryByLanguage(String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class PhoneNumber extends AbstractProvider<BaseProviders> {\n    private final String countryCodeIso2;\n    private final PhoneNumberGenerator generator;\n\n    protected PhoneNumber(BaseProviders faker) {\n        super(faker);\n        this.countryCodeIso2 = countryCodeIso2(faker.getContext().getLocale());\n        this.generator = new PhoneNumberGenerator(faker.fakeValuesService(), faker.getContext());\n    }\n\n    @Deterministic\n    String countryCodeIso2() {\n        return countryCodeIso2;\n    }\n\n    public String cellPhone() {\n        return generator.randomPhoneNumber(countryCodeIso2, MOBILE, NATIONAL);\n    }\n\n    public String cellPhoneInternational() {\n        return generator.randomPhoneNumber(countryCodeIso2, MOBILE, INTERNATIONAL);\n    }\n\n    /**\n     * Generates locale specific phone number in national format.\n     *\n     * @return phone number\n     */\n    public String phoneNumber() {\n        return phoneNumberNational();\n    }\n\n    public String phoneNumberInternational() {\n        return generator.randomPhoneNumber(countryCodeIso2, FIXED_LINE, INTERNATIONAL);\n    }\n\n    public String phoneNumberNational() {\n        return generator.randomPhoneNumber(countryCodeIso2, FIXED_LINE, NATIONAL);\n    }\n\n    public String extension() {\n        return subscriberNumber();\n    }\n\n    public String subscriberNumber(int length) {\n        return faker.numerify(\"#\".repeat(Math.max(0, length)));\n    }\n\n    public String subscriberNumber() {\n        return subscriberNumber(4);\n    }\n\n    private static String countryCodeIso2(Locale locale) {\n        String country = requireNonNullElse(locale.getCountry(), \"\");\n        return switch (country) {\n            case \"\" -> detectCountryByLanguage(locale.getLanguage());\n            case \"CAT\" -> \"ES\";\n            case \"IND\" -> \"IN\";\n            case \"NEP\" -> \"NP\";\n            case \"PAK\" -> \"PK\";\n            case \"BORK\" -> \"US\"; // what the hell is BORK?\n            default -> country;\n        };\n    }\n\n    private static String detectCountryByLanguage(String language) {\n        return switch (language) {\n            case \"en\" -> \"US\"; // it has been used by default for English\n            case \"test\" -> \"US\"; // What the hell is \"test\" language?\n            case \"hy\" -> \"AM\"; // Armenia\n            case \"uk\" -> \"UA\"; // Ukraine\n            case \"ja\" -> \"JP\"; // Japan\n            case \"fa\" -> \"FR\"; // France\n            case \"ka\" -> \"GE\"; // Georgia\n            case \"sq\" -> \"AL\"; // Albania\n            case \"cs\" -> \"CZ\"; // Czech Republic\n            case \"be\" -> \"BY\"; // Belarus\n            case \"ko\" -> \"KR\"; // Korea\n            case \"he\" -> \"IL\"; // Israel\n            default -> language.toUpperCase(ROOT);\n        };\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String countryCodeIso2;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "countryCodeIso2", "syntax_pass": true}, {"attribute_expression": "private final PhoneNumberGenerator generator;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "PhoneNumberGenerator", "name": "generator", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "name": "Measurement", "file_path": "src/main/java/net/datafaker/providers/base/Measurement.java", "superclasses": "", "methods": ["[]Measurement(BaseProviders)", "[String]height()", "[String]length()", "[String]volume()", "[String]weight()", "[String]metricHeight()", "[String]metricLength()", "[String]metricVolume()", "[String]metricWeight()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[]Measurement(BaseProviders)", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]height()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]length()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]volume()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]weight()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricHeight()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricLength()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricVolume()", "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricWeight()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Measurement extends AbstractProvider<BaseProviders> {\n\n    protected Measurement(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random height measurement.\n     *\n     * @return a string of height measurement.\n     */\n    public String height() {\n        return resolve(\"measurement.height\");\n    }\n\n    /**\n     * This method generates a random length measurement.\n     *\n     * @return a string of length measurement.\n     */\n    public String length() {\n        return resolve(\"measurement.length\");\n    }\n\n    /**\n     * This method generates a random volume measurement.\n     *\n     * @return a string of volume measurement.\n     */\n    public String volume() {\n        return resolve(\"measurement.volume\");\n    }\n\n    /**\n     * This method generates a random weight measurement.\n     *\n     * @return a string of weight measurement.\n     */\n    public String weight() {\n        return resolve(\"measurement.weight\");\n    }\n\n    /**\n     * This method generates a random metric height measurement.\n     *\n     * @return a string of metric height measurement.\n     */\n    public String metricHeight() {\n        return resolve(\"measurement.metric_height\");\n    }\n\n    /**\n     * This method generates a random metric length measurement.\n     *\n     * @return a string of metric length measurement.\n     */\n    public String metricLength() {\n        return resolve(\"measurement.metric_length\");\n    }\n\n    /**\n     * This method generates a random metric volume measurement.\n     *\n     * @return a string of metric volume measurement.\n     */\n    public String metricVolume() {\n        return resolve(\"measurement.metric_volume\");\n    }\n\n    /**\n     * This method generates a random metric weight measurement.\n     *\n     * @return a string of metric weight measurement.\n     */\n    public String metricWeight() {\n        return resolve(\"measurement.metric_weight\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Mood.java.Mood", "name": "Mood", "file_path": "src/main/java/net/datafaker/providers/base/Mood.java", "superclasses": "", "methods": ["[]Mood(BaseProviders)", "[String]feeling()", "[String]emotion()", "[String]tone()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Mood.java.Mood.[]Mood(BaseProviders)", "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[String]feeling()", "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[String]emotion()", "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[String]tone()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.9.0\n", "original_string": "public class Mood extends AbstractProvider<BaseProviders> {\n\n    protected Mood(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String feeling() {\n        return resolve(\"mood.feeling\");\n    }\n\n    public String emotion() {\n        return resolve(\"mood.emotion\");\n    }\n\n    public String tone() {\n        return resolve(\"mood.tone\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Artist.java.Artist", "name": "Artist", "file_path": "src/main/java/net/datafaker/providers/base/Artist.java", "superclasses": "", "methods": ["[]Artist(BaseProviders)", "[String]name()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Artist.java.Artist.[]Artist(BaseProviders)", "src/main/java/net/datafaker/providers/base/Artist.java.Artist.[String]name()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Artist extends AbstractProvider<BaseProviders> {\n\n    protected Artist(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"artist.names\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Cat.java.Cat", "name": "Cat", "file_path": "src/main/java/net/datafaker/providers/base/Cat.java", "superclasses": "", "methods": ["[]Cat(BaseProviders)", "[String]name()", "[String]breed()", "[String]registry()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Cat.java.Cat.[]Cat(BaseProviders)", "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[String]name()", "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[String]breed()", "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[String]registry()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Cat extends AbstractProvider<BaseProviders> {\n\n    protected Cat(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"creature.cat.name\");\n    }\n\n    public String breed() {\n        return resolve(\"creature.cat.breed\");\n    }\n\n    public String registry() {\n        return resolve(\"creature.cat.registry\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords", "name": "FamousLastWords", "file_path": "src/main/java/net/datafaker/providers/base/FamousLastWords.java", "superclasses": "", "methods": ["[]FamousLastWords(BaseProviders)", "[String]lastWords()"], "method_uris": ["src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords.[]FamousLastWords(BaseProviders)", "src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords.[String]lastWords()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class FamousLastWords extends AbstractProvider<BaseProviders> {\n\n    protected FamousLastWords(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates random famous last words.\n     *\n     * @return a string of last words.\n     */\n    public String lastWords() {\n        return resolve(\"famous_last_words.last_words\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country", "name": "Country", "file_path": "src/main/java/net/datafaker/providers/base/Country.java", "superclasses": "", "methods": ["[]Country(BaseProviders)", "[String]flag()", "[String]countryCode2()", "[String]countryCode3()", "[String]capital()", "[String]currency()", "[String]currencyCode()", "[String]name()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Country.java.Country.[]Country(BaseProviders)", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]flag()", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]countryCode2()", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]countryCode3()", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]capital()", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]currency()", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]currencyCode()", "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]name()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Country extends AbstractProvider<BaseProviders> {\n    private final String flagUrl;\n\n    protected Country(BaseProviders faker) {\n        super(faker);\n        this.flagUrl = \"https://flags.fmcdn.net/data/flags/w580/\";\n    }\n\n    public String flag() {\n        return flagUrl + resolve(\"country.code2\") + \".png\";\n    }\n\n    public String countryCode2() {\n        return resolve(\"country.code2\");\n    }\n\n    public String countryCode3() {\n        return resolve(\"country.code3\");\n    }\n\n    public String capital() {\n        return resolve(\"country.capital\");\n    }\n\n    /**\n     * @see Money#currency()\n     * @return a random detailed ISO 4217 currency display name\n     */\n    public String currency() {\n        return faker.money().currency();\n    }\n\n    /**\n     * @see Money#currencyCode()\n     * @return an ISO 4217 currency code\n     */\n    public String currencyCode() {\n        return faker.money().currencyCode();\n    }\n\n    public String name() {\n        return resolve(\"country.name\");\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String flagUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "flagUrl", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word", "name": "Word", "file_path": "src/main/java/net/datafaker/providers/base/Word.java", "superclasses": "", "methods": ["[]Word(BaseProviders)", "[String]adjective()", "[String]adverb()", "[String]conjunction()", "[String]interjection()", "[String]noun()", "[String]preposition()", "[String]verb()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Word.java.Word.[]Word(BaseProviders)", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]adjective()", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]adverb()", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]conjunction()", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]interjection()", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]noun()", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]preposition()", "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]verb()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.4.0\n", "original_string": "public class Word extends AbstractProvider<BaseProviders> {\n\n    protected Word(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String adjective() {\n        return resolve(\"words.adjective\");\n    }\n\n    public String adverb() {\n        return resolve(\"words.adverb\");\n    }\n\n    public String conjunction() {\n        return resolve(\"words.conjunction\");\n    }\n\n    public String interjection() {\n        return resolve(\"words.interjection\");\n    }\n\n    public String noun() {\n        return resolve(\"words.noun\");\n    }\n\n    public String preposition() {\n        return resolve(\"words.preposition\");\n    }\n\n    public String verb() {\n        return resolve(\"words.verb\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji", "name": "Emoji", "file_path": "src/main/java/net/datafaker/providers/base/Emoji.java", "superclasses": "", "methods": ["[]Emoji(BaseProviders)", "[String]smiley()", "[String]cat()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Emoji.java.Emoji.[]Emoji(BaseProviders)", "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji.[String]smiley()", "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji.[String]cat()"], "overrides": null, "attributes": [], "class_docstring": "\nEmojis picked from <a href=\"http://unicode.org/Public/emoji/1.0/emoji-data.txt\">Emoji 1.0</a>.\n\n@since 1.7.0\n", "original_string": "public class Emoji extends AbstractProvider<BaseProviders> {\n\n    protected Emoji(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String smiley() {\n        return resolve(\"emoji.smileys\");\n    }\n\n    public String cat() {\n        return resolve(\"emoji.cats\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "name": "Demographic", "file_path": "src/main/java/net/datafaker/providers/base/Demographic.java", "superclasses": "", "methods": ["[]Demographic(BaseProviders)", "[String]race()", "[String]educationalAttainment()", "[String]demonym()", "[String]sex()", "[String]maritalStatus()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[]Demographic(BaseProviders)", "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]race()", "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]educationalAttainment()", "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]demonym()", "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]sex()", "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]maritalStatus()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Demographic extends AbstractProvider<BaseProviders> {\n\n    protected Demographic(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String race() {\n        return resolve(\"demographic.race\");\n    }\n\n    public String educationalAttainment() {\n        return resolve(\"demographic.educational_attainment\");\n    }\n\n    public String demonym() {\n        return resolve(\"demographic.demonym\");\n    }\n\n    public String sex() {\n        return resolve(\"demographic.sex\");\n    }\n\n    public String maritalStatus() {\n        return resolve(\"demographic.marital_status\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac", "name": "Zodiac", "file_path": "src/main/java/net/datafaker/providers/base/Zodiac.java", "superclasses": "", "methods": ["[]Zodiac(BaseProviders)", "[String]sign()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac.[]Zodiac(BaseProviders)", "src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac.[String]sign()"], "overrides": null, "attributes": [], "class_docstring": "\nThis class is used to generate Zodiac signs randomly.\n\n@since 1.8.0\n", "original_string": "public class Zodiac extends AbstractProvider<BaseProviders> {\n\n    protected Zodiac(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method returns a Zodiac sign\n     *\n     * @return a string of Zodiac sign\n     */\n    public String sign() {\n        return resolve(\"zodiac.signs\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "name": "PhoneNumberGenerator", "file_path": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "superclasses": "", "methods": ["[]PhoneNumberGenerator(FakeValuesService,FakerContext)", "[String]randomPhoneNumber(String,PhoneNumberType,PhoneNumberFormat)", "[Phonenumber.PhoneNumber]randomPhoneNumber(String,PhoneNumberType)", "[Phonenumber.PhoneNumber]generatePhoneNumber(String,String)", "[String]phoneNumberPattern(String,PhoneNumberType)", "[Phonemetadata.PhoneNumberDesc]getNumberDescriptionByType(String,PhoneNumberType)", "[Phonemetadata.PhoneMetadata]getPhoneMetadata(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[]PhoneNumberGenerator(FakeValuesService,FakerContext)", "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[String]randomPhoneNumber(String,PhoneNumberType,PhoneNumberFormat)", "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonenumber.PhoneNumber]randomPhoneNumber(String,PhoneNumberType)", "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonenumber.PhoneNumber]generatePhoneNumber(String,String)", "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[String]phoneNumberPattern(String,PhoneNumberType)", "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonemetadata.PhoneNumberDesc]getNumberDescriptionByType(String,PhoneNumberType)", "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonemetadata.PhoneMetadata]getPhoneMetadata(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class PhoneNumberGenerator {\n    private static final PhoneNumberUtil libPhoneNumber = PhoneNumberUtil.getInstance();\n    private static final Map<CacheKey, String> CACHE = new ConcurrentHashMap<>();\n    private static final int MAX_RETRIES = 100;\n\n    private final FakeValuesService fakeValuesService;\n    private final FakerContext context;\n\n    PhoneNumberGenerator(FakeValuesService fakeValuesService, FakerContext context) {\n        this.fakeValuesService = fakeValuesService;\n        this.context = context;\n    }\n\n    String randomPhoneNumber(String countryCodeIso2, PhoneNumberType type, PhoneNumberFormat format) {\n        Phonenumber.PhoneNumber phoneNumber = randomPhoneNumber(countryCodeIso2, type);\n        return libPhoneNumber.format(phoneNumber, format);\n    }\n\n    private Phonenumber.PhoneNumber randomPhoneNumber(String countryCodeIso2, PhoneNumberType type) {\n        String pattern = CACHE.computeIfAbsent(new CacheKey(countryCodeIso2, type),\n            (key) -> phoneNumberPattern(countryCodeIso2, type));\n        Phonenumber.PhoneNumber candidate = generatePhoneNumber(countryCodeIso2, pattern);\n\n        // in few cases, the generated phone number matches the country pattern,\n        // but still is not valid because of mismatching area code.\n        // For example, in Germany (\"DE\"), such invalid phone number is \"28978023638\".\n        for (int i = 0; i < MAX_RETRIES && !libPhoneNumber.isValidNumber(candidate); i++) {\n            candidate = generatePhoneNumber(countryCodeIso2, pattern);\n        }\n        return candidate;\n    }\n\n    private Phonenumber.PhoneNumber generatePhoneNumber(String countryCodeIso2, String phoneNumberPattern) {\n        String nationalNumber = fakeValuesService.regexify(phoneNumberPattern, context);\n        try {\n            return libPhoneNumber.parse(nationalNumber, countryCodeIso2);\n        } catch (NumberParseException e) {\n            throw new RuntimeException(\"Failed to parse generated phone number %s\".formatted(nationalNumber), e);\n        }\n    }\n\n    private String phoneNumberPattern(String countryCodeIso2, PhoneNumberType type) {\n        return getNumberDescriptionByType(countryCodeIso2, type).getNationalNumberPattern();\n    }\n\n    private Phonemetadata.PhoneNumberDesc getNumberDescriptionByType(String countryCodeIso2, PhoneNumberType type) {\n        Phonemetadata.PhoneMetadata metadata = getPhoneMetadata(countryCodeIso2);\n        return switch (type) {\n            case MOBILE -> metadata.getMobile();\n            case FIXED_LINE -> metadata.getFixedLine();\n            default -> throw new IllegalArgumentException(\"Unsupported phone number type: \" + type);\n        };\n    }\n\n    private static Phonemetadata.PhoneMetadata getPhoneMetadata(String countryCodeIso2) {\n        try {\n            Method method = libPhoneNumber.getClass().getDeclaredMethod(\"getMetadataForRegion\", String.class);\n            method.setAccessible(true);\n            Phonemetadata.PhoneMetadata metadata = (Phonemetadata.PhoneMetadata) method.invoke(libPhoneNumber, countryCodeIso2);\n            return requireNonNull(metadata, () -> \"Unsupported country code: %s\".formatted(countryCodeIso2));\n        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Failed to extract phone number metadata for region \" + countryCodeIso2, e);\n        }\n    }\n\n    private record CacheKey(\n        String countryCodeIso2,\n        PhoneNumberType phoneNumberType\n    ) {}\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final PhoneNumberUtil libPhoneNumber = PhoneNumberUtil.getInstance();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "PhoneNumberUtil", "name": "libPhoneNumber = PhoneNumberUtil.getInstance()", "syntax_pass": true}, {"attribute_expression": "private static final Map<CacheKey, String> CACHE = new ConcurrentHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<CacheKey, String>", "name": "CACHE = new ConcurrentHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_RETRIES = 100;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_RETRIES = 100", "syntax_pass": true}, {"attribute_expression": "private final FakeValuesService fakeValuesService;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FakeValuesService", "name": "fakeValuesService", "syntax_pass": true}, {"attribute_expression": "private final FakerContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FakerContext", "name": "context", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "name": "Nigeria", "file_path": "src/main/java/net/datafaker/providers/base/Nigeria.java", "superclasses": "", "methods": ["[]Nigeria(BaseProviders)", "[String]places()", "[String]name()", "[String]food()", "[String]schools()", "[String]celebrities()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[]Nigeria(BaseProviders)", "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]places()", "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]name()", "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]food()", "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]schools()", "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]celebrities()"], "overrides": null, "attributes": [], "class_docstring": "\nNigeria, officially the Federal Republic of Nigeria, is a country in West Africa.\n\n@since 1.2.0\n", "original_string": "public class Nigeria extends AbstractProvider<BaseProviders> {\n    private static final String KEY = \"nigeria\";\n\n    protected Nigeria(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String places() {\n        return resolve(KEY + \".places\");\n    }\n\n    public String name() {\n        return resolve(KEY + \".name\");\n    }\n\n    public String food() {\n        return resolve(KEY + \".food\");\n    }\n\n    public String schools() {\n        return resolve(KEY + \".schools\");\n    }\n\n    public String celebrities() {\n        return resolve(KEY + \".celebrities\");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String KEY = \"nigeria\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "KEY = \"nigeria\"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "name": "Tire", "file_path": "src/main/java/net/datafaker/providers/base/Tire.java", "superclasses": "", "methods": ["[]Tire(BaseProviders)", "[String]code()", "[String]code(String)", "[String]code(boolean)", "[String]vehicleType()", "[String]width()", "[String]aspectRatio()", "[String]construction()", "[String]rimSize()", "[String]loadIndex()", "[String]speedrating()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Tire.java.Tire.[]Tire(BaseProviders)", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]code()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]code(String)", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]code(boolean)", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]vehicleType()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]width()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]aspectRatio()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]construction()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]rimSize()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]loadIndex()", "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]speedrating()"], "overrides": null, "attributes": [], "class_docstring": "\nSources:\n     https://www.wheel-size.com/tire/\n     https://en.wikipedia.org/wiki/Tire_code\n\n@since 2.0.2\n", "original_string": "public class Tire extends AbstractProvider<BaseProviders> {\n\n    protected Tire(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Returns a Tire Code, such as 205/60R16.\n     * Which is width in mm / aspect ratio (height to width percentage) R (radial) Rim diameter.\n     * \n     * @return a Tire Code String.\n     */\n    public String code() {\n        return resolve(\"tire.code\");\n    }\n\n    /**\n     * Returns a Tire Code prefixed with the provided String.\n     * \n     * @return a Tire Code string prefixed with the provided String.\n     */\n    public String code(String prefix) {\n        return prefix + code();\n    }\n\n    /**\n     * Returns a Tire Code optionally prefixed with the default prefix (P for passenger vehicle).\n     * @param defaultPrefix if true the default prefix \"P\" will be included, otherwise it will not.\n     * \n     * @return a Tire Code string, such as P205/60R16.\n     */\n    public String code(boolean defaultPrefix) {\n        return defaultPrefix ? code(\"P\") : code();\n    }\n\n    public String vehicleType() {\n        return resolve(\"tire.vehicle_type\");\n    }\n\n    public String width() {\n        return resolve(\"tire.width\");\n    }\n\n    public String aspectRatio() {\n        return resolve(\"tire.aspect_ratio\");\n    }\n\n    public String construction() {\n        return resolve(\"tire.construction\");\n    }\n\n    public String rimSize() {\n        return resolve(\"tire.rim_size\");\n    }\n\n    public String loadIndex() {\n        return resolve(\"tire.load_index\");\n    }\n\n    public String speedrating() {\n        return resolve(\"tire.speed_rating\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name", "name": "Name", "file_path": "src/main/java/net/datafaker/providers/base/Name.java", "superclasses": "", "methods": ["[]Name(BaseProviders)", "[String]name()", "[String]nameWithMiddle()", "[String]fullName()", "[String]firstName()", "[String]femaleFirstName()", "[String]malefirstName()", "[String]lastName()", "[String]prefix()", "[String]suffix()", "[String]title()", "[String]username()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Name.java.Name.[]Name(BaseProviders)", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]name()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]nameWithMiddle()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]fullName()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]firstName()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]femaleFirstName()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]malefirstName()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]lastName()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]prefix()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]suffix()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]title()", "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]username()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Name extends AbstractProvider<BaseProviders> {\n\n    /**\n     * Internal constructor, not to be used by clients.  Instances of {@link Name} should be accessed via\n     * {@link BaseFaker#name()}.\n     */\n    protected Name(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * A multipart name composed of an optional prefix, a firstname and a lastname\n     * or other possible variances based on locale.  Examples:\n     * <ul>\n     *     <li>James Jones Jr.</li>\n     *     <li>Julie Johnson</li>\n     * </ul>\n     *\n     * @return a random name with given and family names and an optional suffix.\n     */\n    public String name() {\n        return resolve(\"name.name\");\n    }\n\n    /**\n     * A multipart name composed of an optional prefix, a given and family name,\n     * another 'firstname' for the middle name and an optional suffix such as Jr.\n     * Examples:\n     * <ul>\n     *     <li>Mrs. Ella Geraldine Fitzgerald</li>\n     *     <li>Jason Tom Sawyer Jr.</li>\n     *     <li>Helen Jessica Troy</li>\n     * </ul>\n     *\n     * @return a random name with a middle name component with optional prefix and suffix\n     */\n    public String nameWithMiddle() {\n        return resolve(\"name.name_with_middle\");\n    }\n\n    /**\n     * Returns the same value as {@link #name()}\n     *\n     * @see Name#name()\n     */\n    public String fullName() {\n        return name();\n    }\n\n    /**\n     * Returns a random 'given' name such as Aaliyah, Aaron, Abagail or Abbey\n     *\n     * @return a 'given' name such as Aaliyah, Aaron, Abagail or Abbey\n     */\n    public String firstName() {\n        return resolve(\"name.first_name\");\n    }\n\n    /**\n     * Returns a random female 'given' name.\n     *\n     * @return a female 'given' name\n     */\n    public String femaleFirstName() {\n        return resolve(\"name.female_first_name\");\n    }\n\n    /**\n     * Returns a random male 'given' name.\n     *\n     * @return a male 'given' name\n     */\n    public String malefirstName() {\n        return resolve(\"name.male_first_name\");\n    }\n\n    /**\n     * Returns a random last name such as Smith, Jones or Baldwin\n     *\n     * @return a random last name such as Smith, Jones or Baldwin\n     */\n    public String lastName() {\n        return resolve(\"name.last_name\");\n    }\n\n    /**\n     * Returns a name prefix such as Mr., Mrs., Ms., Miss, or Dr.\n     *\n     * @return a name prefix such as Mr., Mrs., Ms., Miss, or Dr.\n     */\n    public String prefix() {\n        return resolve(\"name.prefix\");\n    }\n\n    /**\n     * Returns a name suffix such as Jr., Sr., I, II, III, IV, V, MD, DDS, PhD or DVM\n     *\n     * @return a name suffix such as Jr., Sr., I, II, III, IV, V, MD, DDS, PhD or DVM\n     */\n    public String suffix() {\n        return resolve(\"name.suffix\");\n    }\n\n    /**\n     * A three part title composed of a descriptor level and job.  Some examples are :\n     * <ul>\n     *   <li>(template) {descriptor} {level} {job}</li>\n     *   <li>Lead Solutions Specialist</li>\n     *   <li>National Marketing Manager</li>\n     *   <li>Central Response Liaison</li>\n     * </ul>\n     *\n     * @return a random three part job title\n     */\n    public String title() {\n        return String.join(\" \",\n            resolve(\"name.title.descriptor\"),\n            resolve(\"name.title.level\"),\n            resolve(\"name.title.job\")\n        );\n    }\n\n    /**\n     * A lowercase username composed of the first_name and last_name joined with a '.'. Some examples are:\n     * <ul>\n     *     <li>(template) {@link #firstName()}.{@link #lastName()}</li>\n     *     <li>jim.jones</li>\n     *     <li>jason.leigh</li>\n     *     <li>tracy.jordan</li>\n     * </ul>\n     *\n     * @deprecated Use Internet.username() instead.\n     * @return a random two part username.\n     * @see Name#firstName()\n     * @see Name#lastName()\n     */\n    @Deprecated\n    public String username() {\n        return faker.internet().username();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/CPF.java.CPF", "name": "CPF", "file_path": "src/main/java/net/datafaker/providers/base/CPF.java", "superclasses": "", "methods": ["[]CPF(BaseProviders)", "[String]valid()", "[String]valid(boolean)", "[String]invalid()", "[String]invalid(boolean)"], "method_uris": ["src/main/java/net/datafaker/providers/base/CPF.java.CPF.[]CPF(BaseProviders)", "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]valid()", "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]valid(boolean)", "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]invalid()", "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]invalid(boolean)"], "overrides": null, "attributes": [], "class_docstring": "\nThe CPF number (Cadastro de Pessoas F\u00edsicas, [sepe\u02c8\u025bfi]; Portuguese for \"Natural Persons Register\")\nis the Brazilian individual taxpayer registry identification, since its creation in 1965. This\nnumber is attributed by the Brazilian Federal Revenue to Brazilians and resident aliens who,\ndirectly or indirectly, pay taxes in Brazil. It's an 11-digit number in the format 000.000.000-00.\n\n@see <a href=\"https://en.wikipedia.org/wiki/CPF_number\">CPF</a>\n@since 0.8.0\n", "original_string": "public class CPF extends AbstractProvider<BaseProviders> {\n\n    protected CPF(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Return valid and formatted\n     *\n     * @return a valid CPF\n     * @see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n     */\n    public String valid() {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, true, true);\n    }\n\n    /**\n     * Return valid and formatted\n     *\n     * @param formatted a (un)formatted CPF\n     * @return a valid CPF\n     * @see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n     */\n    public String valid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, formatted, true);\n    }\n\n    /**\n     * Return invalid and formatted\n     *\n     * @return an invalid CPF\n     * @see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n     */\n    public String invalid() {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, true, false);\n    }\n\n    /**\n     * Return invalid and formatted\n     *\n     * @param formatted a (un)formatted CPF\n     * @return an invalid CPF\n     * @see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n     */\n    public String invalid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, formatted, false);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Passport.java.Passport", "name": "Passport", "file_path": "src/main/java/net/datafaker/providers/base/Passport.java", "superclasses": "", "methods": ["[]Passport(BaseProviders)", "[String]valid()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Passport.java.Passport.[]Passport(BaseProviders)", "src/main/java/net/datafaker/providers/base/Passport.java.Passport.[String]valid()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.9.0\n", "original_string": "public class Passport extends AbstractProvider<BaseProviders> {\n\n    protected Passport(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String valid() {\n        return faker.regexify(faker.resolve(\"passport.valid\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain", "name": "Mountain", "file_path": "src/main/java/net/datafaker/providers/base/Mountain.java", "superclasses": "", "methods": ["[]Mountain(BaseProviders)", "[String]name()", "[String]range()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Mountain.java.Mountain.[]Mountain(BaseProviders)", "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain.[String]name()", "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain.[String]range()"], "overrides": null, "attributes": [], "class_docstring": "\nA generator for Mountain names and ranges.\n\n@since 1.1.0\n", "original_string": "public class Mountain extends AbstractProvider<BaseProviders> {\n\n    protected Mountain(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"mountain.name\");\n    }\n\n    public String range() {\n        return resolve(\"mountain.range\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "name": "Cannabis", "file_path": "src/main/java/net/datafaker/providers/base/Cannabis.java", "superclasses": "", "methods": ["[]Cannabis(BaseProviders)", "[String]strains()", "[String]cannabinoidAbbreviations()", "[String]cannabinoids()", "[String]terpenes()", "[String]medicalUses()", "[String]healthBenefits()", "[String]categories()", "[String]types()", "[String]buzzwords()", "[String]brands()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[]Cannabis(BaseProviders)", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]strains()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]cannabinoidAbbreviations()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]cannabinoids()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]terpenes()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]medicalUses()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]healthBenefits()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]categories()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]types()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]buzzwords()", "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]brands()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Cannabis extends AbstractProvider<BaseProviders> {\n\n    protected Cannabis(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String strains() {\n        return resolve(\"cannabis.strains\");\n    }\n\n    public String cannabinoidAbbreviations() {\n        return resolve(\"cannabis.cannabinoid_abbreviations\");\n    }\n\n    public String cannabinoids() {\n        return resolve(\"cannabis.cannabinoids\");\n    }\n\n    public String terpenes() {\n        return resolve(\"cannabis.terpenes\");\n    }\n\n    public String medicalUses() {\n        return resolve(\"cannabis.medical_uses\");\n    }\n\n    public String healthBenefits() {\n        return resolve(\"cannabis.health_benefits\");\n    }\n\n    public String categories() {\n        return resolve(\"cannabis.categories\");\n    }\n\n    public String types() {\n        return resolve(\"cannabis.types\");\n    }\n\n    public String buzzwords() {\n        return resolve(\"cannabis.buzzwords\");\n    }\n\n    public String brands() {\n        return resolve(\"cannabis.brands\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "name": "BaseFaker", "file_path": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "superclasses": "", "methods": ["[]BaseFaker()", "[]BaseFaker(Locale)", "[]BaseFaker(Random)", "[]BaseFaker(Locale,Random)", "[]BaseFaker(Locale,RandomService)", "[]BaseFaker(FakeValuesService,FakerContext)", "[FakerContext]getContext()", "[T]doWith(Callable<T>,Locale)", "[T]doWith(Callable<T>,long)", "[T]doWith(Callable<T>,Locale,long)", "[String]numerify(String)", "[String]letterify(String)", "[String]letterify(String,boolean)", "[String]bothify(String)", "[String]bothify(String,boolean)", "[String]regexify(String)", "[String]examplify(String)", "[String]templatify(String,char)", "[String]templatify(String,Map<Character, String[]>)", "[String]csv(int)", "[String]csv(String,char,boolean,int)", "[String]json()", "[String]jsona()", "[RandomService]random()", "[FakeValuesService]fakeValuesService()", "[void]addPath(Locale,Path)", "[void]addUrl(Locale,URL)", "[T]populate(Class<T>)", "[T]populate(Class<T>,Schema<Object, ?>)", "[AP]getProvider(Class<AP>,Function<PR, AP>)", "[AP]getProvider(Class<AP>,Function<PR, AP>,PR)", "[FakeSequence.Builder<T>]collection()", "[FakeSequence.Builder<T>]collection()", "[FakeSequence.Builder<T>]collection(List<Supplier<T>>)", "[FakeSequence.Builder<T>]stream()", "[FakeSequence.Builder<T>]stream()", "[FakeSequence.Builder<T>]stream(List<Supplier<T>>)", "[String]resolve(String)", "[String]resolve(String,Supplier<String>)", "[String]expression(String)", "[B]getFaker()", "[Method]getMethod(AbstractProvider<?>,String)", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Locale)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Random)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Locale,Random)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Locale,RandomService)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(FakeValuesService,FakerContext)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakerContext]getContext()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]doWith(Callable<T>,Locale)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]doWith(Callable<T>,long)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]doWith(Callable<T>,Locale,long)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]numerify(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]letterify(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]letterify(String,boolean)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]bothify(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]bothify(String,boolean)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]regexify(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]examplify(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]templatify(String,char)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]templatify(String,Map<Character, String[]>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]csv(int)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]csv(String,char,boolean,int)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]json()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]jsona()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[RandomService]random()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeValuesService]fakeValuesService()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[void]addPath(Locale,Path)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[void]addUrl(Locale,URL)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]populate(Class<T>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]populate(Class<T>,Schema<Object, ?>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[AP]getProvider(Class<AP>,Function<PR, AP>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[AP]getProvider(Class<AP>,Function<PR, AP>,PR)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]collection()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]collection()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]collection(List<Supplier<T>>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]stream()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]stream()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]stream(List<Supplier<T>>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]resolve(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]resolve(String,Supplier<String>)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]expression(String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[B]getFaker()", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[Method]getMethod(AbstractProvider<?>,String)", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "\nProvides utility methods for generating fake strings, such as names, phone\nnumbers, addresses. generate random strings with given patterns\n\n@author ren\n", "original_string": "public class BaseFaker implements BaseProviders {\n    private final FakerContext context;\n    private final FakeValuesService fakeValuesService;\n    private final Map<Class<?>, AbstractProvider<?>> providersCache = new IdentityHashMap<>();\n\n    public BaseFaker() {\n        this(Locale.ENGLISH);\n    }\n\n    public BaseFaker(Locale locale) {\n        this(locale, (Random) null);\n    }\n\n    public BaseFaker(Random random) {\n        this(Locale.ENGLISH, random);\n    }\n\n    public BaseFaker(Locale locale, Random random) {\n        this(locale, new RandomService(random));\n    }\n\n    public BaseFaker(Locale locale, RandomService randomService) {\n        this(new FakeValuesService(), new FakerContext(locale, randomService));\n    }\n\n    public BaseFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        this.fakeValuesService = fakeValuesService;\n        this.context = context;\n        fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n    }\n\n    public FakerContext getContext() {\n        return context;\n    }\n\n    public <T> T doWith(Callable<T> callable, Locale locale) {\n        final Locale current = context.getLocale();\n        T result;\n        try {\n            context.setCurrentLocale(locale);\n            fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n            result = callable.call();\n            return result;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            context.setCurrentLocale(current);\n            fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n        }\n    }\n\n    public <T> T doWith(Callable<T> callable, long seed) {\n        final RandomService current = context.getRandomService();\n        T result;\n        try {\n            context.setRandomService(new RandomService(new Random(seed)));\n            result = callable.call();\n            return result;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            context.setRandomService(current);\n        }\n    }\n\n    public <T> T doWith(Callable<T> callable, Locale locale, long seed) {\n        final Locale currentLocale = context.getLocale();\n        final RandomService currentRandomService = context.getRandomService();\n        T result;\n        try {\n            context.setRandomService(new RandomService(new Random(seed)));\n            context.setCurrentLocale(locale);\n            result = callable.call();\n            return result;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            context.setRandomService(currentRandomService);\n            context.setCurrentLocale(currentLocale);\n        }\n    }\n\n\n    /**\n     * Returns a string with the '#' characters in the parameter replaced with random digits between 0-9 inclusive or\n     * random digits in the range from 1-9 when \u00d8 (not zero) is used.\n     * <p>\n     * For example, the string \"ABC##EFG\" could be replaced with a string like \"ABC99EFG\" and the\n     * string \"\u00d8##\" with a value like \"149\".\n     *\n     * @param numberString Template for string generation\n     * @return Generated string\n     */\n    public String numerify(String numberString) {\n        return fakeValuesService.numerify(numberString, context);\n    }\n\n    /**\n     * Returns a string with the '?' characters in the parameter replaced with random alphabetic\n     * characters.\n     * <p>\n     * For example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n     *\n     * @param letterString Template for string generation\n     * @return Generated string.\n     */\n    public String letterify(String letterString) {\n        return fakeValuesService.letterify(letterString, context);\n    }\n\n    /**\n     * Returns a string with the '?' characters in the parameter replaced with random alphabetic\n     * characters.\n     * <p>\n     * For example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n     */\n    public String letterify(String letterString, boolean isUpper) {\n        return fakeValuesService.letterify(letterString, context, isUpper);\n    }\n\n    /**\n     * Applies both a {@link #numerify(String)} and a {@link #letterify(String)}\n     * over the incoming string.\n     */\n    public String bothify(String string) {\n        return fakeValuesService.bothify(string, context);\n    }\n\n    /**\n     * Applies both a {@link #numerify(String)} and a {@link #letterify(String)}\n     * over the incoming string.\n     */\n    public String bothify(String string, boolean isUpper) {\n        return fakeValuesService.bothify(string, context, isUpper);\n    }\n\n    /**\n     * Generates a String that matches the given regular expression.\n     */\n    public String regexify(String regex) {\n        return fakeValuesService.regexify(regex, context);\n    }\n\n    /**\n     * Generates a String by example. The output string will have the same pattern as the input string.\n     * <p>\n     * For example:\n     * \"AAA\" becomes \"KRA\"\n     * \"abc\" becomes \"uio\"\n     * \"948\" becomes \"345\"\n     * \"A19c\" becomes \"Z20d\"\n     *\n     * @param example The input string\n     * @return The output string based on the input pattern\n     */\n    public String examplify(String example) {\n        return fakeValuesService.examplify(example, context);\n    }\n\n    /**\n     * Returns a string with the char2replace characters in the parameter replaced with random option from available options.\n     * <p>\n     * For example, the string \"ABC??EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\n     * if passed options are new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"}.\n     *\n     * @param string       Template for string generation\n     * @param char2replace Char to replace\n     * @param options      Options to use while filling the template\n     * @return Generated string\n     */\n    public String templatify(String string, char char2replace, String... options) {\n        return fakeValuesService().templatify(string, char2replace, context, options);\n    }\n\n    /**\n     * Returns a string with the characters in the keys of optionsMap parameter replaced with random option from values.\n     *\n     * <p>\n     * For example, the string \"ABC$$EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\n     * if passed for key '$' there is value new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"} in optionsMap\n     *\n     * @param string     Template for string generation\n     * @param optionsMap Map with replacement rules\n     * @return Generated string\n     */\n    public String templatify(String string, Map<Character, String[]> optionsMap) {\n        return fakeValuesService().templatify(string, optionsMap, context);\n    }\n\n    /**\n     * Returns a string with generated csv based number of lines and column expressions.\n     * This method will use comma as default delimiter, always prints header and double quote as default quote.\n     *\n     * <p>\n     * For example, it could generate\n     * \"name_column\",\"last_name_column\"\n     * \"Sabrina\",\"Kihn\"\n     * <p>\n     * for expression {@code faker.expression(\"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n     *\n     * @param limit             Number of lines\n     * @param columnExpressions Even number of expressions.\n     *                          The odd numbers args are used for columns names, and even for column values.\n     * @return Generated string\n     */\n    public String csv(int limit, String... columnExpressions) {\n        return fakeValuesService().csv(limit, columnExpressions);\n    }\n\n    /**\n     * Returns a string with generated csv based number of lines and column expressions.\n     *\n     * <p>\n     * For example, it could generate\n     * \"Thad\" ### \"Crist\"\n     * \"Kathryne\" ### \"Wuckert\"\n     * \"Sybil\" ### \"Connelly\"\n     * <p>\n     * for expression {@code faker.expression(\"#{csv ' ### ','\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n     *\n     * @param separator         Delimiter to use\n     * @param quote             Quote to use\n     * @param withHeader        Print header or not\n     * @param limit             Number of lines\n     * @param columnExpressions Even number of expressions.\n     *                          The odd numbers args are used for columns names, and even for column values.\n     * @return Generated string\n     */\n    public String csv(String separator, char quote, boolean withHeader, int limit, String... columnExpressions) {\n        return fakeValuesService().csv(separator, quote, withHeader, limit, columnExpressions);\n    }\n\n    public String json(String... fieldExpressions) {\n        return fakeValuesService().json(fieldExpressions);\n    }\n\n    public String jsona(String... fieldExpressions) {\n        return fakeValuesService().jsona(fieldExpressions);\n    }\n\n    public RandomService random() {\n        return this.context.getRandomService();\n    }\n\n    public FakeValuesService fakeValuesService() {\n        return this.fakeValuesService;\n    }\n\n    /**\n     * Allows to add paths to files with custom data. Data should be in YAML format.\n     *\n     * @param locale the locale for which a path is going to be added.\n     * @param path   path to a file with YAML structure\n     * @throws IllegalArgumentException in case of invalid path\n     */\n    public void addPath(Locale locale, Path path) {\n        fakeValuesService().addPath(locale, path);\n    }\n\n    /**\n     * Allows to add urls of files with custom data. Data should be in YAML format.\n     *\n     * @param locale the locale for which an url is going to be added.\n     * @param url   url of a file with YAML structure\n     * @throws IllegalArgumentException in case of invalid url\n     */\n\n    public void addUrl(Locale locale, URL url) {\n        fakeValuesService().addUrl(locale, url);\n    }\n\n    public static <T> T populate(Class<T> clazz) {\n        var fakeFactory = FakeResolver.of(clazz);\n        return fakeFactory.generate(null);\n    }\n\n    public static <T> T populate(Class<T> clazz, Schema<Object, ?> schema) {\n        var fakeFactory = FakeResolver.of(clazz);\n        return fakeFactory.generate(schema);\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(\n        Class<AP> clazz, Function<PR, AP> valueSupplier) {\n        return (AP) providersCache.computeIfAbsent(clazz, (klass) -> valueSupplier.apply(getFaker()));\n    }\n\n    /**\n     * This method is not needed anymore, don't use it.\n     * @deprecated Use non-static method {@link BaseFaker#getProvider(Class, Function)} instead.\n     */\n    @Deprecated\n    public static <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(Class<AP> clazz, Function<PR, AP> valueSupplier, PR faker) {\n        return faker.getProvider(clazz, valueSupplier);\n    }\n\n    /**\n     * @return builder to build {@code FakeCollection}\n     */\n    public <T> FakeSequence.Builder<T> collection() {\n        return new FakeCollection.Builder<T>().faker(this);\n    }\n\n    @SafeVarargs\n    public final <T> FakeSequence.Builder<T> collection(Supplier<T>... suppliers) {\n        return new FakeCollection.Builder<>(suppliers).faker(this);\n    }\n\n    public final <T> FakeSequence.Builder<T> collection(List<Supplier<T>> suppliers) {\n        return new FakeCollection.Builder<>(suppliers).faker(this);\n    }\n\n    /**\n     * @return builder to build {@code FakeStream}\n     */\n    public <T> FakeSequence.Builder<T> stream() {\n        return new FakeStream.Builder<T>().faker(this);\n    }\n\n    @SafeVarargs\n    public final <T> FakeSequence.Builder<T> stream(Supplier<T>... suppliers) {\n        return new FakeStream.Builder<>(suppliers).faker(this);\n    }\n\n    public final <T> FakeSequence.Builder<T> stream(List<Supplier<T>> suppliers) {\n        return new FakeStream.Builder<>(suppliers).faker(this);\n    }\n\n    public String resolve(String key) {\n        return this.fakeValuesService.resolve(key, this, this, context);\n    }\n\n    public String resolve(String key, Supplier<String> message) {\n        return this.fakeValuesService.resolve(key, this, this, message, context);\n    }\n\n    /**\n     * Allows the evaluation of native YML expressions to allow you to build your\n     * own.\n     * <p>\n     * The following are valid expressions:\n     * <ul>\n     * <li>#{regexify '(a|b){2,3}'}</li>\n     * <li>#{regexify '\\\\.\\\\*\\\\?\\\\+'}</li>\n     * <li>#{bothify '????','false'}</li>\n     * <li>#{Name.first_name} #{Name.first_name} #{Name.last_name}</li>\n     * <li>#{number.number_between '1','10'}</li>\n     * </ul>\n     *\n     * @param expression (see examples above)\n     * @return the evaluated string expression\n     * @throws RuntimeException if unable to evaluate the expression\n     */\n    public String expression(String expression) {\n        return this.fakeValuesService.expression(expression, this, getContext());\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public final <B extends ProviderRegistration> B getFaker() {\n        return (B) this;\n    }\n\n    public static Method getMethod(AbstractProvider<?> ap, String methodName) {\n        return ap == null ? null : ObjectMethods.getMethodByName(ap, methodName);\n    }\n\n    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"@\" + Integer.toHexString(hashCode());\n    }\n}", "super_interfaces": ["BaseProviders"], "fields": [{"attribute_expression": "private final FakerContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FakerContext", "name": "context", "syntax_pass": true}, {"attribute_expression": "private final FakeValuesService fakeValuesService;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FakeValuesService", "name": "fakeValuesService", "syntax_pass": true}, {"attribute_expression": "private final Map<Class<?>, AbstractProvider<?>> providersCache = new IdentityHashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<Class<?>, AbstractProvider<?>>", "name": "providersCache = new IdentityHashMap<>()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns", "name": "Pronouns", "file_path": "src/main/java/net/datafaker/providers/base/Pronouns.java", "superclasses": "", "methods": ["[]Pronouns(BaseProviders)", "[String]subjective()", "[String]objective()", "[String]possessive()", "[String]reflexive()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[]Pronouns(BaseProviders)", "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]subjective()", "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]objective()", "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]possessive()", "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]reflexive()"], "overrides": null, "attributes": [], "class_docstring": "\nThis class generates gender neutral pronouns\n@since 2.2.0\n", "original_string": "public class Pronouns extends AbstractProvider<BaseProviders> {\n\n    protected Pronouns(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generates a gender neutral subjective pronoun\n     * @return a gender neutral subjective pronoun\n     */\n    public String subjective() {\n        return resolve(\"pronouns.subjective\");\n    }\n\n    /**\n     * Generates a gender neutral objective pronoun\n     * @return a gender neutral objective pronoun\n     */\n    public String objective() {\n        return resolve(\"pronouns.objective\");\n    }\n\n    /**\n     * Generates a gender neutral possessive pronoun\n     * @return a gender neutral possessive pronoun\n     */\n    public String possessive() {\n        return resolve(\"pronouns.possessive\");\n    }\n\n    /**\n     * Generates a gender neutral reflexive pronoun\n     * @return a gender neutral reflexive pronoun\n     */\n    public String reflexive() {\n        return resolve(\"pronouns.reflexive\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "name": "Stock", "file_path": "src/main/java/net/datafaker/providers/base/Stock.java", "superclasses": "", "methods": ["[]Stock(BaseProviders)", "[String]nsdqSymbol()", "[String]nyseSymbol()", "[String]nseSymbol()", "[String]lseSymbol()", "[String]exchanges()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Stock.java.Stock.[]Stock(BaseProviders)", "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]nsdqSymbol()", "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]nyseSymbol()", "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]nseSymbol()", "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]lseSymbol()", "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]exchanges()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Stock extends AbstractProvider<BaseProviders> {\n\n    protected Stock(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String nsdqSymbol() {\n        return resolve(\"stock.symbol_nsdq\");\n    }\n\n    public String nyseSymbol() {\n        return resolve(\"stock.symbol_nyse\");\n    }\n\n    public String nseSymbol() {\n        return resolve(\"stock.symbol_nse\");\n    }\n\n    public String lseSymbol() {\n        return resolve(\"stock.symbol_lse\");\n    }\n\n    public String exchanges() {\n        return resolve(\"stock.exchanges\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage", "name": "ProgrammingLanguage", "file_path": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java", "superclasses": "", "methods": ["[]ProgrammingLanguage(BaseProviders)", "[String]name()", "[String]creator()"], "method_uris": ["src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage.[]ProgrammingLanguage(BaseProviders)", "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage.[String]name()", "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage.[String]creator()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class ProgrammingLanguage extends AbstractProvider<BaseProviders> {\n\n    public ProgrammingLanguage(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"programming_language.name\");\n    }\n\n    public String creator() {\n        return resolve(\"programming_language.creator\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "name": "Internet", "file_path": "src/main/java/net/datafaker/providers/base/Internet.java", "superclasses": "", "methods": ["[]Internet(BaseProviders)", "[String]username()", "[String]emailAddress()", "[String]emailAddress(String)", "[String]safeEmailAddress()", "[String]safeEmailAddress(String)", "[String]emailAddress(String,String)", "[String]emailSubject()", "[String]stripAccents(String)", "[String]domainName()", "[String]domainWord()", "[String]domainSuffix()", "[String]url()", "[String]url(boolean,boolean,boolean,boolean,boolean,boolean)", "[String]webdomain()", "[String]image()", "[String]image(int,int)", "[String]image(int,int,String)", "[String]httpMethod()", "[String]password()", "[String]password(boolean)", "[String]password(int,int)", "[String]password(int,int,boolean)", "[String]password(int,int,boolean,boolean)", "[String]password(int,int,boolean,boolean,boolean)", "[int]port()", "[String]macAddress(String)", "[String]macAddress()", "[String]ipV4Address()", "[InetAddress]getIpV4Address()", "[String]privateIpV4Address()", "[InetAddress]getPrivateIpV4Address()", "[String]publicIpV4Address()", "[InetAddress]getPublicIpV4Address()", "[String]ipV4Cidr()", "[String]ipV6Address()", "[InetAddress]getIpV6Address()", "[String]ipV6Cidr()", "[String]slug()", "[String]slug(List<String>,String)", "[String]uuidv3()", "[String]uuidv4()", "[String]uuidv7()", "[String]uuid()", "[T]random(T[])", "[String]userAgent(UserAgent)", "[String]userAgent()", "[String]botUserAgent(BotUserAgent)", "[String]botUserAgentAny()", "[InetAddress]inet4Address(byte,byte,byte,byte)", "[InetAddress]inet6Address(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Internet.java.Internet.[]Internet(BaseProviders)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]username()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailAddress()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailAddress(String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]safeEmailAddress()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]safeEmailAddress(String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailAddress(String,String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailSubject()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]stripAccents(String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]domainName()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]domainWord()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]domainSuffix()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]url()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]url(boolean,boolean,boolean,boolean,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]webdomain()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]image()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]image(int,int)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]image(int,int,String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]httpMethod()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(boolean)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int,boolean)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int,boolean,boolean,boolean)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[int]port()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]macAddress(String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]macAddress()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV4Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getIpV4Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]privateIpV4Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getPrivateIpV4Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]publicIpV4Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getPublicIpV4Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV4Cidr()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV6Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getIpV6Address()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV6Cidr()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]slug()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]slug(List<String>,String)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuidv3()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuidv4()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuidv7()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuid()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[T]random(T[])", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]userAgent(UserAgent)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]userAgent()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]botUserAgent(BotUserAgent)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]botUserAgentAny()", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]inet4Address(byte,byte,byte,byte)", "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]inet6Address(String)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Internet extends AbstractProvider<BaseProviders> {\n    private static final Pattern COLON = Pattern.compile(\":\");\n    private static final List<String> HTTP_SCHEMES = List.of(\"http://\", \"https://\");\n\n    protected Internet(BaseProviders faker) {\n        super(faker);\n    }\n\n\n    /**\n     * A lowercase username composed of the first_name and last_name joined with a '.'. Some examples are:\n     * <ul>\n     *     <li>(template) {@link Name#firstName()}.{@link Name#lastName()}</li>\n     *     <li>jim.jones</li>\n     *     <li>jason.leigh</li>\n     *     <li>tracy.jordan</li>\n     * </ul>\n     *\n     * @return a random two part username.\n     * @see Name#firstName()\n     * @see Name#lastName()\n     */\n    public String username() {\n        StringBuilder result = new StringBuilder();\n        final Name name = faker.name();\n        final String firstName = name.firstName().toLowerCase(faker.getContext().getLocale())\n            + \".\" + name.lastName().toLowerCase(faker.getContext().getLocale());\n        for (int i = 0; i < firstName.length(); i++) {\n            final char c = firstName.charAt(i);\n            if (c == '\\'' || Character.isWhitespace(c)) {\n                continue;\n            }\n            result.append(c);\n        }\n        return result.toString();\n    }\n\n    public String emailAddress() {\n        return emailAddress(faker.internet().username());\n    }\n\n    public String emailAddress(String localPart) {\n        return emailAddress(localPart, FakerIDN.toASCII(faker.resolve(\"internet.free_email\")));\n    }\n\n    public String safeEmailAddress() {\n        return safeEmailAddress(faker.internet().username());\n    }\n\n    public String safeEmailAddress(String localPart) {\n        return emailAddress(localPart, FakerIDN.toASCII(faker.resolve(\"internet.safe_email\")));\n    }\n\n    private String emailAddress(String localPart, String domain) {\n        return String.join(\"\", stripAccents(localPart), \"@\", domain);\n    }\n\n    public String emailSubject() {\n        return resolve(\"internet.email_subject\");\n    }\n\n    public static final Pattern DIACRITICS_AND_FRIENDS\n        = Pattern.compile(\"[\\\\p{InCombiningDiacriticalMarks}\\\\p{IsLm}\\\\p{IsSk}]+\");\n\n    private String stripAccents(String input) {\n        // strip accents from input\n        String str = Normalizer.normalize(input, Normalizer.Form.NFD);\n        str = DIACRITICS_AND_FRIENDS.matcher(str).replaceAll(\"\");\n        return str;\n    }\n\n    public String domainName() {\n        return domainWord() + \".\" + domainSuffix();\n    }\n\n    public String domainWord() {\n        return FakerIDN.toASCII(\n            faker.name().lastName().toLowerCase(faker.getContext().getLocale()).replace(\"'\", \"\"));\n    }\n\n    public String domainSuffix() {\n        return resolve(\"internet.domain_suffix\");\n    }\n\n    /**\n     * Returns a string representing a web URL, randomly including: http/https scheme, port, path\n     * elements (2 or none), file element (1 or none), params (2 or none), anchor (1 or none).\n     *\n     * @return a web URL\n     * @since 2.0.0\n     */\n    public String url() {\n        final byte[] bts = faker.random().nextRandomBytes(6);\n        return url(bts[0] % 2 == 0, bts[1] % 2 == 0,\n            bts[2] % 2 == 0, bts[3] % 2 == 0,\n            bts[4] % 2 == 0, bts[5] % 2 == 0);\n    }\n\n    /**\n     * Returns a string representing a web URL, with various elements controlled by the caller.\n     *\n     * @param schemeChoice if true will be random http or https, if false will be https\n     * @param portChoice   if true a random port will be included, if false no port will be included\n     * @param pathChoice   if true two random path elements will be included, if false no path elements will be included\n     * @param fileChoice   if true the path will end with a random word element instead of a slash, if false it will end with a slash\n     * @param paramsChoice if true two random name value pairs will be included, if false no params will be included\n     * @param anchorChoice if true a random anchor will be included, if false no anchor will be included\n     * @return a web URL\n     * @since 2.0.0\n     */\n    public String url(boolean schemeChoice, boolean portChoice, boolean pathChoice, boolean fileChoice, boolean paramsChoice, boolean anchorChoice) {\n        String scheme = schemeChoice ? HTTP_SCHEMES.get(faker.random().nextInt(0, 1)) : \"https://\";\n        String port = portChoice ? (\":\" + port()) : \"\";\n        String path = pathChoice ? (\"/\" + slug(faker.lorem().words(2), \"/\")) : \"/\";\n        String file = fileChoice ? faker.lorem().words(1).get(0) : \"\";\n        String params = paramsChoice ? (\"?\" + slug(faker.lorem().words(2), \"=\") + \"&\" + slug(faker.lorem().words(2), \"=\")) : \"\";\n        String anchor = anchorChoice ? (\"#\" + faker.lorem().words(1).get(0)) : \"\";\n        return scheme + webdomain() + port + path + file + params + anchor;\n    }\n\n    /**\n     * Returns a web domain.\n     *\n     * @return a web domain in the form \"www.example.com\"\n     * @since 2.0.0\n     */\n    public String webdomain() {\n        return String.join(\"\",\n            \"www\", \".\",\n            FakerIDN.toASCII(\n                faker.name().firstName().toLowerCase(\n                    faker.getContext().getLocale()).replace(\"'\", \"\") + \"-\" +\n                    domainWord()\n            ),\n            \".\",\n            domainSuffix()\n        );\n    }\n\n    public String image() {\n        String[] dimension = resolve(\"internet.image_dimension\").split(\"x\");\n        if (dimension.length == 0) {\n            return \"\";\n        } else {\n            return image(Integer.parseInt(dimension[0].trim()), Integer.parseInt(dimension[1].trim()));\n        }\n    }\n\n    public String image(int width, int height) {\n        return \"https://picsum.photos/%s/%s\".formatted(width, height);\n    }\n\n    public String image(int width, int height, String seed) {\n        return \"https://picsum.photos/seed/%s/%s/%s\".formatted(seed, width, height);\n    }\n\n    public String httpMethod() {\n        return resolve(\"internet.http_method\");\n    }\n\n    public String password() {\n        return password(8, 16);\n    }\n\n    public String password(boolean includeDigit) {\n        return password(8, 16, false, false, includeDigit);\n    }\n\n    public String password(int minimumLength, int maximumLength) {\n        return password(minimumLength, maximumLength, false);\n    }\n\n    public String password(int minimumLength, int maximumLength, boolean includeUppercase) {\n        return password(minimumLength, maximumLength, includeUppercase, false);\n    }\n\n    public String password(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial) {\n        return password(minimumLength, maximumLength, includeUppercase, includeSpecial, true);\n    }\n\n    public String password(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        return faker.text().text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n    }\n\n    /**\n     * Returns a port number between 0 and 65535\n     *\n     * @return a port number\n     */\n    public int port() {\n        return faker.random().nextInt(0, 65535);\n    }\n\n    /**\n     * <p>Returns a MAC address in the following format: 6-bytes in MM:MM:MM:SS:SS:SS format.</p>\n     *\n     * @param prefix a prefix to put on the front of the address\n     * @return a correctly formatted MAC address\n     */\n    public String macAddress(String prefix) {\n        final String tmp = (prefix == null) ? \"\" : prefix;\n        final int prefixLength = tmp.trim().isEmpty()\n            ? 0\n            : COLON.split(tmp).length;\n\n        final StringBuilder out = new StringBuilder(tmp);\n        for (int i = 0; i < 6 - prefixLength; i++) {\n            if (!out.isEmpty()) {\n                out.append(':');\n            }\n            out.append(Integer.toHexString(faker.random().nextInt(16)));\n            out.append(Integer.toHexString(faker.random().nextInt(16)));\n        }\n        return out.toString();\n    }\n\n    /**\n     * @see Internet#macAddress(String)\n     */\n    public String macAddress() {\n        return macAddress(\"\");\n    }\n\n    /**\n     * returns an IPv4 address in dot separated octets.\n     *\n     * @return a correctly formatted IPv4 address.\n     */\n    public String ipV4Address() {\n        return getIpV4Address().getHostAddress();\n    }\n\n    /**\n     * returns an IPv4 address.\n     *\n     * @return an IPv4 address.\n     */\n    public InetAddress getIpV4Address() {\n        return inet4Address((byte) (faker.random().nextInt(254) + 2), (byte) (faker.random().nextInt(254) + 2), (byte) (faker.random().nextInt(254) + 2), (byte) (faker.random().nextInt(254) + 2));\n    }\n\n    /**\n     * @return a valid private IPV4 address in dot notation\n     */\n    public String privateIpV4Address() {\n        return getPrivateIpV4Address().getHostAddress();\n    }\n\n    /**\n     * @return a private IPV4 address\n     */\n    public InetAddress getPrivateIpV4Address() {\n        final Byte[] PRIVATE_FIRST_OCTET = {10, 127, (byte) 169, (byte) 192, (byte) 172};\n        final Byte[] PRIVATE_SECOND_OCTET_172 = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};\n\n        final RandomService r = faker.random();\n        byte first = random(PRIVATE_FIRST_OCTET),\n            second = (byte) r.nextInt(256),\n            third = (byte) r.nextInt(256),\n            fourth = (byte) r.nextInt(256);\n\n        switch (first) {\n            case (byte) 172 -> second = random(PRIVATE_SECOND_OCTET_172);\n            case (byte) 192 -> second = (byte) 168;\n            case (byte) 169 -> second = (byte) 254;\n        }\n        return inet4Address(first, second, third, fourth);\n    }\n\n    /**\n     * @return a valid public IPV4 address in dot notation\n     */\n    public String publicIpV4Address() {\n        return getPublicIpV4Address().getHostAddress();\n    }\n\n    /**\n     * @return a valid public IPV4 address\n     */\n    public InetAddress getPublicIpV4Address() {\n        final RandomService r = faker.random();\n\n        final byte[] PRIVATE_FIRST_OCTET = {10, 127, (byte) 169, (byte) 192, (byte) 172};\n\n        byte first = (byte) r.nextInt(256),\n            second = (byte) r.nextInt(256),\n            third = (byte) r.nextInt(256),\n            fourth = (byte) r.nextInt(256);\n\n        while (Arrays.binarySearch(PRIVATE_FIRST_OCTET, first) > 0) {\n            first = (byte) r.nextInt(256);\n        }\n        return inet4Address(first, second, third, fourth);\n    }\n\n    /**\n     * @return a valid IPV4 CIDR\n     */\n    public String ipV4Cidr() {\n        return ipV4Address() +\n            '/' +\n            (faker.random().nextInt(31) + 1);\n    }\n\n    /**\n     * <p>Returns an IPv6 address in hh:hh:hh:hh:hh:hh:hh:hh format.</p>\n     *\n     * @return a correctly formatted IPv6 address.\n     */\n    public String ipV6Address() {\n        return getIpV6Address().getHostAddress();\n    }\n\n    /**\n     * <p>Returns an IPv6 address in hh:hh:hh:hh:hh:hh:hh:hh format.</p>\n     *\n     * @return a IPV6 address.\n     */\n    public InetAddress getIpV6Address() {\n        final RandomService random = faker.random();\n        final char[] res = new char[4 * 8 + 7];\n        for (int i = 0; i < 8; i++) {\n            int offset = 4 * i;\n            if (i > 0) {\n                res[i - 1 + offset] = ':';\n            }\n            char[] hex = random.hex(4, false).toCharArray();\n            System.arraycopy(hex, 0, res, i + offset, hex.length);\n        }\n        return inet6Address(String.valueOf(res));\n    }\n\n    /**\n     * @return a valid IPV6 CIDR\n     */\n    public String ipV6Cidr() {\n        return ipV6Address() +\n            '/' +\n            (faker.random().nextInt(127) + 1);\n    }\n\n    /**\n     * @return a slug using '_' as the word separator and two {@link Lorem} words as the values\n     */\n    public String slug() {\n        return slug(faker.lorem().words(2), \"_\");\n    }\n\n    /**\n     * @param wordsOrNull if null, then 2 {@link Lorem} words\n     * @param glueOrNull  if null, \"_\"\n     * @return a slug string combining wordsOrNull with glueOrNull (ex. x_y)\n     */\n    public String slug(List<String> wordsOrNull, String glueOrNull) {\n        final String glue = glueOrNull == null\n            ? \"_\"\n            : glueOrNull;\n        final List<String> words = wordsOrNull == null\n            ? faker.lorem().words(2)\n            : wordsOrNull;\n\n        final StringBuilder slug = new StringBuilder();\n        for (int i = 0; i < words.size(); i++) {\n            if (i > 0) {\n                slug.append(glue);\n            }\n            slug.append(words.get(i));\n        }\n        return slug.toString();\n    }\n\n    /**\n     * Returns a UUID (type 3) as String.\n     * Use this method (instead of {@link #uuid() uuid}) if you are\n     * using a constant random seed and require the same output for different faker instances.     *\n     *\n     * @return a uuid as string.\n     */\n    public String uuidv3() {\n        return UUID.nameUUIDFromBytes(faker.random().nextRandomBytes(16)).toString();\n    }\n\n    public String uuidv4() {\n        return uuid();\n    }\n\n    public String uuidv7() {\n        // Get the current timestamp in milliseconds since Unix epoch\n        long timestamp = faker.random().nextLong();\n\n        // Generate random bits\n        long randomBits1 = faker.random().nextLong();\n        long randomBits2 = faker.random().nextLong();\n\n        // Combine timestamp and random bits\n        ByteBuffer bb = ByteBuffer.wrap(new byte[16]);\n        bb.putLong(timestamp);\n        bb.putLong(randomBits1 ^ randomBits2);\n\n        long mostSigBits = bb.getLong(0);\n        long leastSigBits = bb.getLong(8);\n\n        // Set the version to 7 (bits 4-7 of the time_hi_and_version field)\n        mostSigBits &= ~(0xF000L);  // clear version\n        mostSigBits |= 0x7000L;     // set to version 7\n\n        // Set the variant to IETF variant (bits 6-7 of the clock_seq_hi_and_reserved field)\n        leastSigBits &= ~(0xC000000000000000L); // clear variant\n        leastSigBits |= 0x8000000000000000L;    // set to IETF variant\n\n        return new UUID(mostSigBits, leastSigBits).toString();\n    }\n\n    /**\n     * Returns a UUID (type 4) as String.\n     * <p>\n     * This returns a repeatable version of a version 4 UUID, which is a bit against the idea of a version 4 UUID,\n     * but this is a faker library, not a UUID library.\n     *\n     * @return a v4 uuid as string.\n     */\n    public String uuid() {\n        String uuidv3 = uuidv3();\n        return uuidv3.substring(0, 14) + '4' + uuidv3.substring(15);\n    }\n\n    private <T> T random(T[] src) {\n        return src[faker.random().nextInt(src.length)];\n    }\n\n    public String userAgent(UserAgent userAgent) {\n        UserAgent agent = userAgent;\n\n        if (agent == null) {\n            agent = UserAgent.any(faker);\n        }\n\n        String userAgentKey = \"internet.user_agent.\" + agent.toString();\n        return resolve(userAgentKey);\n    }\n\n    public String userAgent() {\n        return userAgent(null);\n    }\n\n    public enum UserAgent {\n        AOL(\"aol\"),\n        CHROME(\"chrome\"),\n        FIREFOX(\"firefox\"),\n        INTERNET_EXPLORER(\"internet_explorer\"),\n        NETSCAPE(\"netscape\"),\n        OPERA(\"opera\"),\n        SAFARI(\"safari\");\n\n        //Browser's name in corresponding yaml (internet.yml) file.\n        private final String browserName;\n\n        UserAgent(String browserName) {\n            this.browserName = browserName;\n        }\n\n        private static UserAgent any(BaseProviders faker) {\n            UserAgent[] agents = UserAgent.values();\n            int randomIndex = (int) (faker.random().nextDouble() * agents.length);\n            return agents[randomIndex];\n        }\n\n        @Override\n        public String toString() {\n            return browserName;\n        }\n    }\n\n    public String botUserAgent(BotUserAgent vendor) {\n        BotUserAgent agent = vendor;\n\n        if (agent == null) {\n            agent = BotUserAgent.any(faker);\n        }\n\n        String userAgentKey = \"internet.bot_user_agent.\" + agent.toString();\n        return resolve(userAgentKey);\n    }\n\n    public String botUserAgentAny() {\n        return botUserAgent(null);\n    }\n\n    public enum BotUserAgent {\n        GOOGLEBOT(\"googlebot\"),\n        BINGBOT(\"bingbot\"),\n        DUCKDUCKBOT(\"duckduckbot\"),\n        BAIDUSPIDER(\"baiduspider\"),\n        YANDEXBOT(\"yandexbot\");\n\n        //Browser's name in corresponding yaml (internet.yml) file.\n        private final String browserName;\n\n        BotUserAgent(String browserName) {\n            this.browserName = browserName;\n        }\n\n        private static BotUserAgent any(BaseProviders faker) {\n            BotUserAgent[] agents = BotUserAgent.values();\n            int randomIndex = (int) (faker.random().nextDouble() * agents.length);\n            return agents[randomIndex];\n        }\n\n        @Override\n        public String toString() {\n            return browserName;\n        }\n    }\n\n    private static InetAddress inet4Address(byte first, byte second, byte third, byte fourth) {\n        try {\n            return Inet4Address.getByAddress(new byte[]{first, second, third, fourth});\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(\"Failed to create Inet4Address from %s %s %s %s\".formatted(first, second, third, fourth), e);\n        }\n    }\n\n    private static InetAddress inet6Address(String host) {\n        try {\n            return Inet6Address.getByName(host);\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(\"Failed to create Inet6Address from host '%s'\".formatted(host), e);\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Pattern COLON = Pattern.compile(\":\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "COLON = Pattern.compile(\":\")", "syntax_pass": true}, {"attribute_expression": "private static final List<String> HTTP_SCHEMES = List.of(\"http://\", \"https://\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<String>", "name": "HTTP_SCHEMES = List.of(\"http://\", \"https://\")", "syntax_pass": true}, {"attribute_expression": "public static final Pattern DIACRITICS_AND_FRIENDS\n        = Pattern.compile(\"[\\\\p{InCombiningDiacriticalMarks}\\\\p{IsLm}\\\\p{IsSk}]+\");", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Pattern", "name": "DIACRITICS_AND_FRIENDS\n        = Pattern.compile(\"[\\\\p{InCombiningDiacriticalMarks}\\\\p{IsLm}\\\\p{IsSk}]+\")", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Bool.java.Bool", "name": "Bool", "file_path": "src/main/java/net/datafaker/providers/base/Bool.java", "superclasses": "", "methods": ["[]Bool(BaseProviders)", "[boolean]bool()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Bool.java.Bool.[]Bool(BaseProviders)", "src/main/java/net/datafaker/providers/base/Bool.java.Bool.[boolean]bool()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Bool extends AbstractProvider<BaseProviders> {\n\n    protected Bool(BaseProviders faker) {\n        super(faker);\n    }\n\n    public boolean bool() {\n        return faker.random().nextBoolean();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito", "name": "Chiquito", "file_path": "src/main/java/net/datafaker/providers/base/Chiquito.java", "superclasses": "", "methods": ["[]Chiquito(BaseProviders)", "[String]expressions()", "[String]terms()", "[String]sentences()", "[String]jokes()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[]Chiquito(BaseProviders)", "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]expressions()", "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]terms()", "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]sentences()", "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]jokes()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.6.0\n", "original_string": "public class Chiquito extends AbstractProvider<BaseProviders> {\n\n    protected Chiquito(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String expressions() {\n        return resolve(\"chiquito.expressions\");\n    }\n\n    public String terms() {\n        return resolve(\"chiquito.terms\");\n    }\n\n    public String sentences() {\n        return resolve(\"chiquito.sentences\");\n    }\n\n    public String jokes() {\n        return resolve(\"chiquito.jokes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Book.java.Book", "name": "Book", "file_path": "src/main/java/net/datafaker/providers/base/Book.java", "superclasses": "", "methods": ["[]Book(BaseProviders)", "[String]author()", "[String]title()", "[String]publisher()", "[String]genre()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Book.java.Book.[]Book(BaseProviders)", "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]author()", "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]title()", "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]publisher()", "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]genre()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Book extends AbstractProvider<BaseProviders> {\n\n    protected Book(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String author() {\n        return resolve(\"book.author\");\n    }\n\n    public String title() {\n        return resolve(\"book.title\");\n    }\n\n    public String publisher() {\n        return resolve(\"book.publisher\");\n    }\n\n    public String genre() {\n        return resolve(\"book.genre\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize", "name": "GarmentSize", "file_path": "src/main/java/net/datafaker/providers/base/GarmentSize.java", "superclasses": "", "methods": ["[]GarmentSize(BaseProviders)", "[String]size()"], "method_uris": ["src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize.[]GarmentSize(BaseProviders)", "src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize.[String]size()"], "overrides": null, "attributes": [], "class_docstring": "\nThis class is used to generate garments sizes randomly.\n\n@since 1.6.0\n", "original_string": "public class GarmentSize extends AbstractProvider<BaseProviders> {\n\n    protected GarmentSize(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method returns a garment size\n     *\n     * @return a string of garment size\n     */\n    public String size() {\n        return resolve(\"garments_sizes.sizes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Gender.java.Gender", "name": "Gender", "file_path": "src/main/java/net/datafaker/providers/base/Gender.java", "superclasses": "", "methods": ["[]Gender(BaseProviders)", "[String]types()", "[String]binaryTypes()", "[String]shortBinaryTypes()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Gender.java.Gender.[]Gender(BaseProviders)", "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[String]types()", "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[String]binaryTypes()", "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[String]shortBinaryTypes()"], "overrides": null, "attributes": [], "class_docstring": "\nThis class is used to generate gender randomly.\n\n@since 0.8.0\n", "original_string": "public class Gender extends AbstractProvider<BaseProviders> {\n\n    protected Gender(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method returns a gender type\n     *\n     * @return a string of gender type\n     */\n    public String types() {\n        return resolve(\"gender.types\");\n    }\n\n    /**\n     * This method returns a binary gender type\n     *\n     * @return a string of binary gender type\n     */\n    public String binaryTypes() {\n        return resolve(\"gender.binary_types\");\n    }\n\n    /**\n     * This method returns a short binary gender type\n     *\n     * @return a string of short binary gender type\n     */\n    public String shortBinaryTypes() {\n        return resolve(\"gender.short_binary_types\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName", "name": "FunnyName", "file_path": "src/main/java/net/datafaker/providers/base/FunnyName.java", "superclasses": "", "methods": ["[]FunnyName(BaseProviders)", "[String]name()"], "method_uris": ["src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName.[]FunnyName(BaseProviders)", "src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName.[String]name()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class FunnyName extends AbstractProvider<BaseProviders> {\n\n    protected FunnyName(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"funny_name.name\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin", "name": "CryptoCoin", "file_path": "src/main/java/net/datafaker/providers/base/CryptoCoin.java", "superclasses": "", "methods": ["[]CryptoCoin(BaseProviders)", "[String]coin()"], "method_uris": ["src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin.[]CryptoCoin(BaseProviders)", "src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin.[String]coin()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.3.0\n", "original_string": "public class CryptoCoin extends AbstractProvider<BaseProviders> {\n\n    protected CryptoCoin(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String coin() {\n        return resolve(\"crypto_coin.coin\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/University.java.University", "name": "University", "file_path": "src/main/java/net/datafaker/providers/base/University.java", "superclasses": "", "methods": ["[]University(BaseProviders)", "[String]name()", "[String]degree()", "[String]prefix()", "[String]suffix()"], "method_uris": ["src/main/java/net/datafaker/providers/base/University.java.University.[]University(BaseProviders)", "src/main/java/net/datafaker/providers/base/University.java.University.[String]name()", "src/main/java/net/datafaker/providers/base/University.java.University.[String]degree()", "src/main/java/net/datafaker/providers/base/University.java.University.[String]prefix()", "src/main/java/net/datafaker/providers/base/University.java.University.[String]suffix()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class University extends AbstractProvider<BaseProviders> {\n\n    protected University(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"university.name\");\n    }\n\n    public String degree() {\n        return resolve(\"university.degree\");\n    }\n\n    public String prefix() {\n        return resolve(\"university.prefix\");\n    }\n\n    public String suffix() {\n        return resolve(\"university.suffix\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military", "name": "Military", "file_path": "src/main/java/net/datafaker/providers/base/Military.java", "superclasses": "", "methods": ["[]Military(BaseProviders)", "[String]armyRank()", "[String]marinesRank()", "[String]navyRank()", "[String]airForceRank()", "[String]dodPaygrade()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Military.java.Military.[]Military(BaseProviders)", "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]armyRank()", "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]marinesRank()", "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]navyRank()", "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]airForceRank()", "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]dodPaygrade()"], "overrides": null, "attributes": [], "class_docstring": "\nMilitary ranks.\n\n@since 1.2.0\n", "original_string": "public class Military extends AbstractProvider<BaseProviders> {\n\n    protected Military(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String armyRank() {\n        return resolve(\"military.army_rank\");\n    }\n\n    public String marinesRank() {\n        return resolve(\"military.marines_rank\");\n    }\n\n    public String navyRank() {\n        return resolve(\"military.navy_rank\");\n    }\n\n    public String airForceRank() {\n        return resolve(\"military.air_force_rank\");\n    }\n\n    public String dodPaygrade() {\n        return resolve(\"military.dod_paygrade\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering", "name": "Mountaineering", "file_path": "src/main/java/net/datafaker/providers/base/Mountaineering.java", "superclasses": "", "methods": ["[]Mountaineering(BaseProviders)", "[String]mountaineer()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering.[]Mountaineering(BaseProviders)", "src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering.[String]mountaineer()"], "overrides": null, "attributes": [], "class_docstring": "\nMountaineering, or alpinism, is the set of outdoor activities that involves ascending tall mountains.\n\n@since 1.4.0\n", "original_string": "public class Mountaineering extends AbstractProvider<BaseProviders> {\n\n    protected Mountaineering(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String mountaineer() {\n        return resolve(\"mountaineering.mountaineer\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType", "name": "BloodType", "file_path": "src/main/java/net/datafaker/providers/base/BloodType.java", "superclasses": "", "methods": ["[]BloodType(BaseProviders)", "[String]aboTypes()", "[String]rhTypes()", "[String]pTypes()", "[String]bloodGroup()"], "method_uris": ["src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[]BloodType(BaseProviders)", "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]aboTypes()", "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]rhTypes()", "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]pTypes()", "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]bloodGroup()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.4.0\n", "original_string": "public class BloodType extends AbstractProvider<BaseProviders> {\n\n    protected BloodType(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method returns a ABO blood type\n     *\n     * @return a string of ABO blood type\n     */\n    public String aboTypes() {\n        return resolve(\"blood_type.abo_types\");\n    }\n\n    /**\n     * This method returns an Rh blood type\n     *\n     * @return a string of Rh blood type\n     */\n    public String rhTypes() {\n        return resolve(\"blood_type.rh_types\");\n    }\n\n    /**\n     * This method returns a P blood type\n     *\n     * @return a string of P blood type\n     */\n    public String pTypes() {\n        return resolve(\"blood_type.p_types\");\n    }\n\n\n    /**\n     * Returns a blood group such as O\u2212, O+, A-, A+, B-, B+, AB-, AB+\n     *\n     * @return a blood group such as O\u2212, O+, A-, A+, B-, B+, AB-, AB+\n     */\n    public String bloodGroup() {\n        return resolve(\"blood_type.blood_group\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "name": "Subscription", "file_path": "src/main/java/net/datafaker/providers/base/Subscription.java", "superclasses": "", "methods": ["[]Subscription(BaseProviders)", "[String]plans()", "[String]statuses()", "[String]paymentMethods()", "[String]subscriptionTerms()", "[String]paymentTerms()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[]Subscription(BaseProviders)", "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]plans()", "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]statuses()", "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]paymentMethods()", "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]subscriptionTerms()", "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]paymentTerms()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.3.0\n", "original_string": "public class Subscription extends AbstractProvider<BaseProviders> {\n\n    protected Subscription(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String plans() {\n        return resolve(\"subscription.plans\");\n    }\n\n    public String statuses() {\n        return resolve(\"subscription.statuses\");\n    }\n\n    public String paymentMethods() {\n        return resolve(\"subscription.payment_methods\");\n    }\n\n    public String subscriptionTerms() {\n        return resolve(\"subscription.subscription_terms\");\n    }\n\n    public String paymentTerms() {\n        return resolve(\"subscription.payment_terms\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Domain.java.Domain", "name": "Domain", "file_path": "src/main/java/net/datafaker/providers/base/Domain.java", "superclasses": "", "methods": ["[]Domain(BaseProviders)", "[String]firstLevelDomain(String)", "[String]secondLevelDomain(String)", "[String]fullDomain(String)", "[String]validDomain(String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Domain.java.Domain.[]Domain(BaseProviders)", "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]firstLevelDomain(String)", "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]secondLevelDomain(String)", "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]fullDomain(String)", "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]validDomain(String)"], "overrides": null, "attributes": [], "class_docstring": "\nA domain name generator.\n\n@since 0.9.0\n", "original_string": "public class Domain extends AbstractProvider<BaseProviders> {\n\n    /**\n     * Instantiates a new Domain.\n     *\n     * @param faker the faker\n     */\n    protected Domain(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * First level domain string. Such as example.com\n     *\n     * @param name the company name\n     * @return the\n     */\n    public String firstLevelDomain(String name) {\n        String top = resolve(\"domain.top\");\n        return String.join(\".\",\n            name,\n            top\n        );\n    }\n\n    /**\n     * Second level domain string. Such as example.com.uk\n     *\n     * @param name the company name\n     * @return the second level domain with company name\n     */\n    public String secondLevelDomain(String name) {\n        String top = resolve(\"domain.top\");\n        String suffix = resolve(\"domain.country\");\n        return String.join(\".\",\n            name,\n            top,\n            suffix\n        );\n    }\n\n    /**\n     * Full domain string. Such as <a href=\"www.example.com.uk\">www.example.com.uk</a>\n     *\n     * @param name the company name\n     * @return the full domain name\n     */\n    public String fullDomain(String name) {\n        String prefix = resolve(\"domain.prefix\");\n        String top = resolve(\"domain.top\");\n        String suffix = resolve(\"domain.country\");\n        return String.join(\".\",\n            prefix,\n            name,\n            top,\n            suffix\n        );\n    }\n\n\n    /**\n     * Return a random valid domain.\n     *\n     * @param name the company name\n     * @return A valid domain\n     */\n    public String validDomain(String name) {\n        final RandomService random = faker.random();\n\n        boolean hasPrefix = random.nextInt(3) == 1;\n        boolean hasSuffix = random.nextInt(2) == 1;\n\n        String res = name + \".\" + resolve(\"domain.top\");\n        String prefix = null;\n        String suffix = null;\n        if (hasPrefix) {\n            prefix = resolve(\"domain.prefix\");\n        }\n        if (hasSuffix) {\n            suffix = resolve(\"domain.country\");\n        }\n        return prefix == null\n            ? suffix == null\n                ? res : res + \".\" + suffix\n            : suffix == null\n                ? prefix + \".\" + res\n                    : prefix + \".\" + res + \".\" + suffix;\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Community.java.Community", "name": "Community", "file_path": "src/main/java/net/datafaker/providers/base/Community.java", "superclasses": "", "methods": ["[]Community(BaseProviders)", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Community.java.Community.[]Community(BaseProviders)", "src/main/java/net/datafaker/providers/base/Community.java.Community.[String]character()", "src/main/java/net/datafaker/providers/base/Community.java.Community.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nCommunity is an American television sitcom created by Dan Harmon.\n\n@since 1.6.0\n", "original_string": "public class Community extends AbstractProvider<BaseProviders> {\n\n    protected Community(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"community.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"community.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number", "name": "Number", "file_path": "src/main/java/net/datafaker/providers/base/Number.java", "superclasses": "", "methods": ["[]Number(BaseProviders)", "[int]randomDigit()", "[int]randomDigitNotZero()", "[int]positive()", "[int]negative()", "[int]numberBetween(int,int)", "[long]numberBetween(long,long)", "[long]randomNumber(int,boolean)", "[long]pow(long,int)", "[long]randomNumber()", "[double]randomDouble(int,int,int)", "[double]randomDouble(int,long,long)", "[BigDecimal]decimalBetween(long,long)", "[String]digits(int)", "[String]digit()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Number.java.Number.[]Number(BaseProviders)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]randomDigit()", "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]randomDigitNotZero()", "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]positive()", "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]negative()", "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]numberBetween(int,int)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]numberBetween(long,long)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]randomNumber(int,boolean)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]pow(long,int)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]randomNumber()", "src/main/java/net/datafaker/providers/base/Number.java.Number.[double]randomDouble(int,int,int)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[double]randomDouble(int,long,long)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[BigDecimal]decimalBetween(long,long)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[String]digits(int)", "src/main/java/net/datafaker/providers/base/Number.java.Number.[String]digit()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Number extends AbstractProvider<BaseProviders> {\n\n    private static final char[] DIGITS = \"0123456789\".toCharArray();\n\n    protected Number(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Returns a random number from 0-9 (both inclusive)\n     */\n    public int randomDigit() {\n        return faker.random().nextInt(0, 9);\n    }\n\n    /**\n     * Returns a random number from 1-9 (both inclusive)\n     */\n    public int randomDigitNotZero() {\n        return faker.random().nextInt(1, 9);\n    }\n\n    /**\n     * Returns a positive number\n     */\n    public int positive() {\n        return numberBetween(1, Integer.MAX_VALUE);\n    }\n\n    /**\n     * Returns a negative number\n     */\n    public int negative() {\n        return numberBetween(0, Integer.MIN_VALUE);\n    }\n\n    /**\n     * @param min the lower bound (include min)\n     * @param max the upper bound (not include max)\n     * @return a random number on faker.number() between min and max\n     * if min = max, return min\n     */\n    public int numberBetween(final int min, final int max) {\n        if (min == max) return min;\n        final int realMin = Math.min(min, max);\n        final int realMax = Math.max(min, max);\n        final int amplitude = realMax - realMin;\n        if (amplitude >= 0) {\n            return faker.random().nextInt(amplitude) + realMin;\n        }\n        return (int) numberBetween(realMin, (long) realMax);\n    }\n\n    /**\n     * @param min the lower bound (include min)\n     * @param max the upper bound (not include max)\n     * @return a random number on faker.number() between min and max\n     * if min = max, return min\n     */\n    public long numberBetween(long min, long max) {\n        if (min == max) return min;\n        final long realMin = Math.min(min, max);\n        final long realMax = Math.max(min, max);\n        final long amplitude = realMax - realMin;\n        if (amplitude >= 0) {\n            return faker.random().nextLong(amplitude) + realMin;\n        }\n        return decimalBetween(realMin, realMax).longValue();\n    }\n\n    /**\n     * @param numberOfDigits the number of digits the generated value should have\n     * @param strict         whether or not the generated value should have exactly <code>numberOfDigits</code>\n     */\n    public long randomNumber(int numberOfDigits, boolean strict) {\n        if (numberOfDigits <= 0) {\n            return faker.random().nextInt(1);\n        }\n        long min = pow(10, numberOfDigits - 1);\n        if (strict) {\n            long max = min * 10;\n            return faker.random().nextLong(max - min) + min;\n        }\n\n        return faker.random().nextLong(min * 10);\n    }\n\n    private long pow(long value, int d) {\n        if (d == 0) return 1;\n        if (d == 1) return value;\n        if ((d & 1) == 0) {\n            long pow = pow(value, d >> 1);\n            return pow * pow;\n        } else {\n            return value * pow(value, d - 1);\n        }\n    }\n\n    /**\n     * Returns a random number\n     */\n    public long randomNumber() {\n        int numberOfDigits = faker.random().nextInt(1, 10);\n        return randomNumber(numberOfDigits, false);\n    }\n\n    public double randomDouble(int maxNumberOfDecimals, int min, int max) {\n        return randomDouble(maxNumberOfDecimals, min, (long) max);\n    }\n\n    /**\n     * Returns a random double\n     *\n     * @param maxNumberOfDecimals maximum number of places\n     * @param min                 minimum value\n     * @param max                 maximum value\n     */\n    public double randomDouble(int maxNumberOfDecimals, long min, long max) {\n        return decimalBetween(min, max)\n            .setScale(maxNumberOfDecimals, RoundingMode.HALF_DOWN)\n            .doubleValue();\n    }\n\n    /**\n     * @param min the lower bound (include min)\n     * @param max the upper bound (not include max)\n     * @return decimalBetween on faker.number() between min and max\n     * if min = max, return min\n     */\n    private BigDecimal decimalBetween(long min, long max) {\n        if (min == max) {\n            return BigDecimal.valueOf(min);\n        }\n\n        final BigDecimal trueMin = BigDecimal.valueOf(min);\n        final BigDecimal trueMax = BigDecimal.valueOf(max);\n        final BigDecimal random = BigDecimal.valueOf(faker.random().nextDouble());\n\n        return trueMin.add(trueMax.subtract(trueMin).multiply(random));\n    }\n\n    public String digits(int count) {\n        final char[] tmp = new char[count];\n        byte[] input = faker.random().nextRandomBytes(count);\n        for (int i = 0; i < input.length; i++) {\n            tmp[i] = DIGITS[Math.abs(input[i]) % 10];\n        }\n        return new String(tmp);\n    }\n\n    public String digit() {\n        return digits(1);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final char[] DIGITS = \"0123456789\".toCharArray();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "DIGITS = \"0123456789\".toCharArray()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Device.java.Device", "name": "Device", "file_path": "src/main/java/net/datafaker/providers/base/Device.java", "superclasses": "", "methods": ["[]Device(BaseProviders)", "[String]modelName()", "[String]platform()", "[String]manufacturer()", "[String]serial()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Device.java.Device.[]Device(BaseProviders)", "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]modelName()", "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]platform()", "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]manufacturer()", "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]serial()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.4.0\n", "original_string": "public class Device extends AbstractProvider<BaseProviders> {\n\n    protected Device(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String modelName() {\n        return resolve(\"device.model_name\");\n    }\n\n    public String platform() {\n        return resolve(\"device.platform\");\n    }\n\n    public String manufacturer() {\n        return resolve(\"device.manufacturer\");\n    }\n\n    public String serial() {\n        return resolve(\"device.serial\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "name": "Mbti", "file_path": "src/main/java/net/datafaker/providers/base/Mbti.java", "superclasses": "", "methods": ["[]Mbti(BaseProviders)", "[String]type()", "[String]name()", "[String]characteristic()", "[String]personage()", "[String]merit()", "[String]weakness()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[]Mbti(BaseProviders)", "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]type()", "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]name()", "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]characteristic()", "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]personage()", "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]merit()", "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]weakness()"], "overrides": null, "attributes": [], "class_docstring": "\nMyers-Briggs Type Indicator\n\n@since 1.5.0\n", "original_string": "public class Mbti extends AbstractProvider<BaseProviders> {\n\n    private final Supplier<String> choice;\n\n    public Mbti(final BaseProviders faker) {\n        super(faker);\n        this.choice = () -> this.faker.resolve(\"mbti.choice\");\n    }\n\n    public String type() {\n        return resolve(\"mbti.\" + choice.get() + \".type\");\n    }\n\n    public String name() {\n        return resolve(\"mbti.\" + choice.get() + \".name\");\n    }\n\n    public String characteristic() {\n        return resolve(\"mbti.\" + choice.get() + \".characteristic\");\n    }\n\n    public String personage() {\n        return resolve(\"mbti.\" + choice.get() + \".personage\");\n    }\n\n    public String merit() {\n        return resolve(\"mbti.\" + choice.get() + \".merit\");\n    }\n\n    public String weakness() {\n        return resolve(\"mbti.\" + choice.get() + \".weakness\");\n    }\n\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Supplier<String> choice;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<String>", "name": "choice", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location", "name": "Location", "file_path": "src/main/java/net/datafaker/providers/base/Location.java", "superclasses": "", "methods": ["[]Location(BaseProviders)", "[String]building()", "[String]work()", "[String]nature()", "[String]publicSpace()", "[String]privateSpace()", "[String]otherworldly()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Location.java.Location.[]Location(BaseProviders)", "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]building()", "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]work()", "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]nature()", "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]publicSpace()", "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]privateSpace()", "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]otherworldly()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class Location extends AbstractProvider<BaseProviders> {\n\n    protected Location(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String building() {\n        return resolve(\"location.building\");\n    }\n\n    public String work() {\n        return resolve(\"location.work\");\n    }\n\n    public String nature() {\n        return resolve(\"location.nature\");\n    }\n\n    public String publicSpace() {\n        return resolve(\"location.public_space\");\n    }\n\n    public String privateSpace() {\n        return resolve(\"location.private_space\");\n    }\n\n    public String otherworldly() {\n        return resolve(\"location.otherworldly\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "name": "DateAndTime", "file_path": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "superclasses": "", "methods": ["[]DateAndTime(BaseProviders)", "[Timestamp]future(int,TimeUnit)", "[String]future(int,TimeUnit,String)", "[Timestamp]future(int,int,TimeUnit)", "[String]future(int,int,TimeUnit,String)", "[T]future(int,TimeUnit,T)", "[String]future(int,TimeUnit,T,String)", "[Timestamp]past(int,TimeUnit)", "[String]past(int,TimeUnit,String)", "[Timestamp]past(int,int,TimeUnit)", "[String]past(int,int,TimeUnit,String)", "[T]past(int,TimeUnit,T)", "[String]past(int,TimeUnit,Date,String)", "[T]between(T,T)", "[String]between(T,T,String)", "[Timestamp]birthday()", "[LocalDate]birthdayLocalDate()", "[String]birthday(String)", "[Timestamp]birthday(int,int)", "[LocalDate]birthdayLocalDate(int,int)", "[String]birthday(int,int,String)", "[Duration]duration(long,ChronoUnit)", "[Duration]duration(long,long,ChronoUnit)", "[Duration]duration(long,String)", "[Duration]duration(long,long,String)", "[Period]period(Period,Period)", "[ChronoUnit]str2durationUnit(String)", "[Duration]generateDuration(long,ChronoUnit)", "[String]toString(Date,String)"], "method_uris": ["src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[]DateAndTime(BaseProviders)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]future(int,TimeUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]future(int,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]future(int,int,TimeUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]future(int,int,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[T]future(int,TimeUnit,T)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]future(int,TimeUnit,T,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]past(int,TimeUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]past(int,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]past(int,int,TimeUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]past(int,int,TimeUnit,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[T]past(int,TimeUnit,T)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]past(int,TimeUnit,Date,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[T]between(T,T)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]between(T,T,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]birthday()", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[LocalDate]birthdayLocalDate()", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]birthday(String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]birthday(int,int)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[LocalDate]birthdayLocalDate(int,int)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]birthday(int,int,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,ChronoUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,long,ChronoUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,long,String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Period]period(Period,Period)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[ChronoUnit]str2durationUnit(String)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]generateDuration(long,ChronoUnit)", "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]toString(Date,String)"], "overrides": null, "attributes": [], "class_docstring": "\nA generator of random dates.\n\n@author pmiklos\n@since 0.8.0\n", "original_string": "@Deprecated(since = \"2.3.0\", forRemoval = true)\npublic class DateAndTime extends AbstractProvider<BaseProviders> {\n    private static final int DEFAULT_MIN_AGE = 18;\n    private static final int DEFAULT_MAX_AGE = 65;\n    public static final long DAYS_NANOS = TimeUnit.DAYS.toNanos(1L);\n\n    protected DateAndTime(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generates a future date from now.\n     *\n     * @param atMost at most this amount of time ahead from now exclusive.\n     * @param unit   the time unit.\n     * @return a future date from now.\n     */\n    public Timestamp future(int atMost, TimeUnit unit) {\n        Timestamp aBitLaterThanNow = new Timestamp(System.currentTimeMillis() + 1);\n        return future(atMost, unit, aBitLaterThanNow);\n    }\n\n    /**\n     * Generates and converts to string representation a future date from now.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a future date from now.\n     */\n    public String future(int atMost, TimeUnit unit, String pattern) {\n        return toString(future(atMost, unit), pattern);\n    }\n\n    /**\n     * Generates a future date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param minimum the minimum amount of time in the future from now.\n     * @param unit    the time unit.\n     * @return a future date from now, with a minimum time.\n     */\n    public Timestamp future(int atMost, int minimum, TimeUnit unit) {\n        Timestamp minimumDate = new Timestamp(System.currentTimeMillis() + unit.toMillis(minimum));\n        return future(atMost - minimum, unit, minimumDate);\n    }\n\n    /**\n     * Generates and converts to string representation\n     * of a future date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time ahead from now exclusive.\n     * @param minimum the minimum amount of time in the future from now.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a future date from now, with a minimum time.\n     */\n    public String future(int atMost, int minimum, TimeUnit unit, String pattern) {\n        return toString(future(atMost, minimum, unit), pattern);\n    }\n\n    /**\n     * Generates a future date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the future date relative to this date.\n     * @return a future date relative to {@code referenceDate}.\n     */\n    public <T extends Date> T future(int atMost, TimeUnit unit, T referenceDate) {\n        long upperBound = unit.toMillis(atMost);\n\n        long futureMillis = referenceDate.getTime();\n        futureMillis += 1 + faker.random().nextLong(upperBound - 1);\n\n        return (T) new Timestamp(futureMillis);\n    }\n\n    /**\n     * Generates and converts to string representation\n     * a future date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the future date relative to this date.\n     * @param pattern       date time pattern to convert to string.\n     * @return a string representation of a future date relative to {@code referenceDate}.\n     */\n    public <T extends Date> String future(int atMost, TimeUnit unit, T referenceDate, String pattern) {\n        return toString(future(atMost, unit, referenceDate), pattern);\n    }\n\n    /**\n     * Generates a past date from now.\n     *\n     * @param atMost at most this amount of time earlier from now exclusive.\n     * @param unit   the time unit.\n     * @return a past date from now.\n     */\n    public Timestamp past(int atMost, TimeUnit unit) {\n        Timestamp aBitEarlierThanNow = new Timestamp(System.currentTimeMillis() - 1);\n        return past(atMost, unit, aBitEarlierThanNow);\n    }\n\n    /**\n     * Generates a string representation of a past date from now.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a past date from now.\n     */\n    public String past(int atMost, TimeUnit unit, String pattern) {\n        return toString(past(atMost, unit), pattern);\n    }\n\n    /**\n     * Generates a past date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param minimum the minimum amount of time in the past from now.\n     * @param unit    the time unit.\n     * @return a past date from now.\n     */\n    public Timestamp past(int atMost, int minimum, TimeUnit unit) {\n        Timestamp minimumDate = new Timestamp(System.currentTimeMillis() - unit.toMillis(minimum));\n        return past(atMost - minimum, unit, minimumDate);\n    }\n\n    /**\n     * Generates and converts to string representation a past date from now, with a minimum time.\n     *\n     * @param atMost  at most this amount of time earlier from now exclusive.\n     * @param minimum the minimum amount of time in the past from now.\n     * @param unit    the time unit.\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a past date from now, with a minimum time.\n     */\n    public String past(int atMost, int minimum, TimeUnit unit, String pattern) {\n        return toString(past(atMost, minimum, unit), pattern);\n    }\n\n    /**\n     * Generates a past date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the past date relative to this date.\n     * @return a past date relative to {@code referenceDate}.\n     */\n    public <T extends Date> T past(int atMost, TimeUnit unit, T referenceDate) {\n        long upperBound = unit.toMillis(atMost);\n\n        long futureMillis = referenceDate.getTime();\n        futureMillis -= 1 + faker.random().nextLong(upperBound - 1);\n\n        return (T) new Timestamp(futureMillis);\n    }\n\n    /**\n     * Generates a string representation of a past date relative to the {@code referenceDate}.\n     *\n     * @param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n     * @param unit          the time unit.\n     * @param referenceDate the past date relative to this date.\n     * @param pattern       date time pattern to convert to string.\n     * @return a string representation of a past date relative to {@code referenceDate}.\n     */\n    public String past(int atMost, TimeUnit unit, Date referenceDate, String pattern) {\n        return toString(past(atMost, unit, referenceDate), pattern);\n    }\n\n    /**\n     * Generates a random date between two dates.\n     *\n     * @param from the lower bound inclusive\n     * @param to   the upper bound exclusive\n     * @return a random date between {@code from} and {@code to}.\n     * @throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n     */\n    public <T extends Date> T between(T from, T to) throws IllegalArgumentException {\n        if (to.before(from)) {\n            throw new IllegalArgumentException(\"Invalid date range: the upper bound date (%s) is before the lower bound (%s)\"\n                .formatted(to, from));\n        }\n\n        if (from.equals(to)) {\n            return from;\n        }\n\n        long offsetMillis = faker.random().nextLong(to.getTime() - from.getTime());\n        return (T) new Timestamp(from.getTime() + offsetMillis);\n    }\n\n    /**\n     * Generates a string representation of a random date between two dates.\n     *\n     * @param from    the lower bound inclusive\n     * @param to      the upper bound exclusive\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a random date between {@code from} and {@code to}.\n     * @throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n     */\n    public <T extends Date> String between(T from, T to, String pattern) throws IllegalArgumentException {\n        return toString(between(from, to), pattern);\n    }\n\n    /**\n     * Generates a random birthday between 65 and 18 years ago from now.\n     *\n     * @return a random birthday between 65 and 18 years ago from now.\n     */\n    public Timestamp birthday() {\n        return birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE);\n    }\n\n    /**\n     * Generates a random birthday between 65 and 18 years ago from now as LocalDate.\n     *\n     * @return a random birthday between 65 and 18 years ago from now.\n     */\n    public LocalDate birthdayLocalDate() {\n        return birthdayLocalDate(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE);\n    }\n\n    /**\n     * Generates a string representation of a random birthday between 65 and 18 years ago from now.\n     *\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a random birthday between 65 and 18 years ago from now.\n     */\n    public String birthday(String pattern) {\n        return toString(birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE), pattern);\n    }\n\n    /**\n     * Generates a random birthday between two ages from now.\n     *\n     * @param minAge the minimal age\n     * @param maxAge the maximal age\n     * @return a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n     * Negative {@code minAge} and {@code maxAge} are supported.\n     */\n    public Timestamp birthday(int minAge, int maxAge) {\n        final LocalDate localDate = LocalDate.now();\n        final LocalDate from = localDate.minusYears(maxAge);\n        if (minAge == maxAge) {\n            return Timestamp.valueOf(LocalDateTime.of(from, LocalTime.MIDNIGHT));\n        }\n        final long start = from.toEpochDay();\n        final long stop = localDate.minusYears(minAge).toEpochDay();\n        final LocalDate date = LocalDate.ofEpochDay(faker.random().nextLong(start, stop));\n        return Timestamp.valueOf(\n            LocalDateTime.of(date, LocalTime.ofNanoOfDay(faker.number().numberBetween(0, DAYS_NANOS))));\n    }\n\n    /**\n     * Generates a random birthday between two ages from now as LocalDate.\n     *\n     * @param minAge the minimal age\n     * @param maxAge the maximal age\n     * @return a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n     * Negative {@code minAge} and {@code maxAge} are supported.\n     */\n    public LocalDate birthdayLocalDate(int minAge, int maxAge) {\n        final LocalDate localDate = LocalDate.now();\n        final LocalDate from = localDate.minusYears(maxAge);\n        if (minAge == maxAge) {\n            return from;\n        }\n        final long start = from.toEpochDay();\n        final long stop = localDate.minusYears(minAge).toEpochDay();\n        return LocalDate.ofEpochDay(faker.random().nextLong(start, stop));\n    }\n\n    /**\n     * Generates and converts to string representation a random birthday between two ages from now.\n     *\n     * @param minAge  the minimal age\n     * @param maxAge  the maximal age\n     * @param pattern date time pattern to convert to string.\n     * @return a string representation of a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n     * @throws IllegalArgumentException if the {@code maxAge} is lower than {@code minAge}.\n     */\n    public String birthday(int minAge, int maxAge, String pattern) {\n        return toString(birthday(minAge, maxAge), pattern);\n    }\n\n    /**\n     * Generates a random Duration lower than max.\n     *\n     * @param max  the maximum value\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return a random Duration lower than {@code max}.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    public Duration duration(long max, ChronoUnit unit) {\n        return duration(0, max, unit);\n    }\n\n    /**\n     * Generates a random Duration between min and max.\n     *\n     * @param min  the maximum value\n     * @param max  the minimal value\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return a random Duration between {@code min} inclusive and {@code max} exclusive if {@code max} greater {@code min}.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    public Duration duration(long min, long max, ChronoUnit unit) {\n        return generateDuration(faker.random().nextLong(min, max), unit);\n    }\n\n    /**\n     * Generates a random Duration lower than max.\n     *\n     * @param max  the maximum value\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return a random Duration lower than {@code max}.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    public Duration duration(long max, String unit) {\n        return duration(0, max, str2durationUnit(unit));\n    }\n\n    /**\n     * Generates a random Duration between min and max.\n     *\n     * @param min  the minimal value\n     * @param max  the maximum value\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return a random Duration between {@code min} inclusive and {@code max} exclusive if {@code max} greater {@code min}.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    public Duration duration(long min, long max, String unit) {\n        return generateDuration(faker.random().nextLong(min, max), str2durationUnit(unit));\n    }\n\n    /**\n     * Generates a random Period between min and max.\n     *\n     * @param min the minimal value\n     * @param max the maximum value\n     * @return a random Period between {@code min} inclusive and {@code max} inclusive if {@code max} greater {@code min}.\n     * @throws IllegalArgumentException if the {@code min} is greater than {@code max}.\n     */\n    public Period period(Period min, Period max) {\n        if (max.minus(min).isNegative()) {\n            throw new IllegalArgumentException(\"Max period(\" + max + \") should be not less than min (\" + min + \")\");\n        }\n        return Period.of(\n            faker.random().nextInt(min.getYears(), max.getYears()),\n            faker.random().nextInt(min.getMonths(), max.getMonths()),\n            faker.random().nextInt(min.getDays(), max.getDays()));\n    }\n\n    /**\n     * Utility method to convert string to ChronoUnit.\n     *\n     * @param unit the temporal unit (day or shorter than a day)\n     * @return converts unit to ChronoUnit.\n     * @throws IllegalArgumentException if the {@code unit} is invalid.\n     */\n    static ChronoUnit str2durationUnit(String unit) {\n        if (unit == null || unit.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Illegal duration unit '\" + unit + \"'\");\n        }\n        return switch (unit.toUpperCase(Locale.ROOT)) {\n            case \"NANO\", \"NANOS\" -> ChronoUnit.NANOS;\n            case \"MICRO\", \"MICROS\" -> ChronoUnit.MICROS;\n            case \"MILLI\", \"MILLIS\" -> ChronoUnit.MILLIS;\n            case \"SECOND\", \"SECONDS\" -> ChronoUnit.SECONDS;\n            case \"MINUTE\", \"MINUTES\" -> ChronoUnit.MINUTES;\n            case \"HOUR\", \"HOURS\" -> ChronoUnit.HOURS;\n            case \"DAY\", \"DAYS\" -> ChronoUnit.DAYS;\n            default -> throw new IllegalArgumentException(\"Illegal duration unit '\" + unit + \"'\");\n        };\n    }\n\n    private Duration generateDuration(long value, ChronoUnit unit) {\n        return Duration.of(value, unit);\n    }\n\n    private String toString(Date date, String pattern) {\n        return new SimpleDateFormat(pattern).format(date);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int DEFAULT_MIN_AGE = 18;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MIN_AGE = 18", "syntax_pass": true}, {"attribute_expression": "private static final int DEFAULT_MAX_AGE = 65;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DEFAULT_MAX_AGE = 65", "syntax_pass": true}, {"attribute_expression": "public static final long DAYS_NANOS = TimeUnit.DAYS.toNanos(1L);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "long", "name": "DAYS_NANOS = TimeUnit.DAYS.toNanos(1L)", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Size.java.Size", "name": "Size", "file_path": "src/main/java/net/datafaker/providers/base/Size.java", "superclasses": "", "methods": ["[]Size(BaseProviders)", "[String]adjective()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Size.java.Size.[]Size(BaseProviders)", "src/main/java/net/datafaker/providers/base/Size.java.Size.[String]adjective()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Size extends AbstractProvider<BaseProviders> {\n\n    protected Size(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String adjective() {\n        return resolve(\"size.adjective\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Brand.java.Brand", "name": "Brand", "file_path": "src/main/java/net/datafaker/providers/base/Brand.java", "superclasses": "", "methods": ["[]Brand(BaseProviders)", "[String]sport()", "[String]car()", "[String]watch()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Brand.java.Brand.[]Brand(BaseProviders)", "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[String]sport()", "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[String]car()", "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[String]watch()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerate random sport wearing brand, car brand or watch brand. Only generate brand by types of products.\nIf some brands already exists in another faker, you can integrate this faker in the Brand faker\n\n@since 1.8.0\n", "original_string": "public class Brand extends AbstractProvider<BaseProviders> {\n    protected Brand(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String sport() {\n        return resolve(\"brand.sport\");\n    }\n\n    public String car() {\n        return faker.vehicle().resolve(\"vehicle.makes\");\n    }\n\n    public String watch() {\n        return resolve(\"brand.watch\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space", "name": "Space", "file_path": "src/main/java/net/datafaker/providers/base/Space.java", "superclasses": "", "methods": ["[]Space(BaseProviders)", "[String]planet()", "[String]moon()", "[String]galaxy()", "[String]nebula()", "[String]starCluster()", "[String]constellation()", "[String]star()", "[String]agency()", "[String]agencyAbbreviation()", "[String]nasaSpaceCraft()", "[String]company()", "[String]distanceMeasurement()", "[String]meteorite()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Space.java.Space.[]Space(BaseProviders)", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]planet()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]moon()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]galaxy()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]nebula()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]starCluster()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]constellation()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]star()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]agency()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]agencyAbbreviation()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]nasaSpaceCraft()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]company()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]distanceMeasurement()", "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]meteorite()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Space extends AbstractProvider<BaseProviders> {\n\n    protected Space(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String planet() {\n        return resolve(\"space.planet\");\n    }\n\n    public String moon() {\n        return resolve(\"space.moon\");\n    }\n\n    public String galaxy() {\n        return resolve(\"space.galaxy\");\n    }\n\n    public String nebula() {\n        return resolve(\"space.nebula\");\n    }\n\n    public String starCluster() {\n        return resolve(\"space.star_cluster\");\n    }\n\n    public String constellation() {\n        return resolve(\"space.constellation\");\n    }\n\n    public String star() {\n        return resolve(\"space.star\");\n    }\n\n    public String agency() {\n        return resolve(\"space.agency\");\n    }\n\n    public String agencyAbbreviation() {\n        return resolve(\"space.agency_abv\");\n    }\n\n    public String nasaSpaceCraft() {\n        return resolve(\"space.nasa_space_craft\");\n    }\n\n    public String company() {\n        return resolve(\"space.company\");\n    }\n\n    public String distanceMeasurement() {\n        return faker.number().numberBetween(10, 100) + ' ' + resolve(\"space.distance_measurement\");\n    }\n\n    public String meteorite() {\n        return resolve(\"space.meteorite\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "name": "Planet", "file_path": "src/main/java/net/datafaker/providers/base/Planet.java", "superclasses": "", "methods": ["[]Planet(BaseProviders)", "[String]name()", "[String]symbol()", "[String]symbol(PlanetName)", "[String]classification()", "[String]classification(PlanetName)", "[String]discoveryYear()", "[String]discoveryYear(PlanetName)", "[String]meanDistanceFromTheSun()", "[String]meanDistanceFromTheSun(PlanetName)", "[String]lengthOfDay()", "[String]lengthOfDay(PlanetName)", "[String]equatorialRadius()", "[String]equatorialRadius(PlanetName)", "[String]surfaceArea()", "[String]surfaceArea(PlanetName)", "[String]volume()", "[String]volume(PlanetName)", "[String]mass()", "[String]mass(PlanetName)", "[String]gravitationParameters()", "[String]gravitationParameters(PlanetName)", "[String]density()", "[String]density(PlanetName)", "[String]equatorialGravity()", "[String]equatorialGravity(PlanetName)", "[String]escapeVelocity()", "[String]escapeVelocity(PlanetName)", "[String]rotationPeriod()", "[String]rotationPeriod(PlanetName)", "[String]orbitalPeriod()", "[String]orbitalPeriod(PlanetName)", "[String]meanOrbitalSpeed()", "[String]meanOrbitalSpeed(PlanetName)", "[String]eccentricity()", "[String]eccentricity(PlanetName)", "[String]inclination()", "[String]inclination(PlanetName)", "[String]axialTilt()", "[String]axialTilt(PlanetName)", "[String]meanSurfaceTemperature()", "[String]meanSurfaceTemperature(PlanetName)", "[String]meanAirTemperature()", "[String]meanAirTemperature(PlanetName)", "[String]atmosphericComposition()", "[String]atmosphericComposition(PlanetName)", "[String]numberOfKnownMoons()", "[String]numberOfKnownMoons(PlanetName)", "[String]rings()", "[String]rings(PlanetName)", "[String]planetaryDiscriminant()", "[String]planetaryDiscriminant(PlanetName)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Planet.java.Planet.[]Planet(BaseProviders)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]name()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]symbol()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]symbol(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]classification()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]classification(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]discoveryYear()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]discoveryYear(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanDistanceFromTheSun()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanDistanceFromTheSun(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]lengthOfDay()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]lengthOfDay(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialRadius()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialRadius(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]surfaceArea()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]surfaceArea(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]volume()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]volume(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]mass()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]mass(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]gravitationParameters()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]gravitationParameters(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]density()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]density(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialGravity()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialGravity(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]escapeVelocity()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]escapeVelocity(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rotationPeriod()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rotationPeriod(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]orbitalPeriod()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]orbitalPeriod(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanOrbitalSpeed()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanOrbitalSpeed(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]eccentricity()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]eccentricity(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]inclination()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]inclination(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]axialTilt()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]axialTilt(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanSurfaceTemperature()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanSurfaceTemperature(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanAirTemperature()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanAirTemperature(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]atmosphericComposition()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]atmosphericComposition(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]numberOfKnownMoons()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]numberOfKnownMoons(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rings()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rings(PlanetName)", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]planetaryDiscriminant()", "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]planetaryDiscriminant(PlanetName)"], "overrides": null, "attributes": [], "class_docstring": "\nProvides planet specific metadata like length of the day, radius, mass etc.\n\n@since 2.2.0\n", "original_string": "public class Planet extends AbstractProvider<BaseProviders> {\n\n    protected Planet(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"planet.name\");\n    }\n\n    public String symbol() {\n        return symbol(faker.options().option(PlanetName.class));\n    }\n\n    public String symbol(PlanetName planetName) {\n        return resolve(\"planet.symbol.\" + planetName.getName());\n    }\n\n    public String classification() {\n        return classification(faker.options().option(PlanetName.class));\n    }\n\n    public String classification(PlanetName planetName) {\n        return resolve(\"planet.classification.\" + planetName.getName());\n    }\n\n    public String discoveryYear() {\n        return discoveryYear(faker.options().option(PlanetName.class));\n    }\n\n    public String discoveryYear(PlanetName planetName) {\n        return resolve(\"planet.discovery_year.\" + planetName.getName());\n    }\n\n    public String meanDistanceFromTheSun() {\n        return meanDistanceFromTheSun(faker.options().option(PlanetName.class));\n    }\n\n    public String meanDistanceFromTheSun(PlanetName planetName) {\n        return resolve(\"planet.mean_distance_from_the_sun.\" + planetName.getName());\n    }\n\n    public String lengthOfDay() {\n        return meanDistanceFromTheSun(faker.options().option(PlanetName.class));\n    }\n\n    public String lengthOfDay(PlanetName planetName) {\n        return resolve(\"planet.length_of_day.\" + planetName.getName());\n    }\n\n    public String equatorialRadius() {\n        return equatorialRadius(faker.options().option(PlanetName.class));\n    }\n\n    public String equatorialRadius(PlanetName planetName) {\n        return resolve(\"planet.equatorial_radius.\" + planetName.getName());\n    }\n\n    public String surfaceArea() {\n        return surfaceArea(faker.options().option(PlanetName.class));\n    }\n\n    public String surfaceArea(PlanetName planetName) {\n        return resolve(\"planet.surface_area.\" + planetName.getName());\n    }\n\n    public String volume() {\n        return volume(faker.options().option(PlanetName.class));\n    }\n\n    public String volume(PlanetName planetName) {\n        return resolve(\"planet.volume.\" + planetName.getName());\n    }\n\n    public String mass() {\n        return mass(faker.options().option(PlanetName.class));\n    }\n\n    public String mass(PlanetName planetName) {\n        return resolve(\"planet.mass.\" + planetName.getName());\n    }\n\n    public String gravitationParameters() {\n        return gravitationParameters(faker.options().option(PlanetName.class));\n    }\n\n    public String gravitationParameters(PlanetName planetName) {\n        return resolve(\"planet.gravitational_parameters.\" + planetName.getName());\n    }\n\n    public String density() {\n        return density(faker.options().option(PlanetName.class));\n    }\n\n    public String density(PlanetName planetName) {\n        return resolve(\"planet.density.\" + planetName.getName());\n    }\n\n    public String equatorialGravity() {\n        return equatorialGravity(faker.options().option(PlanetName.class));\n    }\n\n    public String equatorialGravity(PlanetName planetName) {\n        return resolve(\"planet.equatorial_gravity.\" + planetName.getName());\n    }\n\n    public String escapeVelocity() {\n        return escapeVelocity(faker.options().option(PlanetName.class));\n    }\n\n    public String escapeVelocity(PlanetName planetName) {\n        return resolve(\"planet.escape_velocity.\" + planetName.getName());\n    }\n\n    public String rotationPeriod() {\n        return rotationPeriod(faker.options().option(PlanetName.class));\n    }\n\n    public String rotationPeriod(PlanetName planetName) {\n        return resolve(\"planet.rotation_period.\" + planetName.getName());\n    }\n\n    public String orbitalPeriod() {\n        return orbitalPeriod(faker.options().option(PlanetName.class));\n    }\n\n    public String orbitalPeriod(PlanetName planetName) {\n        return resolve(\"planet.orbital_period.\" + planetName.getName());\n    }\n\n    public String meanOrbitalSpeed() {\n        return meanOrbitalSpeed(faker.options().option(PlanetName.class));\n    }\n\n    public String meanOrbitalSpeed(PlanetName planetName) {\n        return resolve(\"planet.mean_orbital_speed.\" + planetName.getName());\n    }\n\n    public String eccentricity() {\n        return eccentricity(faker.options().option(PlanetName.class));\n    }\n\n    public String eccentricity(PlanetName planetName) {\n        return resolve(\"planet.eccentricity.\" + planetName.getName());\n    }\n\n    public String inclination() {\n        return inclination(faker.options().option(PlanetName.class));\n    }\n\n    public String inclination(PlanetName planetName) {\n        return resolve(\"planet.inclination.\" + planetName.getName());\n    }\n\n    public String axialTilt() {\n        return axialTilt(faker.options().option(PlanetName.class));\n    }\n\n    public String axialTilt(PlanetName planetName) {\n        return resolve(\"planet.axial_tilt.\" + planetName.getName());\n    }\n\n    public String meanSurfaceTemperature() {\n        return meanSurfaceTemperature(faker.options().option(PlanetName.class));\n    }\n\n    public String meanSurfaceTemperature(PlanetName planetName) {\n        return resolve(\"planet.mean_surface_temperature.\" + planetName.getName());\n    }\n\n    public String meanAirTemperature() {\n        return meanAirTemperature(faker.options().option(PlanetName.class));\n    }\n\n    public String meanAirTemperature(PlanetName planetName) {\n        return resolve(\"planet.mean_air_temperature.\" + planetName.getName());\n    }\n\n    public String atmosphericComposition() {\n        return atmosphericComposition(faker.options().option(PlanetName.class));\n    }\n\n    public String atmosphericComposition(PlanetName planetName) {\n        return resolve(\"planet.atmospheric_composition.\" + planetName.getName());\n    }\n\n    public String numberOfKnownMoons() {\n        return numberOfKnownMoons(faker.options().option(PlanetName.class));\n    }\n\n    public String numberOfKnownMoons(PlanetName planetName) {\n        return resolve(\"planet.number_of_known_moons.\" + planetName.getName());\n    }\n\n    public String rings() {\n        return rings(faker.options().option(PlanetName.class));\n    }\n\n    public String rings(PlanetName planetName) {\n        return resolve(\"planet.rings.\" + planetName.getName());\n    }\n\n    public String planetaryDiscriminant() {\n        return planetaryDiscriminant(faker.options().option(PlanetName.class));\n    }\n\n    public String planetaryDiscriminant(PlanetName planetName) {\n        return resolve(\"planet.planetary_discriminant.\" + planetName.getName());\n    }\n\n    public enum PlanetName {\n        JUPITER(\"jupiter\"),\n        MARS(\"mars\"),\n        VENUS(\"venus\"),\n        URANUS(\"uranus\"),\n        MERCURY(\"mercury\"),\n        NEPTUNE(\"neptune\"),\n        EARTH(\"earth\"),\n        SATURN(\"saturn\"),\n        PLUTO(\"pluto\");\n\n        private final String name;\n\n        PlanetName(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address", "name": "Address", "file_path": "src/main/java/net/datafaker/providers/base/Address.java", "superclasses": "", "methods": ["[]Address(BaseProviders)", "[String]streetName()", "[String]streetAddressNumber()", "[String]streetAddress()", "[String]streetAddress(boolean)", "[String]secondaryAddress()", "[String]zipCode()", "[String]postcode()", "[String]zipCodePlus4()", "[String]zipCodeByState(String)", "[String]countyByZipCode(String)", "[String]streetSuffix()", "[String]streetPrefix()", "[String]citySuffix()", "[String]cityPrefix()", "[String]city()", "[String]cityName()", "[String]state()", "[String]stateAbbr()", "[String]latitude()", "[String]longitude()", "[String]latLon()", "[String]latLon(String)", "[String]lonLat()", "[String]lonLat(String)", "[String]timeZone()", "[String]country()", "[String]countryCode()", "[String]buildingNumber()", "[String]fullAddress()", "[String]mailBox()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Address.java.Address.[]Address(BaseProviders)", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetName()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetAddressNumber()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetAddress()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetAddress(boolean)", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]secondaryAddress()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]zipCode()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]postcode()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]zipCodePlus4()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]zipCodeByState(String)", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]countyByZipCode(String)", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetSuffix()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetPrefix()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]citySuffix()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]cityPrefix()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]city()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]cityName()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]state()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]stateAbbr()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]latitude()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]longitude()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]latLon()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]latLon(String)", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]lonLat()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]lonLat(String)", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]timeZone()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]country()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]countryCode()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]buildingNumber()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]fullAddress()", "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]mailBox()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Address extends AbstractProvider<BaseProviders> {\n    protected Address(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String streetName() {\n        return resolve(\"address.street_name\");\n    }\n\n    public String streetAddressNumber() {\n        return String.valueOf(faker.random().nextInt(1000));\n    }\n\n    public String streetAddress() {\n        return resolve(\"address.street_address\");\n    }\n\n    public String streetAddress(boolean includeSecondary) {\n        String streetAddress = resolve(\"address.street_address\");\n        if (includeSecondary) {\n            streetAddress = streetAddress + \" \" + secondaryAddress();\n        }\n        return streetAddress;\n    }\n\n    public String secondaryAddress() {\n        return faker.numerify(resolve(\"address.secondary_address\"));\n    }\n\n    /**\n     * Returns a String representing a standard 5-digit zip code.\n     *\n     * @return a String representing a standard zip code\n     */\n    public String zipCode() {\n        return faker.bothify(resolve(\"address.postcode\"));\n    }\n\n    public String postcode() {\n        return faker.bothify(resolve(\"address.postcode\"));\n    }\n\n    /**\n     * Returns a String representing a ZIP+4 code for greater geographic specificity.\n     * This is a 9-digit zip code, but the String itself is 10 characters including the hyphen.\n     *\n     * @return a String representing a ZIP+4 code\n     */\n    public String zipCodePlus4() {\n        return faker.bothify(resolve(\"address.postcode_plus_four\"));\n    }\n\n    public String zipCodeByState(String stateAbbr) {\n        return resolve(\"address.postcode_by_state.\" + stateAbbr);\n    }\n\n    public String countyByZipCode(String postCode) {\n        return resolve(\"address.county_by_postcode.\" + postCode, () -> \"County is not configured for postcode \" + postCode);\n    }\n\n    public String streetSuffix() {\n        return resolve(\"address.street_suffix\");\n    }\n\n    @Deterministic\n    public String streetPrefix() {\n        return resolve(\"address.street_prefix\");\n    }\n\n    public String citySuffix() {\n        return resolve(\"address.city_suffix\");\n    }\n\n    public String cityPrefix() {\n        return resolve(\"address.city_prefix\");\n    }\n\n    public String city() {\n        return resolve(\"address.city\");\n    }\n\n    public String cityName() {\n        return resolve(\"address.city_name\");\n    }\n\n    public String state() {\n        return resolve(\"address.state\");\n    }\n\n    public String stateAbbr() {\n        return resolve(\"address.state_abbr\");\n    }\n\n    /**\n     * @return Returns the latitude, a number between -90 to 90.\n     */\n    public String latitude() {\n        return String.format(faker.getContext().getLocale(), \"%.8f\", (faker.random().nextDouble() * 180) - 90);\n    }\n\n    /**\n     * @return Returns the longitude, a number between -180 and 180\n     */\n    public String longitude() {\n        return String.format(faker.getContext().getLocale(), \"%.8f\", (faker.random().nextDouble() * 360) - 180);\n    }\n\n    /**\n     * @return Returns the lat/lon coordinates formatted as lat,lon.\n     */\n    public String latLon() {\n        return latLon(\",\");\n    }\n\n    /**\n     * @return Returns the lat/lon coordinates formatted as lat delimiter lon.\n     */\n    public String latLon(String delimiter) {\n        return latitude() + delimiter + longitude();\n    }\n\n    /**\n     * @return Returns the lat/lon coordinates formatted as lon,lat.\n     */\n    public String lonLat() {\n        return lonLat(\",\");\n    }\n\n    /**\n     * @return Returns the lat/lon coordinates formatted as lon delimiter lat.\n     */\n    public String lonLat(String delimiter) {\n        return longitude() + delimiter + latitude();\n    }\n\n    public String timeZone() {\n        return resolve(\"address.time_zone\");\n    }\n\n    public String country() {\n        return resolve(\"address.country\");\n    }\n\n    public String countryCode() {\n        return resolve(\"address.country_code\");\n    }\n\n    public String buildingNumber() {\n        return faker.numerify(resolve(\"address.building_number\"));\n    }\n\n    public String fullAddress() {\n        return resolve(\"address.full_address\");\n    }\n\n    public String mailBox() {\n        return faker.numerify(resolve(\"address.mail_box\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job", "name": "Job", "file_path": "src/main/java/net/datafaker/providers/base/Job.java", "superclasses": "", "methods": ["[]Job(BaseProviders)", "[String]field()", "[String]seniority()", "[String]position()", "[String]keySkills()", "[String]title()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Job.java.Job.[]Job(BaseProviders)", "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]field()", "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]seniority()", "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]position()", "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]keySkills()", "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]title()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Job extends AbstractProvider<BaseProviders> {\n\n    public Job(final BaseProviders faker) {\n        super(faker);\n    }\n\n    public String field() {\n        return resolve(\"job.field\");\n    }\n\n    public String seniority() {\n        return resolve(\"job.seniority\");\n    }\n\n    public String position() {\n        return resolve(\"job.position\");\n    }\n\n    public String keySkills() {\n        return resolve(\"job.key_skills\");\n    }\n\n    public String title() {\n        return resolve(\"job.title\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode", "name": "LanguageCode", "file_path": "src/main/java/net/datafaker/providers/base/LanguageCode.java", "superclasses": "", "methods": ["[]LanguageCode(BaseProviders)", "[String]iso639()"], "method_uris": ["src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode.[]LanguageCode(BaseProviders)", "src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode.[String]iso639()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.0.3\n", "original_string": "public class LanguageCode extends AbstractProvider<BaseProviders> {\n\n    private static final String[] languages = Locale.getISOLanguages();\n\n    protected LanguageCode(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Returns a random 2-letter language code defined in ISO 639.\n     *\n     * @return a random 2-letter language code\n     */\n    public String iso639() {\n        int index = faker.random().nextInt(languages.length);\n        return languages[index];\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String[] languages = Locale.getISOLanguages();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "languages = Locale.getISOLanguages()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "name": "Relationship", "file_path": "src/main/java/net/datafaker/providers/base/Relationship.java", "superclasses": "", "methods": ["[]Relationship(BaseProviders)", "[String]direct()", "[String]extended()", "[String]inLaw()", "[String]spouse()", "[String]parent()", "[String]sibling()", "[String]any()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[]Relationship(BaseProviders)", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]direct()", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]extended()", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]inLaw()", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]spouse()", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]parent()", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]sibling()", "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]any()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Relationship extends AbstractProvider<BaseProviders> {\n\n    private enum Kind {\n        direct(\"relationship.familial.direct\"),\n        extended(\"relationship.familial.extended\"),\n        inLaw(\"relationship.in_law\"),\n        spouse(\"relationship.spouse\"),\n        parent(\"relationship.parent\"),\n        sibling(\"relationship.sibling\");\n\n        private final String expression;\n        Kind(String expression) {\n            this.expression = expression;\n        }\n    }\n\n    protected Relationship(final BaseProviders faker) {\n        super(faker);\n    }\n\n    public String direct() {\n        return resolve(Kind.direct.expression);\n    }\n\n    public String extended() {\n        return resolve(Kind.extended.expression);\n    }\n\n    public String inLaw() {\n        return resolve(Kind.inLaw.expression);\n    }\n\n    public String spouse() {\n        return resolve(Kind.spouse.expression);\n    }\n\n    public String parent() {\n        return resolve(Kind.parent.expression);\n    }\n\n    public String sibling() {\n        return resolve(Kind.sibling.expression);\n    }\n\n    public String any() {\n        Kind kind = faker.options().option(Kind.values());\n        return resolve(kind.expression);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "name": "Azure", "file_path": "src/main/java/net/datafaker/providers/base/Azure.java", "superclasses": "", "methods": ["[]Azure(BaseProviders)", "[String]region()", "[String]subscriptionId()", "[String]tenantId()", "[String]resourceGroup()", "[String]managementGroup()", "[String]applicationGateway()", "[String]bastionHost()", "[String]firewall()", "[String]loadBalancer()", "[String]networkSecurityGroup()", "[String]virtualNetwork()", "[String]virtualWan()", "[String]appServiceEnvironment()", "[String]appServicePlan()", "[String]loadTesting()", "[String]staticWebApp()", "[String]virtualMachine()", "[String]storageAccount()", "[String]containerRegistry()", "[String]containerApps()", "[String]containerAppsEnvironment()", "[String]containerInstance()", "[String]cosmosDBDatabase()", "[String]sqlDatabase()", "[String]mysqlDatabase()", "[String]postgreSQLDatabase()", "[String]serviceBus()", "[String]serviceBusQueue()", "[String]serviceBusTopic()", "[String]keyVault()", "[String]logAnalytics()", "[String]springApps()", "[String]randHex()"], "method_uris": ["src/main/java/net/datafaker/providers/base/Azure.java.Azure.[]Azure(BaseProviders)", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]region()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]subscriptionId()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]tenantId()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]resourceGroup()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]managementGroup()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]applicationGateway()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]bastionHost()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]firewall()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]loadBalancer()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]networkSecurityGroup()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]virtualNetwork()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]virtualWan()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]appServiceEnvironment()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]appServicePlan()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]loadTesting()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]staticWebApp()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]virtualMachine()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]storageAccount()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerRegistry()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerApps()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerAppsEnvironment()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerInstance()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]cosmosDBDatabase()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]sqlDatabase()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]mysqlDatabase()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]postgreSQLDatabase()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]serviceBus()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]serviceBusQueue()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]serviceBusTopic()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]keyVault()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]logAnalytics()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]springApps()", "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]randHex()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates data for Azure services. This is based on the Azure best practices of naming conventions:\n<a href=\"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming\">Naming conventions</a>\n<a href=\"https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\">Abbreviation examples</a>\n\n@since 1.7.0\n", "original_string": "public class Azure extends AbstractProvider<BaseProviders> {\n\n    protected Azure(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String region() {\n        return resolve(\"azure.regions\");\n    }\n\n    public String subscriptionId() {\n        return faker.random().hex(8, false) + '-' +\n            faker.random().hex(4, false) + '-' +\n            faker.random().hex(4, false) + '-' +\n            faker.random().hex(4, false) + '-' +\n            faker.random().hex(12, false);\n    }\n\n    public String tenantId() {\n        return subscriptionId();\n    }\n    public String resourceGroup() {\n        return \"rg-\" + randHex();\n    }\n\n    public String managementGroup() {\n        return \"mg-\" + randHex();\n    }\n\n    public String applicationGateway() {\n        return \"agw-\" + randHex();\n    }\n\n    public String bastionHost() {\n        return \"bas-\" + randHex();\n    }\n\n    public String firewall() {\n        return \"afw-\" + randHex();\n    }\n\n    public String loadBalancer() {\n        return \"lbi-\" + randHex();\n    }\n\n    public String networkSecurityGroup() {\n        return \"nsg-\" + randHex();\n    }\n\n    public String virtualNetwork() {\n        return \"vnet-\" + randHex();\n    }\n\n    public String virtualWan() {\n        return \"vwan-\" + randHex();\n    }\n\n    public String appServiceEnvironment() {\n        return \"ase-\" + randHex();\n    }\n\n    public String appServicePlan() {\n        return \"asp-\" + randHex();\n    }\n\n    public String loadTesting() {\n        return \"lt-\" + randHex();\n    }\n\n    public String staticWebApp() {\n        return \"stapp-\" + randHex();\n    }\n\n    public String virtualMachine() {\n        return \"vm-\" + randHex();\n    }\n\n    public String storageAccount() {\n        return \"st-\" + randHex();\n    }\n\n    public String containerRegistry() {\n        return \"cr-\" + randHex();\n    }\n\n    public String containerApps() {\n        return \"ca-\" + randHex();\n    }\n\n    public String containerAppsEnvironment() {\n        return \"cae-\" + randHex();\n    }\n\n    public String containerInstance() {\n        return \"ci-\" + randHex();\n    }\n\n    public String cosmosDBDatabase() {\n        return \"cosmos-\" + randHex();\n    }\n\n    public String sqlDatabase() {\n        return \"sql-\" + randHex();\n    }\n\n    public String mysqlDatabase() {\n        return \"mysql-\" + randHex();\n    }\n\n    public String postgreSQLDatabase() {\n        return \"psql-\" + randHex();\n    }\n\n    public String serviceBus() {\n        return \"sb-\" + randHex();\n    }\n\n    public String serviceBusQueue() {\n        return \"sbq-\" + randHex();\n    }\n\n    public String serviceBusTopic() {\n        return \"sbt-\" + randHex();\n    }\n\n    public String keyVault() {\n        return \"kv-\" + randHex();\n    }\n\n    public String logAnalytics() {\n        return \"log-\" + randHex();\n    }\n    \n    public String springApps() {\n        return \"sa-\" + randHex();\n    }\n\n    private String randHex() {\n        return faker.random().hex(16, false);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/House.java.House", "name": "House", "file_path": "src/main/java/net/datafaker/providers/base/House.java", "superclasses": "", "methods": ["[]House(BaseProviders)", "[String]furniture()", "[String]room()"], "method_uris": ["src/main/java/net/datafaker/providers/base/House.java.House.[]House(BaseProviders)", "src/main/java/net/datafaker/providers/base/House.java.House.[String]furniture()", "src/main/java/net/datafaker/providers/base/House.java.House.[String]room()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class House extends AbstractProvider<BaseProviders> {\n\n    protected House(BaseProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random name of furniture.\n     *\n     * @return a string of furniture.\n     */\n    public String furniture() {\n        return resolve(\"house.furniture\");\n    }\n\n    /**\n     * This method generates a random name of a room in a house.\n     *\n     * @return a string of room.\n     */\n    public String room() {\n        return resolve(\"house.rooms\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company", "name": "Company", "file_path": "src/main/java/net/datafaker/providers/base/Company.java", "superclasses": "", "methods": ["[]Company(BaseProviders)", "[String]name()", "[String]suffix()", "[String]industry()", "[String]profession()", "[String]buzzword()", "[List<String>]loadBuzzwords()", "[String]catchPhrase()", "[String]bs()", "[String]logo()", "[String]url()", "[String]domainName()", "[String]domainSuffix()", "[String]joinSampleOfEachList(List<List<String>>)"], "method_uris": ["src/main/java/net/datafaker/providers/base/Company.java.Company.[]Company(BaseProviders)", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]name()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]suffix()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]industry()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]profession()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]buzzword()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[List<String>]loadBuzzwords()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]catchPhrase()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]bs()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]logo()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]url()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]domainName()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]domainSuffix()", "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]joinSampleOfEachList(List<List<String>>)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Company extends AbstractProvider<BaseProviders> {\n\n    private final LazyEvaluated<List<String>> allBuzzwords = new LazyEvaluated<>(() -> loadBuzzwords());\n\n    protected Company(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"company.name\");\n    }\n\n    public String suffix() {\n        return resolve(\"company.suffix\");\n    }\n\n    public String industry() {\n        return resolve(\"company.industry\");\n    }\n\n    public String profession() {\n        return resolve(\"company.profession\");\n    }\n\n    public String buzzword() {\n        return faker.options().nextElement(allBuzzwords.get());\n    }\n\n    private List<String> loadBuzzwords() {\n        List<List<String>> buzzwordLists = faker.fakeValuesService().fetchObject(\"company.buzzwords\", faker.getContext());\n        return buzzwordLists.stream().flatMap(Collection::stream).toList();\n    }\n\n    /**\n     * Generate a buzzword-laden catch phrase.\n     */\n    public String catchPhrase() {\n        List<List<String>> catchPhraseLists = faker.fakeValuesService().fetchObject(\"company.buzzwords\", faker.getContext());\n        return joinSampleOfEachList(catchPhraseLists);\n    }\n\n    /**\n     * When a straight answer won't do, BS to the rescue!\n     */\n    public String bs() {\n        List<List<String>> buzzwordLists = faker.fakeValuesService().fetchObject(\"company.bs\", faker.getContext());\n        return joinSampleOfEachList(buzzwordLists);\n    }\n\n    /**\n     * Generate a random company logo url in PNG format.\n     */\n    public String logo() {\n        int number = faker.random().nextInt(13) + 1;\n        return \"https://pigment.github.io/fake-logos/logos/medium/color/\" + number + \".png\";\n    }\n\n    public String url() {\n        return \"www.\"\n            + FakerIDN.toASCII(domainName()) + \".\"\n            + domainSuffix();\n    }\n\n    private String domainName() {\n        final char[] res = name().toLowerCase(faker.getContext().getLocale()).toCharArray();\n        int offset = 0;\n        for (int i = 0; i < res.length; i++) {\n            final char c = res[i];\n            switch (c) {\n                case '.', ',', '\\'', ' ', ']' -> offset++;\n                default -> res[i - offset] = res[i];\n            }\n        }\n        return String.valueOf(res, 0, res.length - offset);\n    }\n\n    private String domainSuffix() {\n        return resolve(\"internet.domain_suffix\");\n    }\n\n    private String joinSampleOfEachList(List<List<String>> listOfLists) {\n        return listOfLists.stream()\n            .map(list -> faker.options().nextElement(list))\n            .collect(joining(\" \"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final LazyEvaluated<List<String>> allBuzzwords = new LazyEvaluated<>(() -> loadBuzzwords());", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "LazyEvaluated<List<String>>", "name": "allBuzzwords = new LazyEvaluated<>(() -> loadBuzzwords())", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "name": "Shakespeare", "file_path": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "superclasses": "", "methods": ["[]Shakespeare(BaseProviders)", "[String]hamletQuote()", "[String]asYouLikeItQuote()", "[String]kingRichardIIIQuote()", "[String]romeoAndJulietQuote()", "[String]randomElement(String[])"], "method_uris": ["src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[]Shakespeare(BaseProviders)", "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]hamletQuote()", "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]asYouLikeItQuote()", "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]kingRichardIIIQuote()", "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]romeoAndJulietQuote()", "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]randomElement(String[])"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Shakespeare extends AbstractProvider<BaseProviders> {\n\n    private static final String[] hamletQuotes = {\n        \"To be, or not to be: that is the question.\",\n        \"Neither a borrower nor a lender be; For loan oft loses both itself and friend, and borrowing dulls the edge of husbandry.\",\n        \"This above all: to thine own self be true.\",\n        \"Though this be madness, yet there is method in 't.\",\n        \"That it should come to this!.\",\n        \"There is nothing either good or bad, but thinking makes it so.\",\n        \"What a piece of work is man! how noble in reason! how infinite in faculty! in form and moving how express and admirable! in action how like an angel! in apprehension how like a god! the beauty of the world, the paragon of animals! .\",\n        \"The lady doth protest too much, methinks.\",\n        \"In my mind's eye.\",\n        \"A little more than kin, and less than kind.\",\n        \"The play 's the thing wherein I'll catch the conscience of the king.\",\n        \"And it must follow, as the night the day, thou canst not then be false to any man.\",\n        \"Brevity is the soul of wit.\",\n        \"Doubt that the sun doth move, doubt truth to be a liar, but never doubt I love.\",\n        \"Rich gifts wax poor when givers prove unkind.\",\n        \"Do you think I am easier to be played on than a pipe?\",\n        \"I will speak daggers to her, but use none.\",\n        \"When sorrows come, they come not single spies, but in battalions.\"};\n\n    private static final String[] asYouLikeItQuotes = {\n        \"All the world 's a stage, and all the men and women merely players. They have their exits and their entrances; And one man in his time plays many parts.\",\n        \"Can one desire too much of a good thing?.\",\n        \"I like this place and willingly could waste my time in it.\",\n        \"How bitter a thing it is to look into happiness through another man's eyes!\",\n        \"Blow, blow, thou winter wind! Thou art not so unkind as man's ingratitude.\",\n        \"True is it that we have seen better days.\",\n        \"For ever and a day.\",\n        \"The fool doth think he is wise, but the wise man knows himself to be a fool.\"};\n\n    private static final String[] kingRichardIIIQuotes = {\n        \"Now is the winter of our discontent.\",\n        \"A horse! a horse! my kingdom for a horse!.\",\n        \"Conscience is but a word that cowards use, devised at first to keep the strong in awe.\",\n        \"So wise so young, they say, do never live long.\",\n        \"Off with his head!\",\n        \"An honest tale speeds best, being plainly told.\",\n        \"The king's name is a tower of strength.\",\n        \"The world is grown so bad, that wrens make prey where eagles dare not perch.\"};\n\n    private static final String[] romeoAndJulietQuotes = {\n        \"O Romeo, Romeo! wherefore art thou Romeo?.\",\n        \"It is the east, and Juliet is the sun.\",\n        \"Good Night, Good night! Parting is such sweet sorrow, that I shall say good night till it be morrow.\",\n        \"What's in a name? That which we call a rose by any other name would smell as sweet.\",\n        \"Wisely and slow; they stumble that run fast.\",\n        \"Tempt not a desperate man.\",\n        \"For you and I are past our dancing days.\",\n        \"O! she doth teach the torches to burn bright.\",\n        \"It seems she hangs upon the cheek of night like a rich jewel in an Ethiope's ear.\",\n        \"See, how she leans her cheek upon her hand! O that I were a glove upon that hand, that I might touch that cheek!.\",\n        \"Not stepping o'er the bounds of modesty.\"};\n\n    protected Shakespeare(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String hamletQuote() {\n        return randomElement(hamletQuotes);\n    }\n\n    public String asYouLikeItQuote() {\n        return randomElement(asYouLikeItQuotes);\n    }\n\n    public String kingRichardIIIQuote() {\n        return randomElement(kingRichardIIIQuotes);\n    }\n\n    public String romeoAndJulietQuote() {\n        return randomElement(romeoAndJulietQuotes);\n    }\n\n    private String randomElement(String[] values) {\n        return values[faker.random().nextInt(values.length)];\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String[] hamletQuotes = {\n        \"To be, or not to be: that is the question.\",\n        \"Neither a borrower nor a lender be; For loan oft loses both itself and friend, and borrowing dulls the edge of husbandry.\",\n        \"This above all: to thine own self be true.\",\n        \"Though this be madness, yet there is method in 't.\",\n        \"That it should come to this!.\",\n        \"There is nothing either good or bad, but thinking makes it so.\",\n        \"What a piece of work is man! how noble in reason! how infinite in faculty! in form and moving how express and admirable! in action how like an angel! in apprehension how like a god! the beauty of the world, the paragon of animals! .\",\n        \"The lady doth protest too much, methinks.\",\n        \"In my mind's eye.\",\n        \"A little more than kin, and less than kind.\",\n        \"The play 's the thing wherein I'll catch the conscience of the king.\",\n        \"And it must follow, as the night the day, thou canst not then be false to any man.\",\n        \"Brevity is the soul of wit.\",\n        \"Doubt that the sun doth move, doubt truth to be a liar, but never doubt I love.\",\n        \"Rich gifts wax poor when givers prove unkind.\",\n        \"Do you think I am easier to be played on than a pipe?\",\n        \"I will speak daggers to her, but use none.\",\n        \"When sorrows come, they come not single spies, but in battalions.\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "hamletQuotes = {\n        \"To be, or not to be: that is the question.\",\n        \"Neither a borrower nor a lender be; For loan oft loses both itself and friend, and borrowing dulls the edge of husbandry.\",\n        \"This above all: to thine own self be true.\",\n        \"Though this be madness, yet there is method in 't.\",\n        \"That it should come to this!.\",\n        \"There is nothing either good or bad, but thinking makes it so.\",\n        \"What a piece of work is man! how noble in reason! how infinite in faculty! in form and moving how express and admirable! in action how like an angel! in apprehension how like a god! the beauty of the world, the paragon of animals! .\",\n        \"The lady doth protest too much, methinks.\",\n        \"In my mind's eye.\",\n        \"A little more than kin, and less than kind.\",\n        \"The play 's the thing wherein I'll catch the conscience of the king.\",\n        \"And it must follow, as the night the day, thou canst not then be false to any man.\",\n        \"Brevity is the soul of wit.\",\n        \"Doubt that the sun doth move, doubt truth to be a liar, but never doubt I love.\",\n        \"Rich gifts wax poor when givers prove unkind.\",\n        \"Do you think I am easier to be played on than a pipe?\",\n        \"I will speak daggers to her, but use none.\",\n        \"When sorrows come, they come not single spies, but in battalions.\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] asYouLikeItQuotes = {\n        \"All the world 's a stage, and all the men and women merely players. They have their exits and their entrances; And one man in his time plays many parts.\",\n        \"Can one desire too much of a good thing?.\",\n        \"I like this place and willingly could waste my time in it.\",\n        \"How bitter a thing it is to look into happiness through another man's eyes!\",\n        \"Blow, blow, thou winter wind! Thou art not so unkind as man's ingratitude.\",\n        \"True is it that we have seen better days.\",\n        \"For ever and a day.\",\n        \"The fool doth think he is wise, but the wise man knows himself to be a fool.\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "asYouLikeItQuotes = {\n        \"All the world 's a stage, and all the men and women merely players. They have their exits and their entrances; And one man in his time plays many parts.\",\n        \"Can one desire too much of a good thing?.\",\n        \"I like this place and willingly could waste my time in it.\",\n        \"How bitter a thing it is to look into happiness through another man's eyes!\",\n        \"Blow, blow, thou winter wind! Thou art not so unkind as man's ingratitude.\",\n        \"True is it that we have seen better days.\",\n        \"For ever and a day.\",\n        \"The fool doth think he is wise, but the wise man knows himself to be a fool.\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] kingRichardIIIQuotes = {\n        \"Now is the winter of our discontent.\",\n        \"A horse! a horse! my kingdom for a horse!.\",\n        \"Conscience is but a word that cowards use, devised at first to keep the strong in awe.\",\n        \"So wise so young, they say, do never live long.\",\n        \"Off with his head!\",\n        \"An honest tale speeds best, being plainly told.\",\n        \"The king's name is a tower of strength.\",\n        \"The world is grown so bad, that wrens make prey where eagles dare not perch.\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "kingRichardIIIQuotes = {\n        \"Now is the winter of our discontent.\",\n        \"A horse! a horse! my kingdom for a horse!.\",\n        \"Conscience is but a word that cowards use, devised at first to keep the strong in awe.\",\n        \"So wise so young, they say, do never live long.\",\n        \"Off with his head!\",\n        \"An honest tale speeds best, being plainly told.\",\n        \"The king's name is a tower of strength.\",\n        \"The world is grown so bad, that wrens make prey where eagles dare not perch.\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] romeoAndJulietQuotes = {\n        \"O Romeo, Romeo! wherefore art thou Romeo?.\",\n        \"It is the east, and Juliet is the sun.\",\n        \"Good Night, Good night! Parting is such sweet sorrow, that I shall say good night till it be morrow.\",\n        \"What's in a name? That which we call a rose by any other name would smell as sweet.\",\n        \"Wisely and slow; they stumble that run fast.\",\n        \"Tempt not a desperate man.\",\n        \"For you and I are past our dancing days.\",\n        \"O! she doth teach the torches to burn bright.\",\n        \"It seems she hangs upon the cheek of night like a rich jewel in an Ethiope's ear.\",\n        \"See, how she leans her cheek upon her hand! O that I were a glove upon that hand, that I might touch that cheek!.\",\n        \"Not stepping o'er the bounds of modesty.\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "romeoAndJulietQuotes = {\n        \"O Romeo, Romeo! wherefore art thou Romeo?.\",\n        \"It is the east, and Juliet is the sun.\",\n        \"Good Night, Good night! Parting is such sweet sorrow, that I shall say good night till it be morrow.\",\n        \"What's in a name? That which we call a rose by any other name would smell as sweet.\",\n        \"Wisely and slow; they stumble that run fast.\",\n        \"Tempt not a desperate man.\",\n        \"For you and I are past our dancing days.\",\n        \"O! she doth teach the torches to burn bright.\",\n        \"It seems she hangs upon the cheek of night like a rich jewel in an Ethiope's ear.\",\n        \"See, how she leans her cheek upon her hand! O that I were a glove upon that hand, that I might touch that cheek!.\",\n        \"Not stepping o'er the bounds of modesty.\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "name": "CultureSeries", "file_path": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "superclasses": "", "methods": ["[]CultureSeries(BaseProviders)", "[String]books()", "[String]cultureShips()", "[String]cultureShipClasses()", "[String]cultureShipClassAbvs()", "[String]civs()", "[String]planets()"], "method_uris": ["src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[]CultureSeries(BaseProviders)", "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]books()", "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]cultureShips()", "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]cultureShipClasses()", "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]cultureShipClassAbvs()", "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]civs()", "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]planets()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Culture series is a science fiction series written by Scottish author Iain M. Banks and released from 1987 through to 2012.\n\n@since 1.7.0\n", "original_string": "public class CultureSeries extends AbstractProvider<BaseProviders> {\n\n    protected CultureSeries(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String books() {\n        return resolve(\"culture_series.books\");\n    }\n\n    public String cultureShips() {\n        return resolve(\"culture_series.culture_ships\");\n    }\n\n    public String cultureShipClasses() {\n        return resolve(\"culture_series.culture_ship_classes\");\n    }\n\n    public String cultureShipClassAbvs() {\n        return resolve(\"culture_series.culture_ship_class_abvs\");\n    }\n\n    public String civs() {\n        return resolve(\"culture_series.civs\");\n    }\n\n    public String planets() {\n        return resolve(\"culture_series.planets\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "name": "SportFaker", "file_path": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "superclasses": "BaseFaker", "methods": ["[]SportFaker()", "[]SportFaker(Locale)", "[]SportFaker(Random)", "[]SportFaker(Locale,Random)", "[]SportFaker(Locale,RandomService)", "[]SportFaker(FakeValuesService,FakerContext)"], "method_uris": ["src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker()", "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Locale)", "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Random)", "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Locale,Random)", "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Locale,RandomService)", "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(FakeValuesService,FakerContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SportFaker extends BaseFaker implements SportProviders {\n    public SportFaker() {\n        super();\n    }\n\n    public SportFaker(Locale locale) {\n        super(locale);\n    }\n\n    public SportFaker(Random random) {\n        super(random);\n    }\n\n    public SportFaker(Locale locale, Random random) {\n        super(locale, random);\n    }\n\n    public SportFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }\n\n    public SportFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }\n}", "super_interfaces": ["SportProviders"], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "name": "Football", "file_path": "src/main/java/net/datafaker/providers/sport/Football.java", "superclasses": "", "methods": ["[]Football(SportProviders)", "[String]teams()", "[String]players()", "[String]coaches()", "[String]competitions()", "[String]positions()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Football.java.Football.[]Football(SportProviders)", "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]teams()", "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]players()", "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]coaches()", "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]competitions()", "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]positions()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Football extends AbstractProvider<SportProviders> {\n\n    protected Football(SportProviders faker) {\n        super(faker);\n    }\n\n    public String teams() {\n        return resolve(\"football.teams\");\n    }\n\n    public String players() {\n        return resolve(\"football.players\");\n    }\n\n    public String coaches() {\n        return resolve(\"football.coaches\");\n    }\n\n    public String competitions() {\n        return resolve(\"football.competitions\");\n    }\n\n    public String positions() {\n        return resolve(\"football.positions\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket", "name": "Cricket", "file_path": "src/main/java/net/datafaker/providers/sport/Cricket.java", "superclasses": "", "methods": ["[]Cricket(SportProviders)", "[String]teams()", "[String]players()", "[String]formats()", "[String]tournaments()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[]Cricket(SportProviders)", "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]teams()", "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]players()", "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]formats()", "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]tournaments()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class Cricket extends AbstractProvider<SportProviders> {\n\n    protected Cricket(SportProviders faker) {\n        super(faker);\n    }\n\n    public String teams() {\n        return resolve(\"cricket.teams\");\n    }\n\n    public String players() {\n        return resolve(\"cricket.players\");\n    }\n\n    public String formats() {\n        return resolve(\"cricket.formats\");\n    }\n\n    public String tournaments() {\n        return resolve(\"cricket.tournaments\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball", "name": "Baseball", "file_path": "src/main/java/net/datafaker/providers/sport/Baseball.java", "superclasses": "", "methods": ["[]Baseball(SportProviders)", "[String]teams()", "[String]coaches()", "[String]positions()", "[String]players()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[]Baseball(SportProviders)", "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]teams()", "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]coaches()", "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]positions()", "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]players()"], "overrides": null, "attributes": [], "class_docstring": "\n\nGenerate random components of baseball game, e.g. teams, coaches, positions and players.\n\n@since 1.7.0\n", "original_string": "public class Baseball extends AbstractProvider<SportProviders> {\n\n    /**\n     Baseball\n     * Create a constructor for Baseball.\n     *\n     * @param faker The Faker instance for generating random, different kinds of disease, e.g. the internal disease.\n     */\n    protected Baseball(SportProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generate random Baseball teams\n     *\n     * @return Baseball teams\n     */\n    public String teams() {\n        return resolve(\"baseball.teams\");\n    }\n\n    /**\n     * Generate random coaches in baseball game\n     *\n     * @return Baseball coaches\n     */\n    public String coaches() {\n        return resolve(\"baseball.coaches\");\n    }\n\n    /**\n     * Generate random positions in baseball game\n     *\n     * @return Baseball positions\n     */\n    public String positions() {\n        return resolve(\"baseball.positions\");\n    }\n\n    /**\n     * Generate random baseball players\n     *\n     * @return Baseball players\n     */\n    public String players() {\n        return resolve(\"baseball.players\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1", "name": "Formula1", "file_path": "src/main/java/net/datafaker/providers/sport/Formula1.java", "superclasses": "", "methods": ["[]Formula1(SportProviders)", "[String]driver()", "[String]team()", "[String]circuit()", "[String]grandPrix()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[]Formula1(SportProviders)", "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]driver()", "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]team()", "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]circuit()", "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]grandPrix()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.2.0\n", "original_string": "public class Formula1 extends AbstractProvider<SportProviders> {\n\n    protected Formula1(SportProviders faker) {\n        super(faker);\n    }\n\n    public String driver() {\n        return resolve(\"formula1.driver\");\n    }\n\n    public String team() {\n        return resolve(\"formula1.team\");\n    }\n\n    public String circuit() {\n        return resolve(\"formula1.circuit\");\n    }\n\n    public String grandPrix() {\n        return resolve(\"formula1.grand_prix\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall", "name": "EnglandFootBall", "file_path": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java", "superclasses": "", "methods": ["[]EnglandFootBall(SportProviders)", "[String]league()", "[String]team()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall.[]EnglandFootBall(SportProviders)", "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall.[String]league()", "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall.[String]team()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.9.0\n", "original_string": "public class EnglandFootBall extends AbstractProvider<SportProviders> {\n\n    protected EnglandFootBall(final SportProviders faker) {\n        super(faker);\n    }\n\n    public String league() {\n        return resolve(\"englandfootball.leagues\");\n    }\n\n    public String team() {\n        return resolve(\"englandfootball.teams\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess", "name": "Chess", "file_path": "src/main/java/net/datafaker/providers/sport/Chess.java", "superclasses": "", "methods": ["[]Chess(SportProviders)", "[String]player()", "[String]tournament()", "[String]opening()", "[String]title()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[]Chess(SportProviders)", "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]player()", "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]tournament()", "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]opening()", "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]title()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.8.0\n", "original_string": "public class Chess extends AbstractProvider<SportProviders> {\n\n    protected Chess(SportProviders faker) {\n        super(faker);\n    }\n\n    public String player() {\n        return resolve(\"chess.players\");\n    }\n\n    public String tournament() {\n        return resolve(\"chess.tournaments\");\n    }\n\n    public String opening() {\n        return resolve(\"chess.openings\");\n    }\n\n    public String title() {\n        return resolve(\"chess.titles\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "name": "Volleyball", "file_path": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "superclasses": "", "methods": ["[]Volleyball(SportProviders)", "[String]team()", "[String]player()", "[String]coach()", "[String]position()", "[String]formation()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[]Volleyball(SportProviders)", "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]team()", "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]player()", "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]coach()", "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]position()", "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]formation()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.3.0\n", "original_string": "public class Volleyball extends AbstractProvider<SportProviders> {\n\n    protected Volleyball(SportProviders faker) {\n        super(faker);\n    }\n\n    public String team() {\n        return resolve(\"volleyball.team\");\n    }\n\n    public String player() {\n        return resolve(\"volleyball.player\");\n    }\n\n    public String coach() {\n        return resolve(\"volleyball.coach\");\n    }\n\n    public String position() {\n        return resolve(\"volleyball.position\");\n    }\n\n    public String formation() {\n        return resolve(\"volleyball.formation\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball", "name": "Basketball", "file_path": "src/main/java/net/datafaker/providers/sport/Basketball.java", "superclasses": "", "methods": ["[]Basketball(SportProviders)", "[String]teams()", "[String]coaches()", "[String]positions()", "[String]players()"], "method_uris": ["src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[]Basketball(SportProviders)", "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]teams()", "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]coaches()", "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]positions()", "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]players()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerate random components of basketball game, e.g. teams, coaches, positions and players.\n\n@author unknown and irakatz\n@since 0.8.0\n", "original_string": "public class Basketball extends AbstractProvider<SportProviders> {\n\n    /**\n     * Create a constructor for Basketball.\n     *\n     * @param faker The Faker instance for generating random, different kinds of disease, e.g. the internal disease.\n     */\n    protected Basketball(SportProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generate random basketball teams\n     *\n     * @return Basketball teams\n     */\n    public String teams() {\n        return resolve(\"basketball.teams\");\n    }\n\n    /**\n     * Generate random coaches in basketball game\n     *\n     * @return Basketball coaches\n     */\n    public String coaches() {\n        return resolve(\"basketball.coaches\");\n    }\n\n    /**\n     * Generate random positions in basketball game\n     *\n     * @return Basketball positions\n     */\n    public String positions() {\n        return resolve(\"basketball.positions\");\n    }\n\n    /**\n     * Generate random basketball players\n     *\n     * @return Basketball players\n     */\n    public String players() {\n        return resolve(\"basketball.players\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "name": "Control", "file_path": "src/main/java/net/datafaker/providers/videogame/Control.java", "superclasses": "", "methods": ["[]Control(VideoGameProviders)", "[String]character()", "[String]location()", "[String]objectOfPower()", "[String]alteredItem()", "[String]alteredWorldEvent()", "[String]hiss()", "[String]theBoard()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Control.java.Control.[]Control(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]character()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]location()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]objectOfPower()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]alteredItem()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]alteredWorldEvent()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]hiss()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]theBoard()", "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nControl is an action-adventure game developed by Remedy Entertainment and published by 505 Games.\n\n@since 1.7.0\n", "original_string": "public class Control extends AbstractProvider<VideoGameProviders> {\n\n    protected Control(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"control.character\");\n    }\n\n    public String location() {\n        return resolve(\"control.location\");\n    }\n\n    public String objectOfPower() {\n        return resolve(\"control.object_of_power\");\n    }\n\n    public String alteredItem() {\n        return resolve(\"control.altered_item\");\n    }\n\n    public String alteredWorldEvent() {\n        return resolve(\"control.altered_world_event\");\n    }\n\n    public String hiss() {\n        return resolve(\"control.hiss\");\n    }\n\n    public String theBoard() {\n        return resolve(\"control.the_board\");\n    }\n\n    public String quote() {\n        return resolve(\"control.quote\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife", "name": "HalfLife", "file_path": "src/main/java/net/datafaker/providers/videogame/HalfLife.java", "superclasses": "", "methods": ["[]HalfLife(VideoGameProviders)", "[String]character()", "[String]enemy()", "[String]location()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[]HalfLife(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[String]character()", "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[String]enemy()", "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[String]location()"], "overrides": null, "attributes": [], "class_docstring": "\nHalf-Life is a series of first-person shooter games developed and published by Valve.\n\n@since 1.8.0\n", "original_string": "public class HalfLife extends AbstractProvider<VideoGameProviders> {\n\n    protected HalfLife(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"games.half_life.character\");\n    }\n\n    public String enemy() {\n        return resolve(\"games.half_life.enemy\");\n    }\n\n    public String location() {\n        return resolve(\"games.half_life.location\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft", "name": "StarCraft", "file_path": "src/main/java/net/datafaker/providers/videogame/StarCraft.java", "superclasses": "", "methods": ["[]StarCraft(VideoGameProviders)", "[String]unit()", "[String]building()", "[String]character()", "[String]planet()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[]StarCraft(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]unit()", "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]building()", "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]character()", "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]planet()"], "overrides": null, "attributes": [], "class_docstring": "\nStarCraft is a 1998 military science fiction real-time strategy game developed and published by Blizzard Entertainment.\n\n@since 0.8.0\n", "original_string": "public class StarCraft extends AbstractProvider<VideoGameProviders> {\n\n    protected StarCraft(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String unit() {\n        return resolve(\"starcraft.units\");\n    }\n\n    public String building() {\n        return resolve(\"starcraft.buildings\");\n    }\n\n    public String character() {\n        return resolve(\"starcraft.characters\");\n    }\n\n    public String planet() {\n        return resolve(\"starcraft.planets\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "name": "WarhammerFantasy", "file_path": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "superclasses": "", "methods": ["[]WarhammerFantasy(VideoGameProviders)", "[String]heros()", "[String]quotes()", "[String]locations()", "[String]factions()", "[String]creatures()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[]WarhammerFantasy(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]heros()", "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]quotes()", "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]locations()", "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]factions()", "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]creatures()"], "overrides": null, "attributes": [], "class_docstring": "\nWarhammer Fantasy is a tabletop miniature wargame with a medieval fantasy theme.\n\n@since 1.8.0\n", "original_string": "public class WarhammerFantasy extends AbstractProvider<VideoGameProviders> {\n\n    protected WarhammerFantasy(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String heros() {\n        return resolve(\"games.warhammer_fantasy.heros\");\n    }\n\n    public String quotes() {\n        return resolve(\"games.warhammer_fantasy.quotes\");\n    }\n\n    public String locations() {\n        return resolve(\"games.warhammer_fantasy.locations\");\n    }\n\n    public String factions() {\n        return resolve(\"games.warhammer_fantasy.factions\");\n    }\n\n    public String creatures() {\n        return resolve(\"games.warhammer_fantasy.creatures\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "name": "EldenRing", "file_path": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "superclasses": "", "methods": ["[]EldenRing(VideoGameProviders)", "[String]location()", "[String]weapon()", "[String]skill()", "[String]spell()", "[String]npc()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[]EldenRing(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]location()", "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]weapon()", "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]skill()", "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]spell()", "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]npc()"], "overrides": null, "attributes": [], "class_docstring": "\nElden Ring is a 2022 action role-playing game developed by FromSoftware and published by Bandai Namco Entertainment.\n\n@since 1.4.0\n", "original_string": "public class EldenRing extends AbstractProvider<VideoGameProviders> {\n\n    protected EldenRing(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String location() {\n        return resolve(\"elden_ring.location\");\n    }\n\n    public String weapon() {\n        return resolve(\"elden_ring.weapon\");\n    }\n\n    public String skill() {\n        return resolve(\"elden_ring.skill\");\n    }\n\n    public String spell() {\n        return resolve(\"elden_ring.spell\");\n    }\n\n    public String npc() {\n        return resolve(\"elden_ring.npc\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "name": "Hearthstone", "file_path": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "superclasses": "", "methods": ["[]Hearthstone(VideoGameProviders)", "[String]mainProfession()", "[String]mainCharacter()", "[String]mainPattern()", "[int]battlegroundsScore()", "[String]standardRank()", "[String]wildRank()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[]Hearthstone(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]mainProfession()", "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]mainCharacter()", "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]mainPattern()", "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[int]battlegroundsScore()", "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]standardRank()", "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]wildRank()"], "overrides": null, "attributes": [], "class_docstring": "\nHearthstone is a free-to-play online digital collectible card game developed and published by Blizzard Entertainment.\n\n@since 0.9.0\n", "original_string": "public class Hearthstone extends AbstractProvider<VideoGameProviders> {\n\n    protected Hearthstone(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String mainProfession() {\n        return resolve(\"games.hearthstone.professions\");\n    }\n\n    public String mainCharacter() {\n        return resolve(\"games.hearthstone.characters\");\n    }\n\n    public String mainPattern() {\n        return resolve(\"games.hearthstone.patterns\");\n    }\n\n    public int battlegroundsScore() {\n        return faker.random().nextInt(0, 16000);\n    }\n\n    public String standardRank() {\n        String rank = resolve(\"games.hearthstone.rank\");\n        if (\"Legend\".equals(rank)) {\n            rank = rank + \" \" + faker.random().nextInt(1, 65000);\n        } else {\n            rank = rank + \" \" + faker.random().nextInt(1, 10);\n        }\n        return rank;\n    }\n\n    public String wildRank() {\n        return standardRank();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "name": "LeagueOfLegends", "file_path": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "superclasses": "", "methods": ["[]LeagueOfLegends(VideoGameProviders)", "[String]champion()", "[String]location()", "[String]quote()", "[String]summonerSpell()", "[String]masteries()", "[String]rank()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[]LeagueOfLegends(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]champion()", "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]location()", "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]quote()", "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]summonerSpell()", "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]masteries()", "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]rank()"], "overrides": null, "attributes": [], "class_docstring": "\nLeague of Legends is a 2009 multiplayer online battle arena video game developed and published by Riot Games.\n\n@since 0.8.0\n", "original_string": "public class LeagueOfLegends extends AbstractProvider<VideoGameProviders> {\n\n    protected LeagueOfLegends(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String champion() {\n        return resolve(\"games.league_of_legends.champion\");\n    }\n\n    public String location() {\n        return resolve(\"games.league_of_legends.location\");\n    }\n\n    public String quote() {\n        return resolve(\"games.league_of_legends.quote\");\n    }\n\n    public String summonerSpell() {\n        return resolve(\"games.league_of_legends.summoner_spell\");\n    }\n\n    public String masteries() {\n        return resolve(\"games.league_of_legends.masteries\");\n    }\n\n    public String rank() {\n        return resolve(\"games.league_of_legends.rank\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter", "name": "StreetFighter", "file_path": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java", "superclasses": "", "methods": ["[]StreetFighter(VideoGameProviders)", "[String]characters()", "[String]stages()", "[String]quotes()", "[String]moves()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[]StreetFighter(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]characters()", "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]stages()", "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]quotes()", "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]moves()"], "overrides": null, "attributes": [], "class_docstring": "\nStreet Fighter is a Japanese media franchise centered on a series of fighting video and arcade games developed and published by Capcom.\n\n@since 1.8.0\n", "original_string": "public class StreetFighter extends AbstractProvider<VideoGameProviders> {\n\n    protected StreetFighter(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"games.street_fighter.characters\");\n    }\n\n    public String stages() {\n        return resolve(\"games.street_fighter.stages\");\n    }\n\n    public String quotes() {\n        return resolve(\"games.street_fighter.quotes\");\n    }\n\n    public String moves() {\n        return resolve(\"games.street_fighter.moves\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "name": "Dota2", "file_path": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "superclasses": "", "methods": ["[]Dota2(VideoGameProviders)", "[String]faction()", "[String]rank()", "[String]attribute()", "[String]building()", "[String]hero()", "[String]heroQuote(String)", "[String]item()", "[String]neutralItem()", "[String]team()", "[String]tier()", "[String]player()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[]Dota2(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]faction()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]rank()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]attribute()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]building()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]hero()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]heroQuote(String)", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]item()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]neutralItem()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]team()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]tier()", "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]player()"], "overrides": null, "attributes": [], "class_docstring": "\nDota 2 is a multiplayer online battle arena (MOBA) game developed and published by Valve Corporation.\n\n@author panic08\n@since 2.3.1\n", "original_string": "public class Dota2 extends AbstractProvider<VideoGameProviders> {\n\n    protected Dota2(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String faction() {\n        return resolve(\"games.dota2.faction\");\n    }\n\n    public String rank() {\n        return resolve(\"games.dota2.rank\");\n    }\n\n    public String attribute() {\n        return resolve(\"games.dota2.attribute\");\n    }\n\n    public String building() {\n        return resolve(\"games.dota2.building\");\n    }\n\n    public String hero() {\n        return resolve(\"games.dota2.hero\");\n    }\n\n    public String heroQuote(String heroName) {\n        return resolve(\"games.dota2.\" + heroName + \".quote\");\n    }\n\n    public String item() {\n        return resolve(\"games.dota2.item\");\n    }\n\n    public String neutralItem() {\n        return resolve(\"games.dota2.neutral_item\");\n    }\n\n    public String team() {\n        return resolve(\"games.dota2.team\");\n    }\n\n    public String tier() {\n        return resolve(\"games.dota2.tier\");\n    }\n\n    public String player() {\n        return resolve(\"games.dota2.player\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm", "name": "HeroesOfTheStorm", "file_path": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java", "superclasses": "", "methods": ["[]HeroesOfTheStorm(VideoGameProviders)", "[String]battleground()", "[String]heroClass()", "[String]hero()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[]HeroesOfTheStorm(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]battleground()", "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]heroClass()", "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]hero()", "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nHeroes of the Storm is a crossover multiplayer online battle arena video game developed and published by Blizzard Entertainment.\n\n@since 1.7.0\n", "original_string": "public class HeroesOfTheStorm extends AbstractProvider<VideoGameProviders> {\n\n    protected HeroesOfTheStorm(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String battleground() {\n        return resolve(\"heroes_of_the_storm.battlegrounds\");\n    }\n\n    public String heroClass() {\n        return resolve(\"heroes_of_the_storm.classes\");\n    }\n\n    public String hero() {\n        return resolve(\"heroes_of_the_storm.heroes\");\n    }\n\n    public String quote() {\n        return resolve(\"heroes_of_the_storm.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "name": "Myst", "file_path": "src/main/java/net/datafaker/providers/videogame/Myst.java", "superclasses": "", "methods": ["[]Myst(VideoGameProviders)", "[String]games()", "[String]creatures()", "[String]characters()", "[String]ages()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[]Myst(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]games()", "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]creatures()", "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]characters()", "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]ages()", "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nMyst is a graphic adventure/puzzle video game designed by the Miller brothers, Robyn and Rand.\n\n@since 1.8.0\n", "original_string": "public class Myst extends AbstractProvider<VideoGameProviders> {\n\n    protected Myst(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String games() {\n        return resolve(\"games.myst.games\");\n    }\n\n    public String creatures() {\n        return resolve(\"games.myst.creatures\");\n    }\n\n    public String characters() {\n        return resolve(\"games.myst.characters\");\n    }\n\n    public String ages() {\n        return resolve(\"games.myst.ages\");\n    }\n\n    public String quotes() {\n        return resolve(\"games.myst.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "name": "Esports", "file_path": "src/main/java/net/datafaker/providers/videogame/Esports.java", "superclasses": "", "methods": ["[]Esports(VideoGameProviders)", "[String]player()", "[String]team()", "[String]event()", "[String]league()", "[String]game()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[]Esports(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]player()", "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]team()", "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]event()", "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]league()", "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]game()"], "overrides": null, "attributes": [], "class_docstring": "\nEsports, short for electronic sports, is a form of competition using video games.\n\n@since 0.8.0\n", "original_string": "public class Esports extends AbstractProvider<VideoGameProviders> {\n\n    protected Esports(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String player() {\n        return resolve(\"esport.players\");\n    }\n\n    public String team() {\n        return resolve(\"esport.teams\");\n    }\n\n    public String event() {\n        return resolve(\"esport.events\");\n    }\n\n    public String league() {\n        return resolve(\"esport.leagues\");\n    }\n\n    public String game() {\n        return resolve(\"esport.games\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "name": "ElderScrolls", "file_path": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "superclasses": "", "methods": ["[]ElderScrolls(VideoGameProviders)", "[String]race()", "[String]creature()", "[String]region()", "[String]dragon()", "[String]city()", "[String]firstName()", "[String]lastName()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[]ElderScrolls(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]race()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]creature()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]region()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]dragon()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]city()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]firstName()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]lastName()", "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Elder Scrolls is a series of action role-playing video games primarily developed by Bethesda Game Studios and published by Bethesda Softworks.\n\n@since 0.8.0\n", "original_string": "public class ElderScrolls extends AbstractProvider<VideoGameProviders> {\n\n    protected ElderScrolls(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String race() {\n        return resolve(\"games.elder_scrolls.race\");\n    }\n\n    public String creature() {\n        return resolve(\"games.elder_scrolls.creature\");\n    }\n\n    public String region() {\n        return resolve(\"games.elder_scrolls.region\");\n    }\n\n    public String dragon() {\n        return resolve(\"games.elder_scrolls.dragon\");\n    }\n\n    public String city() {\n        return resolve(\"games.elder_scrolls.city\");\n    }\n\n    public String firstName() {\n        return resolve(\"games.elder_scrolls.first_name\");\n    }\n\n    public String lastName() {\n        return resolve(\"games.elder_scrolls.last_name\");\n    }\n\n    public String quote() {\n        return resolve(\"games.elder_scrolls.quote\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "name": "Touhou", "file_path": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "superclasses": "", "methods": ["[]Touhou(VideoGameProviders)", "[String]characterName()", "[String]characterFirstName()", "[String]characterLastName()", "[String]trackName()", "[String]gameName()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[]Touhou(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]characterName()", "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]characterFirstName()", "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]characterLastName()", "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]trackName()", "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]gameName()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Touhou Project, also known simply as Touhou, is a bullet hell shoot 'em up video game series created by one-man independent Japanese doujin soft developer Team Shanghai Alice.\n\n@since 0.9.0\n", "original_string": "public class Touhou extends AbstractProvider<VideoGameProviders> {\n\n    protected Touhou(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String characterName() {\n        return resolve(\"touhou.full_name\");\n    }\n\n    public String characterFirstName() {\n        return resolve(\"touhou.first_name\");\n    }\n\n    public String characterLastName() {\n        return resolve(\"touhou.last_name\");\n    }\n\n    public String trackName() {\n        return resolve(\"touhou.track_name\");\n    }\n\n    public String gameName() {\n        return resolve(\"touhou.game_name\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "name": "VideoGameFaker", "file_path": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "superclasses": "BaseFaker", "methods": ["[]VideoGameFaker()", "[]VideoGameFaker(Locale)", "[]VideoGameFaker(Random)", "[]VideoGameFaker(Locale,Random)", "[]VideoGameFaker(Locale,RandomService)", "[]VideoGameFaker(FakeValuesService,FakerContext)"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker()", "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Locale)", "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Random)", "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Locale,Random)", "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Locale,RandomService)", "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(FakeValuesService,FakerContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VideoGameFaker extends BaseFaker implements VideoGameProviders {\n    public VideoGameFaker() {\n        super();\n    }\n\n    public VideoGameFaker(Locale locale) {\n        super(locale);\n    }\n\n    public VideoGameFaker(Random random) {\n        super(random);\n    }\n\n    public VideoGameFaker(Locale locale, Random random) {\n        super(locale, random);\n    }\n\n    public VideoGameFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }\n\n    public VideoGameFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }\n}", "super_interfaces": ["VideoGameProviders"], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda", "name": "Zelda", "file_path": "src/main/java/net/datafaker/providers/videogame/Zelda.java", "superclasses": "", "methods": ["[]Zelda(VideoGameProviders)", "[String]game()", "[String]character()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda.[]Zelda(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda.[String]game()", "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda.[String]character()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Legend of Zelda is an action-adventure game franchise created by the Japanese game designers Shigeru Miyamoto and Takashi Tezuka.\n\n@since 0.8.0\n", "original_string": "public class Zelda extends AbstractProvider<VideoGameProviders> {\n\n    protected Zelda(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String game() {\n        return resolve(\"games.zelda.games\");\n    }\n\n    public String character() {\n        return resolve(\"games.zelda.characters\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog", "name": "SonicTheHedgehog", "file_path": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java", "superclasses": "", "methods": ["[]SonicTheHedgehog(VideoGameProviders)", "[String]zone()", "[String]character()", "[String]game()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[]SonicTheHedgehog(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[String]zone()", "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[String]character()", "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[String]game()"], "overrides": null, "attributes": [], "class_docstring": "\nSonic the Hedgehog is a Japanese video game series and media franchise created by Sega.\n\n@since 1.8.0\n", "original_string": "public class SonicTheHedgehog extends AbstractProvider<VideoGameProviders> {\n\n    protected SonicTheHedgehog(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String zone() {\n        return resolve(\"games.sonic_the_hedgehog.zone\");\n    }\n\n    public String character() {\n        return resolve(\"games.sonic_the_hedgehog.character\");\n    }\n\n    public String game() {\n        return resolve(\"games.sonic_the_hedgehog.game\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "name": "Battlefield1", "file_path": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "superclasses": "", "methods": ["[]Battlefield1(VideoGameProviders)", "[String]classes()", "[String]weapon()", "[String]vehicle()", "[String]map()", "[String]faction()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[]Battlefield1(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]classes()", "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]weapon()", "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]vehicle()", "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]map()", "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]faction()"], "overrides": null, "attributes": [], "class_docstring": "\nBattlefield 1 is a first-person shooter game developed by DICE and published by Electronic Arts.\n\n@author coolestjj\n@since 1.4.0\n", "original_string": "public class Battlefield1 extends AbstractProvider<VideoGameProviders> {\n\n    protected Battlefield1(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return a random unit class name as a string value\n     */\n    public String classes() {\n        return resolve(\"battlefield1.classes\");\n    }\n\n    /**\n     * @return a random weapon name as a string value\n     */\n    public String weapon() {\n        return resolve(\"battlefield1.weapon\");\n    }\n\n    /**\n     * @return a random vehicle name as a string value\n     */\n    public String vehicle() {\n        return resolve(\"battlefield1.vehicle\");\n    }\n\n    /**\n     * @return a random map title as a string value\n     */\n    public String map() {\n        return resolve(\"battlefield1.map\");\n    }\n\n    /**\n     * @return a random faction name as a string value\n     */\n    public String faction() {\n        return resolve(\"battlefield1.faction\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch", "name": "Overwatch", "file_path": "src/main/java/net/datafaker/providers/videogame/Overwatch.java", "superclasses": "", "methods": ["[]Overwatch(VideoGameProviders)", "[String]hero()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[]Overwatch(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[String]hero()", "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[String]location()", "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nOverwatch is a free-to-play, team-based action game set in the optimistic future.\n\n@since 0.8.0\n", "original_string": "public class Overwatch extends AbstractProvider<VideoGameProviders> {\n\n    protected Overwatch(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String hero() {\n        return resolve(\"games.overwatch.heroes\");\n    }\n\n    public String location() {\n        return resolve(\"games.overwatch.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"games.overwatch.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls", "name": "DarkSouls", "file_path": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java", "superclasses": "", "methods": ["[]DarkSouls(VideoGameProviders)", "[String]stats()", "[String]covenants()", "[String]classes()", "[String]shield()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[]DarkSouls(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]stats()", "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]covenants()", "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]classes()", "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]shield()"], "overrides": null, "attributes": [], "class_docstring": "\nDark Souls is a series of action role-playing games created by Hidetaka Miyazaki of FromSoftware and published by Bandai Namco Entertainment.\n\n@author SickDawn\n@since 1.5.0\n", "original_string": "public class DarkSouls extends AbstractProvider<VideoGameProviders> {\n\n    public DarkSouls(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String stats() {\n        return resolve(\"dark_souls.stats\");\n    }\n\n    public String covenants() {\n        return resolve(\"dark_souls.covenants\");\n    }\n\n    public String classes() {\n        return resolve(\"dark_souls.classes\");\n    }\n\n    public String shield() {\n        return resolve(\"dark_souls.shield\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap", "name": "MarvelSnap", "file_path": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java", "superclasses": "", "methods": ["[]MarvelSnap(VideoGameProviders)", "[String]character()", "[String]zone()", "[String]event()", "[String]rank()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[]MarvelSnap(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]character()", "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]zone()", "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]event()", "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]rank()"], "overrides": null, "attributes": [], "class_docstring": "\nMarvel Snap is a digital collectible card game developed by Second Dinner and published by Nuverse for Microsoft Windows, Android and iOS.\n\n@since 1.8.0\n", "original_string": "public class MarvelSnap extends AbstractProvider<VideoGameProviders> {\n\n    protected MarvelSnap(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"games.marvel_snap.characters\");\n    }\n\n    public String zone() {\n        return resolve(\"games.marvel_snap.zones\");\n    }\n\n    public String event() {\n        return resolve(\"games.marvel_snap.events\");\n    }\n\n    public String rank() {\n        return resolve(\"games.marvel_snap.rank\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros", "name": "SuperSmashBros", "file_path": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java", "superclasses": "", "methods": ["[]SuperSmashBros(VideoGameProviders)", "[String]fighter()", "[String]stage()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros.[]SuperSmashBros(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros.[String]fighter()", "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros.[String]stage()"], "overrides": null, "attributes": [], "class_docstring": "\nSuper Smash Bros. is a crossover fighting game series published by Nintendo.\n\n@since 1.8.0\n", "original_string": "public class SuperSmashBros extends AbstractProvider<VideoGameProviders> {\n\n    protected SuperSmashBros(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String fighter() {\n        return resolve(\"games.super_smash_bros.fighter\");\n    }\n\n    public String stage() {\n        return resolve(\"games.super_smash_bros.stage\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "name": "FinalFantasyXIV", "file_path": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "superclasses": "", "methods": ["[]FinalFantasyXIV(VideoGameProviders)", "[String]character()", "[String]job()", "[String]race()", "[String]dataCenter()", "[String]zone()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[]FinalFantasyXIV(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]character()", "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]job()", "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]race()", "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]dataCenter()", "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]zone()"], "overrides": null, "attributes": [], "class_docstring": "\nFinal Fantasy XIV is an MMORPG and features a persistent world in which players can interact with each other and the environment.\nPlayers create and customize their characters for use in the game, including name, race, gender, facial features, and starting class.\n\n@since 2.0.0\n", "original_string": "public class FinalFantasyXIV extends AbstractProvider<VideoGameProviders> {\n\n    protected FinalFantasyXIV(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"final_fantasy_xiv.characters\");\n    }\n\n    public String job() {\n        return resolve(\"final_fantasy_xiv.jobs\");\n    }\n\n    public String race() {\n        return resolve(\"final_fantasy_xiv.races\");\n    }\n\n    public String dataCenter() {\n        return resolve(\"final_fantasy_xiv.data_centers\");\n    }\n\n    public String zone() {\n        return resolve(\"final_fantasy_xiv.zones\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft", "name": "WorldOfWarcraft", "file_path": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java", "superclasses": "", "methods": ["[]WorldOfWarcraft(VideoGameProviders)", "[String]hero()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft.[]WorldOfWarcraft(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft.[String]hero()", "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nWorld of Warcraft is a massively multiplayer online role-playing game released in 2004 by Blizzard Entertainment.\n\n@since 1.8.0\n", "original_string": "public class WorldOfWarcraft extends AbstractProvider<VideoGameProviders> {\n\n    protected WorldOfWarcraft(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String hero() {\n        return resolve(\"games.world_of_warcraft.hero\");\n    }\n\n    public String quotes() {\n        return resolve(\"games.world_of_warcraft.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "name": "MassEffect", "file_path": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "superclasses": "", "methods": ["[]MassEffect(VideoGameProviders)", "[String]character()", "[String]specie()", "[String]cluster()", "[String]planet()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[]MassEffect(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]character()", "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]specie()", "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]cluster()", "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]planet()", "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nMass Effect is a military science fiction media franchise.\n\n@since 1.6.0\n", "original_string": "public class MassEffect extends AbstractProvider<VideoGameProviders> {\n    protected MassEffect(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"mass_effect.characters\");\n    }\n\n    public String specie() {\n        return resolve(\"mass_effect.species\");\n    }\n\n    public String cluster() {\n        return resolve(\"mass_effect.cluster\");\n    }\n\n    public String planet() {\n        return resolve(\"mass_effect.planets\");\n    }\n\n    public String quote() {\n        return resolve(\"mass_effect.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "name": "Minecraft", "file_path": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "superclasses": "", "methods": ["[]Minecraft(VideoGameProviders)", "[String]itemName()", "[String]tileName()", "[String]entityName()", "[String]monsterName()", "[String]animalName()", "[String]tileItemName()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[]Minecraft(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]itemName()", "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]tileName()", "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]entityName()", "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]monsterName()", "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]animalName()", "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]tileItemName()"], "overrides": null, "attributes": [], "class_docstring": "\nMinecraft is a sandbox game developed by Mojang Studios.\n\n@since 0.9.0\n", "original_string": "public class Minecraft extends AbstractProvider<VideoGameProviders> {\n\n    public Minecraft(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String itemName() {\n        return resolve(\"minecraft.item_name\");\n    }\n\n    public String tileName() {\n        return resolve(\"minecraft.tile_name\");\n    }\n\n    public String entityName() {\n        return resolve(\"minecraft.entity_name\");\n    }\n\n    public String monsterName() {\n        return resolve(\"minecraft.monster_name\");\n    }\n\n    public String animalName() {\n        return resolve(\"minecraft.animal_name\");\n    }\n\n    public String tileItemName() {\n        return faker.random().nextBoolean() ? itemName() : tileName();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout", "name": "Fallout", "file_path": "src/main/java/net/datafaker/providers/videogame/Fallout.java", "superclasses": "", "methods": ["[]Fallout(VideoGameProviders)", "[String]character()", "[String]faction()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[]Fallout(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]character()", "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]faction()", "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]location()", "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nFallout: A Post Nuclear Role Playing Game is a 1997 role-playing video game developed and published by Interplay Productions.\n\n@since 1.6.0\n", "original_string": "public class Fallout extends AbstractProvider<VideoGameProviders> {\n\n    protected Fallout(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"fallout.characters\");\n    }\n\n    public String faction() {\n        return resolve(\"fallout.factions\");\n    }\n\n    public String location() {\n        return resolve(\"fallout.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"fallout.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario", "name": "SuperMario", "file_path": "src/main/java/net/datafaker/providers/videogame/SuperMario.java", "superclasses": "", "methods": ["[]SuperMario(VideoGameProviders)", "[String]characters()", "[String]games()", "[String]locations()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[]SuperMario(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[String]characters()", "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[String]games()", "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[String]locations()"], "overrides": null, "attributes": [], "class_docstring": "\nSuper Mario is a platform game series created by Nintendo starring their mascot, Mario.\n\n@since 1.3.0\n", "original_string": "public class SuperMario extends AbstractProvider<VideoGameProviders> {\n\n    protected SuperMario(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"games.super_mario.characters\");\n    }\n\n    public String games() {\n        return resolve(\"games.super_mario.games\");\n    }\n\n    public String locations() {\n        return resolve(\"games.super_mario.locations\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "name": "RedDeadRedemption2", "file_path": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "superclasses": "", "methods": ["[]RedDeadRedemption2(VideoGameProviders)", "[String]protagonist()", "[String]gangMember()", "[String]majorCharacter()", "[String]animal()", "[String]state()", "[String]region()", "[String]settlement()", "[String]quote()", "[String]weapon()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[]RedDeadRedemption2(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]protagonist()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]gangMember()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]majorCharacter()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]animal()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]state()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]region()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]settlement()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]quote()", "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]weapon()"], "overrides": null, "attributes": [], "class_docstring": "\nRed Dead Redemption 2 is an action-adventure game developed and published by Rockstar Games.\n\n@since 2.0.0\n", "original_string": "public class RedDeadRedemption2 extends AbstractProvider<VideoGameProviders> {\n\n    protected RedDeadRedemption2(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String protagonist() {\n        return resolve(\"red_dead_redemption2.protagonists\");\n    }\n\n    public String gangMember() {\n        return resolve(\"red_dead_redemption2.gang_members\");\n    }\n\n    public String majorCharacter() {\n        return resolve(\"red_dead_redemption2.major_characters\");\n    }\n\n    public String animal() {\n        return resolve(\"red_dead_redemption2.animals\");\n    }\n\n    public String state() {\n        return resolve(\"red_dead_redemption2.states\");\n    }\n\n    public String region() {\n        return resolve(\"red_dead_redemption2.regions\");\n    }\n\n    public String settlement() {\n        return resolve(\"red_dead_redemption2.settlements\");\n    }\n\n    public String quote() {\n        return resolve(\"red_dead_redemption2.quotes\");\n    }\n\n    public String weapon() {\n        return resolve(\"red_dead_redemption2.weapons\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans", "name": "ClashOfClans", "file_path": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java", "superclasses": "", "methods": ["[]ClashOfClans(VideoGameProviders)", "[String]troop()", "[String]rank()", "[String]defensiveBuilding()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[]ClashOfClans(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[String]troop()", "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[String]rank()", "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[String]defensiveBuilding()"], "overrides": null, "attributes": [], "class_docstring": "\nClash of Clans is a 2012 free-to-play mobile strategy video game developed and published by Finnish game developer Supercell.\n\n@since 1.6.0\n", "original_string": "public class ClashOfClans extends AbstractProvider<VideoGameProviders> {\n\n    protected ClashOfClans(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String troop() {\n        return resolve(\"clash_of_clans.troops\");\n    }\n\n    public String rank() {\n        return resolve(\"clash_of_clans.ranks\");\n    }\n\n    public String defensiveBuilding() {\n        return resolve(\"clash_of_clans.defensive_buildings\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame", "name": "VideoGame", "file_path": "src/main/java/net/datafaker/providers/videogame/VideoGame.java", "superclasses": "", "methods": ["[]VideoGame(VideoGameProviders)", "[String]title()", "[String]genre()", "[String]platform()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[]VideoGame(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[String]title()", "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[String]genre()", "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[String]platform()"], "overrides": null, "attributes": [], "class_docstring": "\nVideo games are electronic games that involve interaction with a user interface or input device.\n\n@since 1.8.0\n", "original_string": "public class VideoGame extends AbstractProvider<VideoGameProviders> {\n\n    protected VideoGame(VideoGameProviders faker) {\n        super(faker);\n    }\n\n    public String title() {\n        return resolve(\"video_game.title\");\n    }\n\n    public String genre() {\n        return resolve(\"video_game.genre\");\n    }\n\n    public String platform() {\n        return resolve(\"video_game.platform\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "name": "SoulKnight", "file_path": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "superclasses": "", "methods": ["[]SoulKnight(VideoGameProviders)", "[String]characters()", "[String]buffs()", "[String]statues()", "[String]weapons()", "[String]bosses()", "[String]enemies()"], "method_uris": ["src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[]SoulKnight(VideoGameProviders)", "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]characters()", "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]buffs()", "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]statues()", "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]weapons()", "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]bosses()", "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]enemies()"], "overrides": null, "attributes": [], "class_docstring": "\nSoul Knight is a game made by ChillyRoom Inc.\n\n@author zhou mintao\n@since 1.4.0\n", "original_string": "public class SoulKnight extends AbstractProvider<VideoGameProviders> {\n\n    protected SoulKnight(final VideoGameProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return a random value of characters\n     */\n    public String characters() {\n        return resolve(\"soul_knight.characters\");\n    }\n\n    /**\n     * @return a random value of buffs\n     */\n    public String buffs() {\n        return resolve(\"soul_knight.buffs\");\n    }\n\n    /**\n     * @return a random value of statues\n     */\n    public String statues() {\n        return resolve(\"soul_knight.statues\");\n    }\n\n    /**\n     * @return a random value of weapons\n     */\n    public String weapons() {\n        return resolve(\"soul_knight.weapons\");\n    }\n\n    /**\n     * @return a random value of bosses\n     */\n    public String bosses() {\n        return resolve(\"soul_knight.bosses\");\n    }\n\n    /**\n     * @return a random value of enemies\n     */\n    public String enemies() {\n        return resolve(\"soul_knight.enemies\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider", "name": "CareProvider", "file_path": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java", "superclasses": "", "methods": ["[]CareProvider(HealthcareProviders)", "[String]hospitalName()", "[String]medicalProfession()"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider.[]CareProvider(HealthcareProviders)", "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider.[String]hospitalName()", "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider.[String]medicalProfession()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class CareProvider extends AbstractProvider<HealthcareProviders> {\n    protected CareProvider(HealthcareProviders faker) {\n        super(faker);\n    }\n\n    public String hospitalName() {\n        return resolve(\"healthcare.care_provider.hospital_name\");\n    }\n\n    public String medicalProfession() {\n        return resolve(\"healthcare.care_provider.medical_profession\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation", "name": "Observation", "file_path": "src/main/java/net/datafaker/providers/healthcare/Observation.java", "superclasses": "", "methods": ["[]Observation(HealthcareProviders)", "[String]symptom()"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation.[]Observation(HealthcareProviders)", "src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation.[String]symptom()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class Observation extends AbstractProvider<HealthcareProviders> {\n    protected Observation(HealthcareProviders faker) {\n        super(faker);\n    }\n\n    public String symptom() {\n        return resolve(\"healthcare.observation.symptom\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication", "name": "Medication", "file_path": "src/main/java/net/datafaker/providers/healthcare/Medication.java", "superclasses": "", "methods": ["[]Medication(HealthcareProviders)", "[String]drugName()"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication.[]Medication(HealthcareProviders)", "src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication.[String]drugName()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class Medication extends AbstractProvider<HealthcareProviders> {\n    protected Medication(HealthcareProviders faker) {\n        super(faker);\n    }\n\n    public String drugName() {\n        return resolve(\"healthcare.medication.drug_name\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "name": "Disease", "file_path": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "superclasses": "", "methods": ["[]Disease(HealthcareProviders)", "[String]icd10()", "[String]anyDisease()", "[String]internalDisease()", "[String]neurology()", "[String]surgery()", "[String]paediatrics()", "[String]gynecologyAndObstetrics()", "[String]ophthalmologyAndOtorhinolaryngology()", "[String]dermatology()", "[String]resolve(DiseaseType)"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[]Disease(HealthcareProviders)", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]icd10()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]anyDisease()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]internalDisease()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]neurology()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]surgery()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]paediatrics()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]gynecologyAndObstetrics()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]ophthalmologyAndOtorhinolaryngology()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]dermatology()", "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]resolve(DiseaseType)"], "overrides": null, "attributes": [], "class_docstring": "\nGenerate random, different kinds of disease.\n\n@since 0.8.0\n", "original_string": "public class Disease extends AbstractProvider<HealthcareProviders> {\n\n    public enum DiseaseType {\n        INTERNAL_DISEASE_KEY(\"healthcare.disease.internal_disease\"),\n        NEUROLOGICAL_DISEASE_KEY( \"healthcare.disease.neurology\"),\n        SURGICAL_DISEASE_KEY (\"healthcare.disease.surgery\"),\n        PAEDIATRIC_DISEASE_KEY(\"healthcare.disease.paediatrics\"),\n        GYNECOLOGY_AND_OBSTETRICS_DISEASE_KEY(\"healthcare.disease.gynecology_and_obstetrics\"),\n        OPHTHALMOLOGY_AND_OTORHINOLARYNGOLOGY_DISEASE_KEY(\"healthcare.disease.ophthalmology_and_otorhinolaryngology\"),\n        DERMATOLOGY_DISEASE_KEY(\"healthcare.disease.dermatology\");\n\n        final String yamlKey;\n\n        DiseaseType(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n    }\n\n    /**\n     * Create a constructor for Disease\n     *\n     * @param faker The Faker instance for generating random, different kinds of disease, e.g. the internal disease.\n     */\n    protected Disease(HealthcareProviders faker) {\n        super(faker);\n    }\n\n    public String icd10() {\n        return faker.regexify(resolve(\"healthcare.disease.icd10\"));\n    }\n\n    public String anyDisease() {\n        return resolve(faker.options().option(DiseaseType.class));\n    }\n\n    /**\n     * Generate random internal disease\n     *\n     * @return An internal disease\n     */\n    public String internalDisease() {\n        return resolve(INTERNAL_DISEASE_KEY);\n    }\n\n    /**\n     * Generate random neurology disease\n     *\n     * @return A neurology disease\n     */\n    public String neurology() {\n        return resolve(NEUROLOGICAL_DISEASE_KEY);\n    }\n\n    /**\n     * Generate random surgery disease\n     *\n     * @return A surgery disease\n     */\n    public String surgery() {\n        return resolve(SURGICAL_DISEASE_KEY);\n    }\n\n    /**\n     * Generate random paediatrics disease\n     *\n     * @return A paediatrics disease\n     */\n    public String paediatrics() {\n        return resolve(PAEDIATRIC_DISEASE_KEY);\n    }\n\n    /**\n     * Generate random gynecology and obstetrics disease\n     *\n     * @return A gynecology and obstetrics disease\n     */\n    public String gynecologyAndObstetrics() {\n        return resolve(GYNECOLOGY_AND_OBSTETRICS_DISEASE_KEY);\n    }\n\n    /**\n     * Generate random ophthalmology and otorhinolaryngology disease\n     *\n     * @return A ophthalmology and otorhinolaryngology disease\n     */\n    public String ophthalmologyAndOtorhinolaryngology() {\n        return resolve(OPHTHALMOLOGY_AND_OTORHINOLARYNGOLOGY_DISEASE_KEY);\n    }\n\n    /**\n     * Generate random dermatology disease\n     *\n     * @return A dermatology disease\n     * @since 1.8.0\n     */\n    public String dermatology() {\n        return resolve(DERMATOLOGY_DISEASE_KEY);\n    }\n\n    private String resolve(DiseaseType diseaseType) {\n        return resolve(diseaseType.yamlKey);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure", "name": "MedicalProcedure", "file_path": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java", "superclasses": "", "methods": ["[]MedicalProcedure(HealthcareProviders)", "[String]icd10()"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure.[]MedicalProcedure(HealthcareProviders)", "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure.[String]icd10()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class MedicalProcedure extends AbstractProvider<HealthcareProviders> {\n    protected MedicalProcedure(HealthcareProviders faker) {\n        super(faker);\n    }\n\n    public String icd10() {\n        String regex = resolve(\"healthcare.medical_procedure.icd10\");\n        return faker.regexify(regex);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker", "name": "HealthcareFaker", "file_path": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java", "superclasses": "BaseFaker", "methods": ["[]HealthcareFaker()", "[]HealthcareFaker(Locale)", "[]HealthcareFaker(Random)", "[]HealthcareFaker(Locale,RandomService)", "[]HealthcareFaker(FakeValuesService,FakerContext)"], "method_uris": ["src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker()", "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(Locale)", "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(Random)", "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(Locale,RandomService)", "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(FakeValuesService,FakerContext)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class HealthcareFaker extends BaseFaker implements HealthcareProviders {\n    public HealthcareFaker() {\n        super();\n    }\n\n    public HealthcareFaker(Locale locale) {\n        super(locale);\n    }\n\n    public HealthcareFaker(Random random) {\n        super(random);\n    }\n\n    public HealthcareFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }\n\n    public HealthcareFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }\n}", "super_interfaces": ["HealthcareProviders"], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters", "name": "Ghostbusters", "file_path": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java", "superclasses": "", "methods": ["[]Ghostbusters(EntertainmentProviders)", "[String]actor()", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[]Ghostbusters(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[String]actor()", "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Ghostbusters extends AbstractProvider<EntertainmentProviders> {\n\n    protected Ghostbusters(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String actor() {\n        return resolve(\"ghostbusters.actors\");\n    }\n\n    public String character() {\n        return resolve(\"ghostbusters.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"ghostbusters.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "name": "StarTrek", "file_path": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "superclasses": "", "methods": ["[]StarTrek(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]species()", "[String]villain()", "[String]klingon()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[]StarTrek(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]character()", "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]location()", "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]species()", "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]villain()", "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]klingon()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class StarTrek extends AbstractProvider<EntertainmentProviders> {\n\n    protected StarTrek(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"star_trek.character\");\n    }\n\n    public String location() {\n        return resolve(\"star_trek.location\");\n    }\n\n    public String species() {\n        return resolve(\"star_trek.species\");\n    }\n\n    public String villain() {\n        return resolve(\"star_trek.villain\");\n    }\n\n    public String klingon() {\n        return resolve(\"star_trek.klingon\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli", "name": "StudioGhibli", "file_path": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java", "superclasses": "", "methods": ["[]StudioGhibli(EntertainmentProviders)", "[String]character()", "[String]quote()", "[String]movie()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[]StudioGhibli(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[String]character()", "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[String]movie()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class StudioGhibli extends AbstractProvider<EntertainmentProviders> {\n\n    protected StudioGhibli(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"studio_ghibli.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"studio_ghibli.quotes\");\n    }\n\n    public String movie() {\n        return resolve(\"studio_ghibli.movies\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob", "name": "Spongebob", "file_path": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java", "superclasses": "", "methods": ["[]Spongebob(EntertainmentProviders)", "[String]characters()", "[String]quotes()", "[String]episodes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[]Spongebob(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[String]quotes()", "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[String]episodes()"], "overrides": null, "attributes": [], "class_docstring": "\nSpongeBob SquarePants (or simply SpongeBob) is an American animated comedy television series created by marine science educator and animator Stephen Hillenburg for Nickelodeon.\n\n@since 1.8.0\n", "original_string": "public class Spongebob extends AbstractProvider<EntertainmentProviders> {\n\n    protected Spongebob(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"spongebob.characters\");\n    }\n\n    public String quotes() {\n        return resolve(\"spongebob.quotes\");\n    }\n\n    public String episodes() {\n        return resolve(\"spongebob.episodes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop", "name": "CowboyBebop", "file_path": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java", "superclasses": "", "methods": ["[]CowboyBebop(EntertainmentProviders)", "[String]character()", "[String]episode()", "[String]song()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[]CowboyBebop(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]character()", "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]episode()", "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]song()", "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nCowboy Bebop is a Japanese neo-noir science fiction anime television series, which originally ran from 1998 to 1999.\n@since 1.8.0\n", "original_string": "public class CowboyBebop extends AbstractProvider<EntertainmentProviders> {\n\n    protected CowboyBebop(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"cowboy_bebop.character\");\n    }\n\n    public String episode() {\n        return resolve(\"cowboy_bebop.episode\");\n    }\n\n    public String song() {\n        return resolve(\"cowboy_bebop.song\");\n    }\n\n    public String quote() {\n        return resolve(\"cowboy_bebop.quote\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "name": "HitchhikersGuideToTheGalaxy", "file_path": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "superclasses": "", "methods": ["[]HitchhikersGuideToTheGalaxy(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]marvinQuote()", "[String]planet()", "[String]quote()", "[String]species()", "[String]starship()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[]HitchhikersGuideToTheGalaxy(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]character()", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]location()", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]marvinQuote()", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]planet()", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]species()", "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]starship()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class HitchhikersGuideToTheGalaxy extends AbstractProvider<EntertainmentProviders> {\n\n    protected HitchhikersGuideToTheGalaxy(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.characters\");\n    }\n\n    public String location() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.locations\");\n    }\n\n    public String marvinQuote() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.marvin_quote\");\n    }\n\n    public String planet() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.planets\");\n    }\n\n    public String quote() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.quotes\");\n    }\n\n    public String species() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.species\");\n    }\n\n    public String starship() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.starships\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "name": "OnePiece", "file_path": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "superclasses": "", "methods": ["[]OnePiece(EntertainmentProviders)", "[String]character()", "[String]sea()", "[String]island()", "[String]location()", "[String]quote()", "[String]akumasNoMi()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[]OnePiece(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]character()", "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]sea()", "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]island()", "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]location()", "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]akumasNoMi()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class OnePiece extends AbstractProvider<EntertainmentProviders> {\n\n    protected OnePiece(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"one_piece.characters\");\n    }\n\n    public String sea() {\n        return resolve(\"one_piece.seas\");\n    }\n\n    public String island() {\n        return resolve(\"one_piece.islands\");\n    }\n\n    public String location() {\n        return resolve(\"one_piece.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"one_piece.quotes\");\n    }\n\n    public String akumasNoMi() {\n        return resolve(\"one_piece.akumas_no_mi\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "name": "Witcher", "file_path": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "superclasses": "", "methods": ["[]Witcher(EntertainmentProviders)", "[String]character()", "[String]witcher()", "[String]school()", "[String]location()", "[String]quote()", "[String]monster()", "[String]sign()", "[String]potion()", "[String]book()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[]Witcher(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]witcher()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]school()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]location()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]monster()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]sign()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]potion()", "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]book()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Witcher extends AbstractProvider<EntertainmentProviders> {\n\n    protected Witcher(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"games.witcher.characters\");\n    }\n\n    public String witcher() {\n        return resolve(\"games.witcher.witchers\");\n    }\n\n    public String school() {\n        return resolve(\"games.witcher.schools\");\n    }\n\n    public String location() {\n        return resolve(\"games.witcher.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"games.witcher.quotes\");\n    }\n\n    public String monster() {\n        return resolve(\"games.witcher.monsters\");\n    }\n\n    public String sign() {\n        return resolve(\"games.witcher.signs\");\n    }\n\n    public String potion() {\n        return resolve(\"games.witcher.potions\");\n    }\n\n    public String book() {\n        return resolve(\"games.witcher.books\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "name": "Tron", "file_path": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "superclasses": "", "methods": ["[]Tron(EntertainmentProviders)", "[String]character()", "[String]character(Character)", "[String]game()", "[String]location()", "[String]quote()", "[String]quote(Tron.Quote)", "[String]tagline()", "[String]vehicle()", "[String]alternateCharacterSpelling()", "[String]alternateCharacterSpelling(AlternateCharacterSpelling)"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[]Tron(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]character(Character)", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]game()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]location()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]quote(Tron.Quote)", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]tagline()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]vehicle()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]alternateCharacterSpelling()", "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]alternateCharacterSpelling(AlternateCharacterSpelling)"], "overrides": null, "attributes": [], "class_docstring": "\nTron is a 1982 American science fiction action-adventure film.\n\n@since 1.4.0\n", "original_string": "public class Tron extends AbstractProvider<EntertainmentProviders> {\n\n    protected Tron(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return character(faker.options().option(Character.class));\n    }\n\n    public String character(Character character) {\n        return resolve(\"tron.characters.\" + character.yamlKey);\n    }\n\n    public String game() {\n        return resolve(\"tron.games\");\n    }\n\n    public String location() {\n        return resolve(\"tron.locations\");\n    }\n\n    public String quote() {\n        return quote(faker.options().option(Tron.Quote.class));\n    }\n\n    public String quote(Tron.Quote quote) {\n        return resolve(\"tron.quotes.\" + quote.yamlKey);\n    }\n\n    public String tagline() {\n        return resolve(\"tron.taglines\");\n    }\n\n    public String vehicle() {\n        return resolve(\"tron.vehicles\");\n    }\n\n    public String alternateCharacterSpelling() {\n        return alternateCharacterSpelling(faker.options().option(Tron.AlternateCharacterSpelling.class));\n    }\n\n    public String alternateCharacterSpelling(AlternateCharacterSpelling alternateCharacterSpelling) {\n        return resolve(\"tron.alternate_character_spellings.\" + alternateCharacterSpelling.yamlKey);\n    }\n\n    public enum AlternateCharacterSpelling {\n        ALAN_BRADLEY(\"alan_bradley\"),\n        CLU(\"clu\"),\n        DR_LORA_BAINES(\"dr_lora_baines\"),\n        DR_WALTER_GIBBS(\"dr_walter_gibbs\"),\n        ED_DILLINGER(\"ed_dillinger\"),\n        KEVIN_FLYNN(\"kevin_flynn\"),\n        MCP(\"mcp\"),\n        ROY_KLEINBERG(\"roy_kleinberg\");\n\n        private final String yamlKey;\n\n        AlternateCharacterSpelling(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n\n    }\n\n    public enum Quote {\n        ALAN_BRADLEY(\"alan_bradley\"),\n        BIT(\"bit\"),\n        CLU(\"clu\"),\n        CROM(\"crom\"),\n        DR_LORA_BAINES(\"dr_lora_baines\"),\n        DR_WALTER_GIBBS(\"dr_walter_gibbs\"),\n        DUMONT(\"dumont\"),\n        ED_DILLINGER(\"ed_dillinger\"),\n        KEVIN_FLYNN(\"kevin_flynn\"),\n        MCP(\"mcp\"),\n        PROGRAM(\"program\"),\n        RAM(\"ram\"),\n        SARK(\"sark\"),\n        TRON(\"tron\"),\n        YORI(\"yori\");\n\n        private final String yamlKey;\n\n        Quote(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n    }\n\n    public enum Character {\n        OTHER(\"other\"),\n        PROGRAM(\"programs\"),\n        USER(\"users\");\n\n        private final String yamlKey;\n\n        Character(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings", "name": "StrangerThings", "file_path": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java", "superclasses": "", "methods": ["[]StrangerThings(EntertainmentProviders)", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings.[]StrangerThings(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings.[String]character()", "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nStranger Things is an American sci-fi television series created by the Duffer Brothers.\n\n@since 1.8.0\n", "original_string": "public class StrangerThings extends AbstractProvider<EntertainmentProviders> {\n\n    protected StrangerThings(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"stranger_things.character\");\n    }\n\n    public String quote() {\n        return resolve(\"stranger_things.quote\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "name": "Boardgame", "file_path": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "superclasses": "", "methods": ["[]Boardgame(BaseProviders)", "[String]name()", "[String]category()", "[String]mechanic()", "[String]subdomain()", "[String]designer()", "[String]artist()", "[String]publisher()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[]Boardgame(BaseProviders)", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]name()", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]category()", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]mechanic()", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]subdomain()", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]designer()", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]artist()", "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]publisher()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 2.3.0\n", "original_string": "public class Boardgame extends AbstractProvider<BaseProviders> {\n\n    protected Boardgame(BaseProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"boardgame.name\");\n    }\n\n    public String category() {\n        return resolve(\"boardgame.category\");\n    }\n\n    public String mechanic() {\n        return resolve(\"boardgame.mechanic\");\n    }\n\n    public String subdomain() {\n        return resolve(\"boardgame.subdomain\");\n    }\n\n    public String designer() {\n        return resolve(\"boardgame.designer\");\n    }\n\n    public String artist() {\n        return resolve(\"boardgame.artist\");\n    }\n\n    public String publisher() {\n        return resolve(\"boardgame.publisher\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy", "name": "FamilyGuy", "file_path": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java", "superclasses": "", "methods": ["[]FamilyGuy(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[]FamilyGuy(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[String]character()", "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[String]location()", "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class FamilyGuy extends AbstractProvider<EntertainmentProviders> {\n\n    protected FamilyGuy(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"family_guy.character\");\n    }\n\n    public String location() {\n        return resolve(\"family_guy.location\");\n    }\n\n    public String quote() {\n        return resolve(\"family_guy.quote\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "name": "ResidentEvil", "file_path": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "superclasses": "", "methods": ["[]ResidentEvil(EntertainmentProviders)", "[String]character()", "[String]biologicalAgent()", "[String]equipment()", "[String]location()", "[String]creature()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[]ResidentEvil(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]character()", "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]biologicalAgent()", "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]equipment()", "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]location()", "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]creature()"], "overrides": null, "attributes": [], "class_docstring": "\nA class for generating random value of ResidentEvil series.\n\n@since 0.9.0\n", "original_string": "public class ResidentEvil extends AbstractProvider<EntertainmentProviders> {\n\n    protected ResidentEvil(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return A random character string (like leon kennedy) of ResidentEvil series.\n     */\n    public String character() {\n        return resolve(\"games.resident_evil.characters\");\n    }\n\n    /**\n     * @return A random biologicalAgent string of ResidentEvil series. This string may contains special characters.\n     */\n    public String biologicalAgent() {\n        return resolve(\"games.resident_evil.biological-agents\");\n    }\n\n    /**\n     * @return A random equipment string of ResidentEvil series, which includes weapons and other items.\n     */\n    public String equipment() {\n        return resolve(\"games.resident_evil.equipments\");\n    }\n\n    /**\n     * @return A random location string of ResidentEvil series.\n     */\n    public String location() {\n        return resolve(\"games.resident_evil.locations\");\n    }\n\n    /**\n     * @return A random creature string of ResidentEvil series.\n     */\n    public String creature() {\n        return resolve(\"games.resident_evil.creatures\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke", "name": "Joke", "file_path": "src/main/java/net/datafaker/providers/entertainment/Joke.java", "superclasses": "", "methods": ["[]Joke(EntertainmentProviders)", "[String]pun()", "[String]knockKnock()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke.[]Joke(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke.[String]pun()", "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke.[String]knockKnock()"], "overrides": null, "attributes": [], "class_docstring": "\n\n@since 2.1.0\n", "original_string": "public class Joke extends AbstractProvider<EntertainmentProviders> {\n\n    protected Joke(final EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String pun() {\n        return resolve(\"joke.puns\");\n    }\n\n    public String knockKnock() {\n        return resolve(\"joke.knock_knocks\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "name": "GameOfThrones", "file_path": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "superclasses": "", "methods": ["[]GameOfThrones(EntertainmentProviders)", "[String]character()", "[String]house()", "[String]city()", "[String]dragon()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[]GameOfThrones(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]character()", "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]house()", "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]city()", "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]dragon()", "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class GameOfThrones extends AbstractProvider<EntertainmentProviders> {\n\n    protected GameOfThrones(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"game_of_thrones.characters\");\n    }\n\n    public String house() {\n        return resolve(\"game_of_thrones.houses\");\n    }\n\n    public String city() {\n        return resolve(\"game_of_thrones.cities\");\n    }\n\n    public String dragon() {\n        return resolve(\"game_of_thrones.dragons\");\n    }\n\n    public String quote() {\n        return resolve(\"game_of_thrones.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie", "name": "Movie", "file_path": "src/main/java/net/datafaker/providers/entertainment/Movie.java", "superclasses": "", "methods": ["[]Movie(EntertainmentProviders)", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie.[]Movie(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Movie extends AbstractProvider<EntertainmentProviders> {\n\n    protected Movie(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random quote from a movie.\n     *\n     * @return a string of quote from a movie.\n     */\n    public String quote() {\n        return resolve(\"movie.quote\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline", "name": "SwordArtOnline", "file_path": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java", "superclasses": "", "methods": ["[]SwordArtOnline(EntertainmentProviders)", "[String]realName()", "[String]gameName()", "[String]location()", "[String]item()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[]SwordArtOnline(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]realName()", "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]gameName()", "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]location()", "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]item()"], "overrides": null, "attributes": [], "class_docstring": "\nSword Art Online is a Japanese light novel series written by Reki Kawahara and illustrated by abec.\n\n@since 1.8.0\n", "original_string": "public class SwordArtOnline extends AbstractProvider<EntertainmentProviders> {\n\n    protected SwordArtOnline(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String realName() {\n        return resolve(\"sword_art_online.real_name\");\n    }\n\n    public String gameName() {\n        return resolve(\"sword_art_online.game_name\");\n    }\n\n    public String location() {\n        return resolve(\"sword_art_online.location\");\n    }\n\n    public String item() {\n        return resolve(\"sword_art_online.item\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall", "name": "DragonBall", "file_path": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java", "superclasses": "", "methods": ["[]DragonBall(EntertainmentProviders)", "[String]character()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall.[]DragonBall(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall.[String]character()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class DragonBall extends AbstractProvider<EntertainmentProviders> {\n\n    protected DragonBall(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"dragon_ball.characters\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova", "name": "BossaNova", "file_path": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java", "superclasses": "", "methods": ["[]BossaNova(EntertainmentProviders)", "[String]artist()", "[String]song()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova.[]BossaNova(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova.[String]artist()", "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova.[String]song()"], "overrides": null, "attributes": [], "class_docstring": "\nBossa nova is a style of samba developed in the late 1950s and early 1960s in Rio de Janeiro, Brazil.\nIt is mainly characterized by a \"different beat\" that altered the harmonies with the introduction of\nunconventional chords and an innovative syncopation of traditional samba from a single rhythmic division.\n\n@since 1.0.0\n", "original_string": "public class BossaNova extends AbstractProvider<EntertainmentProviders> {\n\n    protected BossaNova(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String artist() {\n        return resolve(\"bossa_nova.artists\");\n    }\n\n    public String song() {\n        return resolve(\"bossa_nova.songs\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark", "name": "SouthPark", "file_path": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java", "superclasses": "", "methods": ["[]SouthPark(EntertainmentProviders)", "[String]characters()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark.[]SouthPark(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nSouth Park is an American animated television series created by Trey Parker and Matt Stone.\n\n@since 1.8.0\n", "original_string": "public class SouthPark extends AbstractProvider<EntertainmentProviders> {\n\n    protected SouthPark(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"south_park.characters\");\n    }\n\n    public String quotes() {\n        return resolve(\"south_park.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott", "name": "Kaamelott", "file_path": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java", "superclasses": "", "methods": ["[]Kaamelott(EntertainmentProviders)", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott.[]Kaamelott(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Kaamelott extends AbstractProvider<EntertainmentProviders> {\n\n    protected Kaamelott(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"kaamelott.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"kaamelott.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama", "name": "Futurama", "file_path": "src/main/java/net/datafaker/providers/entertainment/Futurama.java", "superclasses": "", "methods": ["[]Futurama(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()", "[String]hermesCatchPhrase()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[]Futurama(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]location()", "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]hermesCatchPhrase()"], "overrides": null, "attributes": [], "class_docstring": "\nFuturama is an American animated science fiction sitcom created by Matt Groening for the Fox Broadcasting Company.\n\n@since 1.8.0\n", "original_string": "public class Futurama extends AbstractProvider<EntertainmentProviders> {\n\n    protected Futurama(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"futurama.characters\");\n    }\n\n    public String location() {\n        return resolve(\"futurama.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"futurama.quotes\");\n    }\n\n    public String hermesCatchPhrase() {\n        return resolve(\"futurama.hermes_catchphrases\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce", "name": "AquaTeenHungerForce", "file_path": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java", "superclasses": "", "methods": ["[]AquaTeenHungerForce(EntertainmentProviders)", "[String]character()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce.[]AquaTeenHungerForce(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce.[String]character()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class AquaTeenHungerForce extends AbstractProvider<EntertainmentProviders> {\n\n    protected AquaTeenHungerForce(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"aqua_teen_hunger_force.character\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman", "name": "BojackHorseman", "file_path": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java", "superclasses": "", "methods": ["[]BojackHorseman(EntertainmentProviders)", "[String]characters()", "[String]quotes()", "[String]tongueTwisters()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[]BojackHorseman(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[String]quotes()", "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[String]tongueTwisters()"], "overrides": null, "attributes": [], "class_docstring": "\nGenerate random parts in BojackHorseman.\n\n@author unknown and irakatz\n@since 0.8.0\n", "original_string": "public class BojackHorseman extends AbstractProvider<EntertainmentProviders> {\n\n    /**\n     * Create a constructor for BojackHorseman.\n     *\n     * @param faker The Faker instance for generating random parts in BojackHorseman.\n     */\n    protected BojackHorseman(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * Generate random character's name in BojackHorseman.\n     *\n     * @return Characters in BojackHorseman\n     */\n    public String characters() {\n        return resolve(\"bojack_horseman.characters\");\n    }\n\n    /**\n     * Generate random quotes in BojackHorseman.\n     *\n     * @return Quotes in BojackHorseman\n     */\n    public String quotes() {\n        return resolve(\"bojack_horseman.quotes\");\n    }\n\n    /**\n     * Generate random tongue twisters in BojackHorseman.\n     *\n     * @return Tongue twisters in BojackHorseman\n     */\n    public String tongueTwisters() {\n        return resolve(\"bojack_horseman.tongue_twisters\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan", "name": "DetectiveConan", "file_path": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java", "superclasses": "", "methods": ["[]DetectiveConan(EntertainmentProviders)", "[String]characters()", "[String]gadgets()", "[String]vehicles()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[]DetectiveConan(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[String]gadgets()", "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[String]vehicles()"], "overrides": null, "attributes": [], "class_docstring": "\nCase Closed, also known as Detective Conan, is a Japanese detective manga series written and illustrated by Gosho Aoyama.\n\n@since 1.7.0\n", "original_string": "public class DetectiveConan extends AbstractProvider<EntertainmentProviders> {\n\n    protected DetectiveConan(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"detective_conan.characters\");\n    }\n\n    public String gadgets() {\n        return resolve(\"detective_conan.gadgets\");\n    }\n\n    public String vehicles() {\n        return resolve(\"detective_conan.vehicles\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad", "name": "BreakingBad", "file_path": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java", "superclasses": "", "methods": ["[]BreakingBad(EntertainmentProviders)", "[String]character()", "[String]episode()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad.[]BreakingBad(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad.[String]character()", "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad.[String]episode()"], "overrides": null, "attributes": [], "class_docstring": "\nBreaking Bad is an American neo-Western crime drama television series.\n<p>\nOver the course of five seasons, Breaking Bad told a complex, character-driven story\nof a man whose cancer diagnosis leads him to start cooking and selling meth to provide for his family.\n\n@since 1.0.0\n", "original_string": "public class BreakingBad extends AbstractProvider<EntertainmentProviders> {\n\n    protected BreakingBad(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"breaking_bad.characters\");\n    }\n\n    public String episode() {\n        return resolve(\"breaking_bad.episodes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "name": "EntertainmentFaker", "file_path": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "superclasses": "BaseFaker", "methods": ["[]EntertainmentFaker()", "[]EntertainmentFaker(Locale)", "[]EntertainmentFaker(Random)", "[]EntertainmentFaker(Locale,Random)", "[]EntertainmentFaker(Locale,RandomService)", "[]EntertainmentFaker(FakeValuesService,FakerContext)"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker()", "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Locale)", "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Random)", "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Locale,Random)", "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Locale,RandomService)", "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(FakeValuesService,FakerContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class EntertainmentFaker extends BaseFaker implements EntertainmentProviders {\n    public EntertainmentFaker() {\n        super();\n    }\n\n    public EntertainmentFaker(Locale locale) {\n        super(locale);\n    }\n\n    public EntertainmentFaker(Random random) {\n        super(random);\n    }\n\n    public EntertainmentFaker(Locale locale, Random random) {\n        super(locale, random);\n    }\n\n    public EntertainmentFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }\n\n    public EntertainmentFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }\n}", "super_interfaces": ["EntertainmentProviders"], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon", "name": "HowToTrainYourDragon", "file_path": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java", "superclasses": "", "methods": ["[]HowToTrainYourDragon(EntertainmentProviders)", "[String]characters()", "[String]dragons()", "[String]locations()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[]HowToTrainYourDragon(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[String]dragons()", "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[String]locations()"], "overrides": null, "attributes": [], "class_docstring": "\nHow to Train Your Dragon is a 2010 American computer-animated action fantasy film loosely based on the 2003 book of the same name by Cressida Cowell.\n\n@since 1.8.0\n", "original_string": "public class HowToTrainYourDragon extends AbstractProvider<EntertainmentProviders> {\n\n    protected HowToTrainYourDragon(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"how_to_train_your_dragon.characters\");\n    }\n\n    public String dragons() {\n        return resolve(\"how_to_train_your_dragon.dragons\");\n    }\n\n    public String locations() {\n        return resolve(\"how_to_train_your_dragon.locations\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto", "name": "Naruto", "file_path": "src/main/java/net/datafaker/providers/entertainment/Naruto.java", "superclasses": "", "methods": ["[]Naruto(EntertainmentProviders)", "[String]character()", "[String]village()", "[String]eye()", "[String]demon()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[]Naruto(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]village()", "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]eye()", "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]demon()"], "overrides": null, "attributes": [], "class_docstring": "\nNaruto is a Japanese manga series written and illustrated by Masashi Kishimoto, that tells the story of Naruto Uzumaki.\n\n@since 1.8.0\n", "original_string": "public class Naruto extends AbstractProvider<EntertainmentProviders> {\n\n    protected Naruto(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"naruto.characters\");\n    }\n\n    public String village() {\n        return resolve(\"naruto.villages\");\n    }\n\n    public String eye() {\n        return resolve(\"naruto.eyes\");\n    }\n\n    public String demon() {\n        return resolve(\"naruto.demons\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends", "name": "Friends", "file_path": "src/main/java/net/datafaker/providers/entertainment/Friends.java", "superclasses": "", "methods": ["[]Friends(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[]Friends(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[String]location()", "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Friends extends AbstractProvider<EntertainmentProviders> {\n\n    protected Friends(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"friends.characters\");\n    }\n\n    public String location() {\n        return resolve(\"friends.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"friends.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty", "name": "RickAndMorty", "file_path": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java", "superclasses": "", "methods": ["[]RickAndMorty(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[]RickAndMorty(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[String]character()", "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[String]location()", "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class RickAndMorty extends AbstractProvider<EntertainmentProviders> {\n\n    protected RickAndMorty(final EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"rick_and_morty.characters\");\n    }\n\n    public String location() {\n        return resolve(\"rick_and_morty.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"rick_and_morty.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "name": "HarryPotter", "file_path": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "superclasses": "", "methods": ["[]HarryPotter(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()", "[String]book()", "[String]house()", "[String]spell()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[]HarryPotter(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]character()", "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]location()", "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]book()", "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]house()", "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]spell()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class HarryPotter extends AbstractProvider<EntertainmentProviders> {\n\n    protected HarryPotter(final EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"harry_potter.characters\");\n    }\n\n    public String location() {\n        return resolve(\"harry_potter.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"harry_potter.quotes\");\n    }\n\n    public String book() {\n        return resolve(\"harry_potter.books\");\n    }\n\n    public String house() {\n        return resolve(\"harry_potter.houses\");\n    }\n\n    public String spell() {\n        return resolve(\"harry_potter.spells\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit", "name": "Hobbit", "file_path": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java", "superclasses": "", "methods": ["[]Hobbit(EntertainmentProviders)", "[String]character()", "[String]thorinsCompany()", "[String]quote()", "[String]location()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[]Hobbit(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]thorinsCompany()", "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]location()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Hobbit extends AbstractProvider<EntertainmentProviders> {\n\n    protected Hobbit(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"hobbit.character\");\n    }\n\n    public String thorinsCompany() {\n        return resolve(\"hobbit.thorins_company\");\n    }\n\n    public String quote() {\n        return resolve(\"hobbit.quote\");\n    }\n\n    public String location() {\n        return resolve(\"hobbit.location\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta", "name": "VForVendetta", "file_path": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java", "superclasses": "", "methods": ["[]VForVendetta(EntertainmentProviders)", "[String]characters()", "[String]speeches()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[]VForVendetta(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[String]speeches()", "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nV for Vendetta is a 2005 dystopian political action film directed by James McTeigue from a screenplay by the Wachowskis.\n\n@since 1.8.0\n", "original_string": "public class VForVendetta extends AbstractProvider<EntertainmentProviders> {\n\n    protected VForVendetta(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"v_for_vendetta.characters\");\n    }\n\n    public String speeches() {\n        return resolve(\"v_for_vendetta.speeches\");\n    }\n\n    public String quotes() {\n        return resolve(\"v_for_vendetta.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld", "name": "Seinfeld", "file_path": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java", "superclasses": "", "methods": ["[]Seinfeld(EntertainmentProviders)", "[String]character()", "[String]quote()", "[String]business()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[]Seinfeld(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[String]business()"], "overrides": null, "attributes": [], "class_docstring": "\nSeinfeld is an American sitcom television series created by Larry David and Jerry Seinfeld.\n\n@since 1.4.0\n", "original_string": "public class Seinfeld extends AbstractProvider<EntertainmentProviders> {\n\n    protected Seinfeld(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"seinfeld.character\");\n    }\n\n    public String quote() {\n        return resolve(\"seinfeld.quote\");\n    }\n\n    public String business() {\n        return resolve(\"seinfeld.business\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "name": "Buffy", "file_path": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "superclasses": "", "methods": ["[]Buffy(EntertainmentProviders)", "[String]characters()", "[String]quotes()", "[String]celebrities()", "[String]bigBads()", "[String]episodes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[]Buffy(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]quotes()", "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]celebrities()", "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]bigBads()", "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]episodes()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Buffy extends AbstractProvider<EntertainmentProviders> {\n\n    protected Buffy(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"buffy.characters\");\n    }\n\n    public String quotes() {\n        return resolve(\"buffy.quotes\");\n    }\n\n    public String celebrities() {\n        return resolve(\"buffy.celebrities\");\n    }\n\n    public String bigBads() {\n        return resolve(\"buffy.big_bads\");\n    }\n\n    public String episodes() {\n        return resolve(\"buffy.episodes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom", "name": "TheRoom", "file_path": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java", "superclasses": "", "methods": ["[]TheRoom(EntertainmentProviders)", "[String]actors()", "[String]characters()", "[String]locations()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[]TheRoom(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]actors()", "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]locations()", "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Room is a 2003 American drama film written, produced, executive produced and directed by Tommy Wiseau.\n\n@since 1.8.0\n", "original_string": "public class TheRoom extends AbstractProvider<EntertainmentProviders> {\n\n    protected TheRoom(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String actors() {\n        return resolve(\"the_room.actors\");\n    }\n\n    public String characters() {\n        return resolve(\"the_room.characters\");\n    }\n\n    public String locations() {\n        return resolve(\"the_room.locations\");\n    }\n\n    public String quotes() {\n        return resolve(\"the_room.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks", "name": "TwinPeaks", "file_path": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java", "superclasses": "", "methods": ["[]TwinPeaks(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[]TwinPeaks(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[String]character()", "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[String]location()", "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nTwin Peaks is an American mystery serial drama television series created by Mark Frost and David Lynch.\n\n@since 0.8.0\n", "original_string": "public class TwinPeaks extends AbstractProvider<EntertainmentProviders> {\n\n    protected TwinPeaks(final EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"twin_peaks.characters\");\n    }\n\n    public String location() {\n        return resolve(\"twin_peaks.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"twin_peaks.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride", "name": "PrincessBride", "file_path": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java", "superclasses": "", "methods": ["[]PrincessBride(EntertainmentProviders)", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride.[]PrincessBride(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride.[String]character()", "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class PrincessBride extends AbstractProvider<EntertainmentProviders> {\n\n    protected PrincessBride(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"princess_bride.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"princess_bride.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris", "name": "ChuckNorris", "file_path": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java", "superclasses": "", "methods": ["[]ChuckNorris(EntertainmentProviders)", "[String]fact()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris.[]ChuckNorris(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris.[String]fact()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class ChuckNorris extends AbstractProvider<EntertainmentProviders> {\n\n    protected ChuckNorris(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String fact() {\n        return resolve(\"chuck_norris.fact\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "name": "OscarMovie", "file_path": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "superclasses": "", "methods": ["[]OscarMovie(EntertainmentProviders)", "[String]getYear()", "[String]getChoice()", "[String]actor()", "[String]movieName()", "[String]quote()", "[String]character()", "[String]releaseDate()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[]OscarMovie(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]getYear()", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]getChoice()", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]actor()", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]movieName()", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]character()", "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]releaseDate()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Academy Awards, popularly known as the Oscars, are awards for artistic and technical merit in the film industry.\n\n@author ak-maker\n@since 1.4.0\n", "original_string": "public class OscarMovie extends AbstractProvider<EntertainmentProviders> {\n\n    private final Supplier<String> year;\n    private final Supplier<String> choice;\n\n    private final Supplier<String> str;\n\n    /**\n     * This is the constructor initialize faker and two other\n     * variable for random generation.\n     *\n     * @param faker faker The Faker instance for generating random names of things.\n     */\n    protected OscarMovie(final EntertainmentProviders faker) {\n        super(faker);\n        this.year = () -> this.faker.resolve(\"oscar_movie.year.years\");\n        this.choice = () -> this.faker.resolve(\"oscar_movie.year.choice\");\n        this.str = () -> \"oscar_movie.\" + year.get() + \".\" + choice.get();\n    }\n\n    /**\n     * @return year\n     */\n    public String getYear() {\n        return year.get();\n    }\n\n    /**\n     * @return choice\n     */\n    public String getChoice() {\n        return choice.get();\n    }\n\n    /**\n     * This method generates random actor\n     *\n     * @return random actor\n     */\n    public String actor() {\n        return resolve(str.get() + \".actor\");\n    }\n\n    /**\n     * This method generates a random movie name\n     *\n     * @return random movieName\n     */\n    public String movieName() {\n        return resolve(str.get() + \".movieName\");\n    }\n\n    /**\n     * This method generates a random quote\n     *\n     * @return random quote\n     */\n    public String quote() {\n        return resolve(str.get() + \".quote\");\n    }\n\n    /**\n     * This method generates a random character\n     *\n     * @return random character\n     */\n    public String character() {\n        return resolve(str.get() + \".character\");\n    }\n\n    /**\n     * This method generates a random release date\n     *\n     * @return random releaseDate\n     */\n    public String releaseDate() {\n        return resolve(str.get() + \".releaseDate\");\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Supplier<String> year;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<String>", "name": "year", "syntax_pass": true}, {"attribute_expression": "private final Supplier<String> choice;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<String>", "name": "choice", "syntax_pass": true}, {"attribute_expression": "private final Supplier<String> str;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<String>", "name": "str", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "name": "Dune", "file_path": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "superclasses": "", "methods": ["[]Dune(EntertainmentProviders)", "[String]character()", "[String]title()", "[String]planet()", "[String]quote()", "[String]quote(Quote)", "[String]saying()", "[String]saying(Saying)"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[]Dune(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]title()", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]planet()", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]quote(Quote)", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]saying()", "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]saying(Saying)"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Dune extends AbstractProvider<EntertainmentProviders> {\n\n    protected Dune(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"dune.characters\");\n    }\n\n    public String title() {\n        return resolve(\"dune.titles\");\n    }\n\n    public String planet() {\n        return resolve(\"dune.planets\");\n    }\n\n    public String quote() {\n        return quote(faker.options().option(Dune.Quote.class));\n    }\n\n    public String quote(Quote quote) {\n        return resolve(\"dune.quotes.\" + quote.yamlKey);\n    }\n\n    public String saying() {\n        return saying(faker.options().option(Dune.Saying.class));\n    }\n\n    public String saying(Saying saying) {\n        return resolve(\"dune.sayings.\" + saying.yamlKey);\n    }\n\n    public enum Quote {\n        GUILD_NAVIGATOR(\"guild_navigator\"),\n        EMPEROR(\"emperor\"),\n        PAUL(\"paul\"),\n        THUFIR(\"thufir\"),\n        JESSICA(\"jessica\"),\n        IRULAN(\"irulan\"),\n        MOHIAM(\"mohiam\"),\n        GURNEY(\"gurney\"),\n        LETO(\"leto\"),\n        STILGAR(\"stilgar\"),\n        LIET_KYNES(\"liet_kynes\"),\n        PARDOT_KYNES(\"pardot_kynes\"),\n        BARON_HARKONNEN(\"baron_harkonnen\"),\n        PITER(\"piter\"),\n        ALIA(\"alia\"),\n        MAPES(\"mapes\"),\n        DUNCAN(\"duncan\"),\n        YUEH(\"yueh\");\n\n        private final String yamlKey;\n\n        Quote(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n    }\n\n    public enum Saying {\n        BENE_GESSERIT(\"bene_gesserit\"),\n        FREMEN(\"fremen\"),\n        MENTAT(\"mentat\"),\n        MUADDIB(\"muaddib\"),\n        ORANGE_CATHOLIC_BIBLE(\"orange_catholic_bible\");\n\n        private final String yamlKey;\n\n        Saying(String yamlKey) {\n            this.yamlKey = yamlKey;\n        }\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5", "name": "Babylon5", "file_path": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java", "superclasses": "", "methods": ["[]Babylon5(EntertainmentProviders)", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5.[]Babylon5(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.9.0\n", "original_string": "public class Babylon5 extends AbstractProvider<EntertainmentProviders> {\n\n    protected Babylon5(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"babylon5.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"babylon5.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother", "name": "HowIMetYourMother", "file_path": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java", "superclasses": "", "methods": ["[]HowIMetYourMother(EntertainmentProviders)", "[String]character()", "[String]catchPhrase()", "[String]highFive()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[]HowIMetYourMother(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]character()", "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]catchPhrase()", "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]highFive()", "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class HowIMetYourMother extends AbstractProvider<EntertainmentProviders> {\n\n    protected HowIMetYourMother(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"how_i_met_your_mother.character\");\n    }\n\n    public String catchPhrase() {\n        return resolve(\"how_i_met_your_mother.catch_phrase\");\n    }\n\n    public String highFive() {\n        return resolve(\"how_i_met_your_mother.high_five\");\n    }\n\n    public String quote() {\n        return resolve(\"how_i_met_your_mother.quote\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural", "name": "Supernatural", "file_path": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java", "superclasses": "", "methods": ["[]Supernatural(EntertainmentProviders)", "[String]character()", "[String]creature()", "[String]weapon()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[]Supernatural(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[String]creature()", "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[String]weapon()"], "overrides": null, "attributes": [], "class_docstring": "\nSupernatural is an American dark fantasy drama television series created by Eric Kripke.\n\n@since 1.8.0\n", "original_string": "public class Supernatural extends AbstractProvider<EntertainmentProviders> {\n\n    protected Supernatural(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"supernatural.character\");\n    }\n\n    public String creature() {\n        return resolve(\"supernatural.creature\");\n    }\n\n    public String weapon() {\n        return resolve(\"supernatural.weapon\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "name": "StarWars", "file_path": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "superclasses": "", "methods": ["[]StarWars(EntertainmentProviders)", "[String]character()", "[String]callSign()", "[String]quotes()", "[String]vehicles()", "[String]droids()", "[String]planets()", "[String]species()", "[String]wookieWords()", "[String]alternateCharacterSpelling()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[]StarWars(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]character()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]callSign()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]quotes()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]vehicles()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]droids()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]planets()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]species()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]wookieWords()", "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]alternateCharacterSpelling()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.6.0\n", "original_string": "public class StarWars extends AbstractProvider<EntertainmentProviders> {\n\n    private static final String[] CHARACTERS = {\"admiral_ackbar\", \"ahsoka_tano\", \"anakin_skywalker\", \"asajj_ventress\",\n        \"bendu\", \"boba_fett\", \"c_3po\", \"count_dooku\", \"darth_caedus\", \"darth_vader\", \"emperor_palpatine\", \"finn\",\n        \"general_hux\", \"grand_admiral_thrawn\", \"grand_moff_tarkin\", \"greedo\", \"han_solo\", \"jabba_the_hutt\",\n        \"jar_jar_binks\", \"k_2so\", \"kylo_ren\", \"lando_calrissian\", \"leia_organa\", \"luke_skywalker\", \"mace_windu\",\n        \"maz_kanata\", \"obi_wan_kenobi\", \"padme_amidala\", \"qui_gon_jinn\", \"rey\", \"shmi_skywalker\", \"yoda\"};\n\n    protected StarWars(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"star_wars.characters\");\n    }\n\n    public String callSign() {\n        return faker.numerify(resolve(\"star_wars.call_sign\"));\n    }\n\n    public String quotes() {\n        return resolve(\"star_wars.quotes.\" + getFaker().options().option(CHARACTERS));\n    }\n\n    public String vehicles() {\n        return resolve(\"star_wars.vehicles\");\n    }\n\n    public String droids() {\n        return resolve(\"star_wars.droids\");\n    }\n\n    public String planets() {\n        return resolve(\"star_wars.planets\");\n    }\n\n    public String species() {\n        return resolve(\"star_wars.species\");\n    }\n\n    public String wookieWords() {\n        return resolve(\"star_wars.wookiee_words\");\n    }\n\n    public String alternateCharacterSpelling() {\n        return resolve(\"star_wars.alternate_character_spellings.\" + getFaker().options().option(CHARACTERS));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String[] CHARACTERS = {\"admiral_ackbar\", \"ahsoka_tano\", \"anakin_skywalker\", \"asajj_ventress\",\n        \"bendu\", \"boba_fett\", \"c_3po\", \"count_dooku\", \"darth_caedus\", \"darth_vader\", \"emperor_palpatine\", \"finn\",\n        \"general_hux\", \"grand_admiral_thrawn\", \"grand_moff_tarkin\", \"greedo\", \"han_solo\", \"jabba_the_hutt\",\n        \"jar_jar_binks\", \"k_2so\", \"kylo_ren\", \"lando_calrissian\", \"leia_organa\", \"luke_skywalker\", \"mace_windu\",\n        \"maz_kanata\", \"obi_wan_kenobi\", \"padme_amidala\", \"qui_gon_jinn\", \"rey\", \"shmi_skywalker\", \"yoda\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "CHARACTERS = {\"admiral_ackbar\", \"ahsoka_tano\", \"anakin_skywalker\", \"asajj_ventress\",\n        \"bendu\", \"boba_fett\", \"c_3po\", \"count_dooku\", \"darth_caedus\", \"darth_vader\", \"emperor_palpatine\", \"finn\",\n        \"general_hux\", \"grand_admiral_thrawn\", \"grand_moff_tarkin\", \"greedo\", \"han_solo\", \"jabba_the_hutt\",\n        \"jar_jar_binks\", \"k_2so\", \"kylo_ren\", \"lando_calrissian\", \"leia_organa\", \"luke_skywalker\", \"mace_windu\",\n        \"maz_kanata\", \"obi_wan_kenobi\", \"padme_amidala\", \"qui_gon_jinn\", \"rey\", \"shmi_skywalker\", \"yoda\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed", "name": "Departed", "file_path": "src/main/java/net/datafaker/providers/entertainment/Departed.java", "superclasses": "", "methods": ["[]Departed(EntertainmentProviders)", "[String]actor()", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[]Departed(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[String]actor()", "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Departed extends AbstractProvider<EntertainmentProviders> {\n\n    protected Departed(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random actor's name from The Departed.\n     *\n     * @return a string of actor's name from The Departed.\n     */\n    public String actor() {\n        return resolve(\"departed.actors\");\n    }\n\n    /**\n     * This method generates a random character's name from The Departed.\n     *\n     * @return a string of character's name from The Departed.\n     */\n    public String character() {\n        return resolve(\"departed.characters\");\n    }\n\n    /**\n     * This method generates a random quote from The Departed.\n     *\n     * @return a string of quote from The Departed.\n     */\n    public String quote() {\n        return resolve(\"departed.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon", "name": "Doraemon", "file_path": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java", "superclasses": "", "methods": ["[]Doraemon(EntertainmentProviders)", "[String]character()", "[String]gadget()", "[String]location()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[]Doraemon(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[String]gadget()", "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[String]location()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class Doraemon extends AbstractProvider<EntertainmentProviders> {\n\n    protected Doraemon(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"doraemon.characters\");\n    }\n\n    public String gadget() {\n        return resolve(\"doraemon.gadgets\");\n    }\n\n    public String location() {\n        return resolve(\"doraemon.locations\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon", "name": "Pokemon", "file_path": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java", "superclasses": "", "methods": ["[]Pokemon(EntertainmentProviders)", "[String]name()", "[String]location()", "[String]move()", "[String]type()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[]Pokemon(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]name()", "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]location()", "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]move()", "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]type()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Pokemon extends AbstractProvider<EntertainmentProviders> {\n\n    protected Pokemon(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String name() {\n        return resolve(\"games.pokemon.names\");\n    }\n\n    public String location() {\n        return resolve(\"games.pokemon.locations\");\n    }\n\n    public String move() {\n        return resolve(\"games.pokemon.moves\");\n    }\n\n    public String type() {\n        return resolve(\"games.pokemon.types\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "name": "SiliconValley", "file_path": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "superclasses": "", "methods": ["[]SiliconValley(EntertainmentProviders)", "[String]character()", "[String]company()", "[String]quote()", "[String]app()", "[String]invention()", "[String]motto()", "[String]url()", "[String]email()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[]SiliconValley(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]character()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]company()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]app()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]invention()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]motto()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]url()", "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]email()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.8.0\n", "original_string": "public class SiliconValley extends AbstractProvider<EntertainmentProviders> {\n\n    protected SiliconValley(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return faker.resolve(\"silicon_valley.characters\");\n    }\n\n    public String company() {\n        return faker.resolve(\"silicon_valley.companies\");\n    }\n\n    public String quote() {\n        return faker.resolve(\"silicon_valley.quotes\");\n    }\n\n    public String app() {\n        return faker.resolve(\"silicon_valley.apps\");\n    }\n\n    public String invention() {\n        return faker.resolve(\"silicon_valley.inventions\");\n    }\n\n    public String motto() {\n        return faker.resolve(\"silicon_valley.mottos\");\n    }\n\n    public String url() {\n        return faker.resolve(\"silicon_valley.urls\");\n    }\n\n    public String email() {\n        return faker.resolve(\"silicon_valley.email\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros", "name": "TheVentureBros", "file_path": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java", "superclasses": "", "methods": ["[]TheVentureBros(EntertainmentProviders)", "[String]character()", "[String]organization()", "[String]vehicle()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[]TheVentureBros(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]character()", "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]organization()", "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]vehicle()", "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Venture Bros. is an American adult animated action comedy TV series.\n\n@since 1.8.0\n", "original_string": "public class TheVentureBros extends AbstractProvider<EntertainmentProviders> {\n\n    protected TheVentureBros(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"the_venture_bros.character\");\n    }\n\n    public String organization() {\n        return resolve(\"the_venture_bros.organization\");\n    }\n\n    public String vehicle() {\n        return resolve(\"the_venture_bros.vehicle\");\n    }\n\n    public String quote() {\n        return resolve(\"the_venture_bros.quote\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings", "name": "LordOfTheRings", "file_path": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java", "superclasses": "", "methods": ["[]LordOfTheRings(EntertainmentProviders)", "[String]character()", "[String]location()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings.[]LordOfTheRings(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings.[String]character()", "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings.[String]location()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class LordOfTheRings extends AbstractProvider<EntertainmentProviders> {\n\n    protected LordOfTheRings(final EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"lord_of_the_rings.characters\");\n    }\n\n    public String location() {\n        return resolve(\"lord_of_the_rings.locations\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture", "name": "BackToTheFuture", "file_path": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java", "superclasses": "", "methods": ["[]BackToTheFuture(EntertainmentProviders)", "[String]character()", "[String]date()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[]BackToTheFuture(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[String]character()", "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[String]date()", "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class BackToTheFuture extends AbstractProvider<EntertainmentProviders> {\n\n    protected BackToTheFuture(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"back_to_the_future.characters\");\n    }\n\n    public String date() {\n        return resolve(\"back_to_the_future.dates\");\n    }\n\n    public String quote() {\n        return resolve(\"back_to_the_future.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory", "name": "BigBangTheory", "file_path": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java", "superclasses": "", "methods": ["[]BigBangTheory(EntertainmentProviders)", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory.[]BigBangTheory(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory.[String]character()", "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class BigBangTheory extends AbstractProvider<EntertainmentProviders> {\n\n    protected BigBangTheory(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random Big Bang Theory's character's name.\n     *\n     * @return a string of Big Bang Theory's character's name.\n     */\n    public String character() {\n        return resolve(\"big_bang_theory.characters\");\n    }\n\n    /**\n     * This method generates a random Big Bang Theory's character's quote.\n     *\n     * @return a string of Big Bang Theory's character's quote.\n     */\n    public String quote() {\n        return resolve(\"big_bang_theory.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd", "name": "TheItCrowd", "file_path": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java", "superclasses": "", "methods": ["[]TheItCrowd(EntertainmentProviders)", "[String]actors()", "[String]characters()", "[String]emails()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[]TheItCrowd(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]actors()", "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]emails()", "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class TheItCrowd extends AbstractProvider<EntertainmentProviders> {\n\n    protected TheItCrowd(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String actors() {\n        return resolve(\"the_it_crowd.actors\");\n    }\n\n    public String characters() {\n        return resolve(\"the_it_crowd.characters\");\n    }\n\n    public String emails() {\n        return resolve(\"the_it_crowd.emails\");\n    }\n\n    public String quotes() {\n        return resolve(\"the_it_crowd.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist", "name": "MoneyHeist", "file_path": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java", "superclasses": "", "methods": ["[]MoneyHeist(EntertainmentProviders)", "[String]character()", "[String]heist()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[]MoneyHeist(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[String]character()", "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[String]heist()", "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class MoneyHeist extends AbstractProvider<EntertainmentProviders> {\n\n    protected MoneyHeist(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"money_heist.characters\");\n    }\n\n    public String heist() {\n        return resolve(\"money_heist.heists\");\n    }\n\n    public String quote() {\n        return resolve(\"money_heist.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show", "name": "Show", "file_path": "src/main/java/net/datafaker/providers/entertainment/Show.java", "superclasses": "", "methods": ["[]Show(EntertainmentProviders)", "[String]adultMusical()", "[String]play()", "[String]kidsMusical()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[]Show(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[String]adultMusical()", "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[String]play()", "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[String]kidsMusical()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.8.0\n", "original_string": "public class Show extends AbstractProvider<EntertainmentProviders> {\n\n    protected Show(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String adultMusical() {\n        return resolve(\"show.adult_musical\");\n    }\n\n    public String play() {\n        return resolve(\"show.play\");\n    }\n\n    public String kidsMusical() {\n        return resolve(\"show.kids_musical\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir", "name": "FreshPrinceOfBelAir", "file_path": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java", "superclasses": "", "methods": ["[]FreshPrinceOfBelAir(EntertainmentProviders)", "[String]characters()", "[String]celebrities()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[]FreshPrinceOfBelAir(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[String]celebrities()", "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Fresh Prince of Bel-Air is an American television sitcom created by Andy and Susan Borowitz for NBC.\n\n@since 1.7.0\n", "original_string": "public class FreshPrinceOfBelAir extends AbstractProvider<EntertainmentProviders> {\n\n    protected FreshPrinceOfBelAir(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"fresh_prince_of_bel_air.characters\");\n    }\n\n    public String celebrities() {\n        return resolve(\"fresh_prince_of_bel_air.celebrities\");\n    }\n\n    public String quotes() {\n        return resolve(\"fresh_prince_of_bel_air.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace", "name": "FinalSpace", "file_path": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java", "superclasses": "", "methods": ["[]FinalSpace(EntertainmentProviders)", "[String]character()", "[String]vehicle()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[]FinalSpace(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[String]character()", "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[String]vehicle()", "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nFinal Space is an adult animated space opera comedy drama television series.\n\n@since 1.6.0\n", "original_string": "public class FinalSpace extends AbstractProvider<EntertainmentProviders> {\n\n    protected FinalSpace(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"final_space.characters\");\n    }\n\n    public String vehicle() {\n        return resolve(\"final_space.vehicles\");\n    }\n\n    public String quote() {\n        return resolve(\"final_space.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt", "name": "TheThickOfIt", "file_path": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java", "superclasses": "", "methods": ["[]TheThickOfIt(EntertainmentProviders)", "[String]characters()", "[String]positions()", "[String]departments()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[]TheThickOfIt(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[String]positions()", "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[String]departments()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.8.0\n", "original_string": "public class TheThickOfIt extends AbstractProvider<EntertainmentProviders> {\n\n    protected TheThickOfIt(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"the_thick_of_it.characters\");\n    }\n\n    public String positions() {\n        return resolve(\"the_thick_of_it.positions\");\n    }\n\n    public String departments() {\n        return resolve(\"the_thick_of_it.departments\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold", "name": "HeyArnold", "file_path": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java", "superclasses": "", "methods": ["[]HeyArnold(EntertainmentProviders)", "[String]characters()", "[String]locations()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[]HeyArnold(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[String]locations()", "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nHey Arnold! is an American animated comedy television series created by Craig Bartlett.\n\n@since 1.4.0\n", "original_string": "public class HeyArnold extends AbstractProvider<EntertainmentProviders> {\n\n    protected HeyArnold(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"hey_arnold.characters\");\n    }\n\n    public String locations() {\n        return resolve(\"hey_arnold.locations\");\n    }\n\n    public String quotes() {\n        return resolve(\"hey_arnold.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle", "name": "TheKingkillerChronicle", "file_path": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java", "superclasses": "", "methods": ["[]TheKingkillerChronicle(EntertainmentProviders)", "[String]book()", "[String]character()", "[String]creature()", "[String]location()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[]TheKingkillerChronicle(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]book()", "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]character()", "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]creature()", "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]location()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Kingkiller Chronicle is a fantasy trilogy by the American writer Patrick Rothfuss.\n\n@since 1.8.0\n", "original_string": "public class TheKingkillerChronicle extends AbstractProvider<EntertainmentProviders> {\n\n    protected TheKingkillerChronicle(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String book() {\n        return resolve(\"the_kingkiller_chronicle.books\");\n    }\n\n    public String character() {\n        return resolve(\"the_kingkiller_chronicle.characters\");\n    }\n\n    public String creature() {\n        return resolve(\"the_kingkiller_chronicle.creatures\");\n    }\n\n    public String location() {\n        return resolve(\"the_kingkiller_chronicle.locations\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons", "name": "Simpsons", "file_path": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java", "superclasses": "", "methods": ["[]Simpsons(EntertainmentProviders)", "[String]character()", "[String]location()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[]Simpsons(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[String]location()", "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Simpsons extends AbstractProvider<EntertainmentProviders> {\n\n    public Simpsons(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"simpsons.characters\");\n    }\n\n    public String location() {\n        return resolve(\"simpsons.locations\");\n    }\n\n    public String quote() {\n        return resolve(\"simpsons.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead", "name": "GratefulDead", "file_path": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java", "superclasses": "", "methods": ["[]GratefulDead(EntertainmentProviders)", "[String]players()", "[String]songs()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead.[]GratefulDead(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead.[String]players()", "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead.[String]songs()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Grateful Dead was an American rock band formed in 1965 in Palo Alto, California.\nThe band is known for its eclectic style, which fused elements of rock, folk, country, jazz, bluegrass, blues and rock.\n\n@since 1.4.0\n", "original_string": "public class GratefulDead extends AbstractProvider<EntertainmentProviders> {\n\n    protected GratefulDead(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String players() {\n        return resolve(\"grateful_dead.players\");\n    }\n\n    public String songs() {\n        return resolve(\"grateful_dead.songs\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski", "name": "Lebowski", "file_path": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java", "superclasses": "", "methods": ["[]Lebowski(EntertainmentProviders)", "[String]actor()", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[]Lebowski(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[String]actor()", "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[String]character()", "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Lebowski extends AbstractProvider<EntertainmentProviders> {\n\n    public Lebowski(final EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String actor() {\n        return resolve(\"lebowski.actors\");\n    }\n\n    public String character() {\n        return resolve(\"lebowski.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"lebowski.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse", "name": "TheExpanse", "file_path": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java", "superclasses": "", "methods": ["[]TheExpanse(EntertainmentProviders)", "[String]characters()", "[String]locations()", "[String]ships()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[]TheExpanse(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]locations()", "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]ships()", "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nThe Expanse is an American science fiction television series developed by Mark Fergus and Hawk Ostby for the Syfy network.\n\n@since 1.8.0\n", "original_string": "public class TheExpanse extends AbstractProvider<EntertainmentProviders> {\n\n    protected TheExpanse(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"the_expanse.characters\");\n    }\n\n    public String locations() {\n        return resolve(\"the_expanse.locations\");\n    }\n\n    public String ships() {\n        return resolve(\"the_expanse.ships\");\n    }\n\n    public String quotes() {\n        return resolve(\"the_expanse.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber", "name": "DumbAndDumber", "file_path": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java", "superclasses": "", "methods": ["[]DumbAndDumber(EntertainmentProviders)", "[String]actor()", "[String]character()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[]DumbAndDumber(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[String]actor()", "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[String]character()", "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.6.0\n", "original_string": "public class DumbAndDumber extends AbstractProvider<EntertainmentProviders> {\n\n    protected DumbAndDumber(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String actor() {\n        return resolve(\"dumb_and_dumber.actors\");\n    }\n\n    public String character() {\n        return resolve(\"dumb_and_dumber.characters\");\n    }\n\n    public String quote() {\n        return resolve(\"dumb_and_dumber.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace", "name": "RuPaulDragRace", "file_path": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java", "superclasses": "", "methods": ["[]RuPaulDragRace(EntertainmentProviders)", "[String]queen()", "[String]quote()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace.[]RuPaulDragRace(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace.[String]queen()", "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace.[String]quote()"], "overrides": null, "attributes": [], "class_docstring": "\nRuPaul's Drag Race is a reality competition series produced by World of Wonder for the Logo TV Network.\n\n@since 1.0.0\n", "original_string": "public class RuPaulDragRace extends AbstractProvider<EntertainmentProviders> {\n\n    protected RuPaulDragRace(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String queen() {\n        return resolve(\"rupaul.queens\");\n    }\n\n    public String quote() {\n        return resolve(\"rupaul.quotes\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl", "name": "NewGirl", "file_path": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java", "superclasses": "", "methods": ["[]NewGirl(EntertainmentProviders)", "[String]characters()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl.[]NewGirl(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nNew Girl is an American television sitcom created by Elizabeth Meriwether.\n\n@since 1.8.0\n", "original_string": "public class NewGirl extends AbstractProvider<EntertainmentProviders> {\n\n    protected NewGirl(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"new_girl.characters\");\n    }\n\n    public String quotes() {\n        return resolve(\"new_girl.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar", "name": "Avatar", "file_path": "src/main/java/net/datafaker/providers/entertainment/Avatar.java", "superclasses": "", "methods": ["[]Avatar(EntertainmentProviders)", "[String]image()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar.[]Avatar(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar.[String]image()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Avatar extends AbstractProvider<EntertainmentProviders> {\n    private final String baseUrl;\n\n    protected Avatar(EntertainmentProviders faker) {\n        super(faker);\n        this.baseUrl = \"https://robohash.org/\";\n    }\n\n    public String image() {\n        return baseUrl + faker.regexify(\"[a-z]{8}\") + \".png\";\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate", "name": "Stargate", "file_path": "src/main/java/net/datafaker/providers/entertainment/Stargate.java", "superclasses": "", "methods": ["[]Stargate(EntertainmentProviders)", "[String]characters()", "[String]planets()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[]Stargate(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[String]planets()", "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nStargate is a military science fiction media franchise.\n\n@since 1.8.0\n", "original_string": "public class Stargate extends AbstractProvider<EntertainmentProviders> {\n\n    protected Stargate(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"stargate.characters\");\n    }\n\n    public String planets() {\n        return resolve(\"stargate.planets\");\n    }\n\n    public String quotes() {\n        return resolve(\"stargate.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits", "name": "Suits", "file_path": "src/main/java/net/datafaker/providers/entertainment/Suits.java", "superclasses": "", "methods": ["[]Suits(EntertainmentProviders)", "[String]characters()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits.[]Suits(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nSuits is an American legal drama television series created and written by Aaron Korsh.\n\n@since 1.8.0\n", "original_string": "public class Suits extends AbstractProvider<EntertainmentProviders> {\n\n    protected Suits(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"suits.characters\");\n    }\n\n    public String quotes() {\n        return resolve(\"suits.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine", "name": "BrooklynNineNine", "file_path": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java", "superclasses": "", "methods": ["[]BrooklynNineNine(EntertainmentProviders)", "[String]characters()", "[String]quotes()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine.[]BrooklynNineNine(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine.[String]characters()", "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine.[String]quotes()"], "overrides": null, "attributes": [], "class_docstring": "\nBrooklyn Nine-Nine is an American police procedural comedy television series.\n\n@since 1.3.0\n", "original_string": "public class BrooklynNineNine extends AbstractProvider<EntertainmentProviders> {\n\n    protected BrooklynNineNine(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String characters() {\n        return resolve(\"brooklyn_nine_nine.characters\");\n    }\n\n    public String quotes() {\n        return resolve(\"brooklyn_nine_nine.quotes\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist", "name": "FullmetalAlchemist", "file_path": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java", "superclasses": "", "methods": ["[]FullmetalAlchemist(EntertainmentProviders)", "[String]character()", "[String]city()", "[String]country()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[]FullmetalAlchemist(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[String]character()", "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[String]city()", "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[String]country()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.7.0\n", "original_string": "public class FullmetalAlchemist extends AbstractProvider<EntertainmentProviders> {\n\n    protected FullmetalAlchemist(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"fma_brotherhood.characters\");\n    }\n\n    public String city() {\n        return resolve(\"fma_brotherhood.cities\");\n    }\n\n    public String country() {\n        return resolve(\"fma_brotherhood.countries\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "name": "DoctorWho", "file_path": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "superclasses": "", "methods": ["[]DoctorWho(EntertainmentProviders)", "[String]character()", "[String]doctor()", "[String]actor()", "[String]catchPhrase()", "[String]quote()", "[String]villain()", "[String]species()"], "method_uris": ["src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[]DoctorWho(EntertainmentProviders)", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]character()", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]doctor()", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]actor()", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]catchPhrase()", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]quote()", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]villain()", "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]species()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.8.0\n", "original_string": "public class DoctorWho extends AbstractProvider<EntertainmentProviders> {\n\n    protected DoctorWho(EntertainmentProviders faker) {\n        super(faker);\n    }\n\n    public String character() {\n        return resolve(\"dr_who.character\");\n    }\n\n    public String doctor() {\n        return resolve(\"dr_who.the_doctors\");\n    }\n\n    public String actor() {\n        return resolve(\"dr_who.actors\");\n    }\n\n    public String catchPhrase() {\n        return resolve(\"dr_who.catch_phrases\");\n    }\n\n    public String quote() {\n        return resolve(\"dr_who.quotes\");\n    }\n\n    public String villain() {\n        return resolve(\"dr_who.villains\");\n    }\n\n    public String species() {\n        return resolve(\"dr_who.species\");\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "name": "Coffee", "file_path": "src/main/java/net/datafaker/providers/food/Coffee.java", "superclasses": "", "methods": ["[]Coffee(FoodProviders)", "[String]country()", "[String]region()", "[String]region(Coffee.Country)", "[String]variety()", "[String]intensifier()", "[String]body()", "[String]descriptor()", "[String]notes()", "[String]name1()", "[String]name2()", "[String]blendName()"], "method_uris": ["src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[]Coffee(FoodProviders)", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]country()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]region()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]region(Coffee.Country)", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]variety()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]intensifier()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]body()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]descriptor()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]notes()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]name1()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]name2()", "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]blendName()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.5.0\n", "original_string": "public class Coffee extends AbstractProvider<FoodProviders> {\n\n    protected Coffee(FoodProviders faker) {\n        super(faker);\n    }\n\n    public String country() {\n        return resolve(\"coffee.country\");\n    }\n\n    public String region() {\n        return region(faker.options().option(Coffee.Country.class));\n    }\n\n    public String region(Coffee.Country country) {\n        return resolve(\"coffee.regions.\" + country.name().toLowerCase(Locale.ROOT));\n    }\n\n    public String variety() {\n        return resolve(\"coffee.variety\");\n    }\n\n    public String intensifier() {\n        return resolve(\"coffee.intensifier\");\n    }\n\n    public String body() {\n        return resolve(\"coffee.body\");\n    }\n\n    public String descriptor() {\n        return resolve(\"coffee.descriptor\");\n    }\n\n    public String notes() {\n        return resolve(\"coffee.notes\");\n    }\n\n    public String name1() {\n        return resolve(\"coffee.name_1\");\n    }\n\n    public String name2() {\n        return resolve(\"coffee.name_2\");\n    }\n\n    public String blendName() {\n        return resolve(\"coffee.blend_name\");\n    }\n\n    public enum Country {\n        BRAZIL,\n        COLOMBIA,\n        SUMATRA,\n        ETHIOPIA,\n        HONDURAS,\n        KENYA,\n        UGANDA,\n        MEXICO,\n        GUATEMALA,\n        NICARAGUA,\n        COSTA_RICA,\n        TANZANIA,\n        EL_SALVADOR,\n        RWANDA,\n        BURUNDI,\n        PANAMA,\n        YEMEN,\n        INDIA\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/food/Tea.java.Tea", "name": "Tea", "file_path": "src/main/java/net/datafaker/providers/food/Tea.java", "superclasses": "", "methods": ["[]Tea(FoodProviders)", "[String]variety()", "[String]type()"], "method_uris": ["src/main/java/net/datafaker/providers/food/Tea.java.Tea.[]Tea(FoodProviders)", "src/main/java/net/datafaker/providers/food/Tea.java.Tea.[String]variety()", "src/main/java/net/datafaker/providers/food/Tea.java.Tea.[String]type()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 1.4.0\n", "original_string": "public class Tea extends AbstractProvider<FoodProviders> {\n\n    protected Tea(FoodProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * This method generates a random tea variety.\n     *\n     * @return a string of tea variety.\n     */\n    public String variety() {\n        return resolve(\"tea.variety.\" + type().toLowerCase());\n    }\n\n    /**\n     * This method generates a random tea type.\n     *\n     * @return a string of tea type.\n     */\n    public String type() {\n        return resolve(\"tea.type\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "name": "FoodFaker", "file_path": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "superclasses": "BaseFaker", "methods": ["[]FoodFaker()", "[]FoodFaker(Locale)", "[]FoodFaker(Random)", "[]FoodFaker(Locale,Random)", "[]FoodFaker(Locale,RandomService)", "[]FoodFaker(FakeValuesService,FakerContext)"], "method_uris": ["src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker()", "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Locale)", "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Random)", "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Locale,Random)", "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Locale,RandomService)", "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(FakeValuesService,FakerContext)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FoodFaker extends BaseFaker implements FoodProviders {\n    public FoodFaker() {\n        super();\n    }\n\n    public FoodFaker(Locale locale) {\n        super(locale);\n    }\n\n    public FoodFaker(Random random) {\n        super(random);\n    }\n\n    public FoodFaker(Locale locale, Random random) {\n        super(locale, random);\n    }\n\n    public FoodFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }\n\n    public FoodFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }\n}", "super_interfaces": ["FoodProviders"], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "name": "Beer", "file_path": "src/main/java/net/datafaker/providers/food/Beer.java", "superclasses": "", "methods": ["[]Beer(FoodProviders)", "[String]brand()", "[String]name()", "[String]style()", "[String]hop()", "[String]yeast()", "[String]malt()"], "method_uris": ["src/main/java/net/datafaker/providers/food/Beer.java.Beer.[]Beer(FoodProviders)", "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]brand()", "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]name()", "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]style()", "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]hop()", "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]yeast()", "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]malt()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Beer extends AbstractProvider<FoodProviders> {\n\n    protected Beer(FoodProviders faker) {\n        super(faker);\n    }\n\n    public String brand() {\n        return resolve(\"beer.brand\");\n    }\n\n    public String name() {\n        return resolve(\"beer.name\");\n    }\n\n    public String style() {\n        return resolve(\"beer.style\");\n    }\n\n    public String hop() {\n        return resolve(\"beer.hop\");\n    }\n\n    public String yeast() {\n        return resolve(\"beer.yeast\");\n    }\n\n    public String malt() {\n        return resolve(\"beer.malt\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food", "name": "Food", "file_path": "src/main/java/net/datafaker/providers/food/Food.java", "superclasses": "", "methods": ["[]Food(FoodProviders)", "[String]ingredient()", "[String]allergen()", "[String]spice()", "[String]dish()", "[String]fruit()", "[String]vegetable()", "[String]sushi()", "[String]measurement()"], "method_uris": ["src/main/java/net/datafaker/providers/food/Food.java.Food.[]Food(FoodProviders)", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]ingredient()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]allergen()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]spice()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]dish()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]fruit()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]vegetable()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]sushi()", "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]measurement()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.8.0\n", "original_string": "public class Food extends AbstractProvider<FoodProviders> {\n\n    protected Food(FoodProviders faker) {\n        super(faker);\n    }\n\n    public String ingredient() {\n        return resolve(\"food.ingredients\");\n    }\n\n    public String allergen() {\n        return resolve(\"food.allergens\");\n    }\n\n    public String spice() {\n        return resolve(\"food.spices\");\n    }\n\n    public String dish() {\n        return resolve(\"food.dish\");\n    }\n\n    public String fruit() {\n        return resolve(\"food.fruits\");\n    }\n\n    public String vegetable() {\n        return resolve(\"food.vegetables\");\n    }\n\n    public String sushi() {\n        return resolve(\"food.sushi\");\n    }\n\n    public String measurement() {\n        return resolve(\"food.measurement_sizes\") +\n            \" \" + resolve(\"food.measurements\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert", "name": "Dessert", "file_path": "src/main/java/net/datafaker/providers/food/Dessert.java", "superclasses": "", "methods": ["[]Dessert(FoodProviders)", "[String]variety()", "[String]topping()", "[String]flavor()"], "method_uris": ["src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[]Dessert(FoodProviders)", "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[String]variety()", "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[String]topping()", "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[String]flavor()"], "overrides": null, "attributes": [], "class_docstring": "\n@since 0.9.0\n", "original_string": "public class Dessert extends AbstractProvider<FoodProviders> {\n\n    protected Dessert(FoodProviders faker) {\n        super(faker);\n    }\n\n    /**\n     * @return dessert variety e.g. \"Cake\".\n     */\n    public String variety() {\n        return resolve(\"dessert.variety\");\n    }\n\n    /**\n     * @return dessert topping e.g. \"Rainbow Sprinkles\".\n     */\n    public String topping() {\n        return resolve(\"dessert.topping\");\n    }\n\n    /**\n     * @return dessert flavor e.g. \"Vanilla\".\n     */\n    public String flavor() {\n        return resolve(\"dessert.flavor\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "name": "FakeResolver", "file_path": "src/main/java/net/datafaker/annotations/FakeResolver.java", "superclasses": "", "methods": ["[]FakeResolver(Class<T>)", "[FakeResolver<T>]of(Class<T>)", "[T]generate(Schema<Object, ?>)", "[T]generateFromDefaultSchema()", "[Schema<Object, T>]getSchema(String)", "[void]checkFakeAnnotation(Class<T>)"], "method_uris": ["src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[]FakeResolver(Class<T>)", "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[FakeResolver<T>]of(Class<T>)", "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[T]generate(Schema<Object, ?>)", "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[T]generateFromDefaultSchema()", "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[Schema<Object, T>]getSchema(String)", "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[void]checkFakeAnnotation(Class<T>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FakeResolver<T> {\n\n    private static final JavaObjectTransformer JAVA_OBJECT_TRANSFORMER = new JavaObjectTransformer();\n    private static final Map<Class<?>, FakeResolver<?>> CLASS_2_FAKE_RESOLVER = new CopyOnWriteMap<>(IdentityHashMap::new);\n\n    private static final Map<Class<?>, Schema<Object, ?>> DEFAULT_SCHEMA_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new);\n\n    private final Class<T> clazz;\n\n    private FakeResolver(Class<T> clazz) {\n        this.clazz = clazz;\n    }\n\n    public static <T> FakeResolver<T> of(Class<T> clazz) {\n        var fakeFactory = CLASS_2_FAKE_RESOLVER.computeIfAbsent(clazz, k -> new FakeResolver<>(clazz));\n        return (FakeResolver<T>) fakeFactory;\n    }\n\n    public T generate(Schema<Object, ?> schema) {\n        if (Objects.isNull(schema)) {\n            return generateFromDefaultSchema();\n        }\n\n        return (T) JAVA_OBJECT_TRANSFORMER.apply(clazz, schema);\n    }\n\n    private T generateFromDefaultSchema() {\n        Schema<Object, ?> useSchema = DEFAULT_SCHEMA_CACHE.get(clazz);\n        if (useSchema == null) {\n            checkFakeAnnotation(clazz);\n\n            FakeForSchema fakeForSchemaAnnotation = clazz.getAnnotation(FakeForSchema.class);\n            useSchema = getSchema(fakeForSchemaAnnotation.value());\n            DEFAULT_SCHEMA_CACHE.put(clazz, useSchema);\n        }\n\n        return (T) JAVA_OBJECT_TRANSFORMER.apply(clazz, useSchema);\n    }\n\n    private Schema<Object, T> getSchema(String pathToSchema) {\n        if (pathToSchema != null) {\n            try {\n                // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n                final int sharpIndex = pathToSchema.indexOf(\"#\");\n                final Class<?> classToCall;\n                final String methodName;\n                if (sharpIndex >= 0) {\n                    classToCall = Class.forName(pathToSchema.substring(0, sharpIndex));\n                    methodName = pathToSchema.substring(sharpIndex + 1);\n                } else {\n                    classToCall = this.clazz.getEnclosingClass();\n                    methodName = pathToSchema;\n                }\n                Method myStaticMethod = classToCall.getMethod(methodName);\n                myStaticMethod.setAccessible(true);\n                return (Schema<Object, T>) myStaticMethod.invoke(null);\n            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        } else {\n            throw new IllegalArgumentException(\"The path to the schema is empty.\");\n        }\n    }\n\n    private void checkFakeAnnotation(Class<T> clazz) {\n        Objects.requireNonNull(clazz, \"The class is null.\");\n\n        if (!clazz.isAnnotationPresent(FakeForSchema.class)) {\n            throw new RuntimeException(\"The class %s is not annotated with Fake\".formatted(clazz.getSimpleName()));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final JavaObjectTransformer JAVA_OBJECT_TRANSFORMER = new JavaObjectTransformer();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "JavaObjectTransformer", "name": "JAVA_OBJECT_TRANSFORMER = new JavaObjectTransformer()", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, FakeResolver<?>> CLASS_2_FAKE_RESOLVER = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, FakeResolver<?>>", "name": "CLASS_2_FAKE_RESOLVER = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Schema<Object, ?>> DEFAULT_SCHEMA_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Schema<Object, ?>>", "name": "DEFAULT_SCHEMA_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private final Class<T> clazz;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Class<T>", "name": "clazz", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "name": "BulgarianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]generateInvalid(BaseProviders)", "[String]basePart(BaseProviders,LocalDate,Gender)", "[String]yy(LocalDate)", "[String]mm(LocalDate)", "[String]dd(LocalDate)", "[String]order(BaseProviders,Gender)", "[int]checksum(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]yy(LocalDate)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]mm(LocalDate)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]dd(LocalDate)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]order(BaseProviders,Gender)", "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[int]checksum(String)"], "overrides": null, "attributes": [], "class_docstring": "\n<a href=\"https://en.wikipedia.org/wiki/Unique_citizenship_number\">Specification</a>\n", "original_string": "public class BulgarianIdNumber implements IdNumberGenerator {\n    private static final int[] CHECKSUM_WEIGHTS = {2, 4, 8, 5, 10, 9, 7, 3, 6};\n    private static final int[] EVEN_DIGITS = {0, 2, 4, 6, 8};\n    private static final int[] ODD_DIGITS = {1, 3, 5, 7, 9};\n\n    @Override\n    public String countryCode() {\n        return \"BG\";\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = basePart(faker, birthday, gender);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        String basePart = basePart(faker, faker.timeAndDate().birthday(), randomGender(faker));\n        return basePart + (checksum(basePart) + 1) % 10;\n    }\n\n    private String basePart(BaseProviders faker, LocalDate birthDate, Gender gender) {\n        return yy(birthDate) + mm(birthDate) + dd(birthDate) + order(faker, gender);\n    }\n\n    private String yy(LocalDate birthDate) {\n        return \"%02d\".formatted(birthDate.getYear() % 100);\n    }\n\n    private String mm(LocalDate birthDate) {\n        int monthAddition = birthDate.getYear() < 1900 ? 20  :\n            birthDate.getYear() >= 2000 ? 40 : 0;\n        return \"%02d\".formatted(birthDate.getMonthValue() + monthAddition);\n    }\n\n    private String dd(LocalDate birthDate) {\n        return \"%02d\".formatted(birthDate.getDayOfMonth());\n    }\n\n    private String order(BaseProviders faker, Gender gender) {\n        int[] availableLastDigits = switch (gender) {\n            case FEMALE -> ODD_DIGITS;\n            case MALE -> EVEN_DIGITS;\n        };\n        int lastDigit = availableLastDigits[faker.number().numberBetween(0, 5)];\n        return faker.number().digits(2) + lastDigit;\n    }\n\n    int checksum(String text) {\n        int checksum = multiply(text, CHECKSUM_WEIGHTS);\n        return (checksum % 11) % 10;\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final int[] CHECKSUM_WEIGHTS = {2, 4, 8, 5, 10, 9, 7, 3, 6};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CHECKSUM_WEIGHTS = {2, 4, 8, 5, 10, 9, 7, 3, 6}", "syntax_pass": true}, {"attribute_expression": "private static final int[] EVEN_DIGITS = {0, 2, 4, 6, 8};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "EVEN_DIGITS = {0, 2, 4, 6, 8}", "syntax_pass": true}, {"attribute_expression": "private static final int[] ODD_DIGITS = {1, 3, 5, 7, 9};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "ODD_DIGITS = {1, 3, 5, 7, 9}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber", "name": "UkrainianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]generateInvalid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)"], "overrides": null, "attributes": [], "class_docstring": "\nThe Ukrainian Identity Number (UNZR)\nis a unique registration record number of 13 digits in a form \"YYYYMMDD-XXXXC\"\nwhere C is a control digit calculated from all the other 12 digits in the UNZR\n<a href=\"https://blog.uaid.net.ua/ua-id-passport-outside/\">algorithm to validate UNZR code</a>\n", "original_string": "public class UkrainianIdNumber implements IdNumberGenerator {\n    private static final int[] CHECKSUM_WEIGHTS = {7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1};\n\n    @Override\n    public String countryCode() {\n        return \"UA\";\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        String dob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String numbers = faker.numerify(\"####\");\n\n        int multiplied = multiply(dob + numbers, CHECKSUM_WEIGHTS);\n        int checksum = (multiplied + 1) % 10;\n        return dob + \"-\" + numbers + checksum;\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        String dob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String numbers = faker.numerify(\"####\");\n        int checksum = multiply(dob + numbers, CHECKSUM_WEIGHTS) % 10;\n        String unzr = dob + \"-\" + numbers + checksum;\n        return new PersonIdNumber(unzr, birthday, gender(faker, request));\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final int[] CHECKSUM_WEIGHTS = {7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CHECKSUM_WEIGHTS = {7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber", "name": "GeorgianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]generateValid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "[String]generateInvalid(BaseProviders)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[String]generateValid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[String]generateInvalid(BaseProviders)"], "overrides": null, "attributes": [], "class_docstring": "\nGenerates ID numbers for Georgian citizens and Residents\n", "original_string": "public class GeorgianIdNumber implements IdNumberGenerator {\n    @Override\n    public String countryCode() {\n        return \"GE\";\n    }\n\n    @Override\n    public String generateValid(BaseProviders faker) {\n        return faker.numerify(\"###########\");\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request) {\n        return new PersonIdNumber(\n            generateValid(faker),\n            birthday(faker, request),\n            gender(faker, request)\n        );\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return faker.numerify(\"###########42\");\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": []}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "name": "MoldovanIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]generateInvalid(BaseProviders)", "[String]basePart(BaseProviders,LocalDate)", "[char]firstDigit()", "[String]\u0413\u0413\u0413(LocalDate)", "[String]XXX(BaseProviders)", "[String]YYYYY(BaseProviders)", "[char]checksum(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]basePart(BaseProviders,LocalDate)", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[char]firstDigit()", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]\u0413\u0413\u0413(LocalDate)", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]XXX(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]YYYYY(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[char]checksum(String)"], "overrides": null, "attributes": [], "class_docstring": "\nThe Moldovan Individual Tax ID Number is 13 digits.\n<p>\nFor Individuals, Example: 4234567891236\n<a href=\"https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Moldova-TIN.pdf\">Specification</a>\n<a href=\"https://taxid.pro/docs/countries/moldova\">Overview</a>\n<a href=\"https://taxid.pro/?example=moldova-tin-for-individuals\">Online generator</a>\n", "original_string": "public class MoldovanIdNumber implements IdNumberGenerator {\n\n    private static final int[] CHECKSUM_MASK = {7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1};\n\n    @Override\n    public String countryCode() {\n        return \"MD\";\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        String basePart = basePart(faker, birthday);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, randomGender(faker));\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        String basePart = basePart(faker, faker.timeAndDate().birthday());\n        return basePart + (checksum(basePart) + 1) % 10;\n    }\n\n    private String basePart(BaseProviders faker, LocalDate birthday) {\n        // IDNP: 2\u0413\u0413\u0413XXXYYYYYK\n        return firstDigit() + \u0413\u0413\u0413(birthday) + XXX(faker) + YYYYY(faker);\n    }\n\n    /**\n     * 2 - the identification index of the natural person in the multitude of state identifiers (?)\n     */\n    private char firstDigit() {\n        return '2';\n    }\n\n    /**\n     * \u0413\u0413\u0413- the last three digits of the IDNP award year\n     */\n    private String \u0413\u0413\u0413(LocalDate birthday) {\n        return \"%03d\".formatted(birthday.getYear() % 1000);\n    }\n\n    /**\n     * XXX - code of the registrar's office\n     */\n    private String XXX(BaseProviders faker) {\n        return faker.number().digits(3);\n    }\n\n    /**\n     * YYYYY- the order number of the registration in the respective year in the respective office\n     */\n    private String YYYYY(BaseProviders faker) {\n        return faker.number().digits(5);\n    }\n\n    char checksum(String text) {\n        int checksum = multiply(text, CHECKSUM_MASK);\n        return (char) ('0' + checksum % 10);\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final int[] CHECKSUM_MASK = {7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CHECKSUM_MASK = {7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "name": "EstonianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]generateInvalid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]basePart(BaseProviders,LocalDate,Gender)", "[int]firstDigit(int,Gender)", "[int]checksum(String)", "[int]checksum(String,int[])"], "method_uris": ["src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[int]firstDigit(int,Gender)", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[int]checksum(String)", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[int]checksum(String,int[])"], "overrides": null, "attributes": [], "class_docstring": "\nEstonian personal identification number (\"Isikukood\" in estonian)\n<p>\nThe number is 11 digits, with modulus 11 checksum digit.\nThere is fixed list of valid first digits to signify gender and birth century\n<p>\nand <a href=\"https://en.wikipedia.org/wiki/National_identification_number#Estonia\">Estonian identification number</a>\n", "original_string": "public class EstonianIdNumber implements IdNumberGenerator {\n    private static final DateTimeFormatter BIRTHDAY_FORMAT = DateTimeFormatter.ofPattern(\"yyMMdd\");\n    private static final int[] CHECKSUM_COEFFICIENTS = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1};\n    private static final int[] CHECKSUM_COEFFICIENTS2 = {3, 4, 5, 6, 7, 8, 9, 1, 2, 3};\n\n    @Override\n    public String countryCode() {\n        return \"EE\";\n    }\n\n    @Override\n    public String generateInvalid(final BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        String digits = basePart(faker, birthday, randomGender(faker));\n        return digits + (checksum(digits) + 1) % 10;\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String digits = basePart(faker, birthday, gender);\n        String idNumber = digits + checksum(digits);\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }\n\n    private String basePart(BaseProviders faker, LocalDate birthday, Gender gender) {\n        return firstDigit(birthday.getYear(), gender) +\n            BIRTHDAY_FORMAT.format(birthday) +\n            faker.number().digits(3);\n    }\n\n    static int firstDigit(int birthYear, Gender gender) {\n        int digit = switch (birthYear / 100) {\n            case 18 -> 1;\n            case 19 -> 3;\n            case 20 -> 5;\n            case 21 -> 7;\n            default -> throw new IllegalStateException(\"Too far in future: \" + birthYear);\n        };\n        return switch (gender) {\n            case FEMALE -> digit + 1;\n            case MALE -> digit;\n        };\n    }\n\n    static int checksum(String numbers) {\n        int checksum = checksum(numbers, CHECKSUM_COEFFICIENTS);\n        return checksum != 10 ? checksum : checksum(numbers, CHECKSUM_COEFFICIENTS2) % 10;\n    }\n\n    private static int checksum(String numbers, int[] checksumCoefficients) {\n        int checkSum = 0;\n        for (int i = 0; i < numbers.length(); i++) {\n            int digit = Character.getNumericValue(numbers.charAt(i));\n            checkSum += checksumCoefficients[i] * digit;\n        }\n\n        return checkSum % 11;\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final DateTimeFormatter BIRTHDAY_FORMAT = DateTimeFormatter.ofPattern(\"yyMMdd\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateTimeFormatter", "name": "BIRTHDAY_FORMAT = DateTimeFormatter.ofPattern(\"yyMMdd\")", "syntax_pass": true}, {"attribute_expression": "private static final int[] CHECKSUM_COEFFICIENTS = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CHECKSUM_COEFFICIENTS = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1}", "syntax_pass": true}, {"attribute_expression": "private static final int[] CHECKSUM_COEFFICIENTS2 = {3, 4, 5, 6, 7, 8, 9, 1, 2, 3};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CHECKSUM_COEFFICIENTS2 = {3, 4, 5, 6, 7, 8, 9, 1, 2, 3}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "name": "AlbanianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]generateInvalid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]yy(int)", "[String]mm(int,Gender)", "[String]dd(int)", "[String]sss(BaseProviders)", "[char]checksum(String)", "[int]checksumOfFirstChar(char)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]yy(int)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]mm(int,Gender)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]dd(int)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]sss(BaseProviders)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[char]checksum(String)", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[int]checksumOfFirstChar(char)"], "overrides": null, "attributes": [], "class_docstring": "\nThe Albanian Identity Number is a unique personal identification number of 10 characters in the format YYMMDDSSSC\n", "original_string": "public class AlbanianIdNumber implements IdNumberGenerator {\n    private static final String FIRST_CHAR = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    private static final String CHECKSUM_CHAR = \"WABCDEFGHIJKLMNOPQRSTUV\";\n\n    @Override\n    public String countryCode() {\n        return \"AL\";\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        String pin = generateValid(faker);\n        int invalidMonth = faker.number().numberBetween(93, 99);\n        return pin.substring(0, 2) + invalidMonth + pin.substring(4);\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthDate = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = yy(birthDate.getYear()) + mm(birthDate.getMonthValue(), gender) + dd(birthDate.getDayOfMonth()) + sss(faker);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthDate, gender);\n    }\n\n    String yy(int year) {\n        return FIRST_CHAR.charAt((year - 1800) / 10) + String.valueOf(year % 10);\n    }\n\n    String mm(int month, Gender gender) {\n        return String.format(\"%02d\", (gender == FEMALE ? 50 : 0) + month);\n    }\n\n    String dd(int dayOfMonth) {\n        return String.format(\"%02d\", dayOfMonth);\n    }\n\n    private String sss(BaseProviders faker) {\n        return faker.number().digits(3);\n    }\n\n    char checksum(String text) {\n        int checksum = checksumOfFirstChar(text.charAt(0));\n        for (int i = 1; i < text.length(); i++) {\n            checksum += digitAt(text, i) * i;\n        }\n        return CHECKSUM_CHAR.charAt(checksum % 23);\n    }\n\n    int checksumOfFirstChar(char c) {\n        return Character.isLetter(c) ? CHECKSUM_CHAR.indexOf(c) : digit(c);\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final String FIRST_CHAR = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "FIRST_CHAR = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", "syntax_pass": true}, {"attribute_expression": "private static final String CHECKSUM_CHAR = \"WABCDEFGHIJKLMNOPQRSTUV\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "CHECKSUM_CHAR = \"WABCDEFGHIJKLMNOPQRSTUV\"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "name": "RomanianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]generateInvalid(BaseProviders)", "[String]basePart(BaseProviders,LocalDate,Gender)", "[int]firstCharacter(LocalDate,Gender)", "[String]dateOfBirth(LocalDate)", "[String]countyCode(BaseProviders)", "[String]sequenceNumber(BaseProviders)", "[int]checksum(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[int]firstCharacter(LocalDate,Gender)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]dateOfBirth(LocalDate)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]countyCode(BaseProviders)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]sequenceNumber(BaseProviders)", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[int]checksum(String)"], "overrides": null, "attributes": [], "class_docstring": "\nThe Romanian Cod Numeric Personal (CNP), or Personal Numeric Code\nis a unique identifying number consisting of 13 digits.\n\n<a href=\"https://en.wikipedia.org/wiki/Romanian_identity_card#CNP\">Description</a>\n", "original_string": "public class RomanianIdNumber implements IdNumberGenerator {\n    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\");\n    private static final int[] CHECKSUM_WEIGHTS = {2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9};\n\n    @Override\n    public String countryCode() {\n        return \"RO\";\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = basePart(faker, birthday, gender);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        Gender gender = randomGender(faker);\n        String basePart = basePart(faker, birthday, gender);\n        return basePart + (checksum(basePart) + 1) % 10;\n    }\n\n    private String basePart(BaseProviders faker, LocalDate birthday, Gender gender) {\n        return firstCharacter(birthday, gender) +\n            dateOfBirth(birthday) + countyCode(faker) + sequenceNumber(faker);\n    }\n\n    /**\n     * Represents the gender and century in which the person was born and can be:\n     * \u2013 1 for male persons born between 1900-1999;\n     * \u2013 2 for female persons born between 1900-1999;\n     * \u2013 3 for male persons born between 1800-1899;\n     * \u2013 4 for female persons born between 1800-1899;\n     * \u2013 5 for male persons born between 2000-2099;\n     * \u2013 6 for female persons born between the years 2000-2099;\n     */\n    int firstCharacter(LocalDate birthday, Gender gender) {\n        int digit = switch (birthday.getYear() / 100) {\n            case 18 -> 3;\n            case 19 -> 1;\n            case 20 -> 5;\n            default -> throw new IllegalArgumentException(\"Too far in the past or future: \" + birthday);\n        };\n\n        return switch (gender) {\n            case FEMALE -> digit + 1;\n            case MALE -> digit;\n        };\n    }\n\n    String dateOfBirth(LocalDate birthday) {\n        return DATE_TIME_FORMATTER.format(birthday);\n    }\n\n    /**\n     * Character 8\u20139: 01\u201346 or 51 or 52\n     */\n    String countyCode(BaseProviders faker) {\n        int countyCode = faker.bool().bool() ?\n            faker.number().numberBetween(1, 47) :\n            faker.number().numberBetween(51, 53);\n        return \"%02d\".formatted(countyCode);\n    }\n\n    /**\n     * next 3 digits is a number between 001 and 999.\n     * Each number is allocated only once per person per day.\n     */\n    String sequenceNumber(BaseProviders faker) {\n        return \"%03d\".formatted(faker.number().numberBetween(1, 1_000));\n    }\n\n    /**\n     * last digit is a control digit calculated from all the other 12 digits in the code as follows:\n     * (n1*2+n2*7+n3*9+n4*1+n5*4+n6*6+n7*3+n8*5+n9*8+n10*2+n11*7+n12*9)%11\n     *\n     * if the result is 10 then the digit is 1, otherwise is the result.\n     */\n    int checksum(String basePart) {\n        int result = multiply(basePart, CHECKSUM_WEIGHTS) % 11;\n        return result == 10 ? 1 : result;\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateTimeFormatter", "name": "DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\")", "syntax_pass": true}, {"attribute_expression": "private static final int[] CHECKSUM_WEIGHTS = {2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CHECKSUM_WEIGHTS = {2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "name": "PolishIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]get(BaseProviders,LocalDate,Gender)", "[PersonIdNumber.Gender]pickGender(BaseProviders,Gender)", "[String]get(BaseProviders,LocalDate,PersonIdNumber.Gender)", "[String]generateInvalid(BaseProviders)", "[int[]]generateDigits(BaseProviders,LocalDate,PersonIdNumber.Gender)", "[String]toString(int[],int)", "[int]randomDigit(BaseProviders)", "[int]getControlDigit(int[])", "[int]getGenderDigit(BaseProviders,PersonIdNumber.Gender)", "[int]getMonthEncoded(int,int)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]get(BaseProviders,LocalDate,Gender)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[PersonIdNumber.Gender]pickGender(BaseProviders,Gender)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]get(BaseProviders,LocalDate,PersonIdNumber.Gender)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int[]]generateDigits(BaseProviders,LocalDate,PersonIdNumber.Gender)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]toString(int[],int)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]randomDigit(BaseProviders)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]getControlDigit(int[])", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]getGenderDigit(BaseProviders,PersonIdNumber.Gender)", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]getMonthEncoded(int,int)"], "overrides": null, "attributes": [], "class_docstring": "\nImplementation based on the definition at\n<a href=\"https://isap.sejm.gov.pl/isap.nsf/DocDetails.xsp?id=WDU20210000510\">https://isap.sejm.gov.pl/isap.nsf/DocDetails.xsp?id=WDU20210000510</a> and the\ndescription at <a href=\"https://en.wikipedia.org/wiki/PESEL\">https://en.wikipedia.org/wiki/PESEL</a>\n", "original_string": "public class PolishIdNumber implements IdNumberGenerator {\n\n    public static final int PESEL_LENGTH = 11;\n\n    @Override\n    public String countryCode() {\n        return \"PL\";\n    }\n\n    /**\n     * @deprecated Use {@link GenderRequest} instead\n     */\n    @Deprecated\n    public enum Gender {\n        MALE, FEMALE, ANY\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        PersonIdNumber.Gender gender = gender(faker, request);\n        return new PersonIdNumber(get(faker, birthday, gender), birthday, gender);\n    }\n\n    /**\n     * @param requestedGender nullable\n     * @deprecated Use {@link #generateValid(BaseProviders, IdNumberRequest)} instead\n     */\n    @Deprecated\n    public String get(BaseProviders faker, LocalDate birthDate, Gender requestedGender) {\n        PersonIdNumber.Gender gender = pickGender(faker, requestedGender);\n        return get(faker, birthDate, gender);\n    }\n\n    private static PersonIdNumber.Gender pickGender(BaseProviders faker, Gender requestedGender) {\n        return requestedGender == null ? randomGender(faker) :\n            switch (requestedGender) {\n                case ANY -> randomGender(faker);\n                case MALE -> MALE;\n                case FEMALE -> FEMALE;\n            };\n    }\n\n    private String get(BaseProviders faker, LocalDate birthDate, PersonIdNumber.Gender gender) {\n        int[] digits = generateDigits(faker, birthDate, gender);\n        int controlDigit = getControlDigit(digits);\n        return toString(digits, controlDigit);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        PersonIdNumber.Gender gender = randomGender(faker);\n        int[] digits = generateDigits(faker, faker.timeAndDate().birthday(), gender);\n        int controlDigit = getControlDigit(digits);\n        int invalidControlDigit = (controlDigit + 1) % 10;\n        return toString(digits, invalidControlDigit);\n    }\n\n    private int[] generateDigits(BaseProviders faker, LocalDate birthDate, PersonIdNumber.Gender gender) {\n        int monthEncoded = getMonthEncoded(birthDate.getYear(), birthDate.getMonthValue());\n        return new int[]{\n            birthDate.getYear() / 10 % 10,\n            birthDate.getYear() % 10,\n\n            monthEncoded / 10,\n            monthEncoded % 10,\n\n            birthDate.getDayOfMonth() / 10,\n            birthDate.getDayOfMonth() % 10,\n\n            randomDigit(faker),\n            randomDigit(faker),\n            randomDigit(faker),\n\n            getGenderDigit(faker, gender)\n        };\n    }\n\n    private static String toString(int[] digits, int controlDigit) {\n        final StringBuilder peselSb = new StringBuilder(PESEL_LENGTH);\n        for (int digit : digits) {\n            peselSb.append(digit);\n        }\n        peselSb.append(controlDigit);\n        return peselSb.toString();\n    }\n\n    private int randomDigit(BaseProviders faker) {\n        return faker.number().randomDigit();\n    }\n\n    private int getControlDigit(int[] digits) {\n        final int sum = digits[0] + digits[4] + digits[8] + (digits[1] + digits[5] + digits[9]) * 3\n            + (digits[2] + digits[6]) * 7 + (digits[3] + digits[7]) * 9;\n        return (10 - sum % 10) % 10;\n    }\n\n    private int getGenderDigit(BaseProviders faker, PersonIdNumber.Gender gender) {\n        return switch (gender) {\n            case FEMALE -> faker.random().nextInt(5) * 2;\n            case MALE -> faker.random().nextInt(5) * 2 + 1;\n        };\n    }\n\n    private int getMonthEncoded(int year, int month) {\n        final int monthModifier;\n        if (year < 1800) {\n            throw new IllegalArgumentException(\"Year is before 1800: \" + year);\n        } else if (year < 1900) {\n            monthModifier = 80;\n        } else if (year < 2000) {\n            monthModifier = 0;\n        } else if (year < 2100) {\n            monthModifier = 20;\n        } else if (year < 2200) {\n            monthModifier = 40;\n        } else if (year < 2300) {\n            monthModifier = 60;\n        } else {\n            throw new IllegalArgumentException(\"Year is after 2300: \" + year);\n        }\n        return month + monthModifier;\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "public static final int PESEL_LENGTH = 11;", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "PESEL_LENGTH = 11", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "name": "SouthKoreanIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]getValidRrn(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[int]get7thDigit(int,Gender,String)", "[String]generateDay(LocalDate)", "[String]generateInvalid(BaseProviders)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]getValidRrn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[int]get7thDigit(int,Gender,String)", "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]generateDay(LocalDate)", "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]generateInvalid(BaseProviders)"], "overrides": null, "attributes": [], "class_docstring": "\nGenerate number of Resident Registration Number for Republic of Korea.\n<p>\nImplementation based on the description at\n<a href=\"https://en.wikipedia.org/wiki/Resident_registration_number\">Wikipedia - Resident registration number</a>\n", "original_string": "public class SouthKoreanIdNumber implements IdNumberGenerator {\n    @Override\n    public String countryCode() {\n        return \"KR\";\n    }\n\n    @Deprecated\n    public String getValidRrn(BaseProviders f) {\n        return generateValid(f);\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumberRequest request) {\n        StringBuilder patternBuilder = new StringBuilder();\n        LocalDate birthday = birthday(f, request);\n        String iso = f.nation().isoCountry();\n        Gender gender = gender(f, request);\n\n        // 1st to 6th digits indicate date of birth\n\n        patternBuilder.append(generateDay(birthday));\n\n        // Matches RRN Pattern ( ######-####### )\n        patternBuilder.append('-');\n\n        // 7th digit indicates birth century, gender, nationality\n        patternBuilder.append(get7thDigit(birthday.getYear(), gender, iso));\n\n        // From Oct 2020, 8 to 13 digits are randomized\n        // 8th to 13th digits are random digits\n        patternBuilder.append(\"######\");\n\n        String idNumber = f.numerify(patternBuilder.toString());\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }\n\n    private int get7thDigit(int year, Gender gender, String isoCountry) {\n        // Local starts with 1, foreigner starts with 5\n        int locality = isoCountry.equalsIgnoreCase(\"kr\") ? 1 : 5;\n        if (year < 1900) {\n            // Male: 9 | Female: 0\n            return gender == MALE ? 9 : 0;\n        } else if (year < 2000) {\n            // Male: 1, 5 | Female: 2, 6\n            return locality + (gender == MALE ? 0 : 1);\n        } else {\n            // Male: 3, 7 | Female: 4, 8\n            return locality + (gender == MALE ? 2 : 3);\n        }\n    }\n\n    private String generateDay(LocalDate birthday) {\n        final int year = birthday.getYear() % 100;\n        final int month = birthday.getMonthValue();\n        final int day = birthday.getDayOfMonth();\n        final char[] res = new char[6];\n        res[0] = (char) ('0' + (year / 10));\n        res[1] = (char) ('0' + (year % 10));\n        res[2] = (char) ('0' + (month / 10));\n        res[3] = (char) ('0' + (month % 10));\n        res[4] = (char) ('0' + (day / 10));\n        res[5] = (char) ('0' + (day % 10));\n        return String.valueOf(res);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return generateValid(faker) + \"42\";\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": []}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "name": "MexicanIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]get(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[char]genderCharacter(Gender)", "[String]getWrong(BaseProviders)", "[String]generateInvalid(BaseProviders)", "[String]formatBirthday(LocalDate)", "[int]getChecksum(char[])"], "method_uris": ["src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]get(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[char]genderCharacter(Gender)", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]getWrong(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]formatBirthday(LocalDate)", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[int]getChecksum(char[])"], "overrides": null, "attributes": [], "class_docstring": "\nImplementation based on the definition at\n<a href=\"https://en.wikipedia.org/wiki/Unique_Population_Registry_Code\">https://en.wikipedia.org/wiki/Unique_Population_Registry_Code</a>\n", "original_string": "public class MexicanIdNumber implements IdNumberGenerator {\n\n    @Override\n    public String countryCode() {\n        return \"MX\";\n    }\n\n    private static final String[] CHA = {\n        \"HEFA560427MVZRRL04\",\n        \"DKEM193827HDQWEF05\",\n        \"KAKS142444HNSSFAW6\",\n        \"KSDF414424HNSDFAW6\",\n        \"AKDF414424MSDSFAW6\",\n        \"ADKF144424MNSDFCD6\",\n        \"MYDF144424MDNFAW37\",\n        \"AKKS414424MDAFDFW6\",\n        \"WKDF144244HSDCNFA2\",\n        \"AKSK414244HSDATT56\",\n        \"QWDF414424HNSDVAW4\",\n        \"AKDF144424MDEFVFA1\"\n    };\n    private static final char[] CONSONANT = {'B', 'C', 'C', 'D', 'F',\n        'G', 'H', 'J', 'K', 'L', 'L', 'M', 'N', 'N',\n        'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n    };\n\n    private static final char[] VOWEL = {'A', 'E', 'I', 'O', 'U'};\n\n    private static final String[] STATES = {\"AG\", \"BC\", \"BS\", \"CM\", \"CS\",\n        \"CH\", \"CO\", \"CL\", \"DF\", \"DG\", \"GT\", \"GR\",\n        \"HG\", \"JA\", \"EM\", \"MI\", \"MO\", \"NA\", \"NL\",\n        \"OA\", \"PU\", \"QT\", \"QR\", \"SL\", \"SI\", \"SO\",\n        \"TB\", \"TM\", \"TL\", \"VE\", \"YU\", \"ZA\", \"NE\",\n    };\n\n    @Deprecated\n    public String get(BaseProviders faker) {\n        return generateValid(faker);\n    }\n\n    /**\n     * Get A valid MEX CURP.\n     *\n     * @param faker faker\n     * @return A valid MEX CURP.\n     */\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        Gender gender = gender(faker, request);\n        LocalDate birthday = birthday(faker, request);\n        char[] birthDay = formatBirthday(birthday).toCharArray();\n        final char[] ssn = new char[18];\n\n        final Options options = faker.options();\n        ssn[0] = options.option(CONSONANT);\n        ssn[1] = options.option(VOWEL);\n        ssn[2] = options.option(CONSONANT);\n        ssn[3] = options.option(CONSONANT);\n        System.arraycopy(birthDay, 0, ssn, 4, 6);\n        ssn[10] = genderCharacter(gender);\n        System.arraycopy(options.option(STATES).toCharArray(), 0, ssn, 11, 2);\n        ssn[13] = options.option(VOWEL);\n        ssn[14] = options.option(VOWEL);\n        ssn[15] = options.option(VOWEL);\n        ssn[16] = (birthDay[0] == '1' ? '0' : options.option(CONSONANT));\n        ssn[17] = String.valueOf(getChecksum(ssn)).charAt(0);\n        return new PersonIdNumber(String.valueOf(ssn), birthday, gender);\n    }\n\n    private char genderCharacter(Gender gender) {\n        return switch (gender) {\n            case FEMALE -> 'M';\n            case MALE -> 'H';\n        };\n    }\n\n    @Deprecated\n    public String getWrong(BaseProviders faker) {\n        return generateInvalid(faker);\n    }\n\n    /**\n     * Get A invalid MEX CURP.\n     *\n     * @param faker faker\n     * @return A invalid MEX CURP.\n     */\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return faker.options().option(CHA);\n    }\n\n    /**\n     * Formats given birthday to fit into ID Number\n     */\n    private String formatBirthday(LocalDate birthday) {\n        return String.valueOf(birthday.getYear() * 10000 + birthday.getMonthValue() * 100 + birthday.getDayOfMonth());\n    }\n\n    /**\n     * Gets the Checksum.\n     *\n     * @param str input string\n     * @return Checksum.\n     */\n    private int getChecksum(char[] str) {\n        int sum = 0;\n        int v = str.length;\n        for (int i = 0; i < str.length - 1; i++) {\n            int number;\n            if (str[i] < '9')\n                number = str[i] - '0';\n            else number = str[i] - 'A' + 10;\n            sum += number * v--;\n        }\n        sum = Math.abs((sum % 10) - 10);\n        return (sum == 10) ? 0 : sum;\n    }\n\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final String[] CHA = {\n        \"HEFA560427MVZRRL04\",\n        \"DKEM193827HDQWEF05\",\n        \"KAKS142444HNSSFAW6\",\n        \"KSDF414424HNSDFAW6\",\n        \"AKDF414424MSDSFAW6\",\n        \"ADKF144424MNSDFCD6\",\n        \"MYDF144424MDNFAW37\",\n        \"AKKS414424MDAFDFW6\",\n        \"WKDF144244HSDCNFA2\",\n        \"AKSK414244HSDATT56\",\n        \"QWDF414424HNSDVAW4\",\n        \"AKDF144424MDEFVFA1\"\n    };", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "CHA = {\n        \"HEFA560427MVZRRL04\",\n        \"DKEM193827HDQWEF05\",\n        \"KAKS142444HNSSFAW6\",\n        \"KSDF414424HNSDFAW6\",\n        \"AKDF414424MSDSFAW6\",\n        \"ADKF144424MNSDFCD6\",\n        \"MYDF144424MDNFAW37\",\n        \"AKKS414424MDAFDFW6\",\n        \"WKDF144244HSDCNFA2\",\n        \"AKSK414244HSDATT56\",\n        \"QWDF414424HNSDVAW4\",\n        \"AKDF144424MDEFVFA1\"\n    }", "syntax_pass": true}, {"attribute_expression": "private static final char[] CONSONANT = {'B', 'C', 'C', 'D', 'F',\n        'G', 'H', 'J', 'K', 'L', 'L', 'M', 'N', 'N',\n        'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n    };", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "CONSONANT = {'B', 'C', 'C', 'D', 'F',\n        'G', 'H', 'J', 'K', 'L', 'L', 'M', 'N', 'N',\n        'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n    }", "syntax_pass": true}, {"attribute_expression": "private static final char[] VOWEL = {'A', 'E', 'I', 'O', 'U'};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "VOWEL = {'A', 'E', 'I', 'O', 'U'}", "syntax_pass": true}, {"attribute_expression": "private static final String[] STATES = {\"AG\", \"BC\", \"BS\", \"CM\", \"CS\",\n        \"CH\", \"CO\", \"CL\", \"DF\", \"DG\", \"GT\", \"GR\",\n        \"HG\", \"JA\", \"EM\", \"MI\", \"MO\", \"NA\", \"NL\",\n        \"OA\", \"PU\", \"QT\", \"QR\", \"SL\", \"SI\", \"SO\",\n        \"TB\", \"TM\", \"TL\", \"VE\", \"YU\", \"ZA\", \"NE\",\n    };", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "STATES = {\"AG\", \"BC\", \"BS\", \"CM\", \"CS\",\n        \"CH\", \"CO\", \"CL\", \"DF\", \"DG\", \"GT\", \"GR\",\n        \"HG\", \"JA\", \"EM\", \"MI\", \"MO\", \"NA\", \"NL\",\n        \"OA\", \"PU\", \"QT\", \"QR\", \"SL\", \"SI\", \"SO\",\n        \"TB\", \"TM\", \"TL\", \"VE\", \"YU\", \"ZA\", \"NE\",\n    }", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "name": "SouthAfricanIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]getValidSsn(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]sequentialNumber(BaseProviders,Gender)", "[String]getInValidSsn(BaseProviders)", "[String]generateInvalid(BaseProviders)", "[String]getPattern(BaseProviders)", "[boolean]isValidEnZASsn(String)", "[boolean]parseDate(String)", "[int]calculateChecksum(String,int)", "[int]calculate(int)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]getValidSsn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]sequentialNumber(BaseProviders,Gender)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]getInValidSsn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]getPattern(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[boolean]isValidEnZASsn(String)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[boolean]parseDate(String)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[int]calculateChecksum(String,int)", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[int]calculate(int)"], "overrides": null, "attributes": [], "class_docstring": "\nImplementation based on the definition at\n<a href=\"https://en.wikipedia.org/wiki/South_African_identity_card\">https://en.wikipedia.org/wiki/South_African_identity_card</a>\n", "original_string": "public class SouthAfricanIdNumber implements IdNumberGenerator {\n    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\");\n\n    @Override\n    public String countryCode() {\n        return \"ZA\";\n    }\n\n    private static final String[] VALID_PATTERN = {\"##########08#\", \"##########18#\"};\n    private static final String[] CODE_PATTERN = {\"18\", \"08\"};\n\n    @Deprecated\n    public String getValidSsn(BaseProviders faker) {\n        return generateValid(faker);\n    }\n\n    /**\n     * Generate a valid social security number on faker\n     *\n     * @param f the java-faker\n     * @return a valid social security number on faker\n     */\n    @Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumberRequest request) {\n        LocalDate birthday = birthday(f, request);\n        Gender gender = gender(f, request);\n        String basePart = DATE_TIME_FORMATTER.format(birthday)\n            + sequentialNumber(f, gender)\n            + f.options().option(CODE_PATTERN);\n        return new PersonIdNumber(basePart + calculateChecksum(basePart, 12), birthday, gender);\n    }\n\n    static String sequentialNumber(BaseProviders f, Gender gender) {\n        int number = switch (gender) {\n            case FEMALE -> f.number().numberBetween(0, 5000);\n            case MALE -> f.number().numberBetween(5000, 10_000);\n        };\n        return \"%04d\".formatted(number);\n    }\n\n    @Deprecated\n    public String getInValidSsn(BaseProviders f) {\n        return generateInvalid(f);\n    }\n\n    /**\n     * Generate an invalid social security number on faker\n     *\n     * @param f the java-faker\n     * @return an invalid social security number on faker\n     */\n    @Override\n    public String generateInvalid(BaseProviders f) {\n        String ssn = f.numerify(f.options().option(VALID_PATTERN));\n        while (isValidEnZASsn(ssn)) {\n            String pattern = getPattern(f);\n            ssn = f.numerify(pattern);\n        }\n        return ssn;\n    }\n\n    /**\n     * Generate a fixed format numeric string\n     *\n     * @param faker the java-faker\n     * @return a fixed format numeric string\n     */\n    private String getPattern(BaseProviders faker) {\n        return faker.options().option(VALID_PATTERN);\n    }\n\n    /**\n     * Judge whether a social security number is valid\n     *\n     * @param ssn social security number\n     */\n    public static boolean isValidEnZASsn(String ssn) {\n        if (ssn.length() != 13) {\n            return false;\n        }\n\n        try {\n            if (parseDate(ssn)) {\n                return false;\n            }\n        } catch (DateTimeParseException | NumberFormatException ignore) {\n            return false;\n        }\n\n        return ssn.charAt(12) - '0' == calculateChecksum(ssn, 12);\n    }\n\n    /**\n     * Judge whether a numeric string of ssn can represent a legal date\n     *\n     * @param ssn social security number\n     */\n    private static boolean parseDate(String ssn) {\n        if (ChronoField.YEAR.range().isValidIntValue(Integer.parseInt(ssn, 0, 2, 10))) {\n            if (ChronoField.MONTH_OF_YEAR.range().isValidIntValue(Integer.parseInt(ssn, 2, 4, 10))) {\n                if (ChronoField.DAY_OF_MONTH.range().isValidIntValue(Integer.parseInt(ssn, 4, 6, 10))) {\n                    String dateString = ssn.substring(0, 6);\n                    LocalDate date = LocalDate.parse(dateString, DATE_TIME_FORMATTER);\n                    // want to check that the parsed date is equal to the supplied data, most of the attempts will fail\n                    String reversed = date.format(DATE_TIME_FORMATTER);\n                    return !reversed.equals(dateString);\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Calculate the Check Number in the last number of a ssn\n     *\n     * @param number a social security number not including the last number\n     * @return check number of this ssn\n     */\n    private static int calculateChecksum(String number, int length2Check) {\n\n        int totalNumber = 0;\n\n        for (int i = length2Check - 1; i >= 0; i -= 2) {\n            int tmpNumber = calculate((number.charAt(i) - '0') * 2);\n            if (i == 0) {\n                totalNumber += tmpNumber;\n            } else {\n                totalNumber += tmpNumber + number.charAt(i - 1) - '0';\n            }\n        }\n        if (totalNumber >= 0 && totalNumber < 9) {\n            return 10 - totalNumber;\n        } else {\n            int res = totalNumber % 10;\n            return res == 0 ? res : 10 - res;\n        }\n    }\n\n    /**\n     * Calculate the sum of each digit of the number\n     *\n     * @return sum of each digit of the number\n     */\n    private static int calculate(int number) {\n        int res = 0;\n        while (number > 0) {\n            res += number % 10;\n            number /= 10;\n        }\n        return res;\n    }\n\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateTimeFormatter", "name": "DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\")", "syntax_pass": true}, {"attribute_expression": "private static final String[] VALID_PATTERN = {\"##########08#\", \"##########18#\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "VALID_PATTERN = {\"##########08#\", \"##########18#\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] CODE_PATTERN = {\"18\", \"08\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "CODE_PATTERN = {\"18\", \"08\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "name": "AmericanIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]getValidSsn(BaseProviders)", "[String]generateValid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "[String]generateInvalid(BaseProviders)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]getValidSsn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]generateValid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]generateInvalid(BaseProviders)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AmericanIdNumber implements IdNumberGenerator {\n    @Override\n    public String countryCode() {\n        return \"US\";\n    }\n\n    private static final List<String> INVALID_SSNS = List.of(\n        \"0{3}-\\\\d{2}-\\\\d{4}\",\n        \"\\\\d{3}-0{2}-\\\\d{4}\",\n        \"\\\\d{3}-\\\\d{2}-0{4}\",\n        \"666-\\\\d{2}-\\\\d{4}\",\n        \"9\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n\n    private static final List<Pattern> INVALID_SSN_PATTERNS = INVALID_SSNS.stream()\n        .map(Pattern::compile)\n        .toList();\n\n    @Deprecated\n    public String getValidSsn(BaseProviders f) {\n        return generateValid(f);\n    }\n\n    @Override\n    public String generateValid(BaseProviders f) {\n        final String ssn = f.regexify(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n\n        boolean isValid = INVALID_SSN_PATTERNS.stream()\n            .noneMatch(invalidSSNPattern -> invalidSSNPattern.matcher(ssn).matches());\n        return isValid ? ssn : generateValid(f);\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request) {\n        return new PersonIdNumber(generateValid(faker), birthday(faker, request), gender(faker, request));\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return faker.regexify(faker.options().nextElement(INVALID_SSNS));\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final List<String> INVALID_SSNS = List.of(\n        \"0{3}-\\\\d{2}-\\\\d{4}\",\n        \"\\\\d{3}-0{2}-\\\\d{4}\",\n        \"\\\\d{3}-\\\\d{2}-0{4}\",\n        \"666-\\\\d{2}-\\\\d{4}\",\n        \"9\\\\d{2}-\\\\d{2}-\\\\d{4}\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<String>", "name": "INVALID_SSNS = List.of(\n        \"0{3}-\\\\d{2}-\\\\d{4}\",\n        \"\\\\d{3}-0{2}-\\\\d{4}\",\n        \"\\\\d{3}-\\\\d{2}-0{4}\",\n        \"666-\\\\d{2}-\\\\d{4}\",\n        \"9\\\\d{2}-\\\\d{2}-\\\\d{4}\")", "syntax_pass": true}, {"attribute_expression": "private static final List<Pattern> INVALID_SSN_PATTERNS = INVALID_SSNS.stream()\n        .map(Pattern::compile)\n        .toList();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<Pattern>", "name": "INVALID_SSN_PATTERNS = INVALID_SSNS.stream()\n        .map(Pattern::compile)\n        .toList()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "name": "SwedenIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]getValidSsn(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "[String]getInvalidSsn(BaseProviders)", "[String]generateInvalid(BaseProviders)", "[String]getPattern(BaseProviders)", "[boolean]isValidSwedishSsn(String)", "[boolean]parseDate(String)", "[int]calculateChecksum(String)", "[String]calculateDigits(String)", "[int]calculateDigitSum(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]getValidSsn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]getInvalidSsn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]getPattern(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[boolean]isValidSwedishSsn(String)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[boolean]parseDate(String)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[int]calculateChecksum(String)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]calculateDigits(String)", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[int]calculateDigitSum(String)"], "overrides": null, "attributes": [], "class_docstring": "\nImplementation based on the definition at\n<a href=\"https://www.skatteverket.se/privat/folkbokforing/personnummer.4.3810a01c150939e893f18c29.html\">https://www.skatteverket.se/privat/folkbokforing/personnummer.4.3810a01c150939e893f18c29.html</a>\nand the description at\n<a href=\"https://en.wikipedia.org/wiki/Personal_identity_number_\">https://en.wikipedia.org/wiki/Personal_identity_number_</a>(Sweden)\n", "original_string": "public class SwedenIdNumber implements IdNumberGenerator {\n    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\");\n\n    @Override\n    public String countryCode() {\n        return \"SE\";\n    }\n\n    private static final String[] VALID_PATTERNS = {\"######-####\", \"######+####\"};\n    private static final String[] PLUS_MINUS = {\"+\", \"-\"};\n\n    @Deprecated\n    public String getValidSsn(BaseProviders f) {\n        return generateValid(f);\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumber.IdNumberRequest request) {\n        LocalDate birthday = birthday(f, request);\n        String end = f.numerify(\"###\");\n        String basePart = DATE_TIME_FORMATTER.format(birthday)\n            + f.options().option(PLUS_MINUS)\n            + end;\n        String idNumber = basePart + calculateChecksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, gender(f, request));\n    }\n\n    @Deprecated\n    public String getInvalidSsn(BaseProviders f) {\n        return generateInvalid(f);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders f) {\n        String candidate = \"121212-1212\"; // Seed with a valid number\n        while (isValidSwedishSsn(candidate)) {\n            String pattern = getPattern(f);\n            candidate = f.numerify(pattern);\n        }\n\n        return candidate;\n    }\n\n    private String getPattern(BaseProviders faker) {\n        return faker.options().option(VALID_PATTERNS);\n    }\n\n    public static boolean isValidSwedishSsn(String ssn) {\n        if (ssn.length() != 11) {\n            return false;\n        }\n\n        try {\n            if (parseDate(ssn)) {\n                return false;\n            }\n        } catch (DateTimeParseException | NumberFormatException ignore) {\n            return false;\n        }\n\n        int calculatedChecksum = calculateChecksum(ssn);\n        int checksum = Integer.parseInt(ssn.substring(10, 11));\n        return checksum == calculatedChecksum;\n    }\n\n    private static boolean parseDate(String ssn) {\n        String dateString = ssn.substring(0, 6);\n        if (ChronoField.YEAR.range().isValidIntValue(Integer.parseInt(dateString.substring(0, 2)))) {\n            if (ChronoField.MONTH_OF_YEAR.range().isValidIntValue(Integer.parseInt(dateString.substring(2, 4)))) {\n                if (ChronoField.DAY_OF_MONTH.range().isValidIntValue(Integer.parseInt(dateString.substring(4)))) {\n                    LocalDate date = LocalDate.parse(dateString, DATE_TIME_FORMATTER);\n                    // want to check that the parsed date is equal to the supplied data, most of the attempts will fail\n                    String reversed = date.format(DATE_TIME_FORMATTER);\n                    return !reversed.equals(dateString);\n                }\n            }\n        }\n        return true;\n    }\n\n    private static int calculateChecksum(String number) {\n        String dateString = number.substring(0, 6);\n        String birthNumber = number.substring(7, 10);\n\n        String calculatedNumber = calculateDigits(dateString + birthNumber);\n        int sum = calculateDigitSum(calculatedNumber);\n\n        int lastDigit = (sum % 10);\n        int difference = 10 - lastDigit;\n\n        return (difference % 10);\n    }\n\n    private static String calculateDigits(String numbers) {\n        StringBuilder calculatedNumbers = new StringBuilder();\n        for (int i = 0; i < 9; i++) {\n            int res;\n            int n = numbers.charAt(i) - '0';\n            if (i % 2 == 0) {\n                res = n << 1;\n            } else {\n                res = n;\n            }\n\n            calculatedNumbers.append(res);\n        }\n        return calculatedNumbers.toString();\n    }\n\n    private static int calculateDigitSum(String numbers) {\n        int sum = 0;\n        final int length = numbers.length();\n        for (int i = 0; i < length; i++) {\n            int n = numbers.charAt(i) - '0';\n            sum += n;\n        }\n        return sum;\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "DateTimeFormatter", "name": "DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(\"yyMMdd\")", "syntax_pass": true}, {"attribute_expression": "private static final String[] VALID_PATTERNS = {\"######-####\", \"######+####\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "VALID_PATTERNS = {\"######-####\", \"######+####\"}", "syntax_pass": true}, {"attribute_expression": "private static final String[] PLUS_MINUS = {\"+\", \"-\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "PLUS_MINUS = {\"+\", \"-\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "name": "Utils", "file_path": "src/main/java/net/datafaker/idnumbers/Utils.java", "superclasses": "", "methods": ["[LocalDate]birthday(BaseProviders,IdNumberRequest)", "[Gender]gender(BaseProviders,IdNumberRequest)", "[Gender]randomGender(BaseProviders)", "[int]digitAt(String,int)", "[int]digit(char)", "[int]multiply(String,int[])"], "method_uris": ["src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[LocalDate]birthday(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[Gender]gender(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[Gender]randomGender(BaseProviders)", "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[int]digitAt(String,int)", "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[int]digit(char)", "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[int]multiply(String,int[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Utils {\n\n    static LocalDate birthday(BaseProviders faker, IdNumberRequest request) {\n        return faker.timeAndDate().birthday(request.minAge(), request.maxAge());\n    }\n\n    static Gender gender(BaseProviders faker, IdNumberRequest request) {\n        IdNumber.GenderRequest gender = request.gender();\n        return switch (gender) {\n            case FEMALE -> FEMALE;\n            case MALE -> MALE;\n            case ANY -> randomGender(faker);\n        };\n    }\n\n    static Gender randomGender(BaseProviders faker) {\n        return faker.bool().bool() ? FEMALE : MALE;\n    }\n\n    static int digitAt(String text, int index) {\n        return digit(text.charAt(index));\n    }\n\n    static int digit(char c) {\n        return c - '0';\n    }\n\n    static int multiply(String text, int[] weights) {\n        int checksum = 0;\n        for (int i = 0; i < text.length(); i++) {\n            checksum += digitAt(text, i) * weights[i];\n        }\n        return checksum;\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "name": "ChineseIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]getValidSsn(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]idNumber(char[])", "[void]fillBirthday(char[],int,LocalDate)", "[String]generateInvalid(BaseProviders)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]getValidSsn(BaseProviders)", "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]idNumber(char[])", "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[void]fillBirthday(char[],int,LocalDate)", "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]generateInvalid(BaseProviders)"], "overrides": null, "attributes": [], "class_docstring": "\nThis class is used for generating Chinese ID numbers\n\n@author irakatz\n", "original_string": "public class ChineseIdNumber implements IdNumberGenerator {\n    @Override\n    public String countryCode() {\n        return \"CN\";\n    }\n\n    /**\n     * list all combination of first 6 bits, they are locations\n     */\n    private static final String[] LOCATIONS = {\"110000\", \"110101\", \"110102\", \"110103\", \"110104\", \"110105\", \"110106\", \"110107\", \"110108\", \"110109\", \"110111\", \"110112\", \"110113\", \"110114\", \"110115\", \"110116\", \"110117\", \"110200\", \"110228\", \"110229\", \"120000\", \"120101\", \"120102\", \"120103\", \"120104\", \"120105\", \"120106\", \"120107\", \"120108\", \"120109\", \"120110\", \"120111\", \"120112\", \"120113\", \"120114\", \"120115\", \"120200\", \"120221\", \"120223\", \"120225\", \"130000\", \"130100\", \"130102\", \"130103\", \"130104\", \"130105\", \"130107\", \"130108\", \"130121\", \"130123\", \"130124\", \"130125\", \"130126\", \"130127\", \"130128\", \"130129\", \"130130\", \"130131\", \"130132\", \"130133\", \"130181\", \"130182\", \"130183\", \"130184\", \"130185\", \"130200\", \"130202\", \"130203\", \"130204\", \"130205\", \"130207\", \"130208\", \"130223\", \"130224\", \"130225\", \"130227\", \"130229\", \"130230\", \"130281\", \"130283\", \"130300\", \"130302\", \"130303\", \"130304\", \"130321\", \"130322\", \"130323\", \"130324\", \"130400\", \"130402\", \"130403\", \"130404\", \"130406\", \"130421\", \"130423\", \"130424\", \"130425\", \"130426\", \"130427\", \"130428\", \"130429\", \"130430\", \"130431\", \"130432\", \"130433\", \"130434\", \"130435\", \"130481\", \"130500\", \"130502\", \"130503\", \"130521\", \"130522\", \"130523\", \"130524\", \"130525\", \"130526\", \"130527\", \"130528\", \"130529\", \"130530\", \"130531\", \"130532\", \"130533\", \"130534\", \"130535\", \"130581\", \"130582\", \"130600\", \"130602\", \"130603\", \"130604\", \"130621\", \"130622\", \"130623\", \"130624\", \"130625\", \"130626\", \"130627\", \"130628\", \"130629\", \"130630\", \"130631\", \"130632\", \"130633\", \"130634\", \"130635\", \"130636\", \"130637\", \"130638\", \"130681\", \"130682\", \"130683\", \"130684\", \"130700\", \"130702\", \"130703\", \"130705\", \"130706\", \"130721\", \"130722\", \"130723\", \"130724\", \"130725\", \"130726\", \"130727\", \"130728\", \"130729\", \"130730\", \"130731\", \"130732\", \"130733\", \"130800\", \"130802\", \"130803\", \"130804\", \"130821\", \"130822\", \"130823\", \"130824\", \"130825\", \"130826\", \"130827\", \"130828\", \"130900\", \"130902\", \"130903\", \"130921\", \"130922\", \"130923\", \"130924\", \"130925\", \"130926\", \"130927\", \"130928\", \"130929\", \"130930\", \"130981\", \"130982\", \"130983\", \"130984\", \"131000\", \"131002\", \"131003\", \"131022\", \"131023\", \"131024\", \"131025\", \"131026\", \"131028\", \"131081\", \"131082\", \"131100\", \"131102\", \"131121\", \"131122\", \"131123\", \"131124\", \"131125\", \"131126\", \"131127\", \"131128\", \"131181\", \"131182\", \"140000\", \"140100\", \"140105\", \"140106\", \"140107\", \"140108\", \"140109\", \"140110\", \"140121\", \"140122\", \"140123\", \"140181\", \"140200\", \"140202\", \"140203\", \"140211\", \"140212\", \"140221\", \"140222\", \"140223\", \"140224\", \"140225\", \"140226\", \"140227\", \"140300\", \"140302\", \"140303\", \"140311\", \"140321\", \"140322\", \"140400\", \"140402\", \"140411\", \"140421\", \"140423\", \"140424\", \"140425\", \"140426\", \"140427\", \"140428\", \"140429\", \"140430\", \"140431\", \"140481\", \"140500\", \"140502\", \"140521\", \"140522\", \"140524\", \"140525\", \"140581\", \"140600\", \"140602\", \"140603\", \"140621\", \"140622\", \"140623\", \"140624\", \"140700\", \"140702\", \"140721\", \"140722\", \"140723\", \"140724\", \"140725\", \"140726\", \"140727\", \"140728\", \"140729\", \"140781\", \"140800\", \"140802\", \"140821\", \"140822\", \"140823\", \"140824\", \"140825\", \"140826\", \"140827\", \"140828\", \"140829\", \"140830\", \"140881\", \"140882\", \"140900\", \"140902\", \"140921\", \"140922\", \"140923\", \"140924\", \"140925\", \"140926\", \"140927\", \"140928\", \"140929\", \"140930\", \"140931\", \"140932\", \"140981\", \"141000\", \"141002\", \"141021\", \"141022\", \"141023\", \"141024\", \"141025\", \"141026\", \"141027\", \"141028\", \"141029\", \"141030\", \"141031\", \"141032\", \"141033\", \"141034\", \"141081\", \"141082\", \"141100\", \"141102\", \"141121\", \"141122\", \"141123\", \"141124\", \"141125\", \"141126\", \"141127\", \"141128\", \"141129\", \"141130\", \"141181\", \"141182\", \"150000\", \"150100\", \"150102\", \"150103\", \"150104\", \"150105\", \"150121\", \"150122\", \"150123\", \"150124\", \"150125\", \"150200\", \"150202\", \"150203\", \"150204\", \"150205\", \"150206\", \"150207\", \"150221\", \"150222\", \"150223\", \"150300\", \"150302\", \"150303\", \"150304\", \"150400\", \"150402\", \"150403\", \"150404\", \"150421\", \"150422\", \"150423\", \"150424\", \"150425\", \"150426\", \"150428\", \"150429\", \"150430\", \"150500\", \"150502\", \"150521\", \"150522\", \"150523\", \"150524\", \"150525\", \"150526\", \"150581\", \"150600\", \"150602\", \"150621\", \"150622\", \"150623\", \"150624\", \"150625\", \"150626\", \"150627\", \"150700\", \"150702\", \"150721\", \"150722\", \"150723\", \"150724\", \"150725\", \"150726\", \"150727\", \"150781\", \"150782\", \"150783\", \"150784\", \"150785\", \"150800\", \"150802\", \"150821\", \"150822\", \"150823\", \"150824\", \"150825\", \"150826\", \"150900\", \"150902\", \"150921\", \"150922\", \"150923\", \"150924\", \"150925\", \"150926\", \"150927\", \"150928\", \"150929\", \"150981\", \"152200\", \"152201\", \"152202\", \"152221\", \"152222\", \"152223\", \"152224\", \"152500\", \"152501\", \"152502\", \"152522\", \"152523\", \"152524\", \"152525\", \"152526\", \"152527\", \"152528\", \"152529\", \"152530\", \"152531\", \"152900\", \"152921\", \"152922\", \"152923\", \"210000\", \"210100\", \"210102\", \"210103\", \"210104\", \"210105\", \"210106\", \"210111\", \"210112\", \"210113\", \"210114\", \"210122\", \"210123\", \"210124\", \"210181\", \"210200\", \"210202\", \"210203\", \"210204\", \"210211\", \"210212\", \"210213\", \"210224\", \"210281\", \"210282\", \"210283\", \"210300\", \"210302\", \"210303\", \"210304\", \"210311\", \"210321\", \"210323\", \"210381\", \"210400\", \"210402\", \"210403\", \"210404\", \"210411\", \"210421\", \"210422\", \"210423\", \"210500\", \"210502\", \"210503\", \"210504\", \"210505\", \"210521\", \"210522\", \"210600\", \"210602\", \"210603\", \"210604\", \"210624\", \"210681\", \"210682\", \"210700\", \"210702\", \"210703\", \"210711\", \"210726\", \"210727\", \"210781\", \"210782\", \"210800\", \"210802\", \"210803\", \"210804\", \"210811\", \"210881\", \"210882\", \"210900\", \"210902\", \"210903\", \"210904\", \"210905\", \"210911\", \"210921\", \"210922\", \"211000\", \"211002\", \"211003\", \"211004\", \"211005\", \"211011\", \"211021\", \"211081\", \"211100\", \"211102\", \"211103\", \"211121\", \"211122\", \"211200\", \"211202\", \"211204\", \"211221\", \"211223\", \"211224\", \"211281\", \"211282\", \"211300\", \"211302\", \"211303\", \"211321\", \"211322\", \"211324\", \"211381\", \"211382\", \"211400\", \"211402\", \"211403\", \"211404\", \"211421\", \"211422\", \"211481\", \"220000\", \"220100\", \"220102\", \"220103\", \"220104\", \"220105\", \"220106\", \"220112\", \"220122\", \"220181\", \"220182\", \"220183\", \"220200\", \"220202\", \"220203\", \"220204\", \"220211\", \"220221\", \"220281\", \"220282\", \"220283\", \"220284\", \"220300\", \"220302\", \"220303\", \"220322\", \"220323\", \"220381\", \"220382\", \"220400\", \"220402\", \"220403\", \"220421\", \"220422\", \"220500\", \"220502\", \"220503\", \"220521\", \"220523\", \"220524\", \"220581\", \"220582\", \"220600\", \"220602\", \"220604\", \"220621\", \"220622\", \"220623\", \"220681\", \"220700\", \"220702\", \"220721\", \"220722\", \"220723\", \"220724\", \"220800\", \"220802\", \"220821\", \"220822\", \"220881\", \"220882\", \"222400\", \"222401\", \"222402\", \"222403\", \"222404\", \"222405\", \"222406\", \"222424\", \"222426\", \"230000\", \"230100\", \"230102\", \"230103\", \"230104\", \"230108\", \"230109\", \"230110\", \"230111\", \"230112\", \"230123\", \"230124\", \"230125\", \"230126\", \"230127\", \"230128\", \"230129\", \"230182\", \"230183\", \"230184\", \"230200\", \"230202\", \"230203\", \"230204\", \"230205\", \"230206\", \"230207\", \"230208\", \"230221\", \"230223\", \"230224\", \"230225\", \"230227\", \"230229\", \"230230\", \"230231\", \"230281\", \"230300\", \"230302\", \"230303\", \"230304\", \"230305\", \"230306\", \"230307\", \"230321\", \"230381\", \"230382\", \"230400\", \"230402\", \"230403\", \"230404\", \"230405\", \"230406\", \"230407\", \"230421\", \"230422\", \"230500\", \"230502\", \"230503\", \"230505\", \"230506\", \"230521\", \"230522\", \"230523\", \"230524\", \"230600\", \"230602\", \"230603\", \"230604\", \"230605\", \"230606\", \"230621\", \"230622\", \"230623\", \"230624\", \"230700\", \"230702\", \"230703\", \"230704\", \"230705\", \"230706\", \"230707\", \"230708\", \"230709\", \"230710\", \"230711\", \"230712\", \"230713\", \"230714\", \"230715\", \"230716\", \"230722\", \"230781\", \"230800\", \"230803\", \"230804\", \"230805\", \"230811\", \"230822\", \"230826\", \"230828\", \"230833\", \"230881\", \"230882\", \"230900\", \"230902\", \"230903\", \"230904\", \"230921\", \"231000\", \"231002\", \"231003\", \"231004\", \"231005\", \"231024\", \"231025\", \"231081\", \"231083\", \"231084\", \"231085\", \"231100\", \"231102\", \"231121\", \"231123\", \"231124\", \"231181\", \"231182\", \"231200\", \"231202\", \"231221\", \"231222\", \"231223\", \"231224\", \"231225\", \"231226\", \"231281\", \"231282\", \"231283\", \"232700\", \"232701\", \"232702\", \"232703\", \"232704\", \"232721\", \"232722\", \"232723\", \"310000\", \"310101\", \"310103\", \"310104\", \"310105\", \"310106\", \"310107\", \"310108\", \"310109\", \"310110\", \"310112\", \"310113\", \"310114\", \"310115\", \"310116\", \"310117\", \"310118\", \"310119\", \"310120\", \"310200\", \"310230\", \"320000\", \"320100\", \"320102\", \"320103\", \"320104\", \"320105\", \"320106\", \"320107\", \"320111\", \"320113\", \"320114\", \"320115\", \"320116\", \"320124\", \"320125\", \"320200\", \"320202\", \"320203\", \"320204\", \"320205\", \"320206\", \"320211\", \"320281\", \"320282\", \"320300\", \"320302\", \"320303\", \"320304\", \"320305\", \"320311\", \"320321\", \"320322\", \"320323\", \"320324\", \"320381\", \"320382\", \"320400\", \"320402\", \"320404\", \"320405\", \"320411\", \"320412\", \"320481\", \"320482\", \"320500\", \"320502\", \"320503\", \"320504\", \"320505\", \"320506\", \"320507\", \"320581\", \"320582\", \"320583\", \"320584\", \"320585\", \"320600\", \"320602\", \"320611\", \"320621\", \"320623\", \"320681\", \"320682\", \"320683\", \"320684\", \"320700\", \"320703\", \"320705\", \"320706\", \"320721\", \"320722\", \"320723\", \"320724\", \"320800\", \"320802\", \"320803\", \"320804\", \"320811\", \"320826\", \"320829\", \"320830\", \"320831\", \"320900\", \"320902\", \"320903\", \"320921\", \"320922\", \"320923\", \"320924\", \"320925\", \"320981\", \"320982\", \"321000\", \"321002\", \"321003\", \"321011\", \"321023\", \"321081\", \"321084\", \"321088\", \"321100\", \"321102\", \"321111\", \"321112\", \"321181\", \"321182\", \"321183\", \"321200\", \"321202\", \"321203\", \"321281\", \"321282\", \"321283\", \"321284\", \"321300\", \"321302\", \"321311\", \"321322\", \"321323\", \"321324\", \"330000\", \"330100\", \"330102\", \"330103\", \"330104\", \"330105\", \"330106\", \"330108\", \"330109\", \"330110\", \"330122\", \"330127\", \"330182\", \"330183\", \"330185\", \"330200\", \"330203\", \"330204\", \"330205\", \"330206\", \"330211\", \"330212\", \"330225\", \"330226\", \"330281\", \"330282\", \"330283\", \"330300\", \"330302\", \"330303\", \"330304\", \"330322\", \"330324\", \"330326\", \"330327\", \"330328\", \"330329\", \"330381\", \"330382\", \"330400\", \"330402\", \"330411\", \"330421\", \"330424\", \"330481\", \"330482\", \"330483\", \"330500\", \"330502\", \"330503\", \"330521\", \"330522\", \"330523\", \"330600\", \"330602\", \"330621\", \"330624\", \"330681\", \"330682\", \"330683\", \"330700\", \"330702\", \"330703\", \"330723\", \"330726\", \"330727\", \"330781\", \"330782\", \"330783\", \"330784\", \"330800\", \"330802\", \"330803\", \"330822\", \"330824\", \"330825\", \"330881\", \"330900\", \"330902\", \"330903\", \"330921\", \"330922\", \"331000\", \"331002\", \"331003\", \"331004\", \"331021\", \"331022\", \"331023\", \"331024\", \"331081\", \"331082\", \"331100\", \"331102\", \"331121\", \"331122\", \"331123\", \"331124\", \"331125\", \"331126\", \"331127\", \"331181\", \"340000\", \"340100\", \"340102\", \"340103\", \"340104\", \"340111\", \"340121\", \"340122\", \"340123\", \"340200\", \"340202\", \"340203\", \"340207\", \"340208\", \"340221\", \"340222\", \"340223\", \"340300\", \"340302\", \"340303\", \"340304\", \"340311\", \"340321\", \"340322\", \"340323\", \"340400\", \"340402\", \"340403\", \"340404\", \"340405\", \"340406\", \"340421\", \"340500\", \"340502\", \"340503\", \"340504\", \"340521\", \"340600\", \"340602\", \"340603\", \"340604\", \"340621\", \"340700\", \"340702\", \"340703\", \"340711\", \"340721\", \"340800\", \"340802\", \"340803\", \"340811\", \"340822\", \"340823\", \"340824\", \"340825\", \"340826\", \"340827\", \"340828\", \"340881\", \"341000\", \"341002\", \"341003\", \"341004\", \"341021\", \"341022\", \"341023\", \"341024\", \"341100\", \"341102\", \"341103\", \"341122\", \"341124\", \"341125\", \"341126\", \"341181\", \"341182\", \"341200\", \"341202\", \"341203\", \"341204\", \"341221\", \"341222\", \"341225\", \"341226\", \"341282\", \"341300\", \"341302\", \"341321\", \"341322\", \"341323\", \"341324\", \"341400\", \"341402\", \"341421\", \"341422\", \"341423\", \"341424\", \"341500\", \"341502\", \"341503\", \"341521\", \"341522\", \"341523\", \"341524\", \"341525\", \"341600\", \"341602\", \"341621\", \"341622\", \"341623\", \"341700\", \"341702\", \"341721\", \"341722\", \"341723\", \"341800\", \"341802\", \"341821\", \"341822\", \"341823\", \"341824\", \"341825\", \"341881\", \"350000\", \"350100\", \"350102\", \"350103\", \"350104\", \"350105\", \"350111\", \"350121\", \"350122\", \"350123\", \"350124\", \"350125\", \"350128\", \"350181\", \"350182\", \"350200\", \"350203\", \"350205\", \"350206\", \"350211\", \"350212\", \"350213\", \"350300\", \"350302\", \"350303\", \"350304\", \"350305\", \"350322\", \"350400\", \"350402\", \"350403\", \"350421\", \"350423\", \"350424\", \"350425\", \"350426\", \"350427\", \"350428\", \"350429\", \"350430\", \"350481\", \"350500\", \"350502\", \"350503\", \"350504\", \"350505\", \"350521\", \"350524\", \"350525\", \"350526\", \"350527\", \"350581\", \"350582\", \"350583\", \"350600\", \"350602\", \"350603\", \"350622\", \"350623\", \"350624\", \"350625\", \"350626\", \"350627\", \"350628\", \"350629\", \"350681\", \"350700\", \"350702\", \"350721\", \"350722\", \"350723\", \"350724\", \"350725\", \"350781\", \"350782\", \"350783\", \"350784\", \"350800\", \"350802\", \"350821\", \"350822\", \"350823\", \"350824\", \"350825\", \"350881\", \"350900\", \"350902\", \"350921\", \"350922\", \"350923\", \"350924\", \"350925\", \"350926\", \"350981\", \"350982\", \"360000\", \"360100\", \"360102\", \"360103\", \"360104\", \"360105\", \"360111\", \"360121\", \"360122\", \"360123\", \"360124\", \"360200\", \"360202\", \"360203\", \"360222\", \"360281\", \"360300\", \"360302\", \"360313\", \"360321\", \"360322\", \"360323\", \"360400\", \"360402\", \"360403\", \"360421\", \"360423\", \"360424\", \"360425\", \"360426\", \"360427\", \"360428\", \"360429\", \"360430\", \"360481\", \"360500\", \"360502\", \"360521\", \"360600\", \"360602\", \"360622\", \"360681\", \"360700\", \"360702\", \"360721\", \"360722\", \"360723\", \"360724\", \"360725\", \"360726\", \"360727\", \"360728\", \"360729\", \"360730\", \"360731\", \"360732\", \"360733\", \"360734\", \"360735\", \"360781\", \"360782\", \"360800\", \"360802\", \"360803\", \"360821\", \"360822\", \"360823\", \"360824\", \"360825\", \"360826\", \"360827\", \"360828\", \"360829\", \"360830\", \"360881\", \"360900\", \"360902\", \"360921\", \"360922\", \"360923\", \"360924\", \"360925\", \"360926\", \"360981\", \"360982\", \"360983\", \"361000\", \"361002\", \"361021\", \"361022\", \"361023\", \"361024\", \"361025\", \"361026\", \"361027\", \"361028\", \"361029\", \"361030\", \"361100\", \"361102\", \"361121\", \"361122\", \"361123\", \"361124\", \"361125\", \"361126\", \"361127\", \"361128\", \"361129\", \"361130\", \"361181\", \"370000\", \"370100\", \"370102\", \"370103\", \"370104\", \"370105\", \"370112\", \"370113\", \"370124\", \"370125\", \"370126\", \"370181\", \"370200\", \"370202\", \"370203\", \"370205\", \"370211\", \"370212\", \"370213\", \"370214\", \"370281\", \"370282\", \"370283\", \"370284\", \"370285\", \"370300\", \"370302\", \"370303\", \"370304\", \"370305\", \"370306\", \"370321\", \"370322\", \"370323\", \"370400\", \"370402\", \"370403\", \"370404\", \"370405\", \"370406\", \"370481\", \"370500\", \"370502\", \"370503\", \"370521\", \"370522\", \"370523\", \"370600\", \"370602\", \"370611\", \"370612\", \"370613\", \"370634\", \"370681\", \"370682\", \"370683\", \"370684\", \"370685\", \"370686\", \"370687\", \"370700\", \"370702\", \"370703\", \"370704\", \"370705\", \"370724\", \"370725\", \"370781\", \"370782\", \"370783\", \"370784\", \"370785\", \"370786\", \"370800\", \"370802\", \"370811\", \"370826\", \"370827\", \"370828\", \"370829\", \"370830\", \"370831\", \"370832\", \"370881\", \"370882\", \"370883\", \"370900\", \"370902\", \"370903\", \"370921\", \"370923\", \"370982\", \"370983\", \"371000\", \"371002\", \"371081\", \"371082\", \"371083\", \"371100\", \"371102\", \"371103\", \"371121\", \"371122\", \"371200\", \"371202\", \"371203\", \"371300\", \"371302\", \"371311\", \"371312\", \"371321\", \"371322\", \"371323\", \"371324\", \"371325\", \"371326\", \"371327\", \"371328\", \"371329\", \"371400\", \"371402\", \"371421\", \"371422\", \"371423\", \"371424\", \"371425\", \"371426\", \"371427\", \"371428\", \"371481\", \"371482\", \"371500\", \"371502\", \"371521\", \"371522\", \"371523\", \"371524\", \"371525\", \"371526\", \"371581\", \"371600\", \"371602\", \"371621\", \"371622\", \"371623\", \"371624\", \"371625\", \"371626\", \"371700\", \"371702\", \"371721\", \"371722\", \"371723\", \"371724\", \"371725\", \"371726\", \"371727\", \"371728\", \"410000\", \"410100\", \"410102\", \"410103\", \"410104\", \"410105\", \"410106\", \"410108\", \"410122\", \"410181\", \"410182\", \"410183\", \"410184\", \"410185\", \"410200\", \"410202\", \"410203\", \"410204\", \"410205\", \"410211\", \"410221\", \"410222\", \"410223\", \"410224\", \"410225\", \"410300\", \"410302\", \"410303\", \"410304\", \"410305\", \"410306\", \"410307\", \"410322\", \"410323\", \"410324\", \"410325\", \"410326\", \"410327\", \"410328\", \"410329\", \"410381\", \"410400\", \"410402\", \"410403\", \"410404\", \"410411\", \"410421\", \"410422\", \"410423\", \"410425\", \"410481\", \"410482\", \"410500\", \"410502\", \"410503\", \"410505\", \"410506\", \"410522\", \"410523\", \"410526\", \"410527\", \"410581\", \"410600\", \"410602\", \"410603\", \"410611\", \"410621\", \"410622\", \"410700\", \"410702\", \"410703\", \"410704\", \"410711\", \"410721\", \"410724\", \"410725\", \"410726\", \"410727\", \"410728\", \"410781\", \"410782\", \"410800\", \"410802\", \"410803\", \"410804\", \"410811\", \"410821\", \"410822\", \"410823\", \"410825\", \"410881\", \"410882\", \"410883\", \"410900\", \"410902\", \"410922\", \"410923\", \"410926\", \"410927\", \"410928\", \"411000\", \"411002\", \"411023\", \"411024\", \"411025\", \"411081\", \"411082\", \"411100\", \"411102\", \"411103\", \"411104\", \"411121\", \"411122\", \"411200\", \"411202\", \"411221\", \"411222\", \"411224\", \"411281\", \"411282\", \"411300\", \"411302\", \"411303\", \"411321\", \"411322\", \"411323\", \"411324\", \"411325\", \"411326\", \"411327\", \"411328\", \"411329\", \"411330\", \"411381\", \"411400\", \"411402\", \"411403\", \"411421\", \"411422\", \"411423\", \"411424\", \"411425\", \"411426\", \"411481\", \"411500\", \"411502\", \"411503\", \"411521\", \"411522\", \"411523\", \"411524\", \"411525\", \"411526\", \"411527\", \"411528\", \"411600\", \"411602\", \"411621\", \"411622\", \"411623\", \"411624\", \"411625\", \"411626\", \"411627\", \"411628\", \"411681\", \"411700\", \"411702\", \"411721\", \"411722\", \"411723\", \"411724\", \"411725\", \"411726\", \"411727\", \"411728\", \"411729\", \"420000\", \"420100\", \"420102\", \"420103\", \"420104\", \"420105\", \"420106\", \"420107\", \"420111\", \"420112\", \"420113\", \"420114\", \"420115\", \"420116\", \"420117\", \"420200\", \"420202\", \"420203\", \"420204\", \"420205\", \"420222\", \"420281\", \"420300\", \"420302\", \"420303\", \"420321\", \"420322\", \"420323\", \"420324\", \"420325\", \"420381\", \"420500\", \"420502\", \"420503\", \"420504\", \"420505\", \"420506\", \"420525\", \"420526\", \"420527\", \"420528\", \"420529\", \"420581\", \"420582\", \"420583\", \"420600\", \"420602\", \"420606\", \"420607\", \"420624\", \"420625\", \"420626\", \"420682\", \"420683\", \"420684\", \"420700\", \"420702\", \"420703\", \"420704\", \"420800\", \"420802\", \"420804\", \"420821\", \"420822\", \"420881\", \"420900\", \"420902\", \"420921\", \"420922\", \"420923\", \"420981\", \"420982\", \"420984\", \"421000\", \"421002\", \"421003\", \"421022\", \"421023\", \"421024\", \"421081\", \"421083\", \"421087\", \"421100\", \"421102\", \"421121\", \"421122\", \"421123\", \"421124\", \"421125\", \"421126\", \"421127\", \"421181\", \"421182\", \"421200\", \"421202\", \"421221\", \"421222\", \"421223\", \"421224\", \"421281\", \"421300\", \"421302\", \"421381\", \"422800\", \"422801\", \"422802\", \"422822\", \"422823\", \"422825\", \"422826\", \"422827\", \"422828\", \"429000\", \"429004\", \"429005\", \"429006\", \"429021\", \"430000\", \"430100\", \"430102\", \"430103\", \"430104\", \"430105\", \"430111\", \"430121\", \"430122\", \"430124\", \"430181\", \"430200\", \"430202\", \"430203\", \"430204\", \"430211\", \"430221\", \"430223\", \"430224\", \"430225\", \"430281\", \"430300\", \"430302\", \"430304\", \"430321\", \"430381\", \"430382\", \"430400\", \"430405\", \"430406\", \"430407\", \"430408\", \"430412\", \"430421\", \"430422\", \"430423\", \"430424\", \"430426\", \"430481\", \"430482\", \"430500\", \"430502\", \"430503\", \"430511\", \"430521\", \"430522\", \"430523\", \"430524\", \"430525\", \"430527\", \"430528\", \"430529\", \"430581\", \"430600\", \"430602\", \"430603\", \"430611\", \"430621\", \"430623\", \"430624\", \"430626\", \"430681\", \"430682\", \"430700\", \"430702\", \"430703\", \"430721\", \"430722\", \"430723\", \"430724\", \"430725\", \"430726\", \"430781\", \"430800\", \"430802\", \"430811\", \"430821\", \"430822\", \"430900\", \"430902\", \"430903\", \"430921\", \"430922\", \"430923\", \"430981\", \"431000\", \"431002\", \"431003\", \"431021\", \"431022\", \"431023\", \"431024\", \"431025\", \"431026\", \"431027\", \"431028\", \"431081\", \"431100\", \"431102\", \"431103\", \"431121\", \"431122\", \"431123\", \"431124\", \"431125\", \"431126\", \"431127\", \"431128\", \"431129\", \"431200\", \"431202\", \"431221\", \"431222\", \"431223\", \"431224\", \"431225\", \"431226\", \"431227\", \"431228\", \"431229\", \"431230\", \"431281\", \"431300\", \"431302\", \"431321\", \"431322\", \"431381\", \"431382\", \"433100\", \"433101\", \"433122\", \"433123\", \"433124\", \"433125\", \"433126\", \"433127\", \"433130\", \"440000\", \"440100\", \"440103\", \"440104\", \"440105\", \"440106\", \"440111\", \"440112\", \"440113\", \"440114\", \"440115\", \"440116\", \"440183\", \"440184\", \"440200\", \"440203\", \"440204\", \"440205\", \"440222\", \"440224\", \"440229\", \"440232\", \"440233\", \"440281\", \"440282\", \"440300\", \"440303\", \"440304\", \"440305\", \"440306\", \"440307\", \"440308\", \"440400\", \"440402\", \"440403\", \"440404\", \"440500\", \"440507\", \"440511\", \"440512\", \"440513\", \"440514\", \"440515\", \"440523\", \"440600\", \"440604\", \"440605\", \"440606\", \"440607\", \"440608\", \"440700\", \"440703\", \"440704\", \"440705\", \"440781\", \"440783\", \"440784\", \"440785\", \"440800\", \"440802\", \"440803\", \"440804\", \"440811\", \"440823\", \"440825\", \"440881\", \"440882\", \"440883\", \"440900\", \"440902\", \"440903\", \"440923\", \"440981\", \"440982\", \"440983\", \"441200\", \"441202\", \"441203\", \"441223\", \"441224\", \"441225\", \"441226\", \"441283\", \"441284\", \"441300\", \"441302\", \"441303\", \"441322\", \"441323\", \"441324\", \"441400\", \"441402\", \"441421\", \"441422\", \"441423\", \"441424\", \"441426\", \"441427\", \"441481\", \"441500\", \"441502\", \"441521\", \"441523\", \"441581\", \"441600\", \"441602\", \"441621\", \"441622\", \"441623\", \"441624\", \"441625\", \"441700\", \"441702\", \"441721\", \"441723\", \"441781\", \"441800\", \"441802\", \"441821\", \"441823\", \"441825\", \"441826\", \"441827\", \"441881\", \"441882\", \"441900\", \"442000\", \"445100\", \"445102\", \"445121\", \"445122\", \"445200\", \"445202\", \"445221\", \"445222\", \"445224\", \"445281\", \"445300\", \"445302\", \"445321\", \"445322\", \"445323\", \"445381\", \"450000\", \"450100\", \"450102\", \"450103\", \"450105\", \"450107\", \"450108\", \"450109\", \"450122\", \"450123\", \"450124\", \"450125\", \"450126\", \"450127\", \"450200\", \"450202\", \"450203\", \"450204\", \"450205\", \"450221\", \"450222\", \"450223\", \"450224\", \"450225\", \"450226\", \"450300\", \"450302\", \"450303\", \"450304\", \"450305\", \"450311\", \"450321\", \"450322\", \"450323\", \"450324\", \"450325\", \"450326\", \"450327\", \"450328\", \"450329\", \"450330\", \"450331\", \"450332\", \"450400\", \"450403\", \"450404\", \"450405\", \"450421\", \"450422\", \"450423\", \"450481\", \"450500\", \"450502\", \"450503\", \"450512\", \"450521\", \"450600\", \"450602\", \"450603\", \"450621\", \"450681\", \"450700\", \"450702\", \"450703\", \"450721\", \"450722\", \"450800\", \"450802\", \"450803\", \"450804\", \"450821\", \"450881\", \"450900\", \"450902\", \"450921\", \"450922\", \"450923\", \"450924\", \"450981\", \"451000\", \"451002\", \"451021\", \"451022\", \"451023\", \"451024\", \"451025\", \"451026\", \"451027\", \"451028\", \"451029\", \"451030\", \"451031\", \"451100\", \"451102\", \"451121\", \"451122\", \"451123\", \"451200\", \"451202\", \"451221\", \"451222\", \"451223\", \"451224\", \"451225\", \"451226\", \"451227\", \"451228\", \"451229\", \"451281\", \"451300\", \"451302\", \"451321\", \"451322\", \"451323\", \"451324\", \"451381\", \"451400\", \"451402\", \"451421\", \"451422\", \"451423\", \"451424\", \"451425\", \"451481\", \"460000\", \"460100\", \"460105\", \"460106\", \"460107\", \"460108\", \"460200\", \"469000\", \"469001\", \"469002\", \"469003\", \"469005\", \"469006\", \"469007\", \"469025\", \"469026\", \"469027\", \"469028\", \"469030\", \"469031\", \"469033\", \"469034\", \"469035\", \"469036\", \"469037\", \"469038\", \"469039\", \"500000\", \"500101\", \"500102\", \"500103\", \"500104\", \"500105\", \"500106\", \"500107\", \"500108\", \"500109\", \"500110\", \"500111\", \"500112\", \"500113\", \"500114\", \"500115\", \"500116\", \"500117\", \"500118\", \"500119\", \"500200\", \"500222\", \"500223\", \"500224\", \"500225\", \"500226\", \"500227\", \"500228\", \"500229\", \"500230\", \"500231\", \"500232\", \"500233\", \"500234\", \"500235\", \"500236\", \"500237\", \"500238\", \"500240\", \"500241\", \"500242\", \"500243\", \"510000\", \"510100\", \"510104\", \"510105\", \"510106\", \"510107\", \"510108\", \"510112\", \"510113\", \"510114\", \"510115\", \"510121\", \"510122\", \"510124\", \"510129\", \"510131\", \"510132\", \"510181\", \"510182\", \"510183\", \"510184\", \"510300\", \"510302\", \"510303\", \"510304\", \"510311\", \"510321\", \"510322\", \"510400\", \"510402\", \"510403\", \"510411\", \"510421\", \"510422\", \"510500\", \"510502\", \"510503\", \"510504\", \"510521\", \"510522\", \"510524\", \"510525\", \"510600\", \"510603\", \"510623\", \"510626\", \"510681\", \"510682\", \"510683\", \"510700\", \"510703\", \"510704\", \"510722\", \"510723\", \"510724\", \"510725\", \"510726\", \"510727\", \"510781\", \"510800\", \"510802\", \"510811\", \"510812\", \"510821\", \"510822\", \"510823\", \"510824\", \"510900\", \"510903\", \"510904\", \"510921\", \"510922\", \"510923\", \"511000\", \"511002\", \"511011\", \"511024\", \"511025\", \"511028\", \"511100\", \"511102\", \"511111\", \"511112\", \"511113\", \"511123\", \"511124\", \"511126\", \"511129\", \"511132\", \"511133\", \"511181\", \"511300\", \"511302\", \"511303\", \"511304\", \"511321\", \"511322\", \"511323\", \"511324\", \"511325\", \"511381\", \"511400\", \"511402\", \"511421\", \"511422\", \"511423\", \"511424\", \"511425\", \"511500\", \"511502\", \"511521\", \"511522\", \"511523\", \"511524\", \"511525\", \"511526\", \"511527\", \"511528\", \"511529\", \"511600\", \"511602\", \"511621\", \"511622\", \"511623\", \"511681\", \"511700\", \"511702\", \"511721\", \"511722\", \"511723\", \"511724\", \"511725\", \"511781\", \"511800\", \"511802\", \"511821\", \"511822\", \"511823\", \"511824\", \"511825\", \"511826\", \"511827\", \"511900\", \"511902\", \"511921\", \"511922\", \"511923\", \"512000\", \"512002\", \"512021\", \"512022\", \"512081\", \"513200\", \"513221\", \"513222\", \"513223\", \"513224\", \"513225\", \"513226\", \"513227\", \"513228\", \"513229\", \"513230\", \"513231\", \"513232\", \"513233\", \"513300\", \"513321\", \"513322\", \"513323\", \"513324\", \"513325\", \"513326\", \"513327\", \"513328\", \"513329\", \"513330\", \"513331\", \"513332\", \"513333\", \"513334\", \"513335\", \"513336\", \"513337\", \"513338\", \"513400\", \"513401\", \"513422\", \"513423\", \"513424\", \"513425\", \"513426\", \"513427\", \"513428\", \"513429\", \"513430\", \"513431\", \"513432\", \"513433\", \"513434\", \"513435\", \"513436\", \"513437\", \"520000\", \"520100\", \"520102\", \"520103\", \"520111\", \"520112\", \"520113\", \"520114\", \"520121\", \"520122\", \"520123\", \"520181\", \"520200\", \"520201\", \"520203\", \"520221\", \"520222\", \"520300\", \"520302\", \"520303\", \"520321\", \"520322\", \"520323\", \"520324\", \"520325\", \"520326\", \"520327\", \"520328\", \"520329\", \"520330\", \"520381\", \"520382\", \"520400\", \"520402\", \"520421\", \"520422\", \"520423\", \"520424\", \"520425\", \"522200\", \"522201\", \"522222\", \"522223\", \"522224\", \"522225\", \"522226\", \"522227\", \"522228\", \"522229\", \"522230\", \"522300\", \"522301\", \"522322\", \"522323\", \"522324\", \"522325\", \"522326\", \"522327\", \"522328\", \"522400\", \"522401\", \"522422\", \"522423\", \"522424\", \"522425\", \"522426\", \"522427\", \"522428\", \"522600\", \"522601\", \"522622\", \"522623\", \"522624\", \"522625\", \"522626\", \"522627\", \"522628\", \"522629\", \"522630\", \"522631\", \"522632\", \"522633\", \"522634\", \"522635\", \"522636\", \"522700\", \"522701\", \"522702\", \"522722\", \"522723\", \"522725\", \"522726\", \"522727\", \"522728\", \"522729\", \"522730\", \"522731\", \"522732\", \"530000\", \"530100\", \"530102\", \"530103\", \"530111\", \"530112\", \"530113\", \"530121\", \"530122\", \"530124\", \"530125\", \"530126\", \"530127\", \"530128\", \"530129\", \"530181\", \"530300\", \"530302\", \"530321\", \"530322\", \"530323\", \"530324\", \"530325\", \"530326\", \"530328\", \"530381\", \"530400\", \"530402\", \"530421\", \"530422\", \"530423\", \"530424\", \"530425\", \"530426\", \"530427\", \"530428\", \"530500\", \"530502\", \"530521\", \"530522\", \"530523\", \"530524\", \"530600\", \"530602\", \"530621\", \"530622\", \"530623\", \"530624\", \"530625\", \"530626\", \"530627\", \"530628\", \"530629\", \"530630\", \"530700\", \"530702\", \"530721\", \"530722\", \"530723\", \"530724\", \"530800\", \"530802\", \"530821\", \"530822\", \"530823\", \"530824\", \"530825\", \"530826\", \"530827\", \"530828\", \"530829\", \"530900\", \"530902\", \"530921\", \"530922\", \"530923\", \"530924\", \"530925\", \"530926\", \"530927\", \"532300\", \"532301\", \"532322\", \"532323\", \"532324\", \"532325\", \"532326\", \"532327\", \"532328\", \"532329\", \"532331\", \"532500\", \"532501\", \"532502\", \"532522\", \"532523\", \"532524\", \"532525\", \"532526\", \"532527\", \"532528\", \"532529\", \"532530\", \"532531\", \"532532\", \"532600\", \"532621\", \"532622\", \"532623\", \"532624\", \"532625\", \"532626\", \"532627\", \"532628\", \"532800\", \"532801\", \"532822\", \"532823\", \"532900\", \"532901\", \"532922\", \"532923\", \"532924\", \"532925\", \"532926\", \"532927\", \"532928\", \"532929\", \"532930\", \"532931\", \"532932\", \"533100\", \"533102\", \"533103\", \"533122\", \"533123\", \"533124\", \"533300\", \"533321\", \"533323\", \"533324\", \"533325\", \"533400\", \"533421\", \"533422\", \"533423\", \"540000\", \"540100\", \"540102\", \"540121\", \"540122\", \"540123\", \"540124\", \"540125\", \"540126\", \"540127\", \"542100\", \"542121\", \"542122\", \"542123\", \"542124\", \"542125\", \"542126\", \"542127\", \"542128\", \"542129\", \"542132\", \"542133\", \"542200\", \"542221\", \"542222\", \"542223\", \"542224\", \"542225\", \"542226\", \"542227\", \"542228\", \"542229\", \"542231\", \"542232\", \"542233\", \"542300\", \"542301\", \"542322\", \"542323\", \"542324\", \"542325\", \"542326\", \"542327\", \"542328\", \"542329\", \"542330\", \"542331\", \"542332\", \"542333\", \"542334\", \"542335\", \"542336\", \"542337\", \"542338\", \"542400\", \"542421\", \"542422\", \"542423\", \"542424\", \"542425\", \"542426\", \"542427\", \"542428\", \"542429\", \"542430\", \"542500\", \"542521\", \"542522\", \"542523\", \"542524\", \"542525\", \"542526\", \"542527\", \"542600\", \"542621\", \"542622\", \"542623\", \"542624\", \"542625\", \"542626\", \"542627\", \"610000\", \"610100\", \"610102\", \"610103\", \"610104\", \"610111\", \"610112\", \"610113\", \"610114\", \"610115\", \"610116\", \"610122\", \"610124\", \"610125\", \"610126\", \"610200\", \"610202\", \"610203\", \"610204\", \"610222\", \"610300\", \"610302\", \"610303\", \"610304\", \"610322\", \"610323\", \"610324\", \"610326\", \"610327\", \"610328\", \"610329\", \"610330\", \"610331\", \"610400\", \"610402\", \"610403\", \"610404\", \"610422\", \"610423\", \"610424\", \"610425\", \"610426\", \"610427\", \"610428\", \"610429\", \"610430\", \"610431\", \"610481\", \"610500\", \"610502\", \"610521\", \"610522\", \"610523\", \"610524\", \"610525\", \"610526\", \"610527\", \"610528\", \"610581\", \"610582\", \"610600\", \"610602\", \"610621\", \"610622\", \"610623\", \"610624\", \"610625\", \"610626\", \"610627\", \"610628\", \"610629\", \"610630\", \"610631\", \"610632\", \"610700\", \"610702\", \"610721\", \"610722\", \"610723\", \"610724\", \"610725\", \"610726\", \"610727\", \"610728\", \"610729\", \"610730\", \"610800\", \"610802\", \"610821\", \"610822\", \"610823\", \"610824\", \"610825\", \"610826\", \"610827\", \"610828\", \"610829\", \"610830\", \"610831\", \"610900\", \"610902\", \"610921\", \"610922\", \"610923\", \"610924\", \"610925\", \"610926\", \"610927\", \"610928\", \"610929\", \"611000\", \"611002\", \"611021\", \"611022\", \"611023\", \"611024\", \"611025\", \"611026\", \"620000\", \"620100\", \"620102\", \"620103\", \"620104\", \"620105\", \"620111\", \"620121\", \"620122\", \"620123\", \"620200\", \"620300\", \"620302\", \"620321\", \"620400\", \"620402\", \"620403\", \"620421\", \"620422\", \"620423\", \"620500\", \"620502\", \"620503\", \"620521\", \"620522\", \"620523\", \"620524\", \"620525\", \"620600\", \"620602\", \"620621\", \"620622\", \"620623\", \"620700\", \"620702\", \"620721\", \"620722\", \"620723\", \"620724\", \"620725\", \"620800\", \"620802\", \"620821\", \"620822\", \"620823\", \"620824\", \"620825\", \"620826\", \"620900\", \"620902\", \"620921\", \"620922\", \"620923\", \"620924\", \"620981\", \"620982\", \"621000\", \"621002\", \"621021\", \"621022\", \"621023\", \"621024\", \"621025\", \"621026\", \"621027\", \"621100\", \"621102\", \"621121\", \"621122\", \"621123\", \"621124\", \"621125\", \"621126\", \"621200\", \"621202\", \"621221\", \"621222\", \"621223\", \"621224\", \"621225\", \"621226\", \"621227\", \"621228\", \"622900\", \"622901\", \"622921\", \"622922\", \"622923\", \"622924\", \"622925\", \"622926\", \"622927\", \"623000\", \"623001\", \"623021\", \"623022\", \"623023\", \"623024\", \"623025\", \"623026\", \"623027\", \"630000\", \"630100\", \"630102\", \"630103\", \"630104\", \"630105\", \"630121\", \"630122\", \"630123\", \"632100\", \"632121\", \"632122\", \"632123\", \"632126\", \"632127\", \"632128\", \"632200\", \"632221\", \"632222\", \"632223\", \"632224\", \"632300\", \"632321\", \"632322\", \"632323\", \"632324\", \"632500\", \"632521\", \"632522\", \"632523\", \"632524\", \"632525\", \"632600\", \"632621\", \"632622\", \"632623\", \"632624\", \"632625\", \"632626\", \"632700\", \"632721\", \"632722\", \"632723\", \"632724\", \"632725\", \"632726\", \"632800\", \"632801\", \"632802\", \"632821\", \"632822\", \"632823\", \"640000\", \"640100\", \"640104\", \"640105\", \"640106\", \"640121\", \"640122\", \"640181\", \"640200\", \"640202\", \"640205\", \"640221\", \"640300\", \"640302\", \"640323\", \"640324\", \"640381\", \"640400\", \"640402\", \"640422\", \"640423\", \"640424\", \"640425\", \"640500\", \"640502\", \"640521\", \"640522\", \"650000\", \"650100\", \"650102\", \"650103\", \"650104\", \"650105\", \"650106\", \"650107\", \"650108\", \"650121\", \"650200\", \"650202\", \"650203\", \"650204\", \"650205\", \"652100\", \"652101\", \"652122\", \"652123\", \"652200\", \"652201\", \"652222\", \"652223\", \"652300\", \"652301\", \"652302\", \"652303\", \"652323\", \"652324\", \"652325\", \"652327\", \"652328\", \"652700\", \"652701\", \"652722\", \"652723\", \"652800\", \"652801\", \"652822\", \"652823\", \"652824\", \"652825\", \"652826\", \"652827\", \"652828\", \"652829\", \"652900\", \"652901\", \"652922\", \"652923\", \"652924\", \"652925\", \"652926\", \"652927\", \"652928\", \"652929\", \"653000\", \"653001\", \"653022\", \"653023\", \"653024\", \"653100\", \"653101\", \"653121\", \"653122\", \"653123\", \"653124\", \"653125\", \"653126\", \"653127\", \"653128\", \"653129\", \"653130\", \"653131\", \"653200\", \"653201\", \"653221\", \"653222\", \"653223\", \"653224\", \"653225\", \"653226\", \"653227\", \"654000\", \"654002\", \"654003\", \"654021\", \"654022\", \"654023\", \"654024\", \"654025\", \"654026\", \"654027\", \"654028\", \"654200\", \"654201\", \"654202\", \"654221\", \"654223\", \"654224\", \"654225\", \"654226\", \"654300\", \"654301\", \"654321\", \"654322\", \"654323\", \"654324\", \"654325\", \"654326\", \"659000\", \"659001\", \"659002\", \"659003\", \"659004\", \"710000\", \"810000\", \"820000\"};\n\n    @Deprecated\n    public String getValidSsn(BaseProviders faker) {\n        return generateValid(faker);\n    }\n\n    /**\n     * Generate a valid Zh_CN Id numbers\n     *\n     * @param faker a Faker instance for generating Chinese ID numbers\n     * @return a Chinese ID number string\n     */\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        RandomService rand = faker.random();\n        String loc = faker.options().option(LOCATIONS);\n        final int dayLength = 8;\n        final int locLength = loc.length();\n        final char[] res = new char[locLength + dayLength + 3];\n        for (int i = 0; i < locLength; i++) {\n            res[i] = loc.charAt(i);\n        }\n\n        fillBirthday(res, locLength, birthday);\n        res[locLength + dayLength] = (char)('0' + rand.nextInt(10));\n        res[locLength + dayLength + 1] = (char)('0' + rand.nextInt(10));\n        res[locLength + dayLength + 2] = (char)('0' + rand.nextInt(10));\n        return new PersonIdNumber(idNumber(res), birthday, gender(faker, request));\n    }\n\n    static String idNumber(char[] res) {\n        int count = 0;\n        count += (res[0] - '0') * 7;\n        count += (res[1] - '0') * 9;\n        count += (res[2] - '0') * 10;\n        count += (res[3] - '0') * 5;\n        count += (res[4] - '0') * 8;\n        count += (res[5] - '0') * 4;\n        count += (res[6] - '0') * 2;\n        count += (res[7] - '0');\n        count += (res[8] - '0') * 6;\n        count += (res[9] - '0') * 3;\n        count += (res[10] - '0') * 7;\n        count += (res[11] - '0') * 9;\n        count += (res[12] - '0') * 10;\n        count += (res[13] - '0') * 5;\n        count += (res[14] - '0') * 8;\n        count += (res[15] - '0') * 4;\n        count += (res[16] - '0') * 2;\n        count = (12 - count % 11) % 11;\n        return count == 10 ?\n            String.valueOf(res) + \"X\" :\n            String.valueOf(res) + count;\n    }\n\n    private void fillBirthday(char[] res, int offset, LocalDate birthday) {\n        int year = birthday.getYear();\n        int month = birthday.getMonthValue();\n        int day = birthday.getDayOfMonth();\n        res[offset] = (char)('0' + year / 1000);\n        res[offset + 1] = (char)('0' + (year % 1000) / 100);\n        res[offset + 2] = (char)('0' + (year % 100) / 10);\n        res[offset + 3] = (char)('0' + year % 10);\n        res[offset + 4] = (char)('0' + month / 10);\n        res[offset + 5] = (char)('0' + month % 10);\n        res[offset + 6] = (char)('0' + day / 10);\n        res[offset + 7] = (char)('0' + day % 10);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return generateValid(faker) + \"42\";\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final String[] LOCATIONS = {\"110000\", \"110101\", \"110102\", \"110103\", \"110104\", \"110105\", \"110106\", \"110107\", \"110108\", \"110109\", \"110111\", \"110112\", \"110113\", \"110114\", \"110115\", \"110116\", \"110117\", \"110200\", \"110228\", \"110229\", \"120000\", \"120101\", \"120102\", \"120103\", \"120104\", \"120105\", \"120106\", \"120107\", \"120108\", \"120109\", \"120110\", \"120111\", \"120112\", \"120113\", \"120114\", \"120115\", \"120200\", \"120221\", \"120223\", \"120225\", \"130000\", \"130100\", \"130102\", \"130103\", \"130104\", \"130105\", \"130107\", \"130108\", \"130121\", \"130123\", \"130124\", \"130125\", \"130126\", \"130127\", \"130128\", \"130129\", \"130130\", \"130131\", \"130132\", \"130133\", \"130181\", \"130182\", \"130183\", \"130184\", \"130185\", \"130200\", \"130202\", \"130203\", \"130204\", \"130205\", \"130207\", \"130208\", \"130223\", \"130224\", \"130225\", \"130227\", \"130229\", \"130230\", \"130281\", \"130283\", \"130300\", \"130302\", \"130303\", \"130304\", \"130321\", \"130322\", \"130323\", \"130324\", \"130400\", \"130402\", \"130403\", \"130404\", \"130406\", \"130421\", \"130423\", \"130424\", \"130425\", \"130426\", \"130427\", \"130428\", \"130429\", \"130430\", \"130431\", \"130432\", \"130433\", \"130434\", \"130435\", \"130481\", \"130500\", \"130502\", \"130503\", \"130521\", \"130522\", \"130523\", \"130524\", \"130525\", \"130526\", \"130527\", \"130528\", \"130529\", \"130530\", \"130531\", \"130532\", \"130533\", \"130534\", \"130535\", \"130581\", \"130582\", \"130600\", \"130602\", \"130603\", \"130604\", \"130621\", \"130622\", \"130623\", \"130624\", \"130625\", \"130626\", \"130627\", \"130628\", \"130629\", \"130630\", \"130631\", \"130632\", \"130633\", \"130634\", \"130635\", \"130636\", \"130637\", \"130638\", \"130681\", \"130682\", \"130683\", \"130684\", \"130700\", \"130702\", \"130703\", \"130705\", \"130706\", \"130721\", \"130722\", \"130723\", \"130724\", \"130725\", \"130726\", \"130727\", \"130728\", \"130729\", \"130730\", \"130731\", \"130732\", \"130733\", \"130800\", \"130802\", \"130803\", \"130804\", \"130821\", \"130822\", \"130823\", \"130824\", \"130825\", \"130826\", \"130827\", \"130828\", \"130900\", \"130902\", \"130903\", \"130921\", \"130922\", \"130923\", \"130924\", \"130925\", \"130926\", \"130927\", \"130928\", \"130929\", \"130930\", \"130981\", \"130982\", \"130983\", \"130984\", \"131000\", \"131002\", \"131003\", \"131022\", \"131023\", \"131024\", \"131025\", \"131026\", \"131028\", \"131081\", \"131082\", \"131100\", \"131102\", \"131121\", \"131122\", \"131123\", \"131124\", \"131125\", \"131126\", \"131127\", \"131128\", \"131181\", \"131182\", \"140000\", \"140100\", \"140105\", \"140106\", \"140107\", \"140108\", \"140109\", \"140110\", \"140121\", \"140122\", \"140123\", \"140181\", \"140200\", \"140202\", \"140203\", \"140211\", \"140212\", \"140221\", \"140222\", \"140223\", \"140224\", \"140225\", \"140226\", \"140227\", \"140300\", \"140302\", \"140303\", \"140311\", \"140321\", \"140322\", \"140400\", \"140402\", \"140411\", \"140421\", \"140423\", \"140424\", \"140425\", \"140426\", \"140427\", \"140428\", \"140429\", \"140430\", \"140431\", \"140481\", \"140500\", \"140502\", \"140521\", \"140522\", \"140524\", \"140525\", \"140581\", \"140600\", \"140602\", \"140603\", \"140621\", \"140622\", \"140623\", \"140624\", \"140700\", \"140702\", \"140721\", \"140722\", \"140723\", \"140724\", \"140725\", \"140726\", \"140727\", \"140728\", \"140729\", \"140781\", \"140800\", \"140802\", \"140821\", \"140822\", \"140823\", \"140824\", \"140825\", \"140826\", \"140827\", \"140828\", \"140829\", \"140830\", \"140881\", \"140882\", \"140900\", \"140902\", \"140921\", \"140922\", \"140923\", \"140924\", \"140925\", \"140926\", \"140927\", \"140928\", \"140929\", \"140930\", \"140931\", \"140932\", \"140981\", \"141000\", \"141002\", \"141021\", \"141022\", \"141023\", \"141024\", \"141025\", \"141026\", \"141027\", \"141028\", \"141029\", \"141030\", \"141031\", \"141032\", \"141033\", \"141034\", \"141081\", \"141082\", \"141100\", \"141102\", \"141121\", \"141122\", \"141123\", \"141124\", \"141125\", \"141126\", \"141127\", \"141128\", \"141129\", \"141130\", \"141181\", \"141182\", \"150000\", \"150100\", \"150102\", \"150103\", \"150104\", \"150105\", \"150121\", \"150122\", \"150123\", \"150124\", \"150125\", \"150200\", \"150202\", \"150203\", \"150204\", \"150205\", \"150206\", \"150207\", \"150221\", \"150222\", \"150223\", \"150300\", \"150302\", \"150303\", \"150304\", \"150400\", \"150402\", \"150403\", \"150404\", \"150421\", \"150422\", \"150423\", \"150424\", \"150425\", \"150426\", \"150428\", \"150429\", \"150430\", \"150500\", \"150502\", \"150521\", \"150522\", \"150523\", \"150524\", \"150525\", \"150526\", \"150581\", \"150600\", \"150602\", \"150621\", \"150622\", \"150623\", \"150624\", \"150625\", \"150626\", \"150627\", \"150700\", \"150702\", \"150721\", \"150722\", \"150723\", \"150724\", \"150725\", \"150726\", \"150727\", \"150781\", \"150782\", \"150783\", \"150784\", \"150785\", \"150800\", \"150802\", \"150821\", \"150822\", \"150823\", \"150824\", \"150825\", \"150826\", \"150900\", \"150902\", \"150921\", \"150922\", \"150923\", \"150924\", \"150925\", \"150926\", \"150927\", \"150928\", \"150929\", \"150981\", \"152200\", \"152201\", \"152202\", \"152221\", \"152222\", \"152223\", \"152224\", \"152500\", \"152501\", \"152502\", \"152522\", \"152523\", \"152524\", \"152525\", \"152526\", \"152527\", \"152528\", \"152529\", \"152530\", \"152531\", \"152900\", \"152921\", \"152922\", \"152923\", \"210000\", \"210100\", \"210102\", \"210103\", \"210104\", \"210105\", \"210106\", \"210111\", \"210112\", \"210113\", \"210114\", \"210122\", \"210123\", \"210124\", \"210181\", \"210200\", \"210202\", \"210203\", \"210204\", \"210211\", \"210212\", \"210213\", \"210224\", \"210281\", \"210282\", \"210283\", \"210300\", \"210302\", \"210303\", \"210304\", \"210311\", \"210321\", \"210323\", \"210381\", \"210400\", \"210402\", \"210403\", \"210404\", \"210411\", \"210421\", \"210422\", \"210423\", \"210500\", \"210502\", \"210503\", \"210504\", \"210505\", \"210521\", \"210522\", \"210600\", \"210602\", \"210603\", \"210604\", \"210624\", \"210681\", \"210682\", \"210700\", \"210702\", \"210703\", \"210711\", \"210726\", \"210727\", \"210781\", \"210782\", \"210800\", \"210802\", \"210803\", \"210804\", \"210811\", \"210881\", \"210882\", \"210900\", \"210902\", \"210903\", \"210904\", \"210905\", \"210911\", \"210921\", \"210922\", \"211000\", \"211002\", \"211003\", \"211004\", \"211005\", \"211011\", \"211021\", \"211081\", \"211100\", \"211102\", \"211103\", \"211121\", \"211122\", \"211200\", \"211202\", \"211204\", \"211221\", \"211223\", \"211224\", \"211281\", \"211282\", \"211300\", \"211302\", \"211303\", \"211321\", \"211322\", \"211324\", \"211381\", \"211382\", \"211400\", \"211402\", \"211403\", \"211404\", \"211421\", \"211422\", \"211481\", \"220000\", \"220100\", \"220102\", \"220103\", \"220104\", \"220105\", \"220106\", \"220112\", \"220122\", \"220181\", \"220182\", \"220183\", \"220200\", \"220202\", \"220203\", \"220204\", \"220211\", \"220221\", \"220281\", \"220282\", \"220283\", \"220284\", \"220300\", \"220302\", \"220303\", \"220322\", \"220323\", \"220381\", \"220382\", \"220400\", \"220402\", \"220403\", \"220421\", \"220422\", \"220500\", \"220502\", \"220503\", \"220521\", \"220523\", \"220524\", \"220581\", \"220582\", \"220600\", \"220602\", \"220604\", \"220621\", \"220622\", \"220623\", \"220681\", \"220700\", \"220702\", \"220721\", \"220722\", \"220723\", \"220724\", \"220800\", \"220802\", \"220821\", \"220822\", \"220881\", \"220882\", \"222400\", \"222401\", \"222402\", \"222403\", \"222404\", \"222405\", \"222406\", \"222424\", \"222426\", \"230000\", \"230100\", \"230102\", \"230103\", \"230104\", \"230108\", \"230109\", \"230110\", \"230111\", \"230112\", \"230123\", \"230124\", \"230125\", \"230126\", \"230127\", \"230128\", \"230129\", \"230182\", \"230183\", \"230184\", \"230200\", \"230202\", \"230203\", \"230204\", \"230205\", \"230206\", \"230207\", \"230208\", \"230221\", \"230223\", \"230224\", \"230225\", \"230227\", \"230229\", \"230230\", \"230231\", \"230281\", \"230300\", \"230302\", \"230303\", \"230304\", \"230305\", \"230306\", \"230307\", \"230321\", \"230381\", \"230382\", \"230400\", \"230402\", \"230403\", \"230404\", \"230405\", \"230406\", \"230407\", \"230421\", \"230422\", \"230500\", \"230502\", \"230503\", \"230505\", \"230506\", \"230521\", \"230522\", \"230523\", \"230524\", \"230600\", \"230602\", \"230603\", \"230604\", \"230605\", \"230606\", \"230621\", \"230622\", \"230623\", \"230624\", \"230700\", \"230702\", \"230703\", \"230704\", \"230705\", \"230706\", \"230707\", \"230708\", \"230709\", \"230710\", \"230711\", \"230712\", \"230713\", \"230714\", \"230715\", \"230716\", \"230722\", \"230781\", \"230800\", \"230803\", \"230804\", \"230805\", \"230811\", \"230822\", \"230826\", \"230828\", \"230833\", \"230881\", \"230882\", \"230900\", \"230902\", \"230903\", \"230904\", \"230921\", \"231000\", \"231002\", \"231003\", \"231004\", \"231005\", \"231024\", \"231025\", \"231081\", \"231083\", \"231084\", \"231085\", \"231100\", \"231102\", \"231121\", \"231123\", \"231124\", \"231181\", \"231182\", \"231200\", \"231202\", \"231221\", \"231222\", \"231223\", \"231224\", \"231225\", \"231226\", \"231281\", \"231282\", \"231283\", \"232700\", \"232701\", \"232702\", \"232703\", \"232704\", \"232721\", \"232722\", \"232723\", \"310000\", \"310101\", \"310103\", \"310104\", \"310105\", \"310106\", \"310107\", \"310108\", \"310109\", \"310110\", \"310112\", \"310113\", \"310114\", \"310115\", \"310116\", \"310117\", \"310118\", \"310119\", \"310120\", \"310200\", \"310230\", \"320000\", \"320100\", \"320102\", \"320103\", \"320104\", \"320105\", \"320106\", \"320107\", \"320111\", \"320113\", \"320114\", \"320115\", \"320116\", \"320124\", \"320125\", \"320200\", \"320202\", \"320203\", \"320204\", \"320205\", \"320206\", \"320211\", \"320281\", \"320282\", \"320300\", \"320302\", \"320303\", \"320304\", \"320305\", \"320311\", \"320321\", \"320322\", \"320323\", \"320324\", \"320381\", \"320382\", \"320400\", \"320402\", \"320404\", \"320405\", \"320411\", \"320412\", \"320481\", \"320482\", \"320500\", \"320502\", \"320503\", \"320504\", \"320505\", \"320506\", \"320507\", \"320581\", \"320582\", \"320583\", \"320584\", \"320585\", \"320600\", \"320602\", \"320611\", \"320621\", \"320623\", \"320681\", \"320682\", \"320683\", \"320684\", \"320700\", \"320703\", \"320705\", \"320706\", \"320721\", \"320722\", \"320723\", \"320724\", \"320800\", \"320802\", \"320803\", \"320804\", \"320811\", \"320826\", \"320829\", \"320830\", \"320831\", \"320900\", \"320902\", \"320903\", \"320921\", \"320922\", \"320923\", \"320924\", \"320925\", \"320981\", \"320982\", \"321000\", \"321002\", \"321003\", \"321011\", \"321023\", \"321081\", \"321084\", \"321088\", \"321100\", \"321102\", \"321111\", \"321112\", \"321181\", \"321182\", \"321183\", \"321200\", \"321202\", \"321203\", \"321281\", \"321282\", \"321283\", \"321284\", \"321300\", \"321302\", \"321311\", \"321322\", \"321323\", \"321324\", \"330000\", \"330100\", \"330102\", \"330103\", \"330104\", \"330105\", \"330106\", \"330108\", \"330109\", \"330110\", \"330122\", \"330127\", \"330182\", \"330183\", \"330185\", \"330200\", \"330203\", \"330204\", \"330205\", \"330206\", \"330211\", \"330212\", \"330225\", \"330226\", \"330281\", \"330282\", \"330283\", \"330300\", \"330302\", \"330303\", \"330304\", \"330322\", \"330324\", \"330326\", \"330327\", \"330328\", \"330329\", \"330381\", \"330382\", \"330400\", \"330402\", \"330411\", \"330421\", \"330424\", \"330481\", \"330482\", \"330483\", \"330500\", \"330502\", \"330503\", \"330521\", \"330522\", \"330523\", \"330600\", \"330602\", \"330621\", \"330624\", \"330681\", \"330682\", \"330683\", \"330700\", \"330702\", \"330703\", \"330723\", \"330726\", \"330727\", \"330781\", \"330782\", \"330783\", \"330784\", \"330800\", \"330802\", \"330803\", \"330822\", \"330824\", \"330825\", \"330881\", \"330900\", \"330902\", \"330903\", \"330921\", \"330922\", \"331000\", \"331002\", \"331003\", \"331004\", \"331021\", \"331022\", \"331023\", \"331024\", \"331081\", \"331082\", \"331100\", \"331102\", \"331121\", \"331122\", \"331123\", \"331124\", \"331125\", \"331126\", \"331127\", \"331181\", \"340000\", \"340100\", \"340102\", \"340103\", \"340104\", \"340111\", \"340121\", \"340122\", \"340123\", \"340200\", \"340202\", \"340203\", \"340207\", \"340208\", \"340221\", \"340222\", \"340223\", \"340300\", \"340302\", \"340303\", \"340304\", \"340311\", \"340321\", \"340322\", \"340323\", \"340400\", \"340402\", \"340403\", \"340404\", \"340405\", \"340406\", \"340421\", \"340500\", \"340502\", \"340503\", \"340504\", \"340521\", \"340600\", \"340602\", \"340603\", \"340604\", \"340621\", \"340700\", \"340702\", \"340703\", \"340711\", \"340721\", \"340800\", \"340802\", \"340803\", \"340811\", \"340822\", \"340823\", \"340824\", \"340825\", \"340826\", \"340827\", \"340828\", \"340881\", \"341000\", \"341002\", \"341003\", \"341004\", \"341021\", \"341022\", \"341023\", \"341024\", \"341100\", \"341102\", \"341103\", \"341122\", \"341124\", \"341125\", \"341126\", \"341181\", \"341182\", \"341200\", \"341202\", \"341203\", \"341204\", \"341221\", \"341222\", \"341225\", \"341226\", \"341282\", \"341300\", \"341302\", \"341321\", \"341322\", \"341323\", \"341324\", \"341400\", \"341402\", \"341421\", \"341422\", \"341423\", \"341424\", \"341500\", \"341502\", \"341503\", \"341521\", \"341522\", \"341523\", \"341524\", \"341525\", \"341600\", \"341602\", \"341621\", \"341622\", \"341623\", \"341700\", \"341702\", \"341721\", \"341722\", \"341723\", \"341800\", \"341802\", \"341821\", \"341822\", \"341823\", \"341824\", \"341825\", \"341881\", \"350000\", \"350100\", \"350102\", \"350103\", \"350104\", \"350105\", \"350111\", \"350121\", \"350122\", \"350123\", \"350124\", \"350125\", \"350128\", \"350181\", \"350182\", \"350200\", \"350203\", \"350205\", \"350206\", \"350211\", \"350212\", \"350213\", \"350300\", \"350302\", \"350303\", \"350304\", \"350305\", \"350322\", \"350400\", \"350402\", \"350403\", \"350421\", \"350423\", \"350424\", \"350425\", \"350426\", \"350427\", \"350428\", \"350429\", \"350430\", \"350481\", \"350500\", \"350502\", \"350503\", \"350504\", \"350505\", \"350521\", \"350524\", \"350525\", \"350526\", \"350527\", \"350581\", \"350582\", \"350583\", \"350600\", \"350602\", \"350603\", \"350622\", \"350623\", \"350624\", \"350625\", \"350626\", \"350627\", \"350628\", \"350629\", \"350681\", \"350700\", \"350702\", \"350721\", \"350722\", \"350723\", \"350724\", \"350725\", \"350781\", \"350782\", \"350783\", \"350784\", \"350800\", \"350802\", \"350821\", \"350822\", \"350823\", \"350824\", \"350825\", \"350881\", \"350900\", \"350902\", \"350921\", \"350922\", \"350923\", \"350924\", \"350925\", \"350926\", \"350981\", \"350982\", \"360000\", \"360100\", \"360102\", \"360103\", \"360104\", \"360105\", \"360111\", \"360121\", \"360122\", \"360123\", \"360124\", \"360200\", \"360202\", \"360203\", \"360222\", \"360281\", \"360300\", \"360302\", \"360313\", \"360321\", \"360322\", \"360323\", \"360400\", \"360402\", \"360403\", \"360421\", \"360423\", \"360424\", \"360425\", \"360426\", \"360427\", \"360428\", \"360429\", \"360430\", \"360481\", \"360500\", \"360502\", \"360521\", \"360600\", \"360602\", \"360622\", \"360681\", \"360700\", \"360702\", \"360721\", \"360722\", \"360723\", \"360724\", \"360725\", \"360726\", \"360727\", \"360728\", \"360729\", \"360730\", \"360731\", \"360732\", \"360733\", \"360734\", \"360735\", \"360781\", \"360782\", \"360800\", \"360802\", \"360803\", \"360821\", \"360822\", \"360823\", \"360824\", \"360825\", \"360826\", \"360827\", \"360828\", \"360829\", \"360830\", \"360881\", \"360900\", \"360902\", \"360921\", \"360922\", \"360923\", \"360924\", \"360925\", \"360926\", \"360981\", \"360982\", \"360983\", \"361000\", \"361002\", \"361021\", \"361022\", \"361023\", \"361024\", \"361025\", \"361026\", \"361027\", \"361028\", \"361029\", \"361030\", \"361100\", \"361102\", \"361121\", \"361122\", \"361123\", \"361124\", \"361125\", \"361126\", \"361127\", \"361128\", \"361129\", \"361130\", \"361181\", \"370000\", \"370100\", \"370102\", \"370103\", \"370104\", \"370105\", \"370112\", \"370113\", \"370124\", \"370125\", \"370126\", \"370181\", \"370200\", \"370202\", \"370203\", \"370205\", \"370211\", \"370212\", \"370213\", \"370214\", \"370281\", \"370282\", \"370283\", \"370284\", \"370285\", \"370300\", \"370302\", \"370303\", \"370304\", \"370305\", \"370306\", \"370321\", \"370322\", \"370323\", \"370400\", \"370402\", \"370403\", \"370404\", \"370405\", \"370406\", \"370481\", \"370500\", \"370502\", \"370503\", \"370521\", \"370522\", \"370523\", \"370600\", \"370602\", \"370611\", \"370612\", \"370613\", \"370634\", \"370681\", \"370682\", \"370683\", \"370684\", \"370685\", \"370686\", \"370687\", \"370700\", \"370702\", \"370703\", \"370704\", \"370705\", \"370724\", \"370725\", \"370781\", \"370782\", \"370783\", \"370784\", \"370785\", \"370786\", \"370800\", \"370802\", \"370811\", \"370826\", \"370827\", \"370828\", \"370829\", \"370830\", \"370831\", \"370832\", \"370881\", \"370882\", \"370883\", \"370900\", \"370902\", \"370903\", \"370921\", \"370923\", \"370982\", \"370983\", \"371000\", \"371002\", \"371081\", \"371082\", \"371083\", \"371100\", \"371102\", \"371103\", \"371121\", \"371122\", \"371200\", \"371202\", \"371203\", \"371300\", \"371302\", \"371311\", \"371312\", \"371321\", \"371322\", \"371323\", \"371324\", \"371325\", \"371326\", \"371327\", \"371328\", \"371329\", \"371400\", \"371402\", \"371421\", \"371422\", \"371423\", \"371424\", \"371425\", \"371426\", \"371427\", \"371428\", \"371481\", \"371482\", \"371500\", \"371502\", \"371521\", \"371522\", \"371523\", \"371524\", \"371525\", \"371526\", \"371581\", \"371600\", \"371602\", \"371621\", \"371622\", \"371623\", \"371624\", \"371625\", \"371626\", \"371700\", \"371702\", \"371721\", \"371722\", \"371723\", \"371724\", \"371725\", \"371726\", \"371727\", \"371728\", \"410000\", \"410100\", \"410102\", \"410103\", \"410104\", \"410105\", \"410106\", \"410108\", \"410122\", \"410181\", \"410182\", \"410183\", \"410184\", \"410185\", \"410200\", \"410202\", \"410203\", \"410204\", \"410205\", \"410211\", \"410221\", \"410222\", \"410223\", \"410224\", \"410225\", \"410300\", \"410302\", \"410303\", \"410304\", \"410305\", \"410306\", \"410307\", \"410322\", \"410323\", \"410324\", \"410325\", \"410326\", \"410327\", \"410328\", \"410329\", \"410381\", \"410400\", \"410402\", \"410403\", \"410404\", \"410411\", \"410421\", \"410422\", \"410423\", \"410425\", \"410481\", \"410482\", \"410500\", \"410502\", \"410503\", \"410505\", \"410506\", \"410522\", \"410523\", \"410526\", \"410527\", \"410581\", \"410600\", \"410602\", \"410603\", \"410611\", \"410621\", \"410622\", \"410700\", \"410702\", \"410703\", \"410704\", \"410711\", \"410721\", \"410724\", \"410725\", \"410726\", \"410727\", \"410728\", \"410781\", \"410782\", \"410800\", \"410802\", \"410803\", \"410804\", \"410811\", \"410821\", \"410822\", \"410823\", \"410825\", \"410881\", \"410882\", \"410883\", \"410900\", \"410902\", \"410922\", \"410923\", \"410926\", \"410927\", \"410928\", \"411000\", \"411002\", \"411023\", \"411024\", \"411025\", \"411081\", \"411082\", \"411100\", \"411102\", \"411103\", \"411104\", \"411121\", \"411122\", \"411200\", \"411202\", \"411221\", \"411222\", \"411224\", \"411281\", \"411282\", \"411300\", \"411302\", \"411303\", \"411321\", \"411322\", \"411323\", \"411324\", \"411325\", \"411326\", \"411327\", \"411328\", \"411329\", \"411330\", \"411381\", \"411400\", \"411402\", \"411403\", \"411421\", \"411422\", \"411423\", \"411424\", \"411425\", \"411426\", \"411481\", \"411500\", \"411502\", \"411503\", \"411521\", \"411522\", \"411523\", \"411524\", \"411525\", \"411526\", \"411527\", \"411528\", \"411600\", \"411602\", \"411621\", \"411622\", \"411623\", \"411624\", \"411625\", \"411626\", \"411627\", \"411628\", \"411681\", \"411700\", \"411702\", \"411721\", \"411722\", \"411723\", \"411724\", \"411725\", \"411726\", \"411727\", \"411728\", \"411729\", \"420000\", \"420100\", \"420102\", \"420103\", \"420104\", \"420105\", \"420106\", \"420107\", \"420111\", \"420112\", \"420113\", \"420114\", \"420115\", \"420116\", \"420117\", \"420200\", \"420202\", \"420203\", \"420204\", \"420205\", \"420222\", \"420281\", \"420300\", \"420302\", \"420303\", \"420321\", \"420322\", \"420323\", \"420324\", \"420325\", \"420381\", \"420500\", \"420502\", \"420503\", \"420504\", \"420505\", \"420506\", \"420525\", \"420526\", \"420527\", \"420528\", \"420529\", \"420581\", \"420582\", \"420583\", \"420600\", \"420602\", \"420606\", \"420607\", \"420624\", \"420625\", \"420626\", \"420682\", \"420683\", \"420684\", \"420700\", \"420702\", \"420703\", \"420704\", \"420800\", \"420802\", \"420804\", \"420821\", \"420822\", \"420881\", \"420900\", \"420902\", \"420921\", \"420922\", \"420923\", \"420981\", \"420982\", \"420984\", \"421000\", \"421002\", \"421003\", \"421022\", \"421023\", \"421024\", \"421081\", \"421083\", \"421087\", \"421100\", \"421102\", \"421121\", \"421122\", \"421123\", \"421124\", \"421125\", \"421126\", \"421127\", \"421181\", \"421182\", \"421200\", \"421202\", \"421221\", \"421222\", \"421223\", \"421224\", \"421281\", \"421300\", \"421302\", \"421381\", \"422800\", \"422801\", \"422802\", \"422822\", \"422823\", \"422825\", \"422826\", \"422827\", \"422828\", \"429000\", \"429004\", \"429005\", \"429006\", \"429021\", \"430000\", \"430100\", \"430102\", \"430103\", \"430104\", \"430105\", \"430111\", \"430121\", \"430122\", \"430124\", \"430181\", \"430200\", \"430202\", \"430203\", \"430204\", \"430211\", \"430221\", \"430223\", \"430224\", \"430225\", \"430281\", \"430300\", \"430302\", \"430304\", \"430321\", \"430381\", \"430382\", \"430400\", \"430405\", \"430406\", \"430407\", \"430408\", \"430412\", \"430421\", \"430422\", \"430423\", \"430424\", \"430426\", \"430481\", \"430482\", \"430500\", \"430502\", \"430503\", \"430511\", \"430521\", \"430522\", \"430523\", \"430524\", \"430525\", \"430527\", \"430528\", \"430529\", \"430581\", \"430600\", \"430602\", \"430603\", \"430611\", \"430621\", \"430623\", \"430624\", \"430626\", \"430681\", \"430682\", \"430700\", \"430702\", \"430703\", \"430721\", \"430722\", \"430723\", \"430724\", \"430725\", \"430726\", \"430781\", \"430800\", \"430802\", \"430811\", \"430821\", \"430822\", \"430900\", \"430902\", \"430903\", \"430921\", \"430922\", \"430923\", \"430981\", \"431000\", \"431002\", \"431003\", \"431021\", \"431022\", \"431023\", \"431024\", \"431025\", \"431026\", \"431027\", \"431028\", \"431081\", \"431100\", \"431102\", \"431103\", \"431121\", \"431122\", \"431123\", \"431124\", \"431125\", \"431126\", \"431127\", \"431128\", \"431129\", \"431200\", \"431202\", \"431221\", \"431222\", \"431223\", \"431224\", \"431225\", \"431226\", \"431227\", \"431228\", \"431229\", \"431230\", \"431281\", \"431300\", \"431302\", \"431321\", \"431322\", \"431381\", \"431382\", \"433100\", \"433101\", \"433122\", \"433123\", \"433124\", \"433125\", \"433126\", \"433127\", \"433130\", \"440000\", \"440100\", \"440103\", \"440104\", \"440105\", \"440106\", \"440111\", \"440112\", \"440113\", \"440114\", \"440115\", \"440116\", \"440183\", \"440184\", \"440200\", \"440203\", \"440204\", \"440205\", \"440222\", \"440224\", \"440229\", \"440232\", \"440233\", \"440281\", \"440282\", \"440300\", \"440303\", \"440304\", \"440305\", \"440306\", \"440307\", \"440308\", \"440400\", \"440402\", \"440403\", \"440404\", \"440500\", \"440507\", \"440511\", \"440512\", \"440513\", \"440514\", \"440515\", \"440523\", \"440600\", \"440604\", \"440605\", \"440606\", \"440607\", \"440608\", \"440700\", \"440703\", \"440704\", \"440705\", \"440781\", \"440783\", \"440784\", \"440785\", \"440800\", \"440802\", \"440803\", \"440804\", \"440811\", \"440823\", \"440825\", \"440881\", \"440882\", \"440883\", \"440900\", \"440902\", \"440903\", \"440923\", \"440981\", \"440982\", \"440983\", \"441200\", \"441202\", \"441203\", \"441223\", \"441224\", \"441225\", \"441226\", \"441283\", \"441284\", \"441300\", \"441302\", \"441303\", \"441322\", \"441323\", \"441324\", \"441400\", \"441402\", \"441421\", \"441422\", \"441423\", \"441424\", \"441426\", \"441427\", \"441481\", \"441500\", \"441502\", \"441521\", \"441523\", \"441581\", \"441600\", \"441602\", \"441621\", \"441622\", \"441623\", \"441624\", \"441625\", \"441700\", \"441702\", \"441721\", \"441723\", \"441781\", \"441800\", \"441802\", \"441821\", \"441823\", \"441825\", \"441826\", \"441827\", \"441881\", \"441882\", \"441900\", \"442000\", \"445100\", \"445102\", \"445121\", \"445122\", \"445200\", \"445202\", \"445221\", \"445222\", \"445224\", \"445281\", \"445300\", \"445302\", \"445321\", \"445322\", \"445323\", \"445381\", \"450000\", \"450100\", \"450102\", \"450103\", \"450105\", \"450107\", \"450108\", \"450109\", \"450122\", \"450123\", \"450124\", \"450125\", \"450126\", \"450127\", \"450200\", \"450202\", \"450203\", \"450204\", \"450205\", \"450221\", \"450222\", \"450223\", \"450224\", \"450225\", \"450226\", \"450300\", \"450302\", \"450303\", \"450304\", \"450305\", \"450311\", \"450321\", \"450322\", \"450323\", \"450324\", \"450325\", \"450326\", \"450327\", \"450328\", \"450329\", \"450330\", \"450331\", \"450332\", \"450400\", \"450403\", \"450404\", \"450405\", \"450421\", \"450422\", \"450423\", \"450481\", \"450500\", \"450502\", \"450503\", \"450512\", \"450521\", \"450600\", \"450602\", \"450603\", \"450621\", \"450681\", \"450700\", \"450702\", \"450703\", \"450721\", \"450722\", \"450800\", \"450802\", \"450803\", \"450804\", \"450821\", \"450881\", \"450900\", \"450902\", \"450921\", \"450922\", \"450923\", \"450924\", \"450981\", \"451000\", \"451002\", \"451021\", \"451022\", \"451023\", \"451024\", \"451025\", \"451026\", \"451027\", \"451028\", \"451029\", \"451030\", \"451031\", \"451100\", \"451102\", \"451121\", \"451122\", \"451123\", \"451200\", \"451202\", \"451221\", \"451222\", \"451223\", \"451224\", \"451225\", \"451226\", \"451227\", \"451228\", \"451229\", \"451281\", \"451300\", \"451302\", \"451321\", \"451322\", \"451323\", \"451324\", \"451381\", \"451400\", \"451402\", \"451421\", \"451422\", \"451423\", \"451424\", \"451425\", \"451481\", \"460000\", \"460100\", \"460105\", \"460106\", \"460107\", \"460108\", \"460200\", \"469000\", \"469001\", \"469002\", \"469003\", \"469005\", \"469006\", \"469007\", \"469025\", \"469026\", \"469027\", \"469028\", \"469030\", \"469031\", \"469033\", \"469034\", \"469035\", \"469036\", \"469037\", \"469038\", \"469039\", \"500000\", \"500101\", \"500102\", \"500103\", \"500104\", \"500105\", \"500106\", \"500107\", \"500108\", \"500109\", \"500110\", \"500111\", \"500112\", \"500113\", \"500114\", \"500115\", \"500116\", \"500117\", \"500118\", \"500119\", \"500200\", \"500222\", \"500223\", \"500224\", \"500225\", \"500226\", \"500227\", \"500228\", \"500229\", \"500230\", \"500231\", \"500232\", \"500233\", \"500234\", \"500235\", \"500236\", \"500237\", \"500238\", \"500240\", \"500241\", \"500242\", \"500243\", \"510000\", \"510100\", \"510104\", \"510105\", \"510106\", \"510107\", \"510108\", \"510112\", \"510113\", \"510114\", \"510115\", \"510121\", \"510122\", \"510124\", \"510129\", \"510131\", \"510132\", \"510181\", \"510182\", \"510183\", \"510184\", \"510300\", \"510302\", \"510303\", \"510304\", \"510311\", \"510321\", \"510322\", \"510400\", \"510402\", \"510403\", \"510411\", \"510421\", \"510422\", \"510500\", \"510502\", \"510503\", \"510504\", \"510521\", \"510522\", \"510524\", \"510525\", \"510600\", \"510603\", \"510623\", \"510626\", \"510681\", \"510682\", \"510683\", \"510700\", \"510703\", \"510704\", \"510722\", \"510723\", \"510724\", \"510725\", \"510726\", \"510727\", \"510781\", \"510800\", \"510802\", \"510811\", \"510812\", \"510821\", \"510822\", \"510823\", \"510824\", \"510900\", \"510903\", \"510904\", \"510921\", \"510922\", \"510923\", \"511000\", \"511002\", \"511011\", \"511024\", \"511025\", \"511028\", \"511100\", \"511102\", \"511111\", \"511112\", \"511113\", \"511123\", \"511124\", \"511126\", \"511129\", \"511132\", \"511133\", \"511181\", \"511300\", \"511302\", \"511303\", \"511304\", \"511321\", \"511322\", \"511323\", \"511324\", \"511325\", \"511381\", \"511400\", \"511402\", \"511421\", \"511422\", \"511423\", \"511424\", \"511425\", \"511500\", \"511502\", \"511521\", \"511522\", \"511523\", \"511524\", \"511525\", \"511526\", \"511527\", \"511528\", \"511529\", \"511600\", \"511602\", \"511621\", \"511622\", \"511623\", \"511681\", \"511700\", \"511702\", \"511721\", \"511722\", \"511723\", \"511724\", \"511725\", \"511781\", \"511800\", \"511802\", \"511821\", \"511822\", \"511823\", \"511824\", \"511825\", \"511826\", \"511827\", \"511900\", \"511902\", \"511921\", \"511922\", \"511923\", \"512000\", \"512002\", \"512021\", \"512022\", \"512081\", \"513200\", \"513221\", \"513222\", \"513223\", \"513224\", \"513225\", \"513226\", \"513227\", \"513228\", \"513229\", \"513230\", \"513231\", \"513232\", \"513233\", \"513300\", \"513321\", \"513322\", \"513323\", \"513324\", \"513325\", \"513326\", \"513327\", \"513328\", \"513329\", \"513330\", \"513331\", \"513332\", \"513333\", \"513334\", \"513335\", \"513336\", \"513337\", \"513338\", \"513400\", \"513401\", \"513422\", \"513423\", \"513424\", \"513425\", \"513426\", \"513427\", \"513428\", \"513429\", \"513430\", \"513431\", \"513432\", \"513433\", \"513434\", \"513435\", \"513436\", \"513437\", \"520000\", \"520100\", \"520102\", \"520103\", \"520111\", \"520112\", \"520113\", \"520114\", \"520121\", \"520122\", \"520123\", \"520181\", \"520200\", \"520201\", \"520203\", \"520221\", \"520222\", \"520300\", \"520302\", \"520303\", \"520321\", \"520322\", \"520323\", \"520324\", \"520325\", \"520326\", \"520327\", \"520328\", \"520329\", \"520330\", \"520381\", \"520382\", \"520400\", \"520402\", \"520421\", \"520422\", \"520423\", \"520424\", \"520425\", \"522200\", \"522201\", \"522222\", \"522223\", \"522224\", \"522225\", \"522226\", \"522227\", \"522228\", \"522229\", \"522230\", \"522300\", \"522301\", \"522322\", \"522323\", \"522324\", \"522325\", \"522326\", \"522327\", \"522328\", \"522400\", \"522401\", \"522422\", \"522423\", \"522424\", \"522425\", \"522426\", \"522427\", \"522428\", \"522600\", \"522601\", \"522622\", \"522623\", \"522624\", \"522625\", \"522626\", \"522627\", \"522628\", \"522629\", \"522630\", \"522631\", \"522632\", \"522633\", \"522634\", \"522635\", \"522636\", \"522700\", \"522701\", \"522702\", \"522722\", \"522723\", \"522725\", \"522726\", \"522727\", \"522728\", \"522729\", \"522730\", \"522731\", \"522732\", \"530000\", \"530100\", \"530102\", \"530103\", \"530111\", \"530112\", \"530113\", \"530121\", \"530122\", \"530124\", \"530125\", \"530126\", \"530127\", \"530128\", \"530129\", \"530181\", \"530300\", \"530302\", \"530321\", \"530322\", \"530323\", \"530324\", \"530325\", \"530326\", \"530328\", \"530381\", \"530400\", \"530402\", \"530421\", \"530422\", \"530423\", \"530424\", \"530425\", \"530426\", \"530427\", \"530428\", \"530500\", \"530502\", \"530521\", \"530522\", \"530523\", \"530524\", \"530600\", \"530602\", \"530621\", \"530622\", \"530623\", \"530624\", \"530625\", \"530626\", \"530627\", \"530628\", \"530629\", \"530630\", \"530700\", \"530702\", \"530721\", \"530722\", \"530723\", \"530724\", \"530800\", \"530802\", \"530821\", \"530822\", \"530823\", \"530824\", \"530825\", \"530826\", \"530827\", \"530828\", \"530829\", \"530900\", \"530902\", \"530921\", \"530922\", \"530923\", \"530924\", \"530925\", \"530926\", \"530927\", \"532300\", \"532301\", \"532322\", \"532323\", \"532324\", \"532325\", \"532326\", \"532327\", \"532328\", \"532329\", \"532331\", \"532500\", \"532501\", \"532502\", \"532522\", \"532523\", \"532524\", \"532525\", \"532526\", \"532527\", \"532528\", \"532529\", \"532530\", \"532531\", \"532532\", \"532600\", \"532621\", \"532622\", \"532623\", \"532624\", \"532625\", \"532626\", \"532627\", \"532628\", \"532800\", \"532801\", \"532822\", \"532823\", \"532900\", \"532901\", \"532922\", \"532923\", \"532924\", \"532925\", \"532926\", \"532927\", \"532928\", \"532929\", \"532930\", \"532931\", \"532932\", \"533100\", \"533102\", \"533103\", \"533122\", \"533123\", \"533124\", \"533300\", \"533321\", \"533323\", \"533324\", \"533325\", \"533400\", \"533421\", \"533422\", \"533423\", \"540000\", \"540100\", \"540102\", \"540121\", \"540122\", \"540123\", \"540124\", \"540125\", \"540126\", \"540127\", \"542100\", \"542121\", \"542122\", \"542123\", \"542124\", \"542125\", \"542126\", \"542127\", \"542128\", \"542129\", \"542132\", \"542133\", \"542200\", \"542221\", \"542222\", \"542223\", \"542224\", \"542225\", \"542226\", \"542227\", \"542228\", \"542229\", \"542231\", \"542232\", \"542233\", \"542300\", \"542301\", \"542322\", \"542323\", \"542324\", \"542325\", \"542326\", \"542327\", \"542328\", \"542329\", \"542330\", \"542331\", \"542332\", \"542333\", \"542334\", \"542335\", \"542336\", \"542337\", \"542338\", \"542400\", \"542421\", \"542422\", \"542423\", \"542424\", \"542425\", \"542426\", \"542427\", \"542428\", \"542429\", \"542430\", \"542500\", \"542521\", \"542522\", \"542523\", \"542524\", \"542525\", \"542526\", \"542527\", \"542600\", \"542621\", \"542622\", \"542623\", \"542624\", \"542625\", \"542626\", \"542627\", \"610000\", \"610100\", \"610102\", \"610103\", \"610104\", \"610111\", \"610112\", \"610113\", \"610114\", \"610115\", \"610116\", \"610122\", \"610124\", \"610125\", \"610126\", \"610200\", \"610202\", \"610203\", \"610204\", \"610222\", \"610300\", \"610302\", \"610303\", \"610304\", \"610322\", \"610323\", \"610324\", \"610326\", \"610327\", \"610328\", \"610329\", \"610330\", \"610331\", \"610400\", \"610402\", \"610403\", \"610404\", \"610422\", \"610423\", \"610424\", \"610425\", \"610426\", \"610427\", \"610428\", \"610429\", \"610430\", \"610431\", \"610481\", \"610500\", \"610502\", \"610521\", \"610522\", \"610523\", \"610524\", \"610525\", \"610526\", \"610527\", \"610528\", \"610581\", \"610582\", \"610600\", \"610602\", \"610621\", \"610622\", \"610623\", \"610624\", \"610625\", \"610626\", \"610627\", \"610628\", \"610629\", \"610630\", \"610631\", \"610632\", \"610700\", \"610702\", \"610721\", \"610722\", \"610723\", \"610724\", \"610725\", \"610726\", \"610727\", \"610728\", \"610729\", \"610730\", \"610800\", \"610802\", \"610821\", \"610822\", \"610823\", \"610824\", \"610825\", \"610826\", \"610827\", \"610828\", \"610829\", \"610830\", \"610831\", \"610900\", \"610902\", \"610921\", \"610922\", \"610923\", \"610924\", \"610925\", \"610926\", \"610927\", \"610928\", \"610929\", \"611000\", \"611002\", \"611021\", \"611022\", \"611023\", \"611024\", \"611025\", \"611026\", \"620000\", \"620100\", \"620102\", \"620103\", \"620104\", \"620105\", \"620111\", \"620121\", \"620122\", \"620123\", \"620200\", \"620300\", \"620302\", \"620321\", \"620400\", \"620402\", \"620403\", \"620421\", \"620422\", \"620423\", \"620500\", \"620502\", \"620503\", \"620521\", \"620522\", \"620523\", \"620524\", \"620525\", \"620600\", \"620602\", \"620621\", \"620622\", \"620623\", \"620700\", \"620702\", \"620721\", \"620722\", \"620723\", \"620724\", \"620725\", \"620800\", \"620802\", \"620821\", \"620822\", \"620823\", \"620824\", \"620825\", \"620826\", \"620900\", \"620902\", \"620921\", \"620922\", \"620923\", \"620924\", \"620981\", \"620982\", \"621000\", \"621002\", \"621021\", \"621022\", \"621023\", \"621024\", \"621025\", \"621026\", \"621027\", \"621100\", \"621102\", \"621121\", \"621122\", \"621123\", \"621124\", \"621125\", \"621126\", \"621200\", \"621202\", \"621221\", \"621222\", \"621223\", \"621224\", \"621225\", \"621226\", \"621227\", \"621228\", \"622900\", \"622901\", \"622921\", \"622922\", \"622923\", \"622924\", \"622925\", \"622926\", \"622927\", \"623000\", \"623001\", \"623021\", \"623022\", \"623023\", \"623024\", \"623025\", \"623026\", \"623027\", \"630000\", \"630100\", \"630102\", \"630103\", \"630104\", \"630105\", \"630121\", \"630122\", \"630123\", \"632100\", \"632121\", \"632122\", \"632123\", \"632126\", \"632127\", \"632128\", \"632200\", \"632221\", \"632222\", \"632223\", \"632224\", \"632300\", \"632321\", \"632322\", \"632323\", \"632324\", \"632500\", \"632521\", \"632522\", \"632523\", \"632524\", \"632525\", \"632600\", \"632621\", \"632622\", \"632623\", \"632624\", \"632625\", \"632626\", \"632700\", \"632721\", \"632722\", \"632723\", \"632724\", \"632725\", \"632726\", \"632800\", \"632801\", \"632802\", \"632821\", \"632822\", \"632823\", \"640000\", \"640100\", \"640104\", \"640105\", \"640106\", \"640121\", \"640122\", \"640181\", \"640200\", \"640202\", \"640205\", \"640221\", \"640300\", \"640302\", \"640323\", \"640324\", \"640381\", \"640400\", \"640402\", \"640422\", \"640423\", \"640424\", \"640425\", \"640500\", \"640502\", \"640521\", \"640522\", \"650000\", \"650100\", \"650102\", \"650103\", \"650104\", \"650105\", \"650106\", \"650107\", \"650108\", \"650121\", \"650200\", \"650202\", \"650203\", \"650204\", \"650205\", \"652100\", \"652101\", \"652122\", \"652123\", \"652200\", \"652201\", \"652222\", \"652223\", \"652300\", \"652301\", \"652302\", \"652303\", \"652323\", \"652324\", \"652325\", \"652327\", \"652328\", \"652700\", \"652701\", \"652722\", \"652723\", \"652800\", \"652801\", \"652822\", \"652823\", \"652824\", \"652825\", \"652826\", \"652827\", \"652828\", \"652829\", \"652900\", \"652901\", \"652922\", \"652923\", \"652924\", \"652925\", \"652926\", \"652927\", \"652928\", \"652929\", \"653000\", \"653001\", \"653022\", \"653023\", \"653024\", \"653100\", \"653101\", \"653121\", \"653122\", \"653123\", \"653124\", \"653125\", \"653126\", \"653127\", \"653128\", \"653129\", \"653130\", \"653131\", \"653200\", \"653201\", \"653221\", \"653222\", \"653223\", \"653224\", \"653225\", \"653226\", \"653227\", \"654000\", \"654002\", \"654003\", \"654021\", \"654022\", \"654023\", \"654024\", \"654025\", \"654026\", \"654027\", \"654028\", \"654200\", \"654201\", \"654202\", \"654221\", \"654223\", \"654224\", \"654225\", \"654226\", \"654300\", \"654301\", \"654321\", \"654322\", \"654323\", \"654324\", \"654325\", \"654326\", \"659000\", \"659001\", \"659002\", \"659003\", \"659004\", \"710000\", \"810000\", \"820000\"};", "docstring": "\nlist all combination of first 6 bits, they are locations\n", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "LOCATIONS = {\"110000\", \"110101\", \"110102\", \"110103\", \"110104\", \"110105\", \"110106\", \"110107\", \"110108\", \"110109\", \"110111\", \"110112\", \"110113\", \"110114\", \"110115\", \"110116\", \"110117\", \"110200\", \"110228\", \"110229\", \"120000\", \"120101\", \"120102\", \"120103\", \"120104\", \"120105\", \"120106\", \"120107\", \"120108\", \"120109\", \"120110\", \"120111\", \"120112\", \"120113\", \"120114\", \"120115\", \"120200\", \"120221\", \"120223\", \"120225\", \"130000\", \"130100\", \"130102\", \"130103\", \"130104\", \"130105\", \"130107\", \"130108\", \"130121\", \"130123\", \"130124\", \"130125\", \"130126\", \"130127\", \"130128\", \"130129\", \"130130\", \"130131\", \"130132\", \"130133\", \"130181\", \"130182\", \"130183\", \"130184\", \"130185\", \"130200\", \"130202\", \"130203\", \"130204\", \"130205\", \"130207\", \"130208\", \"130223\", \"130224\", \"130225\", \"130227\", \"130229\", \"130230\", \"130281\", \"130283\", \"130300\", \"130302\", \"130303\", \"130304\", \"130321\", \"130322\", \"130323\", \"130324\", \"130400\", \"130402\", \"130403\", \"130404\", \"130406\", \"130421\", \"130423\", \"130424\", \"130425\", \"130426\", \"130427\", \"130428\", \"130429\", \"130430\", \"130431\", \"130432\", \"130433\", \"130434\", \"130435\", \"130481\", \"130500\", \"130502\", \"130503\", \"130521\", \"130522\", \"130523\", \"130524\", \"130525\", \"130526\", \"130527\", \"130528\", \"130529\", \"130530\", \"130531\", \"130532\", \"130533\", \"130534\", \"130535\", \"130581\", \"130582\", \"130600\", \"130602\", \"130603\", \"130604\", \"130621\", \"130622\", \"130623\", \"130624\", \"130625\", \"130626\", \"130627\", \"130628\", \"130629\", \"130630\", \"130631\", \"130632\", \"130633\", \"130634\", \"130635\", \"130636\", \"130637\", \"130638\", \"130681\", \"130682\", \"130683\", \"130684\", \"130700\", \"130702\", \"130703\", \"130705\", \"130706\", \"130721\", \"130722\", \"130723\", \"130724\", \"130725\", \"130726\", \"130727\", \"130728\", \"130729\", \"130730\", \"130731\", \"130732\", \"130733\", \"130800\", \"130802\", \"130803\", \"130804\", \"130821\", \"130822\", \"130823\", \"130824\", \"130825\", \"130826\", \"130827\", \"130828\", \"130900\", \"130902\", \"130903\", \"130921\", \"130922\", \"130923\", \"130924\", \"130925\", \"130926\", \"130927\", \"130928\", \"130929\", \"130930\", \"130981\", \"130982\", \"130983\", \"130984\", \"131000\", \"131002\", \"131003\", \"131022\", \"131023\", \"131024\", \"131025\", \"131026\", \"131028\", \"131081\", \"131082\", \"131100\", \"131102\", \"131121\", \"131122\", \"131123\", \"131124\", \"131125\", \"131126\", \"131127\", \"131128\", \"131181\", \"131182\", \"140000\", \"140100\", \"140105\", \"140106\", \"140107\", \"140108\", \"140109\", \"140110\", \"140121\", \"140122\", \"140123\", \"140181\", \"140200\", \"140202\", \"140203\", \"140211\", \"140212\", \"140221\", \"140222\", \"140223\", \"140224\", \"140225\", \"140226\", \"140227\", \"140300\", \"140302\", \"140303\", \"140311\", \"140321\", \"140322\", \"140400\", \"140402\", \"140411\", \"140421\", \"140423\", \"140424\", \"140425\", \"140426\", \"140427\", \"140428\", \"140429\", \"140430\", \"140431\", \"140481\", \"140500\", \"140502\", \"140521\", \"140522\", \"140524\", \"140525\", \"140581\", \"140600\", \"140602\", \"140603\", \"140621\", \"140622\", \"140623\", \"140624\", \"140700\", \"140702\", \"140721\", \"140722\", \"140723\", \"140724\", \"140725\", \"140726\", \"140727\", \"140728\", \"140729\", \"140781\", \"140800\", \"140802\", \"140821\", \"140822\", \"140823\", \"140824\", \"140825\", \"140826\", \"140827\", \"140828\", \"140829\", \"140830\", \"140881\", \"140882\", \"140900\", \"140902\", \"140921\", \"140922\", \"140923\", \"140924\", \"140925\", \"140926\", \"140927\", \"140928\", \"140929\", \"140930\", \"140931\", \"140932\", \"140981\", \"141000\", \"141002\", \"141021\", \"141022\", \"141023\", \"141024\", \"141025\", \"141026\", \"141027\", \"141028\", \"141029\", \"141030\", \"141031\", \"141032\", \"141033\", \"141034\", \"141081\", \"141082\", \"141100\", \"141102\", \"141121\", \"141122\", \"141123\", \"141124\", \"141125\", \"141126\", \"141127\", \"141128\", \"141129\", \"141130\", \"141181\", \"141182\", \"150000\", \"150100\", \"150102\", \"150103\", \"150104\", \"150105\", \"150121\", \"150122\", \"150123\", \"150124\", \"150125\", \"150200\", \"150202\", \"150203\", \"150204\", \"150205\", \"150206\", \"150207\", \"150221\", \"150222\", \"150223\", \"150300\", \"150302\", \"150303\", \"150304\", \"150400\", \"150402\", \"150403\", \"150404\", \"150421\", \"150422\", \"150423\", \"150424\", \"150425\", \"150426\", \"150428\", \"150429\", \"150430\", \"150500\", \"150502\", \"150521\", \"150522\", \"150523\", \"150524\", \"150525\", \"150526\", \"150581\", \"150600\", \"150602\", \"150621\", \"150622\", \"150623\", \"150624\", \"150625\", \"150626\", \"150627\", \"150700\", \"150702\", \"150721\", \"150722\", \"150723\", \"150724\", \"150725\", \"150726\", \"150727\", \"150781\", \"150782\", \"150783\", \"150784\", \"150785\", \"150800\", \"150802\", \"150821\", \"150822\", \"150823\", \"150824\", \"150825\", \"150826\", \"150900\", \"150902\", \"150921\", \"150922\", \"150923\", \"150924\", \"150925\", \"150926\", \"150927\", \"150928\", \"150929\", \"150981\", \"152200\", \"152201\", \"152202\", \"152221\", \"152222\", \"152223\", \"152224\", \"152500\", \"152501\", \"152502\", \"152522\", \"152523\", \"152524\", \"152525\", \"152526\", \"152527\", \"152528\", \"152529\", \"152530\", \"152531\", \"152900\", \"152921\", \"152922\", \"152923\", \"210000\", \"210100\", \"210102\", \"210103\", \"210104\", \"210105\", \"210106\", \"210111\", \"210112\", \"210113\", \"210114\", \"210122\", \"210123\", \"210124\", \"210181\", \"210200\", \"210202\", \"210203\", \"210204\", \"210211\", \"210212\", \"210213\", \"210224\", \"210281\", \"210282\", \"210283\", \"210300\", \"210302\", \"210303\", \"210304\", \"210311\", \"210321\", \"210323\", \"210381\", \"210400\", \"210402\", \"210403\", \"210404\", \"210411\", \"210421\", \"210422\", \"210423\", \"210500\", \"210502\", \"210503\", \"210504\", \"210505\", \"210521\", \"210522\", \"210600\", \"210602\", \"210603\", \"210604\", \"210624\", \"210681\", \"210682\", \"210700\", \"210702\", \"210703\", \"210711\", \"210726\", \"210727\", \"210781\", \"210782\", \"210800\", \"210802\", \"210803\", \"210804\", \"210811\", \"210881\", \"210882\", \"210900\", \"210902\", \"210903\", \"210904\", \"210905\", \"210911\", \"210921\", \"210922\", \"211000\", \"211002\", \"211003\", \"211004\", \"211005\", \"211011\", \"211021\", \"211081\", \"211100\", \"211102\", \"211103\", \"211121\", \"211122\", \"211200\", \"211202\", \"211204\", \"211221\", \"211223\", \"211224\", \"211281\", \"211282\", \"211300\", \"211302\", \"211303\", \"211321\", \"211322\", \"211324\", \"211381\", \"211382\", \"211400\", \"211402\", \"211403\", \"211404\", \"211421\", \"211422\", \"211481\", \"220000\", \"220100\", \"220102\", \"220103\", \"220104\", \"220105\", \"220106\", \"220112\", \"220122\", \"220181\", \"220182\", \"220183\", \"220200\", \"220202\", \"220203\", \"220204\", \"220211\", \"220221\", \"220281\", \"220282\", \"220283\", \"220284\", \"220300\", \"220302\", \"220303\", \"220322\", \"220323\", \"220381\", \"220382\", \"220400\", \"220402\", \"220403\", \"220421\", \"220422\", \"220500\", \"220502\", \"220503\", \"220521\", \"220523\", \"220524\", \"220581\", \"220582\", \"220600\", \"220602\", \"220604\", \"220621\", \"220622\", \"220623\", \"220681\", \"220700\", \"220702\", \"220721\", \"220722\", \"220723\", \"220724\", \"220800\", \"220802\", \"220821\", \"220822\", \"220881\", \"220882\", \"222400\", \"222401\", \"222402\", \"222403\", \"222404\", \"222405\", \"222406\", \"222424\", \"222426\", \"230000\", \"230100\", \"230102\", \"230103\", \"230104\", \"230108\", \"230109\", \"230110\", \"230111\", \"230112\", \"230123\", \"230124\", \"230125\", \"230126\", \"230127\", \"230128\", \"230129\", \"230182\", \"230183\", \"230184\", \"230200\", \"230202\", \"230203\", \"230204\", \"230205\", \"230206\", \"230207\", \"230208\", \"230221\", \"230223\", \"230224\", \"230225\", \"230227\", \"230229\", \"230230\", \"230231\", \"230281\", \"230300\", \"230302\", \"230303\", \"230304\", \"230305\", \"230306\", \"230307\", \"230321\", \"230381\", \"230382\", \"230400\", \"230402\", \"230403\", \"230404\", \"230405\", \"230406\", \"230407\", \"230421\", \"230422\", \"230500\", \"230502\", \"230503\", \"230505\", \"230506\", \"230521\", \"230522\", \"230523\", \"230524\", \"230600\", \"230602\", \"230603\", \"230604\", \"230605\", \"230606\", \"230621\", \"230622\", \"230623\", \"230624\", \"230700\", \"230702\", \"230703\", \"230704\", \"230705\", \"230706\", \"230707\", \"230708\", \"230709\", \"230710\", \"230711\", \"230712\", \"230713\", \"230714\", \"230715\", \"230716\", \"230722\", \"230781\", \"230800\", \"230803\", \"230804\", \"230805\", \"230811\", \"230822\", \"230826\", \"230828\", \"230833\", \"230881\", \"230882\", \"230900\", \"230902\", \"230903\", \"230904\", \"230921\", \"231000\", \"231002\", \"231003\", \"231004\", \"231005\", \"231024\", \"231025\", \"231081\", \"231083\", \"231084\", \"231085\", \"231100\", \"231102\", \"231121\", \"231123\", \"231124\", \"231181\", \"231182\", \"231200\", \"231202\", \"231221\", \"231222\", \"231223\", \"231224\", \"231225\", \"231226\", \"231281\", \"231282\", \"231283\", \"232700\", \"232701\", \"232702\", \"232703\", \"232704\", \"232721\", \"232722\", \"232723\", \"310000\", \"310101\", \"310103\", \"310104\", \"310105\", \"310106\", \"310107\", \"310108\", \"310109\", \"310110\", \"310112\", \"310113\", \"310114\", \"310115\", \"310116\", \"310117\", \"310118\", \"310119\", \"310120\", \"310200\", \"310230\", \"320000\", \"320100\", \"320102\", \"320103\", \"320104\", \"320105\", \"320106\", \"320107\", \"320111\", \"320113\", \"320114\", \"320115\", \"320116\", \"320124\", \"320125\", \"320200\", \"320202\", \"320203\", \"320204\", \"320205\", \"320206\", \"320211\", \"320281\", \"320282\", \"320300\", \"320302\", \"320303\", \"320304\", \"320305\", \"320311\", \"320321\", \"320322\", \"320323\", \"320324\", \"320381\", \"320382\", \"320400\", \"320402\", \"320404\", \"320405\", \"320411\", \"320412\", \"320481\", \"320482\", \"320500\", \"320502\", \"320503\", \"320504\", \"320505\", \"320506\", \"320507\", \"320581\", \"320582\", \"320583\", \"320584\", \"320585\", \"320600\", \"320602\", \"320611\", \"320621\", \"320623\", \"320681\", \"320682\", \"320683\", \"320684\", \"320700\", \"320703\", \"320705\", \"320706\", \"320721\", \"320722\", \"320723\", \"320724\", \"320800\", \"320802\", \"320803\", \"320804\", \"320811\", \"320826\", \"320829\", \"320830\", \"320831\", \"320900\", \"320902\", \"320903\", \"320921\", \"320922\", \"320923\", \"320924\", \"320925\", \"320981\", \"320982\", \"321000\", \"321002\", \"321003\", \"321011\", \"321023\", \"321081\", \"321084\", \"321088\", \"321100\", \"321102\", \"321111\", \"321112\", \"321181\", \"321182\", \"321183\", \"321200\", \"321202\", \"321203\", \"321281\", \"321282\", \"321283\", \"321284\", \"321300\", \"321302\", \"321311\", \"321322\", \"321323\", \"321324\", \"330000\", \"330100\", \"330102\", \"330103\", \"330104\", \"330105\", \"330106\", \"330108\", \"330109\", \"330110\", \"330122\", \"330127\", \"330182\", \"330183\", \"330185\", \"330200\", \"330203\", \"330204\", \"330205\", \"330206\", \"330211\", \"330212\", \"330225\", \"330226\", \"330281\", \"330282\", \"330283\", \"330300\", \"330302\", \"330303\", \"330304\", \"330322\", \"330324\", \"330326\", \"330327\", \"330328\", \"330329\", \"330381\", \"330382\", \"330400\", \"330402\", \"330411\", \"330421\", \"330424\", \"330481\", \"330482\", \"330483\", \"330500\", \"330502\", \"330503\", \"330521\", \"330522\", \"330523\", \"330600\", \"330602\", \"330621\", \"330624\", \"330681\", \"330682\", \"330683\", \"330700\", \"330702\", \"330703\", \"330723\", \"330726\", \"330727\", \"330781\", \"330782\", \"330783\", \"330784\", \"330800\", \"330802\", \"330803\", \"330822\", \"330824\", \"330825\", \"330881\", \"330900\", \"330902\", \"330903\", \"330921\", \"330922\", \"331000\", \"331002\", \"331003\", \"331004\", \"331021\", \"331022\", \"331023\", \"331024\", \"331081\", \"331082\", \"331100\", \"331102\", \"331121\", \"331122\", \"331123\", \"331124\", \"331125\", \"331126\", \"331127\", \"331181\", \"340000\", \"340100\", \"340102\", \"340103\", \"340104\", \"340111\", \"340121\", \"340122\", \"340123\", \"340200\", \"340202\", \"340203\", \"340207\", \"340208\", \"340221\", \"340222\", \"340223\", \"340300\", \"340302\", \"340303\", \"340304\", \"340311\", \"340321\", \"340322\", \"340323\", \"340400\", \"340402\", \"340403\", \"340404\", \"340405\", \"340406\", \"340421\", \"340500\", \"340502\", \"340503\", \"340504\", \"340521\", \"340600\", \"340602\", \"340603\", \"340604\", \"340621\", \"340700\", \"340702\", \"340703\", \"340711\", \"340721\", \"340800\", \"340802\", \"340803\", \"340811\", \"340822\", \"340823\", \"340824\", \"340825\", \"340826\", \"340827\", \"340828\", \"340881\", \"341000\", \"341002\", \"341003\", \"341004\", \"341021\", \"341022\", \"341023\", \"341024\", \"341100\", \"341102\", \"341103\", \"341122\", \"341124\", \"341125\", \"341126\", \"341181\", \"341182\", \"341200\", \"341202\", \"341203\", \"341204\", \"341221\", \"341222\", \"341225\", \"341226\", \"341282\", \"341300\", \"341302\", \"341321\", \"341322\", \"341323\", \"341324\", \"341400\", \"341402\", \"341421\", \"341422\", \"341423\", \"341424\", \"341500\", \"341502\", \"341503\", \"341521\", \"341522\", \"341523\", \"341524\", \"341525\", \"341600\", \"341602\", \"341621\", \"341622\", \"341623\", \"341700\", \"341702\", \"341721\", \"341722\", \"341723\", \"341800\", \"341802\", \"341821\", \"341822\", \"341823\", \"341824\", \"341825\", \"341881\", \"350000\", \"350100\", \"350102\", \"350103\", \"350104\", \"350105\", \"350111\", \"350121\", \"350122\", \"350123\", \"350124\", \"350125\", \"350128\", \"350181\", \"350182\", \"350200\", \"350203\", \"350205\", \"350206\", \"350211\", \"350212\", \"350213\", \"350300\", \"350302\", \"350303\", \"350304\", \"350305\", \"350322\", \"350400\", \"350402\", \"350403\", \"350421\", \"350423\", \"350424\", \"350425\", \"350426\", \"350427\", \"350428\", \"350429\", \"350430\", \"350481\", \"350500\", \"350502\", \"350503\", \"350504\", \"350505\", \"350521\", \"350524\", \"350525\", \"350526\", \"350527\", \"350581\", \"350582\", \"350583\", \"350600\", \"350602\", \"350603\", \"350622\", \"350623\", \"350624\", \"350625\", \"350626\", \"350627\", \"350628\", \"350629\", \"350681\", \"350700\", \"350702\", \"350721\", \"350722\", \"350723\", \"350724\", \"350725\", \"350781\", \"350782\", \"350783\", \"350784\", \"350800\", \"350802\", \"350821\", \"350822\", \"350823\", \"350824\", \"350825\", \"350881\", \"350900\", \"350902\", \"350921\", \"350922\", \"350923\", \"350924\", \"350925\", \"350926\", \"350981\", \"350982\", \"360000\", \"360100\", \"360102\", \"360103\", \"360104\", \"360105\", \"360111\", \"360121\", \"360122\", \"360123\", \"360124\", \"360200\", \"360202\", \"360203\", \"360222\", \"360281\", \"360300\", \"360302\", \"360313\", \"360321\", \"360322\", \"360323\", \"360400\", \"360402\", \"360403\", \"360421\", \"360423\", \"360424\", \"360425\", \"360426\", \"360427\", \"360428\", \"360429\", \"360430\", \"360481\", \"360500\", \"360502\", \"360521\", \"360600\", \"360602\", \"360622\", \"360681\", \"360700\", \"360702\", \"360721\", \"360722\", \"360723\", \"360724\", \"360725\", \"360726\", \"360727\", \"360728\", \"360729\", \"360730\", \"360731\", \"360732\", \"360733\", \"360734\", \"360735\", \"360781\", \"360782\", \"360800\", \"360802\", \"360803\", \"360821\", \"360822\", \"360823\", \"360824\", \"360825\", \"360826\", \"360827\", \"360828\", \"360829\", \"360830\", \"360881\", \"360900\", \"360902\", \"360921\", \"360922\", \"360923\", \"360924\", \"360925\", \"360926\", \"360981\", \"360982\", \"360983\", \"361000\", \"361002\", \"361021\", \"361022\", \"361023\", \"361024\", \"361025\", \"361026\", \"361027\", \"361028\", \"361029\", \"361030\", \"361100\", \"361102\", \"361121\", \"361122\", \"361123\", \"361124\", \"361125\", \"361126\", \"361127\", \"361128\", \"361129\", \"361130\", \"361181\", \"370000\", \"370100\", \"370102\", \"370103\", \"370104\", \"370105\", \"370112\", \"370113\", \"370124\", \"370125\", \"370126\", \"370181\", \"370200\", \"370202\", \"370203\", \"370205\", \"370211\", \"370212\", \"370213\", \"370214\", \"370281\", \"370282\", \"370283\", \"370284\", \"370285\", \"370300\", \"370302\", \"370303\", \"370304\", \"370305\", \"370306\", \"370321\", \"370322\", \"370323\", \"370400\", \"370402\", \"370403\", \"370404\", \"370405\", \"370406\", \"370481\", \"370500\", \"370502\", \"370503\", \"370521\", \"370522\", \"370523\", \"370600\", \"370602\", \"370611\", \"370612\", \"370613\", \"370634\", \"370681\", \"370682\", \"370683\", \"370684\", \"370685\", \"370686\", \"370687\", \"370700\", \"370702\", \"370703\", \"370704\", \"370705\", \"370724\", \"370725\", \"370781\", \"370782\", \"370783\", \"370784\", \"370785\", \"370786\", \"370800\", \"370802\", \"370811\", \"370826\", \"370827\", \"370828\", \"370829\", \"370830\", \"370831\", \"370832\", \"370881\", \"370882\", \"370883\", \"370900\", \"370902\", \"370903\", \"370921\", \"370923\", \"370982\", \"370983\", \"371000\", \"371002\", \"371081\", \"371082\", \"371083\", \"371100\", \"371102\", \"371103\", \"371121\", \"371122\", \"371200\", \"371202\", \"371203\", \"371300\", \"371302\", \"371311\", \"371312\", \"371321\", \"371322\", \"371323\", \"371324\", \"371325\", \"371326\", \"371327\", \"371328\", \"371329\", \"371400\", \"371402\", \"371421\", \"371422\", \"371423\", \"371424\", \"371425\", \"371426\", \"371427\", \"371428\", \"371481\", \"371482\", \"371500\", \"371502\", \"371521\", \"371522\", \"371523\", \"371524\", \"371525\", \"371526\", \"371581\", \"371600\", \"371602\", \"371621\", \"371622\", \"371623\", \"371624\", \"371625\", \"371626\", \"371700\", \"371702\", \"371721\", \"371722\", \"371723\", \"371724\", \"371725\", \"371726\", \"371727\", \"371728\", \"410000\", \"410100\", \"410102\", \"410103\", \"410104\", \"410105\", \"410106\", \"410108\", \"410122\", \"410181\", \"410182\", \"410183\", \"410184\", \"410185\", \"410200\", \"410202\", \"410203\", \"410204\", \"410205\", \"410211\", \"410221\", \"410222\", \"410223\", \"410224\", \"410225\", \"410300\", \"410302\", \"410303\", \"410304\", \"410305\", \"410306\", \"410307\", \"410322\", \"410323\", \"410324\", \"410325\", \"410326\", \"410327\", \"410328\", \"410329\", \"410381\", \"410400\", \"410402\", \"410403\", \"410404\", \"410411\", \"410421\", \"410422\", \"410423\", \"410425\", \"410481\", \"410482\", \"410500\", \"410502\", \"410503\", \"410505\", \"410506\", \"410522\", \"410523\", \"410526\", \"410527\", \"410581\", \"410600\", \"410602\", \"410603\", \"410611\", \"410621\", \"410622\", \"410700\", \"410702\", \"410703\", \"410704\", \"410711\", \"410721\", \"410724\", \"410725\", \"410726\", \"410727\", \"410728\", \"410781\", \"410782\", \"410800\", \"410802\", \"410803\", \"410804\", \"410811\", \"410821\", \"410822\", \"410823\", \"410825\", \"410881\", \"410882\", \"410883\", \"410900\", \"410902\", \"410922\", \"410923\", \"410926\", \"410927\", \"410928\", \"411000\", \"411002\", \"411023\", \"411024\", \"411025\", \"411081\", \"411082\", \"411100\", \"411102\", \"411103\", \"411104\", \"411121\", \"411122\", \"411200\", \"411202\", \"411221\", \"411222\", \"411224\", \"411281\", \"411282\", \"411300\", \"411302\", \"411303\", \"411321\", \"411322\", \"411323\", \"411324\", \"411325\", \"411326\", \"411327\", \"411328\", \"411329\", \"411330\", \"411381\", \"411400\", \"411402\", \"411403\", \"411421\", \"411422\", \"411423\", \"411424\", \"411425\", \"411426\", \"411481\", \"411500\", \"411502\", \"411503\", \"411521\", \"411522\", \"411523\", \"411524\", \"411525\", \"411526\", \"411527\", \"411528\", \"411600\", \"411602\", \"411621\", \"411622\", \"411623\", \"411624\", \"411625\", \"411626\", \"411627\", \"411628\", \"411681\", \"411700\", \"411702\", \"411721\", \"411722\", \"411723\", \"411724\", \"411725\", \"411726\", \"411727\", \"411728\", \"411729\", \"420000\", \"420100\", \"420102\", \"420103\", \"420104\", \"420105\", \"420106\", \"420107\", \"420111\", \"420112\", \"420113\", \"420114\", \"420115\", \"420116\", \"420117\", \"420200\", \"420202\", \"420203\", \"420204\", \"420205\", \"420222\", \"420281\", \"420300\", \"420302\", \"420303\", \"420321\", \"420322\", \"420323\", \"420324\", \"420325\", \"420381\", \"420500\", \"420502\", \"420503\", \"420504\", \"420505\", \"420506\", \"420525\", \"420526\", \"420527\", \"420528\", \"420529\", \"420581\", \"420582\", \"420583\", \"420600\", \"420602\", \"420606\", \"420607\", \"420624\", \"420625\", \"420626\", \"420682\", \"420683\", \"420684\", \"420700\", \"420702\", \"420703\", \"420704\", \"420800\", \"420802\", \"420804\", \"420821\", \"420822\", \"420881\", \"420900\", \"420902\", \"420921\", \"420922\", \"420923\", \"420981\", \"420982\", \"420984\", \"421000\", \"421002\", \"421003\", \"421022\", \"421023\", \"421024\", \"421081\", \"421083\", \"421087\", \"421100\", \"421102\", \"421121\", \"421122\", \"421123\", \"421124\", \"421125\", \"421126\", \"421127\", \"421181\", \"421182\", \"421200\", \"421202\", \"421221\", \"421222\", \"421223\", \"421224\", \"421281\", \"421300\", \"421302\", \"421381\", \"422800\", \"422801\", \"422802\", \"422822\", \"422823\", \"422825\", \"422826\", \"422827\", \"422828\", \"429000\", \"429004\", \"429005\", \"429006\", \"429021\", \"430000\", \"430100\", \"430102\", \"430103\", \"430104\", \"430105\", \"430111\", \"430121\", \"430122\", \"430124\", \"430181\", \"430200\", \"430202\", \"430203\", \"430204\", \"430211\", \"430221\", \"430223\", \"430224\", \"430225\", \"430281\", \"430300\", \"430302\", \"430304\", \"430321\", \"430381\", \"430382\", \"430400\", \"430405\", \"430406\", \"430407\", \"430408\", \"430412\", \"430421\", \"430422\", \"430423\", \"430424\", \"430426\", \"430481\", \"430482\", \"430500\", \"430502\", \"430503\", \"430511\", \"430521\", \"430522\", \"430523\", \"430524\", \"430525\", \"430527\", \"430528\", \"430529\", \"430581\", \"430600\", \"430602\", \"430603\", \"430611\", \"430621\", \"430623\", \"430624\", \"430626\", \"430681\", \"430682\", \"430700\", \"430702\", \"430703\", \"430721\", \"430722\", \"430723\", \"430724\", \"430725\", \"430726\", \"430781\", \"430800\", \"430802\", \"430811\", \"430821\", \"430822\", \"430900\", \"430902\", \"430903\", \"430921\", \"430922\", \"430923\", \"430981\", \"431000\", \"431002\", \"431003\", \"431021\", \"431022\", \"431023\", \"431024\", \"431025\", \"431026\", \"431027\", \"431028\", \"431081\", \"431100\", \"431102\", \"431103\", \"431121\", \"431122\", \"431123\", \"431124\", \"431125\", \"431126\", \"431127\", \"431128\", \"431129\", \"431200\", \"431202\", \"431221\", \"431222\", \"431223\", \"431224\", \"431225\", \"431226\", \"431227\", \"431228\", \"431229\", \"431230\", \"431281\", \"431300\", \"431302\", \"431321\", \"431322\", \"431381\", \"431382\", \"433100\", \"433101\", \"433122\", \"433123\", \"433124\", \"433125\", \"433126\", \"433127\", \"433130\", \"440000\", \"440100\", \"440103\", \"440104\", \"440105\", \"440106\", \"440111\", \"440112\", \"440113\", \"440114\", \"440115\", \"440116\", \"440183\", \"440184\", \"440200\", \"440203\", \"440204\", \"440205\", \"440222\", \"440224\", \"440229\", \"440232\", \"440233\", \"440281\", \"440282\", \"440300\", \"440303\", \"440304\", \"440305\", \"440306\", \"440307\", \"440308\", \"440400\", \"440402\", \"440403\", \"440404\", \"440500\", \"440507\", \"440511\", \"440512\", \"440513\", \"440514\", \"440515\", \"440523\", \"440600\", \"440604\", \"440605\", \"440606\", \"440607\", \"440608\", \"440700\", \"440703\", \"440704\", \"440705\", \"440781\", \"440783\", \"440784\", \"440785\", \"440800\", \"440802\", \"440803\", \"440804\", \"440811\", \"440823\", \"440825\", \"440881\", \"440882\", \"440883\", \"440900\", \"440902\", \"440903\", \"440923\", \"440981\", \"440982\", \"440983\", \"441200\", \"441202\", \"441203\", \"441223\", \"441224\", \"441225\", \"441226\", \"441283\", \"441284\", \"441300\", \"441302\", \"441303\", \"441322\", \"441323\", \"441324\", \"441400\", \"441402\", \"441421\", \"441422\", \"441423\", \"441424\", \"441426\", \"441427\", \"441481\", \"441500\", \"441502\", \"441521\", \"441523\", \"441581\", \"441600\", \"441602\", \"441621\", \"441622\", \"441623\", \"441624\", \"441625\", \"441700\", \"441702\", \"441721\", \"441723\", \"441781\", \"441800\", \"441802\", \"441821\", \"441823\", \"441825\", \"441826\", \"441827\", \"441881\", \"441882\", \"441900\", \"442000\", \"445100\", \"445102\", \"445121\", \"445122\", \"445200\", \"445202\", \"445221\", \"445222\", \"445224\", \"445281\", \"445300\", \"445302\", \"445321\", \"445322\", \"445323\", \"445381\", \"450000\", \"450100\", \"450102\", \"450103\", \"450105\", \"450107\", \"450108\", \"450109\", \"450122\", \"450123\", \"450124\", \"450125\", \"450126\", \"450127\", \"450200\", \"450202\", \"450203\", \"450204\", \"450205\", \"450221\", \"450222\", \"450223\", \"450224\", \"450225\", \"450226\", \"450300\", \"450302\", \"450303\", \"450304\", \"450305\", \"450311\", \"450321\", \"450322\", \"450323\", \"450324\", \"450325\", \"450326\", \"450327\", \"450328\", \"450329\", \"450330\", \"450331\", \"450332\", \"450400\", \"450403\", \"450404\", \"450405\", \"450421\", \"450422\", \"450423\", \"450481\", \"450500\", \"450502\", \"450503\", \"450512\", \"450521\", \"450600\", \"450602\", \"450603\", \"450621\", \"450681\", \"450700\", \"450702\", \"450703\", \"450721\", \"450722\", \"450800\", \"450802\", \"450803\", \"450804\", \"450821\", \"450881\", \"450900\", \"450902\", \"450921\", \"450922\", \"450923\", \"450924\", \"450981\", \"451000\", \"451002\", \"451021\", \"451022\", \"451023\", \"451024\", \"451025\", \"451026\", \"451027\", \"451028\", \"451029\", \"451030\", \"451031\", \"451100\", \"451102\", \"451121\", \"451122\", \"451123\", \"451200\", \"451202\", \"451221\", \"451222\", \"451223\", \"451224\", \"451225\", \"451226\", \"451227\", \"451228\", \"451229\", \"451281\", \"451300\", \"451302\", \"451321\", \"451322\", \"451323\", \"451324\", \"451381\", \"451400\", \"451402\", \"451421\", \"451422\", \"451423\", \"451424\", \"451425\", \"451481\", \"460000\", \"460100\", \"460105\", \"460106\", \"460107\", \"460108\", \"460200\", \"469000\", \"469001\", \"469002\", \"469003\", \"469005\", \"469006\", \"469007\", \"469025\", \"469026\", \"469027\", \"469028\", \"469030\", \"469031\", \"469033\", \"469034\", \"469035\", \"469036\", \"469037\", \"469038\", \"469039\", \"500000\", \"500101\", \"500102\", \"500103\", \"500104\", \"500105\", \"500106\", \"500107\", \"500108\", \"500109\", \"500110\", \"500111\", \"500112\", \"500113\", \"500114\", \"500115\", \"500116\", \"500117\", \"500118\", \"500119\", \"500200\", \"500222\", \"500223\", \"500224\", \"500225\", \"500226\", \"500227\", \"500228\", \"500229\", \"500230\", \"500231\", \"500232\", \"500233\", \"500234\", \"500235\", \"500236\", \"500237\", \"500238\", \"500240\", \"500241\", \"500242\", \"500243\", \"510000\", \"510100\", \"510104\", \"510105\", \"510106\", \"510107\", \"510108\", \"510112\", \"510113\", \"510114\", \"510115\", \"510121\", \"510122\", \"510124\", \"510129\", \"510131\", \"510132\", \"510181\", \"510182\", \"510183\", \"510184\", \"510300\", \"510302\", \"510303\", \"510304\", \"510311\", \"510321\", \"510322\", \"510400\", \"510402\", \"510403\", \"510411\", \"510421\", \"510422\", \"510500\", \"510502\", \"510503\", \"510504\", \"510521\", \"510522\", \"510524\", \"510525\", \"510600\", \"510603\", \"510623\", \"510626\", \"510681\", \"510682\", \"510683\", \"510700\", \"510703\", \"510704\", \"510722\", \"510723\", \"510724\", \"510725\", \"510726\", \"510727\", \"510781\", \"510800\", \"510802\", \"510811\", \"510812\", \"510821\", \"510822\", \"510823\", \"510824\", \"510900\", \"510903\", \"510904\", \"510921\", \"510922\", \"510923\", \"511000\", \"511002\", \"511011\", \"511024\", \"511025\", \"511028\", \"511100\", \"511102\", \"511111\", \"511112\", \"511113\", \"511123\", \"511124\", \"511126\", \"511129\", \"511132\", \"511133\", \"511181\", \"511300\", \"511302\", \"511303\", \"511304\", \"511321\", \"511322\", \"511323\", \"511324\", \"511325\", \"511381\", \"511400\", \"511402\", \"511421\", \"511422\", \"511423\", \"511424\", \"511425\", \"511500\", \"511502\", \"511521\", \"511522\", \"511523\", \"511524\", \"511525\", \"511526\", \"511527\", \"511528\", \"511529\", \"511600\", \"511602\", \"511621\", \"511622\", \"511623\", \"511681\", \"511700\", \"511702\", \"511721\", \"511722\", \"511723\", \"511724\", \"511725\", \"511781\", \"511800\", \"511802\", \"511821\", \"511822\", \"511823\", \"511824\", \"511825\", \"511826\", \"511827\", \"511900\", \"511902\", \"511921\", \"511922\", \"511923\", \"512000\", \"512002\", \"512021\", \"512022\", \"512081\", \"513200\", \"513221\", \"513222\", \"513223\", \"513224\", \"513225\", \"513226\", \"513227\", \"513228\", \"513229\", \"513230\", \"513231\", \"513232\", \"513233\", \"513300\", \"513321\", \"513322\", \"513323\", \"513324\", \"513325\", \"513326\", \"513327\", \"513328\", \"513329\", \"513330\", \"513331\", \"513332\", \"513333\", \"513334\", \"513335\", \"513336\", \"513337\", \"513338\", \"513400\", \"513401\", \"513422\", \"513423\", \"513424\", \"513425\", \"513426\", \"513427\", \"513428\", \"513429\", \"513430\", \"513431\", \"513432\", \"513433\", \"513434\", \"513435\", \"513436\", \"513437\", \"520000\", \"520100\", \"520102\", \"520103\", \"520111\", \"520112\", \"520113\", \"520114\", \"520121\", \"520122\", \"520123\", \"520181\", \"520200\", \"520201\", \"520203\", \"520221\", \"520222\", \"520300\", \"520302\", \"520303\", \"520321\", \"520322\", \"520323\", \"520324\", \"520325\", \"520326\", \"520327\", \"520328\", \"520329\", \"520330\", \"520381\", \"520382\", \"520400\", \"520402\", \"520421\", \"520422\", \"520423\", \"520424\", \"520425\", \"522200\", \"522201\", \"522222\", \"522223\", \"522224\", \"522225\", \"522226\", \"522227\", \"522228\", \"522229\", \"522230\", \"522300\", \"522301\", \"522322\", \"522323\", \"522324\", \"522325\", \"522326\", \"522327\", \"522328\", \"522400\", \"522401\", \"522422\", \"522423\", \"522424\", \"522425\", \"522426\", \"522427\", \"522428\", \"522600\", \"522601\", \"522622\", \"522623\", \"522624\", \"522625\", \"522626\", \"522627\", \"522628\", \"522629\", \"522630\", \"522631\", \"522632\", \"522633\", \"522634\", \"522635\", \"522636\", \"522700\", \"522701\", \"522702\", \"522722\", \"522723\", \"522725\", \"522726\", \"522727\", \"522728\", \"522729\", \"522730\", \"522731\", \"522732\", \"530000\", \"530100\", \"530102\", \"530103\", \"530111\", \"530112\", \"530113\", \"530121\", \"530122\", \"530124\", \"530125\", \"530126\", \"530127\", \"530128\", \"530129\", \"530181\", \"530300\", \"530302\", \"530321\", \"530322\", \"530323\", \"530324\", \"530325\", \"530326\", \"530328\", \"530381\", \"530400\", \"530402\", \"530421\", \"530422\", \"530423\", \"530424\", \"530425\", \"530426\", \"530427\", \"530428\", \"530500\", \"530502\", \"530521\", \"530522\", \"530523\", \"530524\", \"530600\", \"530602\", \"530621\", \"530622\", \"530623\", \"530624\", \"530625\", \"530626\", \"530627\", \"530628\", \"530629\", \"530630\", \"530700\", \"530702\", \"530721\", \"530722\", \"530723\", \"530724\", \"530800\", \"530802\", \"530821\", \"530822\", \"530823\", \"530824\", \"530825\", \"530826\", \"530827\", \"530828\", \"530829\", \"530900\", \"530902\", \"530921\", \"530922\", \"530923\", \"530924\", \"530925\", \"530926\", \"530927\", \"532300\", \"532301\", \"532322\", \"532323\", \"532324\", \"532325\", \"532326\", \"532327\", \"532328\", \"532329\", \"532331\", \"532500\", \"532501\", \"532502\", \"532522\", \"532523\", \"532524\", \"532525\", \"532526\", \"532527\", \"532528\", \"532529\", \"532530\", \"532531\", \"532532\", \"532600\", \"532621\", \"532622\", \"532623\", \"532624\", \"532625\", \"532626\", \"532627\", \"532628\", \"532800\", \"532801\", \"532822\", \"532823\", \"532900\", \"532901\", \"532922\", \"532923\", \"532924\", \"532925\", \"532926\", \"532927\", \"532928\", \"532929\", \"532930\", \"532931\", \"532932\", \"533100\", \"533102\", \"533103\", \"533122\", \"533123\", \"533124\", \"533300\", \"533321\", \"533323\", \"533324\", \"533325\", \"533400\", \"533421\", \"533422\", \"533423\", \"540000\", \"540100\", \"540102\", \"540121\", \"540122\", \"540123\", \"540124\", \"540125\", \"540126\", \"540127\", \"542100\", \"542121\", \"542122\", \"542123\", \"542124\", \"542125\", \"542126\", \"542127\", \"542128\", \"542129\", \"542132\", \"542133\", \"542200\", \"542221\", \"542222\", \"542223\", \"542224\", \"542225\", \"542226\", \"542227\", \"542228\", \"542229\", \"542231\", \"542232\", \"542233\", \"542300\", \"542301\", \"542322\", \"542323\", \"542324\", \"542325\", \"542326\", \"542327\", \"542328\", \"542329\", \"542330\", \"542331\", \"542332\", \"542333\", \"542334\", \"542335\", \"542336\", \"542337\", \"542338\", \"542400\", \"542421\", \"542422\", \"542423\", \"542424\", \"542425\", \"542426\", \"542427\", \"542428\", \"542429\", \"542430\", \"542500\", \"542521\", \"542522\", \"542523\", \"542524\", \"542525\", \"542526\", \"542527\", \"542600\", \"542621\", \"542622\", \"542623\", \"542624\", \"542625\", \"542626\", \"542627\", \"610000\", \"610100\", \"610102\", \"610103\", \"610104\", \"610111\", \"610112\", \"610113\", \"610114\", \"610115\", \"610116\", \"610122\", \"610124\", \"610125\", \"610126\", \"610200\", \"610202\", \"610203\", \"610204\", \"610222\", \"610300\", \"610302\", \"610303\", \"610304\", \"610322\", \"610323\", \"610324\", \"610326\", \"610327\", \"610328\", \"610329\", \"610330\", \"610331\", \"610400\", \"610402\", \"610403\", \"610404\", \"610422\", \"610423\", \"610424\", \"610425\", \"610426\", \"610427\", \"610428\", \"610429\", \"610430\", \"610431\", \"610481\", \"610500\", \"610502\", \"610521\", \"610522\", \"610523\", \"610524\", \"610525\", \"610526\", \"610527\", \"610528\", \"610581\", \"610582\", \"610600\", \"610602\", \"610621\", \"610622\", \"610623\", \"610624\", \"610625\", \"610626\", \"610627\", \"610628\", \"610629\", \"610630\", \"610631\", \"610632\", \"610700\", \"610702\", \"610721\", \"610722\", \"610723\", \"610724\", \"610725\", \"610726\", \"610727\", \"610728\", \"610729\", \"610730\", \"610800\", \"610802\", \"610821\", \"610822\", \"610823\", \"610824\", \"610825\", \"610826\", \"610827\", \"610828\", \"610829\", \"610830\", \"610831\", \"610900\", \"610902\", \"610921\", \"610922\", \"610923\", \"610924\", \"610925\", \"610926\", \"610927\", \"610928\", \"610929\", \"611000\", \"611002\", \"611021\", \"611022\", \"611023\", \"611024\", \"611025\", \"611026\", \"620000\", \"620100\", \"620102\", \"620103\", \"620104\", \"620105\", \"620111\", \"620121\", \"620122\", \"620123\", \"620200\", \"620300\", \"620302\", \"620321\", \"620400\", \"620402\", \"620403\", \"620421\", \"620422\", \"620423\", \"620500\", \"620502\", \"620503\", \"620521\", \"620522\", \"620523\", \"620524\", \"620525\", \"620600\", \"620602\", \"620621\", \"620622\", \"620623\", \"620700\", \"620702\", \"620721\", \"620722\", \"620723\", \"620724\", \"620725\", \"620800\", \"620802\", \"620821\", \"620822\", \"620823\", \"620824\", \"620825\", \"620826\", \"620900\", \"620902\", \"620921\", \"620922\", \"620923\", \"620924\", \"620981\", \"620982\", \"621000\", \"621002\", \"621021\", \"621022\", \"621023\", \"621024\", \"621025\", \"621026\", \"621027\", \"621100\", \"621102\", \"621121\", \"621122\", \"621123\", \"621124\", \"621125\", \"621126\", \"621200\", \"621202\", \"621221\", \"621222\", \"621223\", \"621224\", \"621225\", \"621226\", \"621227\", \"621228\", \"622900\", \"622901\", \"622921\", \"622922\", \"622923\", \"622924\", \"622925\", \"622926\", \"622927\", \"623000\", \"623001\", \"623021\", \"623022\", \"623023\", \"623024\", \"623025\", \"623026\", \"623027\", \"630000\", \"630100\", \"630102\", \"630103\", \"630104\", \"630105\", \"630121\", \"630122\", \"630123\", \"632100\", \"632121\", \"632122\", \"632123\", \"632126\", \"632127\", \"632128\", \"632200\", \"632221\", \"632222\", \"632223\", \"632224\", \"632300\", \"632321\", \"632322\", \"632323\", \"632324\", \"632500\", \"632521\", \"632522\", \"632523\", \"632524\", \"632525\", \"632600\", \"632621\", \"632622\", \"632623\", \"632624\", \"632625\", \"632626\", \"632700\", \"632721\", \"632722\", \"632723\", \"632724\", \"632725\", \"632726\", \"632800\", \"632801\", \"632802\", \"632821\", \"632822\", \"632823\", \"640000\", \"640100\", \"640104\", \"640105\", \"640106\", \"640121\", \"640122\", \"640181\", \"640200\", \"640202\", \"640205\", \"640221\", \"640300\", \"640302\", \"640323\", \"640324\", \"640381\", \"640400\", \"640402\", \"640422\", \"640423\", \"640424\", \"640425\", \"640500\", \"640502\", \"640521\", \"640522\", \"650000\", \"650100\", \"650102\", \"650103\", \"650104\", \"650105\", \"650106\", \"650107\", \"650108\", \"650121\", \"650200\", \"650202\", \"650203\", \"650204\", \"650205\", \"652100\", \"652101\", \"652122\", \"652123\", \"652200\", \"652201\", \"652222\", \"652223\", \"652300\", \"652301\", \"652302\", \"652303\", \"652323\", \"652324\", \"652325\", \"652327\", \"652328\", \"652700\", \"652701\", \"652722\", \"652723\", \"652800\", \"652801\", \"652822\", \"652823\", \"652824\", \"652825\", \"652826\", \"652827\", \"652828\", \"652829\", \"652900\", \"652901\", \"652922\", \"652923\", \"652924\", \"652925\", \"652926\", \"652927\", \"652928\", \"652929\", \"653000\", \"653001\", \"653022\", \"653023\", \"653024\", \"653100\", \"653101\", \"653121\", \"653122\", \"653123\", \"653124\", \"653125\", \"653126\", \"653127\", \"653128\", \"653129\", \"653130\", \"653131\", \"653200\", \"653201\", \"653221\", \"653222\", \"653223\", \"653224\", \"653225\", \"653226\", \"653227\", \"654000\", \"654002\", \"654003\", \"654021\", \"654022\", \"654023\", \"654024\", \"654025\", \"654026\", \"654027\", \"654028\", \"654200\", \"654201\", \"654202\", \"654221\", \"654223\", \"654224\", \"654225\", \"654226\", \"654300\", \"654301\", \"654321\", \"654322\", \"654323\", \"654324\", \"654325\", \"654326\", \"659000\", \"659001\", \"659002\", \"659003\", \"659004\", \"710000\", \"810000\", \"820000\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "name": "MacedonianIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[String]generateInvalid(BaseProviders)", "[String]basePart(BaseProviders,LocalDate,Gender)", "[String]dd(LocalDate)", "[String]mm(LocalDate)", "[String]yyy(LocalDate)", "[String]rr(BaseProviders)", "[String]sss(BaseProviders,Gender)", "[int]checksum(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]dd(LocalDate)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]mm(LocalDate)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]yyy(LocalDate)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]rr(BaseProviders)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]sss(BaseProviders,Gender)", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[int]checksum(String)"], "overrides": null, "attributes": [], "class_docstring": "\nThe Macedonian Identity Number is a unique personal identification number of 13 digits in a form \"DD MM YYY RR BBB K\"\n\n<a href=\"https://en.wikipedia.org/wiki/National_identification_number#North_Macedonia\">Intro</a>\n<a href=\"https://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\">Specification</a>\n", "original_string": "public class MacedonianIdNumber implements IdNumberGenerator {\n    private static final List<String> REGIONS = List.of(\"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\");\n\n    @Override\n    public String countryCode() {\n        return \"MK\";\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = basePart(faker, birthday, gender);\n        return new PersonIdNumber(basePart + checksum(basePart), birthday, gender);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        Gender gender = randomGender(faker);\n        String basePart = basePart(faker, birthday, gender);\n        return basePart + (checksum(basePart) + 1) % 10;\n    }\n\n    private String basePart(BaseProviders faker, LocalDate bd, Gender gender) {\n        return dd(bd) + mm(bd) + yyy(bd) + rr(faker) + sss(faker, gender);\n    }\n\n    private String dd(LocalDate bd) {\n        return \"%02d\".formatted(bd.getDayOfMonth());\n    }\n\n    private String mm(LocalDate bd) {\n        return \"%02d\".formatted(bd.getMonthValue());\n    }\n\n    /**\n     * last three digits of the year of birth\n     */\n    private String yyy(LocalDate bd) {\n        return \"%03d\".formatted(bd.getYear() % 1000);\n    }\n\n    /**\n     * The two digit registry number depends on the citizens place of birth\n     */\n    private String rr(BaseProviders faker) {\n        return REGIONS.get(faker.number().numberBetween(0, REGIONS.size()));\n    }\n\n    /**\n     * The combination of the citizen's sex and ordinal number of birth is presented as a 3-digit number\n     * - from 000 to 499 for the male, and\n     * - from 500 to 999 for the female citizens.\n     */\n    private String sss(BaseProviders faker, Gender gender) {\n        int ordinal = switch (gender) {\n            case FEMALE -> faker.number().numberBetween(500, 1000);\n            case MALE -> faker.number().numberBetween(0, 500);\n        };\n        return \"%03d\".formatted(ordinal);\n    }\n\n    int checksum(String text) {\n        int a = digitAt(text, 0);\n        int b = digitAt(text, 1);\n        int c = digitAt(text, 2);\n        int d = digitAt(text, 3);\n        int e = digitAt(text, 4);\n        int f = digitAt(text, 5);\n        int g = digitAt(text, 6);\n        int h = digitAt(text, 7);\n        int i = digitAt(text, 8);\n        int j = digitAt(text, 9);\n        int k = digitAt(text, 10);\n        int l = digitAt(text, 11);\n\n        int m = 11 - (7 * (a + g) + 6 * (b + h) + 5 * (c + i) + 4 * (d + j) + 3 * (e + k) + 2 * (f + l)) % 11;\n\n        // If m is between 1 and 9, the checksum is the same as the number m;\n        // If m is 10 or 11 checksum becomes 0 (zero).\n        return switch (m) {\n            case 10, 11 -> 0;\n            default -> m;\n        };\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final List<String> REGIONS = List.of(\"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<String>", "name": "REGIONS = List.of(\"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\")", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "name": "SingaporeIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]format(LocalDate,boolean,int[])", "[String]generateValid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[PersonIdNumber]generateValidIdNumber(BaseProviders,LocalDate,boolean,Gender)", "[String]generateInvalid(BaseProviders)", "[String]getValidFIN(BaseProviders,Type)", "[LocalDate]randomBirthDate(BaseProviders,Type)", "[int[]]randomDigits(BaseProviders)", "[char]centuryPrefixCitizen(LocalDate)", "[char]centuryPrefixForeigner(LocalDate)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]format(LocalDate,boolean,int[])", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]generateValid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[PersonIdNumber]generateValidIdNumber(BaseProviders,LocalDate,boolean,Gender)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]getValidFIN(BaseProviders,Type)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[LocalDate]randomBirthDate(BaseProviders,Type)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[int[]]randomDigits(BaseProviders)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[char]centuryPrefixCitizen(LocalDate)", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[char]centuryPrefixForeigner(LocalDate)"], "overrides": null, "attributes": [], "class_docstring": "\nGenerate number of UIN/FIN for Singapore.\nAlgorithm is given from <a href=\"http://www.ngiam.net/NRIC/\">http://www.ngiam.net/NRIC/</a>\nSee <a href=\"https://en.wikipedia.org/wiki/National_Registration_Identity_Card\">...</a>\n", "original_string": "public class SingaporeIdNumber implements IdNumberGenerator {\n    @Override\n    public String countryCode() {\n        return \"SG\";\n    }\n\n    public enum Type {SINGAPOREAN_TWENTIETH_CENTURY, FOREIGNER_TWENTIETH_CENTURY, SINGAPOREAN_TWENTY_FIRST_CENTURY, FOREIGNER_TWENTY_FIRST_CENTURY}\n\n    private static String format(LocalDate issueDate, boolean citizen, int[] randomDigits) {\n        int checkDigitInitialValue = issueDate.getYear() < 2000 ? 0 : 4;\n        char firstLetter = citizen ? centuryPrefixCitizen(issueDate) : centuryPrefixForeigner(issueDate);\n        String matchLetters = citizen ? UIN_LETTERS : FIN_LETTERS;\n        int checkDigit = checkDigitInitialValue;\n\n        StringBuilder id = new StringBuilder(11);\n        id.append(firstLetter);\n        for (int i = 0; i < randomDigits.length; i++) {\n            checkDigit += randomDigits[i] * CODE[i];\n            id.append(randomDigits[i]);\n        }\n        checkDigit %= 11;\n        id.append(matchLetters.charAt(checkDigit));\n        return id.toString();\n    }\n\n    private static final int[] CODE = {0, 2, 7, 6, 5, 4, 3, 2};\n    private static final String FIN_LETTERS = \"XWUTRQPNMLK\";\n    private static final String UIN_LETTERS = \"JZIHGFEDCBA\";\n\n    @Override\n    public String generateValid(BaseProviders faker) {\n        return generateValid(faker, new IdNumberRequest(0, 100, ANY)).idNumber();\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthDate = Utils.birthday(faker, request);\n        boolean citizen = faker.bool().bool();\n        Gender gender = gender(faker, request);\n        return generateValidIdNumber(faker, birthDate, citizen, gender);\n    }\n\n    private static PersonIdNumber generateValidIdNumber(BaseProviders faker, LocalDate birthDate, boolean citizen, Gender gender) {\n        int[] number = randomDigits(faker);\n        String idNumber = format(birthDate, citizen, number);\n        return new PersonIdNumber(idNumber, birthDate, gender);\n    }\n\n    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return generateValid(faker) + \"42\";\n    }\n\n    public static String getValidFIN(BaseProviders f, Type type) {\n        LocalDate birthDate = randomBirthDate(f, type);\n        boolean citizen = switch (type) {\n            case SINGAPOREAN_TWENTIETH_CENTURY, SINGAPOREAN_TWENTY_FIRST_CENTURY -> true;\n            case FOREIGNER_TWENTIETH_CENTURY, FOREIGNER_TWENTY_FIRST_CENTURY -> false;\n        };\n        return generateValidIdNumber(f, birthDate, citizen, randomGender(f)).idNumber();\n    }\n\n    static LocalDate randomBirthDate(BaseProviders faker, Type type) {\n        int now = LocalDate.now().getYear();\n        return switch (type) {\n            case SINGAPOREAN_TWENTIETH_CENTURY,\n                 FOREIGNER_TWENTIETH_CENTURY -> faker.timeAndDate().birthday(now - 1900, now - 1999);\n            case SINGAPOREAN_TWENTY_FIRST_CENTURY,\n                 FOREIGNER_TWENTY_FIRST_CENTURY -> faker.timeAndDate().birthday(now - 2000, now - 2099);\n        };\n    }\n\n    private static int[] randomDigits(BaseProviders f) {\n        final RandomService random = f.random();\n        final int[] number = new int[7];\n        for (int i = 0; i < number.length; i++) {\n            number[i] = random.nextInt(0, 9);\n        }\n        return number;\n    }\n\n    static char centuryPrefixCitizen(LocalDate issueDate) {\n        int century = issueDate.getYear() / 100;\n        return (char) ('A' + century - 1);\n    }\n\n    static char centuryPrefixForeigner(LocalDate issueDate) {\n        int century = issueDate.getYear() / 100;\n        return (char) ('A' + century - 14);\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final int[] CODE = {0, 2, 7, 6, 5, 4, 3, 2};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int[]", "name": "CODE = {0, 2, 7, 6, 5, 4, 3, 2}", "syntax_pass": true}, {"attribute_expression": "private static final String FIN_LETTERS = \"XWUTRQPNMLK\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "FIN_LETTERS = \"XWUTRQPNMLK\"", "syntax_pass": true}, {"attribute_expression": "private static final String UIN_LETTERS = \"JZIHGFEDCBA\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "UIN_LETTERS = \"JZIHGFEDCBA\"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber", "name": "PortugueseIdNumber", "file_path": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java", "superclasses": "", "methods": ["[String]countryCode()", "[String]generateInvalid(BaseProviders)", "[String]generateValid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "[int]calculateDigitSum(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[String]countryCode()", "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[String]generateInvalid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[String]generateValid(BaseProviders)", "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[int]calculateDigitSum(String)"], "overrides": null, "attributes": [], "class_docstring": "\nPortuguese VAT identification number (NIF)\n<p>\nThe number is 9 digits, with modulus 11 checksum digit.\nThere is fixed list of valid first digits to signify different types of NIF numbers\n<p>\nSee <a href=\"https://pt.wikipedia.org/wiki/N%C3%BAmero_de_identifica%C3%A7%C3%A3o_fiscal\">N\u00famero de identifica\u00e7\u00e3o fiscal</a>\nand <a href=\"https://en.wikipedia.org/wiki/VAT_identification_number\">VAT identification number</a>\n", "original_string": "public class PortugueseIdNumber implements IdNumberGenerator {\n    @Override\n    public String countryCode() {\n        return \"PT\";\n    }\n\n    private static final Character[] VALID_FIRST_DIGITS = {'1', '2', '3', '5', '6', '8'};\n    private static final String[] VALID_FIRST_DOUBLE_DIGITS =\n        {\"45\", \"70\", \"71\", \"72\", \"74\", \"75\", \"77\", \"79\", \"90\", \"91\", \"98\", \"99\"};\n\n    @Override\n    public String generateInvalid(final BaseProviders faker) {\n        String digits = faker.number().digits(8);\n        int digitSum = calculateDigitSum(digits);\n        // by adding 5 to a valid checksum, we should invalidate\n        // by having the wrong checksum or just the wrong number of digits\n        return digits + (digitSum + 5);\n    }\n\n    @Override\n    public String generateValid(final BaseProviders faker) {\n        String digits;\n        if (faker.random().nextBoolean()) {\n            final char firstDigit = faker.options().option(VALID_FIRST_DIGITS);\n            digits = firstDigit + faker.number().digits(7);\n        } else {\n            final String firstDoubleDigit = faker.options().option(VALID_FIRST_DOUBLE_DIGITS);\n            digits = firstDoubleDigit + faker.number().digits(6);\n        }\n        int digitSum = calculateDigitSum(digits);\n        return digits + digitSum;\n    }\n\n    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        return new PersonIdNumber(generateValid(faker), birthday(faker, request), gender(faker, request));\n    }\n\n    private int calculateDigitSum(String numbers) {\n        int checkSum = 0;\n        for (int i = 1; i <= numbers.length(); i++) {\n            int digit = Character.getNumericValue(numbers.charAt(i - 1));\n            checkSum += (10 - i) * digit;\n        }\n\n        int val = (checkSum / 11) * 11;\n        checkSum -= val;\n        if (checkSum == 0 || checkSum == 1) {\n            checkSum = 0;\n        } else {\n            checkSum = 11 - checkSum;\n        }\n        return checkSum;\n    }\n}", "super_interfaces": ["IdNumberGenerator"], "fields": [{"attribute_expression": "private static final Character[] VALID_FIRST_DIGITS = {'1', '2', '3', '5', '6', '8'};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Character[]", "name": "VALID_FIRST_DIGITS = {'1', '2', '3', '5', '6', '8'}", "syntax_pass": true}, {"attribute_expression": "private static final String[] VALID_FIRST_DOUBLE_DIGITS =\n        {\"45\", \"70\", \"71\", \"72\", \"74\", \"75\", \"77\", \"79\", \"90\", \"91\", \"98\", \"99\"};", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "VALID_FIRST_DOUBLE_DIGITS =\n        {\"45\", \"70\", \"71\", \"72\", \"74\", \"75\", \"77\", \"79\", \"90\", \"91\", \"98\", \"99\"}", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "name": "IdNumberGeneratorPtBrUtil", "file_path": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "superclasses": "", "methods": ["[]IdNumberGeneratorPtBrUtil()", "[String]cnpj(BaseProviders,boolean,boolean,boolean)", "[String]cpf(BaseProviders,boolean,boolean)", "[boolean]isCNPJValid(String)", "[Boolean]isCPFValid(String)", "[int]calculateWeight(String,int,int,int)", "[int]digit(int)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[]IdNumberGeneratorPtBrUtil()", "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[String]cnpj(BaseProviders,boolean,boolean,boolean)", "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[String]cpf(BaseProviders,boolean,boolean)", "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[boolean]isCNPJValid(String)", "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[Boolean]isCPFValid(String)", "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[int]calculateWeight(String,int,int,int)", "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[int]digit(int)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IdNumberGeneratorPtBrUtil {\n\n    private IdNumberGeneratorPtBrUtil() {\n    }\n\n    /**\n     * <a href=\"https://en.wikipedia.org/wiki/CNPJ\">https://en.wikipedia.org/wiki/CNPJ</a>\n     *\n     * @param formatted a cnpj (un)formatted\n     * @param valid     a cnpj (in)valid\n     */\n    public static String cnpj(BaseProviders faker, boolean formatted, boolean valid, boolean multiBranch) {\n        String cnpj;\n\n        if (valid) {\n            StringBuilder partial = new StringBuilder();\n            for (int i = 0; i < 8; i++) {\n                partial.append(faker.random().nextInt(9));\n            }\n\n            if (multiBranch) {\n                String string = String.valueOf(faker.random().nextInt(1, 9999));\n                partial.append(String.valueOf('0').repeat(Math.max(0, 4 - string.length())));\n                partial.append(string);\n            } else {\n                partial.append(\"0001\");\n            }\n\n            cnpj = partial.toString();\n\n            int d1 = digit(calculateWeight(cnpj, 9, 4, 12) + calculateWeight(cnpj, 5, 0, 4));\n            int d2 = digit((d1 * 2) + calculateWeight(cnpj, 9, 5, 12) + calculateWeight(cnpj, 6, 0, 5));\n\n            cnpj = (cnpj + d1) + d2;\n        } else {\n            cnpj = String.valueOf(faker.random().nextInt(1000000000) + (faker.random().nextInt(90) + 10) * 1000000000000L);\n        }\n\n        String result = (formatted) ? DocumentFormatterUtil.cnpj(cnpj) : cnpj;\n\n        // Sometimes the generated number is not what you expected, for example, you expected an invalid number,\n        // but the generated number is valid. This fixes the issue by generating a new number until it matches the expectation.\n        if (isCNPJValid(result) != valid) {\n            result = cnpj(faker, formatted, valid, multiBranch);\n        }\n\n        return result;\n    }\n\n    /**\n     * <a href=\"https://en.wikipedia.org/wiki/CPF_number\">https://en.wikipedia.org/wiki/CPF_number</a>\n     *\n     * @param formatted a CPF (un)formatted\n     * @param valid     a CPF (in)valid\n     */\n    public static String cpf(BaseProviders faker, boolean formatted, boolean valid) {\n        String cpf;\n        if (valid) {\n            char[] partial = new char[9];\n            for (int i = 0; i < 9; i++) {\n                partial[i] = (char)('0' + faker.random().nextInt(9));\n            }\n            cpf = String.valueOf(partial);\n\n            int d1 = digit(calculateWeight(cpf, 10, 0, cpf.length()));\n            int d2 = digit((d1 * 2) + calculateWeight(cpf, 11, 0, cpf.length()));\n\n            cpf = (cpf + d1) + d2;\n        } else {\n            cpf = String.valueOf(faker.random().nextInt(1000000000) + (faker.random().nextInt(90) + 10) * 1000000000L);\n        }\n\n        String result = formatted ? DocumentFormatterUtil.cpf(cpf) : cpf;\n\n        if (isCPFValid(result) != valid) {\n            // Sometimes the generated number is not what you expected, for example, you expected an invalid number,\n            // but the generated number is valid. This fixes the issue by generating a new number until it matches the expectation.\n            result = cpf(faker, formatted, valid);\n        }\n\n        return result;\n    }\n\n    /**\n     * Return true if the CNPJ is valid\n     * A valid CNPJ is unique and have an algorithm to validate it\n     * <p>\n     * CNPJ generator could generate a valid or invalid because, sometimes, we need to test a\n     * registration with invalid number\n     */\n    public static boolean isCNPJValid(final String cnpj) {\n        String cnpjUnmask = DocumentFormatterUtil.unmask(cnpj);\n        final int cnpjPartialLength = 12;\n        if (!cnpjUnmask.regionMatches(0, cnpjUnmask, 0, cnpjPartialLength)) {\n            return false;\n        }\n\n        int d1 = digit(calculateWeight(cnpjUnmask, 9, 4, cnpjPartialLength) + calculateWeight(cnpjUnmask, 5, 0, 4));\n        int d2 = digit((d1 * 2) + calculateWeight(cnpjUnmask, 9, 5, cnpjPartialLength) + calculateWeight(cnpjUnmask, 6, 0, 5));\n\n\n        final String other = d1 + \"\" + d2;\n        return cnpjUnmask.regionMatches(cnpjPartialLength, other, 0, other.length());\n    }\n\n    /**\n     * Return true if the CPF is valid\n     * A valid CPF is unique and have a algorithm to validate it\n     * <p>\n     * CPF generator could generate a valid or invalid because, sometimes, we need to test a\n     * registration with invalid number\n     */\n    public static Boolean isCPFValid(final String cpf) {\n        String cpfUnmask = DocumentFormatterUtil.unmask(cpf);\n\n        String cpfPartial = cpfUnmask.substring(0, 9);\n\n        int d1 = digit(calculateWeight(cpfUnmask, 10, 0, 9));\n        int d2 = digit((d1 * 2) + calculateWeight(cpfUnmask, 11, 0, 9));\n\n        return cpfUnmask.equals((cpfPartial + d1) + d2);\n    }\n\n\n    public static int calculateWeight(final String num, final int weight, int start, int end) {\n        int sum = 0;\n        int weightAux = weight;\n\n        for (int index = start; index < end; index++) {\n            sum += (num.charAt(index) - '0') * weightAux--;\n        }\n        return sum;\n    }\n\n    public static int digit(int verifyingDigit) {\n        int remainder = verifyingDigit % 11;\n        if (remainder == 0 || remainder == 1)\n            return 0;\n        else\n            return 11 - remainder;\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil", "name": "DocumentFormatterUtil", "file_path": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java", "superclasses": "", "methods": ["[]DocumentFormatterUtil()", "[String]cnpj(String)", "[String]cpf(String)", "[String]unmask(String)"], "method_uris": ["src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[]DocumentFormatterUtil()", "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[String]cnpj(String)", "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[String]cpf(String)", "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[String]unmask(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DocumentFormatterUtil {\n\n    private DocumentFormatterUtil() {\n    }\n\n    public static String cnpj(String cnpj) {\n        final char[] input = cnpj.toCharArray();\n        final char[] res = new char[cnpj.length() + 4];\n        // Format should be ##.###.###/####-##\n        System.arraycopy(input, 0, res, 0, 2);\n        res[2] = '.';\n        System.arraycopy(input, 2, res, 3, 3);\n        res[6] = '.';\n        System.arraycopy(input, 5, res, 7, 3);\n        res[10] = '/';\n        System.arraycopy(input, 8, res, 11, 4);\n        res[15] = '-';\n        System.arraycopy(input, 12, res, 16, cnpj.length() - 12);\n        return String.valueOf(res);\n    }\n\n    public static String cpf(String cpf) {\n        char[] input = cpf.toCharArray();\n        char[] res = new char[input.length + 3];\n        System.arraycopy(input, 0, res, 0, 3);\n        res[3] = '.';\n        System.arraycopy(input, 3, res, 4, 3);\n        res[7] = '.';\n        System.arraycopy(input, 6, res, 8, 3);\n        res[11] = '-';\n        System.arraycopy(input, 9, res, 12, input.length - 9);\n        return String.valueOf(res);\n    }\n\n    public static String unmask(String doc) {\n        final char[] res = new char[doc.length()];\n        int index = 0;\n        for (int i = 0; i < doc.length(); i++) {\n            final char c = doc.charAt(i);\n            if (Character.isDigit(c)) {\n                res[index++] = c;\n            }\n        }\n        return String.valueOf(res, 0, index);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "name": "FakeValuesService", "file_path": "src/main/java/net/datafaker/service/FakeValuesService.java", "superclasses": "", "methods": ["[void]updateFakeValuesInterfaceMap(List<SingletonLocale>)", "[FakeValuesInterface]getCachedFakeValue(SingletonLocale)", "[void]addPath(Locale,Path)", "[void]addUrl(Locale,URL)", "[Object]fetch(String,FakerContext)", "[String]fetchString(String,FakerContext)", "[String]safeFetch(String,FakerContext,String)", "[T]fetchObject(String,FakerContext)", "[String[]]split(String)", "[String]numerify(String,FakerContext)", "[String]bothify(String,FakerContext)", "[String]bothify(String,FakerContext,boolean)", "[String]bothify(String,FakerContext,boolean,boolean,boolean)", "[String]regexify(String,FakerContext)", "[String]examplify(String,FakerContext)", "[String]letterify(String,FakerContext)", "[String]letterify(String,FakerContext,boolean)", "[String]templatify(String,char,FakerContext)", "[String]templatify(String,Map<Character, String[]>,FakerContext)", "[String]resolve(String,Object,BaseFaker,FakerContext)", "[String]resolve(String,AbstractProvider<?>,FakerContext)", "[String]resolve(String,Object,ProviderRegistration,Supplier<String>,FakerContext)", "[String]expression(String,BaseFaker,FakerContext)", "[String]fileExpression(Path,BaseFaker,FakerContext)", "[String]csv(int)", "[String]csv(String,char,boolean,int)", "[String]json()", "[String]jsona()", "[String]resolveExpression(String,Object,ProviderRegistration,FakerContext)", "[String[]]splitArguments(String)", "[String[]]splitExpressions(String,int)", "[Object]resExp(String,String[],Object,ProviderRegistration,FakerContext,RegExpContext)", "[Object]resolveExpression(String,String[],Object,ProviderRegistration,FakerContext)", "[boolean]isSlashDelimitedRegex(String)", "[String]trimRegexSlashes(String)", "[int]getDotIndex(String)", "[String]classNameToYamlName(Object)", "[String]javaNameToYamlName(String)", "[ValueResolver]resolveFromMethodOn(Object,String,String[])", "[ValueResolver]resolveFakerObjectAndMethod(ProviderRegistration,String,int,String[])", "[MethodAndCoercedArgs]retrieveMethodAccessor(Object,String,String[])", "[MethodAndCoercedArgs]accessor(Class<?>,String,String[])", "[String]removeUnderscoreChars(String)", "[Object[]]coerceArguments(Method,String[])", "[Class<?>]primitiveToWrapper(Class<?>)", "[Throwable]unwrap(Throwable)"], "method_uris": ["src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[void]updateFakeValuesInterfaceMap(List<SingletonLocale>)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[FakeValuesInterface]getCachedFakeValue(SingletonLocale)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[void]addPath(Locale,Path)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[void]addUrl(Locale,URL)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object]fetch(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]fetchString(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]safeFetch(String,FakerContext,String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[T]fetchObject(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String[]]split(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]numerify(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]bothify(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]bothify(String,FakerContext,boolean)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]bothify(String,FakerContext,boolean,boolean,boolean)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]regexify(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]examplify(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]letterify(String,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]letterify(String,FakerContext,boolean)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]templatify(String,char,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]templatify(String,Map<Character, String[]>,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolve(String,Object,BaseFaker,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolve(String,AbstractProvider<?>,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolve(String,Object,ProviderRegistration,Supplier<String>,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]expression(String,BaseFaker,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]fileExpression(Path,BaseFaker,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]csv(int)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]csv(String,char,boolean,int)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]json()", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]jsona()", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolveExpression(String,Object,ProviderRegistration,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String[]]splitArguments(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String[]]splitExpressions(String,int)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object]resExp(String,String[],Object,ProviderRegistration,FakerContext,RegExpContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object]resolveExpression(String,String[],Object,ProviderRegistration,FakerContext)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[boolean]isSlashDelimitedRegex(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]trimRegexSlashes(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[int]getDotIndex(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]classNameToYamlName(Object)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]javaNameToYamlName(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[ValueResolver]resolveFromMethodOn(Object,String,String[])", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[ValueResolver]resolveFakerObjectAndMethod(ProviderRegistration,String,int,String[])", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[MethodAndCoercedArgs]retrieveMethodAccessor(Object,String,String[])", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[MethodAndCoercedArgs]accessor(Class<?>,String,String[])", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]removeUnderscoreChars(String)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object[]]coerceArguments(Method,String[])", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Class<?>]primitiveToWrapper(Class<?>)", "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Throwable]unwrap(Throwable)"], "overrides": null, "attributes": [{"original_string": "    private class SafeFetchResolver implements ValueResolver {\n        private final String simpleDirective;\n        private final FakerContext context;\n\n        private SafeFetchResolver(String simpleDirective, FakerContext context) {\n            this.simpleDirective = simpleDirective;\n            this.context = context;\n        }\n\n        @Override\n        public Object resolve() {\n            return safeFetch(simpleDirective, context, null);\n        }\n\n        @Override\n        public String toString() {\n            return \"%s[simpleDirective=%s, context=%s]\".formatted(getClass().getSimpleName(), simpleDirective, context);\n        }\n    }", "definition": "    private class SafeFetchResolver implements ValueResolver", "class_docstring": "", "name": "SafeFetchResolver", "super_interfaces": ["ValueResolver"], "superclasses": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "fields": [{"attribute_expression": "private final String simpleDirective;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "simpleDirective", "syntax_pass": true}, {"attribute_expression": "private final FakerContext context;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FakerContext", "name": "context", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        private SafeFetchResolver(String simpleDirective, FakerContext context) {\n            this.simpleDirective = simpleDirective;\n            this.context = context;\n        }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "SafeFetchResolver", "params": [{"name": "simpleDirective", "type": "String"}, {"name": "context", "type": "FakerContext"}], "body": "                                                                                {\n            this.simpleDirective = simpleDirective;\n            this.context = context;\n        }", "signature": "private SafeFetchResolver(String simpleDirective, FakerContext context)"}, {"syntax_pass": true, "original_string": "        @Override\n        public Object resolve() {\n            return safeFetch(simpleDirective, context, null);\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "name": "resolve", "params": [], "body": "                                {\n            return safeFetch(simpleDirective, context, null);\n        }", "signature": "@Override\n        public Object resolve()"}, {"syntax_pass": true, "original_string": "        @Override\n        public String toString() {\n            return \"%s[simpleDirective=%s, context=%s]\".formatted(getClass().getSimpleName(), simpleDirective, context);\n        }", "docstring": "", "attributes": {"modifiers": "@Override\n        public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "name": "toString", "params": [], "body": "                                 {\n            return \"%s[simpleDirective=%s, context=%s]\".formatted(getClass().getSimpleName(), simpleDirective, context);\n        }", "signature": "@Override\n        public String toString()"}]}], "class_docstring": "", "original_string": "public class FakeValuesService {\n    private static final char[] DIGITS = \"0123456789\".toCharArray();\n    private static final String[] EMPTY_ARRAY = new String[0];\n    private static final Logger LOG = Logger.getLogger(FakeValuesService.class.getName());\n    public static final Supplier<Map<String, Object>> MAP_STRING_OBJECT_SUPPLIER = () -> new CopyOnWriteMap<>(() -> new WeakHashMap<>());\n    public static final Supplier<Map<String, String>> MAP_STRING_STRING_SUPPLIER = () -> new CopyOnWriteMap<>(() -> new WeakHashMap<>());\n\n    private final Map<SingletonLocale, FakeValuesInterface> fakeValuesInterfaceMap = new CopyOnWriteMap<>(IdentityHashMap::new);\n    public static final SingletonLocale DEFAULT_LOCALE = SingletonLocale.get(Locale.ENGLISH);\n\n    private static final Map<Class<?>, Map<String, Collection<Method>>> CLASS_2_METHODS_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new);\n    private static final Map<Class<?>, Constructor<?>> CLASS_2_CONSTRUCTOR_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new);\n\n    private static final JsonTransformer<Object> JSON_TRANSFORMER = JsonTransformer.builder().build();\n\n    private final Map<String, RgxGen> expression2generex = new CopyOnWriteMap<>(WeakHashMap::new);\n    private final CopyOnWriteMap<SingletonLocale, Map<String, String>> key2Expression = new CopyOnWriteMap<>(IdentityHashMap::new);\n    private static final Map<String, String[]> ARGS_2_SPLITTED_ARGS = new CopyOnWriteMap<>(WeakHashMap::new);\n\n    private static final Map<String, String[]> KEY_2_SPLITTED_KEY = new CopyOnWriteMap<>(WeakHashMap::new);\n\n    private final CopyOnWriteMap<SingletonLocale, Map<String, Object>> key2fetchedObject = new CopyOnWriteMap<>(IdentityHashMap::new);\n\n    private static final Map<String, String> NAME_2_YAML = new CopyOnWriteMap<>(WeakHashMap::new);\n\n    private static final Map<String, String> REMOVED_UNDERSCORE = new CopyOnWriteMap<>(WeakHashMap::new);\n    private static final Map<Class<?>, Map<String, Map<String[], MethodAndCoercedArgs>>> MAP_OF_METHOD_AND_COERCED_ARGS = new CopyOnWriteMap<>(IdentityHashMap::new);\n\n    private static final Map<String, String[]> EXPRESSION_2_SPLITTED = new CopyOnWriteMap<>(WeakHashMap::new);\n\n    private final Map<RegExpContext, ValueResolver> REGEXP2SUPPLIER_MAP = new CopyOnWriteMap<>(HashMap::new);\n\n    public void updateFakeValuesInterfaceMap(List<SingletonLocale> locales) {\n        for (final SingletonLocale l : locales) {\n            fakeValuesInterfaceMap.computeIfAbsent(l, this::getCachedFakeValue);\n        }\n    }\n\n    private FakeValuesInterface getCachedFakeValue(SingletonLocale locale) {\n        if (DEFAULT_LOCALE == locale) {\n            return FakeValuesGrouping.getEnglishFakeValueGrouping();\n        }\n\n        return FakeValues.of(FakeValuesContext.of(locale.getLocale()));\n    }\n\n    /**\n     * Allows adding paths to files with custom data. Data should be in YAML format.\n     *\n     * @param locale the locale for which a path is going to be added.\n     * @param path   path to a file with YAML structure\n     * @throws IllegalArgumentException in case of invalid path\n     */\n    public void addPath(Locale locale, Path path) {\n        requireNonNull(locale);\n        if (path == null || Files.notExists(path) || Files.isDirectory(path) || !Files.isReadable(path)) {\n            throw new IllegalArgumentException(\"Path should be an existing readable file: \\\"%s\\\"\".formatted(path));\n        }\n        try {\n            addUrl(locale, path.toUri().toURL());\n        } catch (MalformedURLException e) {\n            throw new IllegalArgumentException(\"Failed to read \\\"%s\\\"\".formatted(path), e);\n        }\n    }\n\n    /**\n     * Allows adding urls of files with custom data. Data should be in YAML format.\n     *\n     * @param locale  the locale for which an url is going to be added.\n     * @param url     url of a file with YAML structure\n     * @throws IllegalArgumentException in case of invalid url\n     */\n    public void addUrl(Locale locale, URL url) {\n        requireNonNull(locale);\n        if (url == null) {\n            throw new IllegalArgumentException(\"url should be an existing readable file\");\n        }\n        final FakeValues fakeValues = FakeValues.of(FakeValuesContext.of(locale, url));\n        final SingletonLocale sLocale = SingletonLocale.get(locale);\n        fakeValuesInterfaceMap.merge(sLocale, fakeValues,\n            (prevValue, newValue) -> {\n                FakeValuesGrouping fvg = new FakeValuesGrouping();\n                fvg.add(prevValue);\n                fvg.add(newValue);\n                return fvg;\n            });\n    }\n\n    /**\n     * Fetch a random value from an array item specified by the key\n     */\n    public Object fetch(String key, FakerContext context) {\n        List<?> valuesArray = null;\n        final Object o = fetchObject(key, context);\n        if (o instanceof List) {\n            valuesArray = (List<?>) o;\n            final int size = valuesArray.size();\n            if (size == 0) {\n                return null;\n            }\n            if (size == 1) {\n                return valuesArray.get(0);\n            }\n        }\n        return valuesArray == null\n            ? null : valuesArray.get(context.getRandomService().nextInt(valuesArray.size()));\n    }\n\n    /**\n     * Same as {@link #fetch(String, FakerContext)} except this casts the result into a String.\n     */\n    public String fetchString(String key, FakerContext context) {\n        return (String) fetch(key, context);\n    }\n\n    private class SafeFetchResolver implements ValueResolver {\n        private final String simpleDirective;\n        private final FakerContext context;\n\n        private SafeFetchResolver(String simpleDirective, FakerContext context) {\n            this.simpleDirective = simpleDirective;\n            this.context = context;\n        }\n\n        @Override\n        public Object resolve() {\n            return safeFetch(simpleDirective, context, null);\n        }\n\n        @Override\n        public String toString() {\n            return \"%s[simpleDirective=%s, context=%s]\".formatted(getClass().getSimpleName(), simpleDirective, context);\n        }\n    }\n\n    /**\n     * Safely fetches a key.\n     * <p>\n     * If the value is null, it will return an empty string.\n     * <p>\n     * If it is a list, it will assume it is a list of strings and select a random value from it.\n     * <p>\n     * If the retrieved value is an slash encoded regular expression such as {@code /[a-b]/} then\n     * the regex will be converted to a regexify expression and returned (ex. {@code #regexify '[a-b]'})\n     * <p>\n     * Otherwise, it will just return the value as a string.\n     *\n     * @param key           the key to fetch from the YML structure.\n     * @param defaultIfNull the value to return if the fetched value is null\n     * @return see above\n     */\n    @SuppressWarnings(\"unchecked\")\n    public String safeFetch(String key, FakerContext context, String defaultIfNull) {\n        Object o = fetchObject(key, context);\n        String str;\n        if (o == null) return defaultIfNull;\n        if (o instanceof List) {\n            final List<String> values = (List<String>) o;\n            final int size = values.size();\n            return switch (size) {\n                case 0 -> defaultIfNull;\n                case 1 -> values.get(0);\n                default -> values.get(context.getRandomService().nextInt(size));\n            };\n        } else if (isSlashDelimitedRegex(str = o.toString())) {\n            return \"#{regexify '%s'}\".formatted(trimRegexSlashes(str));\n        } else {\n            return (String) o;\n        }\n    }\n\n    /**\n     * Return the object selected by the key from yaml file.\n     *\n     * @param key key contains path to an object. Path segment is separated by\n     *            dot. E.g. name.first_name\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> T fetchObject(String key, FakerContext context) {\n        Object result = null;\n        final List<SingletonLocale> localeChain = context.getLocaleChain();\n        final boolean hasMoreThanOneLocales = localeChain.size() > 1;\n        for (SingletonLocale sLocale : localeChain) {\n            // exclude default locale from cache checks\n            if (sLocale == DEFAULT_LOCALE && hasMoreThanOneLocales) {\n                continue;\n            }\n            Map<String, Object> stringObjectMap = key2fetchedObject.get(sLocale);\n            if (stringObjectMap != null && (result = stringObjectMap.get(key)) != null) {\n                return (T) result;\n            }\n        }\n\n        String[] path = split(key);\n        SingletonLocale local2Add = null;\n        path[0] = path[0].toLowerCase(Locale.ROOT);\n        for (SingletonLocale sLocale : localeChain) {\n            Object currentValue = fakeValuesInterfaceMap.get(sLocale);\n            for (int p = 0; currentValue != null && p < path.length; p++) {\n                String currentPath = path[p];\n                if (currentValue instanceof Map) {\n                    currentValue = ((Map<?, ?>) currentValue).get(currentPath);\n                } else {\n                    currentValue = ((FakeValuesInterface) currentValue).get(currentPath);\n                }\n            }\n            result = currentValue;\n            if (result != null) {\n                local2Add = sLocale;\n                break;\n            }\n        }\n        if (local2Add != null) {\n            Object curResult = key2fetchedObject.getOrDefault(local2Add, Collections.emptyMap())\n                .get(key);\n            if (curResult != null) {\n                return (T) result;\n            }\n            key2fetchedObject.updateNestedValue(local2Add, MAP_STRING_OBJECT_SUPPLIER, key, result);\n        }\n        if (result instanceof List list) {\n            for (int i = 0; i < list.size(); i++) {\n                Object item = list.get(i);\n                if (!(item instanceof String itemStr)) {\n                    break;\n                }\n                final int itemStrLength = itemStr.length();\n                if (itemStrLength < 2) {\n                    break;\n                }\n                int j = 0;\n                StringBuilder sb = null;\n                int start = 0;\n                while (j < itemStrLength) {\n                    char c;\n                    while (j < itemStrLength - 2 && ((itemStr.charAt(j)) != '#' || itemStr.charAt(j + 1) != '{')) j++;\n                    int startWord = j + 2;\n                    boolean letterOrDigitOnly = true;\n                    j = startWord;\n                    while (j < itemStrLength && (c = itemStr.charAt(j)) != '}') {\n                        letterOrDigitOnly &= Character.isLetter(c) || Character.isDigit(c) || c == '_';\n                        j++;\n                    }\n                    if (start < itemStrLength&&  startWord < itemStrLength && letterOrDigitOnly) {\n                        if (sb == null) {\n                            sb = new StringBuilder();\n                        }\n                        sb.append(itemStr, start, startWord);\n                        sb.append(WordUtils.capitalize(path[0])).append(\".\").append(toJavaNames(itemStr.substring(startWord, j), true)).append(\"}\");\n                        start = j + 1;\n                    }\n                }\n                if (sb != null) {\n                    if (start < itemStrLength) {\n                        sb.append(itemStr, start, itemStrLength);\n                    }\n                    list.set(i, sb.toString());\n                }\n            }\n        }\n        return (T) result;\n    }\n\n    private String[] split(String string) {\n        String[] result = KEY_2_SPLITTED_KEY.get(string);\n        if (result != null) {\n            return result;\n        }\n        int size = 0;\n        final char splitChar = '.';\n        final int length = string.length();\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == splitChar) {\n                size++;\n            }\n        }\n        result = new String[size + 1];\n        final char[] chars = string.toCharArray();\n        int start = 0;\n        int j = 0;\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == splitChar) {\n                if (i - start > 0) {\n                    result[j++] = String.valueOf(chars, start, i - start);\n                }\n                start = i + 1;\n            }\n        }\n        result[j] = String.valueOf(chars, start, chars.length - start);\n        KEY_2_SPLITTED_KEY.putIfAbsent(string, result);\n        return result;\n    }\n\n    /**\n     * Returns a string with the '#' characters in the parameter replaced with random digits between 0-9 inclusive or\n     * random digits in the range from 1-9 when \u00d8 (not zero) is used.\n     * <p>\n     * For example, the string \"ABC##EFG\" could be replaced with a string like \"ABC99EFG\".\n     */\n    public String numerify(String numberString, FakerContext context) {\n        return bothify(numberString, context, false, true, false);\n    }\n\n    /**\n     * Applies both a {@link #numerify(String, FakerContext)} and a {@link #letterify(String, FakerContext)}\n     * over the incoming string.\n     */\n    public String bothify(String string, FakerContext context) {\n        return bothify(string, context, false);\n    }\n\n    /**\n     * Applies both a {@link #numerify(String, FakerContext)} and a {@link #letterify(String, FakerContext, boolean)}\n     * over the incoming string.\n     */\n    public String bothify(String input, FakerContext context, boolean isUpper) {\n        return bothify(input, context, isUpper, true, true);\n    }\n\n    private String bothify(String input, FakerContext context, boolean isUpper, boolean numerify, boolean letterify) {\n        final int baseChar = isUpper ? 'A' : 'a';\n        final char[] res = input.toCharArray();\n        for (int i = 0; i < res.length; i++) {\n            switch (res[i]) {\n                case '#' -> {\n                    if (numerify) {\n                        res[i] = DIGITS[context.getRandomService().nextInt(10)];\n                    }\n                }\n                case '\u00d8' -> {\n                    if (numerify) {\n                        res[i] = DIGITS[context.getRandomService().nextInt(1, 9)];\n                    }\n                }\n                case '?' -> {\n                    if (letterify) {\n                        res[i] = (char) (baseChar + context.getRandomService().nextInt(26)); // a-z\n                    }\n                }\n                default -> {\n                }\n            }\n        }\n\n        return String.valueOf(res);\n    }\n\n    /**\n     * Generates a String that matches the given regular expression.\n     */\n    public String regexify(String regex, FakerContext context) {\n        RgxGen rgxGen = expression2generex.get(regex);\n        if (rgxGen == null) {\n            rgxGen = RgxGen.parse(regex);\n            expression2generex.putIfAbsent(regex, rgxGen);\n        }\n        return rgxGen.generate(context.getRandomService().getRandomInternal());\n    }\n\n    /**\n     * Generates a String by example. The output string will have the same pattern as the input string.\n     */\n    public String examplify(String example, FakerContext context) {\n        if (example == null) {\n            return null;\n        }\n        final char[] chars = example.toCharArray();\n\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i] = letterify(\"?\", context, Character.isUpperCase(chars[i])).charAt(0);\n            } else if (Character.isDigit(chars[i])) {\n                chars[i] = DIGITS[context.getRandomService().nextInt(10)];\n            }\n        }\n\n        return String.valueOf(chars);\n\n    }\n\n    /**\n     * Returns a string with the '?' characters in the parameter replaced with random alphabetic\n     * characters.\n     * <p>\n     * For example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n     */\n    public String letterify(String letterString, FakerContext context) {\n        return this.letterify(letterString, context, false);\n    }\n\n    /**\n     * Returns a string with the '?' characters in the parameter replaced with random alphabetic\n     * characters.\n     * <p>\n     * For example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n     */\n    public String letterify(String letterString, FakerContext context, boolean isUpper) {\n        return bothify(letterString, context, isUpper, false, true);\n    }\n\n    /**\n     * Returns a string with the char2replace characters in the parameter replaced with random alphabetic\n     * characters from options\n     */\n    public String templatify(String letterString, char char2replace, FakerContext context, String... options) {\n        return templatify(letterString, Map.of(char2replace, options), context);\n    }\n\n    /**\n     * Returns a string with the optionsMap.getKeys() characters in the parameter replaced with random alphabetic\n     * characters from corresponding optionsMap.values()\n     */\n    public String templatify(String letterString, Map<Character, String[]> optionsMap, FakerContext context) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < letterString.length(); i++) {\n            final char key = letterString.charAt(i);\n            if (optionsMap.containsKey(key)) {\n                final String[] options = optionsMap.get(key);\n                requireNonNull(options, \"Array with available options should be non null\");\n                sb.append(options[context.getRandomService().nextInt(options.length)]);\n            } else {\n                sb.append(key);\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Resolves a key to a method on an object or throws an exception.\n     * <p>\n     * #{hello} with result in a method call to current.hello();\n     * <p>\n     * #{Person.hello_someone} will result in a method call to person.helloSomeone();\n     */\n    public String resolve(String key, Object current, BaseFaker root, FakerContext context) {\n        return resolve(key, current, root, () -> key + \" resulted in null expression\", context);\n    }\n\n    public String resolve(String key, AbstractProvider<?> provider, FakerContext context) {\n        return resolve(key, provider, provider.getFaker(), () -> key + \" resulted in null expression\", context);\n    }\n\n    /**\n     * Resolves a key to a method on an object or throws an exception with specified message.\n     * <p>\n     * #{hello} with result in a method call to current.hello();\n     * <p>\n     * #{Person.hello_someone} will result in a method call to person.helloSomeone();\n     */\n    public String resolve(String key, Object current, ProviderRegistration root, Supplier<String> exceptionMessage, FakerContext context) {\n        String expression = root == null ? key2Expression.get(context.getSingletonLocale()).get(key) : null;\n        if (expression == null) {\n            expression = safeFetch(key, context, null);\n            if (root == null) {\n                key2Expression.updateNestedValue(context.getSingletonLocale(),\n                    MAP_STRING_STRING_SUPPLIER, key, expression);\n            }\n        }\n\n        if (expression == null) {\n            throw new RuntimeException(exceptionMessage.get());\n        }\n\n        return resolveExpression(expression, current, root, context);\n    }\n\n    /**\n     * Resolves an expression using the current faker.\n     */\n    public String expression(String expression, BaseFaker faker, FakerContext context) {\n        return resolveExpression(expression, null, faker, context);\n    }\n\n    /**\n     * Resolves an expression in file using the current faker.\n     */\n    public String fileExpression(Path path, BaseFaker faker, FakerContext context) {\n        try {\n            return Files.readAllLines(path)\n                .stream().map(t -> expression(t, faker, context))\n                .collect(Collectors.joining(System.lineSeparator()));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to read \\\"%s\\\"\".formatted(path), e);\n        }\n    }\n\n    /**\n     * Generates csv based on input column expressions and number of lines.\n     * This method uses default separator, quote and always prints header.\n     */\n    public String csv(int limit, String... columnExpressions) {\n        return csv(CsvTransformer.DEFAULT_SEPARATOR, CsvTransformer.DEFAULT_QUOTE, true, limit, columnExpressions);\n    }\n\n    /**\n     * Generates csv based on input.\n     */\n    public String csv(String delimiter, char quote, boolean withHeader, int limit, String... columnExpressions) {\n        if ((columnExpressions.length & 1) == 1) {\n            throw new IllegalArgumentException(\"Total number of column names and column values should be even (received %s columns: %s)\".formatted(\n                columnExpressions.length, Arrays.toString(columnExpressions)));\n        }\n        Field<String, String>[] fields = new Field[columnExpressions.length >> 1];\n        for (int i = 0; i < columnExpressions.length; i += 2) {\n            final int index = i;\n            fields[i >> 1] = Field.field(columnExpressions[index], () -> columnExpressions[index + 1]);\n        }\n        Schema<String, String> schema = Schema.of(fields);\n        return CsvTransformer.<String>builder().separator(delimiter).quote(quote).header(withHeader)\n            .build().generate(schema, limit + 1);\n    }\n\n    /**\n     * Generates json based on input.\n     */\n    public String json(String... fieldExpressions) {\n        if ((fieldExpressions.length & 1) == 1) {\n            throw new IllegalArgumentException(\"Total number of field names and field values should be even (received %s fields: %s)\".formatted(\n                fieldExpressions.length, Arrays.toString(fieldExpressions)));\n        }\n\n        List<SimpleField<Object, ?>> fields = new ArrayList<>();\n        for (int i = 0; i < fieldExpressions.length; i += 2) {\n            final int index = i;\n            fields.add(field(fieldExpressions[index], () -> fieldExpressions[index + 1]));\n        }\n        Schema<Object, ?> schema = Schema.of(fields.toArray(new SimpleField[0]));\n        return JSON_TRANSFORMER.generate(schema, 1);\n    }\n\n    /**\n     * Generates json based on input.\n     */\n    public String jsona(String... fieldExpressions) {\n        if (fieldExpressions.length % 3 != 0) {\n            throw new IllegalArgumentException((\"Total number of field names and field values should be dividable by 3 \" +\n                \"(received %s field expressions: %s)\").formatted(fieldExpressions.length, Arrays.toString(fieldExpressions)));\n        }\n\n        List<SimpleField<Object, ?>> fields = new ArrayList<>();\n        for (int i = 0; i < fieldExpressions.length; i += 3) {\n            final int index = i;\n            if (fieldExpressions[i] != null && Integer.parseInt(fieldExpressions[index]) > 0) {\n                Object[] objects = new Object[Integer.parseInt(fieldExpressions[index])];\n                Arrays.fill(objects, fieldExpressions[index + 2]);\n                fields.add(field(fieldExpressions[index + 1], () -> objects));\n            } else {\n                fields.add(field(fieldExpressions[index + 1], () -> fieldExpressions[index + 2]));\n            }\n        }\n        Schema<Object, ?> schema = Schema.of(fields.toArray(new SimpleField[0]));\n        return JSON_TRANSFORMER.generate(schema, 1);\n    }\n\n    /**\n     * processes expression in the style #{X.y} using the current objects as the 'current' location\n     * within the yml file (or the {@link BaseFaker} object hierarchy as it were).\n     * <p>\n     * #{Address.streetName} would get resolved to {@link BaseFaker#address()}'s {@link Address#streetName()}\n     * #{address.street} would get resolved to the YAML like locale: faker: address: street:\n     * Combinations are supported as well: \"#{x} #{y}\"\n     * <p>\n     * Recursive templates are supported.  if \"#{x}\" resolves to \"#{Address.streetName}\" then \"#{x}\" resolves to\n     * {@link BaseFaker#address()}'s {@link Address#streetName()}.\n     */\n    protected String resolveExpression(String expression, Object current, ProviderRegistration root, FakerContext context) {\n        // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n        if (!expression.contains(\"}\")) {\n            return expression;\n        }\n        final int expressionLength = expression.length();\n        final String[] expressions = splitExpressions(expression, expressionLength);\n        final StringBuilder result = new StringBuilder(expressions.length * expressionLength);\n        for (int i = 0; i < expressions.length; i++) {\n            // odd are expressions, even are not expressions, just strings\n            final String expr = expressions[i];\n            if ((i & 1) == 0) {\n                if (!expr.isEmpty()) {\n                    result.append(expr);\n                }\n                continue;\n            }\n            final RegExpContext regExpContext = new RegExpContext(expr, root, context);\n            final ValueResolver val = REGEXP2SUPPLIER_MAP.get(regExpContext);\n            final Object resolved;\n            if (val != null) {\n                resolved = val.resolve();\n            } else {\n                int j = 0;\n                final int length = expr.length();\n                while (j < length && !Character.isWhitespace(expr.charAt(j))) j++;\n                String directive = expr.substring(0, j);\n                while (j < length && Character.isWhitespace(expr.charAt(j))) j++;\n                final String arguments = j == length ? \"\" : expr.substring(j);\n                final String[] args = splitArguments(arguments);\n                resolved = resExp(directive, args, current, root, context, regExpContext);\n            }\n            if (resolved == null) {\n                throw new RuntimeException(\"Unable to resolve #{\" + expr + \"} directive for FakerContext \" + context + \".\");\n            }\n            result.append(resolveExpression(Objects.toString(resolved), current, root, context));\n        }\n        return result.toString();\n    }\n\n    private String[] splitArguments(String arguments) {\n        final int length;\n        if (arguments == null || (length = arguments.length()) == 0) {\n            return EMPTY_ARRAY;\n        }\n        String[] res = ARGS_2_SPLITTED_ARGS.get(arguments);\n        if (res != null) {\n            return res;\n        }\n        List<String> result = new ArrayList<>();\n        int start = 0;\n        boolean argsStarted = false;\n        for (int i = 0; i < length; i++) {\n            if (argsStarted) {\n                int cnt = 0;\n                while (i < length && arguments.charAt(i) == '\\'') {\n                    cnt++;\n                    i++;\n                }\n                if ((cnt & 1) == 1) {\n                    result.add(arguments.substring(start, i - 1).replace(\"''\", \"'\"));\n                    argsStarted = false;\n                }\n            } else if (arguments.charAt(i) == '\\'') {\n                argsStarted = true;\n                start = i + 1;\n            }\n        }\n        final String[] resultArray = result.toArray(EMPTY_ARRAY);\n\n        ARGS_2_SPLITTED_ARGS.putIfAbsent(arguments, resultArray);\n        return resultArray;\n    }\n\n    private String[] splitExpressions(String expression, int length) {\n        String[] result = EXPRESSION_2_SPLITTED.get(expression);\n        if (result != null) {\n            return result;\n        }\n        int cnt = 0;\n        for (int i = 0; i < length; i++) {\n            if (expression.charAt(i) == '}') {\n                cnt++;\n            }\n        }\n        List<String> list = new ArrayList<>((cnt << 1) + 1);\n        boolean isExpression = false;\n        int start = 0;\n        int quoteCnt = 0;\n        for (int i = 0; i < length; i++) {\n            final char c = expression.charAt(i);\n            if (isExpression) {\n                if (c == '}' && (quoteCnt & 1) == 0) {\n                    list.add(expression.substring(start, i));\n                    start = i + 1;\n                    isExpression = false;\n                } else if (c == '\\'') {\n                    quoteCnt++;\n                }\n            } else if (i < length - 2 && c == '#' && expression.charAt(i + 1) == '{') {\n                list.add(expression.substring(start, i));\n                isExpression = true;\n                start = i + 2;\n                i++;\n            }\n        }\n        if (start < length) {\n            list.add(expression.substring(start));\n        }\n        result = list.toArray(EMPTY_ARRAY);\n        EXPRESSION_2_SPLITTED.putIfAbsent(expression, result);\n        return result;\n    }\n\n    private Object resExp(String directive, String[] args, Object current, ProviderRegistration root, FakerContext context, RegExpContext regExpContext) {\n        Object res = resolveExpression(directive, args, current, root, context);\n        LOG.fine(() -> \"resExp(%s [%s]) current: %s, root: %s, context: %s, regExpContext: %s -> res: %s\".formatted(directive, Arrays.toString(args), current, root, context, regExpContext, res));\n        if (res instanceof CharSequence) {\n            if (((CharSequence) res).isEmpty()) {\n                REGEXP2SUPPLIER_MAP.put(regExpContext, EMPTY_STRING);\n            }\n            return res;\n        }\n        if (res instanceof List) {\n            Iterator<ValueResolver> it = ((List<ValueResolver>) res).iterator();\n            while (it.hasNext()) {\n                Object valueResolver = it.next();\n                Object value;\n                if (valueResolver instanceof ValueResolver resolver) {\n                    value = resolver.resolve();\n                    if (value == null) {\n                        it.remove();\n                    } else {\n                        REGEXP2SUPPLIER_MAP.put(regExpContext, resolver);\n                        return value;\n                    }\n                }\n            }\n            return null;\n        }\n        return res;\n    }\n\n    /**\n     * Search Order\n     * <ul>\n     *  <li>Search for methods on the current object</li>\n     *  <li>local keys in Yaml File</li>\n     *  <li>Search for methods on faker child objects</li>\n     *   <li>Search for keys in yaml file by transforming object reference to yaml reference</li>\n     * </ul>\n     */\n    private Object resolveExpression(String directive, String[] args, Object current, ProviderRegistration root, FakerContext context) {\n        if (directive.isEmpty()) {\n            return directive;\n        }\n        final int dotIndex = getDotIndex(directive);\n\n        List<ValueResolver> res = new ArrayList<>();\n        if (args.length == 0) {\n            // resolve method references on CURRENT object like #{number_between '1','10'} on Number or\n            // #{ssn_valid} on IdNumber\n            if (dotIndex == -1) {\n                if (current instanceof AbstractProvider) {\n                    final Method method = BaseFaker.getMethod((AbstractProvider<?>) current, directive);\n                    if (method != null) {\n                        res.add(new MethodResolver(method, current, args));\n                        return res;\n                    }\n                }\n                res.add(resolveFromMethodOn(current, directive, args));\n            }\n            if (dotIndex > 0) {\n                String providerClassName = directive.substring(0, dotIndex);\n                String methodName = directive.substring(dotIndex + 1);\n                AbstractProvider<?> ap = root.getProvider(providerClassName);\n                Method method = ap == null ? null : ObjectMethods.getMethodByName(ap, methodName);\n                if (method != null) {\n                    res.add(new MethodResolver(method, ap, args));\n                    return res;\n                }\n            }\n        }\n        final String simpleDirective = (dotIndex >= 0 || current == null)\n            ? directive\n            : classNameToYamlName(current) + \".\" + directive;\n        // simple fetch of a value from the yaml file. the directive may have been mutated\n        // such that if the current yml object is car: and directive is #{wheel} then\n        // car.wheel will be looked up in the YAML file.\n        // It's only \"simple\" if there aren't args\n        if (args.length == 0) {\n            res.add(new SafeFetchResolver(simpleDirective, context));\n        }\n\n        // resolve method references on faker object like #{regexify '[a-z]'}\n        if (dotIndex == -1 && root != null && (current == null || root.getClass() != current.getClass())) {\n            res.add(resolveFromMethodOn(root, directive, args));\n        }\n\n        // Resolve Faker Object method references like #{ClassName.method_name}\n        if (dotIndex >= 0) {\n            res.add(resolveFakerObjectAndMethod(root, directive, dotIndex, args));\n        }\n\n        // last ditch effort.  Due to Ruby's dynamic nature, something like 'Address.street_title' will resolve\n        // because 'street_title' is a dynamic method on the Address object.  We can't do this in Java so we go\n        // through the normal resolution above, but if we will can't resolve it, we once again do a 'safeFetch' as we\n        // did first, but FIRST we change the Object reference Class.method_name with a yml style internal reference ->\n        // class.method_name (lowercase)\n        if (dotIndex >= 0) {\n            final String key = javaNameToYamlName(simpleDirective);\n            res.add(new SafeFetchResolver(key, context));\n        }\n\n        return res;\n    }\n\n\n    /**\n     * @param expression input expression\n     * @return true if s is non-null and is a slash delimited regex (ex. {@code /[ab]/})\n     */\n    private boolean isSlashDelimitedRegex(String expression) {\n        return expression != null && expression.startsWith(\"/\") && expression.endsWith(\"/\");\n    }\n\n    /**\n     * Given a {@code slashDelimitedRegex} such as {@code /[ab]/}, removes the slashes and returns only {@code [ab]}\n     *\n     * @param slashDelimitedRegex a non null slash delimited regex (ex. {@code /[ab]/})\n     * @return the regex without the slashes (ex. {@code [ab]})\n     */\n    private String trimRegexSlashes(String slashDelimitedRegex) {\n        return slashDelimitedRegex.substring(1, slashDelimitedRegex.length() - 1);\n    }\n\n    private int getDotIndex(String directive) {\n        // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n        return directive.indexOf(\".\");\n    }\n\n    /**\n     * @return a yaml style name from the classname of the supplied object (PhoneNumber => phone_number)\n     */\n    private String classNameToYamlName(Object current) {\n        return javaNameToYamlName(current.getClass().getSimpleName());\n    }\n\n    /**\n     * @return a yaml style name like 'phone_number' from a java style name like 'PhoneNumber'\n     */\n    private String javaNameToYamlName(String expression) {\n        String result = NAME_2_YAML.get(expression);\n        if (result != null) {\n            return result;\n        }\n\n        final int length = expression.length();\n        final boolean firstLetterUpperCase = length > 0 && Character.isUpperCase(expression.charAt(0));\n        int cnt = firstLetterUpperCase ? 1 : 0;\n        for (int i = 1; i < length; i++) {\n            if (Character.isUpperCase(expression.charAt(i))) {\n                cnt++;\n            }\n        }\n        if (cnt == 0) {\n            NAME_2_YAML.putIfAbsent(expression, expression);\n            return expression;\n        }\n        final char[] res = new char[length + (firstLetterUpperCase ? cnt - 1 : cnt)];\n        int pos = 0;\n        for (int i = 0; i < length; i++) {\n            final char c = expression.charAt(i);\n            if (cnt > 0) {\n                if (Character.isUpperCase(c)) {\n                    if (pos > 0) {\n                        res[pos++] = '_';\n                    }\n                    res[pos++] = Character.toLowerCase(c);\n                    cnt--;\n                } else {\n                    res[pos++] = c;\n                }\n            } else {\n                res[pos++] = c;\n            }\n        }\n        result = new String(res);\n        NAME_2_YAML.putIfAbsent(expression, result);\n        return result;\n    }\n\n\n    /**\n     * Given a directive like 'firstName', attempts to resolve it to a method.  For example if obj is an instance of\n     * {@link Name} then this method would return {@link Name#firstName()}.  Returns null if the directive is nested\n     * (i.e. has a '.') or the method doesn't exist on the <em>obj</em> object.\n     */\n    private ValueResolver resolveFromMethodOn(Object obj, String directive, String[] args) {\n        if (obj == null) {\n            return null;\n        }\n        final MethodAndCoercedArgs accessor = retrieveMethodAccessor(obj, directive, args);\n        return accessor == null ? NULL_VALUE : new MethodAndCoercedArgsResolver(accessor, obj);\n    }\n\n    /**\n     * Accepts a {@link BaseFaker} instance and a name.firstName style 'key' which is resolved to the return value of:\n     * {@link BaseFaker#name()}'s {@link Name#firstName()} method.\n     *\n     * @throws RuntimeException if there's a problem invoking the method, or it doesn't exist.\n     */\n    private ValueResolver resolveFakerObjectAndMethod(ProviderRegistration faker, String key, int dotIndex, String[] args) {\n        final String[] classAndMethod;\n        if (dotIndex == -1) {\n            classAndMethod = new String[]{key};\n        } else {\n            classAndMethod = new String[]{key.substring(0, dotIndex), dotIndex == key.length() - 1 ? \"\" : key.substring(dotIndex + 1)};\n        }\n\n        try {\n            String fakerMethodName = removeUnderscoreChars(classAndMethod[0]);\n            final MethodAndCoercedArgs fakerAccessor = retrieveMethodAccessor(faker, fakerMethodName, EMPTY_ARRAY);\n            if (fakerAccessor == null) {\n                LOG.fine(() -> \"Can't find top level faker object named \" + fakerMethodName + \".\");\n                return null;\n            }\n            Object objectWithMethodToInvoke = fakerAccessor.invoke(faker);\n            String nestedMethodName = removeUnderscoreChars(classAndMethod[1]);\n            final MethodAndCoercedArgs accessor = retrieveMethodAccessor(objectWithMethodToInvoke, nestedMethodName, args);\n            if (accessor == null) {\n                return NULL_VALUE;\n            }\n\n            return new MethodAndCoercedArgsResolver(accessor, objectWithMethodToInvoke);\n        } catch (InvocationTargetException | IllegalAccessException e) {\n            throw new RuntimeException(\"Failed to resolve faker object and method for %s (dotIndex=%s, args=%s)\"\n                .formatted(key, dotIndex, Arrays.toString(args)), e);\n        }\n    }\n\n    private MethodAndCoercedArgs retrieveMethodAccessor(Object object, String methodName, String[] args) {\n        Class<?> clazz = object.getClass();\n        Map<String[], MethodAndCoercedArgs> accessorMap =\n            MAP_OF_METHOD_AND_COERCED_ARGS\n                .getOrDefault(clazz, Collections.emptyMap())\n                .getOrDefault(methodName, Collections.emptyMap());\n        // value could be null\n        if (accessorMap.containsKey(args)) {\n            return accessorMap.get(args);\n        }\n        final MethodAndCoercedArgs accessor = accessor(clazz, methodName, args);\n        final Map<String, Map<String[], MethodAndCoercedArgs>> stringMapMap =\n            MAP_OF_METHOD_AND_COERCED_ARGS.computeIfAbsent(clazz, t -> new CopyOnWriteMap<>(WeakHashMap::new));\n        stringMapMap.putIfAbsent(methodName, new CopyOnWriteMap<>(WeakHashMap::new));\n        stringMapMap.get(methodName).putIfAbsent(args, accessor);\n        if (accessor == null) {\n            LOG.fine(() -> \"Can't find method on %s called %s.\".formatted(object.getClass().getSimpleName(), methodName));\n        }\n        return accessor;\n    }\n\n    /**\n     * Find an accessor by name ignoring case.\n     */\n    private MethodAndCoercedArgs accessor(Class<?> clazz, final String accessorName, String[] args) {\n        LOG.fine(() -> \"Find accessor named %s on %s with args %s\".formatted(accessorName, clazz.getSimpleName(), Arrays.toString(args)));\n        String name = removeUnderscoreChars(accessorName);\n        final Collection<Method> methods;\n        if (CLASS_2_METHODS_CACHE.containsKey(clazz)) {\n            methods = CLASS_2_METHODS_CACHE.get(clazz).getOrDefault(name, Collections.emptyList());\n            LOG.fine(() -> \"Found accessor named %s on %s in cache: %s\".formatted(accessorName, clazz.getSimpleName(), methods));\n        } else {\n            Method[] classMethods = clazz.getMethods();\n            Map<String, Collection<Method>> methodMap =\n                classMethods.length == 0 ? Collections.emptyMap() : new HashMap<>(classMethods.length);\n            for (Method m : classMethods) {\n                final String key = m.getName().toLowerCase(Locale.ROOT);\n                methodMap.computeIfAbsent(key, k -> new ArrayList<>());\n                methodMap.get(key).add(m);\n            }\n            CLASS_2_METHODS_CACHE.putIfAbsent(clazz, methodMap);\n            LOG.fine(() -> \"Detected accessor named %s on %s, stored to cache: %s\".formatted(accessorName, clazz.getSimpleName(), methodMap));\n\n            methods = methodMap.get(name);\n            LOG.fine(() -> \"Detected accessor named %s on %s and taken from cache: %s\".formatted(accessorName, clazz.getSimpleName(), methods));\n        }\n        if (methods == null) {\n            LOG.fine(() -> \"Didn't accessor named %s on %s with args %s (methods=%s)\".formatted(accessorName, clazz.getSimpleName(), Arrays.toString(args), null));\n            return null;\n        }\n        for (Method m : methods) {\n            if (m.getParameterCount() == args.length || m.getParameterCount() < args.length && m.isVarArgs()) {\n                final Object[] coercedArguments = args.length == 0 ? EMPTY_ARRAY : coerceArguments(m, args);\n                if (coercedArguments != null) {\n                    return new MethodAndCoercedArgs(m, coercedArguments);\n                }\n            }\n        }\n        LOG.fine(() -> \"Didn't accessor named %s on %s with args %s (methods=%s)\".formatted(accessorName, clazz.getSimpleName(), Arrays.toString(args), methods));\n        return null;\n    }\n\n    private String removeUnderscoreChars(String string) {\n        String valueWithRemovedUnderscores = REMOVED_UNDERSCORE.get(string);\n        if (valueWithRemovedUnderscores != null) {\n            return valueWithRemovedUnderscores;\n        }\n        // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n        if (!string.contains(\"_\")) {\n            REMOVED_UNDERSCORE.putIfAbsent(string, string.toLowerCase(Locale.ROOT));\n            return string;\n        }\n        final char[] res = string.toCharArray();\n        int offset = 0;\n        int length = 0;\n        final int strLen = string.length();\n        for (int i = strLen - 1; i >= offset; i--) {\n            while (i > offset && string.charAt(i - offset) == '_') {\n                offset++;\n            }\n            res[i] = res[i - offset];\n            if (res[i] != '_') {\n                length++;\n            }\n        }\n        valueWithRemovedUnderscores = String.valueOf(res, strLen - length, length);\n        REMOVED_UNDERSCORE.putIfAbsent(string, valueWithRemovedUnderscores.toLowerCase(Locale.ROOT));\n        return valueWithRemovedUnderscores;\n    }\n\n    /**\n     * Coerce arguments in <em>args</em> into the appropriate types (if possible) for the parameter arguments\n     * to <em>accessor</em>.\n     *\n     * @return array of coerced values if successful, null otherwise\n     */\n    private Object[] coerceArguments(Method accessor, String[] args) {\n        final Object[] coerced = new Object[accessor.getParameterCount()];\n        final Class<?>[] parameterTypes = accessor.getParameterTypes();\n        for (int i = 0; i < accessor.getParameterCount(); i++) {\n            final boolean isVarArg = i == accessor.getParameterCount() - 1 && accessor.isVarArgs();\n            Class<?> toType = primitiveToWrapper(parameterTypes[i]);\n            toType = isVarArg ? toType.getComponentType() : toType;\n            try {\n                final Object coercedArgument;\n                if (toType.isEnum()) {\n                    Method method = toType.getMethod(\"valueOf\", String.class);\n                    if (isVarArg) {\n                        coercedArgument = Array.newInstance(toType, args.length - i);\n                        for (int j = i; j < args.length; j++) {\n                            String enumArg = args[j].substring(args[j].indexOf(\".\") + 1);\n                            Array.set(coercedArgument, j - i, method.invoke(null, enumArg));\n                        }\n                    } else {\n                        String enumArg = args[i].substring(args[i].indexOf(\".\") + 1);\n                        coercedArgument = method.invoke(null, enumArg);\n                    }\n                } else {\n                    if (isVarArg) {\n                        Constructor<?> ctor = CLASS_2_CONSTRUCTOR_CACHE.get(toType);\n                        if (ctor == null) {\n                            final Constructor<?>[] constructors = toType.getConstructors();\n                            for (Constructor<?> c : constructors) {\n                                if (c.getParameterCount() == 1 && c.getParameterTypes()[0] == String.class) {\n                                    ctor = toType.getConstructor(String.class);\n                                    CLASS_2_CONSTRUCTOR_CACHE.putIfAbsent(toType, ctor);\n                                    break;\n                                }\n                            }\n                        }\n                        if (ctor == null) {\n                            return null;\n                        }\n                        coercedArgument = Array.newInstance(toType, args.length - i);\n                        for (int j = i; j < args.length; j++) {\n                            Array.set(coercedArgument, j - i, ctor.newInstance(args[j]));\n                        }\n                    } else if (toType == Character.class) {\n                        coercedArgument = args[i] == null ? null : args[i].charAt(0);\n                    } else if (Boolean.class == toType) {\n                        coercedArgument = Boolean.valueOf(args[i]);\n                    } else if (Integer.class == toType) {\n                        coercedArgument = Integer.valueOf(args[i]);\n                    } else if (Long.class == toType) {\n                        coercedArgument = Long.valueOf(args[i]);\n                    } else if (Double.class == toType) {\n                        coercedArgument = Double.valueOf(args[i]);\n                    } else if (Float.class == toType) {\n                        coercedArgument = Float.valueOf(args[i]);\n                    } else if (Byte.class == toType) {\n                        coercedArgument = Byte.valueOf(args[i]);\n                    } else if (Short.class == toType) {\n                        coercedArgument = Short.valueOf(args[i]);\n                    } else if (CharSequence.class.isAssignableFrom(toType)) {\n                        coercedArgument = args[i];\n                    } else if (BigDecimal.class.isAssignableFrom(toType)) {\n                        coercedArgument = new BigDecimal(args[i]);\n                    } else if (BigInteger.class.isAssignableFrom(toType)) {\n                        coercedArgument = new BigInteger(args[i]);\n                    } else {\n                        final Constructor<?> ctor = toType.getConstructor(String.class);\n                        coercedArgument = ctor.newInstance(args[i]);\n                    }\n                }\n                coerced[i] = coercedArgument;\n            } catch (Exception e) {\n                Throwable cause = unwrap(e);\n                Level level = cause instanceof IllegalArgumentException || cause instanceof NoSuchMethodException ? FINE : SEVERE;\n                LOG.log(level, \"Unable to coerce \" + args[i] + \" to \" + toType.getSimpleName() + \" via \" + toType.getSimpleName() + \"(String) constructor.\", e);\n                return null;\n            }\n        }\n        return coerced;\n    }\n\n    private static final Map<Class<?>, Class<?>> PRIMITIVE_WRAPPER_MAP = new IdentityHashMap<>();\n\n    static {\n        PRIMITIVE_WRAPPER_MAP.put(Boolean.TYPE, Boolean.class);\n        PRIMITIVE_WRAPPER_MAP.put(Byte.TYPE, Byte.class);\n        PRIMITIVE_WRAPPER_MAP.put(Character.TYPE, Character.class);\n        PRIMITIVE_WRAPPER_MAP.put(Short.TYPE, Short.class);\n        PRIMITIVE_WRAPPER_MAP.put(Integer.TYPE, Integer.class);\n        PRIMITIVE_WRAPPER_MAP.put(Long.TYPE, Long.class);\n        PRIMITIVE_WRAPPER_MAP.put(Double.TYPE, Double.class);\n        PRIMITIVE_WRAPPER_MAP.put(Float.TYPE, Float.class);\n        PRIMITIVE_WRAPPER_MAP.put(Void.TYPE, Void.class);\n    }\n\n    public static Class<?> primitiveToWrapper(final Class<?> cls) {\n        if (cls != null && cls.isPrimitive()) {\n            return PRIMITIVE_WRAPPER_MAP.get(cls);\n        }\n        return cls;\n    }\n\n    /**\n     * simple wrapper class around an accessor and a list of coerced arguments.\n     * this is useful as we get to find the method and coerce the arguments in one\n     * shot, returning both when successful.  This saves us from doing it more than once (coercing args).\n     */\n    private record MethodAndCoercedArgs(Method method, Object[] coerced) {\n        private MethodAndCoercedArgs {\n            requireNonNull(method, \"method cannot be null\");\n            requireNonNull(coerced, \"coerced arguments cannot be null\");\n        }\n\n        private Object invoke(Object on) throws InvocationTargetException, IllegalAccessException {\n            return method.invoke(on, coerced);\n        }\n\n        @Override\n        public String toString() {\n            return \"%s[method=%s.%s(), coerced=%s]\".formatted(getClass().getSimpleName(),\n                method.getDeclaringClass().getSimpleName(), method.getName(), Arrays.toString(coerced));\n        }\n    }\n\n    private record RegExpContext(String exp, ProviderRegistration root, FakerContext context) {\n    }\n\n    private interface ValueResolver {\n        Object resolve();\n    }\n\n    private record ConstantResolver(String value) implements ValueResolver {\n        @Override\n        public Object resolve() {\n            return value;\n        }\n    }\n\n    private static final ConstantResolver EMPTY_STRING = new ConstantResolver(\"\");\n    private static final ConstantResolver NULL_VALUE = new ConstantResolver(null);\n\n    private record MethodResolver(Method method, Object current, Object[] args) implements ValueResolver {\n        @Override\n        public Object resolve() {\n            try {\n                return method.invoke(current);\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to call method %s.%s() on %s (args: %s)\".formatted(\n                    method.getDeclaringClass().getName(), method.getName(), current, Arrays.toString(args)), e);\n            }\n        }\n\n        @Override\n        public String toString() {\n            return \"%s[method=%s.%s(), current=%s, args=%s]\".formatted(getClass().getSimpleName(),\n                method.getDeclaringClass().getSimpleName(), method.getName(), current, Arrays.toString(args));\n        }\n    }\n\n    private record MethodAndCoercedArgsResolver(MethodAndCoercedArgs accessor, Object obj) implements ValueResolver {\n        @Override\n        public Object resolve() {\n            return invokeAndToString(accessor, obj);\n        }\n\n        private static Object invokeAndToString(MethodAndCoercedArgs accessor, Object objectWithMethodToInvoke) {\n            try {\n                return accessor.invoke(objectWithMethodToInvoke);\n            } catch (InvocationTargetException | IllegalAccessException e) {\n                throw new RuntimeException(\"Failed to invoke %s on %s\".formatted(accessor, objectWithMethodToInvoke), unwrap(e));\n            }\n        }\n    }\n\n    private static Throwable unwrap(Throwable e) {\n        return e instanceof InvocationTargetException reflection ? unwrap(reflection.getTargetException()) : e;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final char[] DIGITS = \"0123456789\".toCharArray();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "DIGITS = \"0123456789\".toCharArray()", "syntax_pass": true}, {"attribute_expression": "private static final String[] EMPTY_ARRAY = new String[0];", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String[]", "name": "EMPTY_ARRAY = new String[0]", "syntax_pass": true}, {"attribute_expression": "private static final Logger LOG = Logger.getLogger(FakeValuesService.class.getName());", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "LOG = Logger.getLogger(FakeValuesService.class.getName())", "syntax_pass": true}, {"attribute_expression": "public static final Supplier<Map<String, Object>> MAP_STRING_OBJECT_SUPPLIER = () -> new CopyOnWriteMap<>(() -> new WeakHashMap<>());", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Supplier<Map<String, Object>>", "name": "MAP_STRING_OBJECT_SUPPLIER = () -> new CopyOnWriteMap<>(() -> new WeakHashMap<>())", "syntax_pass": true}, {"attribute_expression": "public static final Supplier<Map<String, String>> MAP_STRING_STRING_SUPPLIER = () -> new CopyOnWriteMap<>(() -> new WeakHashMap<>());", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Supplier<Map<String, String>>", "name": "MAP_STRING_STRING_SUPPLIER = () -> new CopyOnWriteMap<>(() -> new WeakHashMap<>())", "syntax_pass": true}, {"attribute_expression": "private final Map<SingletonLocale, FakeValuesInterface> fakeValuesInterfaceMap = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<SingletonLocale, FakeValuesInterface>", "name": "fakeValuesInterfaceMap = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "public static final SingletonLocale DEFAULT_LOCALE = SingletonLocale.get(Locale.ENGLISH);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "SingletonLocale", "name": "DEFAULT_LOCALE = SingletonLocale.get(Locale.ENGLISH)", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Map<String, Collection<Method>>> CLASS_2_METHODS_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Map<String, Collection<Method>>>", "name": "CLASS_2_METHODS_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Constructor<?>> CLASS_2_CONSTRUCTOR_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Constructor<?>>", "name": "CLASS_2_CONSTRUCTOR_CACHE = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final JsonTransformer<Object> JSON_TRANSFORMER = JsonTransformer.builder().build();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "JsonTransformer<Object>", "name": "JSON_TRANSFORMER = JsonTransformer.builder().build()", "syntax_pass": true}, {"attribute_expression": "private final Map<String, RgxGen> expression2generex = new CopyOnWriteMap<>(WeakHashMap::new);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, RgxGen>", "name": "expression2generex = new CopyOnWriteMap<>(WeakHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private final CopyOnWriteMap<SingletonLocale, Map<String, String>> key2Expression = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CopyOnWriteMap<SingletonLocale, Map<String, String>>", "name": "key2Expression = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<String, String[]> ARGS_2_SPLITTED_ARGS = new CopyOnWriteMap<>(WeakHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<String, String[]>", "name": "ARGS_2_SPLITTED_ARGS = new CopyOnWriteMap<>(WeakHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<String, String[]> KEY_2_SPLITTED_KEY = new CopyOnWriteMap<>(WeakHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<String, String[]>", "name": "KEY_2_SPLITTED_KEY = new CopyOnWriteMap<>(WeakHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private final CopyOnWriteMap<SingletonLocale, Map<String, Object>> key2fetchedObject = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "CopyOnWriteMap<SingletonLocale, Map<String, Object>>", "name": "key2fetchedObject = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<String, String> NAME_2_YAML = new CopyOnWriteMap<>(WeakHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<String, String>", "name": "NAME_2_YAML = new CopyOnWriteMap<>(WeakHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<String, String> REMOVED_UNDERSCORE = new CopyOnWriteMap<>(WeakHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<String, String>", "name": "REMOVED_UNDERSCORE = new CopyOnWriteMap<>(WeakHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Map<String, Map<String[], MethodAndCoercedArgs>>> MAP_OF_METHOD_AND_COERCED_ARGS = new CopyOnWriteMap<>(IdentityHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Map<String, Map<String[], MethodAndCoercedArgs>>>", "name": "MAP_OF_METHOD_AND_COERCED_ARGS = new CopyOnWriteMap<>(IdentityHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<String, String[]> EXPRESSION_2_SPLITTED = new CopyOnWriteMap<>(WeakHashMap::new);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<String, String[]>", "name": "EXPRESSION_2_SPLITTED = new CopyOnWriteMap<>(WeakHashMap::new)", "syntax_pass": true}, {"attribute_expression": "private final Map<RegExpContext, ValueResolver> REGEXP2SUPPLIER_MAP = new CopyOnWriteMap<>(HashMap::new);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<RegExpContext, ValueResolver>", "name": "REGEXP2SUPPLIER_MAP = new CopyOnWriteMap<>(HashMap::new)", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Class<?>> PRIMITIVE_WRAPPER_MAP = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Class<?>>", "name": "PRIMITIVE_WRAPPER_MAP = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private static final ConstantResolver EMPTY_STRING = new ConstantResolver(\"\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ConstantResolver", "name": "EMPTY_STRING = new ConstantResolver(\"\")", "syntax_pass": true}, {"attribute_expression": "private static final ConstantResolver NULL_VALUE = new ConstantResolver(null);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "ConstantResolver", "name": "NULL_VALUE = new ConstantResolver(null)", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping", "name": "FakeValuesGrouping", "file_path": "src/main/java/net/datafaker/service/FakeValuesGrouping.java", "superclasses": "", "methods": ["[void]add(FakeValuesInterface)", "[Map]get(String)", "[FakeValuesGrouping]getEnglishFakeValueGrouping()"], "method_uris": ["src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping.[void]add(FakeValuesInterface)", "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping.[Map]get(String)", "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping.[FakeValuesGrouping]getEnglishFakeValueGrouping()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FakeValuesGrouping implements FakeValuesInterface {\n    private static final FakeValuesGrouping ENGLISH_FAKE_VALUE_GROUPING = new FakeValuesGrouping();\n    private final Map<String, Collection<FakeValuesInterface>> fakeValues = new HashMap<>();\n\n    static {\n        EnFile.getFiles().forEach(file -> {\n            ENGLISH_FAKE_VALUE_GROUPING.add(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, file.getFile(), file.getPath())));\n        });\n    }\n\n    public void add(FakeValuesInterface fakeValue) {\n        if (fakeValue instanceof FakeValues) {\n            ((FakeValues) fakeValue).getPaths().forEach(p ->\n            fakeValues.computeIfAbsent(p, key -> new HashSet<>())\n                .add(fakeValue));\n        } else if (fakeValue instanceof FakeValuesGrouping) {\n            fakeValues.putAll(((FakeValuesGrouping) fakeValue).fakeValues);\n        } else {\n            throw new RuntimeException(fakeValues.getClass().getName() + \" not supported (please raise an issue)\");\n        }\n    }\n\n    @Override\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public Map get(String key) {\n        Map result = null;\n        for (FakeValuesInterface fakeValues : fakeValues.getOrDefault(key, Collections.emptyList())) {\n            if (result == null) {\n                result = fakeValues.get(key);\n            } else {\n                final Map newResult = fakeValues.get(key);\n                result.putAll(newResult);\n            }\n        }\n        return result;\n    }\n\n    public static FakeValuesGrouping getEnglishFakeValueGrouping() {\n        return ENGLISH_FAKE_VALUE_GROUPING;\n    }\n}", "super_interfaces": ["FakeValuesInterface"], "fields": [{"attribute_expression": "private static final FakeValuesGrouping ENGLISH_FAKE_VALUE_GROUPING = new FakeValuesGrouping();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "FakeValuesGrouping", "name": "ENGLISH_FAKE_VALUE_GROUPING = new FakeValuesGrouping()", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Collection<FakeValuesInterface>> fakeValues = new HashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Collection<FakeValuesInterface>>", "name": "fakeValues = new HashMap<>()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "name": "RandomService", "file_path": "src/main/java/net/datafaker/service/RandomService.java", "superclasses": "", "methods": ["[]RandomService()", "[]RandomService(Random)", "[int]nextInt()", "[int]nextInt(int)", "[Integer]nextInt(int,int)", "[float]nextFloat()", "[long]nextLong()", "[long]nextLong(long)", "[long]nextLong(long,long)", "[double]nextDouble()", "[double]nextDouble(double,double)", "[boolean]nextBoolean()", "[byte[]]nextRandomBytes(int)", "[String]hex()", "[String]hex(int)", "[String]hex(int,boolean)", "[Random]getRandomInternal()", "[boolean]equals(Object)", "[int]hashCode()", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/service/RandomService.java.RandomService.[]RandomService()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[]RandomService(Random)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[int]nextInt()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[int]nextInt(int)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[Integer]nextInt(int,int)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[float]nextFloat()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[long]nextLong()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[long]nextLong(long)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[long]nextLong(long,long)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[double]nextDouble()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[double]nextDouble(double,double)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[boolean]nextBoolean()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[byte[]]nextRandomBytes(int)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]hex()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]hex(int)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]hex(int,boolean)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[Random]getRandomInternal()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[boolean]equals(Object)", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[int]hashCode()", "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RandomService {\n    private static final char[] HEX_UP = \"0123456789ABCDEF\".toCharArray();\n    private static final char[] HEX_LOWER = \"0123456789abcdef\".toCharArray();\n    private static final Random SHARED_RANDOM = new Random();\n    private final Random random;\n\n    /**\n     * Uses a default shared random.\n     */\n    public RandomService() {\n        this(SHARED_RANDOM);\n    }\n\n    /**\n     * @param random If null is passed in, a default Random is assigned\n     */\n    public RandomService(Random random) {\n        this.random = random != null ? random : SHARED_RANDOM;\n    }\n\n    @SuppressWarnings(\"unused\")\n    public int nextInt() {\n        return random.nextInt();\n    }\n\n    public int nextInt(int n) {\n        return random.nextInt(n);\n    }\n\n    public Integer nextInt(int min, int max) {\n        return random.nextInt(min, max + 1);\n    }\n\n    @SuppressWarnings(\"unused\")\n    public float nextFloat() {\n        return random.nextFloat();\n    }\n\n    public long nextLong() {\n        return random.nextLong();\n    }\n\n    // lifted from http://stackoverflow.com/questions/2546078/java-random-long-number-in-0-x-n-range\n    public long nextLong(long n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"bound must be positive: \" + n);\n        }\n\n        long bits, val;\n        do {\n            long randomLong = random.nextLong();\n            bits = (randomLong << 1) >>> 1;\n            val = bits % n;\n        } while (bits - val + (n - 1) < 0L);\n        return val;\n    }\n\n    public long nextLong(long min, long max) {\n        return min + (long) (nextDouble() * (max - min));\n    }\n\n    public double nextDouble() {\n        return random.nextDouble();\n    }\n\n    public double nextDouble(double min, double max) {\n        return min + (nextDouble() * (max - min));\n    }\n\n    public boolean nextBoolean() {\n        return random.nextBoolean();\n    }\n\n    public byte[] nextRandomBytes(int numberOfBytes) {\n        final byte[] randomBytes = new byte[numberOfBytes];\n        random.nextBytes(randomBytes);\n        return randomBytes;\n    }\n\n    public String hex() {\n        return hex(8);\n    }\n\n    public String hex(int length) {\n        return hex(length, true);\n    }\n\n    public String hex(int length, boolean upper) {\n        if (length <= 0) {\n            return \"\"; // Keep the existing behavior instead of throwing an error.\n        }\n        char[] hexArray = upper ? HEX_UP : HEX_LOWER;\n        final char[] hexChars = new char[length];\n        final byte[] randomBytes = nextRandomBytes(length);\n        for (int i = 0; i < length; i++) {\n            hexChars[i] = hexArray[((char) randomBytes[i]) % hexArray.length];\n        }\n        return new String(hexChars);\n    }\n\n    public Random getRandomInternal() {\n        return random;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof RandomService that)) return false;\n\n        return Objects.equals(random, that.random);\n    }\n\n    @Override\n    public int hashCode() {\n        if (random == SHARED_RANDOM) return 1;\n        return random != null ? random.hashCode() : 0;\n    }\n\n    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"@\" + random;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final char[] HEX_UP = \"0123456789ABCDEF\".toCharArray();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "HEX_UP = \"0123456789ABCDEF\".toCharArray()", "syntax_pass": true}, {"attribute_expression": "private static final char[] HEX_LOWER = \"0123456789abcdef\".toCharArray();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "HEX_LOWER = \"0123456789abcdef\".toCharArray()", "syntax_pass": true}, {"attribute_expression": "private static final Random SHARED_RANDOM = new Random();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Random", "name": "SHARED_RANDOM = new Random()", "syntax_pass": true}, {"attribute_expression": "private final Random random;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Random", "name": "random", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "name": "FakeValuesContext", "file_path": "src/main/java/net/datafaker/service/FakeValuesContext.java", "superclasses": "", "methods": ["[]FakeValuesContext(Locale)", "[]FakeValuesContext(Locale,URL)", "[]FakeValuesContext(Locale,String,String)", "[]FakeValuesContext(Locale,String,String,URL)", "[FakeValuesContext]of(Locale)", "[FakeValuesContext]of(Locale,URL)", "[FakeValuesContext]of(Locale,String,String)", "[FakeValuesContext]of(Locale,String,String,URL)", "[String]getFilename(Locale)", "[String]language(Locale)", "[Locale]getLocale()", "[String]getFilename()", "[String]getPath()", "[URL]getUrl()", "[boolean]equals(Object)", "[int]hashCode()", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale,URL)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale,String,String)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale,String,String,URL)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale,URL)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale,String,String)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale,String,String,URL)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]getFilename(Locale)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]language(Locale)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[Locale]getLocale()", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]getFilename()", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]getPath()", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[URL]getUrl()", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[boolean]equals(Object)", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[int]hashCode()", "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "class FakeValuesContext {\n    private final SingletonLocale singletonLocale;\n    private final String filename;\n    private final int filenameHashCode;\n    private final String path;\n    private final URL url;\n    private final int urlHashCode;\n\n    private FakeValuesContext(Locale locale) {\n        this(locale, getFilename(locale), getFilename(locale), null);\n    }\n\n    private FakeValuesContext(Locale locale, URL url) {\n        this(locale, getFilename(locale), null, url);\n    }\n\n    private FakeValuesContext(Locale locale, String filename, String path) {\n        this(locale, filename, path, null);\n    }\n\n    private FakeValuesContext(Locale locale, String filename, String path, URL url) {\n        this.singletonLocale = SingletonLocale.get(locale);\n        this.filename = filename;\n        this.path = path;\n        this.url = url;\n        this.filenameHashCode = filename == null ? 0 : filename.hashCode();\n        try {\n            this.urlHashCode = url == null ? 0 : url.toURI().hashCode();\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Invalid url: \\\"%s\\\"\".formatted(url), e);\n        }\n    }\n\n    public static FakeValuesContext of(Locale locale) {\n        return new FakeValuesContext(locale);\n    }\n\n    public static FakeValuesContext of(Locale locale, URL url) {\n        return new FakeValuesContext(locale, url);\n    }\n\n    public static FakeValuesContext of(Locale locale, String filename, String path) {\n        return new FakeValuesContext(locale, filename, path);\n    }\n\n    public static FakeValuesContext of(Locale locale, String filename, String path, URL url) {\n        return new FakeValuesContext(locale, filename, path, url);\n    }\n\n    private static String getFilename(Locale locale) {\n        String lang = language(locale);\n        if (\"\".equals(locale.getCountry())) {\n            return lang;\n        } else if (\"\".equals(locale.getLanguage())) {\n            return \"_\" + locale.getCountry();\n        } else {\n            return lang + \"-\" + locale.getCountry();\n        }\n    }\n\n    /**\n     * If you create a locale with \"he\", it gets converted to \"iw\" which is old.\n     * This addresses that unfortunate condition.\n     */\n    private static String language(Locale locale) {\n        return switch (locale.getLanguage()) {\n            case \"iw\" -> \"he\";\n            case \"in\" -> \"id\";\n            case \"ji\" -> \"yi\";\n            default -> locale.getLanguage();\n        };\n    }\n\n    public Locale getLocale() {\n        return singletonLocale.getLocale();\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    String getPath() {\n        return path;\n    }\n\n    public URL getUrl() {\n        return url;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FakeValuesContext that = (FakeValuesContext) o;\n\n        if (!Objects.equals(singletonLocale, that.singletonLocale)) return false;\n        if (!Objects.equals(filename, that.filename)) return false;\n        if (!Objects.equals(path, that.path)) return false;\n        return Objects.equals(url, that.url);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = singletonLocale == null ? 0 : singletonLocale.hashCode();\n        result = 31 * result + filenameHashCode;\n        result = 31 * result + (path == null ? 0 : path.hashCode());\n        result = 31 * result + urlHashCode;\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"FakeValuesContext{%s, filename='%s', path='%s', url=%s}\".formatted(singletonLocale, filename, path, url);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SingletonLocale singletonLocale;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SingletonLocale", "name": "singletonLocale", "syntax_pass": true}, {"attribute_expression": "private final String filename;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "filename", "syntax_pass": true}, {"attribute_expression": "private final int filenameHashCode;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "filenameHashCode", "syntax_pass": true}, {"attribute_expression": "private final String path;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "path", "syntax_pass": true}, {"attribute_expression": "private final URL url;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "URL", "name": "url", "syntax_pass": true}, {"attribute_expression": "private final int urlHashCode;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "urlHashCode", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "name": "FakeValues", "file_path": "src/main/java/net/datafaker/service/FakeValues.java", "superclasses": "", "methods": ["[]FakeValues(FakeValuesContext)", "[FakeValues]of(FakeValuesContext)", "[Map<String, Object>]get(String)", "[Map<String, Object>]loadFromUrl()", "[Map<String, Object>]loadValues()", "[void]enrichMapWithJavaNames(Map<String, Object>)", "[Map<String, Object>]readFromStream(InputStream)", "[Map<String, Object>]getMap(Map<String, Object>,String)", "[Set<String>]getPaths()", "[Set<String>]keysOf(Map<String, ?>)", "[Locale]getLocale()", "[boolean]equals(Object)", "[int]hashCode()", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[]FakeValues(FakeValuesContext)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[FakeValues]of(FakeValuesContext)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]get(String)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]loadFromUrl()", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]loadValues()", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[void]enrichMapWithJavaNames(Map<String, Object>)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]readFromStream(InputStream)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]getMap(Map<String, Object>,String)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Set<String>]getPaths()", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Set<String>]keysOf(Map<String, ?>)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Locale]getLocale()", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[boolean]equals(Object)", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[int]hashCode()", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class FakeValues implements FakeValuesInterface {\n    private static final Map<FakeValuesContext, FakeValues> FAKE_VALUES_MAP = new ConcurrentHashMap<>();\n    private final FakeValuesContext fakeValuesContext;\n    private final LazyEvaluated<Map<String, Object>> values = new LazyEvaluated<>(() -> loadValues());\n\n    private FakeValues(FakeValuesContext fakeValuesContext) {\n        this.fakeValuesContext = fakeValuesContext;\n    }\n\n    static FakeValues of(FakeValuesContext fakeValuesContext) {\n        return FAKE_VALUES_MAP.computeIfAbsent(fakeValuesContext, FakeValues::new);\n    }\n\n    @Override\n    public Map<String, Object> get(String key) {\n        return getMap(values.get(), key);\n    }\n\n    private Map<String, Object> loadFromUrl() {\n        final URL url = fakeValuesContext.getUrl();\n        if (url == null) {\n            return null;\n        }\n        try (InputStream stream = url.openStream()) {\n            return readFromStream(stream);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to read fake values from %s\".formatted(url), e);\n        }\n    }\n\n    private Map<String, Object> loadValues() {\n        Map<String, Object> result = loadFromUrl();\n        if (result != null) return result;\n\n        final Locale locale = fakeValuesContext.getLocale();\n        final String fileName = fakeValuesContext.getFilename();\n        final String[] paths = fileName.isEmpty()\n            ? new String[] {\"/\" + locale.getLanguage() + \".yml\"}\n            : new String[] {\n                \"/\" + locale.getLanguage() + \"/\" + fileName,\n                \"/\" + fileName + \".yml\",\n                \"/\" + locale.getLanguage() + \".yml\"};\n\n        for (String path : paths) {\n            try (InputStream stream = getClass().getResourceAsStream(path)) {\n                if (stream != null) {\n                    result = readFromStream(stream);\n                    enrichMapWithJavaNames(result);\n                } else {\n                    try (InputStream stream2 = getClass().getClassLoader().getResourceAsStream(path)) {\n                        result = readFromStream(stream2);\n                        enrichMapWithJavaNames(result);\n                    }\n                }\n\n            } catch (IOException e) {\n                throw new RuntimeException(\"Failed to read fake values from %s\".formatted(path), e);\n            }\n            if (result != null) {\n                return result;\n            }\n        }\n        return emptyMap();\n    }\n\n    private void enrichMapWithJavaNames(Map<String, Object> result) {\n        if (result != null) {\n            Map<String, Object> map = null;\n            for (Map.Entry<String, Object> entry : result.entrySet()) {\n                final String key = entry.getKey();\n                Object value = entry.getValue();\n                if (entry.getValue() instanceof Map) {\n                    @SuppressWarnings(\"unchecked\")\n                    Map<String, Object> entryMap = (Map<String, Object>) entry.getValue();\n                    Map<String, Object> nestedMap = new HashMap<>(entryMap.size());\n                    for (Map.Entry<String, Object> e: entryMap.entrySet()) {\n                        nestedMap.put(toJavaNames(e.getKey(), true), e.getValue());\n                    }\n                    entryMap.putAll(nestedMap);\n                }\n                // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n                if (key.contains(\"_\")) {\n                    if (map == null) {\n                        map = new HashMap<>();\n                    }\n                    map.put(toJavaNames(key, false), value);\n                }\n            }\n            if (map != null) {\n                result.putAll(map);\n            }\n        }\n    }\n\n    private Map<String, Object> readFromStream(InputStream stream) {\n        if (stream == null) return null;\n        final Map<String, Object> valuesMap = new Yaml().loadAs(stream, Map.class);\n        Map<String, Object> localeBased = getMap(valuesMap, fakeValuesContext.getLocale().getLanguage());\n        if (localeBased == null) {\n            localeBased = getMap(valuesMap, fakeValuesContext.getFilename());\n        }\n        return getMap(localeBased, \"faker\");\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static Map<String, Object> getMap(Map<String, Object> map, String key) {\n        return (Map<String, Object>) map.get(key);\n    }\n\n    Set<String> getPaths() {\n        return fakeValuesContext.getPath() != null ?\n            Set.of(fakeValuesContext.getPath()) :\n            keysOf(values.get());\n    }\n\n    private static Set<String> keysOf(Map<String, ?> map) {\n        return map == null || map.isEmpty() ? null : map.keySet();\n    }\n\n    Locale getLocale() {\n        return fakeValuesContext.getLocale();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof FakeValues that)) return false;\n        return Objects.equals(fakeValuesContext, that.fakeValuesContext);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(fakeValuesContext);\n    }\n\n    @Override\n    public String toString() {\n        return \"FakeValues{%s}\".formatted(fakeValuesContext);\n    }\n}", "super_interfaces": ["FakeValuesInterface"], "fields": [{"attribute_expression": "private static final Map<FakeValuesContext, FakeValues> FAKE_VALUES_MAP = new ConcurrentHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<FakeValuesContext, FakeValues>", "name": "FAKE_VALUES_MAP = new ConcurrentHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final FakeValuesContext fakeValuesContext;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "FakeValuesContext", "name": "fakeValuesContext", "syntax_pass": true}, {"attribute_expression": "private final LazyEvaluated<Map<String, Object>> values = new LazyEvaluated<>(() -> loadValues());", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "LazyEvaluated<Map<String, Object>>", "name": "values = new LazyEvaluated<>(() -> loadValues())", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "name": "FakerContext", "file_path": "src/main/java/net/datafaker/service/FakerContext.java", "superclasses": "", "methods": ["[]FakerContext(Locale,RandomService)", "[void]setLocale(Locale)", "[void]setRandomService(RandomService)", "[Locale]getLocale()", "[SingletonLocale]getSingletonLocale()", "[RandomService]getRandomService()", "[List<SingletonLocale>]getLocaleChain()", "[SingletonLocale]normalizeLocale(SingletonLocale)", "[void]setCurrentLocale(Locale)", "[List<SingletonLocale>]localeChain(Locale)", "[List<SingletonLocale>]localeChain()", "[List<SingletonLocale>]calculateLocaleChain(SingletonLocale)", "[boolean]equals(Object)", "[int]hashCode()", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[]FakerContext(Locale,RandomService)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[void]setLocale(Locale)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[void]setRandomService(RandomService)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[Locale]getLocale()", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[SingletonLocale]getSingletonLocale()", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[RandomService]getRandomService()", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]getLocaleChain()", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[SingletonLocale]normalizeLocale(SingletonLocale)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[void]setCurrentLocale(Locale)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]localeChain(Locale)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]localeChain()", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]calculateLocaleChain(SingletonLocale)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[boolean]equals(Object)", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[int]hashCode()", "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "\nContains the changeable Faker's part which currently contains {@link Locale} and {@link RandomService}.\n", "original_string": "public class FakerContext {\n    private static final Pattern LOCALE = Pattern.compile(\"[-_]\");\n    private static final Map<SingletonLocale, List<SingletonLocale>> LOCALE_2_LOCALES_CHAIN = new IdentityHashMap<>();\n    private static final Map<SingletonLocale, SingletonLocale> STRING_LOCALE_HASH_MAP = new IdentityHashMap<>();\n    public static final List<SingletonLocale> DEFAULT_SINGLETON_LOCALE_LIST = List.of(DEFAULT_LOCALE);\n    private SingletonLocale sLocale;\n    private RandomService randomService;\n\n\n    /**\n     * Resolves YAML file using the most specific path first based on language and country code.\n     * 'en_US' would resolve in the following order:\n     * <ol>\n     * <li>/en-US.yml</li>\n     * <li>/en.yml</li>\n     * </ol>\n     * The search is case-insensitive, so the following will all resolve correctly.  Also, either a hyphen or\n     * an underscore can be used when constructing a {@link Locale} instance.  This is legacy behavior and not\n     * condoned, but it will work.\n     * <ul>\n     * <li>EN_US</li>\n     * <li>En-Us</li>\n     * <li>eN_uS</li>\n     * </ul>\n     */\n    public FakerContext(Locale locale, RandomService randomService) {\n        this.sLocale = SingletonLocale.get(locale);\n        this.randomService = randomService;\n        setCurrentLocale(locale);\n    }\n\n    public void setLocale(Locale locale) {\n        this.sLocale = SingletonLocale.get(locale);\n    }\n\n    public void setRandomService(RandomService randomService) {\n        this.randomService = randomService;\n    }\n\n    public Locale getLocale() {\n        return sLocale.getLocale();\n    }\n\n    public SingletonLocale getSingletonLocale() {\n        return sLocale;\n    }\n\n    public RandomService getRandomService() {\n        return randomService;\n    }\n\n    public List<SingletonLocale> getLocaleChain() {\n        final List<SingletonLocale> res = LOCALE_2_LOCALES_CHAIN.get(sLocale);\n        if (res == null) {\n            synchronized (FakerContext.class) {\n                return LOCALE_2_LOCALES_CHAIN.get(sLocale);\n            }\n        }\n        return res;\n    }\n\n    /**\n     * @return a proper {@link Locale} instance with language and country code set regardless of how\n     * it was instantiated.  new Locale(\"pt-br\") will be normalized to a locale constructed\n     * with new Locale(\"pt\",\"BR\").\n     */\n    private SingletonLocale normalizeLocale(SingletonLocale singletonLocale) {\n        SingletonLocale res = STRING_LOCALE_HASH_MAP.get(singletonLocale);\n        if (res != null) {\n            return res;\n        }\n        final String[] parts;\n        final Locale locale = singletonLocale.getLocale();\n        if (locale.getCountry().isEmpty()) {\n            parts = LOCALE.split(locale.getLanguage());\n        } else {\n            parts = new String[] {locale.getLanguage(), locale.getCountry()};\n        }\n\n        if (parts.length == 1) {\n            if ((res = SingletonLocale.get(Locale.forLanguageTag(parts[0]))) == null) {\n                res = SingletonLocale.get(new Locale(parts[0]));\n            }\n        } else {\n            res = SingletonLocale.get(new Locale(parts[0], parts[1]));\n        }\n        synchronized (FakerContext.class) {\n            STRING_LOCALE_HASH_MAP.put(singletonLocale, res);\n        }\n        return res;\n    }\n\n    public void setCurrentLocale(Locale locale) {\n        Objects.requireNonNull(locale);\n        this.sLocale = normalizeLocale(SingletonLocale.get(locale));\n        if (LOCALE_2_LOCALES_CHAIN.containsKey(this.sLocale)) {\n            return;\n        }\n        synchronized (FakerContext.class) {\n            LOCALE_2_LOCALES_CHAIN.put(this.sLocale, localeChain());\n        }\n    }\n\n    /**\n     * Convert the specified locale into a chain of locales used for message resolution. For example:\n     * <p>\n     * {@link Locale#FRANCE} (fr_FR) to [ fr_FR, anotherTest, en ]\n     *\n     * @return a list of {@link Locale} instances\n     */\n    protected List<SingletonLocale> localeChain(Locale from) {\n        if (DEFAULT_LOCALE.getLocale().equals(from)) {\n            return DEFAULT_SINGLETON_LOCALE_LIST;\n        }\n\n        return calculateLocaleChain(normalizeLocale(SingletonLocale.get(from)));\n    }\n\n    protected List<SingletonLocale> localeChain() {\n        if (DEFAULT_LOCALE == sLocale) {\n            return DEFAULT_SINGLETON_LOCALE_LIST;\n        }\n\n        return calculateLocaleChain(sLocale);\n    }\n\n    private List<SingletonLocale> calculateLocaleChain(SingletonLocale locale) {\n        final List<SingletonLocale> chain = new ArrayList<>(4);\n        chain.add(locale);\n        if (!\"\".equals(locale.getLocale().getCountry())) {\n            if (!DEFAULT_LOCALE.getLocale().getLanguage().equals(locale.getLocale().getLanguage())) {\n                chain.add(SingletonLocale.get(new Locale(locale.getLocale().getLanguage())));\n            }\n            chain.add(SingletonLocale.get(new Locale(\"\", locale.getLocale().getCountry())));\n        }\n        chain.add(DEFAULT_LOCALE); // default\n        return chain;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FakerContext that = (FakerContext) o;\n\n        if (!Objects.equals(sLocale, that.sLocale)) return false;\n        return Objects.equals(randomService, that.randomService);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = sLocale != null ? sLocale.hashCode() : 0;\n        result = 31 * result + (randomService != null ? randomService.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"FakerContext{%s, %s}\".formatted(sLocale, randomService);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Pattern LOCALE = Pattern.compile(\"[-_]\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Pattern", "name": "LOCALE = Pattern.compile(\"[-_]\")", "syntax_pass": true}, {"attribute_expression": "private static final Map<SingletonLocale, List<SingletonLocale>> LOCALE_2_LOCALES_CHAIN = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<SingletonLocale, List<SingletonLocale>>", "name": "LOCALE_2_LOCALES_CHAIN = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private static final Map<SingletonLocale, SingletonLocale> STRING_LOCALE_HASH_MAP = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<SingletonLocale, SingletonLocale>", "name": "STRING_LOCALE_HASH_MAP = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "public static final List<SingletonLocale> DEFAULT_SINGLETON_LOCALE_LIST = List.of(DEFAULT_LOCALE);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "List<SingletonLocale>", "name": "DEFAULT_SINGLETON_LOCALE_LIST = List.of(DEFAULT_LOCALE)", "syntax_pass": true}, {"attribute_expression": "private SingletonLocale sLocale;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SingletonLocale", "name": "sLocale", "syntax_pass": true}, {"attribute_expression": "private RandomService randomService;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "RandomService", "name": "randomService", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile", "name": "EnFile", "file_path": "src/main/java/net/datafaker/service/files/EnFile.java", "superclasses": "", "methods": ["[]EnFile(String)", "[]EnFile(String,String)", "[String]getFile()", "[String]getPath()", "[Stream<EnFile>]getFiles()"], "method_uris": ["src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[]EnFile(String)", "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[]EnFile(String,String)", "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[String]getFile()", "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[String]getPath()", "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[Stream<EnFile>]getFiles()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class EnFile {\n    private static final String YML = \".yml\";\n    private final String file;\n    private final String path;\n\n    private EnFile(String file) {\n        this(file, file.endsWith(YML) ? file.substring(0, file.length() - YML.length()) : file);\n    }\n\n    private EnFile(String file, String path) {\n        this.file = file;\n        this.path = path;\n    }\n\n    public String getFile() {\n        return file;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    private static final List<EnFile> FILES = Stream.of(\n        \"address.yml\",\n        \"ancient.yml\",\n        \"animal.yml\",\n        \"app.yml\",\n        \"appliance.yml\",\n        \"aqua_teen_hunger_force.yml\",\n        \"artist.yml\",\n        \"australia.yml\",\n        \"aviation.yml\",\n        \"aws.yml\",\n        \"azure.yml\",\n        \"babylon5.yml\",\n        \"back_to_the_future.yml\",\n        \"barcode.yml\",\n        \"baseball.yml\",\n        \"basketball.yml\",\n        \"battlefield1.yml\",\n        \"beer.yml\",\n        \"big_bang_theory.yml\",\n        \"blood_type.yml\",\n        \"boardgame.yml\",\n        \"bojack_horseman.yml\",\n        \"book.yml\",\n        \"bossa_nova.yml\",\n        \"brand.yml\",\n        \"breaking_bad.yml\",\n        \"brooklyn_nine_nine.yml\",\n        \"buffy.yml\",\n        \"business.yml\",\n        \"camera.yml\",\n        \"cannabis.yml\",\n        \"chuck_norris.yml\",\n        \"clash_of_clans.yml\",\n        \"control.yml\",\n        \"chiquito.yml\",\n        \"chess.yml\",\n        \"code.yml\",\n        \"coffee.yml\",\n        \"coin.yml\",\n        \"color.yml\",\n        \"commerce.yml\",\n        \"community.yml\",\n        \"company.yml\",\n        \"computer.yml\",\n        \"compass.yml\",\n        \"detective_conan.yml\",\n        \"doraemon.yml\",\n        \"construction.yml\",\n        \"cosmere.yml\",\n        \"country.yml\",\n        \"cowboy_bebop.yml\",\n        \"cricket.yml\",\n        \"crypto_coin.yml\",\n        \"culture_series.yml\",\n        \"currency.yml\",\n        \"dc_comics.yml\",\n        \"dark_souls.yml\",\n        \"demographic.yml\",\n        \"departed.yml\",\n        \"dessert.yml\",\n        \"device.yml\",\n        \"domain.yml\",\n        \"dnd.yml\",\n        \"dota2.yml\",\n        \"dr_who.yml\",\n        \"dragon_ball.yml\",\n        \"driving_license.yml\",\n        \"drone.yml\",\n        \"dumb_and_dumber.yml\",\n        \"dune.yml\",\n        \"educator.yml\",\n        \"elden_ring.yml\",\n        \"elder_scrolls.yml\",\n        \"electrical_components.yml\",\n        \"emoji.yml\",\n        \"esport.yml\",\n        \"englandfootball.yml\",\n//            \"fallout.yml\",\n        \"family_guy.yml\",\n        \"fallout.yml\",\n        \"famous_last_words.yml\",\n        \"file.yml\",\n        \"final_fantasy_xiv.yml\",\n        \"final_space.yml\",\n        \"finance.yml\",\n        \"financial_terms.yml\",\n        \"food.yml\",\n        \"football.yml\",\n        \"formula1.yml\",\n        \"fresh_prince_of_bel_air.yml\",\n        \"friends.yml\",\n        \"fma_brotherhood.yml\",\n        \"funny_name.yml\",\n        \"futurama.yml\",\n        \"game_of_thrones.yml\",\n        \"garments_sizes.yml\",\n//            \"game.yml\",\n        \"gender.yml\",\n        \"ghostbusters.yml\",\n        \"grateful_dead.yml\",\n        \"greek_philosophers.yml\",\n        \"hacker.yml\",\n        \"half_life.yml\",\n        \"harry_potter.yml\",\n        \"hearthstone.yml\",\n        \"heroes.yml\",\n        \"heroes_of_the_storm.yml\",\n        \"hey_arnold.yml\",\n        \"hipster.yml\",\n        \"hitchhikers_guide_to_the_galaxy.yml\",\n        \"hobbit.yml\",\n        \"hobby.yml\",\n        \"hololive.yml\",\n        \"house.yml\",\n        \"how_i_met_your_mother.yml\",\n        \"how_to_train_your_dragon.yml\",\n        \"id_number.yml\",\n        \"industry_segments.yml\",\n        \"internet.yml\",\n        \"job.yml\",\n        \"joke.yml\",\n        \"kpop.yml\",\n        \"largelanguagemodel.yml\",\n        \"lebowski.yml\",\n        \"location.yml\",\n        \"lord_of_the_rings.yml\",\n        \"lorem.yml\",\n//            \"lovecraft.yml\",\n//            \"markdown.yml\",\n        \"marketing.yml\",\n        \"mass_effect.yml\",\n        \"matz.yml\",\n        \"measurement.yml\",\n        \"mbti.yml\",\n        \"medical.yml\",\n        \"michael_scott.yml\",\n        \"military.yml\",\n        \"minecraft.yml\",\n        \"money_heist.yml\",\n        \"most_interesting_man_in_the_world.yml\",\n        \"mood.yml\",\n        \"movie.yml\",\n        \"mountain.yml\",\n        \"mountaineering.yml\",\n        \"music.yml\",\n//            \"myst.yml\",\n        \"name.yml\",\n        \"naruto.yml\",\n        \"nation.yml\",\n        \"nato_phonetic_alphabet.yml\",\n        \"new_girl.yml\",\n        \"one_piece.yml\",\n//            \"opera.yml\",\n        \"nigeria.yml\",\n        \"overwatch.yml\",\n        \"olympic_sport.yml\",\n        \"oscar_movie.yml\",\n//            \"parks_and_rec.yml\",\n//            \"phish.yml\",\n        \"passport.yml\",\n        \"phone_number.yml\",\n        \"photography.yml\",\n        \"planet.yml\",\n        \"pokemon.yml\",\n        \"princess_bride.yml\",\n        \"programming_language.yml\",\n        \"pronouns.yml\",\n        \"red_dead_redemption2.yml\",\n        \"relationship.yml\",\n        \"restaurant.yml\",\n        \"rick_and_morty.yml\",\n        \"robin.yml\",\n        \"rock_band.yml\",\n        \"rupaul.yml\",\n        \"science.yml\",\n        \"seinfeld.yml\",\n        \"shakespeare.yml\",\n        \"show.yml\",\n        \"silicon_valley.yml\",\n        \"simpsons.yml\",\n        \"sip.yml\",\n        \"size.yml\",\n        \"slack_emoji.yml\",\n//            \"sonic_the_hedgehog.yml\",\n        \"south_park.yml\",\n        \"soul_knight.yml\",\n        \"space.yml\",\n        \"spongebob.yml\",\n        \"starcraft.yml\",\n        \"star_trek.yml\",\n        \"star_wars.yml\",\n        \"stargate.yml\",\n        \"stock.yml\",\n        \"stranger_things.yml\",\n        \"studio_ghibli.yml\",\n        \"subscription.yml\",\n        \"suits.yml\",\n//            \"super_smash_bros.yml\",\n        \"superhero.yml\",\n        \"supernatural.yml\",\n        \"sword_art_online.yml\",\n        \"tea.yml\",\n        \"team.yml\",\n        \"tire.yml\",\n        \"the_expanse.yml\",\n        \"the_it_crowd.yml\",\n        \"the_kingkiller_chronicle.yml\",\n        \"the_room.yml\",\n        \"the_thick_of_it.yml\",\n        \"tron.yml\",\n        \"transport.yml\",\n        \"twitter.yml\",\n        \"twin_peaks.yml\",\n//            \"umphreys_mcgee.yml\",\n        \"university.yml\",\n        \"v_for_vendetta.yml\",\n        \"vehicle.yml\",\n        \"video_game.yml\",\n        \"volleyball.yml\",\n        \"the_venture_bros.yml\",\n        \"verbs.yml\",\n        \"weather.yml\",\n        \"words.yml\",\n        \"witcher.yml\",\n        \"kaamelott.yml\",\n        \"touhou.yml\",\n//            \"world_of_warcraft.yml\",\n        \"yoda.yml\",\n        \"zelda.yml\",\n        \"zodiac.yml\").map(EnFile::new).toList();\n\n    // files where the search path can't be derived from the filename\n    private static final List<EnFile> FILES_WITH_A_DIFFERENT_PATH = List.of(\n        new EnFile(\"animal.yml\", \"creature\"),\n        new EnFile(\"cat.yml\", \"creature\"),\n        new EnFile(\"dog.yml\", \"creature\"),\n\n        new EnFile(\"dota2.yml\", \"games\"),\n        new EnFile(\"elder_scrolls.yml\", \"games\"),\n        new EnFile(\"half_life.yml\", \"games\"),\n        new EnFile(\"hearthstone.yml\", \"games\"),\n        new EnFile(\"horse.yml\", \"creature\"),\n        new EnFile(\"league_of_legends.yml\", \"games\"),\n        new EnFile(\"marvel_snap.yml\", \"games\"),\n        new EnFile(\"myst.yml\", \"games\"),\n        new EnFile(\"overwatch.yml\", \"games\"),\n        new EnFile(\"pokemon.yml\", \"games\"),\n        new EnFile(\"resident_evil.yml\", \"games\"),\n        new EnFile(\"sonic_the_hedgehog.yml\", \"games\"),\n        new EnFile(\"super_mario.yml\", \"games\"),\n        new EnFile(\"super_smash_bros.yml\", \"games\"),\n        new EnFile(\"street_fighter.yml\", \"games\"),\n        new EnFile(\"witcher.yml\", \"games\"),\n        new EnFile(\"warhammer_fantasy.yml\", \"games\"),\n        new EnFile(\"world_of_warcraft.yml\", \"games\"),\n        new EnFile(\"zelda.yml\", \"games\"),\n\n        new EnFile(\"phone_number.yml\", \"cell_phone\"), // load phone number again with a different path\n\n        new EnFile(\"care_provider.yml\", \"healthcare\"),\n        new EnFile(\"disease.yml\", \"healthcare\"),\n        new EnFile(\"medical_procedure.yml\", \"healthcare\"),\n        new EnFile(\"medication.yml\", \"healthcare\"),\n        new EnFile(\"observation.yml\", \"healthcare\")\n    );\n\n    public static Stream<EnFile> getFiles() {\n        return Stream.concat(FILES.stream(), FILES_WITH_A_DIFFERENT_PATH.stream());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final String YML = \".yml\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "YML = \".yml\"", "syntax_pass": true}, {"attribute_expression": "private final String file;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "file", "syntax_pass": true}, {"attribute_expression": "private final String path;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "path", "syntax_pass": true}, {"attribute_expression": "private static final List<EnFile> FILES = Stream.of(\n        \"address.yml\",\n        \"ancient.yml\",\n        \"animal.yml\",\n        \"app.yml\",\n        \"appliance.yml\",\n        \"aqua_teen_hunger_force.yml\",\n        \"artist.yml\",\n        \"australia.yml\",\n        \"aviation.yml\",\n        \"aws.yml\",\n        \"azure.yml\",\n        \"babylon5.yml\",\n        \"back_to_the_future.yml\",\n        \"barcode.yml\",\n        \"baseball.yml\",\n        \"basketball.yml\",\n        \"battlefield1.yml\",\n        \"beer.yml\",\n        \"big_bang_theory.yml\",\n        \"blood_type.yml\",\n        \"boardgame.yml\",\n        \"bojack_horseman.yml\",\n        \"book.yml\",\n        \"bossa_nova.yml\",\n        \"brand.yml\",\n        \"breaking_bad.yml\",\n        \"brooklyn_nine_nine.yml\",\n        \"buffy.yml\",\n        \"business.yml\",\n        \"camera.yml\",\n        \"cannabis.yml\",\n        \"chuck_norris.yml\",\n        \"clash_of_clans.yml\",\n        \"control.yml\",\n        \"chiquito.yml\",\n        \"chess.yml\",\n        \"code.yml\",\n        \"coffee.yml\",\n        \"coin.yml\",\n        \"color.yml\",\n        \"commerce.yml\",\n        \"community.yml\",\n        \"company.yml\",\n        \"computer.yml\",\n        \"compass.yml\",\n        \"detective_conan.yml\",\n        \"doraemon.yml\",\n        \"construction.yml\",\n        \"cosmere.yml\",\n        \"country.yml\",\n        \"cowboy_bebop.yml\",\n        \"cricket.yml\",\n        \"crypto_coin.yml\",\n        \"culture_series.yml\",\n        \"currency.yml\",\n        \"dc_comics.yml\",\n        \"dark_souls.yml\",\n        \"demographic.yml\",\n        \"departed.yml\",\n        \"dessert.yml\",\n        \"device.yml\",\n        \"domain.yml\",\n        \"dnd.yml\",\n        \"dota2.yml\",\n        \"dr_who.yml\",\n        \"dragon_ball.yml\",\n        \"driving_license.yml\",\n        \"drone.yml\",\n        \"dumb_and_dumber.yml\",\n        \"dune.yml\",\n        \"educator.yml\",\n        \"elden_ring.yml\",\n        \"elder_scrolls.yml\",\n        \"electrical_components.yml\",\n        \"emoji.yml\",\n        \"esport.yml\",\n        \"englandfootball.yml\",\n//            \"fallout.yml\",\n        \"family_guy.yml\",\n        \"fallout.yml\",\n        \"famous_last_words.yml\",\n        \"file.yml\",\n        \"final_fantasy_xiv.yml\",\n        \"final_space.yml\",\n        \"finance.yml\",\n        \"financial_terms.yml\",\n        \"food.yml\",\n        \"football.yml\",\n        \"formula1.yml\",\n        \"fresh_prince_of_bel_air.yml\",\n        \"friends.yml\",\n        \"fma_brotherhood.yml\",\n        \"funny_name.yml\",\n        \"futurama.yml\",\n        \"game_of_thrones.yml\",\n        \"garments_sizes.yml\",\n//            \"game.yml\",\n        \"gender.yml\",\n        \"ghostbusters.yml\",\n        \"grateful_dead.yml\",\n        \"greek_philosophers.yml\",\n        \"hacker.yml\",\n        \"half_life.yml\",\n        \"harry_potter.yml\",\n        \"hearthstone.yml\",\n        \"heroes.yml\",\n        \"heroes_of_the_storm.yml\",\n        \"hey_arnold.yml\",\n        \"hipster.yml\",\n        \"hitchhikers_guide_to_the_galaxy.yml\",\n        \"hobbit.yml\",\n        \"hobby.yml\",\n        \"hololive.yml\",\n        \"house.yml\",\n        \"how_i_met_your_mother.yml\",\n        \"how_to_train_your_dragon.yml\",\n        \"id_number.yml\",\n        \"industry_segments.yml\",\n        \"internet.yml\",\n        \"job.yml\",\n        \"joke.yml\",\n        \"kpop.yml\",\n        \"largelanguagemodel.yml\",\n        \"lebowski.yml\",\n        \"location.yml\",\n        \"lord_of_the_rings.yml\",\n        \"lorem.yml\",\n//            \"lovecraft.yml\",\n//            \"markdown.yml\",\n        \"marketing.yml\",\n        \"mass_effect.yml\",\n        \"matz.yml\",\n        \"measurement.yml\",\n        \"mbti.yml\",\n        \"medical.yml\",\n        \"michael_scott.yml\",\n        \"military.yml\",\n        \"minecraft.yml\",\n        \"money_heist.yml\",\n        \"most_interesting_man_in_the_world.yml\",\n        \"mood.yml\",\n        \"movie.yml\",\n        \"mountain.yml\",\n        \"mountaineering.yml\",\n        \"music.yml\",\n//            \"myst.yml\",\n        \"name.yml\",\n        \"naruto.yml\",\n        \"nation.yml\",\n        \"nato_phonetic_alphabet.yml\",\n        \"new_girl.yml\",\n        \"one_piece.yml\",\n//            \"opera.yml\",\n        \"nigeria.yml\",\n        \"overwatch.yml\",\n        \"olympic_sport.yml\",\n        \"oscar_movie.yml\",\n//            \"parks_and_rec.yml\",\n//            \"phish.yml\",\n        \"passport.yml\",\n        \"phone_number.yml\",\n        \"photography.yml\",\n        \"planet.yml\",\n        \"pokemon.yml\",\n        \"princess_bride.yml\",\n        \"programming_language.yml\",\n        \"pronouns.yml\",\n        \"red_dead_redemption2.yml\",\n        \"relationship.yml\",\n        \"restaurant.yml\",\n        \"rick_and_morty.yml\",\n        \"robin.yml\",\n        \"rock_band.yml\",\n        \"rupaul.yml\",\n        \"science.yml\",\n        \"seinfeld.yml\",\n        \"shakespeare.yml\",\n        \"show.yml\",\n        \"silicon_valley.yml\",\n        \"simpsons.yml\",\n        \"sip.yml\",\n        \"size.yml\",\n        \"slack_emoji.yml\",\n//            \"sonic_the_hedgehog.yml\",\n        \"south_park.yml\",\n        \"soul_knight.yml\",\n        \"space.yml\",\n        \"spongebob.yml\",\n        \"starcraft.yml\",\n        \"star_trek.yml\",\n        \"star_wars.yml\",\n        \"stargate.yml\",\n        \"stock.yml\",\n        \"stranger_things.yml\",\n        \"studio_ghibli.yml\",\n        \"subscription.yml\",\n        \"suits.yml\",\n//            \"super_smash_bros.yml\",\n        \"superhero.yml\",\n        \"supernatural.yml\",\n        \"sword_art_online.yml\",\n        \"tea.yml\",\n        \"team.yml\",\n        \"tire.yml\",\n        \"the_expanse.yml\",\n        \"the_it_crowd.yml\",\n        \"the_kingkiller_chronicle.yml\",\n        \"the_room.yml\",\n        \"the_thick_of_it.yml\",\n        \"tron.yml\",\n        \"transport.yml\",\n        \"twitter.yml\",\n        \"twin_peaks.yml\",\n//            \"umphreys_mcgee.yml\",\n        \"university.yml\",\n        \"v_for_vendetta.yml\",\n        \"vehicle.yml\",\n        \"video_game.yml\",\n        \"volleyball.yml\",\n        \"the_venture_bros.yml\",\n        \"verbs.yml\",\n        \"weather.yml\",\n        \"words.yml\",\n        \"witcher.yml\",\n        \"kaamelott.yml\",\n        \"touhou.yml\",\n//            \"world_of_warcraft.yml\",\n        \"yoda.yml\",\n        \"zelda.yml\",\n        \"zodiac.yml\").map(EnFile::new).toList();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<EnFile>", "name": "FILES = Stream.of(\n        \"address.yml\",\n        \"ancient.yml\",\n        \"animal.yml\",\n        \"app.yml\",\n        \"appliance.yml\",\n        \"aqua_teen_hunger_force.yml\",\n        \"artist.yml\",\n        \"australia.yml\",\n        \"aviation.yml\",\n        \"aws.yml\",\n        \"azure.yml\",\n        \"babylon5.yml\",\n        \"back_to_the_future.yml\",\n        \"barcode.yml\",\n        \"baseball.yml\",\n        \"basketball.yml\",\n        \"battlefield1.yml\",\n        \"beer.yml\",\n        \"big_bang_theory.yml\",\n        \"blood_type.yml\",\n        \"boardgame.yml\",\n        \"bojack_horseman.yml\",\n        \"book.yml\",\n        \"bossa_nova.yml\",\n        \"brand.yml\",\n        \"breaking_bad.yml\",\n        \"brooklyn_nine_nine.yml\",\n        \"buffy.yml\",\n        \"business.yml\",\n        \"camera.yml\",\n        \"cannabis.yml\",\n        \"chuck_norris.yml\",\n        \"clash_of_clans.yml\",\n        \"control.yml\",\n        \"chiquito.yml\",\n        \"chess.yml\",\n        \"code.yml\",\n        \"coffee.yml\",\n        \"coin.yml\",\n        \"color.yml\",\n        \"commerce.yml\",\n        \"community.yml\",\n        \"company.yml\",\n        \"computer.yml\",\n        \"compass.yml\",\n        \"detective_conan.yml\",\n        \"doraemon.yml\",\n        \"construction.yml\",\n        \"cosmere.yml\",\n        \"country.yml\",\n        \"cowboy_bebop.yml\",\n        \"cricket.yml\",\n        \"crypto_coin.yml\",\n        \"culture_series.yml\",\n        \"currency.yml\",\n        \"dc_comics.yml\",\n        \"dark_souls.yml\",\n        \"demographic.yml\",\n        \"departed.yml\",\n        \"dessert.yml\",\n        \"device.yml\",\n        \"domain.yml\",\n        \"dnd.yml\",\n        \"dota2.yml\",\n        \"dr_who.yml\",\n        \"dragon_ball.yml\",\n        \"driving_license.yml\",\n        \"drone.yml\",\n        \"dumb_and_dumber.yml\",\n        \"dune.yml\",\n        \"educator.yml\",\n        \"elden_ring.yml\",\n        \"elder_scrolls.yml\",\n        \"electrical_components.yml\",\n        \"emoji.yml\",\n        \"esport.yml\",\n        \"englandfootball.yml\",\n//            \"fallout.yml\",\n        \"family_guy.yml\",\n        \"fallout.yml\",\n        \"famous_last_words.yml\",\n        \"file.yml\",\n        \"final_fantasy_xiv.yml\",\n        \"final_space.yml\",\n        \"finance.yml\",\n        \"financial_terms.yml\",\n        \"food.yml\",\n        \"football.yml\",\n        \"formula1.yml\",\n        \"fresh_prince_of_bel_air.yml\",\n        \"friends.yml\",\n        \"fma_brotherhood.yml\",\n        \"funny_name.yml\",\n        \"futurama.yml\",\n        \"game_of_thrones.yml\",\n        \"garments_sizes.yml\",\n//            \"game.yml\",\n        \"gender.yml\",\n        \"ghostbusters.yml\",\n        \"grateful_dead.yml\",\n        \"greek_philosophers.yml\",\n        \"hacker.yml\",\n        \"half_life.yml\",\n        \"harry_potter.yml\",\n        \"hearthstone.yml\",\n        \"heroes.yml\",\n        \"heroes_of_the_storm.yml\",\n        \"hey_arnold.yml\",\n        \"hipster.yml\",\n        \"hitchhikers_guide_to_the_galaxy.yml\",\n        \"hobbit.yml\",\n        \"hobby.yml\",\n        \"hololive.yml\",\n        \"house.yml\",\n        \"how_i_met_your_mother.yml\",\n        \"how_to_train_your_dragon.yml\",\n        \"id_number.yml\",\n        \"industry_segments.yml\",\n        \"internet.yml\",\n        \"job.yml\",\n        \"joke.yml\",\n        \"kpop.yml\",\n        \"largelanguagemodel.yml\",\n        \"lebowski.yml\",\n        \"location.yml\",\n        \"lord_of_the_rings.yml\",\n        \"lorem.yml\",\n//            \"lovecraft.yml\",\n//            \"markdown.yml\",\n        \"marketing.yml\",\n        \"mass_effect.yml\",\n        \"matz.yml\",\n        \"measurement.yml\",\n        \"mbti.yml\",\n        \"medical.yml\",\n        \"michael_scott.yml\",\n        \"military.yml\",\n        \"minecraft.yml\",\n        \"money_heist.yml\",\n        \"most_interesting_man_in_the_world.yml\",\n        \"mood.yml\",\n        \"movie.yml\",\n        \"mountain.yml\",\n        \"mountaineering.yml\",\n        \"music.yml\",\n//            \"myst.yml\",\n        \"name.yml\",\n        \"naruto.yml\",\n        \"nation.yml\",\n        \"nato_phonetic_alphabet.yml\",\n        \"new_girl.yml\",\n        \"one_piece.yml\",\n//            \"opera.yml\",\n        \"nigeria.yml\",\n        \"overwatch.yml\",\n        \"olympic_sport.yml\",\n        \"oscar_movie.yml\",\n//            \"parks_and_rec.yml\",\n//            \"phish.yml\",\n        \"passport.yml\",\n        \"phone_number.yml\",\n        \"photography.yml\",\n        \"planet.yml\",\n        \"pokemon.yml\",\n        \"princess_bride.yml\",\n        \"programming_language.yml\",\n        \"pronouns.yml\",\n        \"red_dead_redemption2.yml\",\n        \"relationship.yml\",\n        \"restaurant.yml\",\n        \"rick_and_morty.yml\",\n        \"robin.yml\",\n        \"rock_band.yml\",\n        \"rupaul.yml\",\n        \"science.yml\",\n        \"seinfeld.yml\",\n        \"shakespeare.yml\",\n        \"show.yml\",\n        \"silicon_valley.yml\",\n        \"simpsons.yml\",\n        \"sip.yml\",\n        \"size.yml\",\n        \"slack_emoji.yml\",\n//            \"sonic_the_hedgehog.yml\",\n        \"south_park.yml\",\n        \"soul_knight.yml\",\n        \"space.yml\",\n        \"spongebob.yml\",\n        \"starcraft.yml\",\n        \"star_trek.yml\",\n        \"star_wars.yml\",\n        \"stargate.yml\",\n        \"stock.yml\",\n        \"stranger_things.yml\",\n        \"studio_ghibli.yml\",\n        \"subscription.yml\",\n        \"suits.yml\",\n//            \"super_smash_bros.yml\",\n        \"superhero.yml\",\n        \"supernatural.yml\",\n        \"sword_art_online.yml\",\n        \"tea.yml\",\n        \"team.yml\",\n        \"tire.yml\",\n        \"the_expanse.yml\",\n        \"the_it_crowd.yml\",\n        \"the_kingkiller_chronicle.yml\",\n        \"the_room.yml\",\n        \"the_thick_of_it.yml\",\n        \"tron.yml\",\n        \"transport.yml\",\n        \"twitter.yml\",\n        \"twin_peaks.yml\",\n//            \"umphreys_mcgee.yml\",\n        \"university.yml\",\n        \"v_for_vendetta.yml\",\n        \"vehicle.yml\",\n        \"video_game.yml\",\n        \"volleyball.yml\",\n        \"the_venture_bros.yml\",\n        \"verbs.yml\",\n        \"weather.yml\",\n        \"words.yml\",\n        \"witcher.yml\",\n        \"kaamelott.yml\",\n        \"touhou.yml\",\n//            \"world_of_warcraft.yml\",\n        \"yoda.yml\",\n        \"zelda.yml\",\n        \"zodiac.yml\").map(EnFile::new).toList()", "syntax_pass": true}, {"attribute_expression": "private static final List<EnFile> FILES_WITH_A_DIFFERENT_PATH = List.of(\n        new EnFile(\"animal.yml\", \"creature\"),\n        new EnFile(\"cat.yml\", \"creature\"),\n        new EnFile(\"dog.yml\", \"creature\"),\n\n        new EnFile(\"dota2.yml\", \"games\"),\n        new EnFile(\"elder_scrolls.yml\", \"games\"),\n        new EnFile(\"half_life.yml\", \"games\"),\n        new EnFile(\"hearthstone.yml\", \"games\"),\n        new EnFile(\"horse.yml\", \"creature\"),\n        new EnFile(\"league_of_legends.yml\", \"games\"),\n        new EnFile(\"marvel_snap.yml\", \"games\"),\n        new EnFile(\"myst.yml\", \"games\"),\n        new EnFile(\"overwatch.yml\", \"games\"),\n        new EnFile(\"pokemon.yml\", \"games\"),\n        new EnFile(\"resident_evil.yml\", \"games\"),\n        new EnFile(\"sonic_the_hedgehog.yml\", \"games\"),\n        new EnFile(\"super_mario.yml\", \"games\"),\n        new EnFile(\"super_smash_bros.yml\", \"games\"),\n        new EnFile(\"street_fighter.yml\", \"games\"),\n        new EnFile(\"witcher.yml\", \"games\"),\n        new EnFile(\"warhammer_fantasy.yml\", \"games\"),\n        new EnFile(\"world_of_warcraft.yml\", \"games\"),\n        new EnFile(\"zelda.yml\", \"games\"),\n\n        new EnFile(\"phone_number.yml\", \"cell_phone\"), // load phone number again with a different path\n\n        new EnFile(\"care_provider.yml\", \"healthcare\"),\n        new EnFile(\"disease.yml\", \"healthcare\"),\n        new EnFile(\"medical_procedure.yml\", \"healthcare\"),\n        new EnFile(\"medication.yml\", \"healthcare\"),\n        new EnFile(\"observation.yml\", \"healthcare\")\n    );", "docstring": " files where the search path can't be derived from the filename", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "List<EnFile>", "name": "FILES_WITH_A_DIFFERENT_PATH = List.of(\n        new EnFile(\"animal.yml\", \"creature\"),\n        new EnFile(\"cat.yml\", \"creature\"),\n        new EnFile(\"dog.yml\", \"creature\"),\n\n        new EnFile(\"dota2.yml\", \"games\"),\n        new EnFile(\"elder_scrolls.yml\", \"games\"),\n        new EnFile(\"half_life.yml\", \"games\"),\n        new EnFile(\"hearthstone.yml\", \"games\"),\n        new EnFile(\"horse.yml\", \"creature\"),\n        new EnFile(\"league_of_legends.yml\", \"games\"),\n        new EnFile(\"marvel_snap.yml\", \"games\"),\n        new EnFile(\"myst.yml\", \"games\"),\n        new EnFile(\"overwatch.yml\", \"games\"),\n        new EnFile(\"pokemon.yml\", \"games\"),\n        new EnFile(\"resident_evil.yml\", \"games\"),\n        new EnFile(\"sonic_the_hedgehog.yml\", \"games\"),\n        new EnFile(\"super_mario.yml\", \"games\"),\n        new EnFile(\"super_smash_bros.yml\", \"games\"),\n        new EnFile(\"street_fighter.yml\", \"games\"),\n        new EnFile(\"witcher.yml\", \"games\"),\n        new EnFile(\"warhammer_fantasy.yml\", \"games\"),\n        new EnFile(\"world_of_warcraft.yml\", \"games\"),\n        new EnFile(\"zelda.yml\", \"games\"),\n\n        new EnFile(\"phone_number.yml\", \"cell_phone\"), // load phone number again with a different path\n\n        new EnFile(\"care_provider.yml\", \"healthcare\"),\n        new EnFile(\"disease.yml\", \"healthcare\"),\n        new EnFile(\"medical_procedure.yml\", \"healthcare\"),\n        new EnFile(\"medication.yml\", \"healthcare\"),\n        new EnFile(\"observation.yml\", \"healthcare\")\n    )", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/internal/helper/JavaNames.java.JavaNames", "name": "JavaNames", "file_path": "src/main/java/net/datafaker/internal/helper/JavaNames.java", "superclasses": "", "methods": ["[String]toJavaNames(String,boolean)"], "method_uris": ["src/main/java/net/datafaker/internal/helper/JavaNames.java.JavaNames.[String]toJavaNames(String,boolean)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JavaNames {\n    public static String toJavaNames(String string, boolean isMethod) {\n        if (string == null || string.isEmpty()) return string;\n\n        int length = string.length();\n        char[] res = new char[length];\n        int pos = 0;\n        Transform next = isMethod ? TO_LOWER : TO_UPPER;\n\n        for (int i = 0; i < length; i++) {\n            char c = string.charAt(i);\n            if (isLetter(c)) {\n                res[pos++] = next.transform(c);\n                next = SAME;\n            } else if (c == '_') {\n                next = TO_UPPER;\n            } else {\n                res[pos++] = c;\n                next = SAME;\n            }\n        }\n        return new String(res, 0, pos);\n    }\n\n    enum Transform {\n        SAME, TO_LOWER, TO_UPPER;\n\n        public char transform(char c) {\n            return switch (this) {\n                case SAME -> c;\n                case TO_LOWER -> toLowerCase(c);\n                case TO_UPPER -> toUpperCase(c);\n            };\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated", "name": "LazyEvaluated", "file_path": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java", "superclasses": "", "methods": ["[]LazyEvaluated(Supplier<T>)", "[T]get()"], "method_uris": ["src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated.[]LazyEvaluated(Supplier<T>)", "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated.[T]get()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class LazyEvaluated<T> {\n    private volatile T value;\n    private final Supplier<T> supplier;\n\n    public LazyEvaluated(Supplier<T> supplier) {\n        this.supplier = supplier;\n    }\n\n    public T get() {\n        if (value == null) {\n            synchronized (this) {\n                if (value == null) {\n                    value = supplier.get();\n                }\n            }\n        }\n        return value;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private volatile T value;", "docstring": "", "modifiers": "private volatile", "marker_annotations": [], "non_marker_annotations": ["private", "volatile"], "comments": [], "type": "T", "name": "value", "syntax_pass": true}, {"attribute_expression": "private final Supplier<T> supplier;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<T>", "name": "supplier", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/internal/helper/WordUtils.java.WordUtils", "name": "WordUtils", "file_path": "src/main/java/net/datafaker/internal/helper/WordUtils.java", "superclasses": "", "methods": ["[String]capitalize(String)"], "method_uris": ["src/main/java/net/datafaker/internal/helper/WordUtils.java.WordUtils.[String]capitalize(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class WordUtils {\n\n    public static String capitalize(String input) {\n        if (input == null) return null;\n        if (input.isEmpty()) return input;\n        final char ch0 = input.charAt(0);\n        if (Character.isUpperCase(ch0)) return input;\n        return Character.toUpperCase(ch0) + input.substring(1);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/internal/helper/FakerIDN.java.FakerIDN", "name": "FakerIDN", "file_path": "src/main/java/net/datafaker/internal/helper/FakerIDN.java", "superclasses": "", "methods": ["[String]toASCII(String)"], "method_uris": ["src/main/java/net/datafaker/internal/helper/FakerIDN.java.FakerIDN.[String]toASCII(String)"], "overrides": null, "attributes": [], "class_docstring": "\nCreated by tshick on 10/30/16.\n", "original_string": "public class FakerIDN {\n    /**\n     * {@link IDN#toASCII(String)} is too picky for our needs. It was throwing exceptions for fa.yml and\n     * he.yml as they are Bidi languages and something was causing them to die. This is kind of a brute force\n     * fix, but it appears to fix the issue.\n     */\n    public static String toASCII(String in) {\n        try {\n            return IDN.toASCII(in);\n        } catch (IllegalArgumentException ignore) {\n            // let's continue with the character by character encoding hack.\n        }\n        final StringBuilder asciiResult = new StringBuilder();\n        for (int i = 0; i < in.length(); i++) {\n            try {\n                asciiResult.append(IDN.toASCII(in.substring(i, i + 1)));\n            } catch (IllegalArgumentException ignored) {\n            }\n        }\n        if (asciiResult.isEmpty()) {\n            throw new RuntimeException(\"Unable to convert \\\"%s\\\" to ASCII\".formatted(in));\n        }\n        return asciiResult.toString();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "name": "SingletonLocale", "file_path": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "superclasses": "", "methods": ["[]SingletonLocale(Locale)", "[SingletonLocale]get(Locale)", "[Locale]getLocale()", "[boolean]equals(Object)", "[int]hashCode()", "[String]toString()"], "method_uris": ["src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[]SingletonLocale(Locale)", "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[SingletonLocale]get(Locale)", "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[Locale]getLocale()", "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[boolean]equals(Object)", "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[int]hashCode()", "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[String]toString()"], "overrides": null, "attributes": [], "class_docstring": "\nThis class allows to use {@link java.util.IdentityHashMap} for locales.\nTo do that it guarantees one instance of {@link SingletonLocale} per {@link Locale}.\n", "original_string": "public class SingletonLocale {\n    private static final Map<Locale, SingletonLocale> LOCALE2SINGLETON_LOCALE = new HashMap<>();\n    private final Locale locale;\n\n    // Hash code is required for FakerContext where SingletonLocale is a field\n    private final int hashId = (int) System.nanoTime();\n\n    private SingletonLocale(Locale locale) {\n        this.locale = locale;\n    }\n\n    public static SingletonLocale get(Locale locale) {\n        if (locale == null) {\n            return null;\n        }\n        SingletonLocale res = LOCALE2SINGLETON_LOCALE.get(locale);\n        if (res != null) {\n            return res;\n        }\n        synchronized (SingletonLocale.class) {\n            res = LOCALE2SINGLETON_LOCALE.get(locale);\n            if (res != null) {\n                return res;\n            }\n            res = new SingletonLocale(locale);\n            LOCALE2SINGLETON_LOCALE.put(locale, res);\n            return res;\n        }\n    }\n\n    public Locale getLocale() {\n        return locale;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return this == o;\n    }\n\n    @Override\n    public int hashCode() {\n        return hashId;\n    }\n\n    @Override\n    public String toString() {\n        return \"SingletonLocale{%s}\".formatted(locale);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Map<Locale, SingletonLocale> LOCALE2SINGLETON_LOCALE = new HashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Locale, SingletonLocale>", "name": "LOCALE2SINGLETON_LOCALE = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final Locale locale;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Locale", "name": "locale", "syntax_pass": true}, {"attribute_expression": "private final int hashId = (int) System.nanoTime();", "docstring": " Hash code is required for FakerContext where SingletonLocale is a field", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "hashId = (int) System.nanoTime()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "name": "CopyOnWriteMap", "file_path": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "superclasses": "", "methods": ["[]CopyOnWriteMap(Supplier<Map<K, V>>)", "[int]size()", "[boolean]isEmpty()", "[boolean]containsKey(Object)", "[boolean]containsValue(Object)", "[V]get(Object)", "[V]put(K,V)", "[V]remove(Object)", "[void]putAll(Map<? extends K, ? extends V>)", "[void]clear()", "[Set<K>]keySet()", "[Collection<V>]values()", "[Set<Entry<K, V>>]entrySet()", "[void]updateNestedValue(K,Supplier<V>,K2,V2)"], "method_uris": ["src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[]CopyOnWriteMap(Supplier<Map<K, V>>)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[int]size()", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[boolean]isEmpty()", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[boolean]containsKey(Object)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[boolean]containsValue(Object)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[V]get(Object)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[V]put(K,V)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[V]remove(Object)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[void]putAll(Map<? extends K, ? extends V>)", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[void]clear()", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[Set<K>]keySet()", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[Collection<V>]values()", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[Set<Entry<K, V>>]entrySet()", "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[void]updateNestedValue(K,Supplier<V>,K2,V2)"], "overrides": null, "attributes": [], "class_docstring": "\nThis is a Copy On Write map. The main idea behind this is that\nthere is lots of static info per provider to make the providers operate.\nAt the same time there is no need to load all the info at the start since\nwe don't know which providers will be used and loading for all takes time.\nFor that reason it is loaded on request and stored in these Copy On Write maps.\nSince it is loaded only once per provider and after that is only read then\nit should be ok and moreover it will allow to have non-blocking reads.\n\nIn case for whatever reason there is a need to change this class,\nplease double check jmh report before and after e.g.\n{@code mvn clean package exec:exec -Dbenchmarks=\"DatafakerSimpleMethods\" -Ddatafaker.version=2.2.3-SNAPSHOT}\n", "original_string": "public class CopyOnWriteMap<K, V> implements Map<K, V> {\n    private volatile Map<K, V> map;\n    private final Supplier<Map<K, V>> mapSupplier;\n\n    public CopyOnWriteMap(Supplier<Map<K, V>> mapSupplier) {\n        this.mapSupplier = mapSupplier;\n        this.map = mapSupplier.get();\n    }\n\n    @Override\n    public int size() {\n        return map.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    @Override\n    public boolean containsKey(Object key) {\n        return map.containsKey(key);\n    }\n\n    @Override\n    public boolean containsValue(Object value) {\n        return map.containsValue(value);\n    }\n\n    @Override\n    public V get(Object key) {\n        return map.get(key);\n    }\n\n    @Override\n    public V put(K key, V value) {\n        Map<K, V> newMap = mapSupplier.get();\n        newMap.putAll(map);\n        final V result = newMap.put(key, value);\n        map = newMap;\n        return result;\n    }\n\n    @Override\n    public V remove(Object key) {\n        Map<K, V> newMap = mapSupplier.get();\n        newMap.putAll(map);\n        final V result = newMap.remove(key);\n        map = newMap;\n        return result;\n    }\n\n    @Override\n    public void putAll(Map<? extends K, ? extends V> m) {\n        Map<K, V> newMap = mapSupplier.get();\n        newMap.putAll(map);\n        newMap.putAll(m);\n        map = newMap;\n    }\n\n    @Override\n    public void clear() {\n        map = mapSupplier.get();\n    }\n\n    @Override\n    public Set<K> keySet() {\n        return map.keySet();\n    }\n\n    @Override\n    public Collection<V> values() {\n        return map.values();\n    }\n\n    @Override\n    public Set<Entry<K, V>> entrySet() {\n        return map.entrySet();\n    }\n\n    public <K2, V2> void updateNestedValue(K key, Supplier<V> valueSupplier, K2 key2, V2 value) {\n        if (!map.containsKey(key)) {\n            Map<K, V> newMap = mapSupplier.get();\n            newMap.putAll(map);\n            newMap.put(key, valueSupplier.get());\n            map = newMap;\n        }\n        // It is assumed that nested could be only Map\n        ((Map<K2, V2>)map.get(key)).put(key2, value);\n    }\n}", "super_interfaces": ["Map<K, V>"], "fields": [{"attribute_expression": "private volatile Map<K, V> map;", "docstring": "", "modifiers": "private volatile", "marker_annotations": [], "non_marker_annotations": ["private", "volatile"], "comments": [], "type": "Map<K, V>", "name": "map", "syntax_pass": true}, {"attribute_expression": "private final Supplier<Map<K, V>> mapSupplier;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<Map<K, V>>", "name": "mapSupplier", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "name": "JavaObjectTransformer", "file_path": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "superclasses": "", "methods": ["[Object]apply(Object,Schema<Object, ?>)", "[Collection<Object>]generate(Iterable<Object>,Schema<Object, ?>)", "[JavaObjectTransformer]from(Class)", "[Stream<Object>]generateStream(Schema<Object, ?>,long)", "[Collection<Object>]generate(Schema<Object, ?>,int)", "[String]getStartStream(Schema<Object, ?>)", "[String]getEndStream()", "[Object]getObject(Schema<Object, ?>,Object,Constructor<?>)", "[boolean]hasParameterlessPublicConstructor(Class<?>)"], "method_uris": ["src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Object]apply(Object,Schema<Object, ?>)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Collection<Object>]generate(Iterable<Object>,Schema<Object, ?>)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[JavaObjectTransformer]from(Class)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Stream<Object>]generateStream(Schema<Object, ?>,long)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Collection<Object>]generate(Schema<Object, ?>,int)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[String]getStartStream(Schema<Object, ?>)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[String]getEndStream()", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Object]getObject(Schema<Object, ?>,Object,Constructor<?>)", "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[boolean]hasParameterlessPublicConstructor(Class<?>)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JavaObjectTransformer implements Transformer<Object, Object> {\n    private static final Map<Schema<Object, ?>, Consumer<Object>> SCHEMA2CONSUMER = new IdentityHashMap<>();\n    private static final Map<Class<?>, Constructor<?>> CLASS2CONSTRUCTOR = new IdentityHashMap<>();\n\n    private Optional<Object> sourceClazz = Optional.empty();\n\n    @Override\n    public Object apply(Object input, Schema<Object, ?> schema) {\n        Class clazz;\n        Object result = null;\n        if (input instanceof Class) {\n            clazz = (Class) input;\n        } else {\n            clazz = input.getClass();\n            result = input;\n        }\n\n        if (clazz.isRecord()) {\n            Constructor<?> recordConstructor = CLASS2CONSTRUCTOR.get(clazz);\n            if (recordConstructor == null) {\n                Class<?>[] componentTypes = Arrays.stream(clazz.getRecordComponents())\n                    .map(RecordComponent::getType)\n                    .toArray(Class<?>[]::new);\n\n                try {\n                    recordConstructor = clazz.getDeclaredConstructor(componentTypes);\n                    CLASS2CONSTRUCTOR.put(clazz, recordConstructor);\n                } catch (NoSuchMethodException e) {\n                    throw new RuntimeException(\"Failed to initialize class \" + clazz.getName(), e);\n                }\n            }\n\n            result = getObject(schema, result, recordConstructor);\n        } else if (!hasParameterlessPublicConstructor(clazz)) {\n            Constructor<?> primaryConstructor = CLASS2CONSTRUCTOR.get(clazz);\n            if (primaryConstructor == null) {\n                primaryConstructor = clazz.getDeclaredConstructors()[0];\n                CLASS2CONSTRUCTOR.put(clazz, primaryConstructor);\n            }\n\n            result = getObject(schema, result, primaryConstructor);\n        } else {\n            if (result == null) {\n                try {\n                    Constructor<?> primaryConstructor = CLASS2CONSTRUCTOR.get(clazz);\n                    if (primaryConstructor == null) {\n                        primaryConstructor = clazz.getDeclaredConstructors()[0];\n                        CLASS2CONSTRUCTOR.put(clazz, primaryConstructor);\n                    }\n                    result = primaryConstructor.newInstance();\n                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            Consumer<Object> consumer = SCHEMA2CONSUMER.get(schema);\n            if (consumer == null) {\n                final Field<Object, ?>[] fields = schema.getFields();\n                final Map<String, java.lang.reflect.Field> name2ClassField = Stream.of(clazz.getDeclaredFields()).collect(\n                    Collectors.toMap(java.lang.reflect.Field::getName, Function.identity()));\n                final java.lang.reflect.Field[] rFields = new java.lang.reflect.Field[fields.length];\n                for (int i = 0; i < fields.length; i++) {\n                    rFields[i] = name2ClassField.get(fields[i].getName());\n                    rFields[i].setAccessible(true);\n                }\n                consumer = classObject -> {\n                    for (int i = 0; i < fields.length; i++) {\n                        try {\n                            rFields[i].set(classObject, fields[i].transform(classObject));\n                        } catch (IllegalAccessException e) {\n                            throw new RuntimeException(\"Failed to transform field \" + fields[i], e);\n                        }\n                    }\n                };\n                SCHEMA2CONSUMER.put(schema, consumer);\n            }\n            consumer.accept(result);\n        }\n        return result;\n    }\n\n    @Override\n    public Collection<Object> generate(Iterable<Object> input, Schema<Object, ?> schema) {\n        Collection<Object> collection;\n        if (input instanceof FakeSequence<Object> fakeSequence) {\n            if (fakeSequence.isInfinite()) {\n                throw new IllegalArgumentException(\"Should be finite size: \" + fakeSequence);\n            }\n            collection = new ArrayList<>(fakeSequence.get());\n        } else {\n            collection = new ArrayList<>();\n            for (Object o : input) {\n                collection.add(o);\n            }\n        }\n        for (Object elem : collection) {\n            apply(elem, schema);\n        }\n        return collection;\n    }\n\n    public JavaObjectTransformer from(Class input) {\n        sourceClazz = Optional.of(input);\n        return this;\n    }\n\n    /**\n     * The output is tied to provided Class source.\n     * An empty source will output an empty stream.\n     *\n     * Configure available input with {@link #from(Class source)}.\n     */\n    @Override\n    public Stream<Object> generateStream(final Schema<Object, ?> schema, long limit) {\n        if(sourceClazz.isEmpty())\n            return Stream.empty();\n        else\n            return Stream\n                .generate(() -> apply(sourceClazz.get(), schema))\n                .limit(limit);\n    }\n\n    @Override\n    public Collection<Object> generate(Schema<Object, ?> schema, int limit) {\n        return this.generateStream(schema, limit).collect(Collectors.toList());\n    }\n\n    @Override\n    public String getStartStream(Schema<Object, ?> schema) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String getEndStream() {\n        throw new UnsupportedOperationException();\n    }\n\n    private Object getObject(Schema<Object, ?> schema, Object result, Constructor<?> recordConstructor) {\n        final Field<Object, ?>[] fields = schema.getFields();\n        final Object[] values = new Object[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            values[i] = fields[i].transform(result);\n        }\n\n        try {\n            return recordConstructor.newInstance(values);\n        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Failed to instantiate \" + recordConstructor.getDeclaringClass().getName(), e);\n        }\n    }\n\n    private boolean hasParameterlessPublicConstructor(Class<?> clazz) {\n        for (Constructor<?> constructor : clazz.getConstructors()) {\n            if (constructor.getParameterCount() == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "super_interfaces": ["Transformer<Object, Object>"], "fields": [{"attribute_expression": "private static final Map<Schema<Object, ?>, Consumer<Object>> SCHEMA2CONSUMER = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Schema<Object, ?>, Consumer<Object>>", "name": "SCHEMA2CONSUMER = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private static final Map<Class<?>, Constructor<?>> CLASS2CONSTRUCTOR = new IdentityHashMap<>();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Class<?>, Constructor<?>>", "name": "CLASS2CONSTRUCTOR = new IdentityHashMap<>()", "syntax_pass": true}, {"attribute_expression": "private Optional<Object> sourceClazz = Optional.empty();", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Optional<Object>", "name": "sourceClazz = Optional.empty()", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "name": "CsvTransformer", "file_path": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "superclasses": "", "methods": ["[]CsvTransformer(String,char,boolean)", "[CsvTransformerBuilder<IN>]builder()", "[CharSequence]apply(IN,Schema<IN, ?>)", "[String]generate(Iterable<IN>,Schema<IN, ?>)", "[void]addLine(StringBuilder,Object)", "[void]addCharSequence(StringBuilder,CharSequence)", "[void]generateHeader(Schema<?, ?>,StringBuilder)", "[String]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()"], "method_uris": ["src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[]CsvTransformer(String,char,boolean)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[CsvTransformerBuilder<IN>]builder()", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[void]addLine(StringBuilder,Object)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[void]addCharSequence(StringBuilder,CharSequence)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[void]generateHeader(Schema<?, ?>,StringBuilder)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]generate(Schema<IN, ?>,int)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]getStartStream(Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]getEndStream()"], "overrides": null, "attributes": [{"original_string": "    public static class CsvTransformerBuilder<IN> {\n        private String separator = DEFAULT_SEPARATOR;\n        private char quote = DEFAULT_QUOTE;\n        private boolean withHeader = true;\n\n        public CsvTransformerBuilder<IN> quote(char quote) {\n            this.quote = quote;\n            return this;\n        }\n\n        public CsvTransformerBuilder<IN> separator(String separator) {\n            this.separator = separator;\n            return this;\n        }\n\n        public CsvTransformerBuilder<IN> header(boolean header) {\n            this.withHeader = header;\n            return this;\n        }\n\n        public CsvTransformer<IN> build() {\n            return new CsvTransformer<>(separator, quote, withHeader);\n        }\n    }", "definition": "    public static class CsvTransformerBuilder<IN>", "class_docstring": "", "name": "CsvTransformerBuilder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private String separator = DEFAULT_SEPARATOR;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "separator = DEFAULT_SEPARATOR", "syntax_pass": true}, {"attribute_expression": "private char quote = DEFAULT_QUOTE;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "char", "name": "quote = DEFAULT_QUOTE", "syntax_pass": true}, {"attribute_expression": "private boolean withHeader = true;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "withHeader = true", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public CsvTransformerBuilder<IN> quote(char quote) {\n            this.quote = quote;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CsvTransformerBuilder<IN>", "classes": []}, "name": "quote", "params": [{"name": "quote", "type": "char"}], "body": "                                                           {\n            this.quote = quote;\n            return this;\n        }", "signature": "public CsvTransformerBuilder<IN> quote(char quote)"}, {"syntax_pass": true, "original_string": "        public CsvTransformerBuilder<IN> separator(String separator) {\n            this.separator = separator;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CsvTransformerBuilder<IN>", "classes": []}, "name": "separator", "params": [{"name": "separator", "type": "String"}], "body": "                                                                     {\n            this.separator = separator;\n            return this;\n        }", "signature": "public CsvTransformerBuilder<IN> separator(String separator)"}, {"syntax_pass": true, "original_string": "        public CsvTransformerBuilder<IN> header(boolean header) {\n            this.withHeader = header;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CsvTransformerBuilder<IN>", "classes": []}, "name": "header", "params": [{"name": "header", "type": "boolean"}], "body": "                                                                {\n            this.withHeader = header;\n            return this;\n        }", "signature": "public CsvTransformerBuilder<IN> header(boolean header)"}, {"syntax_pass": true, "original_string": "        public CsvTransformer<IN> build() {\n            return new CsvTransformer<>(separator, quote, withHeader);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CsvTransformer<IN>", "classes": []}, "name": "build", "params": [], "body": "                                          {\n            return new CsvTransformer<>(separator, quote, withHeader);\n        }", "signature": "public CsvTransformer<IN> build()"}]}], "class_docstring": "", "original_string": "public class CsvTransformer<IN> implements Transformer<IN, CharSequence> {\n    public static final String DEFAULT_SEPARATOR = \";\";\n    public static final char DEFAULT_QUOTE = '\"';\n\n    private final String separator;\n    private final char quote;\n    private final boolean withHeader;\n\n    private CsvTransformer(String separator, char quote, boolean withHeader) {\n        this.separator = separator;\n        this.quote = quote;\n        this.withHeader = withHeader;\n    }\n\n    public static <IN> CsvTransformerBuilder<IN> builder() {\n        return new CsvTransformerBuilder<>();\n    }\n\n    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        Field<IN, ?>[] fields = schema.getFields();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < fields.length; i++) {\n            //noinspection unchecked\n            SimpleField<Object, ?> f = (SimpleField<Object, ?>) fields[i];\n            addLine(sb, f.transform(input));\n            if (i < fields.length - 1) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        generateHeader(schema, sb);\n\n        Iterator<IN> iterator = input.iterator();\n        boolean hasNext = iterator.hasNext();\n        while (hasNext) {\n            IN in = iterator.next();\n            sb.append(apply(in, schema));\n            hasNext = iterator.hasNext();\n            if (hasNext) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n\n        return sb.toString();\n    }\n\n    private void addLine(StringBuilder sb, Object transform) {\n        if (transform instanceof CharSequence) {\n            addCharSequence(sb, (CharSequence) transform);\n        } else {\n            sb.append(transform);\n        }\n    }\n\n    private void addCharSequence(StringBuilder sb, CharSequence charSequence) {\n        sb.append(quote);\n        int i = 0;\n        final int length = charSequence.length();\n        for (int j = 0; j < length; j++) {\n            final char c = charSequence.charAt(j);\n            if (c == quote) {\n                sb.append(charSequence, i, j + 1).append(quote);\n                i = j + 1;\n            }\n        }\n        sb.append(charSequence, i, length);\n        sb.append(quote);\n    }\n\n    private void generateHeader(Schema<?, ?> schema, StringBuilder sb) {\n        if (withHeader) {\n            for (int i = 0; i < schema.getFields().length; i++) {\n                addLine(sb, schema.getFields()[i].getName());\n                if (i < schema.getFields().length - 1) {\n                    sb.append(separator);\n                }\n            }\n            sb.append(LINE_SEPARATOR);\n        }\n    }\n\n    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        generateHeader(schema, sb);\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema, i));\n            if (i < limit - 1) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        StringBuilder sb = new StringBuilder();\n        generateHeader(null, sb);\n        return sb.toString();\n    }\n\n    @Override\n    public String getEndStream() {\n        return null;\n    }\n\n    public static class CsvTransformerBuilder<IN> {\n        private String separator = DEFAULT_SEPARATOR;\n        private char quote = DEFAULT_QUOTE;\n        private boolean withHeader = true;\n\n        public CsvTransformerBuilder<IN> quote(char quote) {\n            this.quote = quote;\n            return this;\n        }\n\n        public CsvTransformerBuilder<IN> separator(String separator) {\n            this.separator = separator;\n            return this;\n        }\n\n        public CsvTransformerBuilder<IN> header(boolean header) {\n            this.withHeader = header;\n            return this;\n        }\n\n        public CsvTransformer<IN> build() {\n            return new CsvTransformer<>(separator, quote, withHeader);\n        }\n    }\n}", "super_interfaces": ["Transformer<IN, CharSequence>"], "fields": [{"attribute_expression": "public static final String DEFAULT_SEPARATOR = \";\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "DEFAULT_SEPARATOR = \";\"", "syntax_pass": true}, {"attribute_expression": "public static final char DEFAULT_QUOTE = '\"';", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "char", "name": "DEFAULT_QUOTE = '\"'", "syntax_pass": true}, {"attribute_expression": "private final String separator;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "separator", "syntax_pass": true}, {"attribute_expression": "private final char quote;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "char", "name": "quote", "syntax_pass": true}, {"attribute_expression": "private final boolean withHeader;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "withHeader", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "name": "XmlTransformer", "file_path": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "superclasses": "", "methods": ["[]XmlTransformer(boolean)", "[CharSequence]apply(IN,Schema<IN, ?>)", "[String]generate(Iterable<IN>,Schema<IN, ?>)", "[CharSequence]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()", "[void]apply(IN,StringBuilder,Field<IN, ?>)", "[void]applyTag(IN,StringBuilder,Field<IN, ?>,String)", "[boolean]isAttribute(String)", "[void]applyAttributes(IN,StringBuilder,Field<IN, ?>[])", "[void]applyValue(StringBuilder,String,String)", "[String]offset(int)", "[String]escape(String)", "[Map<Character, String>]createEscapeMap()"], "method_uris": ["src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[]XmlTransformer(boolean)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[CharSequence]generate(Schema<IN, ?>,int)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]getStartStream(Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]getEndStream()", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]apply(IN,StringBuilder,Field<IN, ?>)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]applyTag(IN,StringBuilder,Field<IN, ?>,String)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[boolean]isAttribute(String)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]applyAttributes(IN,StringBuilder,Field<IN, ?>[])", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]applyValue(StringBuilder,String,String)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]offset(int)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]escape(String)", "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[Map<Character, String>]createEscapeMap()"], "overrides": null, "attributes": [{"original_string": "    public static class XmlTransformerBuilder<IN> {\n\n        private boolean pretty = false;\n\n        public XmlTransformer.XmlTransformerBuilder<IN> pretty(boolean pretty) {\n            this.pretty = pretty;\n            return this;\n        }\n\n        public XmlTransformer<IN> build() {\n            return new XmlTransformer<>(pretty);\n        }\n    }", "definition": "    public static class XmlTransformerBuilder<IN>", "class_docstring": "", "name": "XmlTransformerBuilder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private boolean pretty = false;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "pretty = false", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public XmlTransformer.XmlTransformerBuilder<IN> pretty(boolean pretty) {\n            this.pretty = pretty;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "XmlTransformer.XmlTransformerBuilder<IN>", "classes": []}, "name": "pretty", "params": [{"name": "pretty", "type": "boolean"}], "body": "                                                                               {\n            this.pretty = pretty;\n            return this;\n        }", "signature": "public XmlTransformer.XmlTransformerBuilder<IN> pretty(boolean pretty)"}, {"syntax_pass": true, "original_string": "        public XmlTransformer<IN> build() {\n            return new XmlTransformer<>(pretty);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "XmlTransformer<IN>", "classes": []}, "name": "build", "params": [], "body": "                                          {\n            return new XmlTransformer<>(pretty);\n        }", "signature": "public XmlTransformer<IN> build()"}]}], "class_docstring": "", "original_string": "public class XmlTransformer<IN> implements Transformer<IN, CharSequence> {\n\n    private static final Map<Character, String> ESCAPING_MAP = createEscapeMap();\n    private static final int INDENTATION_STEP = 4;\n\n    private int tagIndex = 0;\n\n    private final boolean pretty;\n\n    private XmlTransformer(boolean pretty) {\n        this.pretty = pretty;\n    }\n\n    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        StringBuilder sb = new StringBuilder();\n        Arrays.stream(schema.getFields()).forEach(it -> apply(input, sb, it));\n        return sb.toString();\n    }\n\n    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        for (IN in : input) {\n            data.add(apply(in, schema));\n        }\n\n        return data.toString();\n    }\n\n    @Override\n    public CharSequence generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema));\n            if (i < limit - 1) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String getEndStream() {\n        throw new UnsupportedOperationException();\n    }\n\n    public static class XmlTransformerBuilder<IN> {\n\n        private boolean pretty = false;\n\n        public XmlTransformer.XmlTransformerBuilder<IN> pretty(boolean pretty) {\n            this.pretty = pretty;\n            return this;\n        }\n\n        public XmlTransformer<IN> build() {\n            return new XmlTransformer<>(pretty);\n        }\n    }\n\n    private void apply(IN input, StringBuilder sb, Field<IN, ?> xmlNode) {\n\n        if (pretty && tagIndex > 0) {\n            sb.append(System.lineSeparator()).append(offset(tagIndex));\n        }\n\n        final String tag = xmlNode.getName().trim();\n        sb.append(\"<\").append(tag);\n        if (xmlNode instanceof CompositeField) {\n            Field<IN, ?>[] attrs = ((CompositeField) xmlNode).getFields();\n            applyAttributes(input, sb, attrs);\n\n            xmlNode = Arrays.stream(attrs)\n                .filter(inField -> !isAttribute(inField.getName())).findFirst()\n                .orElse(null);\n        }\n\n        applyTag(input, sb, xmlNode, tag);\n    }\n\n    private void applyTag(IN input, StringBuilder sb, Field<IN, ?> field, String tag) {\n        if (field == null ) {\n            applyValue(sb, tag, null);\n            return;\n        }\n\n        Object xmlNodeValue = field.transform(input);\n        if (xmlNodeValue instanceof Collection<?> children) {\n            if (children.isEmpty()) {\n                applyValue(sb, tag, null);\n            } else {\n                sb.append(\">\");\n                tagIndex++;\n                for (Object xmlNodeElem : children) {\n                    apply(input, sb, (Field<IN, ?>) xmlNodeElem);\n                }\n                tagIndex--;\n                if (pretty) {\n                    sb.append(System.lineSeparator()).append(offset(tagIndex));\n                }\n                sb.append(\"</\").append(tag).append(\">\");\n            }\n\n        } else if (xmlNodeValue instanceof String) {\n            applyValue(sb, tag, (String) xmlNodeValue);\n        } else if (xmlNodeValue == null) {\n            applyValue(sb, tag, null);\n        }\n    }\n\n    private boolean isAttribute(String name) {\n        return name != null;\n    }\n\n    private void applyAttributes(IN input, StringBuilder sb, Field<IN, ?>[] attrs) {\n        for (Field<IN, ?> attr : attrs) {\n            String name = attr.getName();\n            if (isAttribute(name)) {\n                String value = (String) attr.transform(input);\n                sb.append(\" \").append(name).append(\"=\\\"\").append(escape(value)).append(\"\\\"\");\n            }\n        }\n    }\n\n    private void applyValue(StringBuilder sb, String tag, String xmlNodeValue) {\n        if (xmlNodeValue != null) {\n            sb.append(\">\");\n            sb.append(escape(xmlNodeValue));\n            sb.append(\"</\").append(tag).append(\">\");\n        } else {\n            sb.append(\"/>\");\n        }\n    }\n\n    private String offset(int length) {\n        return \" \".repeat(Math.max(0, length * INDENTATION_STEP));\n    }\n\n    private String escape(String str) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            final char c = str.charAt(i);\n            sb.append(ESCAPING_MAP.getOrDefault(c, String.valueOf(c)));\n        }\n        return sb.toString();\n    }\n\n    private static Map<Character, String> createEscapeMap() {\n        return Map.of('<', \"&lt;\", '>', \"&gt;\", '&', \"&amp;\", '\\'', \"&apos;\", '\"', \"&quot;\");\n    }\n}", "super_interfaces": ["Transformer<IN, CharSequence>"], "fields": [{"attribute_expression": "private static final Map<Character, String> ESCAPING_MAP = createEscapeMap();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Character, String>", "name": "ESCAPING_MAP = createEscapeMap()", "syntax_pass": true}, {"attribute_expression": "private static final int INDENTATION_STEP = 4;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "INDENTATION_STEP = 4", "syntax_pass": true}, {"attribute_expression": "private int tagIndex = 0;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "int", "name": "tagIndex = 0", "syntax_pass": true}, {"attribute_expression": "private final boolean pretty;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "pretty", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "name": "SimpleField", "file_path": "src/main/java/net/datafaker/transformations/SimpleField.java", "superclasses": "", "methods": ["[]SimpleField(String,Function<MyObject, MyType>)", "[]SimpleField(String,Supplier<MyType>)", "[]SimpleField(String,Function<MyObject, MyType>,Supplier<MyType>)", "[String]getName()", "[MyType]transform(MyObject)", "[Function<MyObject, MyType>]getTransform()", "[Supplier<MyType>]getSupplier()", "[boolean]equals(Object)", "[int]hashCode()"], "method_uris": ["src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[]SimpleField(String,Function<MyObject, MyType>)", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[]SimpleField(String,Supplier<MyType>)", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[]SimpleField(String,Function<MyObject, MyType>,Supplier<MyType>)", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[String]getName()", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[MyType]transform(MyObject)", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[Function<MyObject, MyType>]getTransform()", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[Supplier<MyType>]getSupplier()", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[boolean]equals(Object)", "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[int]hashCode()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleField<MyObject, MyType> implements Field<MyObject, MyType> {\n    private final String name;\n    private final Function<MyObject, MyType> transform;\n    private final Supplier<MyType> supplier;\n\n    protected SimpleField(String name, Function<MyObject, MyType> transform) {\n        this(name, transform, null);\n    }\n\n    protected SimpleField(String name, Supplier<MyType> supplier) {\n        this(name, null, supplier);\n    }\n\n    private SimpleField(String name, Function<MyObject, MyType> transform, Supplier<MyType> supplier) {\n        this.name = name;\n        this.transform = transform;\n        this.supplier = supplier;\n        if (this.transform == null && this.supplier == null) {\n            throw new IllegalArgumentException(\"Either transform or supplier should be non-null\");\n        }\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public MyType transform(MyObject input) {\n        if (transform == null) {\n            return supplier.get();\n        }\n        if (input == null) {\n            throw new IllegalArgumentException(\"Input could be null only if suppliers are defined\");\n        }\n        return transform.apply(input);\n    }\n\n    public Function<MyObject, MyType> getTransform() {\n        return transform;\n    }\n\n    public Supplier<MyType> getSupplier() {\n        return supplier;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof SimpleField<?, ?> that)) return false;\n\n        if (!Objects.equals(name, that.name)) return false;\n        if (!Objects.equals(transform, that.transform)) return false;\n        return Objects.equals(supplier, that.supplier);\n    }\n\n    @Override\n    public int hashCode() {\n        return name != null ? name.hashCode() : 0;\n    }\n}", "super_interfaces": ["Field<MyObject, MyType>"], "fields": [{"attribute_expression": "private final String name;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}, {"attribute_expression": "private final Function<MyObject, MyType> transform;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Function<MyObject, MyType>", "name": "transform", "syntax_pass": true}, {"attribute_expression": "private final Supplier<MyType> supplier;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Supplier<MyType>", "name": "supplier", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "name": "JsonTransformer", "file_path": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "superclasses": "", "methods": ["[]JsonTransformer(boolean)", "[JsonTransformer.JsonTransformerBuilder<IN>]builder()", "[String]apply(IN,Schema<IN, ?>)", "[String]generate(Iterable<IN>,Schema<IN, ?>)", "[String]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()", "[String]getElementSeparator()", "[void]applyValue(IN,StringBuilder,Object)", "[String]generate(IN,Collection<Object>)", "[void]value2String(Object,StringBuilder)", "[Map<Character, String>]createEscapeMap()"], "method_uris": ["src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[]JsonTransformer(boolean)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[JsonTransformer.JsonTransformerBuilder<IN>]builder()", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]apply(IN,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]generate(Schema<IN, ?>,int)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]getStartStream(Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]getEndStream()", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]getElementSeparator()", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[void]applyValue(IN,StringBuilder,Object)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]generate(IN,Collection<Object>)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[void]value2String(Object,StringBuilder)", "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[Map<Character, String>]createEscapeMap()"], "overrides": null, "attributes": [{"original_string": "    public static class JsonTransformerBuilder<IN> {\n\n        private JsonTransformerBuilder() {\n        }\n\n        private boolean commaBetweenObjects = true;\n\n        public JsonTransformerBuilder<IN> withCommaBetweenObjects(boolean commaBetweenObjects) {\n            this.commaBetweenObjects = commaBetweenObjects;\n            return this;\n        }\n\n        public JsonTransformer<IN> build() {\n            return new JsonTransformer<>(commaBetweenObjects);\n        }\n    }", "definition": "    public static class JsonTransformerBuilder<IN>", "class_docstring": "", "name": "JsonTransformerBuilder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private boolean commaBetweenObjects = true;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "commaBetweenObjects = true", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        private JsonTransformerBuilder() {\n        }", "docstring": "", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "name": "JsonTransformerBuilder", "params": [], "body": "                                         {\n        }", "signature": "private JsonTransformerBuilder()"}, {"syntax_pass": true, "original_string": "        public JsonTransformerBuilder<IN> withCommaBetweenObjects(boolean commaBetweenObjects) {\n            this.commaBetweenObjects = commaBetweenObjects;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "JsonTransformerBuilder<IN>", "classes": []}, "name": "withCommaBetweenObjects", "params": [{"name": "commaBetweenObjects", "type": "boolean"}], "body": "                                                                                               {\n            this.commaBetweenObjects = commaBetweenObjects;\n            return this;\n        }", "signature": "public JsonTransformerBuilder<IN> withCommaBetweenObjects(boolean commaBetweenObjects)"}, {"syntax_pass": true, "original_string": "        public JsonTransformer<IN> build() {\n            return new JsonTransformer<>(commaBetweenObjects);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "JsonTransformer<IN>", "classes": []}, "name": "build", "params": [], "body": "                                           {\n            return new JsonTransformer<>(commaBetweenObjects);\n        }", "signature": "public JsonTransformer<IN> build()"}]}], "class_docstring": "", "original_string": "public class JsonTransformer<IN> implements Transformer<IN, CharSequence> {\n\n    private static final Map<Character, String> ESCAPING_MAP = createEscapeMap();\n    private static final char[] WRAPPERS = \"[]\".toCharArray();\n    private final boolean commaBetweenObjects;\n\n    private JsonTransformer(boolean commaBetweenObjects) {\n        this.commaBetweenObjects = commaBetweenObjects;\n    }\n\n    public static <IN> JsonTransformer.JsonTransformerBuilder<IN> builder() {\n        return new JsonTransformer.JsonTransformerBuilder<>();\n    }\n\n    @Override\n    public String apply(IN input, Schema<IN, ?> schema) {\n        Field<?, ?>[] fields = schema.getFields();\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        for (int i = 0; i < fields.length; i++) {\n            value2String((fields[i].getName()), sb);\n            sb.append(\": \");\n            if (fields[i] instanceof CompositeField) {\n                sb.append(apply(input, (CompositeField) fields[i], i));\n            } else {\n                applyValue(input, sb, ((SimpleField) fields[i]).transform(input));\n            }\n            if (i < fields.length - 1) {\n                sb.append(\", \");\n            }\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        Iterator<IN> iterator = input.iterator();\n        while (iterator.hasNext()) {\n            data.add(apply(iterator.next(), schema) + (commaBetweenObjects && iterator.hasNext() ? \",\" : \"\"));\n        }\n\n        return data.length() > 1 ? WRAPPERS[0] + LINE_SEPARATOR + data + LINE_SEPARATOR + WRAPPERS[1] : data.toString();\n    }\n\n    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema, i));\n            if (commaBetweenObjects && i < limit - 1) {\n                sb.append(\",\").append(LINE_SEPARATOR);\n            }\n        }\n\n        return limit > 1 ? WRAPPERS[0] + LINE_SEPARATOR + sb + LINE_SEPARATOR + WRAPPERS[1] : sb.toString();\n    }\n\n    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        return \"[\";\n    }\n\n    @Override\n    public String getEndStream() {\n        return \"]\";\n    }\n\n    public String getElementSeparator() {\n        return \",\";\n    }\n\n    private void applyValue(IN input, StringBuilder sb, Object value) {\n        if (value instanceof Collection<?>) {\n            sb.append(generate(input, (Collection) value));\n        } else if (value != null && value.getClass().isArray()) {\n            sb.append(generate(input, Arrays.asList((Object[]) value)));\n        } else {\n            value2String(value, sb);\n        }\n    }\n\n    private String generate(IN input, Collection<Object> collection) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        int i = 0;\n        for (Object value : collection) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n            i++;\n            if (value instanceof CompositeField<?, ?>) {\n                sb.append(apply(input, ((CompositeField) value)));\n            } else {\n                applyValue(input, sb, value);\n            }\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }\n\n    private static void value2String(Object value, StringBuilder sb) {\n        if (value == null) {\n            sb.append(\"null\");\n        } else if (value instanceof Integer\n            || value instanceof Long\n            || value instanceof Short\n            || value instanceof BigInteger\n            || value instanceof Boolean\n            || (value instanceof Double\n            && BigDecimal.valueOf((Double) value).remainder(BigDecimal.ONE).doubleValue() == 0)\n            || (value instanceof BigDecimal\n            && ((BigDecimal) value).remainder(BigDecimal.ONE).doubleValue() == 0)) {\n            sb.append(value);\n        } else {\n            String val = String.valueOf(value);\n            boolean toWrap = !val.startsWith(\"#{json\");\n            if (toWrap) {\n                sb.append(\"\\\"\");\n            }\n            int start = 0;\n            final int length = val.length();\n            for (int i = 0; i < length; i++) {\n                final char c = val.charAt(i);\n                final String escapedValue = ESCAPING_MAP.get(c);\n                if (escapedValue != null) {\n                    sb.append(val, start, i).append(escapedValue);\n                    start = i + 1;\n                }\n            }\n            sb.append(val, start, length);\n            if (toWrap) {\n                sb.append(\"\\\"\");\n            }\n        }\n    }\n\n    private static Map<Character, String> createEscapeMap() {\n        return Map.ofEntries(Map.entry('\\\\', \"\\\\\\\\\"),\n            Map.entry('\\\"', \"\\\\\\\"\"),\n            Map.entry('\\b', \"\\\\b\"),\n            Map.entry('\\f', \"\\\\f\"),\n            Map.entry('\\n', \"\\\\n\"),\n            Map.entry('\\r', \"\\\\r\"),\n            Map.entry('\\t', \"\\\\t\"),\n            Map.entry('/', \"\\\\/\"),\n            Map.entry('\\u0000', \"\\\\u0000\"),\n            Map.entry('\\u0001', \"\\\\u0001\"),\n            Map.entry('\\u0002', \"\\\\u0002\"),\n            Map.entry('\\u0003', \"\\\\u0003\"),\n            Map.entry('\\u0004', \"\\\\u0004\"),\n            Map.entry('\\u0005', \"\\\\u0005\"),\n            Map.entry('\\u0006', \"\\\\u0006\"),\n            Map.entry('\\u0007', \"\\\\u0007\"),\n            // map.put('\\u0008', \"\\\\u0008\");\n            // covered by map.put('\\b', \"\\\\b\");\n            // map.put('\\u0009', \"\\\\u0009\");\n            // covered by map.put('\\t', \"\\\\t\");\n            // map.put((char) 10, \"\\\\u000A\");\n            // covered by map.put('\\n', \"\\\\n\");\n            Map.entry('\\u000B', \"\\\\u000B\"),\n            // map.put('\\u000C', \"\\\\u000C\");\n            // covered by map.put('\\f', \"\\\\f\");\n            // map.put((char) 13, \"\\\\u000D\");\n            // covered by map.put('\\r', \"\\\\r\");\n            Map.entry('\\u000E', \"\\\\u000E\"),\n            Map.entry('\\u000F', \"\\\\u000F\"),\n            Map.entry('\\u0010', \"\\\\u0010\"),\n            Map.entry('\\u0011', \"\\\\u0011\"),\n            Map.entry('\\u0012', \"\\\\u0012\"),\n            Map.entry('\\u0013', \"\\\\u0013\"),\n            Map.entry('\\u0014', \"\\\\u0014\"),\n            Map.entry('\\u0015', \"\\\\u0015\"),\n            Map.entry('\\u0016', \"\\\\u0016\"),\n            Map.entry('\\u0017', \"\\\\u0017\"),\n            Map.entry('\\u0018', \"\\\\u0018\"),\n            Map.entry('\\u0019', \"\\\\u0019\"),\n            Map.entry('\\u001A', \"\\\\u001A\"),\n            Map.entry('\\u001B', \"\\\\u001B\"),\n            Map.entry('\\u001C', \"\\\\u001C\"),\n            Map.entry('\\u001D', \"\\\\u001D\"),\n            Map.entry('\\u001E', \"\\\\u001E\"),\n            Map.entry('\\u001F', \"\\\\u001F\"));\n    }\n\n    public static class JsonTransformerBuilder<IN> {\n\n        private JsonTransformerBuilder() {\n        }\n\n        private boolean commaBetweenObjects = true;\n\n        public JsonTransformerBuilder<IN> withCommaBetweenObjects(boolean commaBetweenObjects) {\n            this.commaBetweenObjects = commaBetweenObjects;\n            return this;\n        }\n\n        public JsonTransformer<IN> build() {\n            return new JsonTransformer<>(commaBetweenObjects);\n        }\n    }\n}", "super_interfaces": ["Transformer<IN, CharSequence>"], "fields": [{"attribute_expression": "private static final Map<Character, String> ESCAPING_MAP = createEscapeMap();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Map<Character, String>", "name": "ESCAPING_MAP = createEscapeMap()", "syntax_pass": true}, {"attribute_expression": "private static final char[] WRAPPERS = \"[]\".toCharArray();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char[]", "name": "WRAPPERS = \"[]\".toCharArray()", "syntax_pass": true}, {"attribute_expression": "private final boolean commaBetweenObjects;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "commaBetweenObjects", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField", "name": "CompositeField", "file_path": "src/main/java/net/datafaker/transformations/CompositeField.java", "superclasses": "", "methods": ["[]CompositeField(String,Field<MyObject, MyType>[])", "[String]getName()", "[MyType]transform(MyObject)", "[boolean]equals(Object)", "[int]hashCode()"], "method_uris": ["src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[]CompositeField(String,Field<MyObject, MyType>[])", "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[String]getName()", "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[MyType]transform(MyObject)", "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[boolean]equals(Object)", "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[int]hashCode()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CompositeField<MyObject extends AbstractProvider<?>, MyType> extends Schema<MyObject, MyType> implements Field<MyObject, MyType> {\n    private final String name;\n\n    public CompositeField(String name, Field<MyObject, MyType>[] fields) {\n        super(fields);\n        this.name = name;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public MyType transform(MyObject input) {\n        return null;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof CompositeField<?, ?> that)) return false;\n        if (!super.equals(o)) return false;\n\n        return Objects.equals(name, that.name);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (name != null ? name.hashCode() : 0);\n        return result;\n    }\n}", "super_interfaces": ["Field<MyObject, MyType>"], "fields": [{"attribute_expression": "private final String name;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "name", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/Schema.java.Schema", "name": "Schema", "file_path": "src/main/java/net/datafaker/transformations/Schema.java", "superclasses": "", "methods": ["[]Schema(Field<IN, OUT>[])", "[Field<IN, OUT>[]]getFields()", "[Schema<IN, OUT>]of()", "[boolean]equals(Object)", "[int]hashCode()"], "method_uris": ["src/main/java/net/datafaker/transformations/Schema.java.Schema.[]Schema(Field<IN, OUT>[])", "src/main/java/net/datafaker/transformations/Schema.java.Schema.[Field<IN, OUT>[]]getFields()", "src/main/java/net/datafaker/transformations/Schema.java.Schema.[Schema<IN, OUT>]of()", "src/main/java/net/datafaker/transformations/Schema.java.Schema.[boolean]equals(Object)", "src/main/java/net/datafaker/transformations/Schema.java.Schema.[int]hashCode()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Schema<IN, OUT> {\n    private final Field<IN, OUT>[] fields;\n\n    protected Schema(Field<IN, OUT>[] fields) {\n        this.fields = fields;\n    }\n\n    public Field<IN, OUT>[] getFields() {\n        return fields;\n    }\n\n    @SafeVarargs\n    public static <IN, OUT> Schema<IN, OUT> of(Field<IN, OUT>... fields) {\n        return new Schema<>(fields);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Schema<?, ?> schema)) return false;\n\n        return Arrays.equals(fields, schema.fields);\n    }\n\n    @Override\n    public int hashCode() {\n        return Arrays.hashCode(fields);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Field<IN, OUT>[] fields;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Field<IN, OUT>[]", "name": "fields", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "name": "YamlTransformer", "file_path": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "superclasses": "", "methods": ["[CharSequence]apply(IN,Schema<IN, ?>)", "[String]generate(Iterable<IN>,Schema<IN, ?>)", "[String]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()", "[String]apply(StringBuilder,IN,Field<IN, ?>[],String)", "[void]addCollection(StringBuilder,Collection<Object>,String)", "[void]value2String(Object,StringBuilder,String)"], "method_uris": ["src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]generate(Schema<IN, ?>,int)", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]getStartStream(Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]getEndStream()", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]apply(StringBuilder,IN,Field<IN, ?>[],String)", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[void]addCollection(StringBuilder,Collection<Object>,String)", "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[void]value2String(Object,StringBuilder,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class YamlTransformer<IN> implements Transformer<IN, CharSequence> {\n\n    private static final String INDENTATION = \"  \";\n\n    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        Field<IN, ?>[] fields = schema.getFields();\n\n        if (fields.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        return apply(sb, input, fields, \"\");\n    }\n\n    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        for (IN in : input) {\n            data.add(apply(in, schema));\n        }\n\n        return data.toString();\n    }\n\n    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema));\n            if (i < limit - 1) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        return \"\";\n    }\n\n    @Override\n    public String getEndStream() {\n        return \"\";\n    }\n\n    private String apply(final StringBuilder sb, final IN input, final Field<IN, ?>[] fields, final String offset) {\n        Set<String> keys = new HashSet<>();\n        for (Field<IN, ?> field : fields) {\n            String key = field.getName().trim();\n            if (!keys.add(key)) continue;\n            Object value = field.transform(input);\n            sb.append(offset).append(key).append(\":\");\n            if (value instanceof Schema) {\n                sb.append(System.lineSeparator());\n                value2String(value, sb, offset + INDENTATION);\n            } else {\n                value2String(value, sb, offset);\n            }\n\n\n            if (sb.lastIndexOf(System.lineSeparator()) != sb.length() - System.lineSeparator().length()) {\n                sb.append(System.lineSeparator());\n            }\n\n        }\n        return sb.toString();\n    }\n\n    private void addCollection(StringBuilder sb, Collection<Object> collection, String offset) {\n        for (Object value : collection) {\n            value2String(value, sb, offset + \"-\");\n            sb.append(System.lineSeparator());\n        }\n    }\n    private void value2String(Object value, StringBuilder sb, String offset) {\n        if (value instanceof Schema) {\n            Field<IN, ?>[] fields = ((Schema<IN, ?>) value).getFields();\n            apply(sb, null, fields, offset);\n        } else if (value instanceof Collection) {\n            sb.append(System.lineSeparator());\n            offset += INDENTATION;\n            addCollection(sb, (Collection) value, offset);\n        } else if (value != null && value.getClass().isArray()) {\n            sb.append(System.lineSeparator());\n            offset += INDENTATION;\n            addCollection(sb, Arrays.asList((Object[]) value), offset);\n        } else {\n            if (sb.charAt(sb.length() - 1) != ':') {\n                sb.append(offset);\n            }\n            sb.append(\" \").append(String.valueOf(value).trim());\n        }\n    }\n}", "super_interfaces": ["Transformer<IN, CharSequence>"], "fields": [{"attribute_expression": "private static final String INDENTATION = \"  \";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "INDENTATION = \"  \"", "syntax_pass": true}]}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "name": "SqlTransformer", "file_path": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "superclasses": "", "methods": ["[SqlTransformer.SqlTransformerBuilder<IN>]builder()", "[]SqlTransformer(String,String,char,SqlDialect,String,Casing,boolean,int,Case,boolean)", "[boolean]isSqlQuoteIdentifierRequiredFor(String)", "[CharSequence]apply(IN,Schema<IN, ?>)", "[CharSequence]apply(IN,Schema<IN, ?>,long)", "[String]addValues(IN,Field<?, ? extends CharSequence>[],Boolean)", "[String]handleObjectInArray(Object)", "[String]handleObjectInCollection(Object)", "[String]handleObjectInMap(Object)", "[String]handleObject(Object)", "[String]handledObjectToString(int,String)", "[String]handlePrimitivesInArray(Class<?>,Object)", "[String]appendTableInfo(Field<?, ? extends CharSequence>[])", "[void]appendNameToQuery(StringBuilder,String)", "[String]generate(Iterable<IN>,Schema<IN, ?>)", "[String]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()", "[String]generateBatchModeStatements(Schema<IN, ?>,List<IN>,int)", "[Stream<CharSequence>]generateStream(Schema<IN, ?>,long)", "[String]generateSeparatedStatements(Schema<IN, ?>,List<IN>,int)"], "method_uris": ["src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[SqlTransformer.SqlTransformerBuilder<IN>]builder()", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[]SqlTransformer(String,String,char,SqlDialect,String,Casing,boolean,int,Case,boolean)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[boolean]isSqlQuoteIdentifierRequiredFor(String)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[CharSequence]apply(IN,Schema<IN, ?>,long)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]addValues(IN,Field<?, ? extends CharSequence>[],Boolean)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObjectInArray(Object)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObjectInCollection(Object)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObjectInMap(Object)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObject(Object)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handledObjectToString(int,String)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handlePrimitivesInArray(Class<?>,Object)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]appendTableInfo(Field<?, ? extends CharSequence>[])", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[void]appendNameToQuery(StringBuilder,String)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generate(Schema<IN, ?>,int)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]getStartStream(Schema<IN, ?>)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]getEndStream()", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generateBatchModeStatements(Schema<IN, ?>,List<IN>,int)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[Stream<CharSequence>]generateStream(Schema<IN, ?>,long)", "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generateSeparatedStatements(Schema<IN, ?>,List<IN>,int)"], "overrides": null, "attributes": [{"original_string": "    public static class SqlTransformerBuilder<IN> {\n        private char quote = DEFAULT_QUOTE;\n        private String sqlQuoteIdentifier = DEFAULT_SQL_IDENTIFIER;\n        private String tableName = \"MyTable\";\n        private String schemaName = \"\";\n        private Casing casing = Casing.TO_UPPER;\n        private boolean withBatchMode = false;\n        private int batchSize = -1; // no limit\n        private Case keywordCase = Case.UPPERCASE;\n        private boolean forceSqlQuoteIdentifierUsage = false;\n\n\n        private SqlDialect dialect;\n\n        public SqlTransformerBuilder<IN> dialect(SqlDialect dialect) {\n            this.dialect = dialect;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> casing(Casing casing) {\n            this.casing = casing;\n            this.dialect = null;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> quote(char quote) {\n            this.quote = quote;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> sqlQuoteIdentifier(String sqlQuoteIdentifier) {\n            this.sqlQuoteIdentifier = sqlQuoteIdentifier;\n            this.dialect = null;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> tableName(String tableName) {\n            this.tableName = tableName;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> schemaName(String schemaName) {\n            this.schemaName = schemaName;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> batch() {\n            this.withBatchMode = true;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> batch(int batchSize) {\n            this.batchSize = batchSize;\n            this.withBatchMode = true;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> keywordCase(Case caze) {\n            this.keywordCase = caze;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> forceUseSqlQuoteIdentifier() {\n            this.forceSqlQuoteIdentifierUsage = true;\n            return this;\n        }\n\n        public SqlTransformer<IN> build() {\n            if (dialect == null) {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, null, sqlQuoteIdentifier, casing, withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            } else {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, dialect, dialect.getSqlQuoteIdentifier(), dialect.getUnquotedCasing(),\n                    withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            }\n        }\n    }", "definition": "    public static class SqlTransformerBuilder<IN>", "class_docstring": "", "name": "SqlTransformerBuilder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "fields": [{"attribute_expression": "private char quote = DEFAULT_QUOTE;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "char", "name": "quote = DEFAULT_QUOTE", "syntax_pass": true}, {"attribute_expression": "private String sqlQuoteIdentifier = DEFAULT_SQL_IDENTIFIER;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "sqlQuoteIdentifier = DEFAULT_SQL_IDENTIFIER", "syntax_pass": true}, {"attribute_expression": "private String tableName = \"MyTable\";", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "tableName = \"MyTable\"", "syntax_pass": true}, {"attribute_expression": "private String schemaName = \"\";", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "schemaName = \"\"", "syntax_pass": true}, {"attribute_expression": "private Casing casing = Casing.TO_UPPER;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Casing", "name": "casing = Casing.TO_UPPER", "syntax_pass": true}, {"attribute_expression": "private boolean withBatchMode = false;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "withBatchMode = false", "syntax_pass": true}, {"attribute_expression": "private int batchSize = -1;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "int", "name": "batchSize = -1", "syntax_pass": true}, {"attribute_expression": "private Case keywordCase = Case.UPPERCASE;", "docstring": " no limit", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Case", "name": "keywordCase = Case.UPPERCASE", "syntax_pass": true}, {"attribute_expression": "private boolean forceSqlQuoteIdentifierUsage = false;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "forceSqlQuoteIdentifierUsage = false", "syntax_pass": true}, {"attribute_expression": "private SqlDialect dialect;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SqlDialect", "name": "dialect", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> dialect(SqlDialect dialect) {\n            this.dialect = dialect;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "dialect", "params": [{"name": "dialect", "type": "SqlDialect"}], "body": "                                                                     {\n            this.dialect = dialect;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> dialect(SqlDialect dialect)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> casing(Casing casing) {\n            this.casing = casing;\n            this.dialect = null;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "casing", "params": [{"name": "casing", "type": "Casing"}], "body": "                                                               {\n            this.casing = casing;\n            this.dialect = null;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> casing(Casing casing)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> quote(char quote) {\n            this.quote = quote;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "quote", "params": [{"name": "quote", "type": "char"}], "body": "                                                           {\n            this.quote = quote;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> quote(char quote)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> sqlQuoteIdentifier(String sqlQuoteIdentifier) {\n            this.sqlQuoteIdentifier = sqlQuoteIdentifier;\n            this.dialect = null;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "sqlQuoteIdentifier", "params": [{"name": "sqlQuoteIdentifier", "type": "String"}], "body": "                                                                                       {\n            this.sqlQuoteIdentifier = sqlQuoteIdentifier;\n            this.dialect = null;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> sqlQuoteIdentifier(String sqlQuoteIdentifier)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> tableName(String tableName) {\n            this.tableName = tableName;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "tableName", "params": [{"name": "tableName", "type": "String"}], "body": "                                                                     {\n            this.tableName = tableName;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> tableName(String tableName)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> schemaName(String schemaName) {\n            this.schemaName = schemaName;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "schemaName", "params": [{"name": "schemaName", "type": "String"}], "body": "                                                                       {\n            this.schemaName = schemaName;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> schemaName(String schemaName)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> batch() {\n            this.withBatchMode = true;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "batch", "params": [], "body": "                                                 {\n            this.withBatchMode = true;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> batch()"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> batch(int batchSize) {\n            this.batchSize = batchSize;\n            this.withBatchMode = true;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "batch", "params": [{"name": "batchSize", "type": "int"}], "body": "                                                              {\n            this.batchSize = batchSize;\n            this.withBatchMode = true;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> batch(int batchSize)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> keywordCase(Case caze) {\n            this.keywordCase = caze;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "keywordCase", "params": [{"name": "caze", "type": "Case"}], "body": "                                                                {\n            this.keywordCase = caze;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> keywordCase(Case caze)"}, {"syntax_pass": true, "original_string": "        public SqlTransformerBuilder<IN> forceUseSqlQuoteIdentifier() {\n            this.forceSqlQuoteIdentifierUsage = true;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformerBuilder<IN>", "classes": []}, "name": "forceUseSqlQuoteIdentifier", "params": [], "body": "                                                                      {\n            this.forceSqlQuoteIdentifierUsage = true;\n            return this;\n        }", "signature": "public SqlTransformerBuilder<IN> forceUseSqlQuoteIdentifier()"}, {"syntax_pass": true, "original_string": "        public SqlTransformer<IN> build() {\n            if (dialect == null) {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, null, sqlQuoteIdentifier, casing, withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            } else {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, dialect, dialect.getSqlQuoteIdentifier(), dialect.getUnquotedCasing(),\n                    withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            }\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SqlTransformer<IN>", "classes": []}, "name": "build", "params": [], "body": "                                          {\n            if (dialect == null) {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, null, sqlQuoteIdentifier, casing, withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            } else {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, dialect, dialect.getSqlQuoteIdentifier(), dialect.getUnquotedCasing(),\n                    withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            }\n        }", "signature": "public SqlTransformer<IN> build()"}]}], "class_docstring": "", "original_string": "public class SqlTransformer<IN> implements Transformer<IN, CharSequence> {\n    private static final char DEFAULT_QUOTE = '\\'';\n    private static final char DEFAULT_CATALOG_SEPARATOR = '.';\n    private static final String DEFAULT_SQL_IDENTIFIER = \"\\\"\\\"\";\n    private static final String EMPTY_RESULT = \"\";\n\n    private final Casing casing;\n    private final char quote;\n    private final char openSqlIdentifier;\n    private final char closeSqlIdentifier;\n    private final String tableName;\n    private final String schemaName;\n\n    private final boolean withBatchMode;\n    private final int batchSize;\n    private final Case keywordCase;\n    private final boolean forceSqlQuoteIdentifierUsage;\n\n    private final SqlDialect dialect;\n\n    public static <IN> SqlTransformer.SqlTransformerBuilder<IN> builder() {\n        return new SqlTransformer.SqlTransformerBuilder<>();\n    }\n\n    private SqlTransformer(String schemaName, String tableName, char quote, SqlDialect dialect, String sqlIdentifier,\n                           Casing casing, boolean withBatchMode, int batchSize, Case keywordCase, boolean forceSqlQuoteIdentifierUsage) {\n        this.schemaName = schemaName;\n        this.quote = quote;\n        this.dialect = dialect;\n        this.openSqlIdentifier = sqlIdentifier.charAt(0);\n        this.closeSqlIdentifier = sqlIdentifier.length() == 1 ? sqlIdentifier.charAt(0) : sqlIdentifier.charAt(1);\n        this.tableName = tableName;\n        this.casing = casing;\n        this.withBatchMode = withBatchMode;\n        this.batchSize = batchSize;\n        this.keywordCase = keywordCase;\n        this.forceSqlQuoteIdentifierUsage = forceSqlQuoteIdentifierUsage;\n    }\n\n    private boolean isSqlQuoteIdentifierRequiredFor(String name) {\n        if (forceSqlQuoteIdentifierUsage) return true;\n        for (int i = 0; i < name.length(); i++) {\n            if (casing == Casing.TO_UPPER && Character.isLowerCase(name.charAt(i))\n                || casing == Casing.TO_LOWER && Character.isUpperCase(name.charAt(i))\n                || name.charAt(i) == openSqlIdentifier\n                || name.charAt(i) == closeSqlIdentifier\n                || name.charAt(i) == DEFAULT_CATALOG_SEPARATOR) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        return apply(input, schema, 0);\n    }\n\n    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema, long rowId) {\n        //noinspection unchecked\n        Field<?, ? extends CharSequence>[] fields = (Field<?, ? extends CharSequence>[]) schema.getFields();\n        if (fields.length == 0) {\n            return EMPTY_RESULT;\n        }\n        if (withBatchMode) {\n            if (rowId == 0 || batchSize > 0 && rowId % batchSize == 0) {\n                return SqlDialect.getFirstRow(\n                    dialect, () -> appendTableInfo(fields), () -> addValues(input, fields, true), keywordCase);\n            } else {\n                return String.join(LINE_SEPARATOR, \",\",\n                    SqlDialect.getOtherRow(\n                        dialect, () -> appendTableInfo(fields), () -> addValues(input, fields, true), keywordCase));\n            }\n        } else {\n            return String.join(\" \", INSERT_INTO.getValue(keywordCase),\n                appendTableInfo(fields),\n                VALUES.getValue(keywordCase),\n                addValues(input, fields, true));\n        }\n    }\n\n    private String addValues(IN input, Field<?, ? extends CharSequence>[] fields, Boolean isRoot) {\n        StringJoiner result = new StringJoiner(\", \");\n        for (int i = 0; i < fields.length; i++) {\n\n            if(dialect != null) {\n                String fieldPrefix =\n                    dialect.getFieldPrefix(fields[i].getName());\n\n                if (!fieldPrefix.isEmpty() && !isRoot) {\n                    result.add(quote + dialect.getFieldPrefix(fields[i].getName()) + quote);\n                }\n            }\n\n            if (fields[i] instanceof SimpleField) {\n                //noinspection unchecked\n                Object value = ((SimpleField<Object, ? extends CharSequence>) fields[i]).transform(input);\n                Class<?> clazz = value == null ? null : value.getClass();\n                if (value == null\n                    || value instanceof Number\n                    || value instanceof Boolean\n                    || clazz.isPrimitive()) {\n                    result.add(String.valueOf(value));\n                } else if (clazz.isArray()) {\n                    final Class<?> componentType = clazz.getComponentType();\n                    result.add(ARRAY.getValue(keywordCase) + dialect.getArrayStart() +\n                        (componentType.isPrimitive()\n                            ? handlePrimitivesInArray(componentType, value)\n                            : handleObjectInArray(value)) + dialect.getArrayEnd());\n                } else if (value instanceof Map) {\n                    result.add(MAP.getValue(keywordCase) + \"(\" + handleObjectInMap(value) + \")\");\n                } else if (value instanceof Collection) {\n                    result.add(MULTISET.getValue(keywordCase) + \"[\" +\n                        handleObjectInCollection(value) + \"]\");\n                } else {\n                    result.add(handleObject(value));\n                }\n            } else if (fields[i] instanceof CompositeField) {\n                result.add(dialect.getCompositePrefix(keywordCase) + addValues(input, ((CompositeField) fields[i]).getFields(), false));\n            } else {\n                throw new IllegalArgumentException(fields[i] + \" not supported\");\n            }\n        }\n        String res = result.toString();\n        return !res.isEmpty() ? \"(\" + res + \")\" : res;\n    }\n\n    private String handleObjectInArray(Object value) {\n        StringBuilder result = new StringBuilder();\n        Object[] array = (Object[]) value;\n        for (int j = 0; j < array.length; j++) {\n            result.append(handleObject(array[j]));\n            if (j < array.length - 1) {\n                result.append(\", \");\n            }\n        }\n        return result.toString();\n    }\n\n    private String handleObjectInCollection(Object value) {\n        StringBuilder result = new StringBuilder();\n        Collection collection = (Collection) value;\n        int i = 0;\n        for (Object elem : collection) {\n            result.append(handleObject(elem));\n            if (i < collection.size() - 1) {\n                result.append(\", \");\n            }\n            i++;\n        }\n        return result.toString();\n    }\n\n    private String handleObjectInMap(Object value) {\n        StringBuilder result = new StringBuilder();\n        Map<Object, Object> map = (Map<Object, Object>) value;\n        int i = 0;\n        for (Map.Entry<Object, Object> entry : map.entrySet()) {\n            result.append(handleObject(entry.getKey()));\n            result.append(\", \");\n            result.append(handleObject(entry.getValue()));\n\n            if (i < map.size() - 1) {\n                result.append(\", \");\n            }\n            i++;\n        }\n        return result.toString();\n    }\n\n    private String handleObject(Object value) {\n        if (value == null) {\n            return NULL.getValue(keywordCase);\n        } else {\n            if (value.getClass().isArray()) {\n                final Class<?> componentType = value.getClass().getComponentType();\n                String array = componentType.isPrimitive()\n                    ? handlePrimitivesInArray(componentType, value)\n                    : handleObjectInArray(value);\n                return ARRAY.getValue(keywordCase) + \"[\" + array + \"]\";\n            } else if (value instanceof Map) {\n                return MAP.getValue(keywordCase) + \"(\" + handleObjectInMap(value) + \")\";\n            } else if (value instanceof Collection) {\n                return MULTISET.getValue(keywordCase)\n                    + \"[\" + handleObjectInCollection(value) + \"]\";\n            } else {\n                String strValue = value.toString();\n                final int length = strValue.length();\n                final boolean quoteRequired = !(value instanceof Number) && !(value instanceof Boolean);\n                String res = handledObjectToString(length, strValue);\n                return quoteRequired ? quote + res + quote : res;\n            }\n        }\n    }\n\n    private String handledObjectToString(int length, String strValue) {\n        StringJoiner joiner = null;\n\n        int j = 0;\n        for (int k = 0; k < length; k++) {\n            if (strValue.charAt(k) == quote) {\n                if (joiner == null) {\n                    joiner = new StringJoiner(\"\" + quote);\n                }\n                joiner.add(strValue.substring(j, k + 1));\n                j = k + 1;\n            }\n        }\n        return joiner == null ? strValue : joiner.toString();\n    }\n\n    private String handlePrimitivesInArray(Class<?> componentType, Object value) {\n        StringJoiner joiner = new StringJoiner(\", \");\n        if (componentType == byte.class) {\n            byte[] array = (byte[]) value;\n            for (byte b : array) {\n                joiner.add(String.valueOf(b));\n            }\n        }\n        if (componentType == short.class) {\n            short[] array = (short[]) value;\n            for (short i : array) {\n                joiner.add(String.valueOf(i));\n            }\n        }\n        if (componentType == boolean.class) {\n            boolean[] array = (boolean[]) value;\n            for (boolean b : array) {\n                joiner.add(String.valueOf(b));\n            }\n        } else if (componentType == int.class) {\n            int[] array = (int[]) value;\n            for (int i : array) {\n                joiner.add(String.valueOf(i));\n            }\n        } else if (componentType == long.class) {\n            long[] array = (long[]) value;\n            for (long l : array) {\n                joiner.add(String.valueOf(l));\n            }\n        } else if (componentType == float.class) {\n            float[] array = (float[]) value;\n            for (float v : array) {\n                joiner.add(String.valueOf(v));\n            }\n        } else if (componentType == double.class) {\n            double[] array = (double[]) value;\n            for (double v : array) {\n                joiner.add(String.valueOf(v));\n            }\n        }\n        return joiner.toString();\n    }\n\n    private String appendTableInfo(Field<?, ? extends CharSequence>[] fields) {\n        StringBuilder result = new StringBuilder();\n        appendNameToQuery(result, schemaName);\n        if (schemaName != null && !schemaName.isEmpty()) {\n            result.append(DEFAULT_CATALOG_SEPARATOR);\n        }\n        appendNameToQuery(result, tableName);\n        result.append(\" (\");\n        for (int i = 0; i < fields.length; i++) {\n            final String fieldName = fields[i].getName();\n            final boolean sqlIdentifierRequired = isSqlQuoteIdentifierRequiredFor(fieldName);\n            if (sqlIdentifierRequired) {\n                result.append(openSqlIdentifier);\n            }\n            for (int j = 0; j < fieldName.length(); j++) {\n                if (openSqlIdentifier == fieldName.charAt(j)\n                        || closeSqlIdentifier == fieldName.charAt(j)) {\n                    result.append(openSqlIdentifier);\n                }\n                result.append(fieldName.charAt(j));\n            }\n            if (sqlIdentifierRequired) {\n                result.append(closeSqlIdentifier);\n            }\n            if (i < fields.length - 1) {\n                result.append(\", \");\n            }\n        }\n        result.append(\")\");\n        return result.toString();\n    }\n\n    private void appendNameToQuery(StringBuilder sb, String name) {\n        if (name == null || name.isEmpty()) return;\n        boolean sqlIdentifierRequired = isSqlQuoteIdentifierRequiredFor(name);\n\n        if (sqlIdentifierRequired) {\n            sb.append(openSqlIdentifier);\n        }\n        sb.append(name);\n        if (sqlIdentifierRequired) {\n            sb.append(closeSqlIdentifier);\n        }\n    }\n\n    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (schema.getFields().length == 0) {\n            return EMPTY_RESULT;\n        }\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + input);\n        }\n\n        final List<IN> inputs;\n        if (input instanceof FakeStream<IN> fakeStream) {\n            Stream<IN> stream = fakeStream.get();\n            inputs = stream.toList();\n        } else if (input instanceof FakeSequence<?> fakeSequence) {\n            inputs = fakeSequence.get();\n        } else if (input instanceof List<IN> list) {\n            inputs = list;\n        } else {\n            inputs = new ArrayList<>();\n            for (IN o : input) {\n                inputs.add(o);\n            }\n        }\n\n        int limit = inputs.size();\n        if (withBatchMode) {\n            return generateBatchModeStatements(schema, inputs, limit);\n        } else {\n            return generateSeparatedStatements(schema, inputs, limit);\n        }\n    }\n\n    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        if (schema.getFields().length == 0) {\n            return EMPTY_RESULT;\n        }\n\n        if (withBatchMode) {\n            return generateBatchModeStatements(schema, null, limit);\n        } else {\n            return generateSeparatedStatements(schema, null, limit);\n        }\n    }\n\n    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        throw new UnsupportedOperationException(\"Not supported for SQL transformer. Use generate or generateStream instead to create SQL statements.\");\n    }\n\n    @Override\n    public String getEndStream() {\n        throw new UnsupportedOperationException(\"Not supported for SQL transformer. Use generate or generateStream instead to create SQL statements.\");\n    }\n\n    private String generateBatchModeStatements(Schema<IN, ?> schema, List<IN> inputs, int limit) {\n        StringBuilder sb = new StringBuilder();\n        limit = inputs != null ? Math.min(limit, inputs.size()) : limit;\n        for (int i = 0; i < limit; i++) {\n            IN input = inputs != null ? inputs.get(i) : null;\n            sb.append(apply(input, schema, i));\n            if (i == limit - 1 && !sb.isEmpty() || batchSize > 0 && (i + 1) % batchSize == 0) {\n                sb.append(SqlDialect.getLastRowSuffix(dialect, keywordCase));\n                sb.append(\";\");\n                if (i < limit - 1 && !sb.isEmpty()) {\n                    sb.append(LINE_SEPARATOR);\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Represents an interval of integers.\n     * Useful to capture range of rows corresponding to batch SQL statements.\n     *\n     * @see SqlTransformer#generateStream(Schema, long)\n     */\n    private record Interval(int start, int end) {\n        private Interval add(int offset) {\n            return new Interval(start + offset, end + offset);\n        }\n    }\n\n    @Override\n    public Stream<CharSequence> generateStream(final Schema<IN, ?> schema, long limit) {\n        if (schema.getFields().length == 0) {\n            return Stream.empty();\n        }\n\n        if (withBatchMode) {\n            return\n                Stream\n                    .iterate(new Interval(0, batchSize), interval -> interval.start() <= limit, i -> i.add(batchSize))\n                    .map(interval -> {\n                        StringBuilder sb = new StringBuilder();\n\n                        for (int i = interval.start(); i < interval.end() && i < limit; i++) {\n                            sb.append(apply(null, schema, i));\n                        }\n                        sb.append(SqlDialect.getLastRowSuffix(dialect, keywordCase));\n                        sb.append(\";\");\n                        return sb.toString();\n                    });\n        } else {\n            return\n                Stream\n                    .generate(() -> (CharSequence) (apply(null, schema) + \";\"))\n                    .limit(limit);\n        }\n    }\n\n    private String generateSeparatedStatements(Schema<IN, ?> schema, List<IN> inputs, int limit) {\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        limit = inputs != null ? Math.min(limit, inputs.size()) : limit;\n        for (int i = 0; i < limit; i++) {\n            IN input = inputs != null ? inputs.get(i) : null;\n            data.add(apply(input, schema) + \";\");\n        }\n        return data.toString();\n    }\n\n    public static class SqlTransformerBuilder<IN> {\n        private char quote = DEFAULT_QUOTE;\n        private String sqlQuoteIdentifier = DEFAULT_SQL_IDENTIFIER;\n        private String tableName = \"MyTable\";\n        private String schemaName = \"\";\n        private Casing casing = Casing.TO_UPPER;\n        private boolean withBatchMode = false;\n        private int batchSize = -1; // no limit\n        private Case keywordCase = Case.UPPERCASE;\n        private boolean forceSqlQuoteIdentifierUsage = false;\n\n\n        private SqlDialect dialect;\n\n        public SqlTransformerBuilder<IN> dialect(SqlDialect dialect) {\n            this.dialect = dialect;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> casing(Casing casing) {\n            this.casing = casing;\n            this.dialect = null;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> quote(char quote) {\n            this.quote = quote;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> sqlQuoteIdentifier(String sqlQuoteIdentifier) {\n            this.sqlQuoteIdentifier = sqlQuoteIdentifier;\n            this.dialect = null;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> tableName(String tableName) {\n            this.tableName = tableName;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> schemaName(String schemaName) {\n            this.schemaName = schemaName;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> batch() {\n            this.withBatchMode = true;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> batch(int batchSize) {\n            this.batchSize = batchSize;\n            this.withBatchMode = true;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> keywordCase(Case caze) {\n            this.keywordCase = caze;\n            return this;\n        }\n\n        public SqlTransformerBuilder<IN> forceUseSqlQuoteIdentifier() {\n            this.forceSqlQuoteIdentifierUsage = true;\n            return this;\n        }\n\n        public SqlTransformer<IN> build() {\n            if (dialect == null) {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, null, sqlQuoteIdentifier, casing, withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            } else {\n                return new SqlTransformer<>(\n                    schemaName, tableName, quote, dialect, dialect.getSqlQuoteIdentifier(), dialect.getUnquotedCasing(),\n                    withBatchMode, batchSize, keywordCase, forceSqlQuoteIdentifierUsage);\n            }\n        }\n    }\n\n    public enum Case {\n        CAPITAL,\n        LOWERCASE,\n        UPPERCASE\n    }\n\n    enum SQLKeyWords {\n        ARRAY(\"ARRAY\", \"array\", \"Array\"),\n        MAP(\"MAP\", \"map\", \"Map\"),\n        NAMED_STRUCT(\"NAMED_STRUCT\", \"named_struct\", \"Named_Struct\"),\n        INSERT_ALL(\"INSERT ALL\", \"insert all\", \"Insert All\"),\n        INSERT_INTO(\"INSERT INTO\", \"insert into\", \"Insert Into\"),\n        INTO(\"INTO\", \"into\", \"Into\"),\n        MULTISET(\"MULTISET\", \"multiset\", \"Multiset\"),\n        NULL(\"NULL\", \"null\", \"Null\"),\n        ROW(\"ROW\", \"row\", \"Row\"),\n        SELECT_1_FROM_DUAL(\"SELECT 1 FROM dual\", \"select 1 from dual\", \"Select 1 From dual\"),\n        VALUES(\"VALUES\", \"values\", \"Values\");\n        private final String upperCaseValue;\n        private final String lowerCaseValue;\n        private final String capitalValue;\n\n        SQLKeyWords(String upperCaseValue, String lowerCaseValue, String capitalValue) {\n            this.upperCaseValue = upperCaseValue;\n            this.lowerCaseValue = lowerCaseValue;\n            this.capitalValue = capitalValue;\n        }\n\n        public String getValue(Case caze) {\n            return switch (caze) {\n                case UPPERCASE -> upperCaseValue;\n                case LOWERCASE -> lowerCaseValue;\n                case CAPITAL -> capitalValue;\n            };\n        }\n    }\n}", "super_interfaces": ["Transformer<IN, CharSequence>"], "fields": [{"attribute_expression": "private static final char DEFAULT_QUOTE = '\\'';", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char", "name": "DEFAULT_QUOTE = '\\''", "syntax_pass": true}, {"attribute_expression": "private static final char DEFAULT_CATALOG_SEPARATOR = '.';", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "char", "name": "DEFAULT_CATALOG_SEPARATOR = '.'", "syntax_pass": true}, {"attribute_expression": "private static final String DEFAULT_SQL_IDENTIFIER = \"\\\"\\\"\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "DEFAULT_SQL_IDENTIFIER = \"\\\"\\\"\"", "syntax_pass": true}, {"attribute_expression": "private static final String EMPTY_RESULT = \"\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "EMPTY_RESULT = \"\"", "syntax_pass": true}, {"attribute_expression": "private final Casing casing;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Casing", "name": "casing", "syntax_pass": true}, {"attribute_expression": "private final char quote;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "char", "name": "quote", "syntax_pass": true}, {"attribute_expression": "private final char openSqlIdentifier;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "char", "name": "openSqlIdentifier", "syntax_pass": true}, {"attribute_expression": "private final char closeSqlIdentifier;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "char", "name": "closeSqlIdentifier", "syntax_pass": true}, {"attribute_expression": "private final String tableName;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "tableName", "syntax_pass": true}, {"attribute_expression": "private final String schemaName;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "schemaName", "syntax_pass": true}, {"attribute_expression": "private final boolean withBatchMode;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "withBatchMode", "syntax_pass": true}, {"attribute_expression": "private final int batchSize;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "batchSize", "syntax_pass": true}, {"attribute_expression": "private final Case keywordCase;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Case", "name": "keywordCase", "syntax_pass": true}, {"attribute_expression": "private final boolean forceSqlQuoteIdentifierUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "forceSqlQuoteIdentifierUsage", "syntax_pass": true}, {"attribute_expression": "private final SqlDialect dialect;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SqlDialect", "name": "dialect", "syntax_pass": true}]}]