[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport java.io.OutputStreamWriter;\nimport java.io.IOException;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport org.openapitools.openapidiff.core.exception.RendererException;\nimport java.util.Collections;\n\npublic class AsciidocRender_renderTest {\n\n    @Mock\n    private ChangedOpenApi mockDiff;\n\n    @Mock\n    private OutputStreamWriter mockOutputStreamWriter;\n\n    private AsciidocRender asciidocRender;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        asciidocRender = new AsciidocRender();\n    }\n\n    @Test\n    public void testRenderUnchanged() throws IOException {\n        when(mockDiff.isUnchanged()).thenReturn(true);\n        when(mockDiff.getNewSpecOpenApi()).thenReturn(mock(OpenApi.class));\n        when(mockDiff.getNewSpecOpenApi().getInfo()).thenReturn(mock(Info.class));\n        when(mockDiff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test Title\");\n        when(mockDiff.getNewSpecOpenApi().getInfo().getVersion()).thenReturn(\"1.0\");\n\n        asciidocRender.render(mockDiff, mockOutputStreamWriter);\n\n        verify(mockOutputStreamWriter, times(4)).write(anyString());\n        verify(mockOutputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderChanged() throws IOException {\n        when(mockDiff.isUnchanged()).thenReturn(false);\n        when(mockDiff.isCompatible()).thenReturn(true);\n        when(mockDiff.getNewSpecOpenApi()).thenReturn(mock(OpenApi.class));\n        when(mockDiff.getNewSpecOpenApi().getInfo()).thenReturn(mock(Info.class));\n        when(mockDiff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test Title\");\n        when(mockDiff.getNewSpecOpenApi().getInfo().getVersion()).thenReturn(\"1.0\");\n        when(mockDiff.getNewEndpoints()).thenReturn(Collections.emptyList());\n        when(mockDiff.getMissingEndpoints()).thenReturn(Collections.emptyList());\n        when(mockDiff.getDeprecatedEndpoints()).thenReturn(Collections.emptyList());\n        when(mockDiff.getChangedOperations()).thenReturn(Collections.emptyList());\n\n        asciidocRender.render(mockDiff, mockOutputStreamWriter);\n\n        verify(mockOutputStreamWriter, times(6)).write(anyString());\n        verify(mockOutputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderIOException() throws IOException {\n        when(mockDiff.isUnchanged()).thenReturn(true);\n        when(mockDiff.getNewSpecOpenApi()).thenReturn(mock(OpenApi.class));\n        when(mockDiff.getNewSpecOpenApi().getInfo()).thenReturn(mock(Info.class));\n        when(mockDiff.getNewSpecOpenApi().getInfo().getTitle()).thenReturn(\"Test Title\");\n        when(mockDiff.getNewSpecOpenApi().getInfo().getVersion()).thenReturn(\"1.0\");\n        doThrow(new IOException()).when(mockOutputStreamWriter).close();\n\n        assertThrows(RendererException.class, () -> {\n            asciidocRender.render(mockDiff, mockOutputStreamWriter);\n        });\n    }\n}\n"}]