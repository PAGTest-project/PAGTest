[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.function.Consumer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class DeferredBuilder_withTest {\n\n    private DeferredBuilder<Object> deferredBuilder;\n    private DeferredChanged<Object> deferredChanged;\n\n    @BeforeEach\n    public void setUp() {\n        deferredBuilder = new DeferredBuilder<>();\n        deferredChanged = new DeferredChanged<>() {\n            @Override\n            public void whenSet(Consumer<Optional<? super Object>> consumer) {\n                // Mock implementation\n            }\n\n            @Override\n            public Object get() {\n                return null; // Mock implementation\n            }\n        };\n    }\n\n    @Test\n    public void testWith_AddsDeferredChangedToList() {\n        // Given\n        List<DeferredChanged<? extends Object>> initialDeferredValues = new ArrayList<>(deferredBuilder.getDeferredValues());\n\n        // When\n        DeferredChanged<Object> result = deferredBuilder.with(deferredChanged);\n\n        // Then\n        assertEquals(deferredChanged, result);\n        assertTrue(deferredBuilder.getDeferredValues().contains(deferredChanged));\n        assertEquals(initialDeferredValues.size() + 1, deferredBuilder.getDeferredValues().size());\n    }\n}\n"}]