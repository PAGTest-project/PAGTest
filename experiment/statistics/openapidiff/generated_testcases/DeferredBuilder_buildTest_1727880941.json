[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.function.Consumer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class DeferredBuilder_buildTest {\n\n    private DeferredBuilder<String> builder;\n    private DeferredChanged<String> deferred1;\n    private DeferredChanged<String> deferred2;\n\n    @BeforeEach\n    public void setUp() {\n        builder = new DeferredBuilder<>();\n        deferred1 = mock(DeferredChanged.class);\n        deferred2 = mock(DeferredChanged.class);\n    }\n\n    @Test\n    public void testBuildWithEmptyDeferredValues() {\n        DeferredChanged<List<Optional<? super String>>> result = builder.build();\n        assertTrue(result instanceof DeferredChanged.EmptyDeferredChanged);\n    }\n\n    @Test\n    public void testBuildWithNonEmptyDeferredValues() {\n        builder.add(deferred1);\n        builder.add(deferred2);\n\n        PendingChanged<List<Optional<? super String>>> pendingChanged = mock(PendingChanged.class);\n        when(pendingChanged.setValue(any())).thenReturn(true);\n\n        DeferredChanged<List<Optional<? super String>>> result = builder.build();\n\n        verify(deferred1).whenSet(any());\n        verify(deferred2).whenSet(any());\n\n        Consumer<Optional<String>> consumer1 = (Consumer<Optional<String>>) result.getWhenSetConsumers().get(0);\n        Consumer<Optional<String>> consumer2 = (Consumer<Optional<String>>) result.getWhenSetConsumers().get(1);\n\n        consumer1.accept(Optional.of(\"value1\"));\n        consumer2.accept(Optional.of(\"value2\"));\n\n        verify(pendingChanged).setValue(Optional.of(Arrays.asList(Optional.of(\"value1\"), Optional.of(\"value2\"))));\n    }\n}\n"}]