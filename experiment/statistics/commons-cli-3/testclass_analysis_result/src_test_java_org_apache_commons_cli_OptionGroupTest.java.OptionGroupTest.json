{"file_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "testclass_name": "OptionGroupTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroupTest", "description": "Unit tests for the OptionGroup class in the Apache Commons CLI library.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetNames", "primary_tested": ["OptionGroup.isSelected()", "OptionGroup.getNames()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "OptionBuilder"]}, "category": "unit", "description": "Tests the functionality of retrieving option names from an OptionGroup."}, {"name": "testNoOptionsExtraArgs", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when no options are provided and extra arguments are present."}, {"name": "testSingleLongOption", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single long option (--file) is provided."}, {"name": "testSingleOption", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single option (-r) is provided."}, {"name": "testSingleOptionFromGroup", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single option (-f) from a group is provided."}, {"name": "testToString", "primary_tested": ["OptionGroup.toString()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option"]}, "category": "unit", "description": "Tests the toString method of the OptionGroup class."}, {"name": "testTwoLongOptionsFromGroup", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Parser", "AlreadySelectedException"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two long options from the same group are provided, expecting an AlreadySelectedException."}, {"name": "testTwoOptionsFromDifferentGroup", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two options from different groups are provided."}, {"name": "testTwoOptionsFromGroup", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Parser", "AlreadySelectedException"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two options from the same group are provided, expecting an AlreadySelectedException."}, {"name": "testTwoOptionsFromGroupWithProperties", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "Parser", "Properties"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when an option from a group is provided with properties, expecting the other option from the group to be ignored."}, {"name": "testTwoValidLongOptions", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two valid long options are provided."}, {"name": "testTwoValidOptions", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two valid options are provided."}, {"name": "testValidLongOnlyOptions", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when valid long-only options (--export and --import) are provided."}]}