[{"file_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "testclass_name": "BasicParserTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "BasicParserTest", "description": "Test class for the BasicParser functionality, extending AbstractParserTestCase. Most tests are disabled due to unsupported features by the BasicParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": []}, {"file_path": "src/test/java/org/apache/commons/cli/UtilTest.java", "testclass_name": "UtilTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "UtilTest", "description": "Unit tests for the Util class, focusing on methods that strip leading and trailing quotes and hyphens.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testStripLeadingAndTrailingQuotes", "primary_tested": ["Util.stripLeadingAndTrailingQuotes(String)"], "external_dependencies": {"modules": ["Util"]}, "category": "unit", "description": "Tests the functionality of stripping leading and trailing quotes from a string."}, {"name": "testStripLeadingHyphens", "primary_tested": ["Util.stripLeadingHyphens(String)"], "external_dependencies": {"modules": ["Util"]}, "category": "unit", "description": "Tests the functionality of stripping leading hyphens from a string."}]}, {"file_path": "src/test/java/org/apache/commons/cli/UnrecognizedOptionExceptionTest.java", "testclass_name": "UnrecognizedOptionExceptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "UnrecognizedOptionExceptionTest", "description": "Unit tests for the UnrecognizedOptionException class.", "test_cases": [{"name": "testConstructor", "primary_tested": ["UnrecognizedOptionException.UnrecognizedOptionException(String)", "UnrecognizedOptionException.UnrecognizedOptionException(String,String)", "UnrecognizedOptionException.getMessage()", "UnrecognizedOptionException.getOption()"], "external_dependencies": {"modules": ["UnrecognizedOptionException"]}, "category": "unit", "description": "Tests the constructors and methods of the UnrecognizedOptionException class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/AlreadySelectedExceptionTest.java", "testclass_name": "AlreadySelectedExceptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "AlreadySelectedExceptionTest", "description": "Unit tests for the AlreadySelectedException class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testConstructor", "primary_tested": ["AlreadySelectedException.AlreadySelectedException(String)", "AlreadySelectedException.AlreadySelectedException(OptionGroup,Option)"], "associated_methods": ["AlreadySelectedException.getMessage()", "AlreadySelectedException.getOption()", "AlreadySelectedException.getOptionGroup()"], "external_dependencies": {"modules": ["AlreadySelectedException", "Option", "OptionGroup"]}, "category": "unit", "description": "Tests the constructors and methods of the AlreadySelectedException class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ParseExceptionTest.java", "testclass_name": "ParseExceptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.IOException;", "import org.junit.jupiter.api.Test;"], "name": "ParseExceptionTest", "description": "Unit tests for the ParseException class constructors and wrap method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testConstructor", "primary_tested": ["ParseException.ParseException(String)", "ParseException.ParseException(Throwable)", "ParseException.wrap(Throwable)"], "external_dependencies": {"modules": ["ParseException", "IOException"]}, "category": "unit", "description": "Tests the constructors and wrap method of the ParseException class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java", "testclass_name": "BugCLI13Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionBuilder;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI13Test", "description": "Test case for CLI-13 bug, focusing on command line option parsing and validation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCLI13", "primary_tested": ["CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(char)", "CommandLine.hasOption(char)", "CommandLine.hasOption(String)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["CommandLine", "Option", "OptionBuilder", "Options", "ParseException", "PosixParser"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing and validation of command line options using PosixParser, ensuring that options are correctly added and retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java", "testclass_name": "BugCLI18Test", "dependencies": ["package org.apache.commons.cli.bug;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI18Test", "description": "Test case for CLI-18 bug in Apache Commons CLI.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCLI18", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "external_dependencies": {"modules": ["Options", "Option", "HelpFormatter", "StringWriter", "PrintWriter"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the printHelp method of HelpFormatter with various options and parameters."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI325Test.java", "testclass_name": "BugCLI325Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Properties;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI325Test", "description": "Test case for CLI bug 325, focusing on parsing options with value separators.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCli325", "primary_tested": ["CommandLine.getOptionProperties(Option)"], "associated_methods": ["Option.builder()", "DefaultParser.builder()", "DefaultParser.parse(Options,String[])"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Option", "Options", "ParseException", "Properties"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of options with value separators and verifies the properties extracted from the command line."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java", "testclass_name": "BugCLI148Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.OptionBuilder;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI148Test", "description": "Tests for bug CLI-148, focusing on parsing command line options with workarounds.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testWorkaround1", "primary_tested": ["CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the workaround for parsing command line options where the option value starts with a hyphen."}, {"name": "testWorkaround2", "primary_tested": ["CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the workaround for parsing command line options where the option value is quoted and starts with a hyphen."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java", "testclass_name": "BugCLI252Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.cli.AmbiguousOptionException;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI252Test", "description": "Tests for handling ambiguous option names in the DefaultParser class.", "class_members": {"methods": [{"name": "getOptions", "signature": "Options getOptions()"}]}, "fixtures": [], "test_cases": [{"name": "testAmbiquousOptionName", "primary_tested": ["DefaultParser.parse(Options,String[])"], "external_dependencies": {"modules": ["AmbiguousOptionException", "DefaultParser", "Options"], "class_members": [{"name": "getOptions", "type": "method"}]}, "category": "unit", "description": "Tests that an AmbiguousOptionException is thrown when an ambiguous option name is provided."}, {"name": "testExactOptionNameMatch", "primary_tested": ["DefaultParser.parse(Options,String[])"], "external_dependencies": {"modules": ["DefaultParser", "Options", "ParseException"], "class_members": [{"name": "getOptions", "type": "method"}]}, "category": "unit", "description": "Tests that no exception is thrown when an exact option name match is provided."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java", "testclass_name": "DisablePartialMatchingTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "DisablePartialMatchingTest", "description": "Tests for disabling partial matching in CommandLineParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDisablePartialMatching", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLineParser", "DefaultParser", "Options", "Option", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that partial matching is disabled by creating a CommandLineParser with partial matching disabled and verifying the expected options are present."}, {"name": "testRegularPartialMatching", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLineParser", "DefaultParser", "Options", "Option", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests regular partial matching by creating a CommandLineParser with default settings and verifying the expected options are present."}]}, {"file_path": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java", "testclass_name": "SolrCreateToolTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "SolrCreateToolTest", "description": "Unit tests for the SolrCreateTool class, focusing on the HelpFormatter functionality.", "class_members": {"methods": [{"name": "getOptions", "signature": "List<Option> getOptions()"}, {"name": "printHelp", "signature": "String printHelp(HelpFormatter formatter)"}]}, "test_cases": [{"name": "testHelpFormatter", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "associated_methods": ["SolrCreateToolTest.printHelp(HelpFormatter)"], "external_dependencies": {"modules": ["HelpFormatter", "Options", "Option", "PrintWriter", "StringWriter"], "class_members": [{"name": "getOptions", "type": "method"}, {"name": "printHelp", "type": "method"}]}, "category": "unit", "description": "Tests the HelpFormatter functionality to ensure it does not include deprecated options."}, {"name": "testHelpFormatterDeprecated", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "associated_methods": ["SolrCreateToolTest.printHelp(HelpFormatter)"], "external_dependencies": {"modules": ["HelpFormatter", "Options", "Option", "PrintWriter", "StringWriter"], "class_members": [{"name": "getOptions", "type": "method"}, {"name": "printHelp", "type": "method"}]}, "category": "unit", "description": "Tests the HelpFormatter functionality to ensure it includes deprecated options when configured to do so."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java", "testclass_name": "BugCLI133Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI133Test", "description": "Test class for verifying the order of options parsing in the PosixParser.", "class_members": {"variables": [{"name": "optionA", "type": "Option"}, {"name": "opts", "type": "Options"}, {"name": "posixParser", "type": "PosixParser"}, {"name": "line", "type": "CommandLine"}]}, "fixtures": [], "test_cases": [{"name": "testOrder", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["CommandLine", "Option", "Options", "ParseException", "PosixParser"], "class_members": [{"name": "optionA", "type": "variable"}, {"name": "opts", "type": "variable"}, {"name": "posixParser", "type": "variable"}, {"name": "line", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the order of options parsing in the PosixParser by checking if a null option is not present."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java", "testclass_name": "DeprecatedAttributesTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "DeprecatedAttributesTest", "description": "Unit tests for the DeprecatedAttributes class, focusing on builder methods and default values.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBuilderNonDefaults", "primary_tested": ["DeprecatedAttributes.builder().setDescription(String).setForRemoval(boolean).setSince(String).get()"], "associated_methods": ["DeprecatedAttributes.getDescription()", "DeprecatedAttributes.getSince()", "DeprecatedAttributes.isForRemoval()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the builder method of DeprecatedAttributes with non-default values."}, {"name": "testBuilderNonDefaultsToString", "primary_tested": ["DeprecatedAttributes.builder().setDescription(String).setForRemoval(boolean).setSince(String).get().toString()"], "associated_methods": ["DeprecatedAttributes.builder().setDescription(String).setForRemoval(boolean).get().toString()", "DeprecatedAttributes.builder().setDescription(String).setSince(String).get().toString()", "DeprecatedAttributes.builder().setDescription(String).get().toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method of DeprecatedAttributes with various non-default configurations."}, {"name": "testDefaultBuilder", "primary_tested": ["DeprecatedAttributes.builder().get()"], "associated_methods": ["DeprecatedAttributes.DEFAULT.getDescription()", "DeprecatedAttributes.DEFAULT.getSince()", "DeprecatedAttributes.DEFAULT.isForRemoval()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the default builder method of DeprecatedAttributes."}, {"name": "testDefaultToString", "primary_tested": ["DeprecatedAttributes.DEFAULT.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method of DeprecatedAttributes with default values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java", "testclass_name": "BugCLI312Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Properties;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.MissingArgumentException;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI312Test", "description": "Tests for handling missing arguments and property-style options in CommandLineParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNoOptionValues", "primary_tested": ["DefaultParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Option", "Options", "CommandLineParser", "DefaultParser", "MissingArgumentException"]}, "category": "unit", "description": "Tests that a MissingArgumentException is thrown when parsing options without values."}, {"name": "testPropertyStyleOption_withGetOptionProperties", "primary_tested": ["CommandLine.getOptionProperties(String)"], "associated_methods": ["CommandLine.getOptionValues(char)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["Option", "Options", "CommandLineParser", "DefaultParser", "CommandLine", "Properties"]}, "category": "unit", "description": "Tests the functionality of parsing property-style options and retrieving them as Properties."}, {"name": "testPropertyStyleOption_withGetOptions", "primary_tested": ["CommandLine.getOptions()"], "associated_methods": ["CommandLine.getOptionValues(char)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["Option", "Options", "CommandLineParser", "DefaultParser", "CommandLine"]}, "category": "unit", "description": "Tests the functionality of parsing property-style options and iterating over them using getOptions()."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java", "testclass_name": "ArgumentIsOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArgumentIsOptionTest", "description": "Tests for verifying the behavior of options and options with arguments in the CommandLineParser.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "CommandLineParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOption", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "CommandLineParser", "CommandLine"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the presence of a simple option without arguments."}, {"name": "testOptionAndOptionWithArgument", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "CommandLineParser", "CommandLine"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the presence of an option and an option with an argument."}, {"name": "testOptionWithArgument", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "CommandLineParser", "CommandLine"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the presence of an option with an argument."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java", "testclass_name": "BugCLI266Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.List;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionGroup;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI266Test", "description": "Tests for the HelpFormatter's option comparator and order in the BugCLI266 class.", "class_members": {"variables": [{"name": "insertedOrder", "type": "List<String>"}, {"name": "sortOrder", "type": "List<String>"}], "methods": [{"name": "buildOptionsGroup", "signature": "void buildOptionsGroup(Options)"}, {"name": "getOptions", "signature": "Options getOptions()"}]}, "fixtures": [], "test_cases": [{"name": "testOptionComparatorDefaultOrder", "primary_tested": ["HelpFormatter.getOptionComparator()"], "associated_methods": ["HelpFormatter.getOptions()"], "external_dependencies": {"modules": ["HelpFormatter", "Option", "Options"], "class_members": [{"name": "insertedOrder", "type": "variable"}, {"name": "sortOrder", "type": "variable"}, {"name": "buildOptionsGroup", "type": "method"}, {"name": "getOptions", "type": "method"}]}, "category": "unit", "description": "Tests the default order of options when sorted using HelpFormatter's option comparator."}, {"name": "testOptionComparatorInsertedOrder", "primary_tested": ["Options.getOptions()"], "associated_methods": [], "external_dependencies": {"modules": ["Option", "Options"], "class_members": [{"name": "insertedOrder", "type": "variable"}, {"name": "buildOptionsGroup", "type": "method"}, {"name": "getOptions", "type": "method"}]}, "category": "unit", "description": "Tests the inserted order of options without sorting."}]}, {"file_path": "src/test/java/org/apache/commons/cli/SolrCliTest.java", "testclass_name": "SolrCliTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.Locale;", "import org.junit.jupiter.api.Test;"], "name": "SolrCliTest", "description": "Test class for verifying the options and default values in Solr CLI.", "class_members": {"variables": [{"name": "ZK_HOST", "type": "static final String"}, {"name": "DEFAULT_CONFIG_SET", "type": "static final String"}, {"name": "OPTION_ZKHOST_DEPRECATED", "type": "static final Option"}, {"name": "OPTION_ZKHOST", "type": "static final Option"}, {"name": "OPTION_SOLRURL_DEPRECATED", "type": "static final Option"}, {"name": "OPTION_SOLRURL", "type": "static final Option"}, {"name": "OPTION_VERBOSE", "type": "static final Option"}, {"name": "OPTION_HELP", "type": "static final Option"}, {"name": "OPTION_RECURSE", "type": "static final Option"}, {"name": "OPTION_CREDENTIALS", "type": "static final Option"}], "methods": [{"name": "getDefaultSolrUrl", "signature": "static String getDefaultSolrUrl()"}]}, "test_cases": [{"name": "testOptions", "primary_tested": [], "associated_methods": ["SolrCliTest.getDefaultSolrUrl()"], "external_dependencies": {"modules": [], "class_members": [{"name": "DEFAULT_CONFIG_SET", "type": "variable"}, {"name": "OPTION_CREDENTIALS", "type": "variable"}, {"name": "OPTION_HELP", "type": "variable"}, {"name": "OPTION_RECURSE", "type": "variable"}, {"name": "OPTION_SOLRURL", "type": "variable"}, {"name": "OPTION_SOLRURL_DEPRECATED", "type": "variable"}, {"name": "OPTION_VERBOSE", "type": "variable"}, {"name": "OPTION_ZKHOST", "type": "variable"}, {"name": "OPTION_ZKHOST_DEPRECATED", "type": "variable"}, {"name": "ZK_HOST", "type": "variable"}, {"name": "getDefaultSolrUrl", "type": "method"}]}, "category": "unit", "description": "Tests the sanity checks for various options and default values in Solr CLI."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java", "testclass_name": "BugCLI265Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI265Test", "description": "Unit tests for parsing concatenated short options and handling optional arguments in CommandLine.", "class_members": {"variables": [{"name": "parser", "type": "DefaultParser"}, {"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testShouldParseConcatenatedShortOptions", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing of concatenated short options and verifies the presence of parsed options."}, {"name": "testShouldParseShortOptionWithoutValue", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing of short options without values and verifies the presence of parsed options."}, {"name": "testShouldParseShortOptionWithValue", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(String)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing of short options with values and verifies the parsed values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "testclass_name": "BugCLI71Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.fail;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.MissingArgumentException;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI71Test", "description": "Tests for handling command line options and parsing using Apache Commons CLI.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "CommandLineParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBasic", "primary_tested": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "Options", "Option"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests basic parsing of command line options and retrieving their values."}, {"name": "testGetsDefaultIfOptional", "primary_tested": ["CommandLine.getOptionValue(char,String)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "Options", "Option"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests retrieving an option value with a default if the option is optional."}, {"name": "testLackOfError", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["MissingArgumentException.getOption()"], "external_dependencies": {"modules": ["CommandLineParser", "Options", "Option", "MissingArgumentException"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a MissingArgumentException is thrown when an option is missing an argument."}, {"name": "testMistakenArgument", "primary_tested": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "Options", "Option"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing command line options with mistaken arguments and retrieving their values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java", "testclass_name": "OptionValidatorTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "OptionValidatorTest", "description": "Tests for validating option strings in the OptionValidator class.", "class_members": {"variables": [{"name": "LETTERS", "type": "static final String"}, {"name": "DIGITS", "type": "static final String"}, {"name": "CURRENCY", "type": "static final String"}, {"name": "PUNCTUATION", "type": "static final String"}, {"name": "COMBINING_MARK", "type": "static final String"}, {"name": "NON_SPACING_MARK", "type": "static final String"}, {"name": "IDENTIFIER_IGNORABLE", "type": "static final String"}, {"name": "acceptablePunctuation", "type": "static String"}, {"name": "notAcceptablePunctuation", "type": "static String"}, {"name": "additionalOptonChars", "type": "static String"}, {"name": "additionalLongChars", "type": "static String"}, {"name": "firstChars", "type": "static String"}, {"name": "notFirstChars", "type": "static String"}, {"name": "restChars", "type": "static String"}, {"name": "notRestChars", "type": "static String"}], "methods": [{"name": "optionParameters", "signature": "static Stream<Arguments> optionParameters()"}]}, "fixtures": ["setup"], "test_cases": [{"name": "testExclusivity", "primary_tested": ["OptionValidator.ADDITIONAL_LONG_CHARS", "OptionValidator.ADDITIONAL_OPTION_CHARS"], "external_dependencies": {"modules": ["OptionValidator"], "class_members": [{"name": "additionalLongChars", "type": "variable"}, {"name": "additionalOptonChars", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the exclusivity of additional long and option characters in the OptionValidator."}, {"name": "validateTest", "primary_tested": ["OptionValidator.validate(String)"], "external_dependencies": {"modules": ["OptionValidator"], "class_members": [{"name": "optionParameters", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of option strings using parameterized test cases."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ConverterTests.java", "testclass_name": "ConverterTests", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.net.URL;", "import java.text.DateFormat;", "import java.text.SimpleDateFormat;", "import java.util.ArrayList;", "import java.util.Date;", "import java.util.List;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "ConverterTests", "description": "Unit tests for various conversion functionalities in the Converter class.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AClassWithoutADefaultConstructor", "description": "A class without a default constructor."}]}, "fixtures": [], "test_cases": [{"name": "classTests", "primary_tested": ["Converter.CLASS.apply(String)"], "associated_methods": ["Converter.CLASS.apply(String)"], "external_dependencies": {"modules": ["Converter", "ClassNotFoundException"], "class_members": [{"name": "AClassWithoutADefaultConstructor", "type": "nested_class"}]}, "category": "unit", "description": "Tests the class conversion functionality of the Converter."}, {"name": "dateTests", "primary_tested": ["Converter.DATE.apply(String)"], "associated_methods": ["Converter.DATE.apply(String)"], "external_dependencies": {"modules": ["Converter", "DateFormat", "SimpleDateFormat", "Date", "ParseException"]}, "category": "unit", "description": "Tests the date conversion functionality of the Converter."}, {"name": "fileTests", "primary_tested": ["Converter.FILE.apply(String)"], "associated_methods": ["Converter.FILE.apply(String)"], "external_dependencies": {"modules": ["Converter", "URL"]}, "category": "unit", "description": "Tests the file conversion functionality of the Converter."}, {"name": "numberTests", "primary_tested": ["Converter.NUMBER.apply(String)"], "associated_methods": ["Converter.NUMBER.apply(String)"], "external_dependencies": {"modules": ["Converter", "NumberFormatException"]}, "category": "unit", "description": "Tests the number conversion functionality of the Converter."}, {"name": "objectTests", "primary_tested": ["Converter.OBJECT.apply(String)"], "associated_methods": ["Converter.OBJECT.apply(String)"], "external_dependencies": {"modules": ["Converter", "ClassNotFoundException", "NoSuchMethodException"], "class_members": [{"name": "AClassWithoutADefaultConstructor", "type": "nested_class"}]}, "category": "unit", "description": "Tests the object conversion functionality of the Converter."}, {"name": "urlTests", "primary_tested": ["Converter.URL.apply(String)"], "associated_methods": ["Converter.URL.apply(String)"], "external_dependencies": {"modules": ["Converter", "URL", "MalformedURLException"]}, "category": "unit", "description": "Tests the URL conversion functionality of the Converter."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "testclass_name": "PosixParserTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "PosixParserTest", "description": "Test class for the PosixParser, extending AbstractParserTestCase.", "class_members": {"variables": [{"name": "parser", "type": "PosixParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAmbiguousLongWithoutEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testAmbiguousLongWithoutEqualSingleDash2", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testAmbiguousPartialLongOption4", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testDoubleDash2", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testLongWithEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testLongWithoutEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testLongWithUnexpectedArgument1", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testNegativeOption", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser (CLI-184)."}, {"name": "testShortWithEqual", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testUnambiguousPartialLongOption4", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "testclass_name": "ApplicationTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import org.junit.jupiter.api.Test;"], "name": "ApplicationTest", "description": "Unit tests for various command line parsing scenarios using Apache Commons CLI.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAnt", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(String,boolean,String)", "CommandLine.getOptionValues(String)", "CommandLine.getOptionValue(String)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLineParser", "Options", "CommandLine", "OptionBuilder"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options for an Ant-like command."}, {"name": "testGroovy", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(char)", "CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["CommandLineParser", "Options", "CommandLine", "OptionBuilder"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options for a Groovy-like command."}, {"name": "testLs", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLineParser", "Options", "CommandLine", "OptionBuilder"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options for an ls-like command."}, {"name": "testMan", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "HelpFormatter.DEFAULT_LEFT_PAD", "HelpFormatter.DEFAULT_DESC_PAD"], "external_dependencies": {"modules": ["HelpFormatter", "Options", "PrintWriter", "StringWriter"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a help message for a man-like command."}, {"name": "testNLT", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLineParser", "Options", "CommandLine", "OptionBuilder"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options for an NLT-like command."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "testclass_name": "OptionBuilderTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilderTest", "description": "Unit tests for the OptionBuilder class in the Apache Commons CLI library.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBaseOptionCharOpt", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()", "Option.getDescription()", "Option.hasArg()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the creation of a base option with a character option."}, {"name": "testBaseOptionStringOpt", "primary_tested": ["OptionBuilder.create(String)"], "associated_methods": ["Option.getOpt()", "Option.getDescription()", "Option.hasArg()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the creation of a base option with a string option."}, {"name": "testBuilderIsResettedAlways", "primary_tested": ["OptionBuilder.create(char)", "OptionBuilder.create()"], "associated_methods": ["Option.getDescription()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests that the OptionBuilder is reset after an exception."}, {"name": "testCompleteOption", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()", "Option.getLongOpt()", "Option.getDescription()", "Option.getType()", "Option.hasArg()", "Option.isRequired()", "Option.hasArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option", "Float"]}, "category": "unit", "description": "Tests the creation of a complete option with various attributes."}, {"name": "testCreateIncompleteOption", "primary_tested": ["OptionBuilder.create()"], "external_dependencies": {"modules": ["OptionBuilder"]}, "category": "unit", "description": "Tests the rejection of an incomplete option creation."}, {"name": "testIllegalOptions", "primary_tested": ["OptionBuilder.create(char)", "OptionBuilder.create(String)"], "external_dependencies": {"modules": ["OptionBuilder"]}, "category": "unit", "description": "Tests the handling of illegal option characters."}, {"name": "testOptionArgNumbers", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the setting of argument numbers for an option."}, {"name": "testSpecialOptChars", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the handling of special option characters."}, {"name": "testTwoCompleteOptions", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()", "Option.getLongOpt()", "Option.getDescription()", "Option.getType()", "Option.hasArg()", "Option.isRequired()", "Option.hasArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option", "Float", "String"]}, "category": "unit", "description": "Tests the creation of two complete options with different attributes."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ValuesTest.java", "testclass_name": "ValuesTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValuesTest", "description": "Unit tests for CommandLine options and values.", "class_members": {"variables": [{"name": "cmd", "type": "CommandLine"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCharSeparator", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.hasOption(char)", "CommandLine.getOptionValues(String)", "CommandLine.getOptionValues(char)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the char methods of CommandLine that delegate to the String methods."}, {"name": "testComplexValues", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests complex values for options i and h."}, {"name": "testExtraArgs", "primary_tested": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of extra arguments."}, {"name": "testMultipleArgValues", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests multiple argument values for option e."}, {"name": "testShortArgs", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests short arguments without values for options a and c."}, {"name": "testShortArgsWithValue", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests short arguments with values for options b and d."}, {"name": "testTwoArgValues", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests two argument values for option g."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "testclass_name": "BugsTest", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.io.PrintWriter;", "import java.util.Iterator;", "import java.util.Properties;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.GnuParser;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.MissingArgumentException;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionBuilder;", "import org.apache.commons.cli.OptionGroup;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.apache.commons.cli.Parser;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.Test;"], "name": "BugsTest", "description": "Unit tests for various bugs and edge cases in the Apache Commons CLI library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "test11456", "primary_tested": ["CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "GnuParser", "CommandLine"]}, "category": "unit", "description": "Tests the parsing of options with optional and required arguments using both POSIX and GNU parsers."}, {"name": "test11457", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "CommandLine"]}, "category": "unit", "description": "Tests the presence of a long option (--verbose) in the parsed command line."}, {"name": "test11458", "primary_tested": ["CommandLine.getOptionValues(char)"], "associated_methods": ["CommandLine.iterator()"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "CommandLine", "Option"]}, "category": "unit", "description": "Tests the parsing of options with value separators and verifies the values using an iterator."}, {"name": "test11680", "primary_tested": ["CommandLine.getOptionValue(Option, Supplier)", "CommandLine.getOptionValue(char, Supplier)", "CommandLine.getOptionValue(Option, String)", "CommandLine.getOptionValue(String, String)"], "external_dependencies": {"modules": ["Options", "Option", "PosixParser", "CommandLine"]}, "category": "unit", "description": "Tests the retrieval of option values with default values using different API versions."}, {"name": "test12210", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "OptionGroup", "GnuParser", "CommandLine"]}, "category": "unit", "description": "Tests the parsing of command line arguments with exclusive option groups and nested options."}, {"name": "test13425", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "MissingArgumentException"]}, "category": "unit", "description": "Tests the handling of missing arguments for options and expects a MissingArgumentException."}, {"name": "test13666", "primary_tested": ["HelpFormatter.printHelp(String, Options)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "HelpFormatter", "PrintStream", "ByteArrayOutputStream"]}, "category": "unit", "description": "Tests the formatting and printing of help messages for command line options."}, {"name": "test13666_Builder", "primary_tested": ["HelpFormatter.printHelp(String, Options)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "HelpFormatter", "ByteArrayOutputStream", "PrintWriter"]}, "category": "unit", "description": "Tests the formatting and printing of help messages using the HelpFormatter builder."}, {"name": "test13935", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "PosixParser", "CommandLine"]}, "category": "unit", "description": "Tests the parsing of command line arguments with required and optional option groups."}, {"name": "test14786", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "GnuParser", "CommandLine"]}, "category": "unit", "description": "Tests the parsing of command line arguments with a required option."}, {"name": "test15046", "primary_tested": ["CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["Options", "Option", "PosixParser", "CommandLine"]}, "category": "unit", "description": "Tests the parsing of command line arguments with conflicting options."}, {"name": "test15648", "primary_tested": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "CommandLine"]}, "category": "unit", "description": "Tests the parsing of command line arguments with options that have quoted values."}, {"name": "test31148", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["Options", "Option", "PosixParser", "CommandLine", "Properties"]}, "category": "unit", "description": "Tests the parsing of command line arguments with options that have multiple arguments and properties."}]}, {"file_path": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "testclass_name": "TypeHandlerTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.net.MalformedURLException;", "import java.net.URL;", "import java.nio.file.InvalidPathException;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.text.DateFormat;", "import java.text.SimpleDateFormat;", "import java.time.Instant;", "import java.util.ArrayList;", "import java.util.Date;", "import java.util.List;", "import java.util.Map;", "import java.util.stream.Stream;", "import org.apache.commons.io.IOUtils;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "TypeHandlerTest", "description": "Unit tests for TypeHandler class, which handles type conversions and object creation.", "class_members": {"variables": [{"name": "PATH_CONVERTER", "type": "static final Converter<Path, InvalidPathException>"}], "methods": [{"name": "createDateFixtures", "signature": "private static Stream<Date> createDateFixtures()"}, {"name": "createValueTestParameters", "signature": "private static Stream<Arguments> createValueTestParameters() throws MalformedURLException"}], "nested_classes": [{"name": "Instantiable", "description": "Used for Class and Object creation tests."}, {"name": "NotInstantiable", "description": "Used for Class and Object negative creation tests."}]}, "fixtures": [], "test_cases": [{"name": "testCreateClass", "primary_tested": ["TypeHandler.createClass(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the creation of a class instance from its name."}, {"name": "testCreateDate", "primary_tested": ["TypeHandler.createDate(String)"], "associated_methods": ["TypeHandlerTest.createDateFixtures()"], "external_dependencies": {"modules": ["TypeHandler", "Date"], "class_members": [{"name": "createDateFixtures", "type": "method"}]}, "category": "unit", "description": "Tests the creation of a Date object from its string representation."}, {"name": "testCreateFile", "primary_tested": ["TypeHandler.createFile(String)"], "external_dependencies": {"modules": ["TypeHandler", "File"]}, "category": "unit", "description": "Tests the creation of a File object from its string path."}, {"name": "testCreateFiles", "primary_tested": ["TypeHandler.createFiles(String)"], "external_dependencies": {"modules": ["TypeHandler", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation of files, expecting an UnsupportedOperationException."}, {"name": "testCreateNumber", "primary_tested": ["TypeHandler.createNumber(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the creation of a Number object from its string representation."}, {"name": "testCreateObject", "primary_tested": ["TypeHandler.createObject(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException", "Date"]}, "category": "unit", "description": "Tests the creation of an Object from its class name."}, {"name": "testCreateURL", "primary_tested": ["TypeHandler.createURL(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException", "MalformedURLException", "URL", "Paths"]}, "category": "unit", "description": "Tests the creation of a URL object from its string representation."}, {"name": "testCreateValue", "primary_tested": ["TypeHandler.createValue(String,Class<?>)"], "associated_methods": ["TypeHandlerTest.createValueTestParameters()"], "external_dependencies": {"modules": ["TypeHandler", "ParseException", "Throwable"], "class_members": [{"name": "createValueTestParameters", "type": "method"}]}, "category": "unit", "description": "Tests the creation of various types of objects from their string representations."}, {"name": "testCreateValueExistingFile", "primary_tested": ["TypeHandler.createValue(String,Class<?>)"], "external_dependencies": {"modules": ["TypeHandler", "FileInputStream", "PatternOptionBuilder", "ParseException"]}, "category": "unit", "description": "Tests the creation of an existing file from its string path."}, {"name": "testnstantiableEquals", "primary_tested": ["Instantiable.equals(Object)"], "external_dependencies": {"modules": ["Instantiable"]}, "category": "unit", "description": "Tests the equality of Instantiable objects."}, {"name": "testOpenFile", "primary_tested": ["TypeHandler.openFile(String)"], "external_dependencies": {"modules": ["TypeHandler", "FileInputStream", "ParseException", "IOException", "IOUtils"]}, "category": "unit", "description": "Tests opening a file and consuming its content."}, {"name": "testRegister", "primary_tested": ["TypeHandler.createDefaultMap()", "TypeHandler.getConverter(Class<?>)", "TypeHandler.register(Class<?>,Converter<?,? extends Throwable>)"], "external_dependencies": {"modules": ["TypeHandler", "Converter", "Path"], "class_members": [{"name": "PATH_CONVERTER", "type": "variable"}]}, "category": "unit", "description": "Tests registering and retrieving a converter for a specific type."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "testclass_name": "PatternOptionBuilderTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.File;", "import java.io.FileInputStream;", "import java.net.URL;", "import java.text.DateFormat;", "import java.text.SimpleDateFormat;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.Vector;", "import org.junit.jupiter.api.Test;"], "name": "PatternOptionBuilderTest", "description": "Unit tests for the PatternOptionBuilder class, which is used to parse command line options based on patterns.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClassPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "Calendar"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of class patterns and verifies the returned objects."}, {"name": "testEmptyPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["Options.getOptions()"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of an empty pattern and verifies that no options are created."}, {"name": "testExistingFilePattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "FileInputStream"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a pattern for an existing file and verifies the returned FileInputStream object."}, {"name": "testExistingFilePatternFileNotExist", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a pattern for a non-existing file and verifies that no object is returned."}, {"name": "testNumberPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of number patterns and verifies the returned numeric objects."}, {"name": "testObjectPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of object patterns and verifies the returned objects."}, {"name": "testRequiredOption", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["MissingOptionException.getMissingOptions()"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "MissingOptionException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a pattern with a required option and verifies the exception thrown when the option is missing."}, {"name": "testSimplePattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionValue(String)", "CommandLine.getOptionObject(String)", "CommandLine.hasOption(String)", "CommandLine.getOptionObject(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "Date", "DateFormat", "SimpleDateFormat", "Vector", "File", "Calendar", "URL"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a simple pattern with various types and verifies the returned objects."}, {"name": "testUntypedPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.hasOption(char)", "CommandLine.getOptionObject(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of an untyped pattern and verifies the presence of options."}, {"name": "testURLPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "URL"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of URL patterns and verifies the returned URL objects."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "testclass_name": "DefaultParserTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultParserTest", "description": "Unit tests for the DefaultParser class, focusing on various parsing scenarios and quote handling.", "class_members": {"variables": [{"name": "parser", "type": "DefaultParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBuilder", "primary_tested": ["DefaultParser.builder()"], "associated_methods": ["DefaultParser.setStripLeadingAndTrailingQuotes(boolean)", "DefaultParser.setAllowPartialMatching(boolean)", "DefaultParser.setDeprecatedHandler(Consumer<Option>)"], "external_dependencies": {"modules": ["DefaultParser"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the builder functionality of the DefaultParser."}, {"name": "testDeprecated", "primary_tested": ["DefaultParser.builder().setDeprecatedHandler(Consumer<Option>)"], "associated_methods": ["Option.builder().option(String).deprecated().build()", "Option.builder().option(String).deprecated(DeprecatedAttributes).build()", "CommandLine.hasOption(String)", "Set.contains(Option)"], "external_dependencies": {"modules": ["DefaultParser", "Option", "CommandLine", "HashSet", "Set"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of deprecated options in the DefaultParser."}, {"name": "testLongOptionQuoteHandlingWithoutStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with quotes without stripping them."}, {"name": "testLongOptionQuoteHandlingWithStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with quotes with stripping them."}, {"name": "testLongOptionWithEqualsQuoteHandling", "primary_tested": ["DefaultParser.parse(Options, String[])"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with equals and quotes."}, {"name": "testLongOptionWithEqualsQuoteHandlingWithoutStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with equals and quotes without stripping them."}, {"name": "testLongOptionWithEqualsQuoteHandlingWithStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with equals and quotes with stripping them."}, {"name": "testShortOptionConcatenatedQuoteHandling", "primary_tested": ["DefaultParser.parse(Options, String[])"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of short options concatenated with quotes."}, {"name": "testShortOptionQuoteHandlingWithoutStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of short options with quotes without stripping them."}, {"name": "testShortOptionQuoteHandlingWithStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of short options with quotes with stripping them."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "testclass_name": "BugCLI162Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.sql.ParameterMetaData;", "import java.sql.Types;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionGroup;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI162Test", "description": "Tests for the HelpFormatter class in the Apache Commons CLI library, focusing on handling long lines and infinite loops in help text generation.", "class_members": {"variables": [{"name": "CR", "type": "static final String"}, {"name": "OPT", "type": "static final String"}, {"name": "OPT_COLUMN_NAMES", "type": "static final String"}, {"name": "OPT_CONNECTION", "type": "static final String"}, {"name": "OPT_DESCRIPTION", "type": "static final String"}, {"name": "OPT_DRIVER", "type": "static final String"}, {"name": "OPT_DRIVER_INFO", "type": "static final String"}, {"name": "OPT_FILE_BINDING", "type": "static final String"}, {"name": "OPT_FILE_JDBC", "type": "static final String"}, {"name": "OPT_FILE_SFMD", "type": "static final String"}, {"name": "OPT_HELP", "type": "static final String"}, {"name": "OPT_HELP_LONG", "type": "static final String"}, {"name": "OPT_INTERACTIVE", "type": "static final String"}, {"name": "OPT_JDBC_TO_SFMD", "type": "static final String"}, {"name": "OPT_JDBC_TO_SFMD_L", "type": "static final String"}, {"name": "OPT_METADATA", "type": "static final String"}, {"name": "OPT_PARAM_MODES_INT", "type": "static final String"}, {"name": "OPT_PARAM_MODES_NAME", "type": "static final String"}, {"name": "OPT_PARAM_NAMES", "type": "static final String"}, {"name": "OPT_PARAM_TYPES_INT", "type": "static final String"}, {"name": "OPT_PARAM_TYPES_NAME", "type": "static final String"}, {"name": "OPT_PASSWORD", "type": "static final String"}, {"name": "OPT_PASSWORD_L", "type": "static final String"}, {"name": "OPT_SQL", "type": "static final String"}, {"name": "OPT_SQL_L", "type": "static final String"}, {"name": "OPT_STACK_TRACE", "type": "static final String"}, {"name": "OPT_TIMING", "type": "static final String"}, {"name": "OPT_TRIM_L", "type": "static final String"}, {"name": "OPT_USER", "type": "static final String"}, {"name": "OPT_WRITE_TO_FILE", "type": "static final String"}, {"name": "PMODE_IN", "type": "static final String"}, {"name": "PMODE_INOUT", "type": "static final String"}, {"name": "PMODE_OUT", "type": "static final String"}, {"name": "PMODE_UNK", "type": "static final String"}, {"name": "PMODES", "type": "static final String"}, {"name": "EXPECTED", "type": "static final String"}, {"name": "formatter", "type": "HelpFormatter"}, {"name": "sw", "type": "StringWriter"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testInfiniteLoop", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of infinite loops in the HelpFormatter's printHelp method."}, {"name": "testLongLineChunking", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the HelpFormatter's ability to chunk long lines in the help text."}, {"name": "testLongLineChunkingIndentIgnored", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the HelpFormatter's handling of long lines with ignored indentation in the help text."}, {"name": "testPrintHelpLongLines", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter", "Option", "OptionGroup", "Types", "ParameterMetaData"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the HelpFormatter's handling of long lines in the help text with various options and option groups."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionsTest.java", "testclass_name": "OptionsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "OptionsTest", "description": "Unit tests for the Options class in the Apache Commons CLI library, focusing on various functionalities like adding options, handling conflicts, and testing deprecated options.", "class_members": {"variables": [], "methods": [{"name": "assertToStrings", "signature": "void assertToStrings(Option option)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddConflictingOptions", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests the addition of conflicting options to an Options object, expecting an IllegalArgumentException."}, {"name": "testAddNonConflictingOptions", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "Arrays", "HashSet"], "class_members": []}, "category": "unit", "description": "Tests the addition of non-conflicting options to an Options object, ensuring the correct options and groups are added."}, {"name": "testAddOptions", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the addition of options to an Options object, ensuring the correct options and groups are added."}, {"name": "testAddOptions2X", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests the addition of options to an Options object, expecting an IllegalArgumentException due to self-addition."}, {"name": "testDeprecated", "primary_tested": ["Option.toString()", "Option.toDeprecatedString()"], "associated_methods": ["OptionsTest.assertToStrings(Option)"], "external_dependencies": {"modules": ["Options", "Option", "DeprecatedAttributes"], "class_members": [{"name": "assertToStrings", "type": "method"}]}, "category": "unit", "description": "Tests the handling of deprecated options, ensuring the correct string representations are returned."}, {"name": "testDuplicateLong", "primary_tested": ["Options.addOption(String, String, boolean, String)"], "associated_methods": ["OptionsTest.assertToStrings(Option)"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "assertToStrings", "type": "method"}]}, "category": "unit", "description": "Tests the addition of options with duplicate long names, ensuring the last added option description is retained."}, {"name": "testDuplicateSimple", "primary_tested": ["Options.addOption(String, boolean, String)"], "associated_methods": ["OptionsTest.assertToStrings(Option)"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "assertToStrings", "type": "method"}]}, "category": "unit", "description": "Tests the addition of options with duplicate simple names, ensuring the last added option description is retained."}, {"name": "testGetMatchingOpts", "primary_tested": ["Options.getMatchingOptions(String)"], "associated_methods": ["OptionsTest.assertToStrings(Option)"], "external_dependencies": {"modules": ["Options", "OptionBuilder"], "class_members": [{"name": "assertToStrings", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of matching options based on a prefix, ensuring the correct options are returned."}, {"name": "testGetOptionsGroups", "primary_tested": ["Options.getOptionGroups()"], "external_dependencies": {"modules": ["Options", "OptionGroup", "OptionBuilder"], "class_members": []}, "category": "unit", "description": "Tests the retrieval of option groups from an Options object, ensuring the correct groups are returned."}, {"name": "testHelpOptions", "primary_tested": ["Options.helpOptions()"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the retrieval of help options from an Options object, ensuring the correct options are returned."}, {"name": "testLong", "primary_tested": ["Options.addOption(String, String, boolean, String)", "Options.hasOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": []}, "category": "unit", "description": "Tests the addition of long options to an Options object, ensuring the options are correctly added and retrievable."}, {"name": "testMissingOptionException", "primary_tested": ["PosixParser.parse(Options, String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "MissingOptionException", "ParseException"], "class_members": []}, "category": "unit", "description": "Tests the handling of missing required options, expecting a MissingOptionException."}, {"name": "testMissingOptionsException", "primary_tested": ["PosixParser.parse(Options, String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "MissingOptionException", "ParseException"], "class_members": []}, "category": "unit", "description": "Tests the handling of multiple missing required options, expecting a MissingOptionException."}, {"name": "testSimple", "primary_tested": ["Options.addOption(String, boolean, String)", "Options.hasOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": []}, "category": "unit", "description": "Tests the addition of simple options to an Options object, ensuring the options are correctly added and retrievable."}, {"name": "testToString", "primary_tested": ["Options.toString()"], "external_dependencies": {"modules": ["Options"], "class_members": []}, "category": "unit", "description": "Tests the string representation of an Options object, ensuring the correct options are included."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "testclass_name": "OptionGroupTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroupTest", "description": "Unit tests for the OptionGroup class in the Apache Commons CLI library.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetNames", "primary_tested": ["OptionGroup.isSelected()", "OptionGroup.getNames()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "OptionBuilder"]}, "category": "unit", "description": "Tests the functionality of retrieving option names from an OptionGroup."}, {"name": "testNoOptionsExtraArgs", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when no options are provided and extra arguments are present."}, {"name": "testSingleLongOption", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single long option (--file) is provided."}, {"name": "testSingleOption", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single option (-r) is provided."}, {"name": "testSingleOptionFromGroup", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single option (-f) from a group is provided."}, {"name": "testToString", "primary_tested": ["OptionGroup.toString()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option"]}, "category": "unit", "description": "Tests the toString method of the OptionGroup class."}, {"name": "testTwoLongOptionsFromGroup", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Parser", "AlreadySelectedException"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two long options from the same group are provided, expecting an AlreadySelectedException."}, {"name": "testTwoOptionsFromDifferentGroup", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two options from different groups are provided."}, {"name": "testTwoOptionsFromGroup", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Parser", "AlreadySelectedException"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two options from the same group are provided, expecting an AlreadySelectedException."}, {"name": "testTwoOptionsFromGroupWithProperties", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "Parser", "Properties"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when an option from a group is provided with properties, expecting the other option from the group to be ignored."}, {"name": "testTwoValidLongOptions", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two valid long options are provided."}, {"name": "testTwoValidOptions", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two valid options are provided."}, {"name": "testValidLongOnlyOptions", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when valid long-only options (--export and --import) are provided."}]}, {"file_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "testclass_name": "GnuParserTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "GnuParserTest", "description": "Test class for GnuParser, extending AbstractParserTestCase. Contains tests for various parsing scenarios, most of which are disabled due to unsupported features by GnuParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testAmbiguousLongWithoutEqualSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for ambiguous long option without equal single dash, disabled due to unsupported feature by GnuParser."}, {"name": "testAmbiguousLongWithoutEqualSingleDash2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for ambiguous long option without equal single dash, disabled due to unsupported feature by GnuParser."}, {"name": "testAmbiguousPartialLongOption1", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for ambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testAmbiguousPartialLongOption2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for ambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testAmbiguousPartialLongOption3", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for ambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testAmbiguousPartialLongOption4", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for ambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for bursting, disabled due to unsupported feature by GnuParser."}, {"name": "testDoubleDash2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for double dash, disabled due to unsupported feature by GnuParser."}, {"name": "testLongWithoutEqualSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for long option without equal single dash, disabled due to unsupported feature by GnuParser."}, {"name": "testLongWithUnexpectedArgument1", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for long option with unexpected argument, disabled due to unsupported feature by GnuParser."}, {"name": "testLongWithUnexpectedArgument2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for long option with unexpected argument, disabled due to unsupported feature by GnuParser."}, {"name": "testMissingArgWithBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for missing argument with bursting, disabled due to unsupported feature by GnuParser."}, {"name": "testNegativeOption", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for negative option, disabled due to unsupported feature by GnuParser."}, {"name": "testPartialLongOptionSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for partial long option with single dash, disabled due to unsupported feature by GnuParser."}, {"name": "testShortWithUnexpectedArgument", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for short option with unexpected argument, disabled due to unsupported feature by GnuParser."}, {"name": "testStopBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for stopping bursting, disabled due to unsupported feature by GnuParser."}, {"name": "testStopBursting2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for stopping bursting, disabled due to unsupported feature by GnuParser."}, {"name": "testUnambiguousPartialLongOption1", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for unambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testUnambiguousPartialLongOption2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for unambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testUnambiguousPartialLongOption3", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for unambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testUnambiguousPartialLongOption4", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for unambiguous partial long option, disabled due to unsupported feature by GnuParser."}, {"name": "testUnrecognizedOptionWithBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test for unrecognized option with bursting, disabled due to unsupported feature by GnuParser."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionTest.java", "testclass_name": "OptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import org.junit.jupiter.api.Test;"], "name": "OptionTest", "description": "Unit tests for the Option class in the Apache Commons CLI library.", "class_members": {"variables": [], "methods": [{"name": "checkOption", "signature": "void checkOption(Option, String, String, String, int, String, boolean, boolean, char, Class<?>, String, Boolean, String)"}, {"name": "roundTrip", "signature": "Option roundTrip(Option) throws IOException, ClassNotFoundException"}], "nested_classes": [{"name": "DefaultOption", "description": "Internal subclass of Option with a default value."}, {"name": "TestOption", "description": "Internal subclass of Option for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAddValue", "primary_tested": ["Option.addValue(String)", "Option.processValue(String)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the addValue and processValue methods of the Option class, expecting exceptions."}, {"name": "testBuilderEmpty", "primary_tested": ["Option.builder().build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with insufficient parameters, expecting an exception."}, {"name": "testBuilderInsufficientParams1", "primary_tested": ["Option.builder().desc(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with insufficient parameters, expecting an exception."}, {"name": "testBuilderInsufficientParams2", "primary_tested": ["Option.builder(null).desc(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with insufficient parameters, expecting an exception."}, {"name": "testBuilderInvalidOptionName0", "primary_tested": ["Option.builder().option(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with invalid option names, expecting exceptions."}, {"name": "testBuilderInvalidOptionName1", "primary_tested": ["Option.builder().option(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with invalid option names, expecting exceptions."}, {"name": "testBuilderInvalidOptionName2", "primary_tested": ["Option.builder().option(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with invalid option names, expecting exceptions."}, {"name": "testBuilderInvalidOptionName3", "primary_tested": ["Option.builder(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with invalid option names, expecting exceptions."}, {"name": "testBuilderInvalidOptionName4", "primary_tested": ["Option.builder(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class with invalid option names, expecting exceptions."}, {"name": "testBuilderMethods", "primary_tested": ["Option.builder().build()"], "associated_methods": ["Option.getOpt()", "Option.getDescription()", "Option.getLongOpt()", "Option.getArgs()", "Option.getArgName()", "Option.isRequired()", "Option.hasOptionalArg()", "Option.hasArg()", "Option.acceptsArg()", "Option.getValueSeparator()", "Option.getType()", "Option.getDeprecated().getDescription()", "Option.getDeprecated().isForRemoval()", "Option.getDeprecated().getSince()"], "external_dependencies": {"modules": ["Option", "DeprecatedAttributes"], "class_members": [{"name": "checkOption", "type": "method"}]}, "category": "unit", "description": "Tests various configurations of the Option builder methods."}, {"name": "testClear", "primary_tested": ["TestOption.clearValues()"], "associated_methods": ["TestOption.getValuesList()", "TestOption.addValue(String)"], "external_dependencies": {"modules": ["TestOption"], "class_members": []}, "category": "unit", "description": "Tests the clearValues method of the TestOption class."}, {"name": "testClone", "primary_tested": ["TestOption.clone()"], "associated_methods": ["TestOption.getDescription()", "TestOption.setDescription(String)", "TestOption.setArgs(int)", "TestOption.addValue(String)", "TestOption.getArgs()", "TestOption.getValuesList()", "TestOption.getValues()"], "external_dependencies": {"modules": ["TestOption"], "class_members": []}, "category": "unit", "description": "Tests the clone method of the TestOption class."}, {"name": "testEquals", "primary_tested": ["Option.equals(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the equals method of the Option class."}, {"name": "testGetValue", "primary_tested": ["Option.getValue(String)", "Option.getValue(int)", "Option.getValue()"], "associated_methods": ["Option.setArgs(int)", "Option.processValue(String)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the getValue methods of the Option class."}, {"name": "testHasArgName", "primary_tested": ["Option.hasArgName()"], "associated_methods": ["Option.setArgName(String)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the hasArgName method of the Option class."}, {"name": "testHasArgs", "primary_tested": ["Option.hasArgs()"], "associated_methods": ["Option.setArgs(int)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the hasArgs method of the Option class."}, {"name": "testHashCode", "primary_tested": ["Option.hashCode()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the hashCode method of the Option class."}, {"name": "testSerialization", "primary_tested": ["Option.getConverter()"], "associated_methods": ["Option.setConverter(Converter)"], "external_dependencies": {"modules": ["Option", "Converter", "TypeHandlerTest.Instantiable"], "class_members": [{"name": "roundTrip", "type": "method"}]}, "category": "unit", "description": "Tests the serialization and deserialization of the Option class."}, {"name": "testSubclass", "primary_tested": ["DefaultOption.clone()"], "associated_methods": ["DefaultOption.getValue()"], "external_dependencies": {"modules": ["DefaultOption"], "class_members": []}, "category": "unit", "description": "Tests the clone method of the DefaultOption subclass."}, {"name": "testTypeClass", "primary_tested": ["Option.getType()"], "associated_methods": ["Option.setType(Class<?>)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the getType and setType methods of the Option class with Class<?> type."}, {"name": "testTypeObject", "primary_tested": ["Option.getType()"], "associated_methods": ["Option.setType(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the getType and setType methods of the Option class with Object type."}]}, {"file_path": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "testclass_name": "CommandLineTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.Properties;", "import java.util.function.Supplier;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "CommandLineTest", "description": "Unit tests for CommandLine operations and functionalities.", "class_members": {"variables": [], "methods": [{"name": "asChar", "signature": "char asChar(Option opt)"}, {"name": "assertWritten", "signature": "void assertWritten(boolean optDep, ByteArrayOutputStream baos)"}, {"name": "checkHandler", "signature": "void checkHandler(boolean optDep, List<Option> handler, Option opt)"}], "nested_classes": [{"name": "Count", "description": "Enum for counting values"}]}, "fixtures": [], "test_cases": [{"name": "getOptionValuesTest", "primary_tested": ["CommandLine.getOptionValues(char)", "CommandLine.getOptionValues(String)", "CommandLine.getOptionValues(Option)", "CommandLine.getOptionValues(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of option values with and without default values, ensuring deprecated options report as deprecated only once."}, {"name": "getOptionValueTest", "primary_tested": ["CommandLine.getOptionValue(char)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(Option)", "CommandLine.getOptionValue(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of option values with and without default values, ensuring deprecated options report as deprecated only once."}, {"name": "getParsedOptionValueTest", "primary_tested": ["CommandLine.getParsedOptionValue(char)", "CommandLine.getParsedOptionValue(String)", "CommandLine.getParsedOptionValue(Option)", "CommandLine.getParsedOptionValue(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of parsed option values with and without default values, ensuring deprecated options report as deprecated only once."}, {"name": "hasOptionNoDeprecationHandlerTest", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.hasOption(String)", "CommandLine.hasOption(Option)", "CommandLine.hasOption(OptionGroup)"], "associated_methods": ["CommandLineTest.assertWritten(boolean, ByteArrayOutputStream)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "assertWritten", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasOption method calls without a deprecation handler, ensuring deprecated options are handled correctly."}, {"name": "hasOptionNullDeprecationHandlerTest", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.hasOption(String)", "CommandLine.hasOption(Option)", "CommandLine.hasOption(OptionGroup)"], "associated_methods": ["CommandLineTest.assertWritten(boolean, ByteArrayOutputStream)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "assertWritten", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasOption method calls with a null deprecation handler, ensuring deprecated options are handled correctly."}, {"name": "hasOptionTest", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.hasOption(String)", "CommandLine.hasOption(Option)", "CommandLine.hasOption(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasOption method calls, ensuring deprecated options are handled correctly."}, {"name": "noDeprecationHandlerTest", "primary_tested": ["CommandLine.getOptionValue(char)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(Option)", "CommandLine.getOptionValue(OptionGroup)"], "associated_methods": ["CommandLineTest.assertWritten(boolean, ByteArrayOutputStream)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "assertWritten", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of option values without a deprecation handler, ensuring deprecated options are handled correctly."}, {"name": "testBadGetParsedOptionValue", "primary_tested": ["CommandLine.getParsedOptionValue(String)"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "CommandLineParser", "DefaultParser", "ParseException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of bad input for getParsedOptionValue, ensuring appropriate exceptions are thrown."}, {"name": "testBuilder", "primary_tested": ["CommandLine.Builder.addArg(String)", "CommandLine.Builder.addOption(Option)", "CommandLine.Builder.build()"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Option"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the CommandLine.Builder functionality, ensuring arguments and options are added correctly."}, {"name": "testBuilderNullArgs", "primary_tested": ["CommandLine.Builder.addArg(String)", "CommandLine.Builder.addOption(Option)", "CommandLine.Builder.build()"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Option"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the CommandLine.Builder functionality with null arguments, ensuring they are handled correctly."}, {"name": "testBuilderNullOption", "primary_tested": ["CommandLine.Builder.addArg(String)", "CommandLine.Builder.addOption(Option)", "CommandLine.Builder.build()"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Option"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the CommandLine.Builder functionality with null options, ensuring they are handled correctly."}, {"name": "testGetOptionProperties", "primary_tested": ["CommandLine.getOptionProperties(String)"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "Parser", "GnuParser", "ParseException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of option properties, ensuring they are parsed and returned correctly."}, {"name": "testGetOptionPropertiesWithOption", "primary_tested": ["CommandLine.getOptionProperties(Option)"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "Parser", "GnuParser", "ParseException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of option properties with an Option object, ensuring they are parsed and returned correctly."}, {"name": "testGetOptionsBuilder", "primary_tested": ["CommandLine.getOptions()"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Option"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of options from a CommandLine instance created with the Builder, ensuring options are managed correctly."}, {"name": "testGetOptionsCtor", "primary_tested": ["CommandLine.getOptions()"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Option"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of options from a CommandLine instance created with the default constructor, ensuring options are managed correctly."}, {"name": "testNullOption", "primary_tested": ["CommandLine.getOptionValue(Option)", "CommandLine.getParsedOptionValue(Option)", "CommandLine.getOptionValue(OptionGroup)", "CommandLine.getParsedOptionValue(OptionGroup)"], "associated_methods": [], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "CommandLineParser", "DefaultParser", "ParseException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of null options, ensuring null values are returned as expected."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ValueTest.java", "testclass_name": "ValueTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;"]}, {"file_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "testclass_name": "HelpFormatterTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.mockito.Mockito.spy;", "import static org.mockito.Mockito.when;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.OutputStreamWriter;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.io.UncheckedIOException;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.stream.Stream;", "import org.apache.commons.cli.HelpFormatter.Builder;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"]}, {"file_path": "src/test/java/org/apache/commons/cli/Option_hashCodeTest.java", "testclass_name": "Option_hashCodeTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Option_hashCodeTest", "description": "Unit tests for the hashCode method of the Option class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["Option.hashCode()"], "external_dependencies": {"modules": ["Option"]}, "category": "unit", "description": "Tests the hashCode method of the Option class to ensure consistency and correctness."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Option_addValueTest.java", "testclass_name": "Option_addValueTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "Option_addValueTest", "description": "Unit test for the addValue method of the Option class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddValue", "primary_tested": ["Option.addValue(String)"], "external_dependencies": {"modules": ["Option", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that calling addValue on an Option instance throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueClassTest.java", "testclass_name": "PatternOptionBuilder_getValueClassTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PatternOptionBuilder_getValueClassTest", "description": "Unit tests for the getValueClass method in PatternOptionBuilder.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetValueClass", "primary_tested": ["PatternOptionBuilder.getValueClass(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueClass method in PatternOptionBuilder for various characters and verifies the expected return values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilder_withDescriptionTest.java", "testclass_name": "OptionBuilder_withDescriptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilder_withDescriptionTest", "description": "Unit test for the withDescription method in OptionBuilder.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testWithDescription", "primary_tested": ["OptionBuilder.withDescription(String)"], "associated_methods": ["OptionBuilder.create(char)", "Option.getDescription()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the functionality of setting a description using OptionBuilder and verifying it in the created Option."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilder_hasArgsTest.java", "testclass_name": "OptionBuilder_hasArgsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilder_hasArgsTest", "description": "Unit test for the hasArgs method of the OptionBuilder class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHasArgs", "primary_tested": ["OptionBuilder.hasArgs()"], "associated_methods": ["OptionBuilder.create(char)", "Option.getArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasArgs method of the OptionBuilder class to ensure it correctly sets the number of arguments to unlimited."}]}, {"file_path": "src/test/java/org/apache/commons/cli/TypeHandler_createNumberTest.java", "testclass_name": "TypeHandler_createNumberTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "TypeHandler_createNumberTest", "description": "Unit tests for the TypeHandler.createNumber method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateNumberValid", "primary_tested": ["TypeHandler.createNumber(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the creation of a valid number using TypeHandler.createNumber."}, {"name": "testCreateNumberInvalid", "primary_tested": ["TypeHandler.createNumber(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the handling of an invalid number input in TypeHandler.createNumber, expecting a ParseException."}]}, {"file_path": "src/test/java/org/apache/commons/cli/TypeHandler_createObjectTest.java", "testclass_name": "TypeHandler_createObjectTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "TypeHandler_createObjectTest", "description": "Unit tests for the TypeHandler.createObject method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateObjectSuccess", "primary_tested": ["TypeHandler.createObject(String)"], "external_dependencies": {"modules": ["TypeHandler", "String"]}, "category": "unit", "description": "Tests the successful creation of an object using TypeHandler.createObject."}, {"name": "testCreateObjectFailure", "primary_tested": ["TypeHandler.createObject(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the failure case of creating an object with a non-existent class using TypeHandler.createObject."}]}, {"file_path": "src/test/java/org/apache/commons/cli/HelpFormatter_getDescriptionTest.java", "testclass_name": "HelpFormatter_getDescriptionTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "HelpFormatter_getDescriptionTest", "description": "Unit tests for the HelpFormatter.getDescription method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetDescriptionWithNonNullDescription", "primary_tested": ["HelpFormatter.getDescription(Option)"], "external_dependencies": {"modules": ["Option", "HelpFormatter"]}, "category": "unit", "description": "Tests the HelpFormatter.getDescription method with a non-null description."}, {"name": "testGetDescriptionWithNullDescription", "primary_tested": ["HelpFormatter.getDescription(Option)"], "external_dependencies": {"modules": ["Option", "HelpFormatter"]}, "category": "unit", "description": "Tests the HelpFormatter.getDescription method with a null description."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilder_withLongOptTest.java", "testclass_name": "OptionBuilder_withLongOptTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilder_withLongOptTest", "description": "Unit test for the OptionBuilder.withLongOpt method.", "class_members": {"variables": [{"name": "longOpt", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testWithLongOpt", "primary_tested": ["OptionBuilder.withLongOpt(String)"], "associated_methods": ["OptionBuilder.create()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"], "class_members": [{"name": "longOpt", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of setting a long option using OptionBuilder.withLongOpt and verifying it with Option.getLongOpt."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java", "testclass_name": "OptionBuilder_hasOptionalArgTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilder_hasOptionalArgTest", "description": "Test for the hasOptionalArg method in OptionBuilder.", "class_members": {"variables": [{"name": "optionBuilder", "type": "OptionBuilder"}]}, "test_cases": [{"name": "testHasOptionalArg", "primary_tested": ["OptionBuilder.hasOptionalArg()"], "associated_methods": ["OptionBuilder.create(String)", "Option.hasOptionalArg()", "Option.getArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"], "class_members": [{"name": "optionBuilder", "type": "variable"}]}, "category": "unit", "description": "Tests the hasOptionalArg method of OptionBuilder to ensure it correctly sets the option to have an optional argument."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilder_withArgNameTest.java", "testclass_name": "OptionBuilder_withArgNameTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilder_withArgNameTest", "description": "Unit test for the withArgName method in OptionBuilder.", "class_members": {"variables": [{"name": "argName", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testWithArgName", "primary_tested": ["OptionBuilder.withArgName(String)"], "associated_methods": ["OptionBuilder.create(String)", "Option.getArgName()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"], "class_members": [{"name": "argName", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of setting and retrieving the argument name using OptionBuilder."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java", "testclass_name": "OptionGroup_addOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroup_addOptionTest", "description": "Unit tests for the addOption method of the OptionGroup class.", "class_members": {"variables": [{"name": "optionGroup", "type": "OptionGroup"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddOption", "primary_tested": ["OptionGroup.addOption(Option)"], "associated_methods": ["OptionGroup.getNames()"], "external_dependencies": {"modules": ["OptionGroup", "Option"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of an option to the OptionGroup and verifies the presence and count of the added option."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroup_getNamesTest.java", "testclass_name": "OptionGroup_getNamesTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroup_getNamesTest", "description": "Unit tests for the getNames method of the OptionGroup class.", "class_members": {"variables": [{"name": "optionGroup", "type": "OptionGroup"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetNames", "primary_tested": ["OptionGroup.getNames()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "OptionBuilder"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getNames method of the OptionGroup class to ensure it returns the correct collection of option names."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroup_getOptionsTest.java", "testclass_name": "OptionGroup_getOptionsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroup_getOptionsTest", "description": "Unit tests for the getOptions method of the OptionGroup class.", "class_members": {"variables": [{"name": "optionGroup", "type": "OptionGroup"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetOptions", "primary_tested": ["OptionGroup.getOptions()"], "associated_methods": ["OptionGroup.isSelected()", "OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option", "OptionBuilder"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getOptions method of the OptionGroup class, ensuring it returns the correct collection of options."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java", "testclass_name": "OptionBuilder_createTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilder_createTest", "description": "Unit tests for the create method in OptionBuilder class.", "test_cases": [{"name": "testCreateWithLongOpt", "primary_tested": ["OptionBuilder.create()"], "associated_methods": ["OptionBuilder.withLongOpt(String)", "OptionBuilder.withDescription(String)", "Option.getLongOpt()", "Option.getDescription()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the creation of an Option with a long option and description."}, {"name": "testCreateWithoutLongOpt", "primary_tested": ["OptionBuilder.create()"], "external_dependencies": {"modules": ["OptionBuilder"]}, "category": "unit", "description": "Tests the creation of an Option without a long option, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "testclass_name": "TypeHandler_createValueTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.net.MalformedURLException;", "import java.net.URL;", "import org.junit.jupiter.api.Test;"], "name": "TypeHandler_createValueTest", "description": "Unit tests for the TypeHandler.createValue method, specifically for handling URL creation.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateValueSuccess", "primary_tested": ["TypeHandler.createValue(String,Class)"], "external_dependencies": {"modules": ["TypeHandler", "URL", "ParseException", "MalformedURLException"]}, "category": "unit", "description": "Tests the successful creation of a URL using TypeHandler.createValue."}, {"name": "testCreateValueThrowsParseException", "primary_tested": ["TypeHandler.createValue(String,Class)"], "external_dependencies": {"modules": ["TypeHandler", "URL", "ParseException"]}, "category": "unit", "description": "Tests that TypeHandler.createValue throws a ParseException when given an invalid URL."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java", "testclass_name": "ParseException_wrapTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "ParseException_wrapTest", "description": "Unit tests for the ParseException.wrap method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testWrapWithUnsupportedOperationException", "primary_tested": ["ParseException.wrap(Exception)"], "external_dependencies": {"modules": ["UnsupportedOperationException", "ParseException"]}, "category": "unit", "description": "Tests that ParseException.wrap correctly wraps an UnsupportedOperationException."}, {"name": "testWrapWithParseException", "primary_tested": ["ParseException.wrap(Exception)"], "external_dependencies": {"modules": ["ParseException"]}, "category": "unit", "description": "Tests that ParseException.wrap returns the same ParseException instance when given a ParseException."}, {"name": "testWrapWithOtherException", "primary_tested": ["ParseException.wrap(Exception)"], "external_dependencies": {"modules": ["IllegalArgumentException", "ParseException"]}, "category": "unit", "description": "Tests that ParseException.wrap correctly wraps an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java", "testclass_name": "HelpFormatter_printUsageTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "HelpFormatter_printUsageTest", "description": "Unit tests for the printUsage method of the HelpFormatter class.", "class_members": {"variables": [{"name": "helpFormatter", "type": "HelpFormatter"}, {"name": "stringWriter", "type": "StringWriter"}, {"name": "printWriter", "type": "PrintWriter"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPrintUsage", "primary_tested": ["HelpFormatter.printUsage(PrintWriter,int,String)"], "external_dependencies": {"modules": ["HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "helpFormatter", "type": "variable"}, {"name": "stringWriter", "type": "variable"}, {"name": "printWriter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the printUsage method of the HelpFormatter to ensure it correctly formats and prints the usage message."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Option_getValueTest.java", "testclass_name": "Option_getValueTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Option_getValueTest", "description": "Unit tests for the getValue method of the Option class in the Apache Commons CLI library.", "class_members": {"variables": [{"name": "option", "type": "Option"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValueWithDefaultValue", "primary_tested": ["Option.getValue(String)"], "external_dependencies": {"modules": ["Option"], "class_members": [{"name": "option", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValue method of the Option class when a default value is provided and no values are set."}, {"name": "testGetValueWithPopulatedValues", "primary_tested": ["Option.getValue(String)"], "associated_methods": ["Option.processValue(String)"], "external_dependencies": {"modules": ["Option"], "class_members": [{"name": "option", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValue method of the Option class when values are already populated."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Option_setTypeTest.java", "testclass_name": "Option_setTypeTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Option_setTypeTest", "description": "Unit tests for the setType method of the Option class.", "class_members": {"variables": [{"name": "option", "type": "Option"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetTypeWithClass", "primary_tested": ["Option.setType(Class)"], "associated_methods": ["Option.getType()"], "external_dependencies": {"modules": ["Option", "Integer"], "class_members": [{"name": "option", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the type of the Option using a Class object."}, {"name": "testSetTypeWithObject", "primary_tested": ["Option.setType(Object)"], "associated_methods": ["Option.getType()"], "external_dependencies": {"modules": ["Option", "Integer"], "class_members": [{"name": "option", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the type of the Option using an Object."}]}, {"file_path": "src/test/java/org/apache/commons/cli/TypeHandler_getConverterTest.java", "testclass_name": "TypeHandler_getConverterTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.nio.file.Path;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TypeHandler_getConverterTest", "description": "Unit tests for the TypeHandler's getConverter method.", "class_members": {"variables": [{"name": "typeHandler", "type": "TypeHandler"}, {"name": "converterMap", "type": "Map<Class<?>, Converter<?, ? extends Throwable>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetConverterExisting", "primary_tested": ["TypeHandler.getConverter(Class<? extends Path>)"], "external_dependencies": {"modules": ["TypeHandler", "Converter", "Path"], "class_members": [{"name": "typeHandler", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of an existing converter for the Path class."}, {"name": "testGetConverterDefault", "primary_tested": ["TypeHandler.getConverter(Class<? extends String>)"], "external_dependencies": {"modules": ["TypeHandler", "Converter", "String"], "class_members": [{"name": "typeHandler", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the default converter for the String class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_addOptionsTest.java", "testclass_name": "Options_addOptionsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Options_addOptionsTest", "description": "Unit tests for the addOptions method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddOptionsSuccess", "primary_tested": ["Options.addOptions(Options)"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "Options.hasOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of options to the Options object."}, {"name": "testAddOptionsDuplicateKey", "primary_tested": ["Options.addOptions(Options)"], "associated_methods": ["Options.addOption(String,String,boolean,String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of duplicate keys when adding options to the Options object, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "testclass_name": "DeprecatedAttributes_toStringTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "DeprecatedAttributes_toStringTest", "description": "Unit tests for the toString method of DeprecatedAttributes class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToStringWithAllAttributes", "primary_tested": ["DeprecatedAttributes.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method with all attributes set."}, {"name": "testToStringWithForRemovalOnly", "primary_tested": ["DeprecatedAttributes.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method with only the forRemoval attribute set."}, {"name": "testToStringWithSinceOnly", "primary_tested": ["DeprecatedAttributes.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method with only the since attribute set."}, {"name": "testToStringWithDescriptionOnly", "primary_tested": ["DeprecatedAttributes.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method with only the description attribute set."}, {"name": "testToStringWithNoAttributes", "primary_tested": ["DeprecatedAttributes.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method with no attributes set."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_hasShortOptionTest.java", "testclass_name": "Options_hasShortOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Options_hasShortOptionTest", "description": "Unit tests for the hasShortOption method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasShortOption_ExistingOption", "primary_tested": ["Options.hasShortOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasShortOption method for an existing short option."}, {"name": "testHasShortOption_NonExistingOption", "primary_tested": ["Options.hasShortOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasShortOption method for a non-existing short option."}, {"name": "testHasShortOption_WithLeadingHyphens", "primary_tested": ["Options.hasShortOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasShortOption method with leading hyphens in the option name."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java", "testclass_name": "Options_addOptionGroupTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Options_addOptionGroupTest", "description": "Unit tests for adding OptionGroup to Options with required and non-required groups.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddOptionGroupWithRequiredGroup", "primary_tested": ["Options.addOptionGroup(OptionGroup)"], "associated_methods": ["OptionGroup.setRequired(boolean)", "OptionGroup.addOption(Option)", "Options.getRequiredOptions()", "Option.isRequired()", "Options.getOptionGroup(Option)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a required OptionGroup to Options and verifies the group is marked as required and options are not individually required."}, {"name": "testAddOptionGroupWithNonRequiredGroup", "primary_tested": ["Options.addOptionGroup(OptionGroup)"], "associated_methods": ["OptionGroup.setRequired(boolean)", "OptionGroup.addOption(Option)", "Options.getRequiredOptions()", "Option.isRequired()", "Options.getOptionGroup(Option)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a non-required OptionGroup to Options and verifies the group is not marked as required and options are not individually required."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "testclass_name": "Options_getOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Options_getOptionTest", "description": "Unit tests for the getOption method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetOptionShort", "primary_tested": ["Options.getOption(String)"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "Option.getOpt()"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a short option from the Options."}, {"name": "testGetOptionLong", "primary_tested": ["Options.getOption(String)"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "Option.getLongOpt()"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a long option from the Options."}, {"name": "testGetOptionNonexistent", "primary_tested": ["Options.getOption(String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a nonexistent option from the Options, expecting a null result."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_getMatchingOptionsTest.java", "testclass_name": "Options_getMatchingOptionsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Collections;", "import java.util.List;"], "name": "Options_getMatchingOptionsTest", "description": "Unit tests for the getMatchingOptions method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetMatchingOptionsExactMatch", "primary_tested": ["Options.getMatchingOptions(String)"], "external_dependencies": {"modules": ["Options", "Collections"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getMatchingOptions method for an exact match."}, {"name": "testGetMatchingOptionsPartialMatch", "primary_tested": ["Options.getMatchingOptions(String)"], "external_dependencies": {"modules": ["Options", "Collections"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getMatchingOptions method for a partial match."}, {"name": "testGetMatchingOptionsNoMatch", "primary_tested": ["Options.getMatchingOptions(String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getMatchingOptions method for no match."}, {"name": "testGetMatchingOptionsLeadingHyphens", "primary_tested": ["Options.getMatchingOptions(String)"], "external_dependencies": {"modules": ["Options", "Collections"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getMatchingOptions method with leading hyphens."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java", "testclass_name": "Options_addRequiredOptionTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Options_addRequiredOptionTest", "description": "Unit tests for the addRequiredOption method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddRequiredOption", "primary_tested": ["Options.addRequiredOption(String,String,boolean,String)"], "associated_methods": ["Options.hasOption(String)", "Options.hasLongOption(String)", "Options.getOption(String)", "Option.isRequired()", "Option.getDescription()"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a required option with an argument."}, {"name": "testAddRequiredOptionWithoutArgument", "primary_tested": ["Options.addRequiredOption(String,String,boolean,String)"], "associated_methods": ["Options.hasOption(String)", "Options.hasLongOption(String)", "Options.getOption(String)", "Option.isRequired()", "Option.hasArg()", "Option.getDescription()"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a required option without an argument."}, {"name": "testAddRequiredOptionWithLongOptOnly", "primary_tested": ["Options.addRequiredOption(String,String,boolean,String)"], "associated_methods": ["Options.hasOption(String)", "Options.hasLongOption(String)", "Options.getOption(String)", "Option.isRequired()", "Option.getDescription()"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a required option with only a long option."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroup_setSelectedTest.java", "testclass_name": "OptionGroup_setSelectedTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroup_setSelectedTest", "description": "Unit tests for the setSelected method in the OptionGroup class.", "class_members": {"variables": [{"name": "optionGroup", "type": "OptionGroup"}, {"name": "optionA", "type": "Option"}, {"name": "optionB", "type": "Option"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetSelectedWithNullOption", "primary_tested": ["OptionGroup.setSelected(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option", "AlreadySelectedException"], "class_members": [{"name": "optionGroup", "type": "variable"}, {"name": "optionA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setSelected method with a null option to ensure it resets the selected option."}, {"name": "testSetSelectedWithSameOption", "primary_tested": ["OptionGroup.setSelected(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option", "AlreadySelectedException"], "class_members": [{"name": "optionGroup", "type": "variable"}, {"name": "optionA", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setSelected method with the same option to ensure it does not throw an exception."}, {"name": "testSetSelectedWithDifferentOption", "primary_tested": ["OptionGroup.setSelected(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option", "AlreadySelectedException"], "class_members": [{"name": "optionGroup", "type": "variable"}, {"name": "optionA", "type": "variable"}, {"name": "optionB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setSelected method with a different option to ensure it throws an AlreadySelectedException."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "testclass_name": "OptionGroup_toStringTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroup_toStringTest", "description": "Unit tests for the toString method of the OptionGroup class.", "class_members": {"variables": [{"name": "optionGroup", "type": "OptionGroup"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithSingleOption", "primary_tested": ["OptionGroup.toString()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of OptionGroup with a single option."}, {"name": "testToStringWithMultipleOptions", "primary_tested": ["OptionGroup.toString()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of OptionGroup with multiple options."}, {"name": "testToStringWithLongOption", "primary_tested": ["OptionGroup.toString()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of OptionGroup with a long option."}, {"name": "testToStringWithNoOptions", "primary_tested": ["OptionGroup.toString()"], "external_dependencies": {"modules": ["OptionGroup"], "class_members": [{"name": "optionGroup", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of OptionGroup with no options."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "testclass_name": "PatternOptionBuilder_parsePatternTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "PatternOptionBuilder_parsePatternTest", "description": "Unit tests for the parsePattern method in PatternOptionBuilder class.", "class_members": {"variables": [{"name": "pattern", "type": "String"}, {"name": "options", "type": "Options"}]}, "fixtures": [], "test_cases": [{"name": "testParsePatternSingleOption", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options"], "class_members": [{"name": "pattern", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of a single option pattern."}, {"name": "testParsePatternOptionWithType", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options"], "class_members": [{"name": "pattern", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of an option pattern with a specified type."}, {"name": "testParsePatternOptionWithRequired", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options"], "class_members": [{"name": "pattern", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of an option pattern with a required flag."}, {"name": "testParsePatternMultipleOptions", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options"], "class_members": [{"name": "pattern", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "description": "Tests the parsing of multiple option patterns."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "testclass_name": "Option_equalsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Option_equalsTest", "description": "Unit tests for the equals method in the Option class.", "class_members": {"variables": [{"name": "option1", "type": "Option"}, {"name": "option2", "type": "Option"}, {"name": "option3", "type": "Option"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["Option.equals(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": [{"name": "option1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same instance of an Option."}, {"name": "testEqualsDifferentClass", "primary_tested": ["Option.equals(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": [{"name": "option1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing an Option with an object of a different class."}, {"name": "testEqualsDifferentOptions", "primary_tested": ["Option.equals(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": [{"name": "option1", "type": "variable"}, {"name": "option2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing different instances of Option."}, {"name": "testEqualsSameOptions", "primary_tested": ["Option.equals(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": [{"name": "option1", "type": "variable"}, {"name": "option3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing identical instances of Option."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_hasOptionTest.java", "testclass_name": "Options_hasOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Options_hasOptionTest", "description": "Unit tests for the hasOption method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasOptionWithShortOption", "primary_tested": ["Options.hasOption(String)"], "associated_methods": ["Options.addOption(String,String,boolean,String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasOption method with a short option."}, {"name": "testHasOptionWithLongOption", "primary_tested": ["Options.hasOption(String)"], "associated_methods": ["Options.addOption(String,String,boolean,String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasOption method with a long option."}, {"name": "testHasOptionWithNonExistentOption", "primary_tested": ["Options.hasOption(String)"], "associated_methods": ["Options.addOption(String,String,boolean,String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasOption method with a non-existent option."}, {"name": "testHasOptionWithHyphens", "primary_tested": ["Options.hasOption(String)"], "associated_methods": ["Options.addOption(String,String,boolean,String)"], "external_dependencies": {"modules": ["Options"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasOption method with options prefixed by hyphens."}]}, {"file_path": "src/test/java/org/apache/commons/cli/Options_addOptionTest.java", "testclass_name": "Options_addOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Options_addOptionTest", "description": "Unit tests for the addOption method in the Options class.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddOptionWithLongOpt", "primary_tested": ["Options.addOption(Option)"], "associated_methods": ["Options.hasOption(String)", "Options.hasLongOption(String)", "Options.getOption(String)"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an option with a long option name to the Options object and verifies its presence and correctness."}, {"name": "testAddOptionWithoutLongOpt", "primary_tested": ["Options.addOption(Option)"], "associated_methods": ["Options.hasOption(String)", "Options.getOption(String)"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an option without a long option name to the Options object and verifies its presence and correctness."}, {"name": "testAddRequiredOption", "primary_tested": ["Options.addOption(Option)"], "associated_methods": ["Options.hasOption(String)", "Options.hasLongOption(String)", "Options.getOption(String)", "Options.getRequiredOptions()"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a required option to the Options object and verifies its presence, correctness, and requirement status."}, {"name": "testAddOptionTwice", "primary_tested": ["Options.addOption(Option)"], "associated_methods": ["Options.hasOption(String)", "Options.hasLongOption(String)", "Options.getOption(String)"], "external_dependencies": {"modules": ["Options", "Option"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding the same option twice to the Options object and verifies that the last added option is the one that is stored."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "testclass_name": "PatternOptionBuilder_getValueTypeTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "PatternOptionBuilder_getValueTypeTest", "description": "Unit tests for the getValueType method in PatternOptionBuilder class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGetValueType_Object", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning OBJECT_VALUE."}, {"name": "testGetValueType_String", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning STRING_VALUE."}, {"name": "testGetValueType_Number", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning NUMBER_VALUE."}, {"name": "testGetValueType_Class", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning CLASS_VALUE."}, {"name": "testGetValueType_Date", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning DATE_VALUE."}, {"name": "testGetValueType_ExistingFile", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning EXISTING_FILE_VALUE."}, {"name": "testGetValueType_File", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning FILE_VALUE."}, {"name": "testGetValueType_Files", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning FILES_VALUE."}, {"name": "testGetValueType_URL", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning URL_VALUE."}, {"name": "testGetValueType_Null", "primary_tested": ["PatternOptionBuilder.getValueType(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder"]}, "category": "unit", "description": "Tests the getValueType method for returning null."}]}]