[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\npublic class PseudoTCPBase_getNextClockTest {\n\n    @Test\n    public void testGetNextClock() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 12345L);\n        long now = PseudoTCPBase.now();\n\n        // Test case for SD_FORCEFUL shutdown\n        pseudoTCPBase.m_shutdown = EnShutdown.SD_FORCEFUL;\n        assertEquals(-1, pseudoTCPBase.getNextClock(now));\n\n        // Test case for SD_GRACEFUL shutdown with TCP_ESTABLISHED state\n        pseudoTCPBase.m_shutdown = EnShutdown.SD_GRACEFUL;\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_sbuf.clear();\n        pseudoTCPBase.m_t_ack = 0;\n        assertEquals(-1, pseudoTCPBase.getNextClock(now));\n\n        // Test case for TCP_CLOSED state\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_CLOSED;\n        assertEquals(PseudoTCPBase.CLOSED_TIMEOUT, pseudoTCPBase.getNextClock(now));\n\n        // Test case for default timeout calculation\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_shutdown = EnShutdown.SD_NONE;\n        pseudoTCPBase.m_t_ack = now - 1000;\n        pseudoTCPBase.m_rto_base = now - 2000;\n        pseudoTCPBase.m_lastsend = now - 3000;\n        pseudoTCPBase.m_lasttraffic = now - 4000;\n        long expectedTimeout = Math.min(Math.min(Math.min(PseudoTCPBase.DEFAULT_TIMEOUT, 1000), 2000), 3000);\n        assertEquals(expectedTimeout, pseudoTCPBase.getNextClock(now));\n    }\n}\n"}]