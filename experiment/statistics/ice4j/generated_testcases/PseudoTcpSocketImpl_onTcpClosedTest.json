[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport static org.mockito.Mockito.*;\n\npublic class PseudoTcpSocketImpl_onTcpClosedTest {\n\n    @Test\n    public void testOnTcpClosedWithException() {\n        // Given\n        PseudoTcpSocketImpl socketImpl = new PseudoTcpSocketImpl(12345);\n        IOException mockException = mock(IOException.class);\n        Logger mockLogger = mock(Logger.class);\n        socketImpl.logger = mockLogger;\n\n        // When\n        socketImpl.onTcpClosed(mock(PseudoTCPBase.class), mockException);\n\n        // Then\n        verify(mockLogger).log(Level.SEVERE, \"PseudoTcp closed: \" + mockException);\n        assert(!socketImpl.runReceive);\n        assert(!socketImpl.runClock);\n        assert(socketImpl.exception == mockException);\n        // Assuming releaseAllLocks and cancelClockTask are tested elsewhere\n    }\n\n    @Test\n    public void testOnTcpClosedWithoutException() {\n        // Given\n        PseudoTcpSocketImpl socketImpl = new PseudoTcpSocketImpl(12345);\n        Logger mockLogger = mock(Logger.class);\n        socketImpl.logger = mockLogger;\n\n        // When\n        socketImpl.onTcpClosed(mock(PseudoTCPBase.class), null);\n\n        // Then\n        verify(mockLogger).log(Level.FINE, \"PseudoTcp closed\");\n        assert(!socketImpl.runReceive);\n        assert(!socketImpl.runClock);\n        assert(socketImpl.exception == null);\n        // Assuming releaseAllLocks and cancelClockTask are tested elsewhere\n    }\n}\n"}]