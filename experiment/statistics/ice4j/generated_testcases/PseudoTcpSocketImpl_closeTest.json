[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.net.DatagramSocket;\n\npublic class PseudoTcpSocketImpl_closeTest {\n\n    @Test\n    public void testCloseSuccess() throws IOException {\n        // Given\n        PseudoTCPBase pseudoTcp = mock(PseudoTCPBase.class);\n        DatagramSocket socket = mock(DatagramSocket.class);\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345, socket) {\n            @Override\n            PseudoTCPBase getPseudoTcp() {\n                return pseudoTcp;\n            }\n        };\n\n        // When\n        pseudoTcpSocket.close();\n\n        // Then\n        verify(pseudoTcp).close(true);\n        verify(socket).close();\n    }\n\n    @Test\n    public void testCloseInterrupted() throws IOException {\n        // Given\n        PseudoTCPBase pseudoTcp = mock(PseudoTCPBase.class);\n        DatagramSocket socket = mock(DatagramSocket.class);\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345, socket) {\n            @Override\n            PseudoTCPBase getPseudoTcp() {\n                return pseudoTcp;\n            }\n        };\n\n        doThrow(new InterruptedException()).when(pseudoTcp).close(true);\n\n        // When\n        IOException exception = assertThrows(IOException.class, pseudoTcpSocket::close);\n\n        // Then\n        assertEquals(\"Closing socket interrupted\", exception.getMessage());\n        verify(socket).close();\n    }\n}\n"}]