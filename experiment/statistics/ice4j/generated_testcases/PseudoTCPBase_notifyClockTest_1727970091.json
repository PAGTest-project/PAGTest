[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nclass PseudoTCPBase_notifyClockTest {\n\n    @Test\n    void testNotifyClock_TCPClosedState() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(null, 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_CLOSED;\n\n        pseudoTCPBase.notifyClock(System.currentTimeMillis());\n\n        // No assertions needed as the method should return immediately\n    }\n\n    @Test\n    void testNotifyClock_RetransmitSegment() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(mock(PseudoTcpNotify.class), 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_rto_base = 1000;\n        pseudoTCPBase.m_rx_rto = 2000;\n        pseudoTCPBase.m_slist.add(new SSegment(0, 100, false));\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        // Verify retransmission logic was triggered\n        assertEquals(now, pseudoTCPBase.m_rto_base);\n    }\n\n    @Test\n    void testNotifyClock_ProbeClosedWindows() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(mock(PseudoTcpNotify.class), 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_lastsend = 1000;\n        pseudoTCPBase.m_rx_rto = 2000;\n        pseudoTCPBase.m_lastrecv = now() - 20000;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        // Verify closedown was triggered due to idle timeout\n        assertEquals(PseudoTcpState.TCP_CLOSED, pseudoTCPBase.m_state);\n    }\n\n    @Test\n    void testNotifyClock_SendDelayedAcks() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(mock(PseudoTcpNotify.class), 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_t_ack = 1000;\n        pseudoTCPBase.m_ack_delay = 500;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        // Verify delayed ack was sent\n        assertEquals(0, pseudoTCPBase.m_t_ack);\n    }\n\n    @Test\n    void testNotifyClock_KeepAliveTimeout() {\n        PseudoTCPBase pseudoTCPBase = new PseudoTCPBase(mock(PseudoTcpNotify.class), 0);\n        pseudoTCPBase.m_state = PseudoTcpState.TCP_ESTABLISHED;\n        pseudoTCPBase.m_lastrecv = now() - 95000;\n        pseudoTCPBase.m_bOutgoing = true;\n\n        long now = System.currentTimeMillis();\n        pseudoTCPBase.notifyClock(now);\n\n        // Verify closedown was triggered due to keepalive timeout\n        assertEquals(PseudoTcpState.TCP_CLOSED, pseudoTCPBase.m_state);\n    }\n\n    private long now() {\n        return System.currentTimeMillis();\n    }\n}\n"}]