[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.UnknownHostException;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass PseudoTcpSocketImpl_bindTest {\n\n    @Test\n    void testBind() throws IOException {\n        // Given\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345);\n        InetAddress host = InetAddress.getByName(\"localhost\");\n        int port = 12345;\n\n        // When\n        pseudoTcpSocket.bind(host, port);\n\n        // Then\n        assertNotNull(pseudoTcpSocket.getSocket());\n        assertEquals(new InetSocketAddress(host.getHostAddress(), port), pseudoTcpSocket.getSocket().getLocalSocketAddress());\n    }\n\n    @Test\n    void testBindWithExistingSocket() throws IOException {\n        // Given\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345);\n        pseudoTcpSocket.setSocket(mock(DatagramSocket.class));\n        InetAddress host = InetAddress.getByName(\"localhost\");\n        int port = 12345;\n\n        // When\n        pseudoTcpSocket.bind(host, port);\n\n        // Then\n        verify(pseudoTcpSocket.getSocket()).close();\n        assertNotNull(pseudoTcpSocket.getSocket());\n        assertEquals(new InetSocketAddress(host.getHostAddress(), port), pseudoTcpSocket.getSocket().getLocalSocketAddress());\n    }\n\n    @Test\n    void testBindWithIOException() throws IOException {\n        // Given\n        PseudoTcpSocketImpl pseudoTcpSocket = new PseudoTcpSocketImpl(12345);\n        InetAddress host = InetAddress.getByName(\"localhost\");\n        int port = 12345;\n\n        // Mocking DatagramSocket to throw IOException\n        DatagramSocket mockSocket = mock(DatagramSocket.class);\n        doThrow(new IOException(\"Mocked IOException\")).when(mockSocket).bind(any(SocketAddress.class));\n\n        // When\n        pseudoTcpSocket.setSocket(mockSocket);\n        assertThrows(IOException.class, () -> pseudoTcpSocket.bind(host, port));\n    }\n}\n"}]