[{"strategy": "generate", "code": "\npackage org.ice4j.ice.harvest;\n\nimport org.ice4j.ice.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class SinglePortUdpHarvester_harvestTest {\n\n    @Test\n    public void testHarvestSingleComponentSingleStream() {\n        // Given\n        SinglePortUdpHarvester harvester = new SinglePortUdpHarvester(null);\n        Agent agent = mock(Agent.class);\n        IceMediaStream stream = mock(IceMediaStream.class);\n        Component component = mock(Component.class);\n        String ufrag = \"testUfrag\";\n\n        when(component.getParentStream()).thenReturn(stream);\n        when(stream.getParentAgent()).thenReturn(agent);\n        when(agent.getLocalUfrag()).thenReturn(ufrag);\n        when(stream.getComponentCount()).thenReturn(1);\n        when(agent.getStreamCount()).thenReturn(1);\n\n        // When\n        Collection<LocalCandidate> result = harvester.harvest(component);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(1, result.size());\n        assertTrue(result.iterator().next() instanceof MyCandidate);\n    }\n\n    @Test\n    public void testHarvestMultipleComponentsOrStreams() {\n        // Given\n        SinglePortUdpHarvester harvester = new SinglePortUdpHarvester(null);\n        Agent agent = mock(Agent.class);\n        IceMediaStream stream = mock(IceMediaStream.class);\n        Component component = mock(Component.class);\n\n        when(component.getParentStream()).thenReturn(stream);\n        when(stream.getParentAgent()).thenReturn(agent);\n        when(stream.getComponentCount()).thenReturn(2); // Multiple components\n        when(agent.getStreamCount()).thenReturn(1);\n\n        // When\n        Collection<LocalCandidate> result = harvester.harvest(component);\n\n        // Then\n        assertNotNull(result);\n        assertTrue(result.isEmpty());\n    }\n}\n"}]