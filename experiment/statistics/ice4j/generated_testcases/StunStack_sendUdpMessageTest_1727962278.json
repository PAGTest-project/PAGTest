[{"strategy": "generate", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.IOException;\nimport java.net.DatagramSocket;\nimport java.net.InetSocketAddress;\n\npublic class StunStack_sendUdpMessageTest {\n\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private DatagramSocket clientSocket;\n    private DatagramSocket serverSocket;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        clientSocket = new DatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0));\n        serverSocket = new DatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0));\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", clientSocket.getLocalPort(), Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", serverSocket.getLocalPort(), Transport.UDP);\n\n        stunStack = new StunStack();\n        stunStack.addSocket(new IceUdpSocketWrapper(new SafeCloseDatagramSocket(clientSocket)));\n        stunStack.addSocket(new IceUdpSocketWrapper(new SafeCloseDatagramSocket(serverSocket)));\n    }\n\n    @Test\n    public void testSendUdpMessageSuccess() throws StunException {\n        RawMessage udpMessage = RawMessage.build(new byte[]{1, 2, 3}, 3, serverAddress, clientAddress);\n        stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress);\n        // No exception thrown, success\n    }\n\n    @Test\n    public void testSendUdpMessageIllegalArgumentException() {\n        RawMessage udpMessage = RawMessage.build(new byte[]{1, 2, 3}, 3, null, clientAddress);\n        assertThrows(StunException.class, () -> {\n            stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress);\n        });\n    }\n\n    @Test\n    public void testSendUdpMessageIOException() {\n        RawMessage udpMessage = RawMessage.build(new byte[]{1, 2, 3}, 3, serverAddress, clientAddress);\n        // Mocking IOException by closing the socket\n        clientSocket.close();\n        assertThrows(StunException.class, () -> {\n            stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress);\n        });\n    }\n}\n"}]