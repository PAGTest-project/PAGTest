[{"strategy": "retry", "code": "\npackage org.ice4j.message;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.junit.jupiter.api.*;\n\npublic class MessageFactory_addLongTermCredentialAttributesTest {\n\n    @Test\n    public void testAddLongTermCredentialAttributes() {\n        Request request = new Request();\n        byte[] username = \"testUser\".getBytes();\n        byte[] realm = \"testRealm\".getBytes();\n        byte[] nonce = \"testNonce\".getBytes();\n\n        assertDoesNotThrow(() -> MessageFactory.addLongTermCredentialAttributes(request, username, realm, nonce));\n\n        // Verify attributes are added to the request\n        assertTrue(request.containsAttribute(Attribute.USERNAME));\n        assertTrue(request.containsAttribute(Attribute.REALM));\n        assertTrue(request.containsAttribute(Attribute.NONCE));\n        assertTrue(request.containsAttribute(Attribute.MESSAGE_INTEGRITY));\n    }\n\n    @Test\n    public void testAddLongTermCredentialAttributes_UnsupportedEncodingException() {\n        Request request = new Request();\n        byte[] username = \"testUser\".getBytes();\n        byte[] realm = \"testRealm\".getBytes();\n        byte[] nonce = \"testNonce\".getBytes();\n\n        // Simulate UnsupportedEncodingException by passing invalid encoding\n        byte[] invalidUsername = new byte[] { (byte) 0xFF, (byte) 0xFE, (byte) 0xFD };\n\n        StunException exception = assertThrows(StunException.class, () -> {\n            MessageFactory.addLongTermCredentialAttributes(request, invalidUsername, realm, nonce);\n        });\n\n        assertEquals(\"username\", exception.getMessage());\n    }\n}\n"}]