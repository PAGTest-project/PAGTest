[{"strategy": "generate", "code": "\npackage org.ice4j.ice.harvest;\n\nimport org.ice4j.TransportAddress;\nimport org.junit.jupiter.api.Test;\nimport java.io.IOException;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\npublic class SinglePortUdpHarvester_createHarvestersTest {\n\n    @Test\n    public void testCreateHarvesters_Success() throws IOException {\n        // Given\n        TransportAddress mockAddress = mock(TransportAddress.class);\n        AbstractUdpListener.getAllowedAddresses = mock(AbstractUdpListener.getAllowedAddresses.class);\n        when(AbstractUdpListener.getAllowedAddresses(anyInt())).thenReturn(List.of(mockAddress));\n\n        // When\n        List<SinglePortUdpHarvester> harvesters = SinglePortUdpHarvester.createHarvesters(12345);\n\n        // Then\n        assertEquals(1, harvesters.size());\n        assertTrue(harvesters.get(0) instanceof SinglePortUdpHarvester);\n    }\n\n    @Test\n    public void testCreateHarvesters_IOException() throws IOException {\n        // Given\n        TransportAddress mockAddress = mock(TransportAddress.class);\n        AbstractUdpListener.getAllowedAddresses = mock(AbstractUdpListener.getAllowedAddresses.class);\n        when(AbstractUdpListener.getAllowedAddresses(anyInt())).thenReturn(List.of(mockAddress));\n\n        doThrow(new IOException(\"Mocked IOException\")).when(mockAddress).getHostAddress();\n\n        // When\n        List<SinglePortUdpHarvester> harvesters = SinglePortUdpHarvester.createHarvesters(12345);\n\n        // Then\n        assertEquals(0, harvesters.size());\n    }\n}\n"}]