[{"strategy": "retry", "code": "\npackage org.ice4j.stunclient;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.ice4j.stack.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class NetworkConfigurationDiscoveryProcess_determineAddressTest {\n\n    private NetworkConfigurationDiscoveryProcess discoveryProcess;\n    private StunStack stunStack;\n    private TransportAddress localAddress;\n    private TransportAddress serverAddress;\n    private BlockingRequestSender requestSender;\n\n    @BeforeEach\n    public void setUp() throws IOException, StunException {\n        stunStack = mock(StunStack.class);\n        localAddress = mock(TransportAddress.class);\n        serverAddress = mock(TransportAddress.class);\n        requestSender = mock(BlockingRequestSender.class);\n\n        discoveryProcess = new NetworkConfigurationDiscoveryProcess(stunStack, localAddress, serverAddress);\n        discoveryProcess.setRequestSender(requestSender); // Change here\n        discoveryProcess.start();\n    }\n\n    @Test\n    public void testDetermineAddress_UDPBlocked() throws StunException, IOException {\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(null);\n\n        StunDiscoveryReport report = discoveryProcess.determineAddress();\n\n        assertEquals(StunDiscoveryReport.UDP_BLOCKING_FIREWALL, report.getNatType());\n    }\n\n    @Test\n    public void testDetermineAddress_OpenInternet() throws StunException, IOException {\n        StunMessageEvent evt = mock(StunMessageEvent.class);\n        Message message = mock(Message.class);\n        MappedAddressAttribute mappedAddressAttribute = mock(MappedAddressAttribute.class);\n        TransportAddress mappedAddress = mock(TransportAddress.class);\n\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(evt);\n        when(evt.getMessage()).thenReturn(message);\n        when(message.getAttribute(Attribute.MAPPED_ADDRESS)).thenReturn(mappedAddressAttribute);\n        when(mappedAddressAttribute.getAddress()).thenReturn(mappedAddress);\n        when(mappedAddress.equals(localAddress)).thenReturn(true);\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(evt);\n\n        StunDiscoveryReport report = discoveryProcess.determineAddress();\n\n        assertEquals(StunDiscoveryReport.OPEN_INTERNET, report.getNatType());\n    }\n\n    @Test\n    public void testDetermineAddress_SymmetricUDPFirewall() throws StunException, IOException {\n        StunMessageEvent evt = mock(StunMessageEvent.class);\n        Message message = mock(Message.class);\n        MappedAddressAttribute mappedAddressAttribute = mock(MappedAddressAttribute.class);\n        TransportAddress mappedAddress = mock(TransportAddress.class);\n\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(evt);\n        when(evt.getMessage()).thenReturn(message);\n        when(message.getAttribute(Attribute.MAPPED_ADDRESS)).thenReturn(mappedAddressAttribute);\n        when(mappedAddressAttribute.getAddress()).thenReturn(mappedAddress);\n        when(mappedAddress.equals(localAddress)).thenReturn(true);\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(null);\n\n        StunDiscoveryReport report = discoveryProcess.determineAddress();\n\n        assertEquals(StunDiscoveryReport.SYMMETRIC_UDP_FIREWALL, report.getNatType());\n    }\n\n    @Test\n    public void testDetermineAddress_FullConeNAT() throws StunException, IOException {\n        StunMessageEvent evt = mock(StunMessageEvent.class);\n        Message message = mock(Message.class);\n        MappedAddressAttribute mappedAddressAttribute = mock(MappedAddressAttribute.class);\n        TransportAddress mappedAddress = mock(TransportAddress.class);\n\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(evt);\n        when(evt.getMessage()).thenReturn(message);\n        when(message.getAttribute(Attribute.MAPPED_ADDRESS)).thenReturn(mappedAddressAttribute);\n        when(mappedAddressAttribute.getAddress()).thenReturn(mappedAddress);\n        when(mappedAddress.equals(localAddress)).thenReturn(false);\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(evt);\n\n        StunDiscoveryReport report = discoveryProcess.determineAddress();\n\n        assertEquals(StunDiscoveryReport.FULL_CONE_NAT, report.getNatType());\n    }\n\n    @Test\n    public void testDetermineAddress_SymmetricNAT() throws StunException, IOException {\n        StunMessageEvent evt = mock(StunMessageEvent.class);\n        Message message = mock(Message.class);\n        MappedAddressAttribute mappedAddressAttribute = mock(MappedAddressAttribute.class);\n        TransportAddress mappedAddress = mock(TransportAddress.class);\n        TransportAddress mappedAddress2 = mock(TransportAddress.class);\n\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(evt);\n        when(evt.getMessage()).thenReturn(message);\n        when(message.getAttribute(Attribute.MAPPED_ADDRESS)).thenReturn(mappedAddressAttribute);\n        when(mappedAddressAttribute.getAddress()).thenReturn(mappedAddress);\n        when(mappedAddress.equals(localAddress)).thenReturn(false);\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), eq(serverAddress))).thenReturn(null);\n        when(requestSender.sendRequestAndWaitForResponse(any(Request.class), any(TransportAddress.class))).thenReturn(evt);\n        when(message.getAttribute(Attribute.MAPPED_ADDRESS)).thenReturn(mappedAddressAttribute);\n        when(mappedAddressAttribute.getAddress()).thenReturn(mappedAddress2);\n        when(mappedAddress.equals(mappedAddress2)).thenReturn(false);\n\n        StunDiscoveryReport report = discoveryProcess.determineAddress();\n\n        assertEquals(StunDiscoveryReport.SYMMETRIC_NAT, report.getNatType());\n    }\n}\n"}]