[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.net.DatagramSocket;\n\nclass PseudoTcpSocketImpl_getPTCPOptionTest {\n\n    private PseudoTcpSocketImpl pseudoTcpSocketImpl;\n    private PseudoTCPBase pseudoTcp;\n\n    @BeforeEach\n    void setUp() {\n        pseudoTcp = mock(PseudoTCPBase.class);\n        pseudoTcpSocketImpl = new PseudoTcpSocketImpl(12345, mock(DatagramSocket.class)) {\n            @Override\n            public long getPTCPOption(Option opt) {\n                if (Option.OPT_READ_TIMEOUT == opt) {\n                    return this.readTimeout;\n                } else if (Option.OPT_WRITE_TIMEOUT == opt) {\n                    return this.writeTimeout;\n                } else {\n                    return pseudoTcp.getOption(opt);\n                }\n            }\n        };\n        pseudoTcpSocketImpl.pseudoTcp = pseudoTcp;\n    }\n\n    @Test\n    void testGetPTCPOption_ReadTimeout() {\n        pseudoTcpSocketImpl.setPTCPOption(Option.OPT_READ_TIMEOUT, 1000);\n        long result = pseudoTcpSocketImpl.getPTCPOption(Option.OPT_READ_TIMEOUT);\n        assertEquals(1000, result);\n    }\n\n    @Test\n    void testGetPTCPOption_WriteTimeout() {\n        pseudoTcpSocketImpl.setPTCPOption(Option.OPT_WRITE_TIMEOUT, 2000);\n        long result = pseudoTcpSocketImpl.getPTCPOption(Option.OPT_WRITE_TIMEOUT);\n        assertEquals(2000, result);\n    }\n\n    @Test\n    void testGetPTCPOption_OtherOption() {\n        when(pseudoTcp.getOption(Option.OPT_NODELAY)).thenReturn(3000L);\n        long result = pseudoTcpSocketImpl.getPTCPOption(Option.OPT_NODELAY);\n        assertEquals(3000, result);\n    }\n}\n"}]