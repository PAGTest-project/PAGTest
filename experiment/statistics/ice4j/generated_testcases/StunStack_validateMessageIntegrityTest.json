[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.security.*;\nimport org.ice4j.socket.*;\nimport org.jitsi.utils.concurrent.*;\nimport javax.crypto.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class StunStack_validateMessageIntegrityTest {\n\n    private StunStack stunStack;\n    private CredentialsManager credentialsManager;\n    private Logger logger;\n\n    @BeforeEach\n    public void setUp() {\n        stunStack = new StunStack();\n        credentialsManager = mock(CredentialsManager.class);\n        logger = mock(Logger.class);\n        stunStack.logger = logger;\n        stunStack.credentialsManager = credentialsManager;\n    }\n\n    @Test\n    public void testValidateMessageIntegrityValid() {\n        // Given\n        String username = \"validUser:validFrag\";\n        boolean shortTermCredentialMechanism = true;\n        byte[] key = \"validKey\".getBytes();\n        when(credentialsManager.getLocalKey(anyString())).thenReturn(key);\n\n        MessageIntegrityAttribute msgInt = mock(MessageIntegrityAttribute.class);\n        when(msgInt.getLocationInMessage()).thenReturn(10);\n        when(msgInt.getDataLength()).thenReturn(20);\n        when(msgInt.getHmacSha1Content()).thenReturn(\"validHmacSha1Content\".getBytes());\n\n        RawMessage message = mock(RawMessage.class);\n        when(message.getBytes()).thenReturn(new byte[30]);\n\n        // When\n        boolean result = stunStack.validateMessageIntegrity(msgInt, username, shortTermCredentialMechanism, message);\n\n        // Then\n        assertTrue(result);\n        verify(logger).finest(\"Successfully verified msg integrity\");\n    }\n\n    @Test\n    public void testValidateMessageIntegrityInvalidUsername() {\n        // Given\n        String username = \"\";\n        boolean shortTermCredentialMechanism = true;\n\n        MessageIntegrityAttribute msgInt = mock(MessageIntegrityAttribute.class);\n        RawMessage message = mock(RawMessage.class);\n\n        // When\n        boolean result = stunStack.validateMessageIntegrity(msgInt, username, shortTermCredentialMechanism, message);\n\n        // Then\n        assertFalse(result);\n        verify(logger).log(Level.FINE, \"Received a message with an improperly formatted username\");\n    }\n\n    @Test\n    public void testValidateMessageIntegrityNullKey() {\n        // Given\n        String username = \"validUser:validFrag\";\n        boolean shortTermCredentialMechanism = true;\n        when(credentialsManager.getLocalKey(anyString())).thenReturn(null);\n\n        MessageIntegrityAttribute msgInt = mock(MessageIntegrityAttribute.class);\n        RawMessage message = mock(RawMessage.class);\n\n        // When\n        boolean result = stunStack.validateMessageIntegrity(msgInt, username, shortTermCredentialMechanism, message);\n\n        // Then\n        assertFalse(result);\n    }\n\n    @Test\n    public void testValidateMessageIntegrityHmacSha1Mismatch() {\n        // Given\n        String username = \"validUser:validFrag\";\n        boolean shortTermCredentialMechanism = true;\n        byte[] key = \"validKey\".getBytes();\n        when(credentialsManager.getLocalKey(anyString())).thenReturn(key);\n\n        MessageIntegrityAttribute msgInt = mock(MessageIntegrityAttribute.class);\n        when(msgInt.getLocationInMessage()).thenReturn(10);\n        when(msgInt.getDataLength()).thenReturn(20);\n        when(msgInt.getHmacSha1Content()).thenReturn(\"invalidHmacSha1Content\".getBytes());\n\n        RawMessage message = mock(RawMessage.class);\n        when(message.getBytes()).thenReturn(new byte[30]);\n\n        // When\n        boolean result = stunStack.validateMessageIntegrity(msgInt, username, shortTermCredentialMechanism, message);\n\n        // Then\n        assertFalse(result);\n        verify(logger).log(Level.FINE, \"Received a message with a wrong MESSAGE-INTEGRITY HMAC-SHA1 signature: expected: validHmacSha1Content, received: invalidHmacSha1Content\");\n    }\n}\n"}]