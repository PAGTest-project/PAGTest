[{"file_path": "src/test/java/org/ice4j/ice/harvest/SinglePortUdpHarvesterTest.java", "testclass_name": "SinglePortUdpHarvesterTest", "dependencies": ["package org.ice4j.ice.harvest;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import java.net.*;", "import org.junit.jupiter.api.*;"], "name": "SinglePortUdpHarvesterTest", "description": "Tests for the SinglePortUdpHarvester class, focusing on binding and rebinding behavior.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRebindWithoutCloseThrows", "primary_tested": ["SinglePortUdpHarvester.SinglePortUdpHarvester(TransportAddress)"], "associated_methods": ["SinglePortUdpHarvester.close()"], "external_dependencies": {"modules": ["TransportAddress", "SinglePortUdpHarvester", "BindException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Verifies that, without closing, the address used by a harvester cannot be re-used."}, {"name": "testRebindWithClose", "primary_tested": ["SinglePortUdpHarvester.SinglePortUdpHarvester(TransportAddress)"], "associated_methods": ["SinglePortUdpHarvester.close()"], "external_dependencies": {"modules": ["TransportAddress", "SinglePortUdpHarvester", "BindException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Verifies that, after closing, the address used by a harvester can be re-used."}, {"name": "testBindWithPortZero", "primary_tested": ["SinglePortUdpHarvester.SinglePortUdpHarvester(TransportAddress)"], "associated_methods": ["SinglePortUdpHarvester.close()"], "external_dependencies": {"modules": ["TransportAddress", "SinglePortUdpHarvester", "BindException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Verifies that binding with port zero results in the OS choosing a random port not equal to zero."}]}, {"file_path": "src/test/java/org/ice4j/ice/RoleConflictResolutionTest.java", "testclass_name": "RoleConflictResolutionTest", "dependencies": ["package org.ice4j.ice;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import java.io.*;", "import java.util.*;", "import java.util.concurrent.*;", "import java.util.logging.*;", "import org.junit.jupiter.api.*;"], "name": "RoleConflictResolutionTest", "description": "Tests for resolving role conflicts in ICE negotiation.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}], "methods": [{"name": "testRecoveryFromRoleConflict", "signature": "private static void testRecoveryFromRoleConflict(boolean bothControlling) throws Throwable"}, {"name": "createPeer", "signature": "private static Agent createPeer(String label, boolean iceControlling) throws IOException"}, {"name": "disposePeer", "signature": "private static void disposePeer(Agent peer)"}, {"name": "logSelectedPairs", "signature": "private static void logSelectedPairs(Agent peer)"}, {"name": "exchangeCredentials", "signature": "private static void exchangeCredentials(Agent peer1, Agent peer2)"}, {"name": "exchangeCandidates", "signature": "private static void exchangeCandidates(Agent peer1, Agent peer2)"}, {"name": "copyRemoteCandidates", "signature": "private static void copyRemoteCandidates(Component localComponent, Component remoteComponent)"}]}, "fixtures": [], "test_cases": [{"name": "testRecoveryFromBothControlledConflict", "primary_tested": ["RoleConflictResolutionTest.testRecoveryFromRoleConflict(boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["Agent", "CountDownLatch", "Arrays", "TimeUnit", "Logger"], "class_members": [{"name": "testRecoveryFromRoleConflict", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests recovery from a role conflict where both peers are in the controlled role."}, {"name": "testRecoveryFromBothControllingConflict", "primary_tested": ["RoleConflictResolutionTest.testRecoveryFromRoleConflict(boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["Agent", "CountDownLatch", "Arrays", "TimeUnit", "Logger"], "class_members": [{"name": "testRecoveryFromRoleConflict", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests recovery from a role conflict where both peers are in the controlling role."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactoryTest.java", "testclass_name": "MessageFactoryTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactoryTest", "description": "Unit tests for creating various types of STUN messages using the MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateBindingErrorResponse", "primary_tested": ["MessageFactory.createBindingErrorResponse(char)"], "external_dependencies": {"modules": ["Response", "Message", "AttributeFactory", "Attribute", "MessageFactory", "StunException"]}, "category": "unit", "description": "Tests the creation of a binding error response with a specific error code."}, {"name": "testCreateBindingErrorResponse1", "primary_tested": ["MessageFactory.createBindingErrorResponse(char,String)"], "external_dependencies": {"modules": ["Response", "Message", "AttributeFactory", "Attribute", "MessageFactory"]}, "category": "unit", "description": "Tests the creation of a binding error response with a specific error code and reason phrase."}, {"name": "testCreateBindingErrorResponseUnknownAttributes", "primary_tested": ["MessageFactory.createBindingErrorResponseUnknownAttributes(char[])"], "external_dependencies": {"modules": ["Response", "Message", "AttributeFactory", "ErrorCodeAttribute", "UnknownAttributesAttribute", "MessageFactory", "StunException"]}, "category": "unit", "description": "Tests the creation of a binding error response with unknown attributes."}, {"name": "testCreateBindingErrorResponseUnknownAttributes1", "primary_tested": ["MessageFactory.createBindingErrorResponseUnknownAttributes(String,char[])"], "external_dependencies": {"modules": ["Response", "Message", "AttributeFactory", "Attribute", "UnknownAttributesAttribute", "MessageFactory"]}, "category": "unit", "description": "Tests the creation of a binding error response with a specific reason phrase and unknown attributes."}, {"name": "testCreateBindingRequest", "primary_tested": ["MessageFactory.createBindingRequest()"], "external_dependencies": {"modules": ["Request", "Message", "AttributeFactory", "MessageFactory"]}, "category": "unit", "description": "Tests the creation of a binding request."}, {"name": "testCreateBindingResponse", "primary_tested": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)"], "external_dependencies": {"modules": ["Response", "Message", "AttributeFactory", "TransportAddress", "Transport", "MessageFactory", "Exception"]}, "category": "unit", "description": "Tests the creation of a binding success response with mapped, source, and changed addresses."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpStreamTest.java", "testclass_name": "PseudoTcpStreamTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.*;", "import java.net.*;", "import java.util.concurrent.atomic.*;", "import java.util.logging.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpStreamTest", "description": "Tests for the PseudoTcpStream class, focusing on various timeout scenarios and data transfer.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}], "methods": [{"name": "receiveBuffer", "signature": "private static byte[] receiveBuffer(InputStream input, int size) throws IOException"}, {"name": "doTestTimeout", "signature": "private void doTestTimeout(final TimeoutOperationTest testOperation) throws Exception"}], "nested_classes": [{"name": "TimeoutOperationTest", "description": "Interface used to pass timeout test function"}]}, "fixtures": [], "test_cases": [{"name": "testAccept", "primary_tested": ["PseudoTcpSocketImpl.accept(int)"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "IOException"]}, "category": "unit", "description": "Test the timeout on accept method"}, {"name": "testReadTimeout", "primary_tested": ["PseudoTcpSocketImpl.setPTCPOption(Option, int)", "InputStream.read(byte[])"], "associated_methods": ["PseudoTcpSocketImpl.getInputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "Option", "InputStream", "IOException"], "class_members": [{"name": "doTestTimeout", "type": "method"}]}, "category": "unit", "description": "Tests timeout on read method"}, {"name": "testWriteTimeout", "primary_tested": ["PseudoTcpSocketImpl.setPTCPOption(Option, int)", "OutputStream.write(byte[])"], "associated_methods": ["PseudoTcpSocketImpl.getOutputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "Option", "OutputStream", "IOException"], "class_members": [{"name": "doTestTimeout", "type": "method"}]}, "category": "unit", "description": "Tests timeout on write method"}, {"name": "testFlushTimeout", "primary_tested": ["PseudoTcpSocketImpl.setPTCPOption(Option, int)", "OutputStream.flush()"], "associated_methods": ["PseudoTcpSocketImpl.getOutputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "Option", "OutputStream", "IOException"], "class_members": [{"name": "doTestTimeout", "type": "method"}]}, "category": "unit", "description": "Tests timeout on flush method"}]}, {"file_path": "src/test/java/org/ice4j/attribute/XorOnlyTest.java", "testclass_name": "XorOnlyTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "XorOnlyTest", "description": "Unit tests for the XorOnlyAttribute class, covering encoding, decoding, equality, data length, and name retrieval.", "class_members": {"variables": [{"name": "xorOnly", "type": "XorOnlyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["XorOnlyAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that no exceptions are thrown when calling the decodeAttributeBody method."}, {"name": "testEncode", "primary_tested": ["XorOnlyAttribute.encode()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding of XorOnly attributes."}, {"name": "testEquals", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "associated_methods": ["MappedAddressAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["XorOnlyAttribute", "MappedAddressAttribute", "MsgFixture"], "class_members": [{"name": "xorOnly", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of XorOnlyAttribute, including positive and negative cases."}, {"name": "testGetDataLength", "primary_tested": ["XorOnlyAttribute.getDataLength()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the data length of XorOnlyAttribute is 0."}, {"name": "testGetName", "primary_tested": ["XorOnlyAttribute.getName()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the name of XorOnlyAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/OptionalAttributeAttributeTest.java", "testclass_name": "OptionalAttributeAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "OptionalAttributeAttributeTest", "description": "Unit tests for the OptionalAttribute class, focusing on decoding, encoding, equality, and data length.", "class_members": {"variables": [{"name": "optionalAttribute", "type": "OptionalAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["OptionalAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["OptionalAttribute.getBody()", "OptionalAttribute.getDataLength()"], "external_dependencies": {"modules": ["OptionalAttribute", "Attribute", "MsgFixture", "StunException"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded."}, {"name": "testEncode", "primary_tested": ["OptionalAttribute.encode()"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute", "MsgFixture"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded."}, {"name": "testEquals", "primary_tested": ["OptionalAttribute.equals(Object)"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute", "MsgFixture"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the equals method works correctly."}, {"name": "testGetDataLength", "primary_tested": ["OptionalAttribute.getDataLength()"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the data length is correctly retrieved."}]}, {"file_path": "src/test/java/org/ice4j/attribute/SoftwareAttributeTest.java", "testclass_name": "SoftwareAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "SoftwareAttributeTest", "description": "Unit tests for the SoftwareAttribute class, covering encoding, decoding, equality, data length, and name retrieval.", "class_members": {"variables": [{"name": "softwareAttribute", "type": "SoftwareAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "softwareValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["SoftwareAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["SoftwareAttribute", "StunException"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the software attribute body."}, {"name": "testEncode", "primary_tested": ["SoftwareAttribute.encode()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the software attribute."}, {"name": "testEquals", "primary_tested": ["SoftwareAttribute.equals(Object)"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the software attribute, including positive and negative cases."}, {"name": "testGetDataLength", "primary_tested": ["SoftwareAttribute.getDataLength()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the software attribute."}, {"name": "testGetName", "primary_tested": ["SoftwareAttribute.getName()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the software attribute."}, {"name": "testSetGetSoftware", "primary_tested": ["SoftwareAttribute.setSoftware(byte[])", "SoftwareAttribute.getSoftware()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setter and getter methods for the software attribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RealmAttributeTest.java", "testclass_name": "RealmAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RealmAttributeTest", "description": "Unit tests for the RealmAttribute class, focusing on encoding, decoding, and other attribute-specific functionalities.", "class_members": {"variables": [{"name": "realmAttribute", "type": "RealmAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "realmValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["RealmAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["RealmAttribute", "StunException"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "realmValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the realm attribute body."}, {"name": "testEncode", "primary_tested": ["RealmAttribute.encode()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the RealmAttribute."}, {"name": "testEquals", "primary_tested": ["RealmAttribute.equals(Object)"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "realmValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the RealmAttribute, including positive and negative cases."}, {"name": "testGetDataLength", "primary_tested": ["RealmAttribute.getDataLength()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "realmValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the RealmAttribute."}, {"name": "testGetName", "primary_tested": ["RealmAttribute.getName()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the RealmAttribute."}, {"name": "testSetGetRealm", "primary_tested": ["RealmAttribute.setRealm(byte[])", "RealmAttribute.getRealm()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the realm attribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UsernameAttributeTest.java", "testclass_name": "UsernameAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UsernameAttributeTest", "description": "Unit tests for the UsernameAttribute class, focusing on encoding, decoding, and other attribute-related functionalities.", "class_members": {"variables": [{"name": "usernameAttribute", "type": "UsernameAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "usernameValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["UsernameAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["UsernameAttribute", "StunException"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "usernameValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the username attribute body."}, {"name": "testEncode", "primary_tested": ["UsernameAttribute.encode()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the UsernameAttribute."}, {"name": "testEquals", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "usernameValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the UsernameAttribute, including positive and negative cases."}, {"name": "testGetDataLength", "primary_tested": ["UsernameAttribute.getDataLength()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "usernameValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the UsernameAttribute."}, {"name": "testGetName", "primary_tested": ["UsernameAttribute.getName()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the UsernameAttribute."}, {"name": "testSetGetUsername", "primary_tested": ["UsernameAttribute.setUsername(byte[])", "UsernameAttribute.getUsername()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the username in the UsernameAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/NonceAttributeTest.java", "testclass_name": "NonceAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "NonceAttributeTest", "description": "Unit tests for the NonceAttribute class, focusing on encoding, decoding, and other attribute-specific functionalities.", "class_members": {"variables": [{"name": "nonceAttribute", "type": "NonceAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "nonceValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["NonceAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["NonceAttribute", "StunException"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "nonceValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the nonce attribute body."}, {"name": "testEncode", "primary_tested": ["NonceAttribute.encode()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the NonceAttribute."}, {"name": "testEquals", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "nonceValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the NonceAttribute."}, {"name": "testGetDataLength", "primary_tested": ["NonceAttribute.getDataLength()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "nonceValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the NonceAttribute."}, {"name": "testGetName", "primary_tested": ["NonceAttribute.getName()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the NonceAttribute."}, {"name": "testSetGetNonce", "primary_tested": ["NonceAttribute.setNonce(byte[])", "NonceAttribute.getNonce()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the nonce value in the NonceAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttributeTest.java", "testclass_name": "ChangeRequestAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "ChangeRequestAttributeTest", "description": "Unit tests for the ChangeRequestAttribute class, focusing on its construction, decoding, encoding, equality, data length, and name.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}, {"name": "binMessagesFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testChangeRequestAttribute", "primary_tested": ["ChangeRequestAttribute.getAttributeType()"], "external_dependencies": {"modules": ["ChangeRequestAttribute", "Attribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the constructed object has the proper type."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ChangeRequestAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ChangeRequestAttribute.getChangeIpFlag()", "ChangeRequestAttribute.getChangePortFlag()"], "external_dependencies": {"modules": ["ChangeRequestAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are properly decoded."}, {"name": "testEncode", "primary_tested": ["ChangeRequestAttribute.encode()"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute", "MsgFixture"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample objects encode properly."}, {"name": "testEquals", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetDataLength", "primary_tested": ["ChangeRequestAttribute.getDataLength()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the returned value is always 4."}, {"name": "testGetName", "primary_tested": ["ChangeRequestAttribute.getName()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether we get a relevant name."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttributeTest.java", "testclass_name": "ConnectionIdAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ConnectionIdAttributeTest", "description": "Unit tests for the ConnectionIdAttribute class, focusing on various functionalities such as data length calculation, encoding, decoding, and equality checks.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["ConnectionIdAttribute.getDataLength()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether data length is properly calculated."}, {"name": "testGetName", "primary_tested": ["ConnectionIdAttribute.getName()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests getting the name."}, {"name": "testEqualsObject", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different and an identical object."}, {"name": "testEncode", "primary_tested": ["ConnectionIdAttribute.encode()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ConnectionIdAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ConnectionIdAttribute.getConnectionIdValue()"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded."}, {"name": "testGetConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.getConnectionIdValue()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the connection Id is always integer."}]}, {"file_path": "src/test/java/org/ice4j/util/PeriodicRunnableTests.java", "testclass_name": "PeriodicRunnableTests", "dependencies": ["package org.ice4j.util;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.time.*;", "import java.util.concurrent.*;", "import org.jitsi.utils.concurrent.*;", "import org.junit.jupiter.api.*;"], "name": "PeriodicRunnableTests", "description": "Unit tests for the PeriodicRunnable class, focusing on its scheduling and execution behavior.", "class_members": {"variables": [{"name": "timer", "type": "FakeScheduledExecutorService"}, {"name": "executor", "type": "ExecutorService"}], "methods": []}, "fixtures": ["beforeEach"], "test_cases": [{"name": "scheduleExecutesSpecifiedRunnableMultipleTimes", "primary_tested": ["PeriodicRunnable.schedule()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the specified Runnable is executed multiple times according to the schedule."}, {"name": "scheduleWithNegativeDelayDoesNotExecuteRunnable", "primary_tested": ["PeriodicRunnable.schedule()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the Runnable is not executed when the delay is negative."}, {"name": "negativeDelayStopsFurtherExecution", "primary_tested": ["PeriodicRunnable.getDelayUntilNextRun()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that further execution stops when the delay becomes negative."}, {"name": "cancelStopFurtherExecution", "primary_tested": ["PeriodicRunnable.cancel()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that further execution stops after the Runnable is cancelled."}, {"name": "scheduleExecuteRunnableIfPreviouslyCancelled", "primary_tested": ["PeriodicRunnable.schedule()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the Runnable can be scheduled again and executed after being previously cancelled."}]}, {"file_path": "src/test/java/org/ice4j/attribute/AttributeDecoderTest.java", "testclass_name": "AttributeDecoderTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "AttributeDecoderTest", "description": "Unit tests for decoding various attributes using the AttributeDecoder class.", "class_members": {"variables": [{"name": "msgFixture", "type": "MsgFixture"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeMappedAddress", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["MappedAddressAttribute.setAddress(TransportAddress)"], "external_dependencies": {"modules": ["AttributeDecoder", "MappedAddressAttribute", "TransportAddress", "Transport", "MsgFixture"], "class_members": [{"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of a MAPPED-ADDRESS attribute using AttributeDecoder."}, {"name": "testDecodeMappedAddress_v6", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["MappedAddressAttribute.setAddress(TransportAddress)"], "external_dependencies": {"modules": ["AttributeDecoder", "MappedAddressAttribute", "TransportAddress", "Transport", "MsgFixture"], "class_members": [{"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of a MAPPED-ADDRESS attribute (IPv6) using AttributeDecoder."}, {"name": "testDecodeChangeRequest", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["AttributeDecoder", "ChangeRequestAttribute", "MsgFixture"], "class_members": [{"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of a CHANGE-REQUEST attribute using AttributeDecoder."}, {"name": "testDecodeErrorCode", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(int)", "ErrorCodeAttribute.setErrorNumber(int)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["AttributeDecoder", "ErrorCodeAttribute", "MsgFixture"], "class_members": [{"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of an ERROR-CODE attribute using AttributeDecoder."}, {"name": "testDecodeUnknownAttributes", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(int)"], "external_dependencies": {"modules": ["AttributeDecoder", "UnknownAttributesAttribute", "MsgFixture"], "class_members": [{"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of UNKNOWN-ATTRIBUTES using AttributeDecoder."}, {"name": "testDecodeUnknownOptionalAttribute", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["AttributeDecoder", "OptionalAttribute", "MsgFixture"], "class_members": [{"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of an UNKNOWN-OPTIONAL attribute using AttributeDecoder."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageTest.java", "testclass_name": "MessageTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.ice4j.stack.*;", "import org.jitsi.config.*;", "import org.junit.jupiter.api.*;"], "name": "MessageTest", "description": "Unit tests for the Message class, focusing on encoding, decoding, attribute management, and equality checks.", "class_members": {"variables": [{"name": "bindingRequest", "type": "Message"}, {"name": "bindingResponse", "type": "Message"}, {"name": "mappedAddress", "type": "MappedAddressAttribute"}, {"name": "sourceAddress", "type": "SourceAddressAttribute"}, {"name": "changedAddress", "type": "ChangedAddressAttribute"}, {"name": "changeRequest", "type": "ChangeRequestAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "stunStack", "type": "StunStack"}], "methods": [], "nested_classes": []}, "fixtures": ["setupConfig", "resetConfig", "setUp", "tearDown"], "test_cases": [{"name": "testAddAndGetAttribute", "primary_tested": ["Message.putAttribute(Attribute)", "Message.getAttribute(int)"], "external_dependencies": {"modules": ["Message", "Attribute"], "class_members": [{"name": "mappedAddress", "type": "variable"}, {"name": "sourceAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding and retrieving attributes from a Message object."}, {"name": "testEncode", "primary_tested": ["Message.encode(StunStack)"], "external_dependencies": {"modules": ["Message", "StunStack", "MsgFixture"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "stunStack", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests encoding of binding request and response messages."}, {"name": "testDecode", "primary_tested": ["Message.decode(byte[], int, int)"], "external_dependencies": {"modules": ["Message", "MsgFixture"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests decoding of binding request and response messages."}, {"name": "testEquals", "primary_tested": ["Message.equals(Object)"], "external_dependencies": {"modules": ["Message"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "changeRequest", "type": "variable"}, {"name": "mappedAddress", "type": "variable"}, {"name": "sourceAddress", "type": "variable"}, {"name": "changedAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of Message objects."}, {"name": "testGetAttributeCount", "primary_tested": ["Message.getAttributeCount()"], "external_dependencies": {"modules": ["Message"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests counting attributes in a Message object."}, {"name": "testRemoveAttribute", "primary_tested": ["Message.removeAttribute(int)"], "external_dependencies": {"modules": ["Message"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "changeRequest", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing attributes from a Message object."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestRecvWindow.java", "testclass_name": "PseudoTcpTestRecvWindow", "dependencies": ["package org.ice4j.pseudotcp;", "import java.io.*;", "import java.util.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.pseudotcp.util.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpTestRecvWindow", "description": "Tests for the PseudoTCP receive window functionality.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "send_stream", "type": "ByteFifoBuffer"}, {"name": "send_position", "type": "List<Integer>"}, {"name": "recv_stream", "type": "ByteFifoBuffer"}, {"name": "recv_position", "type": "List<Integer>"}, {"name": "writeTimer", "type": "Timer"}, {"name": "testDataSize", "type": "int"}], "methods": [{"name": "doTestTransfer", "signature": "void doTestTransfer(int)"}, {"name": "getShadowedBytes", "signature": "static int getShadowedBytes(int)"}, {"name": "readUntilIOPending", "signature": "void readUntilIOPending() throws IOException"}, {"name": "scheduleWriteAction", "signature": "void scheduleWriteAction(long)"}, {"name": "writeData", "signature": "void writeData() throws IOException"}, {"name": "estimateReceiveWindowSize", "signature": "int estimateReceiveWindowSize()"}, {"name": "estimateSendWindowSize", "signature": "int estimateSendWindowSize()"}, {"name": "onTcpReadable", "signature": "void onTcpReadable(PseudoTCPBase)"}, {"name": "onTcpWriteable", "signature": "void onTcpWriteable(PseudoTCPBase)"}, {"name": "setLocalOptSndBuf", "signature": "void setLocalOptSndBuf(int)"}, {"name": "getRemoteScaleFactor", "signature": "int getRemoteScaleFactor()"}]}, "fixtures": [], "test_cases": [{"name": "testGetShadowedBytes", "primary_tested": ["PseudoTcpTestRecvWindow.getShadowedBytes(int)"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"]}, "category": "unit", "description": "Tests the calculation of shadowed bytes based on scale factor."}, {"name": "testReceiveWindow", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of the receive window expanding and contracting correctly."}, {"name": "testSetVerySmallSendWindowSize", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)", "PseudoTcpTestRecvWindow.setOptSndBuf(int)", "PseudoTcpTestRecvWindow.estimateSendWindowSize()"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}, {"name": "estimateSendWindowSize", "type": "method"}]}, "category": "unit", "description": "Tests setting the send window size to a very small value."}, {"name": "testSetReceiveWindowSize", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)", "PseudoTcpTestRecvWindow.setLocalOptSndBuf(int)", "PseudoTcpTestRecvWindow.setRemoteOptRcvBuf(int)", "PseudoTcpTestRecvWindow.getRemoteScaleFactor()", "PseudoTcpTestRecvWindow.estimateReceiveWindowSize()"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}, {"name": "estimateReceiveWindowSize", "type": "method"}]}, "category": "unit", "description": "Tests setting the receive window size to a value other than default."}]}, {"file_path": "src/test/java/org/ice4j/MessageEventDispatchingTest.java", "testclass_name": "MessageEventDispatchingTest", "dependencies": ["package org.ice4j;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.message.*;", "import org.ice4j.socket.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "MessageEventDispatchingTest", "description": "Tests for message event dispatching in the StunStack.", "class_members": {"variables": [{"name": "stunStack", "type": "StunStack"}, {"name": "clientAddress", "type": "TransportAddress"}, {"name": "serverAddress", "type": "TransportAddress"}, {"name": "serverAddress2", "type": "TransportAddress"}, {"name": "clientSock", "type": "IceSocketWrapper"}, {"name": "serverSock", "type": "IceSocketWrapper"}, {"name": "serverSock2", "type": "IceSocketWrapper"}, {"name": "bindingRequest", "type": "Request"}, {"name": "bindingResponse", "type": "Response"}, {"name": "requestCollector", "type": "PlainRequestCollector"}, {"name": "responseCollector", "type": "PlainResponseCollector"}], "nested_classes": [{"name": "PlainRequestCollector", "description": "Utility class to collect incoming requests."}, {"name": "PlainResponseCollector", "description": "Utility class to collect incoming responses."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testClientTransactionTimeouts", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "StackProperties", "ResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests timeout events for client transactions."}, {"name": "testEventDispatchingUponIncomingRequests", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "RequestListener"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reception of message events upon incoming requests."}, {"name": "testSelectiveEventDispatchingUponIncomingRequests", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "RequestListener"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "serverAddress2", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests selective event dispatching upon incoming requests."}, {"name": "testServerResponseRetransmissions", "primary_tested": ["StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "RequestListener", "StunMessageEvent"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests server response retransmissions."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBufferTest.java", "testclass_name": "ByteFifoBufferTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import java.nio.*;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ByteFifoBufferTest", "description": "Unit tests for the ByteFifoBuffer class, covering various methods like length, read, write, and more.", "class_members": {"methods": [{"name": "getWData", "signature": "byte[] getWData(int count)"}]}, "fixtures": [], "test_cases": [{"name": "testLength", "primary_tested": ["ByteFifoBuffer.length()"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the length method of ByteFifoBuffer."}, {"name": "testRead", "primary_tested": ["ByteFifoBuffer.read(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the read method of ByteFifoBuffer."}, {"name": "testReadWithOffset", "primary_tested": ["ByteFifoBuffer.read(byte[],int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the read method with an offset for the destination buffer."}, {"name": "testGetWriteRemaining", "primary_tested": ["ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the getWriteRemaining method of ByteFifoBuffer."}, {"name": "testGetBuffered", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the getBuffered method of ByteFifoBuffer."}, {"name": "testWrite", "primary_tested": ["ByteFifoBuffer.write(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the write method of ByteFifoBuffer."}, {"name": "testWriteWithOffset", "primary_tested": ["ByteFifoBuffer.write(byte[],int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the write method with an offset."}, {"name": "testConsumeWriteBuffer", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the consumeWriteBuffer method of ByteFifoBuffer."}, {"name": "testSetCapacity", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the setCapacity method of ByteFifoBuffer."}, {"name": "testConsumeReadData", "primary_tested": ["ByteFifoBuffer.consumeReadData(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the consumeReadData method of ByteFifoBuffer."}, {"name": "testReadOffset", "primary_tested": ["ByteFifoBuffer.readOffset(byte[],int,int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the readOffset method of ByteFifoBuffer."}, {"name": "testWriteOffset", "primary_tested": ["ByteFifoBuffer.writeOffset(byte[],int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the writeOffset method of ByteFifoBuffer."}, {"name": "testWriteReadWriteRead", "primary_tested": ["ByteFifoBuffer.getWriteRemaining()", "ByteFifoBuffer.writeOffset(byte[],int,int)", "ByteFifoBuffer.consumeWriteBuffer(int)", "ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.readOffset(byte[],int,int,int)", "ByteFifoBuffer.consumeReadData(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests a sequence of write, read, and consume operations."}, {"name": "testSomeMultiTest", "primary_tested": ["ByteFifoBuffer.writeOffset(byte[],int,int)", "ByteFifoBuffer.consumeWriteBuffer(int)", "ByteFifoBuffer.readOffset(byte[],int,int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests multiple write and read operations with offsets."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttributeTest.java", "testclass_name": "ErrorCodeAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttributeTest", "description": "Unit tests for the ErrorCodeAttribute class, focusing on its encoding, decoding, and error code handling functionalities.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testErrorCodeAttribute", "primary_tested": ["ErrorCodeAttribute.getAttributeType()"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "Attribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the construction of ErrorCodeAttribute and verifies its attribute type."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ErrorCodeAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()", "ErrorCodeAttribute.getErrorNumber()", "ErrorCodeAttribute.getReasonPhrase()"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of binary arrays into ErrorCodeAttribute and verifies the correctness of the decoded values."}, {"name": "testEncode", "primary_tested": ["ErrorCodeAttribute.encode()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding of ErrorCodeAttribute into a binary array and verifies the correctness of the encoded values."}, {"name": "testEquals", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method of ErrorCodeAttribute against null, different, and identical objects."}, {"name": "testGetDataLength", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculation of the data length for ErrorCodeAttribute."}, {"name": "testGetErrorCode", "primary_tested": ["ErrorCodeAttribute.getErrorCode()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculation of the error code from error class and number."}, {"name": "testGetName", "primary_tested": ["ErrorCodeAttribute.getName()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the name for the ErrorCodeAttribute."}, {"name": "testSetErrorCode", "primary_tested": ["ErrorCodeAttribute.setErrorCode(char)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()", "ErrorCodeAttribute.getErrorNumber()"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setting of the error code and verifies the correctness of the error class and number."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java", "testclass_name": "RequestedAddressFamilyAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttributeTest", "description": "Unit tests for the RequestedAddressFamilyAttribute class, focusing on data length calculation, name retrieval, equality checks, decoding, encoding, and family value validation.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.getDataLength()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether data length is properly calculated."}, {"name": "testGetName", "primary_tested": ["RequestedAddressFamilyAttribute.getName()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests getting the name."}, {"name": "testEqualsObject", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different and an identical object."}, {"name": "testDecodeAttributeBodyV4", "primary_tested": ["RequestedAddressFamilyAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether sample binary arrays are correctly decoded."}, {"name": "testDecodeAttributeBodyV6", "primary_tested": ["RequestedAddressFamilyAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether sample binary arrays are correctly decoded."}, {"name": "testEncodeV4", "primary_tested": ["RequestedAddressFamilyAttribute.encode()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether attributes are properly encoded."}, {"name": "testEncodeV6", "primary_tested": ["RequestedAddressFamilyAttribute.encode()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether attributes are properly encoded."}, {"name": "testGetFamily", "primary_tested": ["RequestedAddressFamilyAttribute.getFamily()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the address family is always 0x01 or 0x02."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttributeTest.java", "testclass_name": "UnknownAttributesAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttributeTest", "description": "Unit tests for the UnknownAttributesAttribute class, focusing on attribute type, attribute ID management, encoding, decoding, and equality checks.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}, {"name": "binMessagesFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testUnknownAttributesAttribute", "primary_tested": ["UnknownAttributesAttribute.getAttributeType()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "Attribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the constructed object has the correct (UNKNOWN-ATTRIBUTES) type."}, {"name": "testAddAttributeID", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttribute(int)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the passed attribute id is added to the list of attributes and that a second addition of the same id does not augment the attribute count."}, {"name": "testDecodeAttributeBody", "primary_tested": ["UnknownAttributesAttribute.decodeAttributeBody(byte[],int,char)", "UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "Attribute", "MsgFixture", "StunException"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether a sample binary array is properly decoded."}, {"name": "testEncode", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.encode()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "MsgFixture"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Creates a new UnknownAttributesAttribute, encodes it, and asserts equality with binMessagesFixture.unknownAttsEncodeExpectedResult."}, {"name": "testEquals", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttribute(int)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that getAttribute() returns the correct attribute id, preserving entry order."}, {"name": "testGetAttributeCount", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Adds some attributes and tests whether their number is properly calculated. Tests duplicate id handling as well."}, {"name": "testGetAttributes", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttributes()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Same as testGetAttributeID, only attribute attributes are extracted through the getAttributes()'s iterator."}, {"name": "testGetDataLength", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getDataLength()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Adds a fixed number of attributes and checks data length accordingly. Test is first performed for an odd number of attributes and then again (after adding another attribute id). Both results should be the same."}, {"name": "testGetName", "primary_tested": ["UnknownAttributesAttribute.getName()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether getName returns a relevant name."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestPingPong.java", "testclass_name": "PseudoTcpTestPingPong", "dependencies": ["package org.ice4j.pseudotcp;", "import java.io.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.pseudotcp.util.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpTestPingPong", "description": "Tests for ping-pong (request/response) scenarios using PseudoTCPBase.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "sender", "type": "PseudoTCPBase"}, {"name": "receiver", "type": "PseudoTCPBase"}, {"name": "bytesPerSend", "type": "int"}, {"name": "iterationsRemaining", "type": "int"}, {"name": "send_stream", "type": "ByteFifoBuffer"}, {"name": "recv_stream", "type": "ByteFifoBuffer"}], "methods": [{"name": "setBytesPerSend", "signature": "void setBytesPerSend(int)"}, {"name": "doTestPingPong", "signature": "void doTestPingPong(int, int)"}, {"name": "onTcpReadable", "signature": "void onTcpReadable(PseudoTCPBase)"}, {"name": "onTcpWriteable", "signature": "void onTcpWriteable(PseudoTCPBase)"}, {"name": "readData", "signature": "void readData() throws IOException"}, {"name": "writeData", "signature": "void writeData() throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPingPong1xMtu", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending <= 1x MTU of data in each ping/pong. Should take <10ms."}, {"name": "testPingPong3xMtu", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending 2x-3x MTU of data in each ping/pong. Should take <10ms."}, {"name": "testPingPong2xMtu", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending 1x-2x MTU of data in each ping/pong. Should take ~1s, due to interaction between Nagling and Delayed ACK."}, {"name": "testPingPong2xMtuWithAckDelayOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending 1x-2x MTU of data in each ping/pong with Delayed ACK off. Should take <10ms."}, {"name": "testPingPong2xMtuWithNaglingOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending 1x-2x MTU of data in each ping/pong with Nagling off. Should take <10ms."}, {"name": "testPingPongShortSegments", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending a ping as pair of short (non-full) segments. Should take ~1s, due to Delayed ACK interaction with Nagling."}, {"name": "testPingPongShortSegmentsWithNaglingOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending ping as a pair of short (non-full) segments, with Nagling off. Should take <10ms."}, {"name": "testPingPongShortSegmentsWithAckDelayOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "doTestPingPong", "type": "method"}]}, "category": "unit", "description": "Test sending <= 1x MTU of data ping/pong, in two segments, no Delayed ACK. Should take ~1s."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/StunAddressDiscovererTest_v4v6.java", "testclass_name": "StunAddressDiscovererTest_v4v6", "dependencies": ["package org.ice4j.stunclient;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "StunAddressDiscovererTest_v4v6", "description": "Tests for the StunAddressDiscoverer class, focusing on recognizing different NAT types and public addresses in IPv4 and IPv6 environments.", "class_members": {"variables": [{"name": "stunAddressDiscoverer_v6", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "stunAddressDiscoverer_v4", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "discovererAddress_v4", "type": "TransportAddress"}, {"name": "discovererAddress_v6", "type": "TransportAddress"}, {"name": "responseServer_v6", "type": "ResponseSequenceServer"}, {"name": "responseServer_v4", "type": "ResponseSequenceServer"}, {"name": "responseServerAddress_v6", "type": "TransportAddress"}, {"name": "responseServerAddress_v4", "type": "TransportAddress"}, {"name": "mappedClientAddress_v6", "type": "TransportAddress"}, {"name": "mappedClientAddress_v6_Port2", "type": "TransportAddress"}, {"name": "mappedClientAddress_v4", "type": "TransportAddress"}, {"name": "mappedClientAddress_v4_Port2", "type": "TransportAddress"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRecognizeSymmetricNat_Local_v6_Public_v4", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v6", "type": "variable"}, {"name": "responseServer_v6", "type": "variable"}, {"name": "mappedClientAddress_v4", "type": "variable"}, {"name": "mappedClientAddress_v4_Port2", "type": "variable"}, {"name": "responseServerAddress_v6", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Symmetric NAT in an IPv6 local and IPv4 public environment."}, {"name": "testRecognizeSymmetricNat_Local_v4_Public_v6", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v4", "type": "variable"}, {"name": "responseServer_v4", "type": "variable"}, {"name": "mappedClientAddress_v6", "type": "variable"}, {"name": "mappedClientAddress_v6_Port2", "type": "variable"}, {"name": "responseServerAddress_v4", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Symmetric NAT in an IPv4 local and IPv6 public environment."}, {"name": "testRecognizeFullCone_Local_v6_Public_v4", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v6", "type": "variable"}, {"name": "responseServer_v6", "type": "variable"}, {"name": "mappedClientAddress_v4", "type": "variable"}, {"name": "responseServerAddress_v6", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Full Cone NAT in an IPv6 local and IPv4 public environment."}, {"name": "testRecognizeFullCone_Local_v4_Public_v6", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v4", "type": "variable"}, {"name": "responseServer_v4", "type": "variable"}, {"name": "mappedClientAddress_v6", "type": "variable"}, {"name": "responseServerAddress_v4", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Full Cone NAT in an IPv4 local and IPv6 public environment."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/StunAddressDiscovererTest_v6.java", "testclass_name": "StunAddressDiscovererTest_v6", "dependencies": ["package org.ice4j.stunclient;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "StunAddressDiscovererTest_v6", "description": "Unit tests for the StunAddressDiscoverer to determine network configurations and NAT types.", "class_members": {"variables": [{"name": "stunAddressDiscoverer", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "discovererAddress", "type": "TransportAddress"}, {"name": "responseServer", "type": "ResponseSequenceServer"}, {"name": "responseServerAddress", "type": "TransportAddress"}, {"name": "mappedClientAddress", "type": "TransportAddress"}, {"name": "mappedClientAddressPort2", "type": "TransportAddress"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRecognizeBlockedUDP", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a blocked UDP environment."}, {"name": "testRecognizeSymmetricNat", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "mappedClientAddressPort2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Symmetric NAT environment."}, {"name": "testRecognizePortRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Port Restricted Cone NAT environment."}, {"name": "testRecognizeRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Restricted Cone NAT environment."}, {"name": "testRecognizeFullCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Full Cone NAT environment."}, {"name": "testRecognizeUdpSymmetricFirewall", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a UDP Symmetric Firewall environment."}, {"name": "testRecognizeOpenInternet", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of an Open Internet environment."}]}, {"file_path": "src/test/java/org/ice4j/attribute/AddressAttributeTest.java", "testclass_name": "AddressAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "AddressAttributeTest", "description": "Unit tests for AddressAttribute and its descendants, focusing on type, name, xor-ing, decoding, encoding, equality, data length, and family.", "class_members": {"variables": [{"name": "addressAttribute", "type": "AddressAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testAddressAttributeDescendants", "primary_tested": ["AddressAttribute.getAttributeType()", "AddressAttribute.getName()"], "associated_methods": [], "external_dependencies": {"modules": ["MappedAddressAttribute", "SourceAddressAttribute", "ChangedAddressAttribute", "ResponseAddressAttribute", "ReflectedFromAttribute", "XorMappedAddressAttribute", "AlternateServerAttribute", "XorPeerAddressAttribute", "XorRelayedAddressAttribute"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that AddressAttribute descendants have correctly set types and names."}, {"name": "testXorMappedAddressXoring_v4", "primary_tested": ["XorMappedAddressAttribute.applyXor(byte[])"], "associated_methods": [], "external_dependencies": {"modules": ["XorMappedAddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that xorred address-es are properly xor-ed for IPv4 addresses."}, {"name": "testXorMappedAddressXoring_v6", "primary_tested": ["XorMappedAddressAttribute.applyXor(byte[])"], "associated_methods": [], "external_dependencies": {"modules": ["XorMappedAddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that xorred address-es are properly xor-ed for IPv6 addresses."}, {"name": "testDecodeAttributeBody", "primary_tested": ["AddressAttribute.decodeAttributeBody(byte[], char, char)"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded."}, {"name": "testDecodeAttributeBodyv6", "primary_tested": ["AddressAttribute.decodeAttributeBody(byte[], char, char)"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded for IPv6."}, {"name": "testEncode", "primary_tested": ["AddressAttribute.encode()"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded."}, {"name": "testEncodev6", "primary_tested": ["AddressAttribute.encode()"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded for IPv6."}, {"name": "testEquals", "primary_tested": ["AddressAttribute.equals(Object)"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "MappedAddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetDataLength", "primary_tested": ["AddressAttribute.getDataLength()"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether data length is properly calculated."}, {"name": "testGetFamily", "primary_tested": ["AddressAttribute.getFamily()"], "associated_methods": [], "external_dependencies": {"modules": ["AddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the address family is always 1 for IPv4 and 2 for IPv6."}]}, {"file_path": "src/test/java/org/ice4j/stack/ShallowStackTest.java", "testclass_name": "ShallowStackTest", "dependencies": [" package org.ice4j.stack;", "import java.net.*;", "import java.util.concurrent.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.socket.*;", "import org.jitsi.config.*;", "import org.junit.jupiter.api.*;"], "name": "ShallowStackTest", "description": "Unit tests for the ShallowStack functionality, including sending and receiving STUN requests and responses.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "stunStack", "type": "StunStack"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "dummyServerAddress", "type": "TransportAddress"}, {"name": "localAddress", "type": "TransportAddress"}, {"name": "dgramCollector", "type": "final DatagramCollector"}, {"name": "localSock", "type": "IceSocketWrapper"}, {"name": "dummyServerSocket", "type": "DatagramSocket"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "tearDown", "signature": "void tearDown() throws Exception"}], "nested_classes": [{"name": "SimpleResponseCollector", "description": "A utility class for asynchronously collecting responses."}, {"name": "SimpleRequestCollector", "description": "A utility class for asynchronously collecting requests."}]}, "fixtures": ["setupConfig", "resetConfig", "setUp", "tearDown"], "test_cases": [{"name": "testSendRequest", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["DatagramCollector.startListening(DatagramSocket)", "DatagramCollector.waitForPacket(int)", "DatagramCollector.collectPacket()"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "DatagramCollector", "Request", "SimpleResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerAddress", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "dgramCollector", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests sending a binding request using the stack to a bare socket and verifies its reception and content."}, {"name": "testReceiveRequest", "primary_tested": ["StunStack.addRequestListener(RequestListener)"], "associated_methods": ["SimpleRequestCollector.waitForRequest()"], "external_dependencies": {"modules": ["StunStack", "DatagramSocket", "SimpleRequestCollector", "Request"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests receiving a binding request through a datagram socket and verifies that the stack processes it correctly."}, {"name": "testSendResponse", "primary_tested": ["StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["DatagramCollector.startListening(DatagramSocket)", "DatagramCollector.waitForPacket()", "DatagramCollector.collectPacket()"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "DatagramCollector", "Response", "SimpleRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "dummyServerAddress", "type": "variable"}, {"name": "dgramCollector", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests sending a binding response using the stack after receiving a request and verifies its reception and content."}, {"name": "testReceiveResponse", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["SimpleResponseCollector.waitForResponse()"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "SimpleResponseCollector", "Response"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "dummyServerAddress", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests receiving a binding response after sending a request and verifies its content."}, {"name": "testRetransmissionOriginalWait", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["DatagramCollector.startListening(DatagramSocket)", "DatagramCollector.waitForPacket(int)", "DatagramCollector.collectPacket()"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "DatagramCollector", "Request", "SimpleResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerAddress", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "dgramCollector", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retransmission mechanism by setting a custom retransmission wait time and verifying it."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/StunAddressDiscovererTest.java", "testclass_name": "StunAddressDiscovererTest", "dependencies": ["package org.ice4j.stunclient;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "StunAddressDiscovererTest", "description": "Unit tests for the StunAddressDiscoverer class, which determines the NAT type and public address of the client.", "class_members": {"variables": [{"name": "stunAddressDiscoverer", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "discovererAddress", "type": "TransportAddress"}, {"name": "responseServer", "type": "ResponseSequenceServer"}, {"name": "responseServerAddress", "type": "TransportAddress"}, {"name": "mappedClientAddress", "type": "TransportAddress"}, {"name": "mappedClientAddressPort2", "type": "TransportAddress"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRecognizeBlockedUDP", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes that UDP is blocked."}, {"name": "testRecognizeSymmetricNat", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "mappedClientAddressPort2", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Symmetric NAT."}, {"name": "testRecognizePortRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Port Restricted Cone NAT."}, {"name": "testRecognizeRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Restricted Cone NAT."}, {"name": "testRecognizeFullCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Full Cone NAT."}, {"name": "testRecognizeUdpSymmetricFirewall", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a UDP Symmetric Firewall."}, {"name": "testRecognizeOpenInternet", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is on an Open Internet."}]}, {"file_path": "src/test/java/org/ice4j/TransactionSupportTests.java", "testclass_name": "TransactionSupportTests", "dependencies": ["package org.ice4j;", "import java.net.*;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.message.*;", "import org.ice4j.socket.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "TransactionSupportTests", "description": "Tests for transaction support in the STUN stack, focusing on retransmissions and configuration parameters.", "class_members": {"variables": [{"name": "clientAddress", "type": "TransportAddress"}, {"name": "serverAddress", "type": "TransportAddress"}, {"name": "clientSock", "type": "IceSocketWrapper"}, {"name": "serverSock", "type": "IceSocketWrapper"}, {"name": "stunStack", "type": "StunStack"}, {"name": "bindingRequest", "type": "Request"}, {"name": "bindingResponse", "type": "Response"}, {"name": "requestCollector", "type": "PlainRequestCollector"}, {"name": "responseCollector", "type": "PlainResponseCollector"}], "methods": [], "nested_classes": [{"name": "PlainRequestCollector", "description": "Utility for asynchronous collection of requests."}, {"name": "PlainResponseCollector", "description": "Utility for asynchronously collecting responses."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testClientRetransmissions", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.MAX_CTRAN_RETRANS_TIMER"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that requests are retransmitted if no response is received."}, {"name": "testServerRetransmissionHiding", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that retransmissions are not seen by the server user and that it only gets a single request."}, {"name": "testServerResponseRetransmissions", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)", "StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])", "PlainResponseCollector.receivedResponses"], "external_dependencies": {"modules": ["StunStack", "Request", "Response", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "PlainResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.MAX_CTRAN_RETRANS_TIMER", "StackProperties.KEEP_CRANS_AFTER_A_RESPONSE"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that once a request has been answered by the server, retransmissions of this request are not propagated to the UA and are automatically handled with a retransmission of the last seen response."}, {"name": "testUniqueIDs", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)", "StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "Response", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that transaction IDs are unique."}, {"name": "testClientTransactionMaxRetransmisssionsConfigurationParameter", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the properties for configuring the maximum number of retransmissions in a transaction are working properly."}, {"name": "testMinWaitIntervalConfigurationParameter", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.FIRST_CTRAN_RETRANS_AFTER", "StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the properties for configuring the minimum transaction wait interval is working properly."}, {"name": "testMaxWaitIntervalConfigurationParameter", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANS_TIMER", "StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the properties for configuring the maximum transaction wait interval is working properly."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestTransfer.java", "testclass_name": "PseudoTcpTestTransfer", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.*;", "import java.util.logging.*;", "import org.junit.jupiter.api.*;"]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createConnectionBindResponseTest.java", "testclass_name": "MessageFactory_createConnectionBindResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import org.ice4j.message.MessageFactory;", "import org.ice4j.message.Response;"], "name": "MessageFactory_createConnectionBindResponseTest", "description": "Unit test for the createConnectionBindResponse method in MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateConnectionBindResponse", "primary_tested": ["MessageFactory.createConnectionBindResponse()"], "associated_methods": ["Response.getMessageType()"], "external_dependencies": {"modules": ["MessageFactory", "Response", "Message"]}, "category": "unit", "description": "Tests the creation of a connection bind response and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createCreatePermissionResponseTest.java", "testclass_name": "MessageFactory_createCreatePermissionResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;", "import org.ice4j.message.Message;"], "name": "MessageFactory_createCreatePermissionResponseTest", "description": "Unit test for creating a Create Permission Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateCreatePermissionResponse", "primary_tested": ["MessageFactory.createCreatePermissionResponse()"], "associated_methods": ["Response.getMessageType()"], "external_dependencies": {"modules": ["MessageFactory", "Response", "Message"]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a Create Permission Response and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createSharedSecretRequestTest.java", "testclass_name": "MessageFactory_createSharedSecretRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "MessageFactory_createSharedSecretRequestTest", "description": "Test for the creation of a Shared Secret Request using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateSharedSecretRequest", "primary_tested": ["MessageFactory.createSharedSecretRequest()"], "external_dependencies": {"modules": ["MessageFactory", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation of a Shared Secret Request using MessageFactory, expecting an UnsupportedOperationException with a specific message."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createSharedSecretErrorResponseTest.java", "testclass_name": "MessageFactory_createSharedSecretErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createSharedSecretErrorResponseTest", "description": "Test for the creation of a Shared Secret Error Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateSharedSecretErrorResponse", "primary_tested": ["MessageFactory.createSharedSecretErrorResponse()"], "external_dependencies": {"modules": ["MessageFactory", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation of a Shared Secret Error Response using MessageFactory, expecting an UnsupportedOperationException with a specific message."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createSharedSecretResponseTest.java", "testclass_name": "MessageFactory_createSharedSecretResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "MessageFactory_createSharedSecretResponseTest", "description": "Test for creating a shared secret request using MessageFactory.", "test_cases": [{"name": "testCreateSharedSecretRequest", "primary_tested": ["MessageFactory.createSharedSecretRequest()"], "external_dependencies": {"modules": ["MessageFactory"]}, "category": "unit", "description": "Tests that creating a shared secret request throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createChannelBindResponseTest.java", "testclass_name": "MessageFactory_createChannelBindResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "MessageFactory_createChannelBindResponseTest", "description": "Unit test for the creation of a Channel Bind Response using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateChannelBindResponse", "primary_tested": ["MessageFactory.createChannelBindResponse()"], "external_dependencies": {"modules": ["MessageFactory", "Response", "Message"]}, "category": "unit", "description": "Tests the creation of a Channel Bind Response and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createAllocationErrorResponseTest.java", "testclass_name": "MessageFactory_createAllocationErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createAllocationErrorResponseTest", "description": "Unit tests for creating allocation error responses using MessageFactory.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateAllocationErrorResponse_WithErrorCode", "primary_tested": ["MessageFactory.createAllocationErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of an allocation error response with a specific error code."}]}, {"file_path": "src/test/java/org/ice4j/stack/StunStack_getPacketLoggerTest.java", "testclass_name": "StunStack_getPacketLoggerTest", "dependencies": ["package org.ice4j.stack;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "StunStack_getPacketLoggerTest", "description": "Unit test for the getPacketLogger method in the StunStack class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetPacketLogger", "primary_tested": ["StunStack.getPacketLogger()"], "external_dependencies": {"modules": ["PacketLogger", "StunStack"]}, "category": "unit", "description": "Tests the retrieval of the PacketLogger instance from the StunStack class."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createBindingIndicationTest.java", "testclass_name": "MessageFactory_createBindingIndicationTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createBindingIndicationTest", "description": "Unit test for the creation of a binding indication message using MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateBindingIndication", "primary_tested": ["MessageFactory.createBindingIndication()"], "external_dependencies": {"modules": ["Indication", "MessageFactory", "Message"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a binding indication message and verifies its message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createRefreshRequestTest.java", "testclass_name": "MessageFactory_createRefreshRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createRefreshRequestTest", "description": "Unit test for the creation of a refresh request using MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateRefreshRequest", "primary_tested": ["MessageFactory.createRefreshRequest()"], "external_dependencies": {"modules": ["Request", "MessageFactory", "Message"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a refresh request using MessageFactory and verifies the message type."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createCreatePermissionErrorResponseTest.java", "testclass_name": "MessageFactory_createCreatePermissionErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createCreatePermissionErrorResponseTest", "description": "Unit test for creating a Create Permission Error Response using MessageFactory.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCreateCreatePermissionErrorResponse", "primary_tested": ["MessageFactory.createCreatePermissionErrorResponse(char)"], "associated_methods": ["Response.isErrorResponse()"], "external_dependencies": {"modules": ["MessageFactory", "Response"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a Create Permission Error Response and verifies it is an error response."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createBindingErrorResponseTest.java", "testclass_name": "MessageFactory_createBindingErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createBindingErrorResponseTest", "description": "Unit test for the createBindingErrorResponse method in the MessageFactory class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateBindingErrorResponse", "primary_tested": ["MessageFactory.createBindingErrorResponse(char,String)"], "associated_methods": ["Response.setMessageType(char)", "Response.putAttribute(ErrorCodeAttribute)"], "external_dependencies": {"modules": ["Response", "MessageFactory", "ErrorCodeAttribute", "AttributeFactory"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a binding error response using the MessageFactory class."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createConnectionBindErrorResponseTest.java", "testclass_name": "MessageFactory_createConnectionBindErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.message.MessageFactory;", "import org.ice4j.message.Response;"], "name": "MessageFactory_createConnectionBindErrorResponseTest", "description": "Unit tests for the createConnectionBindErrorResponse method in the MessageFactory class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateConnectionBindErrorResponse_WithErrorCode", "primary_tested": ["MessageFactory.createConnectionBindErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a connection bind error response with a specific error code."}, {"name": "testCreateConnectionBindErrorResponse_WithNullReasonPhrase", "primary_tested": ["MessageFactory.createConnectionBindErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a connection bind error response with a specific error code and no reason phrase."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_getNameTest.java", "testclass_name": "RequestedAddressFamilyAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_getNameTest", "description": "Unit tests for the getName method of RequestedAddressFamilyAttribute.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["RequestedAddressFamilyAttribute.getName()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName functionality of the RequestedAddressFamilyAttribute to ensure it returns the expected attribute name."}]}, {"file_path": "src/test/java/org/ice4j/stack/StunStack_getCredentialsManagerTest.java", "testclass_name": "StunStack_getCredentialsManagerTest", "dependencies": ["package org.ice4j.stack;", "import org.ice4j.security.CredentialsManager;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StunStack_getCredentialsManagerTest", "description": "Unit tests for the getCredentialsManager method in the StunStack class.", "class_members": {"variables": [{"name": "stunStack", "type": "StunStack"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetCredentialsManager", "primary_tested": ["StunStack.getCredentialsManager()"], "external_dependencies": {"modules": ["StunStack", "CredentialsManager"], "class_members": [{"name": "stunStack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the getCredentialsManager method returns a non-null CredentialsManager instance."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UsernameAttribute_getNameTest.java", "testclass_name": "UsernameAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UsernameAttribute_getNameTest", "description": "Unit tests for the getName method of the UsernameAttribute class.", "class_members": {"variables": [{"name": "usernameAttribute", "type": "UsernameAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["UsernameAttribute.getName()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the UsernameAttribute class to ensure it returns 'USERNAME'."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_getNameTest.java", "testclass_name": "ConnectionIdAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ConnectionIdAttribute_getNameTest", "description": "Unit tests for the getName method of ConnectionIdAttribute.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["ConnectionIdAttribute.getName()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName functionality of the ConnectionIdAttribute."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createConnectErrorResponseTest.java", "testclass_name": "MessageFactory_createConnectErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createConnectErrorResponseTest", "description": "Unit tests for the MessageFactory.createConnectErrorResponse method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCreateConnectErrorResponse_withErrorCode", "primary_tested": ["MessageFactory.createConnectErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a Connect Error Response with a specific error code."}, {"name": "testCreateConnectErrorResponse_withNullReasonPhrase", "primary_tested": ["MessageFactory.createConnectErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a Connect Error Response with a specific error code and checks if it is an error response."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getNameTest.java", "testclass_name": "ErrorCodeAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getNameTest", "description": "Unit tests for the getName method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["ErrorCodeAttribute.getName()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the ErrorCodeAttribute to ensure it returns 'ERROR-CODE'."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_getNameTest.java", "testclass_name": "ChangeRequestAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ChangeRequestAttribute_getNameTest", "description": "Unit tests for the getName method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["ChangeRequestAttribute.getName()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the ChangeRequestAttribute class to ensure it returns the expected string 'CHANGE-REQUEST'."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createAllocateRequestTest.java", "testclass_name": "MessageFactory_createAllocateRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createAllocateRequestTest", "description": "Unit test for the creation of an allocate request using MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateAllocateRequest", "primary_tested": ["MessageFactory.createAllocateRequest()"], "associated_methods": ["Request.setMessageType(int)", "Request.getMessageType()"], "external_dependencies": {"modules": ["MessageFactory", "Request", "Message"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of an allocate request using MessageFactory and verifies the message type."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_getDataLengthTest.java", "testclass_name": "RequestedAddressFamilyAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of RequestedAddressFamilyAttribute.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.getDataLength()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of RequestedAddressFamilyAttribute to ensure the data length is properly calculated."}]}, {"file_path": "src/test/java/org/ice4j/attribute/XorOnlyAttribute_getDataLengthTest.java", "testclass_name": "XorOnlyAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "XorOnlyAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the XorOnlyAttribute class.", "class_members": {"variables": [{"name": "xorOnly", "type": "XorOnlyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["XorOnlyAttribute.getDataLength()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the XorOnlyAttribute class, asserting that it returns 0."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_getAttributeTest.java", "testclass_name": "UnknownAttributesAttribute_getAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_getAttributeTest", "description": "Unit tests for the getAttribute method of UnknownAttributesAttribute.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetAttribute", "primary_tested": ["UnknownAttributesAttribute.getAttribute(int)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getAttribute method of UnknownAttributesAttribute to ensure it returns the correct attribute ID at the specified index."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_getFamilyTest.java", "testclass_name": "RequestedAddressFamilyAttribute_getFamilyTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_getFamilyTest", "description": "Unit tests for the getFamily method of the RequestedAddressFamilyAttribute class.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetFamily", "primary_tested": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getFamily method of the RequestedAddressFamilyAttribute class to ensure it returns the expected family value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_getConnectionIdValueTest.java", "testclass_name": "ConnectionIdAttribute_getConnectionIdValueTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ConnectionIdAttribute_getConnectionIdValueTest", "description": "Unit tests for the getConnectionIdValue method of ConnectionIdAttribute.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.getConnectionIdValue()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getConnectionIdValue method of ConnectionIdAttribute to ensure it returns the expected value after setting it."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getErrorCodeTest.java", "testclass_name": "ErrorCodeAttribute_getErrorCodeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getErrorCodeTest", "description": "Unit tests for the getErrorCode method in the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetErrorCode", "primary_tested": ["ErrorCodeAttribute.getErrorCode()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculation of the error code in the ErrorCodeAttribute class."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createRefreshErrorResponseTest.java", "testclass_name": "MessageFactory_createRefreshErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createRefreshErrorResponseTest", "description": "Unit tests for the MessageFactory's createRefreshErrorResponse method with different parameters.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCreateRefreshErrorResponse_WithErrorCode", "primary_tested": ["MessageFactory.createRefreshErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a refresh error response with just an error code."}, {"name": "testCreateRefreshErrorResponse_WithErrorCodeAndReasonPhrase", "primary_tested": ["MessageFactory.createRefreshErrorResponse(char,String)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a refresh error response with an error code and a reason phrase."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_getAttributesTest.java", "testclass_name": "UnknownAttributesAttribute_getAttributesTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_getAttributesTest", "description": "Unit tests for the getAttributes method of UnknownAttributesAttribute.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetAttributes", "primary_tested": ["UnknownAttributesAttribute.getAttributes()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of attributes from UnknownAttributesAttribute and verifies the order and presence of added attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RealmAttribute_getDataLengthTest.java", "testclass_name": "RealmAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RealmAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the RealmAttribute class.", "class_members": {"variables": [{"name": "realmAttribute", "type": "RealmAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["RealmAttribute.getDataLength()"], "associated_methods": ["RealmAttribute.setRealm(byte[])"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the RealmAttribute class by setting a realm value and checking if the returned length matches the expected length."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_setChangePortFlagTest.java", "testclass_name": "ChangeRequestAttribute_setChangePortFlagTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ChangeRequestAttribute_setChangePortFlagTest", "description": "Unit tests for the setChangePortFlag method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetChangePortFlag", "primary_tested": ["ChangeRequestAttribute.setChangePortFlag(boolean)"], "associated_methods": ["ChangeRequestAttribute.getChangePortFlag()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setChangePortFlag method of the ChangeRequestAttribute class to ensure it correctly sets and retrieves the changePortFlag."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getErrorNumberTest.java", "testclass_name": "ErrorCodeAttribute_getErrorNumberTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getErrorNumberTest", "description": "Unit tests for the getErrorNumber method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetErrorNumber", "primary_tested": ["ErrorCodeAttribute.getErrorNumber()"], "associated_methods": ["ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getErrorNumber method of the ErrorCodeAttribute class by setting an error number and verifying the returned value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_setReasonPhraseTest.java", "testclass_name": "ErrorCodeAttribute_setReasonPhraseTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_setReasonPhraseTest", "description": "Unit tests for the setReasonPhrase method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetReasonPhrase", "primary_tested": ["ErrorCodeAttribute.setReasonPhrase(String)"], "associated_methods": ["ErrorCodeAttribute.getReasonPhrase()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setReasonPhrase method of the ErrorCodeAttribute class by setting a custom reason phrase and verifying it using the getReasonPhrase method."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_getChangePortFlagTest.java", "testclass_name": "ChangeRequestAttribute_getChangePortFlagTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ChangeRequestAttribute_getChangePortFlagTest", "description": "Unit tests for the getChangePortFlag method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetChangePortFlag", "primary_tested": ["ChangeRequestAttribute.getChangePortFlag()"], "associated_methods": ["ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getChangePortFlag method of the ChangeRequestAttribute class to ensure it returns the correct value based on the setChangePortFlag method."}]}, {"file_path": "src/test/java/org/ice4j/attribute/SoftwareAttribute_getDataLengthTest.java", "testclass_name": "SoftwareAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "SoftwareAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the SoftwareAttribute class.", "class_members": {"variables": [{"name": "softwareAttribute", "type": "SoftwareAttribute"}, {"name": "softwareValue", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["SoftwareAttribute.getDataLength()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the SoftwareAttribute class to ensure it returns the correct length of the software value."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createChannelBindErrorResponseTest.java", "testclass_name": "MessageFactory_createChannelBindErrorResponseTest", "dependencies": ["package org.ice4j.message;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MessageFactory_createChannelBindErrorResponseTest", "description": "Unit tests for the MessageFactory's createChannelBindErrorResponse method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCreateChannelBindErrorResponse_WithErrorCode", "primary_tested": ["MessageFactory.createChannelBindErrorResponse(char)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a Channel Bind Error Response with just an error code."}, {"name": "testCreateChannelBindErrorResponse_WithErrorCodeAndReasonPhrase", "primary_tested": ["MessageFactory.createChannelBindErrorResponse(char,String)"], "external_dependencies": {"modules": ["MessageFactory", "Response"]}, "category": "unit", "description": "Tests the creation of a Channel Bind Error Response with an error code and a reason phrase."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createAllocationResponseTest.java", "testclass_name": "MessageFactory_createAllocationResponseTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createAllocationResponseTest", "description": "Unit test for the createAllocationResponse method in the MessageFactory class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateAllocationResponse", "primary_tested": ["MessageFactory.createAllocationResponse(Request,TransportAddress,TransportAddress,TransportAddress,int)"], "associated_methods": ["AttributeFactory.createXorMappedAddressAttribute(TransportAddress,byte[])", "AttributeFactory.createXorRelayedAddressAttribute(TransportAddress,byte[])", "AttributeFactory.createLifetimeAttribute(int)"], "external_dependencies": {"modules": ["Request", "Response", "TransportAddress", "Transport", "Message", "AttributeFactory", "XorMappedAddressAttribute", "XorRelayedAddressAttribute", "LifetimeAttribute", "MessageFactory"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of an allocation response using the MessageFactory.createAllocationResponse method, ensuring that the response contains the correct attributes and matches the expected response."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactory_createGoogleAllocateRequestTest.java", "testclass_name": "MessageFactory_createGoogleAllocateRequestTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactory_createGoogleAllocateRequestTest", "description": "Unit test for the creation of a Google Allocate Request using MessageFactory.", "class_members": {"variables": [{"name": "username", "type": "String"}, {"name": "expectedRequest", "type": "Request"}, {"name": "actualRequest", "type": "Request"}]}, "test_cases": [{"name": "testCreateGoogleAllocateRequest", "primary_tested": ["MessageFactory.createGoogleAllocateRequest(String)"], "associated_methods": ["Request.setMessageType(int)", "Request.putAttribute(Attribute)", "AttributeFactory.createMagicCookieAttribute()", "AttributeFactory.createUsernameAttribute(String)", "Request.getMessageType()", "Request.getAttributes()"], "external_dependencies": {"modules": ["org.ice4j.Message", "org.ice4j.Request", "org.ice4j.attribute.AttributeFactory"], "class_members": [{"name": "username", "type": "variable"}, {"name": "expectedRequest", "type": "variable"}, {"name": "actualRequest", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a Google Allocate Request using MessageFactory and verifies the message type and attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_containsTest.java", "testclass_name": "UnknownAttributesAttribute_containsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_containsTest", "description": "Unit tests for the contains method of UnknownAttributesAttribute.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContains_AttributePresent", "primary_tested": ["UnknownAttributesAttribute.contains(char)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the contains method correctly identifies an attribute that is present."}, {"name": "testContains_AttributeNotPresent", "primary_tested": ["UnknownAttributesAttribute.contains(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the contains method correctly identifies an attribute that is not present."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getReasonPhraseTest.java", "testclass_name": "ErrorCodeAttribute_getReasonPhraseTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getReasonPhraseTest", "description": "Unit tests for the getReasonPhrase method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetReasonPhraseWithSetReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getReasonPhrase()"], "associated_methods": ["ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the getReasonPhrase method returns the correct reason phrase after it has been set."}, {"name": "testGetReasonPhraseWithNullReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getReasonPhrase()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the getReasonPhrase method returns null when no reason phrase has been set."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_setErrorClassTest.java", "testclass_name": "ErrorCodeAttribute_setErrorClassTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_setErrorClassTest", "description": "Unit tests for the setErrorClass method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetErrorClassValid", "primary_tested": ["ErrorCodeAttribute.setErrorClass(byte)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setErrorClass method with a valid error class."}, {"name": "testSetErrorClassInvalid", "primary_tested": ["ErrorCodeAttribute.setErrorClass(byte)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setErrorClass method with an invalid error class, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/ice4j/attribute/SoftwareAttribute_getNameTest.java", "testclass_name": "SoftwareAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "SoftwareAttribute_getNameTest", "description": "Unit tests for the getName method of the SoftwareAttribute class.", "class_members": {"variables": [{"name": "softwareAttribute", "type": "SoftwareAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["SoftwareAttribute.getName()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the SoftwareAttribute class to ensure it returns 'SOFTWARE'."}]}, {"file_path": "src/test/java/org/ice4j/attribute/NonceAttribute_getNameTest.java", "testclass_name": "NonceAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "NonceAttribute_getNameTest", "description": "Unit tests for the getName() method of the NonceAttribute class.", "class_members": {"variables": [{"name": "nonceAttribute", "type": "NonceAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["NonceAttribute.getName()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the getName() method of NonceAttribute returns 'NONCE'."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_nowTest.java", "testclass_name": "PseudoTCPBase_nowTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PseudoTCPBase_nowTest", "description": "Unit test for the now() method in PseudoTCPBase.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNow", "primary_tested": ["PseudoTCPBase.now()"], "external_dependencies": {"modules": ["PseudoTCPBase"]}, "category": "unit", "description": "Tests that the now() method in PseudoTCPBase returns a non-negative value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_getDataLengthTest.java", "testclass_name": "ConnectionIdAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ConnectionIdAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the ConnectionIdAttribute class.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["ConnectionIdAttribute.getDataLength()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the getDataLength method returns a data length of 4 bytes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UsernameAttribute_getDataLengthTest.java", "testclass_name": "UsernameAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UsernameAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the UsernameAttribute class.", "class_members": {"variables": [{"name": "usernameAttribute", "type": "UsernameAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["UsernameAttribute.getDataLength()"], "associated_methods": ["UsernameAttribute.setUsername(byte[])"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the UsernameAttribute class by setting a username and verifying the length."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_addAttributeIDTest.java", "testclass_name": "UnknownAttributesAttribute_addAttributeIDTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_addAttributeIDTest", "description": "Unit tests for the addAttributeID method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAttributeID_NewAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)"], "associated_methods": ["UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a new attribute ID to the UnknownAttributesAttribute."}, {"name": "testAddAttributeID_DuplicateAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)"], "associated_methods": ["UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a duplicate attribute ID to the UnknownAttributesAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/OptionalAttribute_getDataLengthTest.java", "testclass_name": "OptionalAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "OptionalAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the OptionalAttribute class.", "class_members": {"variables": [{"name": "optionalAttribute", "type": "OptionalAttribute"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["OptionalAttribute.getDataLength()"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the OptionalAttribute class to ensure it returns the correct length of the attribute value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getErrorClassTest.java", "testclass_name": "ErrorCodeAttribute_getErrorClassTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getErrorClassTest", "description": "Unit tests for the getErrorClass method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetErrorClass", "primary_tested": ["ErrorCodeAttribute.getErrorClass()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getErrorClass method of the ErrorCodeAttribute class by setting an error class and verifying the returned value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_getChangeIpFlagTest.java", "testclass_name": "ChangeRequestAttribute_getChangeIpFlagTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ChangeRequestAttribute_getChangeIpFlagTest", "description": "Unit tests for the getChangeIpFlag method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetChangeIpFlag", "primary_tested": ["ChangeRequestAttribute.getChangeIpFlag()"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getChangeIpFlag method when the flag is set to true."}, {"name": "testGetChangeIpFlagFalse", "primary_tested": ["ChangeRequestAttribute.getChangeIpFlag()"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getChangeIpFlag method when the flag is set to false."}]}, {"file_path": "src/test/java/org/ice4j/stack/StunStack_isPacketLoggerEnabledTest.java", "testclass_name": "StunStack_isPacketLoggerEnabledTest", "dependencies": ["package org.ice4j.stack;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "StunStack_isPacketLoggerEnabledTest", "description": "Tests for the StunStack.isPacketLoggerEnabled method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testIsPacketLoggerEnabled_LoggerEnabled", "primary_tested": ["StunStack.isPacketLoggerEnabled()"], "associated_methods": ["StunStack.setPacketLogger(PacketLogger)", "PacketLogger.isEnabled()"], "external_dependencies": {"modules": ["PacketLogger", "StunStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isPacketLoggerEnabled method when the logger is enabled."}, {"name": "testIsPacketLoggerEnabled_LoggerDisabled", "primary_tested": ["StunStack.isPacketLoggerEnabled()"], "associated_methods": ["StunStack.setPacketLogger(PacketLogger)", "PacketLogger.isEnabled()"], "external_dependencies": {"modules": ["PacketLogger", "StunStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isPacketLoggerEnabled method when the logger is disabled."}, {"name": "testIsPacketLoggerEnabled_LoggerNull", "primary_tested": ["StunStack.isPacketLoggerEnabled()"], "associated_methods": ["StunStack.setPacketLogger(PacketLogger)"], "external_dependencies": {"modules": ["StunStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isPacketLoggerEnabled method when the logger is null."}]}, {"file_path": "src/test/java/org/ice4j/attribute/OptionalAttribute_getNameTest.java", "testclass_name": "OptionalAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;", "import org.ice4j.MsgFixture;"], "name": "OptionalAttribute_getNameTest", "description": "Unit tests for the getName method of the OptionalAttribute class.", "class_members": {"variables": [{"name": "optionalAttribute", "type": "OptionalAttribute"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["OptionalAttribute.getName()"], "external_dependencies": {"modules": ["OptionalAttribute", "MsgFixture"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the OptionalAttribute class to ensure it returns the expected attribute name."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_getAckNotifyTest.java", "testclass_name": "PseudoTCPBase_getAckNotifyTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PseudoTCPBase_getAckNotifyTest", "description": "Unit test for the getAckNotify method in PseudoTCPBase.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetAckNotify", "primary_tested": ["PseudoTCPBase.getAckNotify()"], "external_dependencies": {"modules": ["PseudoTCPBase"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getAckNotify method of PseudoTCPBase to ensure it returns a non-null value."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_segToStrTest.java", "testclass_name": "PseudoTCPBase_segToStrTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PseudoTCPBase_segToStrTest", "description": "Unit tests for the segToStr method in PseudoTCPBase.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSegToStr", "primary_tested": ["PseudoTCPBase.segToStr(Segment)"], "external_dependencies": {"modules": ["Segment", "PseudoTCPBase"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the segToStr method of PseudoTCPBase to ensure it correctly formats a Segment object into a string."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RealmAttribute_getNameTest.java", "testclass_name": "RealmAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RealmAttribute_getNameTest", "description": "Unit tests for the getName method of the RealmAttribute class.", "class_members": {"variables": [{"name": "realmAttribute", "type": "RealmAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["RealmAttribute.getName()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the RealmAttribute class to ensure it returns 'REALM'."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_getMTUTest.java", "testclass_name": "PseudoTCPBase_getMTUTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "PseudoTCPBase_getMTUTest", "description": "Unit test for the getMTU method in PseudoTCPBase.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetMTU", "primary_tested": ["PseudoTCPBase.getMTU()"], "associated_methods": ["PseudoTCPBase.notifyMTU(int)"], "external_dependencies": {"modules": ["PseudoTCPBase"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getMTU method of PseudoTCPBase after setting the MTU value using notifyMTU."}]}, {"file_path": "src/test/java/org/ice4j/attribute/XorOnlyAttribute_getNameTest.java", "testclass_name": "XorOnlyAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "XorOnlyAttribute_getNameTest", "description": "Unit tests for the getName method of the XorOnlyAttribute class.", "class_members": {"variables": [{"name": "xorOnly", "type": "XorOnlyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["XorOnlyAttribute.getName()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the XorOnlyAttribute class."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_getM_rwnd_scaleTest.java", "testclass_name": "PseudoTCPBase_getM_rwnd_scaleTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "PseudoTCPBase_getM_rwnd_scaleTest", "description": "Unit test for the getM_rwnd_scale method in PseudoTCPBase class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetM_rwnd_scale", "primary_tested": ["PseudoTCPBase.getM_rwnd_scale()"], "external_dependencies": {"modules": ["PseudoTCPBase"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getM_rwnd_scale method of the PseudoTCPBase class."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_getNameTest.java", "testclass_name": "UnknownAttributesAttribute_getNameTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_getNameTest", "description": "Unit tests for the getName method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetName", "primary_tested": ["UnknownAttributesAttribute.getName()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getName method of the UnknownAttributesAttribute class."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_getDataLengthTest.java", "testclass_name": "ChangeRequestAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ChangeRequestAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["ChangeRequestAttribute.getDataLength()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the ChangeRequestAttribute class to ensure it returns the expected value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/NonceAttribute_getDataLengthTest.java", "testclass_name": "NonceAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "NonceAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the NonceAttribute class.", "class_members": {"variables": [{"name": "nonceAttribute", "type": "NonceAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["NonceAttribute.getDataLength()"], "associated_methods": ["NonceAttribute.setNonce(byte[])"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method of the NonceAttribute class to ensure it returns the correct length of the nonce."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_getAttributeCountTest.java", "testclass_name": "UnknownAttributesAttribute_getAttributeCountTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_getAttributeCountTest", "description": "Unit tests for the getAttributeCount method of UnknownAttributesAttribute.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetAttributeCount", "primary_tested": ["UnknownAttributesAttribute.getAttributeCount()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getAttributeCount method of UnknownAttributesAttribute by adding multiple attribute IDs and verifying the count."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_lengthTest.java", "testclass_name": "ByteFifoBuffer_lengthTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_lengthTest", "description": "Unit tests for the length method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "buffer", "type": "ByteFifoBuffer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLength", "primary_tested": ["ByteFifoBuffer.length()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "buffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the length method of the ByteFifoBuffer."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_setConnectionIdValueTest.java", "testclass_name": "ConnectionIdAttribute_setConnectionIdValueTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ConnectionIdAttribute_setConnectionIdValueTest", "description": "Unit tests for setting the connection ID value in ConnectionIdAttribute.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "associated_methods": ["ConnectionIdAttribute.getConnectionIdValue()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of setting the connection ID value in ConnectionIdAttribute and verifies if it is set correctly."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_getM_swnd_scaleTest.java", "testclass_name": "PseudoTCPBase_getM_swnd_scaleTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "PseudoTCPBase_getM_swnd_scaleTest", "description": "Unit test for the getM_swnd_scale method in PseudoTCPBase.", "class_members": {"variables": [{"name": "pseudoTCPBase", "type": "PseudoTCPBase"}]}, "fixtures": [], "test_cases": [{"name": "testGetM_swnd_scale", "primary_tested": ["PseudoTCPBase.getM_swnd_scale()"], "associated_methods": ["PseudoTCPBase.applyWindowScaleOption(short)"], "external_dependencies": {"modules": ["PseudoTCPBase"], "class_members": [{"name": "pseudoTCPBase", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the getM_swnd_scale method of PseudoTCPBase after applying a window scale option."}]}, {"file_path": "src/test/java/org/ice4j/stack/StunStack_logPacketToPcapTest.java", "testclass_name": "StunStack_logPacketToPcapTest", "dependencies": ["package org.ice4j.stack;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.net.DatagramPacket;", "import java.net.InetAddress;", "import java.net.UnknownHostException;", "import static org.mockito.Mockito.*;"], "name": "StunStack_logPacketToPcapTest", "description": "Unit tests for the logPacketToPcap method in the StunStack class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testLogPacketToPcap_PacketLoggerEnabled", "primary_tested": ["StunStack.logPacketToPcap(DatagramPacket,boolean,InetAddress,int)"], "associated_methods": ["PacketLogger.logPacket(byte[],int,byte[],int,byte[],boolean)"], "external_dependencies": {"modules": ["DatagramPacket", "InetAddress", "PacketLogger", "StunStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the logPacketToPcap method when the PacketLogger is enabled."}, {"name": "testLogPacketToPcap_PacketLoggerDisabled", "primary_tested": ["StunStack.logPacketToPcap(DatagramPacket,boolean,InetAddress,int)"], "associated_methods": ["PacketLogger.logPacket(byte[],int,byte[],int,byte[],boolean)"], "external_dependencies": {"modules": ["DatagramPacket", "InetAddress", "PacketLogger", "StunStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the logPacketToPcap method when the PacketLogger is disabled."}, {"name": "testLogPacketToPcap_InterfaceAddressNull", "primary_tested": ["StunStack.logPacketToPcap(DatagramPacket,boolean,InetAddress,int)"], "associated_methods": ["PacketLogger.logPacket(byte[],int,byte[],int,byte[],boolean)"], "external_dependencies": {"modules": ["DatagramPacket", "InetAddress", "PacketLogger", "StunStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the logPacketToPcap method when the interface address is null."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getDefaultReasonPhraseTest.java", "testclass_name": "ErrorCodeAttribute_getDefaultReasonPhraseTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getDefaultReasonPhraseTest", "description": "Unit tests for the getDefaultReasonPhrase method in the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDefaultReasonPhrase_KnownErrorCode", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method with a known error code."}, {"name": "testGetDefaultReasonPhrase_UnknownErrorCode", "primary_tested": ["ErrorCodeAttribute.getDefaultReasonPhrase(char)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDefaultReasonPhrase method with an unknown error code."}]}, {"file_path": "src/test/java/org/ice4j/ice/harvest/SinglePortUdpHarvester_isHostHarvesterTest.java", "testclass_name": "SinglePortUdpHarvester_isHostHarvesterTest", "dependencies": ["package org.ice4j.ice.harvest;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.IOException;"], "name": "SinglePortUdpHarvester_isHostHarvesterTest", "description": "Test for the isHostHarvester method in SinglePortUdpHarvester.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsHostHarvester", "primary_tested": ["SinglePortUdpHarvester.isHostHarvester()"], "external_dependencies": {"modules": ["SinglePortUdpHarvester", "IOException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isHostHarvester method of SinglePortUdpHarvester to ensure it returns true when instantiated with a null argument."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_getDataLengthTest.java", "testclass_name": "ErrorCodeAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLength_NoReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when no reason phrase is set."}, {"name": "testGetDataLength_WithReasonPhrase", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when a reason phrase is set."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_setFamilyTest.java", "testclass_name": "RequestedAddressFamilyAttribute_setFamilyTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_setFamilyTest", "description": "Unit tests for the setFamily method of the RequestedAddressFamilyAttribute class.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetFamilyValidIPv4", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setFamily method with a valid IPv4 family value."}, {"name": "testSetFamilyValidIPv6", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setFamily method with a valid IPv6 family value."}, {"name": "testSetFamilyInvalid", "primary_tested": ["RequestedAddressFamilyAttribute.setFamily(char)"], "associated_methods": ["RequestedAddressFamilyAttribute.getFamily()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setFamily method with an invalid family value."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_resetReadPositionTest.java", "testclass_name": "ByteFifoBuffer_resetReadPositionTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_resetReadPositionTest", "description": "Unit tests for the resetReadPosition method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "fifo", "type": "ByteFifoBuffer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testResetReadPosition", "primary_tested": ["ByteFifoBuffer.resetReadPosition()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.read(byte[],int)", "ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the resetReadPosition method of ByteFifoBuffer to ensure it correctly resets the read position and updates the buffered count."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_resetWritePositionTest.java", "testclass_name": "ByteFifoBuffer_resetWritePositionTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_resetWritePositionTest", "description": "Unit tests for the resetWritePosition method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "fifoBuffer", "type": "ByteFifoBuffer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testResetWritePosition", "primary_tested": ["ByteFifoBuffer.resetWritePosition()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the resetWritePosition method of ByteFifoBuffer to ensure it correctly resets the write position and updates the buffer state."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTCPBase_notifyMTUTest.java", "testclass_name": "PseudoTCPBase_notifyMTUTest", "dependencies": ["package org.ice4j.pseudotcp;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.pseudotcp.PseudoTcpState;"], "name": "PseudoTCPBase_notifyMTUTest", "description": "Unit tests for the notifyMTU method in PseudoTCPBase class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testNotifyMTU_EstablishedState", "primary_tested": ["PseudoTCPBase.notifyMTU(int)"], "associated_methods": ["PseudoTCPBase.getMTU()"], "external_dependencies": {"modules": ["PseudoTCPBase", "PseudoTcpState"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the notifyMTU method when the state is TCP_ESTABLISHED."}, {"name": "testNotifyMTU_NonEstablishedState", "primary_tested": ["PseudoTCPBase.notifyMTU(int)"], "associated_methods": ["PseudoTCPBase.getMTU()"], "external_dependencies": {"modules": ["PseudoTCPBase", "PseudoTcpState"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the notifyMTU method when the state is TCP_LISTEN."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_setChangeIpFlagTest.java", "testclass_name": "ChangeRequestAttribute_setChangeIpFlagTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ChangeRequestAttribute_setChangeIpFlagTest", "description": "Unit tests for setting the changeIpFlag in ChangeRequestAttribute.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetChangeIpFlag", "primary_tested": ["ChangeRequestAttribute.setChangeIpFlag(boolean)"], "associated_methods": ["ChangeRequestAttribute.getChangeIpFlag()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the changeIpFlag to true and verifies it."}, {"name": "testSetChangeIpFlagFalse", "primary_tested": ["ChangeRequestAttribute.setChangeIpFlag(boolean)"], "associated_methods": ["ChangeRequestAttribute.getChangeIpFlag()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the changeIpFlag to false and verifies it."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_getDataLengthTest.java", "testclass_name": "UnknownAttributesAttribute_getDataLengthTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_getDataLengthTest", "description": "Unit tests for the getDataLength method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetDataLengthEvenAttributes", "primary_tested": ["UnknownAttributesAttribute.getDataLength()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when the number of attributes is even."}, {"name": "testGetDataLengthOddAttributes", "primary_tested": ["UnknownAttributesAttribute.getDataLength()"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getDataLength method when the number of attributes is odd."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttribute_equalsTest.java", "testclass_name": "RequestedAddressFamilyAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttribute_equalsTest", "description": "Unit tests for the equals method of the RequestedAddressFamilyAttribute class.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "Object"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type of object."}, {"name": "testEqualsDifferentFamily", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(int)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different family values."}, {"name": "testEqualsSameFamily", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same family value."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpSocketImpl_getOutputStreamTest.java", "testclass_name": "PseudoTcpSocketImpl_getOutputStreamTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.*;", "import java.net.SocketException;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpSocketImpl_getOutputStreamTest", "description": "Unit tests for the getOutputStream method of PseudoTcpSocketImpl.", "class_members": {"variables": [{"name": "pseudoTcpSocketImpl", "type": "PseudoTcpSocketImpl"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetOutputStream_FirstCall", "primary_tested": ["PseudoTcpSocketImpl.getOutputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "OutputStream"], "class_members": [{"name": "pseudoTcpSocketImpl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the first call to getOutputStream method of PseudoTcpSocketImpl, ensuring it returns a non-null OutputStream of type PseudoTcpSocketImpl.PseudoTcpOutputStream."}, {"name": "testGetOutputStream_SubsequentCall", "primary_tested": ["PseudoTcpSocketImpl.getOutputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "OutputStream"], "class_members": [{"name": "pseudoTcpSocketImpl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests subsequent calls to getOutputStream method of PseudoTcpSocketImpl, ensuring the same OutputStream instance is returned."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttribute_equalsTest.java", "testclass_name": "ConnectionIdAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ConnectionIdAttribute_equalsTest", "description": "Unit tests for the equals method of the ConnectionIdAttribute class.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentType", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different type."}, {"name": "testEquals_DifferentConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different connection ID values."}, {"name": "testEquals_SameConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same connection ID value."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpSocketImpl_getInputStreamTest.java", "testclass_name": "PseudoTcpSocketImpl_getInputStreamTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.*;", "import java.net.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpSocketImpl_getInputStreamTest", "description": "Unit tests for the getInputStream method of PseudoTcpSocketImpl.", "class_members": {"variables": [{"name": "pseudoTcpSocket", "type": "PseudoTcpSocketImpl"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetInputStream_InitialState", "primary_tested": ["PseudoTcpSocketImpl.getInputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "InputStream"], "class_members": [{"name": "pseudoTcpSocket", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial state of the InputStream returned by getInputStream method."}, {"name": "testGetInputStream_SubsequentCalls", "primary_tested": ["PseudoTcpSocketImpl.getInputStream()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "InputStream"], "class_members": [{"name": "pseudoTcpSocket", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that subsequent calls to getInputStream return the same InputStream instance."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_setCapacityTest.java", "testclass_name": "ByteFifoBuffer_setCapacityTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_setCapacityTest", "description": "Unit tests for the setCapacity method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "fifo", "type": "ByteFifoBuffer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetCapacitySuccess", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.length()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of capacity in ByteFifoBuffer."}, {"name": "testSetCapacityFailure", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.length()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the failure of setting capacity in ByteFifoBuffer when the new capacity is less than the current data length."}]}, {"file_path": "src/test/java/org/ice4j/attribute/OptionalAttribute_equalsTest.java", "testclass_name": "OptionalAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;", "import org.ice4j.MsgFixture;"], "name": "OptionalAttribute_equalsTest", "description": "Unit tests for the equals method of the OptionalAttribute class.", "class_members": {"variables": [{"name": "optionalAttribute", "type": "OptionalAttribute"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["OptionalAttribute.equals(Object)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstanceSameValue", "primary_tested": ["OptionalAttribute.equals(Object)"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different instance but the same value."}, {"name": "testEquals_DifferentInstanceDifferentValue", "primary_tested": ["OptionalAttribute.equals(Object)"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different instance and different value."}, {"name": "testEquals_DifferentType", "primary_tested": ["OptionalAttribute.equals(Object)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different type."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/NetworkConfigurationDiscoveryProcess_startTest.java", "testclass_name": "NetworkConfigurationDiscoveryProcess_startTest", "dependencies": ["package org.ice4j.stunclient;", "import org.ice4j.*;", "import org.ice4j.socket.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.IOException;"], "name": "NetworkConfigurationDiscoveryProcess_startTest", "description": "Tests for the start method of NetworkConfigurationDiscoveryProcess, including success and exception scenarios.", "class_members": {"variables": [{"name": "discoverer", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "stunStack", "type": "StunStack"}, {"name": "localAddress", "type": "TransportAddress"}, {"name": "serverAddress", "type": "TransportAddress"}], "nested_classes": [{"name": "NetworkConfigurationDiscoveryProcess", "description": "Internal class to simulate NetworkConfigurationDiscoveryProcess for testing purposes"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testStartSuccess", "primary_tested": ["NetworkConfigurationDiscoveryProcess.start()"], "associated_methods": ["NetworkConfigurationDiscoveryProcess.isStarted()"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "StunStack", "TransportAddress"], "class_members": [{"name": "discoverer", "type": "variable"}, {"name": "stunStack", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "serverAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful start of NetworkConfigurationDiscoveryProcess."}, {"name": "testStartIOException", "primary_tested": ["NetworkConfigurationDiscoveryProcess.start()"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "StunStack", "TransportAddress"], "class_members": [{"name": "discoverer", "type": "variable"}, {"name": "stunStack", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "serverAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the start method of NetworkConfigurationDiscoveryProcess when an IOException is expected."}, {"name": "testStartStunException", "primary_tested": ["NetworkConfigurationDiscoveryProcess.start()"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "StunStack", "TransportAddress"], "class_members": [{"name": "discoverer", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "serverAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the start method of NetworkConfigurationDiscoveryProcess when a NullPointerException is expected."}]}, {"file_path": "src/test/java/org/ice4j/attribute/XorOnlyAttribute_equalsTest.java", "testclass_name": "XorOnlyAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "XorOnlyAttribute_equalsTest", "description": "Unit tests for the equals method of the XorOnlyAttribute class.", "class_members": {"variables": [{"name": "xorOnly", "type": "XorOnlyAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type of object."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "associated_methods": ["XorOnlyAttribute.getAttributeType()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different attribute type."}, {"name": "testEquals_DifferentDataLength", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "associated_methods": ["XorOnlyAttribute.getDataLength()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different data length."}, {"name": "testEquals_EqualAttributes", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with equal attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/NonceAttribute_equalsTest.java", "testclass_name": "NonceAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "NonceAttribute_equalsTest", "description": "Unit tests for the equals method of the NonceAttribute class.", "class_members": {"variables": [{"name": "nonceAttribute1", "type": "NonceAttribute"}, {"name": "nonceAttribute2", "type": "NonceAttribute"}, {"name": "nonceValue1", "type": "byte[]"}, {"name": "nonceValue2", "type": "byte[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a different type."}, {"name": "testEqualsDifferentNonce", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute1", "type": "variable"}, {"name": "nonceAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different nonce values."}, {"name": "testEqualsSameNonce", "primary_tested": ["NonceAttribute.equals(Object)"], "associated_methods": ["NonceAttribute.setNonce(byte[])"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute1", "type": "variable"}, {"name": "nonceAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with the same nonce value."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttribute_equalsTest.java", "testclass_name": "ErrorCodeAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttribute_equalsTest", "description": "Unit tests for the equals method of the ErrorCodeAttribute class.", "class_members": {"variables": [{"name": "errorCodeAttribute1", "type": "ErrorCodeAttribute"}, {"name": "errorCodeAttribute2", "type": "ErrorCodeAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentErrorClass", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute1", "type": "variable"}, {"name": "errorCodeAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different error classes."}, {"name": "testEquals_DifferentErrorNumber", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "associated_methods": ["ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute1", "type": "variable"}, {"name": "errorCodeAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different error numbers."}, {"name": "testEquals_DifferentReasonPhrase", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "associated_methods": ["ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute1", "type": "variable"}, {"name": "errorCodeAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different reason phrases."}, {"name": "testEquals_SameAttributes", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute1", "type": "variable"}, {"name": "errorCodeAttribute2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttribute_equalsTest.java", "testclass_name": "UnknownAttributesAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttribute_equalsTest", "description": "Unit tests for the equals method of the UnknownAttributesAttribute class.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentType", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type object."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different attribute types."}, {"name": "testEquals_DifferentDataLength", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different data lengths."}, {"name": "testEquals_DifferentUnknownAttributes", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with different unknown attributes."}, {"name": "testEquals_SameAttributes", "primary_tested": ["UnknownAttributesAttribute.equals(Object)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(char)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same attributes."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttribute_equalsTest.java", "testclass_name": "ChangeRequestAttribute_equalsTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ChangeRequestAttribute_equalsTest", "description": "Unit tests for the equals method of the ChangeRequestAttribute class.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameObject", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same object."}, {"name": "testEquals_DifferentType", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type object."}, {"name": "testEquals_DifferentAttributeType", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different attribute type."}, {"name": "testEquals_DifferentDataLength", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different data length."}, {"name": "testEquals_DifferentChangeIpFlag", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different change IP flag."}, {"name": "testEquals_DifferentChangePortFlag", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different change port flag."}, {"name": "testEquals_AllAttributesSame", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with all attributes being the same."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBuffer_getBufferedTest.java", "testclass_name": "ByteFifoBuffer_getBufferedTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ByteFifoBuffer_getBufferedTest", "description": "Unit tests for the getBuffered method of ByteFifoBuffer.", "class_members": {"variables": [{"name": "fifoBuffer", "type": "ByteFifoBuffer"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetBufferedInitialState", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial state of the getBuffered method, expecting 0 bytes buffered."}, {"name": "testGetBufferedAfterWrite", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getBuffered method after writing data, expecting 256 bytes buffered."}, {"name": "testGetBufferedAfterRead", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.read(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getBuffered method after writing and reading data, expecting 0 bytes buffered."}, {"name": "testGetBufferedAfterPartialRead", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.read(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getBuffered method after writing and partially reading data, expecting 128 bytes buffered."}, {"name": "testGetBufferedAfterMultipleWritesAndReads", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "associated_methods": ["ByteFifoBuffer.write(byte[],int)", "ByteFifoBuffer.read(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "fifoBuffer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getBuffered method after multiple writes and reads, expecting 0 bytes buffered."}]}]