{"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttributeTest.java", "testclass_name": "UnknownAttributesAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttributeTest", "description": "Unit tests for the UnknownAttributesAttribute class, focusing on attribute type, attribute ID management, encoding, decoding, and equality checks.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}, {"name": "binMessagesFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testUnknownAttributesAttribute", "primary_tested": ["UnknownAttributesAttribute.getAttributeType()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "Attribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the constructed object has the correct (UNKNOWN-ATTRIBUTES) type."}, {"name": "testAddAttributeID", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttribute(int)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the passed attribute id is added to the list of attributes and that a second addition of the same id does not augment the attribute count."}, {"name": "testDecodeAttributeBody", "primary_tested": ["UnknownAttributesAttribute.decodeAttributeBody(byte[],int,char)", "UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "Attribute", "MsgFixture", "StunException"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether a sample binary array is properly decoded."}, {"name": "testEncode", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.encode()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "MsgFixture"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Creates a new UnknownAttributesAttribute, encodes it, and asserts equality with binMessagesFixture.unknownAttsEncodeExpectedResult."}, {"name": "testEquals", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttribute(int)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that getAttribute() returns the correct attribute id, preserving entry order."}, {"name": "testGetAttributeCount", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Adds some attributes and tests whether their number is properly calculated. Tests duplicate id handling as well."}, {"name": "testGetAttributes", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttributes()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Same as testGetAttributeID, only attribute attributes are extracted through the getAttributes()'s iterator."}, {"name": "testGetDataLength", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getDataLength()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Adds a fixed number of attributes and checks data length accordingly. Test is first performed for an odd number of attributes and then again (after adding another attribute id). Both results should be the same."}, {"name": "testGetName", "primary_tested": ["UnknownAttributesAttribute.getName()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether getName returns a relevant name."}]}