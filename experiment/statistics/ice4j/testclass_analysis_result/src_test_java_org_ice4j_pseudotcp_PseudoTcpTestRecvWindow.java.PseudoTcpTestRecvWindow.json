{"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestRecvWindow.java", "testclass_name": "PseudoTcpTestRecvWindow", "dependencies": ["package org.ice4j.pseudotcp;", "import java.io.*;", "import java.util.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.pseudotcp.util.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpTestRecvWindow", "description": "Tests for the PseudoTCP receive window functionality.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "send_stream", "type": "ByteFifoBuffer"}, {"name": "send_position", "type": "List<Integer>"}, {"name": "recv_stream", "type": "ByteFifoBuffer"}, {"name": "recv_position", "type": "List<Integer>"}, {"name": "writeTimer", "type": "Timer"}, {"name": "testDataSize", "type": "int"}], "methods": [{"name": "doTestTransfer", "signature": "void doTestTransfer(int)"}, {"name": "getShadowedBytes", "signature": "static int getShadowedBytes(int)"}, {"name": "readUntilIOPending", "signature": "void readUntilIOPending() throws IOException"}, {"name": "scheduleWriteAction", "signature": "void scheduleWriteAction(long)"}, {"name": "writeData", "signature": "void writeData() throws IOException"}, {"name": "estimateReceiveWindowSize", "signature": "int estimateReceiveWindowSize()"}, {"name": "estimateSendWindowSize", "signature": "int estimateSendWindowSize()"}, {"name": "onTcpReadable", "signature": "void onTcpReadable(PseudoTCPBase)"}, {"name": "onTcpWriteable", "signature": "void onTcpWriteable(PseudoTCPBase)"}, {"name": "setLocalOptSndBuf", "signature": "void setLocalOptSndBuf(int)"}, {"name": "getRemoteScaleFactor", "signature": "int getRemoteScaleFactor()"}]}, "fixtures": [], "test_cases": [{"name": "testGetShadowedBytes", "primary_tested": ["PseudoTcpTestRecvWindow.getShadowedBytes(int)"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"]}, "category": "unit", "description": "Tests the calculation of shadowed bytes based on scale factor."}, {"name": "testReceiveWindow", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of the receive window expanding and contracting correctly."}, {"name": "testSetVerySmallSendWindowSize", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)", "PseudoTcpTestRecvWindow.setOptSndBuf(int)", "PseudoTcpTestRecvWindow.estimateSendWindowSize()"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}, {"name": "estimateSendWindowSize", "type": "method"}]}, "category": "unit", "description": "Tests setting the send window size to a very small value."}, {"name": "testSetReceiveWindowSize", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)", "PseudoTcpTestRecvWindow.setLocalOptSndBuf(int)", "PseudoTcpTestRecvWindow.setRemoteOptRcvBuf(int)", "PseudoTcpTestRecvWindow.getRemoteScaleFactor()", "PseudoTcpTestRecvWindow.estimateReceiveWindowSize()"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}, {"name": "estimateReceiveWindowSize", "type": "method"}]}, "category": "unit", "description": "Tests setting the receive window size to a value other than default."}]}