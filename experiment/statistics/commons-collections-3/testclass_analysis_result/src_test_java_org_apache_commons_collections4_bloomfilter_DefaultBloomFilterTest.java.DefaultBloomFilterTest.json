{"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "testclass_name": "DefaultBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.TreeSet;", "import java.util.function.IntPredicate;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBloomFilterTest", "description": "Unit tests for the DefaultBloomFilter class, focusing on various functionalities like merging, cardinality, and intersection estimation.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AbstractDefaultBloomFilter", "description": "Abstract class implementing BloomFilter interface with common functionalities."}, {"name": "BrokenCardinality", "description": "Subclass of NonSparseDefaultBloomFilter with a broken cardinality method."}, {"name": "NonSparseDefaultBloomFilter", "description": "Default implementation of a non-sparse Bloom filter."}, {"name": "SparseDefaultBloomFilter", "description": "Default implementation of a sparse Bloom filter."}]}, "fixtures": [], "test_cases": [{"name": "testDefaultBloomFilterSimpleSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(Hasher)"], "associated_methods": ["AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["Shape", "Hasher", "IncrementingHasher"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "description": "Tests the merge functionality of the DefaultBloomFilter with a simple specific hasher."}, {"name": "testDefaultBloomFilterSparseSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(IndexExtractor)"], "associated_methods": ["AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["Shape", "IncrementingHasher"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "description": "Tests the merge functionality of the DefaultBloomFilter with a sparse specific hasher."}, {"name": "testEstimateLargeN", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateN()"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMaps"], "class_members": [{"name": "bf1", "type": "variable"}]}, "category": "unit", "description": "Tests the estimation of large N in a BloomFilter."}, {"name": "testEstimateNWithBrokenCardinality", "primary_tested": ["BrokenCardinality.estimateN()"], "external_dependencies": {"modules": ["TestingHashers", "BrokenCardinality"], "class_members": [{"name": "filter1", "type": "variable"}]}, "category": "unit", "description": "Tests the estimation of N in a BloomFilter with broken cardinality."}, {"name": "testHasherBasedMergeWithDifferingSparseness", "primary_tested": ["NonSparseDefaultBloomFilter.merge(Hasher)", "SparseDefaultBloomFilter.merge(Hasher)"], "associated_methods": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int).processBitMapPairs(BloomFilter, LongBinaryOperator)"], "external_dependencies": {"modules": ["Hasher", "IncrementingHasher", "BitMapExtractor"], "class_members": [{"name": "bf1", "type": "variable"}]}, "category": "unit", "description": "Tests the merge functionality with hashers of differing sparseness."}, {"name": "testIntersectionLimit", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateIntersection(BloomFilter)"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMaps"], "class_members": [{"name": "bf1", "type": "variable"}]}, "category": "unit", "description": "Tests the intersection estimation in a BloomFilter."}, {"name": "testSparseNonSparseMerging", "primary_tested": ["SparseDefaultBloomFilter.merge(Hasher)", "NonSparseDefaultBloomFilter.merge(Hasher)"], "associated_methods": ["SparseDefaultBloomFilter.copy()", "NonSparseDefaultBloomFilter.copy()", "BloomFilter.cardinality()"], "external_dependencies": {"modules": ["TestingHashers"], "class_members": [{"name": "bf1", "type": "variable"}, {"name": "bf2", "type": "variable"}, {"name": "result", "type": "variable"}]}, "category": "unit", "description": "Tests the merging of sparse and non-sparse BloomFilters."}]}