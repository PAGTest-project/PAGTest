{"file_path": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "testclass_name": "HashSetValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.SetValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "HashSetValuedHashMapTest", "description": "Unit tests for HashSetValuedHashMap, a MultiValuedMap implementation.", "class_members": {"variables": [], "methods": [{"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isHashSetValue", "signature": "boolean isHashSetValue()"}, {"name": "makeConfirmedMap", "signature": "MultiValuedMap<K, V> makeConfirmedMap()"}, {"name": "makeObject", "signature": "SetValuedMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashSetValuedHashMap_2", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashMap", "HashSetValuedHashMap", "SetValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and size of a HashSetValuedHashMap from a HashMap."}, {"name": "testHashSetValueHashMap", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of values to a HashSetValuedHashMap and checks the size."}, {"name": "testHashSetValueHashMap_1", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and comparison of two HashSetValuedHashMaps."}, {"name": "testSetValuedMapAdd", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of values to a SetValuedMap and checks the size and key presence."}, {"name": "testSetValuedMapEqualsHashCodeContract", "primary_tested": ["HashSetValuedHashMap.equals(Object)", "HashSetValuedHashMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the equality and hash code contract of two SetValuedMaps."}, {"name": "testSetValuedMapRemove", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of values from a SetValuedMap and checks the size and key presence."}, {"name": "testSetValuedMapRemoveViaIterator", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of values from a SetValuedMap via an iterator and checks the size and key presence."}]}