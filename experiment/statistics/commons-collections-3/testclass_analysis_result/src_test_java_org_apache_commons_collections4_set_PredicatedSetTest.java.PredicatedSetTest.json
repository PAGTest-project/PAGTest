{"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "testclass_name": "PredicatedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSetTest", "description": "Unit tests for PredicatedSet functionality, focusing on predicate-based validation and set operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateSet", "signature": "protected PredicatedSet<E> decorateSet(Set<E> set, Predicate<? super E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "public E[] getFullElements()"}, {"name": "getIterationBehaviour", "signature": "protected int getIterationBehaviour()"}, {"name": "makeObject", "signature": "public PredicatedSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "protected PredicatedSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testGetSet", "primary_tested": ["PredicatedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated set returned by PredicatedSet is not null."}, {"name": "testIllegalAdd", "primary_tested": ["Set.add(E)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the set throws an IllegalArgumentException and the element is not contained in the set."}, {"name": "testIllegalAddAll", "primary_tested": ["Set.addAll(Collection<? extends E>)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "HashSet", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with an illegal element (non-string) to the set throws an IllegalArgumentException and none of the elements are contained in the set."}]}