{"file_path": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "testclass_name": "SetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.SetUtils.SetView;", "import org.apache.commons.collections4.set.PredicatedSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtilsTest", "description": "Unit tests for various SetUtils operations including difference, disjunction, intersection, union, and more.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDifference", "primary_tested": ["SetUtils.difference(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.contains(Object)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the difference functionality of SetUtils."}, {"name": "testDisjunction", "primary_tested": ["SetUtils.disjunction(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.contains(Object)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the disjunction functionality of SetUtils."}, {"name": "testEmptyIfNull", "primary_tested": ["SetUtils.emptyIfNull(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the emptyIfNull functionality of SetUtils."}, {"name": "testEquals", "primary_tested": ["SetUtils.isEqualSet(Set,Set)"], "associated_methods": ["Set.clear()"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the isEqualSet functionality of SetUtils."}, {"name": "testHashCode", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "associated_methods": ["Set.clear()"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the hashCodeForSet functionality of SetUtils."}, {"name": "testHashSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.hashSet(Object...)"], "associated_methods": ["Set.isEmpty()", "Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the hashSet and unmodifiableSet functionalities of SetUtils."}, {"name": "testIntersection", "primary_tested": ["SetUtils.intersection(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.contains(Object)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the intersection functionality of SetUtils."}, {"name": "testNewIdentityHashSet", "primary_tested": ["SetUtils.newIdentityHashSet()"], "associated_methods": ["Set.size()", "Set.add(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the newIdentityHashSet functionality of SetUtils."}, {"name": "testpredicatedSet", "primary_tested": ["SetUtils.predicatedSet(Set,Predicate)"], "associated_methods": ["PredicatedSet.class"], "external_dependencies": {"modules": ["SetUtils", "PredicatedSet", "Predicate", "NullPointerException"]}, "category": "unit", "description": "Tests the predicatedSet functionality of SetUtils."}, {"name": "testUnion", "primary_tested": ["SetUtils.union(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.containsAll(Collection)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the union functionality of SetUtils."}, {"name": "testUnmodifiableSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.unmodifiableSet(Object...)"], "associated_methods": ["Set.isEmpty()", "Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the unmodifiableSet functionalities of SetUtils."}, {"name": "testUnmodifiableSetWrap", "primary_tested": ["SetUtils.unmodifiableSet(Set)"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the unmodifiableSet wrap functionality of SetUtils."}]}