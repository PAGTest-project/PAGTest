{"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "testclass_name": "LRUMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "LRUMapTest", "description": "Unit tests for the LRUMap class, focusing on its LRU (Least Recently Used) eviction policy and internal state management.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "MockLRUMapSubclass", "description": "A subclass of LRUMap that overrides the removeLRU method to capture the removed entry details."}, {"name": "MockLRUMapSubclassBlocksRemove", "description": "A subclass of LRUMap that always returns false from the removeLRU method, blocking the removal of LRU entries."}, {"name": "MockLRUMapSubclassFirstBlocksRemove", "description": "A subclass of LRUMap that blocks the removal of the first entry if its value is 'a'."}, {"name": "SingleHashCode", "description": "A helper class that always returns the same hash code, used to test hash collisions in LRUMap."}]}, "fixtures": [], "test_cases": [{"name": "testAccessOrder", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap, ensuring that the order of elements changes based on access and insertion."}, {"name": "testAccessOrder2", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K,boolean)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap with a boolean parameter in the get method, ensuring that the order of elements changes based on access and insertion."}, {"name": "testClone", "primary_tested": ["LRUMap.clone()"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the LRUMap, ensuring that the cloned map is a deep copy with the same elements."}, {"name": "testCtors", "primary_tested": ["LRUMap.LRUMap(int)", "LRUMap.LRUMap(int,int,float,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "IllegalArgumentException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of the LRUMap, ensuring that they throw exceptions for invalid parameters."}, {"name": "testInternalState_Buckets", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.hashIndex(int,int)", "LRUMap.hash(Object)"], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the internal state of the LRUMap, ensuring that the buckets and linked list are correctly managed."}, {"name": "testInternalState_getEntry_int", "primary_tested": ["LRUMap.getEntry(int)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode", "IndexOutOfBoundsException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getEntry method of the LRUMap, ensuring that it returns the correct entry and handles out-of-bounds indices."}, {"name": "testLRU", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.isFull()", "LRUMap.maxSize()"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the LRU eviction policy of the LRUMap, ensuring that the least recently used entries are evicted when the map is full."}, {"name": "testRemoveLRU", "primary_tested": ["MockLRUMapSubclass.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclass.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclass", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclass, ensuring that it captures the removed entry details."}, {"name": "testRemoveLRUBlocksRemove", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclassBlocksRemove, ensuring that it blocks the removal of LRU entries."}, {"name": "testRemoveLRUBlocksRemoveScan", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclassBlocksRemove with scanning enabled, ensuring that it blocks the removal of LRU entries."}, {"name": "testRemoveLRUFirstBlocksRemove", "primary_tested": ["MockLRUMapSubclassFirstBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassFirstBlocksRemove.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclassFirstBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclassFirstBlocksRemove, ensuring that it blocks the removal of the first entry if its value is 'a'."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["OrderedMap.mapIterator()"], "external_dependencies": {"modules": ["ResettableIterator", "OrderedMap", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the reset functionality of the ResettableIterator, ensuring that it resets to the beginning of the iteration."}, {"name": "testSynchronizedRemoveFromEntrySet", "primary_tested": ["LRUMap.entrySet().removeIf(Predicate<Map.Entry<K,V>>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the entry set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromKeySet", "primary_tested": ["LRUMap.keySet().iterator().remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the key set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromMapIterator", "primary_tested": ["MapIterator.remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "MapIterator", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries using a map iterator in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromValues", "primary_tested": ["LRUMap.values().removeIf(Predicate<V>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the values collection in a multi-threaded environment, ensuring thread safety."}]}