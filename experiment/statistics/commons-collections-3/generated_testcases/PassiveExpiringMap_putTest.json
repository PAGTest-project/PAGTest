[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.commons.collections4.map.PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PassiveExpiringMap_putTest {\n\n    private PassiveExpiringMap<Integer, String> expiringMap;\n    private ConstantTimeToLiveExpirationPolicy<Integer, String> expiringPolicy;\n\n    @BeforeEach\n    public void setUp() {\n        expiringPolicy = new ConstantTimeToLiveExpirationPolicy<>(1, TimeUnit.MINUTES);\n        expiringMap = new PassiveExpiringMap<>(expiringPolicy, new HashMap<>());\n    }\n\n    @Test\n    public void testPut_NewEntry() {\n        Integer key = 1;\n        String value = \"one\";\n\n        String result = expiringMap.put(key, value);\n\n        assertNull(result);\n        assertEquals(value, expiringMap.get(key));\n    }\n\n    @Test\n    public void testPut_ReplaceEntry() {\n        Integer key = 1;\n        String oldValue = \"one\";\n        String newValue = \"newOne\";\n\n        expiringMap.put(key, oldValue);\n        String result = expiringMap.put(key, newValue);\n\n        assertEquals(oldValue, result);\n        assertEquals(newValue, expiringMap.get(key));\n    }\n\n    @Test\n    public void testPut_ExpiredEntry() {\n        Integer key = 1;\n        String value = \"one\";\n\n        expiringMap.put(key, value);\n        expiringMap.remove(key); // Simulate expiration by removing the entry\n\n        String result = expiringMap.put(key, value);\n\n        assertNull(result);\n        assertEquals(value, expiringMap.get(key));\n    }\n}\n"}]