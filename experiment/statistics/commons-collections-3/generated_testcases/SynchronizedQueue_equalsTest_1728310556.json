[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Queue;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class SynchronizedQueue_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        Queue<String> mockQueue = mock(Queue.class);\n        SynchronizedQueue<String> synchronizedQueue = new SynchronizedQueue<>(mockQueue);\n\n        assertTrue(synchronizedQueue.equals(synchronizedQueue));\n    }\n\n    @Test\n    public void testEquals_DifferentInstance() {\n        Queue<String> mockQueue1 = mock(Queue.class);\n        Queue<String> mockQueue2 = mock(Queue.class);\n        SynchronizedQueue<String> synchronizedQueue1 = new SynchronizedQueue<>(mockQueue1);\n        SynchronizedQueue<String> synchronizedQueue2 = new SynchronizedQueue<>(mockQueue2);\n\n        when(mockQueue1.equals(mockQueue2)).thenReturn(true);\n\n        assertTrue(synchronizedQueue1.equals(synchronizedQueue2));\n    }\n\n    @Test\n    public void testEquals_DifferentInstanceNotEqual() {\n        Queue<String> mockQueue1 = mock(Queue.class);\n        Queue<String> mockQueue2 = mock(Queue.class);\n        SynchronizedQueue<String> synchronizedQueue1 = new SynchronizedQueue<>(mockQueue1);\n        SynchronizedQueue<String> synchronizedQueue2 = new SynchronizedQueue<>(mockQueue2);\n\n        when(mockQueue1.equals(mockQueue2)).thenReturn(false);\n\n        assertFalse(synchronizedQueue1.equals(synchronQueue2));\n    }\n}\n"}]