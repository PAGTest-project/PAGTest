[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_putAllTest {\n\n    private MultiValueMap<String, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testPutAll_NullValues() {\n        assertFalse(map.putAll(\"key\", null));\n    }\n\n    @Test\n    public void testPutAll_EmptyValues() {\n        assertFalse(map.putAll(\"key\", Arrays.asList()));\n    }\n\n    @Test\n    public void testPutAll_NewKey() {\n        assertTrue(map.putAll(\"key\", Arrays.asList(\"value1\", \"value2\")));\n        assertEquals(2, map.size(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_ExistingKey() {\n        map.put(\"key\", \"value1\");\n        assertTrue(map.putAll(\"key\", Arrays.asList(\"value2\", \"value3\")));\n        assertEquals(3, map.size(\"key\"));\n    }\n\n    @Test\n    public void testPutAll_NonEmptyCollectionCreation() {\n        map.putAll(\"key\", Arrays.asList(\"value1\", \"value2\"));\n        assertTrue(map.containsValue(\"key\", \"value1\"));\n        assertTrue(map.containsValue(\"key\", \"value2\"));\n    }\n\n    @Test\n    public void testPutAll_EmptyCollectionCreation() {\n        map.putAll(\"key\", Arrays.asList(\"value1\", \"value2\"));\n        assertFalse(map.containsValue(\"key\", \"value3\"));\n    }\n\n    @Test\n    public void testPutAll_StateChange() {\n        map.putAll(\"key\", Arrays.asList(\"value1\", \"value2\"));\n        map.clear();\n        assertFalse(map.containsValue(\"key\", \"value1\"));\n        assertFalse(map.containsValue(\"key\", \"value2\"));\n    }\n\n    @Test\n    public void testPutAll_Substitutability() {\n        MultiValueMap<String, String> otherMap = new MultiValueMap<>(new HashMap<>(), ArrayList::new);\n        otherMap.putAll(\"key\", Arrays.asList(\"value1\", \"value2\"));\n        map.putAll(otherMap);\n        assertEquals(2, map.size(\"key\"));\n    }\n}\n"}]