[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.apache.commons.collections4.Predicate;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class PredicatedSortedMap_subMapTest {\n\n    @Test\n    public void testSubMap() {\n        // Given\n        SortedMap<Integer, String> originalMap = new TreeMap<>();\n        originalMap.put(1, \"one\");\n        originalMap.put(2, \"two\");\n        originalMap.put(3, \"three\");\n        originalMap.put(4, \"four\");\n\n        Predicate<Integer> keyPredicate = mock(Predicate.class);\n        Predicate<String> valuePredicate = mock(Predicate.class);\n\n        when(keyPredicate.evaluate(1)).thenReturn(true);\n        when(keyPredicate.evaluate(2)).thenReturn(true);\n        when(keyPredicate.evaluate(3)).thenReturn(true);\n        when(valuePredicate.evaluate(\"one\")).thenReturn(true);\n        when(valuePredicate.evaluate(\"two\")).thenReturn(true);\n        when(valuePredicate.evaluate(\"three\")).thenReturn(true);\n\n        PredicatedSortedMap<Integer, String> predicatedMap = new PredicatedSortedMap<>(originalMap, keyPredicate, valuePredicate);\n\n        // When\n        SortedMap<Integer, String> subMap = predicatedMap.subMap(2, 4);\n\n        // Then\n        assertEquals(2, subMap.size());\n        assertEquals(\"two\", subMap.get(2));\n        assertEquals(\"three\", subMap.get(3));\n    }\n}\n"}]