[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.Comparator;\nimport org.junit.jupiter.api.Test;\n\npublic class ComparatorUtils_minTest {\n\n    @Test\n    public void testMinWithNaturalComparator() {\n        Comparator<Integer> naturalComparator = ComparatorUtils.naturalComparator();\n        Integer result = ComparatorUtils.min(5, 10, naturalComparator);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void testMinWithNullComparator() {\n        Integer result = ComparatorUtils.min(5, 10, null);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void testMinWithCustomComparator() {\n        Comparator<String> customComparator = Comparator.comparingInt(String::length);\n        String result = ComparatorUtils.min(\"short\", \"longer\", customComparator);\n        assertEquals(\"short\", result);\n    }\n\n    @Test\n    public void testMinWithReversedComparator() {\n        Comparator<Integer> reversedComparator = ComparatorUtils.reversedComparator(Comparator.naturalOrder());\n        Integer result = ComparatorUtils.min(5, 10, reversedComparator);\n        assertEquals(10, result);\n    }\n\n    @Test\n    public void testMinWithNullValues() {\n        Comparator<Integer> nullHighComparator = ComparatorUtils.nullHighComparator(Comparator.naturalOrder());\n        Integer result = ComparatorUtils.min(null, 10, nullHighComparator);\n        assertEquals(10, result);\n    }\n\n    @Test\n    public void testMinWithEqualValues() {\n        Comparator<Integer> naturalComparator = ComparatorUtils.naturalComparator();\n        Integer result = ComparatorUtils.min(5, 5, naturalComparator);\n        assertEquals(5, result);\n    }\n}\n"}]