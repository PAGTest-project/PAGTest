[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport org.apache.commons.collections4.BoundedCollection;\nimport org.apache.commons.collections4.Unmodifiable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.function.Predicate;\n\nclass UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest {\n\n    @Test\n    void testUnmodifiableBoundedCollectionWithUnmodifiableCollection() {\n        // Given\n        BoundedCollection<String> mockCollection = new MockUnmodifiableBoundedCollection<>();\n\n        // When\n        BoundedCollection<String> result = UnmodifiableBoundedCollection.unmodifiableBoundedCollection(mockCollection);\n\n        // Then\n        assertSame(mockCollection, result);\n    }\n\n    @Test\n    void testUnmodifiableBoundedCollectionWithModifiableCollection() {\n        // Given\n        BoundedCollection<String> mockCollection = new MockBoundedCollection<>();\n\n        // When\n        BoundedCollection<String> result = UnmodifiableBoundedCollection.unmodifiableBoundedCollection(mockCollection);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableBoundedCollection);\n        assertNotSame(mockCollection, result);\n    }\n\n    private static class MockUnmodifiableBoundedCollection<E> implements BoundedCollection<E>, Unmodifiable {\n        @Override\n        public boolean isFull() { return false; }\n        @Override\n        public int maxSize() { return 0; }\n        @Override\n        public boolean add(E object) { throw new UnsupportedOperationException(); }\n        @Override\n        public boolean addAll(Collection<? extends E> coll) { throw new UnsupportedOperationException(); }\n        @Override\n        public void clear() { throw new UnsupportedOperationException(); }\n        @Override\n        public Iterator<E> iterator() { throw new UnsupportedOperationException(); }\n        @Override\n        public boolean remove(Object object) { throw new UnsupportedOperationException(); }\n        @Override\n        public boolean removeAll(Collection<?> coll) { throw new UnsupportedOperationException(); }\n        @Override\n        public boolean removeIf(Predicate<? super E> filter) { throw new UnsupportedOperationException(); }\n        @Override\n        public boolean retainAll(Collection<?> coll) { throw new UnsupportedOperationException(); }\n        @Override\n        public boolean containsAll(Collection<?> c) { throw new UnsupportedOperationException(); }\n        @Override\n        public Object[] toArray() { throw new UnsupportedOperationException(); }\n        @Override\n        public <T> T[] toArray(T[] a) { throw new UnsupportedOperationException(); }\n    }\n\n    private static class MockBoundedCollection<E> implements BoundedCollection<E> {\n        @Override\n        public boolean isFull() { return false; }\n        @Override\n        public int maxSize() { return 0; }\n        @Override\n        public boolean add(E object) { return false; }\n        @Override\n        public boolean addAll(Collection<? extends E> coll) { return false; }\n        @Override\n        public void clear() {}\n        @Override\n        public Iterator<E> iterator() { return null; }\n        @Override\n        public boolean remove(Object object) { return false; }\n        @Override\n        public boolean removeAll(Collection<?> coll) { return false; }\n        @Override\n        public boolean removeIf(Predicate<? super E> filter) { return false; }\n        @Override\n        public boolean retainAll(Collection<?> coll) { return false; }\n        @Override\n        public boolean containsAll(Collection<?> c) { return false; }\n        @Override\n        public Object[] toArray() { return new Object[0]; }\n        @Override\n        public <T> T[] toArray(T[] a) { return a; }\n    }\n}\n"}]