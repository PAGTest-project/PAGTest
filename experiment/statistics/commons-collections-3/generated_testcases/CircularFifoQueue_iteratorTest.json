[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.NoSuchElementException;\nimport java.util.Iterator;\n\npublic class CircularFifoQueue_iteratorTest {\n\n    private CircularFifoQueue<Integer> queue;\n\n    @BeforeEach\n    public void setUp() {\n        queue = new CircularFifoQueue<>(3);\n    }\n\n    @Test\n    public void testIteratorHasNextAndNext() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n\n        Iterator<Integer> iterator = queue.iterator();\n\n        assertTrue(iterator.hasNext());\n        assertEquals(1, iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(2, iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(3, iterator.next());\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, iterator::next);\n    }\n\n    @Test\n    public void testIteratorRemove() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n\n        Iterator<Integer> iterator = queue.iterator();\n\n        assertEquals(1, iterator.next());\n        iterator.remove();\n        assertEquals(2, iterator.next());\n        iterator.remove();\n        assertEquals(3, iterator.next());\n        iterator.remove();\n\n        assertTrue(queue.isEmpty());\n    }\n\n    @Test\n    public void testIteratorRemoveFirstElement() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n\n        Iterator<Integer> iterator = queue.iterator();\n\n        assertEquals(1, iterator.next());\n        iterator.remove();\n        assertEquals(2, iterator.next());\n        assertEquals(3, iterator.next());\n\n        assertEquals(2, queue.size());\n        assertEquals(2, queue.get(0));\n        assertEquals(3, queue.get(1));\n    }\n\n    @Test\n    public void testIteratorRemoveThrowsIllegalStateException() {\n        queue.add(1);\n\n        Iterator<Integer> iterator = queue.iterator();\n\n        assertThrows(IllegalStateException.class, iterator::remove);\n    }\n}\n"}]