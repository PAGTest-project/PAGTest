[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ListOrderedMap_putTest {\n\n    private ListOrderedMap<Integer, String> listOrderedMap;\n\n    @BeforeEach\n    public void setUp() {\n        listOrderedMap = new ListOrderedMap<>(new HashMap<>());\n    }\n\n    @Test\n    public void testPutAtIndexOutOfBounds() {\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            listOrderedMap.put(-1, 1, \"value\");\n        });\n\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            listOrderedMap.put(1, 1, \"value\");\n        });\n    }\n\n    @Test\n    public void testPutNewKey() {\n        String result = listOrderedMap.put(0, 1, \"value1\");\n        assertNull(result);\n        assertEquals(\"value1\", listOrderedMap.get(1));\n    }\n\n    @Test\n    public void testPutExistingKey() {\n        listOrderedMap.put(0, 1, \"value1\");\n        String result = listOrderedMap.put(0, 1, \"value2\");\n        assertEquals(\"value1\", result);\n        assertEquals(\"value2\", listOrderedMap.get(1));\n    }\n\n    @Test\n    public void testPutExistingKeyWithDifferentIndex() {\n        listOrderedMap.put(0, 1, \"value1\");\n        listOrderedMap.put(1, 2, \"value2\");\n        String result = listOrderedMap.put(1, 1, \"value3\");\n        assertEquals(\"value1\", result);\n        assertEquals(\"value3\", listOrderedMap.get(1));\n        assertEquals(2, listOrderedMap.size());\n    }\n}\n"}]