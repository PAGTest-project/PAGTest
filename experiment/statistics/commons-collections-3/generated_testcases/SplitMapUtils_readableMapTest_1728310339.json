[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Map;\n\nclass SplitMapUtils_readableMapTest {\n\n    @Test\n    void testReadableMapWithIterableMap() {\n        IterableMap<String, String> mockIterableMap = mock(IterableMap.class);\n        IterableMap<String, String> result = SplitMapUtils.readableMap(mockIterableMap);\n        assertSame(mockIterableMap, result);\n    }\n\n    @Test\n    void testReadableMapWithNonIterableMap() {\n        Map<String, String> mockMap = mock(Map.class);\n        when(mockMap.entrySet()).thenReturn(mock(Set.class));\n        IterableMap<String, String> result = SplitMapUtils.readableMap(mockMap);\n        assertTrue(result instanceof IterableMap);\n    }\n\n    @Test\n    void testReadableMapWithNonMapGet() {\n        Get<String, String> mockGet = mock(Get.class);\n        when(mockGet.entrySet()).thenReturn(mock(Set.class));\n        IterableMap<String, String> result = SplitMapUtils.readableMap(mockGet);\n        assertTrue(result instanceof WrappedGet);\n    }\n\n    @Test\n    void testReadableMapWithNullGet() {\n        assertThrows(NullPointerException.class, () -> {\n            SplitMapUtils.readableMap(null);\n        });\n    }\n}\n"}]