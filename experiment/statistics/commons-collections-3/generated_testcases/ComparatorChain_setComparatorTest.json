[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Comparator;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class ComparatorChain_setComparatorTest {\n\n    private ComparatorChain<String> comparatorChain;\n    private Comparator<String> mockComparator;\n\n    @BeforeEach\n    public void setUp() {\n        comparatorChain = new ComparatorChain<>();\n        mockComparator = mock(Comparator.class);\n    }\n\n    @Test\n    public void testSetComparator_ForwardOrder() {\n        // Given\n        comparatorChain.addComparator(mockComparator);\n\n        // When\n        comparatorChain.setComparator(0, mockComparator, false);\n\n        // Then\n        verify(mockComparator, never()).compare(any(), any());\n    }\n\n    @Test\n    public void testSetComparator_ReverseOrder() {\n        // Given\n        comparatorChain.addComparator(mockComparator);\n\n        // When\n        comparatorChain.setComparator(0, mockComparator, true);\n\n        // Then\n        verify(mockComparator, never()).compare(any(), any());\n    }\n\n    @Test\n    public void testSetComparator_LockedChain() {\n        // Given\n        comparatorChain.addComparator(mockComparator);\n        comparatorChain.compare(\"a\", \"b\"); // Lock the chain\n\n        // When & Then\n        assertThrows(UnsupportedOperationException.class, () -> {\n            comparatorChain.setComparator(0, mockComparator, false);\n        });\n    }\n}\n"}]