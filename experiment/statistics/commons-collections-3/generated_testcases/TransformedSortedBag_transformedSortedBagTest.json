[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.SortedBag;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class TransformedSortedBag_transformedSortedBagTest {\n\n    @Test\n    public void testTransformedSortedBagWithNonEmptyBag() {\n        // Given\n        SortedBag<String> bag = mock(SortedBag.class);\n        Transformer<String, String> transformer = mock(Transformer.class);\n        when(bag.isEmpty()).thenReturn(false);\n        when(bag.toArray()).thenReturn(new String[]{\"a\", \"b\"});\n        when(transformer.apply(\"a\")).thenReturn(\"A\");\n        when(transformer.apply(\"b\")).thenReturn(\"B\");\n\n        // When\n        TransformedSortedBag<String> result = TransformedSortedBag.transformedSortedBag(bag, transformer);\n\n        // Then\n        verify(bag).clear();\n        verify(bag, times(1)).toArray();\n        verify(transformer).apply(\"a\");\n        verify(transformer).apply(\"b\");\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testTransformedSortedBagWithEmptyBag() {\n        // Given\n        SortedBag<String> bag = mock(SortedBag.class);\n        Transformer<String, String> transformer = mock(Transformer.class);\n        when(bag.isEmpty()).thenReturn(true);\n\n        // When\n        TransformedSortedBag<String> result = TransformedSortedBag.transformedSortedBag(bag, transformer);\n\n        // Then\n        verify(bag, never()).clear();\n        verify(bag, never()).toArray();\n        verify(transformer, never()).apply(anyString());\n        assertNotNull(result);\n    }\n}\n"}]