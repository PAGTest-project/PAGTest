[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectGraphIterator_hasNextTest {\n\n    private ObjectGraphIterator<String> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        List<String> list = new ArrayList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        iterator = new ObjectGraphIterator<>(list.iterator());\n    }\n\n    @Test\n    public void testHasNext_WithElements() {\n        assertTrue(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_WithoutElements() {\n        while (iterator.hasNext()) {\n            iterator.next();\n        }\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testHasNext_AfterIteration() {\n        while (iterator.hasNext()) {\n            iterator.next();\n        }\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }\n\n    @Test\n    public void testHasNext_WithTransformer() {\n        Transformer<String, String> transformer = input -> input + \" Transformed\";\n        iterator = new ObjectGraphIterator<>(\"A\", transformer);\n        assertTrue(iterator.hasNext());\n        assertEquals(\"A Transformed\", iterator.next());\n    }\n\n    @Test\n    public void testHasNext_WithNullRoot() {\n        iterator = new ObjectGraphIterator<>(null, null);\n        assertFalse(iterator.hasNext());\n    }\n}\n"}]