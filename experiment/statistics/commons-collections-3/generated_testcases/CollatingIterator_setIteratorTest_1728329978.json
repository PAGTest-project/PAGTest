[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass CollatingIterator_setIteratorTest {\n\n    @Test\n    void testSetIterator_Success() {\n        // Given\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(null, 2);\n        Iterator<Integer> mockIterator = mock(Iterator.class);\n\n        // When\n        collatingIterator.setIterator(0, mockIterator);\n\n        // Then\n        assertEquals(mockIterator, collatingIterator.getIterators().get(0));\n    }\n\n    @Test\n    void testSetIterator_NullIterator() {\n        // Given\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(null, 2);\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            collatingIterator.setIterator(0, null);\n        });\n    }\n\n    @Test\n    void testSetIterator_IterationStarted() {\n        // Given\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>(null, 2);\n        Iterator<Integer> mockIterator = mock(Iterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n        collatingIterator.addIterator(mockIterator);\n        collatingIterator.next(); // Start iteration\n\n        // When & Then\n        assertThrows(IllegalStateException.class, () -> {\n            collatingIterator.setIterator(0, mockIterator);\n        });\n    }\n}\n"}]