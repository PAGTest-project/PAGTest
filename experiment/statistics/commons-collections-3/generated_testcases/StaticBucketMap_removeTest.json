[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class StaticBucketMap_removeTest {\n\n    private StaticBucketMap<String, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new StaticBucketMap<>(17);\n    }\n\n    @Test\n    public void testRemoveExistingKey() {\n        map.put(\"key1\", \"value1\");\n        assertTrue(map.containsKey(\"key1\"));\n        assertEquals(\"value1\", map.remove(\"key1\"));\n        assertFalse(map.containsKey(\"key1\"));\n    }\n\n    @Test\n    public void testRemoveNonExistingKey() {\n        assertFalse(map.containsKey(\"key2\"));\n        assertNull(map.remove(\"key2\"));\n    }\n\n    @Test\n    public void testRemoveFromEmptyMap() {\n        assertNull(map.remove(\"key3\"));\n    }\n\n    @Test\n    public void testRemoveHeadOfBucket() {\n        map.put(\"key4\", \"value4\");\n        map.put(\"key5\", \"value5\");\n        assertTrue(map.containsKey(\"key4\"));\n        assertEquals(\"value4\", map.remove(\"key4\"));\n        assertFalse(map.containsKey(\"key4\"));\n        assertTrue(map.containsKey(\"key5\"));\n    }\n\n    @Test\n    public void testRemoveMiddleOfBucket() {\n        map.put(\"key6\", \"value6\");\n        map.put(\"key7\", \"value7\");\n        map.put(\"key8\", \"value8\");\n        assertTrue(map.containsKey(\"key7\"));\n        assertEquals(\"value7\", map.remove(\"key7\"));\n        assertFalse(map.containsKey(\"key7\"));\n        assertTrue(map.containsKey(\"key6\"));\n        assertTrue(map.containsKey(\"key8\"));\n    }\n\n    @Test\n    public void testRemoveTailOfBucket() {\n        map.put(\"key9\", \"value9\");\n        map.put(\"key10\", \"value10\");\n        assertTrue(map.containsKey(\"key10\"));\n        assertEquals(\"value10\", map.remove(\"key10\"));\n        assertFalse(map.containsKey(\"key10\"));\n        assertTrue(map.containsKey(\"key9\"));\n    }\n}\n"}]