[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class TransformedQueue_transformedQueueTest {\n\n    @Test\n    public void testTransformedQueueWithNonEmptyQueue() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        queue.add(\"a\");\n        queue.add(\"b\");\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When\n        TransformedQueue<String> transformedQueue = TransformedQueue.transformedQueue(queue, transformer);\n\n        // Then\n        assertEquals(2, queue.size()); // Change this line to check the size of the original queue\n        assertEquals(2, transformedQueue.size());\n        assertEquals(\"A\", transformedQueue.poll());\n        assertEquals(\"B\", transformedQueue.poll());\n    }\n\n    @Test\n    public void testTransformedQueueWithEmptyQueue() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When\n        TransformedQueue<String> transformedQueue = TransformedQueue.transformedQueue(queue, transformer);\n\n        // Then\n        assertEquals(0, queue.size());\n        assertEquals(0, transformedQueue.size());\n    }\n\n    @Test\n    public void testTransformedQueueWithNullQueue() {\n        // Given\n        Queue<String> queue = null;\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> TransformedQueue.transformedQueue(queue, transformer));\n    }\n\n    @Test\n    public void testTransformedQueueWithNullTransformer() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        Transformer<String, String> transformer = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> TransformedQueue.transformedQueue(queue, transformer));\n    }\n}\n"}]