[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Text;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.UserDataHandler;\nimport org.w3c.dom.Attr;\nimport java.util.NoSuchElementException;\n\npublic class NodeListIterator_nextTest {\n\n    private NodeListIterator iterator;\n    private NodeList mockNodeList;\n\n    @BeforeEach\n    public void setUp() {\n        mockNodeList = new NodeList() {\n            private Node[] nodes = {\n                createMockNode(\"node1\"),\n                createMockNode(\"node2\")\n            };\n\n            @Override\n            public Node item(int index) {\n                return nodes[index];\n            }\n\n            @Override\n            public int getLength() {\n                return nodes.length;\n            }\n        };\n        iterator = new NodeListIterator(mockNodeList);\n    }\n\n    private Node createMockNode(String name) {\n        return new Element() {\n            @Override\n            public String getNodeName() {\n                return name;\n            }\n\n            @Override\n            public String getNodeValue() {\n                return null;\n            }\n\n            @Override\n            public short getNodeType() {\n                return 0;\n            }\n\n            @Override\n            public Node getParentNode() {\n                return null;\n            }\n\n            @Override\n            public NodeList getChildNodes() {\n                return null;\n            }\n\n            @Override\n            public Node getFirstChild() {\n                return null;\n            }\n\n            @Override\n            public Node getLastChild() {\n                return null;\n            }\n\n            @Override\n            public Node getPreviousSibling() {\n                return null;\n            }\n\n            @Override\n            public Node getNextSibling() {\n                return null;\n            }\n\n            @Override\n            public NamedNodeMap getAttributes() {\n                return null;\n            }\n\n            @Override\n            public Document getOwnerDocument() {\n                return null;\n            }\n\n            @Override\n            public Node insertBefore(Node newChild, Node refChild) {\n                return null;\n            }\n\n            @Override\n            public Node replaceChild(Node newChild, Node oldChild) {\n                return null;\n            }\n\n            @Override\n            public Node removeChild(Node oldChild) {\n                return null;\n            }\n\n            @Override\n            public Node appendChild(Node newChild) {\n                return null;\n            }\n\n            @Override\n            public boolean hasChildNodes() {\n                return false;\n            }\n\n            @Override\n            public Node cloneNode(boolean deep) {\n                return null;\n            }\n\n            @Override\n            public void normalize() {}\n\n            @Override\n            public boolean isSupported(String feature, String version) {\n                return false;\n            }\n\n            @Override\n            public String getNamespaceURI() {\n                return null;\n            }\n\n            @Override\n            public String getPrefix() {\n                return null;\n            }\n\n            @Override\n            public void setPrefix(String prefix) {}\n\n            @Override\n            public String getLocalName() {\n                return null;\n            }\n\n            @Override\n            public boolean hasAttributes() {\n                return false;\n            }\n\n            @Override\n            public String getBaseURI() {\n                return null;\n            }\n\n            @Override\n            public short compareDocumentPosition(Node other) {\n                return 0;\n            }\n\n            @Override\n            public String getTextContent() {\n                return null;\n            }\n\n            @Override\n            public void setTextContent(String textContent) {}\n\n            @Override\n            public boolean isSameNode(Node other) {\n                return false;\n            }\n\n            @Override\n            public String lookupPrefix(String namespaceURI) {\n                return null;\n            }\n\n            @Override\n            public boolean isDefaultNamespace(String namespaceURI) {\n                return false;\n            }\n\n            @Override\n            public String lookupNamespaceURI(String prefix) {\n                return null;\n            }\n\n            @Override\n            public boolean isEqualNode(Node arg) {\n                return false;\n            }\n\n            @Override\n            public Object getFeature(String feature, String version) {\n                return null;\n            }\n\n            @Override\n            public Object setUserData(String key, Object data, UserDataHandler handler) {\n                return null;\n            }\n\n            @Override\n            public Object getUserData(String key) {\n                return null;\n            }\n\n            @Override\n            public void setIdAttributeNode(Attr idAttr, boolean isId) {}\n        };\n    }\n\n    @Test\n    public void testNextWithElements() {\n        assertTrue(iterator.hasNext());\n        assertEquals(\"node1\", iterator.next().getNodeName());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"node2\", iterator.next().getNodeName());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testNextWithNoElements() {\n        iterator = new NodeListIterator(new NodeList() {\n            @Override\n            public Node item(int index) {\n                return null;\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n        });\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }\n}\n"}]