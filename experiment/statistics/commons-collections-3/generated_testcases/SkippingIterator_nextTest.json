[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SkippingIterator_nextTest {\n\n    private List<String> testList;\n\n    @BeforeEach\n    public void setUp() {\n        testList = Arrays.asList(\"a\", \"b\", \"c\", \"d\");\n    }\n\n    @Test\n    public void testNextWithValidOffset() {\n        Iterator<String> iter = new SkippingIterator<>(testList.iterator(), 2);\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }\n\n    @Test\n    public void testNextWithZeroOffset() {\n        Iterator<String> iter = new SkippingIterator<>(testList.iterator(), 0);\n        assertTrue(iter.hasNext());\n        assertEquals(\"a\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }\n}\n"}]