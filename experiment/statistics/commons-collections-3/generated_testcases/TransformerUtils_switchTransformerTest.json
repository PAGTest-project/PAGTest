[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class TransformerUtils_switchTransformerTest {\n\n    @Test\n    public void testSwitchTransformerWithTruePredicate() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, String> trueTransformer = ConstantTransformer.constantTransformer(\"True\");\n        Transformer<String, String> falseTransformer = ConstantTransformer.constantTransformer(\"False\");\n\n        Transformer<String, String> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"True\", transformer.transform(\"Input\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithFalsePredicate() {\n        Predicate<String> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<String, String> trueTransformer = ConstantTransformer.constantTransformer(\"True\");\n        Transformer<String, String> falseTransformer = ConstantTransformer.constantTransformer(\"False\");\n\n        Transformer<String, String> transformer = TransformerUtils.switchTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"False\", transformer.transform(\"Input\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithEqualPredicate() {\n        Predicate<String> equalPredicate = EqualPredicate.equalPredicate(\"Match\");\n        Transformer<String, String> trueTransformer = ConstantTransformer.constantTransformer(\"Matched\");\n        Transformer<String, String> falseTransformer = ConstantTransformer.constantTransformer(\"NotMatched\");\n\n        Transformer<String, String> transformer = TransformerUtils.switchTransformer(equalPredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"Matched\", transformer.transform(\"Match\"));\n        assertEquals(\"NotMatched\", transformer.transform(\"NoMatch\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithExceptionTransformer() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, String> trueTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<String, String> falseTransformer = NOPTransformer.nopTransformer();\n\n        Transformer<String, String> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertThrows(FunctorException.class, () -> transformer.transform(\"Input\"));\n    }\n}\n"}]