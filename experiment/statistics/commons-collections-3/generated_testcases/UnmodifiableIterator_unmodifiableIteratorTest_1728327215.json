[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass UnmodifiableIterator_unmodifiableIteratorTest {\n\n    @Test\n    void testUnmodifiableIteratorWithModifiableIterator() {\n        Iterator<String> modifiableIterator = new Iterator<String>() {\n            private int count = 0;\n            @Override\n            public boolean hasNext() {\n                return count < 1;\n            }\n            @Override\n            public String next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n                count++;\n                return \"element\";\n            }\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n\n        Iterator<String> unmodifiableIterator = UnmodifiableIterator.unmodifiableIterator(modifiableIterator);\n        assertTrue(unmodifiableIterator.hasNext());\n        assertEquals(\"element\", unmodifiableIterator.next());\n        assertThrows(UnsupportedOperationException.class, unmodifiableIterator::remove);\n    }\n\n    @Test\n    void testUnmodifiableIteratorWithUnmodifiableIterator() {\n        Iterator<String> unmodifiableIterator = new UnmodifiableIterator<>(new Iterator<String>() {\n            private int count = 0;\n            @Override\n            public boolean hasNext() {\n                return count < 1;\n            }\n            @Override\n            public String next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n                count++;\n                return \"element\";\n            }\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        });\n\n        Iterator<String> resultIterator = UnmodifiableIterator.unmodifiableIterator(unmodifiableIterator);\n        assertSame(unmodifiableIterator, resultIterator);\n    }\n\n    @Test\n    void testUnmodifiableIteratorWithNullIterator() {\n        assertThrows(NullPointerException.class, () -> {\n            UnmodifiableIterator.unmodifiableIterator(null);\n        });\n    }\n}\n"}]