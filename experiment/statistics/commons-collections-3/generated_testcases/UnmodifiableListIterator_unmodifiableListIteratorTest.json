[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.ListIterator;\nimport java.util.NoSuchElementException;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass UnmodifiableListIterator_unmodifiableListIteratorTest {\n\n    @Test\n    void testUnmodifiableListIteratorWithUnmodifiableIterator() {\n        // Given\n        ListIterator<String> mockIterator = mock(ListIterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n        when(mockIterator.next()).thenReturn(\"test\");\n        when(mockIterator.hasPrevious()).thenReturn(false);\n        when(mockIterator.previous()).thenThrow(new NoSuchElementException());\n\n        // When\n        ListIterator<String> result = UnmodifiableListIterator.unmodifiableListIterator(mockIterator);\n\n        // Then\n        assertTrue(result.hasNext());\n        assertEquals(\"test\", result.next());\n        assertFalse(result.hasPrevious());\n        assertThrows(NoSuchElementException.class, result::previous);\n        assertThrows(UnsupportedOperationException.class, () -> result.add(\"new\"));\n        assertThrows(UnsupportedOperationException.class, result::remove);\n        assertThrows(UnsupportedOperationException.class, () -> result.set(\"new\"));\n    }\n\n    @Test\n    void testUnmodifiableListIteratorWithModifiableIterator() {\n        // Given\n        ListIterator<String> mockIterator = mock(ListIterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n        when(mockIterator.next()).thenReturn(\"test\");\n        when(mockIterator.hasPrevious()).thenReturn(false);\n        when(mockIterator.previous()).thenThrow(new NoSuchElementException());\n\n        // When\n        ListIterator<String> result = UnmodifiableListIterator.unmodifiableListIterator(mockIterator);\n\n        // Then\n        assertTrue(result.hasNext());\n        assertEquals(\"test\", result.next());\n        assertFalse(result.hasPrevious());\n        assertThrows(NoSuchElementException.class, result::previous);\n        assertThrows(UnsupportedOperationException.class, () -> result.add(\"new\"));\n        assertThrows(UnsupportedOperationException.class, result::remove);\n        assertThrows(UnsupportedOperationException.class, () -> result.set(\"new\"));\n    }\n\n    @Test\n    void testUnmodifiableListIteratorWithNullIterator() {\n        // Given\n        ListIterator<String> nullIterator = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> UnmodifiableListIterator.unmodifiableListIterator(nullIterator));\n    }\n}\n"}]