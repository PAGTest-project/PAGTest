[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FixedOrderComparator_equalsTest {\n\n    private FixedOrderComparator<String> comparator;\n\n    @BeforeEach\n    public void setUp() {\n        comparator = new FixedOrderComparator<>(new String[]{\"New York\", \"Los Angeles\", \"Chicago\"});\n    }\n\n    @Test\n    public void testEqualsReflexive() {\n        assertTrue(comparator.equals(comparator));\n    }\n\n    @Test\n    public void testEqualsSymmetric() {\n        FixedOrderComparator<String> comparator2 = new FixedOrderComparator<>(new String[]{\"New York\", \"Los Angeles\", \"Chicago\"});\n        assertTrue(comparator.equals(comparator2));\n        assertTrue(comparator2.equals(comparator));\n    }\n\n    @Test\n    public void testEqualsNull() {\n        assertFalse(comparator.equals(null));\n    }\n\n    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(comparator.equals(new Object()));\n    }\n\n    @Test\n    public void testEqualsDifferentState() {\n        FixedOrderComparator<String> comparator2 = new FixedOrderComparator<>(new String[]{\"New York\", \"Los Angeles\", \"Chicago\"});\n        comparator2.add(\"Houston\");\n        assertFalse(comparator.equals(comparator2));\n    }\n\n    @Test\n    public void testEqualsDifferentLockState() {\n        FixedOrderComparator<String> comparator2 = new FixedOrderComparator<>(new String[]{\"New York\", \"Los Angeles\", \"Chicago\"});\n        comparator.compare(\"New York\", \"Los Angeles\");\n        assertFalse(comparator.equals(comparator2));\n    }\n\n    @Test\n    public void testEqualsDifferentUnknownObjectBehavior() {\n        FixedOrderComparator<String> comparator2 = new FixedOrderComparator<>(new String[]{\"New York\", \"Los Angeles\", \"Chicago\"});\n        comparator2.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n        assertFalse(comparator.equals(comparator2));\n    }\n}\n"}]