[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class ComparatorChain_compareTest {\n\n    private ComparatorChain<String> comparatorChain;\n    private List<Comparator<String>> comparators;\n    private BitSet orderingBits;\n\n    @BeforeEach\n    public void setUp() {\n        comparators = new ArrayList<>();\n        orderingBits = new BitSet();\n        comparatorChain = new ComparatorChain<>(comparators, orderingBits);\n    }\n\n    @Test\n    public void testCompare_SingleComparator_ForwardOrder() {\n        comparators.add(Comparator.naturalOrder());\n        assertEquals(1, comparatorChain.compare(\"b\", \"a\"));\n    }\n\n    @Test\n    public void testCompare_SingleComparator_ReverseOrder() {\n        comparators.add(Comparator.naturalOrder());\n        orderingBits.set(0);\n        assertEquals(-1, comparatorChain.compare(\"b\", \"a\"));\n    }\n\n    @Test\n    public void testCompare_MultipleComparators_MixedOrder() {\n        comparators.add(Comparator.naturalOrder());\n        comparators.add(Comparator.reverseOrder());\n        orderingBits.set(1);\n        assertEquals(1, comparatorChain.compare(\"a\", \"b\"));\n    }\n\n    @Test\n    public void testCompare_EmptyChain_ThrowsException() {\n        assertThrows(UnsupportedOperationException.class, () -> comparatorChain.compare(\"a\", \"b\"));\n    }\n}\n"}]