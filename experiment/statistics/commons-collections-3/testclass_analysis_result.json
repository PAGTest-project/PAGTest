[{"file_path": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java", "testclass_name": "TrieUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.trie.PatriciaTrie;", "import org.apache.commons.collections4.trie.UnmodifiableTrie;", "import org.junit.jupiter.api.Test;"], "name": "TrieUtilsTest", "description": "Unit tests for the TrieUtils class, specifically focusing on the unmodifiableTrie method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableTrie", "primary_tested": ["TrieUtils.unmodifiableTrie(Trie)"], "external_dependencies": {"modules": ["PatriciaTrie", "UnmodifiableTrie", "TrieUtils"]}, "category": "unit", "description": "Tests the functionality of the unmodifiableTrie method in TrieUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java", "testclass_name": "StaticBucketMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMapTest", "description": "Unit tests for StaticBucketMap class, focusing on key and value checks.", "class_members": {"methods": [{"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isFailFastExpected", "signature": "boolean isFailFastExpected()"}, {"name": "makeObject", "signature": "StaticBucketMap<K, V> makeObject()"}]}, "test_cases": [{"name": "test_containsKey_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.containsKey(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the containsKey method with null key to ensure it matches correctly."}, {"name": "test_containsValue_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.containsValue(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the containsValue method with null value to ensure it matches correctly."}, {"name": "test_get_nullMatchesIncorrectly", "primary_tested": ["StaticBucketMap.get(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the get method with null key to ensure it retrieves the correct value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java", "testclass_name": "TransformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedBagTest", "description": "Unit tests for TransformedBag functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBag", "primary_tested": ["TransformedBag.transformingBag(Bag<T>,Transformer<T,T>)"], "associated_methods": ["Bag.isEmpty()", "Bag.add(T)", "Bag.size()", "Bag.contains(Object)", "Bag.remove(Object)"], "external_dependencies": {"modules": ["TransformedBag", "HashBag", "Transformer", "TransformedCollectionTest", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedBag, ensuring elements are transformed and added correctly."}, {"name": "testTransformedBag_decorateTransform", "primary_tested": ["TransformedBag.transformedBag(Bag<T>,Transformer<T,T>)"], "associated_methods": ["Bag.size()", "Bag.contains(Object)", "Bag.remove(Object)"], "external_dependencies": {"modules": ["TransformedBag", "HashBag", "Transformer", "TransformedCollectionTest", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the decorating and transforming functionality of TransformedBag, ensuring elements are transformed and checked correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java", "testclass_name": "TreeBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;"], "name": "TreeBagTest", "description": "Unit tests for TreeBag class in Apache Commons Collections.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "SortedBag<T> makeObject()"}, {"name": "setupBag", "signature": "SortedBag<T> setupBag()"}]}, "test_cases": [{"name": "testCollections265", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "IllegalArgumentException"]}, "category": "unit", "description": "Tests that adding an invalid object to a TreeBag throws an IllegalArgumentException."}, {"name": "testCollections555", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag", "NullPointerException"]}, "category": "unit", "description": "Tests that adding null to a TreeBag throws a NullPointerException, and ensures that adding null to a non-empty TreeBag with a comparator also throws a NullPointerException."}, {"name": "testOrdering", "primary_tested": ["TreeBag.toArray()", "SortedBag.first()", "SortedBag.last()"], "associated_methods": ["TreeBag.setupBag()"], "external_dependencies": {"modules": ["TreeBag", "SortedBag"], "class_members": [{"name": "setupBag", "type": "method"}]}, "category": "unit", "description": "Tests the ordering of elements in a TreeBag, ensuring that elements are returned in the correct order and that the first and last elements are correctly identified."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java", "testclass_name": "ArrayStackTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStackTest", "description": "Unit tests for the ArrayStack class, focusing on its stack operations and deprecated methods.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "ArrayStack<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNewStack", "primary_tested": ["ArrayStack.empty()", "ArrayStack.size()", "ArrayStack.peek()", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the initialization and basic operations of a new ArrayStack."}, {"name": "testPushPeekPop", "primary_tested": ["ArrayStack.push(E)", "ArrayStack.peek()", "ArrayStack.pop()", "ArrayStack.empty()", "ArrayStack.size()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the push, peek, and pop operations of the ArrayStack."}, {"name": "testSearch", "primary_tested": ["ArrayStack.push(E)", "ArrayStack.search(Object)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the search functionality of the ArrayStack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java", "testclass_name": "ArrayUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "ArrayUtilsTest", "description": "Unit tests for the ArrayUtils class, focusing on methods like contains and indexOf.", "class_members": {"variables": [{"name": "array", "type": "Object[]"}], "nested_classes": [{"name": "LANG1261ParentObject", "description": "Internal class used in testContains_LANG_1261"}, {"name": "LANG1261ChildObject", "description": "Internal class used in testContains_LANG_1261"}]}, "test_cases": [{"name": "testContains", "primary_tested": ["ArrayUtils.contains(Object[],Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the contains functionality of the ArrayUtils class."}, {"name": "testContains_LANG_1261", "primary_tested": ["ArrayUtils.contains(Object[],Object)"], "associated_methods": ["LANG1261ParentObject.equals(Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the contains functionality of the ArrayUtils class with custom objects."}, {"name": "testIndexOf", "primary_tested": ["ArrayUtils.indexOf(Object[],Object)"], "external_dependencies": {"modules": ["ArrayUtils"], "class_members": [{"name": "array", "type": "variable"}]}, "category": "unit", "description": "Tests the indexOf functionality of the ArrayUtils class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java", "testclass_name": "CollectionBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "CollectionBagTest", "description": "Unit tests for CollectionBag class, focusing on serialization compatibility.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeConfirmedCollection", "signature": "Collection<T> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<T> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyBagCompatibility", "primary_tested": ["CollectionBag.makeObject()"], "associated_methods": ["CollectionBag.isEmpty()", "CollectionBag.equals(Object)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["CollectionBag.readExternalFormFromDisk(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization compatibility of an empty CollectionBag."}, {"name": "testFullBagCompatibility", "primary_tested": ["CollectionBag.makeFullCollection()"], "associated_methods": ["CollectionBag.size()", "CollectionBag.equals(Object)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeFullCollection", "type": "method"}], "project_specific_resources": ["CollectionBag.readExternalFormFromDisk(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization compatibility of a full CollectionBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java", "testclass_name": "TransformedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedQueueTest", "description": "Tests for the TransformedQueue class, which applies transformations to elements in a queue.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeConfirmedCollection", "signature": "Queue<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Queue<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedQueue", "primary_tested": ["TransformedQueue.transformingQueue(Queue<E>,Transformer<E,E>)"], "associated_methods": ["Queue.add(E)", "Queue.size()", "Queue.contains(Object)", "Queue.remove(Object)"], "external_dependencies": {"modules": ["TransformedQueue", "TransformedCollectionTest", "Transformer", "LinkedList", "Arrays", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the transformation functionality of TransformedQueue by adding elements and checking the transformed state."}, {"name": "testTransformedQueue_decorateTransform", "primary_tested": ["TransformedQueue.transformedQueue(Queue<E>,Transformer<E,E>)"], "associated_methods": ["Queue.size()", "Queue.contains(Object)", "Queue.remove(Object)"], "external_dependencies": {"modules": ["TransformedQueue", "TransformedCollectionTest", "Transformer", "LinkedList", "Collections"], "class_members": []}, "category": "unit", "description": "Tests the transformation functionality of TransformedQueue by decorating an existing queue and checking the transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java", "testclass_name": "CollectionSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "CollectionSortedBagTest", "description": "Unit tests for CollectionSortedBag, focusing on serialization compatibility.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullNonNullElements", "signature": "T[] getFullNonNullElements()"}, {"name": "getOtherNonNullElements", "signature": "T[] getOtherNonNullElements()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<T> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<T> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Bag<T> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEmptyBagCompatibility", "primary_tested": ["CollectionSortedBag.makeObject()"], "associated_methods": ["CollectionSortedBag.readExternalFormFromDisk(String)"], "external_dependencies": {"modules": ["Bag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the serialization compatibility of an empty CollectionSortedBag."}, {"name": "testFullBagCompatibility", "primary_tested": ["CollectionSortedBag.makeFullCollection()"], "associated_methods": ["CollectionSortedBag.readExternalFormFromDisk(String)"], "external_dependencies": {"modules": ["SortedBag", "Serializable", "IOException", "ClassNotFoundException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the serialization compatibility of a full CollectionSortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java", "testclass_name": "TransformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.List;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformedCollectionTest", "description": "Unit tests for TransformedCollection functionality, focusing on transformations like String to Integer and case conversion.", "class_members": {"variables": [{"name": "NOOP_TRANSFORMER", "type": "static final Transformer<Object, Object>"}, {"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "static final Transformer<Object, Object>"}, {"name": "TO_LOWER_CASE_TRANSFORMER", "type": "static final Transformer<Object, Object>"}], "methods": [], "nested_classes": [{"name": "StringToInteger", "description": "Internal transformer class converting String to Integer"}, {"name": "ToLowerCase", "description": "Internal transformer class converting String to lower case"}]}, "fixtures": [], "test_cases": [{"name": "testTransformedCollection", "primary_tested": ["TransformedCollection.transformingCollection(Collection,Transformer)"], "associated_methods": ["TransformedCollection.add(Object)", "TransformedCollection.contains(Object)", "TransformedCollection.remove(Object)"], "external_dependencies": {"modules": ["TransformedCollection", "Transformer", "ArrayList", "Integer"], "class_members": [{"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation of a collection from String to Integer."}, {"name": "testTransformedCollection_decorateTransform", "primary_tested": ["TransformedCollection.transformedCollection(Collection,Transformer)"], "associated_methods": ["TransformedCollection.contains(Object)", "TransformedCollection.remove(Object)"], "external_dependencies": {"modules": ["TransformedCollection", "Transformer", "ArrayList", "Integer", "Collections"], "class_members": [{"name": "STRING_TO_INTEGER_TRANSFORMER", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation of an existing collection from String to Integer using decoration."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueueTest.java", "testclass_name": "SynchronizedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.BulkTest;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "SynchronizedQueueTest", "description": "Tests for the SynchronizedQueue class, focusing on serialization and external form writing.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Queue<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testCreate", "primary_tested": ["SynchronizedQueue.synchronizedQueue(Queue<T>)"], "associated_methods": ["AbstractQueueTest.makeFullCollection()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue", "BulkTest", "java.io.Serializable"], "class_members": [{"name": "makeObject", "type": "method"}], "project_specific_resources": ["BulkTest.TEST_DATA_PATH"]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and serialization of an empty and a full SynchronizedQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java", "testclass_name": "UnmodifiableBoundedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.BoundedCollection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.list.FixedSizeList;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBoundedCollectionTest", "description": "Tests for the UnmodifiableBoundedCollection class, focusing on its unmodifiable and bounded properties.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "BoundedCollection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<E> makeObject()"}, {"name": "skipSerializedCanonicalTests", "signature": "boolean skipSerializedCanonicalTests()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "associated_methods": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(null)"], "external_dependencies": {"modules": ["BoundedCollection", "UnmodifiableBoundedCollection"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable bounded collection and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "associated_methods": ["UnmodifiableBoundedCollection.unmodifiableBoundedCollection(BoundedCollection)"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableBoundedCollection"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the created collections are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java", "testclass_name": "UnmodifiableSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedBagTest", "description": "Tests for the UnmodifiableSortedBag class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCollection", "signature": "SortedBag<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "SortedBag<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedBag<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBagTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSortedBag", "SortedBag", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableSortedBag, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedBag.unmodifiableSortedBag(SortedBag)"], "associated_methods": ["UnmodifiableSortedBagTest.makeObject()", "UnmodifiableSortedBagTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSortedBag", "SortedBag", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of UnmodifiableSortedBag, ensuring it implements the Unmodifiable interface."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java", "testclass_name": "PredicatedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.collection.PredicatedCollectionTest;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedQueueTest", "description": "Unit tests for PredicatedQueue functionality.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateCollection", "signature": "Queue<E> decorateCollection(Queue<E> queue, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}, {"name": "makeTestQueue", "signature": "Queue<E> makeTestQueue()"}]}, "test_cases": [{"name": "testGet", "primary_tested": ["Queue.peek()"], "associated_methods": ["Queue.add(E)", "Queue.peek()"], "external_dependencies": {"modules": ["Queue", "Predicate", "TruePredicate", "LinkedList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "testPredicate", "type": "variable"}, {"name": "makeTestQueue", "type": "method"}]}, "category": "unit", "description": "Tests the peek functionality of the PredicatedQueue."}, {"name": "testRemove", "primary_tested": ["Queue.poll()"], "associated_methods": ["Queue.add(E)", "Queue.poll()"], "external_dependencies": {"modules": ["Queue", "Predicate", "TruePredicate", "LinkedList", "Arrays"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "testPredicate", "type": "variable"}, {"name": "makeTestQueue", "type": "method"}]}, "category": "unit", "description": "Tests the poll functionality of the PredicatedQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java", "testclass_name": "TransformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMapTest", "description": "Unit tests for TransformedMap functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedMap.transformingMap(Map<K, V>, Transformer<? super K, ? extends K>, Transformer<? super V, ? extends V>)"], "associated_methods": ["Map.put(K, V)", "Map.get(Object)", "Map.size()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest", "Transformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a map with transforming capabilities."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedMap.transformedMap(Map<K, V>, Transformer<? super K, ? extends K>, Transformer<? super V, ? extends V>)"], "associated_methods": ["Map.put(K, V)", "Map.get(Object)", "Map.size()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest", "Transformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a map with transforming capabilities using transformedMap."}, {"name": "testTransformedMap", "primary_tested": ["TransformedMap.transformingMap(Map<K, V>, Transformer<? super K, ? extends K>, Transformer<? super V, ? extends V>)"], "associated_methods": ["Map.put(K, V)", "Map.get(Object)", "Map.size()", "Map.containsKey(Object)", "Map.containsValue(Object)", "Map.remove(Object)", "Set.toArray(T[])", "Map.Entry.setValue(V)", "Set.iterator()"], "external_dependencies": {"modules": ["HashMap", "TransformedMap", "TransformedCollectionTest", "Transformer", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of TransformedMap with various transformations and operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "testclass_name": "EnumerationUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Enumeration;", "import java.util.Hashtable;", "import java.util.Iterator;", "import java.util.List;", "import java.util.StringTokenizer;", "import java.util.Vector;", "import org.junit.jupiter.api.Test;"], "name": "EnumerationUtilsTest", "description": "Unit tests for the EnumerationUtils class, which provides utility methods for working with Enumerations.", "class_members": {"variables": [{"name": "TO_LIST_FIXTURE", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testAsIterableFor", "primary_tested": ["EnumerationUtils.asIterable(Enumeration)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["Vector", "Enumeration", "Iterator"]}, "category": "unit", "description": "Tests the asIterable method of EnumerationUtils to ensure it correctly converts an Enumeration to an Iterable."}, {"name": "testAsIterableForNull", "primary_tested": ["EnumerationUtils.asIterable(Enumeration)"], "external_dependencies": {"modules": ["Enumeration"]}, "category": "unit", "description": "Tests the asIterable method of EnumerationUtils to ensure it throws a NullPointerException when given a null Enumeration."}, {"name": "testGetFromEnumeration", "primary_tested": ["EnumerationUtils.get(Enumeration,int)"], "associated_methods": ["Enumeration.hasMoreElements()"], "external_dependencies": {"modules": ["Vector", "Enumeration"]}, "category": "unit", "description": "Tests the get method of EnumerationUtils to ensure it correctly retrieves elements from an Enumeration by index and handles out-of-bounds indices."}, {"name": "testToListWithHashtable", "primary_tested": ["EnumerationUtils.toList(Enumeration)"], "associated_methods": ["List.contains(Object)", "List.containsAll(Collection)", "List.size()"], "external_dependencies": {"modules": ["Hashtable", "Enumeration", "List"]}, "category": "unit", "description": "Tests the toList method of EnumerationUtils to ensure it correctly converts the elements and keys of a Hashtable to Lists."}, {"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(Enumeration)"], "associated_methods": ["StringTokenizer.hasMoreTokens()", "StringTokenizer.nextToken()", "List.add(Object)", "List.equals(Object)"], "external_dependencies": {"modules": ["StringTokenizer", "Enumeration", "List"], "class_members": [{"name": "TO_LIST_FIXTURE", "type": "variable"}]}, "category": "unit", "description": "Tests the toList method of EnumerationUtils to ensure it correctly converts a StringTokenizer to a List."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "testclass_name": "ComparatorUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorUtilsTest", "description": "Unit tests for the ComparatorUtils class, which provides utility methods for creating and manipulating comparators.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBooleanComparator", "primary_tested": ["ComparatorUtils.booleanComparator(boolean)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the booleanComparator method to ensure it correctly compares Boolean values based on the provided order."}, {"name": "testChainedComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the chainedComparator method to ensure it correctly chains two natural comparators and compares Integer values."}, {"name": "testMax", "primary_tested": ["ComparatorUtils.max(Object,Object,Comparator)"], "associated_methods": ["ComparatorUtils.reversedComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the max method to ensure it correctly returns the maximum of two values based on the provided comparator, including handling of reversed comparators and null values."}, {"name": "testMin", "primary_tested": ["ComparatorUtils.min(Object,Object,Comparator)"], "associated_methods": ["ComparatorUtils.reversedComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the min method to ensure it correctly returns the minimum of two values based on the provided comparator, including handling of reversed comparators and null values."}, {"name": "testNullHighComparator", "primary_tested": ["ComparatorUtils.nullHighComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the nullHighComparator method to ensure it correctly treats null values as higher than non-null values."}, {"name": "testNullLowComparator", "primary_tested": ["ComparatorUtils.nullLowComparator(Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"]}, "category": "unit", "description": "Tests the nullLowComparator method to ensure it correctly treats null values as lower than non-null values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "testclass_name": "MultiSetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.apache.commons.collections4.multiset.HashMultiSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiSetUtilsTest", "description": "Unit tests for MultiSetUtils class, focusing on various utility methods for MultiSet operations.", "class_members": {"variables": [{"name": "fullArray", "type": "String[]"}, {"name": "multiSet", "type": "MultiSet<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyMultiSet", "primary_tested": ["MultiSetUtils.emptyMultiSet()"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "UnsupportedOperationException"]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and behavior of an empty MultiSet, ensuring it is read-only."}, {"name": "testPredicatedMultiSet", "primary_tested": ["MultiSetUtils.predicatedMultiSet(MultiSet<String>,Predicate<String>)"], "associated_methods": ["MultiSet.size()", "MultiSet.getCount(String)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "Predicate", "NullPointerException", "IllegalArgumentException"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the predicated MultiSet creation and behavior, ensuring it adheres to the provided predicate."}, {"name": "testSynchronizedMultiSet", "primary_tested": ["MultiSetUtils.synchronizedMultiSet(MultiSet<String>)"], "associated_methods": ["MultiSet.add(String)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the synchronized MultiSet creation and behavior, ensuring it can be modified safely."}, {"name": "testUnmodifiableMultiSet", "primary_tested": ["MultiSetUtils.unmodifiableMultiSet(MultiSet<String>)"], "external_dependencies": {"modules": ["MultiSetUtils", "MultiSet", "UnsupportedOperationException", "NullPointerException"], "class_members": [{"name": "multiSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the unmodifiable MultiSet creation and behavior, ensuring it is read-only."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java", "testclass_name": "TransformedSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedBagTest", "description": "Tests for TransformedSortedBag functionality.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "SortedBag<T> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testTransformedBag", "primary_tested": ["TransformedSortedBag.transformingSortedBag(SortedBag<T>,Transformer<T,T>)"], "associated_methods": ["SortedBag.add(T)", "SortedBag.size()", "SortedBag.contains(Object)", "SortedBag.remove(Object)"], "external_dependencies": {"modules": ["SortedBag", "Transformer", "TransformedCollectionTest", "TreeBag", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSortedBag by adding elements and checking their transformed state."}, {"name": "testTransformedBag_decorateTransform", "primary_tested": ["TransformedSortedBag.transformedSortedBag(SortedBag<T>,Transformer<T,T>)"], "associated_methods": ["TreeBag.add(T)", "SortedBag.size()", "SortedBag.contains(Object)", "SortedBag.remove(Object)"], "external_dependencies": {"modules": ["SortedBag", "Transformer", "TransformedCollectionTest", "TreeBag", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the decorating and transforming functionality of TransformedSortedBag by adding elements to an original bag and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java", "testclass_name": "PredicatedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedBagTest", "description": "Unit tests for PredicatedBag functionality, focusing on illegal and legal additions, and decorations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateBag", "signature": "protected Bag<T> decorateBag(final HashBag<T> bag, final Predicate<T> predicate)"}, {"name": "makeTestBag", "signature": "protected Bag<T> makeTestBag()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["Bag.add(T)"], "external_dependencies": {"modules": ["Bag", "HashBag", "Predicate", "TruePredicate", "IllegalArgumentException"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "decorateBag", "type": "method"}, {"name": "makeTestBag", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element to the bag throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedBag.predicatedBag(HashBag<T>, Predicate<T>)"], "external_dependencies": {"modules": ["HashBag", "Predicate", "TruePredicate", "IllegalArgumentException", "NullPointerException"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "decorateBag", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a bag with illegal elements or a null predicate throws an IllegalArgumentException or NullPointerException."}, {"name": "testLegalAddRemove", "primary_tested": ["Bag.add(T)", "Bag.remove(T)", "Bag.uniqueSet()"], "associated_methods": ["Bag.uniqueSet()"], "external_dependencies": {"modules": ["Bag", "HashBag", "Predicate", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "decorateBag", "type": "method"}, {"name": "makeTestBag", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements from the bag, ensuring the unique set is updated correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "testclass_name": "QueueUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.collections4.queue.PredicatedQueue;", "import org.apache.commons.collections4.queue.SynchronizedQueue;", "import org.apache.commons.collections4.queue.TransformedQueue;", "import org.apache.commons.collections4.queue.UnmodifiableQueue;", "import org.junit.jupiter.api.Test;"], "name": "QueueUtilsTest", "description": "Unit tests for various utility methods in QueueUtils.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<Object>"}, {"name": "nopTransformer", "type": "Transformer<Object, Object>"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyQueue", "primary_tested": ["QueueUtils.emptyQueue()"], "external_dependencies": {"modules": ["QueueUtils", "UnmodifiableQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an empty unmodifiable queue and verifies its properties."}, {"name": "testPredicatedQueue", "primary_tested": ["QueueUtils.predicatedQueue(Queue,Predicate)"], "external_dependencies": {"modules": ["QueueUtils", "PredicatedQueue", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a predicated queue and verifies its properties and exceptions."}, {"name": "testSynchronizedQueue", "primary_tested": ["QueueUtils.synchronizedQueue(Queue)"], "external_dependencies": {"modules": ["QueueUtils", "SynchronizedQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a synchronized queue and verifies its properties and exceptions."}, {"name": "testTransformedQueue", "primary_tested": ["QueueUtils.transformingQueue(Queue,Transformer)"], "external_dependencies": {"modules": ["QueueUtils", "TransformedQueue", "TransformerUtils"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a transformed queue and verifies its properties and exceptions."}, {"name": "testUnmodifiableQueue", "primary_tested": ["QueueUtils.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["QueueUtils", "UnmodifiableQueue"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of an unmodifiable queue and verifies its properties and exceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java", "testclass_name": "HashedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.junit.jupiter.api.Test;"], "name": "HashedMapTest", "description": "Unit tests for the HashedMap class in the Apache Commons Collections library.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "HashedMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["HashedMap.clone()"], "associated_methods": ["HashedMap.size()", "HashedMap.get(Object)"], "external_dependencies": {"modules": ["HashedMap"]}, "category": "unit", "description": "Tests the cloning functionality of the HashedMap."}, {"name": "testInitialCapacityZero", "primary_tested": ["HashedMap.HashedMap(int)"], "associated_methods": ["HashedMap.data.length"], "external_dependencies": {"modules": ["HashedMap"]}, "category": "unit", "description": "Tests the behavior of HashedMap when initialized with an initial capacity of zero."}, {"name": "testInternalState", "primary_tested": ["HashedMap.HashedMap(int,float)"], "associated_methods": ["HashedMap.loadFactor", "HashedMap.size", "HashedMap.data.length", "HashedMap.threshold", "HashedMap.modCount", "HashedMap.putAll(Map)", "HashedMap.put(K,V)"], "external_dependencies": {"modules": ["HashedMap"]}, "category": "unit", "description": "Tests the internal state and capacity management of the HashedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java", "testclass_name": "UnmodifiableCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableCollectionTest", "description": "Tests for the UnmodifiableCollection class, focusing on its unmodifiable nature and factory decoration.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Collection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection<E>)"], "associated_methods": ["UnmodifiableCollection.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableCollection and ensures it throws NullPointerException for null input."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableCollection.makeObject()"], "associated_methods": ["UnmodifiableCollection.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the collections created by UnmodifiableCollection are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "testclass_name": "LazySortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.Map;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.concurrent.ConcurrentSkipListMap;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "LazySortedMapTest", "description": "Unit tests for the LazySortedMap class, focusing on its functionality and behavior with different comparators and factories.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}, {"name": "reverseStringComparator", "type": "Comparator<String>"}], "methods": [], "nested_classes": [{"name": "ReverseStringComparator", "description": "A comparator that reverses the natural order of String comparison."}]}, "fixtures": [], "test_cases": [{"name": "testMapGet", "primary_tested": ["LazySortedMap.get(Integer)"], "external_dependencies": {"modules": ["TreeMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of LazySortedMap with different factories."}, {"name": "testReverseSortOrder", "primary_tested": ["LazySortedMap.lastKey()", "LazySortedMap.firstKey()", "LazySortedMap.tailMap(String).firstKey()", "LazySortedMap.headMap(String).lastKey()", "LazySortedMap.subMap(String,String).lastKey()", "LazySortedMap.comparator()"], "associated_methods": ["LazySortedMap.put(String,Number)", "LazySortedMap.get(String)"], "external_dependencies": {"modules": ["ConcurrentSkipListMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}, {"name": "reverseStringComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the sorting order of LazySortedMap with a reverse comparator."}, {"name": "testSortOrder", "primary_tested": ["LazySortedMap.firstKey()", "LazySortedMap.lastKey()", "LazySortedMap.tailMap(String).firstKey()", "LazySortedMap.headMap(String).lastKey()", "LazySortedMap.subMap(String,String).lastKey()", "LazySortedMap.comparator()"], "associated_methods": ["LazySortedMap.put(String,Number)", "LazySortedMap.get(String)"], "external_dependencies": {"modules": ["TreeMap", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the sorting order of LazySortedMap with the natural comparator."}, {"name": "testTransformerDecorate", "primary_tested": ["LazySortedMap.lazySortedMap(TreeMap,Transformer)"], "external_dependencies": {"modules": ["TreeMap", "TransformerUtils", "FactoryUtils"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the decoration of LazySortedMap with a transformer and checks for expected exceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java", "testclass_name": "PredicatedSortedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.SortedBag;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedBagTest", "description": "Unit tests for PredicatedSortedBag functionality.", "class_members": {"variables": [{"name": "nullBag", "type": "SortedBag<T>"}, {"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateBag", "signature": "SortedBag<T> decorateBag(SortedBag<T> bag, Predicate<T> predicate)"}, {"name": "makeTestBag", "signature": "SortedBag<T> makeTestBag()"}, {"name": "stringPredicate", "signature": "Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorate", "primary_tested": ["PredicatedSortedBag.predicatedSortedBag(SortedBag<T>,Predicate<T>)"], "associated_methods": ["PredicatedSortedBag.decorated()"], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "NullPointerException"], "class_members": [{"name": "nullBag", "type": "variable"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests the decoration functionality of PredicatedSortedBag and checks for expected exceptions when decorating with null predicates or bags."}, {"name": "testSortOrder", "primary_tested": ["SortedBag.add(T)", "SortedBag.first()", "SortedBag.last()", "SortedBag.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["TreeBag", "PredicatedSortedBag", "Comparator"], "class_members": [{"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests the sort order and comparator functionality of a decorated SortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java", "testclass_name": "UnmodifiableBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBagTest", "description": "Tests for the UnmodifiableBag class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getCollection", "signature": "Bag<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "Bag<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Bag<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBag.unmodifiableBag(Bag)"], "external_dependencies": {"modules": ["UnmodifiableBag", "Bag", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableBag, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBag.makeObject()", "UnmodifiableBag.makeFullCollection()"], "associated_methods": ["UnmodifiableBag.makeObject()", "UnmodifiableBag.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableBag", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of the UnmodifiableBag, ensuring it implements the Unmodifiable interface."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java", "testclass_name": "UnmodifiableOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedMapTest", "description": "Tests for the UnmodifiableOrderedMap class, focusing on its unmodifiable nature and factory decoration.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "OrderedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "OrderedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<K, V>)"], "associated_methods": ["UnmodifiableOrderedMapTest.makeFullMap()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableOrderedMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableOrderedMap, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableOrderedMap.unmodifiableOrderedMap(OrderedMap<K, V>)"], "associated_methods": ["UnmodifiableOrderedMapTest.makeObject()", "UnmodifiableOrderedMapTest.makeFullMap()"], "external_dependencies": {"modules": ["OrderedMap", "UnmodifiableOrderedMap", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created objects are instances of Unmodifiable, ensuring the unmodifiable nature of the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java", "testclass_name": "PredicatedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedCollectionTest", "description": "Unit tests for PredicatedCollection functionality, focusing on predicate validation during add and addAll operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateCollection", "signature": "protected Collection<E> decorateCollection(Collection<E> collection, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "public E[] getFullElements()"}, {"name": "makeConfirmedCollection", "signature": "public Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "public Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "public Collection<E> makeFullCollection()"}, {"name": "makeObject", "signature": "public Collection<E> makeObject()"}, {"name": "makeTestCollection", "signature": "public Collection<E> makeTestCollection()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["Collection.add(E)"], "associated_methods": ["Collection.contains(Object)"], "external_dependencies": {"modules": ["Collection", "IllegalArgumentException"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the collection throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["Collection.addAll(Collection<? extends E>)"], "associated_methods": ["Collection.contains(Object)"], "external_dependencies": {"modules": ["Collection", "IllegalArgumentException"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection containing an illegal element (non-string) throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "testclass_name": "UnmodifiableQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.LinkedList;", "import java.util.Queue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableQueueTest", "description": "Tests for the UnmodifiableQueue class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"variables": [], "methods": [{"name": "getCollection", "signature": "Queue<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Queue<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue<E>)"], "external_dependencies": {"modules": ["UnmodifiableQueue", "Queue"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable queue and checks for null input handling."}, {"name": "testOffer", "primary_tested": ["Queue.offer(E)"], "external_dependencies": {"modules": ["Queue"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that offering an element to an unmodifiable queue throws an UnsupportedOperationException."}, {"name": "testPoll", "primary_tested": ["Queue.poll()"], "external_dependencies": {"modules": ["Queue"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that polling an element from an unmodifiable queue throws an UnsupportedOperationException."}, {"name": "testQueueRemove", "primary_tested": ["Queue.remove()"], "external_dependencies": {"modules": ["Queue"], "class_members": [{"name": "getCollection", "type": "method"}]}, "category": "unit", "description": "Tests that removing an element from an unmodifiable queue throws an UnsupportedOperationException."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableQueue.makeObject()", "UnmodifiableQueue.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableQueue", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the objects created by the factory methods are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "testclass_name": "SplitMapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.map.HashedMap;", "import org.apache.commons.collections4.splitmap.TransformedSplitMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SplitMapUtilsTest", "description": "Unit tests for the SplitMapUtils class, focusing on the functionality of readable and writable maps.", "class_members": {"variables": [{"name": "backingMap", "type": "Map<String, Integer>"}, {"name": "transformedMap", "type": "TransformedSplitMap<String, String, String, Integer>"}, {"name": "stringToInt", "type": "Transformer<String, Integer>"}], "methods": [{"name": "attemptGetOperation", "signature": "void attemptGetOperation(Runnable)"}, {"name": "attemptPutOperation", "signature": "void attemptPutOperation(Runnable)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAlreadyReadableMap", "primary_tested": ["SplitMapUtils.readableMap(Map)"], "external_dependencies": {"modules": ["HashedMap", "SplitMapUtils"], "class_members": [{"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a map is already readable when passed to SplitMapUtils.readableMap."}, {"name": "testAlreadyWritableMap", "primary_tested": ["SplitMapUtils.writableMap(Map)"], "external_dependencies": {"modules": ["HashedMap", "SplitMapUtils"], "class_members": [{"name": "backingMap", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that a map is already writable when passed to SplitMapUtils.writableMap."}, {"name": "testReadableMap", "primary_tested": ["SplitMapUtils.readableMap(TransformedSplitMap)"], "associated_methods": ["MapIterator.hasNext()", "MapIterator.next()", "MapIterator.getKey()", "MapIterator.getValue()", "Map.containsValue(Object)", "Map.get(Object)", "Map.size()", "Map.isEmpty()", "Map.remove(Object)"], "external_dependencies": {"modules": ["SplitMapUtils", "TransformedSplitMap", "MapIterator", "Unmodifiable"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "attemptPutOperation", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of a readable map created by SplitMapUtils.readableMap, including basic operations, iterators, and unmodifiable checks."}, {"name": "testWritableMap", "primary_tested": ["SplitMapUtils.writableMap(TransformedSplitMap)"], "associated_methods": ["Map.get(Object)", "Map.entrySet()", "Map.keySet()", "Map.values()", "Map.size()", "Map.isEmpty()", "Map.containsKey(Object)", "Map.containsValue(Object)", "Map.remove(Object)", "Map.put(Object, Object)", "Map.putAll(Map)"], "external_dependencies": {"modules": ["SplitMapUtils", "TransformedSplitMap", "HashMap"], "class_members": [{"name": "transformedMap", "type": "variable"}, {"name": "backingMap", "type": "variable"}, {"name": "attemptGetOperation", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the functionality of a writable map created by SplitMapUtils.writableMap, including basic operations, put operations, and clear operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "testclass_name": "LinkedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.junit.jupiter.api.Test;"], "name": "LinkedMapTest", "description": "Unit tests for LinkedMap operations and functionalities.", "class_members": {"variables": [], "methods": [{"name": "bulkTestListView", "signature": "BulkTest bulkTestListView()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getMap", "signature": "LinkedMap<K, V> getMap()"}, {"name": "makeFullMap", "signature": "LinkedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "LinkedMap<K, V> makeObject()"}], "nested_classes": [{"name": "TestListView", "description": "Internal test class for list view operations"}]}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["LinkedMap.clone()"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the LinkedMap."}, {"name": "testGetByIndex", "primary_tested": ["LinkedMap.get(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the get by index functionality of the LinkedMap."}, {"name": "testGetValueByIndex", "primary_tested": ["LinkedMap.getValue(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the getValue by index functionality of the LinkedMap."}, {"name": "testIndexOf", "primary_tested": ["LinkedMap.indexOf(Object)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the indexOf functionality of the LinkedMap."}, {"name": "testInitialCapacityZero", "primary_tested": ["LinkedMap.LinkedMap(int)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": []}, "category": "unit", "description": "Tests the initial capacity zero functionality of the LinkedMap."}, {"name": "testInsertionOrder", "primary_tested": ["LinkedMap.put(K,V)"], "associated_methods": ["LinkedMap.keySet()", "LinkedMap.values()"], "external_dependencies": {"modules": ["LinkedMap", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the insertion order functionality of the LinkedMap."}, {"name": "testRemoveByIndex", "primary_tested": ["LinkedMap.remove(int)"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the remove by index functionality of the LinkedMap."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["LinkedMap.mapIterator()"], "external_dependencies": {"modules": ["LinkedMap", "ResettableIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the reset functionality of the ResettableIterator in LinkedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "testclass_name": "PredicatedCollectionBuilderTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import java.util.Queue;", "import java.util.Set;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedCollectionBuilderTest", "description": "Tests for the PredicatedCollectionBuilder class, focusing on the behavior of collections with predicates.", "class_members": {"variables": [], "methods": [{"name": "checkPredicatedCollection1", "signature": "void checkPredicatedCollection1(Collection<String>)"}, {"name": "checkPredicatedCollection2", "signature": "void checkPredicatedCollection2(Collection<Integer>)"}], "nested_classes": [{"name": "OddPredicate", "description": "Internal predicate class for evaluating odd integers"}]}, "fixtures": [], "test_cases": [{"name": "testAddAllPass", "primary_tested": ["PredicatedCollection.Builder.addAll(Collection<String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "Arrays"], "class_members": []}, "category": "unit", "description": "Verify that only items that pass the Predicate end up in the buffer."}, {"name": "testAddFail", "primary_tested": ["PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection"], "class_members": []}, "category": "unit", "description": "Verify that failing the Predicate means NOT ending up in the buffer."}, {"name": "testAddPass", "primary_tested": ["PredicatedCollection.Builder.add(String)"], "external_dependencies": {"modules": ["PredicatedCollection"], "class_members": []}, "category": "unit", "description": "Verify that passing the Predicate means ending up in the buffer."}, {"name": "testCreatePredicatedCollectionWithNotNullPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollectionBuilderTest.checkPredicatedCollection1(Collection<String>)"], "external_dependencies": {"modules": ["PredicatedCollection", "List", "Set", "Bag", "Queue"], "class_members": [{"name": "checkPredicatedCollection1", "type": "method"}]}, "category": "unit", "description": "Test creating predicated collections with a not-null predicate."}, {"name": "testCreatePredicatedCollectionWithPredicate", "primary_tested": ["PredicatedCollection.Builder.createPredicatedList()", "PredicatedCollection.Builder.createPredicatedSet()", "PredicatedCollection.Builder.createPredicatedBag()", "PredicatedCollection.Builder.createPredicatedQueue()"], "associated_methods": ["PredicatedCollectionBuilderTest.checkPredicatedCollection2(Collection<Integer>)"], "external_dependencies": {"modules": ["PredicatedCollection", "List", "Set", "Bag", "Queue"], "class_members": [{"name": "checkPredicatedCollection2", "type": "method"}]}, "category": "unit", "description": "Test creating predicated collections with a custom predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java", "testclass_name": "LazyMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.apache.commons.collections4.map.LazyMap.lazyMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "LazyMapTest", "description": "Unit tests for LazyMap functionality, focusing on map operations with factories and transformers.", "class_members": {"variables": [{"name": "oneFactory", "type": "static final Factory<Integer>"}], "methods": [{"name": "makeObject", "signature": "LazyMap<K, V> makeObject()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}]}, "fixtures": [], "test_cases": [{"name": "testMapGetWithFactory", "primary_tested": ["LazyMap.get(Object)"], "associated_methods": ["FactoryUtils.constantFactory(Integer)", "FactoryUtils.nullFactory()"], "external_dependencies": {"modules": ["HashMap", "FactoryUtils", "LazyMap"], "class_members": [{"name": "oneFactory", "type": "variable"}]}, "category": "unit", "description": "Tests the get functionality of LazyMap with a factory, ensuring the correct value is returned and the map size is updated accordingly."}, {"name": "testMapGetWithTransformer", "primary_tested": ["LazyMap.get(Object)"], "associated_methods": ["Number.intValue()"], "external_dependencies": {"modules": ["HashMap", "LazyMap"]}, "category": "unit", "description": "Tests the get functionality of LazyMap with a transformer, ensuring the correct value is returned and the map size is updated accordingly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java", "testclass_name": "TransformingComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.apache.commons.collections4.ComparatorUtils;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparatorTest", "description": "Unit tests for the TransformingComparator class.", "class_members": {"variables": [], "methods": [{"name": "getComparableObjectsOrdered", "signature": "List<Integer> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Integer> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals", "primary_tested": ["TransformingComparator.equals(Object)"], "associated_methods": ["TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["TransformerUtils", "TransformingComparator"], "class_members": [], "project_specific_resources": ["TransformerUtils.nopTransformer()"]}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode methods of TransformingComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "testclass_name": "MultiMapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtilsTest", "description": "Unit tests for the MultiMapUtils class, which provides utility methods for handling MultiValuedMap instances.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEmptyIfNull", "primary_tested": ["MultiMapUtils.emptyIfNull(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap", "MultiValuedMap"]}, "category": "unit", "description": "Tests the emptyIfNull method to ensure it returns an empty map if the input is null, and the original map otherwise."}, {"name": "testEmptyUnmodifiableMultiValuedMap", "primary_tested": ["MultiMapUtils.EMPTY_MULTI_VALUED_MAP"], "external_dependencies": {"modules": ["MultiMapUtils", "MultiValuedMap"]}, "category": "unit", "description": "Tests the EMPTY_MULTI_VALUED_MAP constant to ensure it is empty and unmodifiable."}, {"name": "testGetCollection", "primary_tested": ["MultiMapUtils.getCollection(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap", "MultiValuedMap", "Arrays"]}, "category": "unit", "description": "Tests the getCollection method to ensure it retrieves the correct collection of values for a given key."}, {"name": "testGetValuesAsBag", "primary_tested": ["MultiMapUtils.getValuesAsBag(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap", "MultiValuedMap", "Bag"]}, "category": "unit", "description": "Tests the getValuesAsBag method to ensure it retrieves the correct bag of values for a given key."}, {"name": "testGetValuesAsList", "primary_tested": ["MultiMapUtils.getValuesAsList(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap", "MultiValuedMap", "Arrays"]}, "category": "unit", "description": "Tests the getValuesAsList method to ensure it retrieves the correct list of values for a given key."}, {"name": "testGetValuesAsSet", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap,String)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap", "MultiValuedMap", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the getValuesAsSet method to ensure it retrieves the correct set of values for a given key."}, {"name": "testIsEmptyWithEmptyMap", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns true for an empty map."}, {"name": "testIsEmptyWithNonEmptyMap", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns false for a non-empty map."}, {"name": "testIsEmptyWithNull", "primary_tested": ["MultiMapUtils.isEmpty(MultiValuedMap)"], "external_dependencies": {"modules": ["MultiMapUtils"]}, "category": "unit", "description": "Tests the isEmpty method to ensure it returns true for a null map."}, {"name": "testTypeSafeEmptyMultiValuedMap", "primary_tested": ["MultiMapUtils.emptyMultiValuedMap()"], "external_dependencies": {"modules": ["MultiMapUtils", "MultiValuedMap"]}, "category": "unit", "description": "Tests the emptyMultiValuedMap method to ensure it returns an empty and unmodifiable map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java", "testclass_name": "PredicatedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMapTest", "description": "Unit tests for the PredicatedMap class in Apache Commons Collections, focusing on entry set and put operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "static final Predicate<Object>"}, {"name": "testPredicate", "type": "static final Predicate<Object>"}], "methods": [{"name": "decorateMap", "signature": "IterableMap<K, V> decorateMap(Map<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate)"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}, {"name": "makeTestMap", "signature": "IterableMap<K, V> makeTestMap()"}]}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["Map.entrySet()"], "associated_methods": ["Map.put(K,V)"], "external_dependencies": {"modules": ["Map", "HashMap", "PredicatedMap"], "class_members": [{"name": "decorateMap", "type": "method"}, {"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the entry set functionality of the PredicatedMap."}, {"name": "testPut", "primary_tested": ["Map.put(K,V)", "Map.putAll(Map<? extends K, ? extends V>)"], "associated_methods": ["Map.containsKey(Object)", "Map.containsValue(Object)", "Iterator.next()", "Map.Entry.setValue(V)"], "external_dependencies": {"modules": ["Map", "HashMap", "PredicatedMap", "IllegalArgumentException"], "class_members": [{"name": "decorateMap", "type": "method"}, {"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the put operation in PredicatedMap, ensuring that illegal keys and values raise IllegalArgumentExceptions."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "testclass_name": "BagUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.bag.PredicatedBag;", "import org.apache.commons.collections4.bag.PredicatedSortedBag;", "import org.apache.commons.collections4.bag.SynchronizedBag;", "import org.apache.commons.collections4.bag.SynchronizedSortedBag;", "import org.apache.commons.collections4.bag.TransformedBag;", "import org.apache.commons.collections4.bag.TransformedSortedBag;", "import org.apache.commons.collections4.bag.TreeBag;", "import org.apache.commons.collections4.bag.UnmodifiableBag;", "import org.apache.commons.collections4.bag.UnmodifiableSortedBag;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "BagUtilsTest", "description": "Unit tests for various utility methods in BagUtils class.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<Object>"}, {"name": "nopTransformer", "type": "Transformer<Object, Object>"}]}, "fixtures": [], "test_cases": [{"name": "testPredicatedBag", "primary_tested": ["BagUtils.predicatedBag(Bag,Predicate)"], "associated_methods": ["TruePredicate.truePredicate()"], "external_dependencies": {"modules": ["BagUtils", "HashBag", "PredicatedBag", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the predicatedBag method to ensure it returns a PredicatedBag and handles null inputs correctly."}, {"name": "testPredicatedSortedBag", "primary_tested": ["BagUtils.predicatedSortedBag(SortedBag,Predicate)"], "associated_methods": ["TruePredicate.truePredicate()"], "external_dependencies": {"modules": ["BagUtils", "TreeBag", "PredicatedSortedBag", "TruePredicate"], "class_members": [{"name": "truePredicate", "type": "variable"}]}, "category": "unit", "description": "Tests the predicatedSortedBag method to ensure it returns a PredicatedSortedBag and handles null inputs correctly."}, {"name": "testSynchronizedBag", "primary_tested": ["BagUtils.synchronizedBag(Bag)"], "external_dependencies": {"modules": ["BagUtils", "HashBag", "SynchronizedBag"]}, "category": "unit", "description": "Tests the synchronizedBag method to ensure it returns a SynchronizedBag and handles null inputs correctly."}, {"name": "testSynchronizedSortedBag", "primary_tested": ["BagUtils.synchronizedSortedBag(SortedBag)"], "external_dependencies": {"modules": ["BagUtils", "TreeBag", "SynchronizedSortedBag"]}, "category": "unit", "description": "Tests the synchronizedSortedBag method to ensure it returns a SynchronizedSortedBag and handles null inputs correctly."}, {"name": "testTransformedBag", "primary_tested": ["BagUtils.transformingBag(Bag,Transformer)"], "associated_methods": ["TransformerUtils.nopTransformer()"], "external_dependencies": {"modules": ["BagUtils", "HashBag", "TransformedBag", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the transformingBag method to ensure it returns a TransformedBag and handles null inputs correctly."}, {"name": "testTransformedSortedBag", "primary_tested": ["BagUtils.transformingSortedBag(SortedBag,Transformer)"], "associated_methods": ["TransformerUtils.nopTransformer()"], "external_dependencies": {"modules": ["BagUtils", "TreeBag", "TransformedSortedBag", "TransformerUtils"], "class_members": [{"name": "nopTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the transformingSortedBag method to ensure it returns a TransformedSortedBag and handles null inputs correctly."}, {"name": "testUnmodifiableBag", "primary_tested": ["BagUtils.unmodifiableBag(Bag)"], "external_dependencies": {"modules": ["BagUtils", "HashBag", "UnmodifiableBag"]}, "category": "unit", "description": "Tests the unmodifiableBag method to ensure it returns an UnmodifiableBag and handles null inputs correctly."}, {"name": "testUnmodifiableSortedBag", "primary_tested": ["BagUtils.unmodifiableSortedBag(SortedBag)"], "external_dependencies": {"modules": ["BagUtils", "TreeBag", "UnmodifiableSortedBag"]}, "category": "unit", "description": "Tests the unmodifiableSortedBag method to ensure it returns an UnmodifiableSortedBag and handles null inputs correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java", "testclass_name": "NullPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "NullPredicateTest", "description": "Unit tests for the NullPredicate class in Apache Commons Collections.", "class_members": {"methods": [{"name": "generatePredicate", "signature": "Predicate<?> generatePredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testEnsurePredicateCanBeTypedWithoutWarning", "primary_tested": ["NullPredicate.nullPredicate()"], "associated_methods": ["AbstractPredicateTest.assertPredicateFalse(Predicate<String>,String)"], "external_dependencies": {"modules": ["NullPredicate", "Predicate", "AbstractPredicateTest"], "class_members": [{"name": "generatePredicate", "type": "method"}]}, "category": "unit", "description": "Tests that the NullPredicate can be typed without generating a warning."}, {"name": "testNullPredicate", "primary_tested": ["NullPredicate.nullPredicate()"], "associated_methods": ["AbstractPredicateTest.assertPredicateTrue(Predicate<?>,Object)"], "external_dependencies": {"modules": ["NullPredicate", "Predicate", "AbstractPredicateTest"], "class_members": [{"name": "generatePredicate", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of the NullPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java", "testclass_name": "TransformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMapTest", "description": "Unit tests for TransformedSortedMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "Transformer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a SortedMap with a transformer."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "Transformer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for transforming a SortedMap with a transformer."}, {"name": "testTransformedMap", "primary_tested": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "associated_methods": ["SortedMap.put(K,V)", "SortedMap.get(Object)", "SortedMap.size()", "SortedMap.containsKey(Object)", "SortedMap.containsValue(Object)", "SortedMap.remove(Object)", "SortedMap.entrySet()"], "external_dependencies": {"modules": ["TreeMap", "TransformedSortedMap", "TransformedCollectionTest", "Transformer", "Map.Entry"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of a transformed SortedMap, including key and value transformations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java", "testclass_name": "UnmodifiableMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapTest", "description": "Tests for the UnmodifiableMap class, ensuring it behaves as an unmodifiable map.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "IterableMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "IterableMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map<K, V>)"], "associated_methods": ["UnmodifiableMapTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMap", "Map"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for decorating a map as unmodifiable and checks for null input."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMap.unmodifiableMap(Map<K, V>)"], "associated_methods": ["UnmodifiableMapTest.makeObject()", "UnmodifiableMapTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMap", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created map objects are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java", "testclass_name": "ReverseComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ReverseComparatorTest", "description": "Tests for the ReverseComparator class, which reverses the order of a given comparator.", "class_members": {"variables": [], "methods": [{"name": "getComparableObjectsOrdered", "signature": "List<Integer> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Integer> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSerializeDeserializeThenCompare", "primary_tested": ["ReverseComparator.ReverseComparator(Comparator)"], "associated_methods": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["ReverseComparator", "ComparableComparator", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of a ReverseComparator, ensuring that the deserialized object is equal to the original."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "testclass_name": "UnmodifiableSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedMapTest", "description": "Tests for the UnmodifiableSortedMap class, focusing on its unmodifiable properties and map operations.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "SortedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "associated_methods": ["UnmodifiableSortedMap.unmodifiableSortedMap(null)"], "external_dependencies": {"modules": ["UnmodifiableSortedMap", "SortedMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for decorating a SortedMap as unmodifiable and checks for null input handling."}, {"name": "testHeadMap", "primary_tested": ["SortedMap.headMap(K)"], "associated_methods": ["TreeMap.isEmpty()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the headMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testSubMap", "primary_tested": ["SortedMap.subMap(K,K)"], "associated_methods": ["SortedMap.headMap(K)"], "external_dependencies": {"modules": ["SortedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the subMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testTailMap", "primary_tested": ["SortedMap.tailMap(K)"], "external_dependencies": {"modules": ["SortedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the tailMap method of the SortedMap to ensure it returns the correct sub-map."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedMap.makeObject()"], "associated_methods": ["UnmodifiableSortedMap.makeFullMap()"], "external_dependencies": {"modules": ["Unmodifiable", "UnmodifiableSortedMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "testclass_name": "CaseInsensitiveMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Locale;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "CaseInsensitiveMapTest", "description": "Unit tests for the CaseInsensitiveMap class, focusing on case insensitivity, cloning, initial capacity, locale independence, null handling, and putAll functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCaseInsensitive", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the case insensitivity of the CaseInsensitiveMap by adding keys with different cases and verifying retrieval."}, {"name": "testClone", "primary_tested": ["CaseInsensitiveMap.clone()"], "external_dependencies": {"modules": ["CaseInsensitiveMap"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the CaseInsensitiveMap by verifying the size and content of the cloned map."}, {"name": "testInitialCapacityZero", "primary_tested": ["CaseInsensitiveMap.CaseInsensitiveMap(int)"], "external_dependencies": {"modules": ["CaseInsensitiveMap"], "class_members": []}, "category": "unit", "description": "Tests the initial capacity of the CaseInsensitiveMap when set to zero."}, {"name": "testLocaleIndependence", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Locale", "StringUtils"], "class_members": []}, "category": "unit", "description": "Tests the locale independence of the CaseInsensitiveMap by verifying case insensitivity across different locales."}, {"name": "testNullHandling", "primary_tested": ["CaseInsensitiveMap.put(K,V)", "CaseInsensitiveMap.get(Object)", "CaseInsensitiveMap.keySet()"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "Map", "Set"], "class_members": []}, "category": "unit", "description": "Tests the handling of null keys in the CaseInsensitiveMap."}, {"name": "testPutAll", "primary_tested": ["CaseInsensitiveMap.CaseInsensitiveMap(Map)", "CaseInsensitiveMap.keySet()", "CaseInsensitiveMap.containsValue(Object)", "CaseInsensitiveMap.get(Object)"], "external_dependencies": {"modules": ["CaseInsensitiveMap", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "description": "Tests the putAll functionality of the CaseInsensitiveMap by verifying the size and content after adding entries from another map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java", "testclass_name": "IteratorEnumerationTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "IteratorEnumerationTest", "description": "Unit tests for the IteratorEnumeration class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEnumeration", "primary_tested": ["IteratorEnumeration.getIterator()", "IteratorEnumeration.hasMoreElements()", "IteratorEnumeration.nextElement()"], "associated_methods": [], "external_dependencies": {"modules": ["Arrays", "Iterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the IteratorEnumeration class, including getting the iterator, checking for more elements, and retrieving the next element. Also tests the behavior when there are no more elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "testclass_name": "IndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.Serializable;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollectionTest", "description": "Tests for the IndexedCollection class, focusing on its indexing and retrieval functionalities.", "class_members": {"variables": [], "methods": [{"name": "decorateCollection", "signature": "Collection<String> decorateCollection(Collection<String>)"}, {"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String>)"}, {"name": "getFullElements", "signature": "String[] getFullElements()"}, {"name": "getOtherElements", "signature": "String[] getOtherElements()"}, {"name": "makeConfirmedCollection", "signature": "Collection<String> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<String> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Collection<String> makeFullCollection()"}, {"name": "makeObject", "signature": "Collection<String> makeObject()"}, {"name": "makeTestCollection", "signature": "Collection<String> makeTestCollection()"}, {"name": "makeUniqueTestCollection", "signature": "Collection<String> makeUniqueTestCollection()"}, {"name": "skipSerializedCanonicalTests", "signature": "boolean skipSerializedCanonicalTests()"}], "nested_classes": [{"name": "IntegerTransformer", "description": "Internal transformer class to convert String to Integer"}]}, "fixtures": [], "test_cases": [{"name": "testAddedObjectsCanBeRetrievedByKey", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.add(String)", "IndexedCollection.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that objects added to the collection can be retrieved using their keys."}, {"name": "testDecoratedCollectionIsIndexedOnCreation", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.decorateUniqueCollection(Collection<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeFullCollection", "type": "method"}, {"name": "decorateUniqueCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated collection is indexed upon creation."}, {"name": "testEnsureDuplicateObjectsCauseException", "primary_tested": ["IndexedCollection.add(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "makeUniqueTestCollection", "type": "method"}]}, "category": "unit", "description": "Tests that adding duplicate objects to a unique indexed collection causes an exception."}, {"name": "testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately", "primary_tested": ["IndexedCollection.get(Integer)", "IndexedCollection.reindex()"], "associated_methods": ["IndexedCollection.add(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "IntegerTransformer"], "class_members": [{"name": "decorateUniqueCollection", "type": "method"}]}, "category": "unit", "description": "Tests that reindexing updates the index when the decorated collection is modified separately."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "testclass_name": "ListOrderedMap2Test", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap2Test", "description": "Unit tests for ListOrderedMap2 class, focusing on its ordered map functionalities.", "class_members": {"variables": [], "methods": [{"name": "bulkTestListView", "signature": "BulkTest bulkTestListView()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getMap", "signature": "ListOrderedMap<K, V> getMap()"}, {"name": "makeFullMap", "signature": "ListOrderedMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "ListOrderedMap<K, V> makeObject()"}], "nested_classes": [{"name": "TestListView", "description": "Internal test class extending AbstractListTest for testing ListOrderedMap2's list view."}]}, "fixtures": [], "test_cases": [{"name": "testGetByIndex", "primary_tested": ["ListOrderedMap.get(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of ListOrderedMap by index, ensuring it handles out-of-bounds indices correctly and retrieves elements correctly."}, {"name": "testGetValueByIndex", "primary_tested": ["ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the getValue method of ListOrderedMap by index, ensuring it handles out-of-bounds indices correctly and retrieves values correctly."}, {"name": "testIndexOf", "primary_tested": ["ListOrderedMap.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the indexOf method of ListOrderedMap, ensuring it returns the correct index for elements and handles non-existent elements correctly."}, {"name": "testRemoveByIndex", "primary_tested": ["ListOrderedMap.remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "IndexOutOfBoundsException", "ArrayList"], "class_members": [{"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the remove method of ListOrderedMap by index, ensuring it handles out-of-bounds indices correctly and removes elements correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java", "testclass_name": "EqualPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "EqualPredicateTest", "description": "Unit tests for the EqualPredicate class in Apache Commons Collections.", "class_members": {"variables": [{"name": "FALSE_OBJECT", "type": "static final EqualsTestObject"}, {"name": "TRUE_OBJECT", "type": "static final EqualsTestObject"}], "methods": [], "nested_classes": [{"name": "EqualsTestObject", "description": "Internal test object class used for equality testing"}]}, "fixtures": [], "test_cases": [{"name": "testNullArgumentEqualsNullPredicate", "primary_tested": ["EqualPredicate.equalPredicate(Object)"], "external_dependencies": {"modules": ["EqualPredicate", "NullPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if passing null to equalPredicate returns the same instance as nullPredicate."}, {"name": "testObjectFactoryUsesEqualsForTest", "primary_tested": ["EqualPredicate.equalPredicate(EqualsTestObject)"], "associated_methods": ["AbstractPredicateTest.assertPredicateFalse(Predicate,EqualsTestObject)", "AbstractPredicateTest.assertPredicateTrue(Predicate,EqualsTestObject)"], "external_dependencies": {"modules": ["EqualPredicate", "AbstractPredicateTest"], "class_members": [{"name": "FALSE_OBJECT", "type": "variable"}, {"name": "TRUE_OBJECT", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests if the EqualPredicate uses the equals method for testing equality."}, {"name": "testPredicateTypeCanBeSuperClassOfObject", "primary_tested": ["EqualPredicate.equalPredicate(Number)"], "associated_methods": ["AbstractPredicateTest.assertPredicateTrue(Predicate,Number)"], "external_dependencies": {"modules": ["EqualPredicate", "AbstractPredicateTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the predicate type can be a superclass of the object type."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java", "testclass_name": "SingletonMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import org.apache.commons.collections4.BoundedMap;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.OrderedMap;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMapTest", "description": "Unit tests for the SingletonMap class, focusing on its bounded map properties, cloning, and key-value functionalities.", "class_members": {"variables": [{"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "TEN", "type": "static final String"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getNewSampleValues", "signature": "V[] getNewSampleValues()"}, {"name": "getSampleKeys", "signature": "K[] getSampleKeys()"}, {"name": "getSampleValues", "signature": "V[] getSampleValues()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "SingletonMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "OrderedMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testBoundedMap", "primary_tested": ["SingletonMap.size()", "SingletonMap.isFull()", "SingletonMap.maxSize()"], "associated_methods": ["SingletonMap.containsKey(Object)", "SingletonMap.containsValue(Object)"], "external_dependencies": {"modules": ["SingletonMap", "BoundedMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the bounded map properties of SingletonMap, including size, fullness, and maximum size."}, {"name": "testClone", "primary_tested": ["SingletonMap.clone()"], "associated_methods": ["SingletonMap.size()", "SingletonMap.containsKey(Object)", "SingletonMap.containsValue(Object)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the cloning functionality of SingletonMap, ensuring the cloned map retains the original's properties."}, {"name": "testKeyValue", "primary_tested": ["SingletonMap.getKey()", "SingletonMap.getValue()"], "associated_methods": ["SingletonMap.size()"], "external_dependencies": {"modules": ["SingletonMap", "KeyValue"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the key-value functionalities of SingletonMap, ensuring the correct key and value are retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "testclass_name": "DefaultedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.FactoryUtils;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.functors.ConstantFactory;", "import org.junit.jupiter.api.Test;"], "name": "DefaultedMapTest", "description": "Unit tests for the DefaultedMap class, focusing on its factory methods and map get operations.", "class_members": {"variables": [{"name": "nullFactory", "type": "Factory<V>"}, {"name": "nullTransformer", "type": "Transformer<K, V>"}], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactoryMethods", "primary_tested": ["DefaultedMap.defaultedMap(Map<K, V>, V)", "DefaultedMap.defaultedMap(Map<K, V>, Factory<V>)", "DefaultedMap.defaultedMap(Map<K, V>, Transformer<K, V>)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "FactoryUtils", "TransformerUtils"], "class_members": [{"name": "nullFactory", "type": "variable"}, {"name": "nullTransformer", "type": "variable"}]}, "category": "unit", "description": "Tests the factory methods of DefaultedMap to ensure they throw NullPointerException when null parameters are passed."}, {"name": "testMapGet", "primary_tested": ["DefaultedMap.get(Object)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get method of DefaultedMap to ensure it returns the default value for keys not present in the map."}, {"name": "testMapGet2", "primary_tested": ["DefaultedMap.get(Object)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get method of DefaultedMap with a HashMap base to ensure it returns the default value for keys not present in the map."}, {"name": "testMapGet3", "primary_tested": ["DefaultedMap.get(Object)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "ConstantFactory"]}, "category": "unit", "description": "Tests the get method of DefaultedMap with a ConstantFactory to ensure it returns the default value for keys not present in the map."}, {"name": "testMapGet4", "primary_tested": ["DefaultedMap.get(Object)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap"]}, "category": "unit", "description": "Tests the get method of DefaultedMap with a custom Transformer to ensure it returns the correct default value based on the input type."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java", "testclass_name": "UnmodifiableTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.AbstractSortedMapTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableTrieTest", "description": "Tests for the UnmodifiableTrie class, ensuring that the Trie is unmodifiable.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullMap", "signature": "Trie<String, V> makeFullMap()"}, {"name": "makeObject", "signature": "Trie<String, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie)"], "associated_methods": ["UnmodifiableTrieTest.makeFullMap()"], "external_dependencies": {"modules": ["Trie", "UnmodifiableTrie", "PatriciaTrie"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable Trie and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableTrie.unmodifiableTrie(Trie)"], "associated_methods": ["UnmodifiableTrieTest.makeObject()", "UnmodifiableTrieTest.makeFullMap()"], "external_dependencies": {"modules": ["Trie", "UnmodifiableTrie", "PatriciaTrie", "Unmodifiable"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the Trie created by the factory method is indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.map.ListOrderedMap;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedMapIteratorTest", "description": "Tests for the UnmodifiableOrderedMapIterator class, which ensures that the underlying OrderedMapIterator is unmodifiable.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "associated_methods": ["ListOrderedMap.mapIterator()"], "external_dependencies": {"modules": ["UnmodifiableOrderedMapIterator", "ListOrderedMap", "OrderedMapIterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable OrderedMapIterator and ensures it behaves as expected."}, {"name": "testOrderedMapIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.makeEmptyIterator()"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableOrderedMapIterator", "Unmodifiable"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator created by makeEmptyIterator is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "testclass_name": "FactoryUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.IOException;", "import java.io.Serializable;", "import java.util.Date;", "import java.util.TimeZone;", "import org.apache.commons.collections4.functors.ConstantFactory;", "import org.apache.commons.collections4.functors.ExceptionFactory;", "import org.junit.jupiter.api.Test;"], "name": "FactoryUtilsTest", "description": "Unit tests for FactoryUtils class, which provides utility methods for creating factories.", "class_members": {"nested_classes": [{"name": "Mock1", "description": "Internal mock class with constructors and equality checks."}, {"name": "Mock2", "description": "Internal mock class implementing Serializable with constructors and equality checks."}, {"name": "Mock3", "description": "Internal mock class with a static counter and a default constructor."}]}, "test_cases": [{"name": "testConstantFactoryConstant", "primary_tested": ["FactoryUtils.constantFactory(Integer)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Integer"]}, "category": "unit", "description": "Tests the constant factory functionality with a non-null constant."}, {"name": "testConstantFactoryNull", "primary_tested": ["FactoryUtils.constantFactory(Object)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils"]}, "category": "unit", "description": "Tests the constant factory functionality with a null constant."}, {"name": "testExceptionFactory", "primary_tested": ["FactoryUtils.exceptionFactory()"], "external_dependencies": {"modules": ["FactoryUtils", "FunctorException"]}, "category": "unit", "description": "Tests the exception factory functionality."}, {"name": "testInstantiateFactoryComplex", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Date", "TimeZone"]}, "category": "unit", "description": "Tests the instantiate factory functionality with complex parameters."}, {"name": "testInstantiateFactoryMismatch", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate factory functionality with mismatched parameters."}, {"name": "testInstantiateFactoryNoConstructor", "primary_tested": ["FactoryUtils.instantiateFactory(Class,Class[],Object[])"], "external_dependencies": {"modules": ["FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate factory functionality with no matching constructor."}, {"name": "testInstantiateFactoryNull", "primary_tested": ["FactoryUtils.instantiateFactory(Class)"], "external_dependencies": {"modules": ["FactoryUtils"]}, "category": "unit", "description": "Tests the instantiate factory functionality with a null class."}, {"name": "testInstantiateFactorySimple", "primary_tested": ["FactoryUtils.instantiateFactory(Class)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock3"]}, "category": "unit", "description": "Tests the instantiate factory functionality with a simple class."}, {"name": "testNullFactory", "primary_tested": ["FactoryUtils.nullFactory()"], "external_dependencies": {"modules": ["Factory", "FactoryUtils"]}, "category": "unit", "description": "Tests the null factory functionality."}, {"name": "testPrototypeFactoryNull", "primary_tested": ["FactoryUtils.prototypeFactory(Object)"], "external_dependencies": {"modules": ["ConstantFactory", "FactoryUtils"]}, "category": "unit", "description": "Tests the prototype factory functionality with a null prototype."}, {"name": "testPrototypeFactoryPublicBad", "primary_tested": ["FactoryUtils.prototypeFactory(Object)"], "external_dependencies": {"modules": ["FactoryUtils"]}, "category": "unit", "description": "Tests the prototype factory functionality with a bad prototype."}, {"name": "testPrototypeFactoryPublicCloneMethod", "primary_tested": ["FactoryUtils.prototypeFactory(Date)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Date"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype having a public clone method."}, {"name": "testPrototypeFactoryPublicCopyConstructor", "primary_tested": ["FactoryUtils.prototypeFactory(Mock1)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock1"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype having a public copy constructor."}, {"name": "testPrototypeFactoryPublicSerialization", "primary_tested": ["FactoryUtils.prototypeFactory(Integer)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Integer"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype that is serializable."}, {"name": "testPrototypeFactoryPublicSerializationError", "primary_tested": ["FactoryUtils.prototypeFactory(Mock2)"], "external_dependencies": {"modules": ["Factory", "FactoryUtils", "Mock2", "FunctorException", "IOException"]}, "category": "unit", "description": "Tests the prototype factory functionality with a prototype that causes a serialization error."}, {"name": "testSingletonPatternInSerialization", "primary_tested": ["ExceptionFactory.INSTANCE"], "external_dependencies": {"modules": ["ExceptionFactory", "TestUtils"]}, "category": "unit", "description": "Tests that all Factory singletons hold the singleton pattern in the serialization/deserialization process."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "testclass_name": "ComparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.ComparatorPredicate.comparatorPredicate;", "import java.util.Comparator;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.ComparatorPredicate.Criterion;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, which tests various comparison criteria using a custom comparator.", "class_members": {"nested_classes": [{"name": "TestComparator", "description": "Internal comparator class used for testing."}]}, "fixtures": [], "test_cases": [{"name": "testCompareEquals", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator)"], "external_dependencies": {"modules": ["Integer", "ComparatorPredicate", "Predicate"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the equality comparison functionality of the ComparatorPredicate."}, {"name": "testCompareGreater", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "ComparatorPredicate", "Predicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the greater than comparison functionality of the ComparatorPredicate."}, {"name": "testCompareGreaterOrEqual", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "ComparatorPredicate", "Predicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the greater than or equal to comparison functionality of the ComparatorPredicate."}, {"name": "testCompareLess", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "ComparatorPredicate", "Predicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the less than comparison functionality of the ComparatorPredicate."}, {"name": "testCompareLessOrEqual", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator,Criterion)"], "external_dependencies": {"modules": ["Integer", "ComparatorPredicate", "Predicate", "Criterion"], "class_members": [{"name": "TestComparator", "type": "nested_class"}]}, "category": "unit", "description": "Tests the less than or equal to comparison functionality of the ComparatorPredicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "testclass_name": "PredicatedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Comparator;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.concurrent.ConcurrentSkipListMap;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedMapTest", "description": "Unit tests for PredicatedSortedMap functionality, including entry set, put operations, and sorting order.", "class_members": {"variables": [{"name": "truePredicate", "type": "static final Predicate<Object>"}, {"name": "testPredicate", "type": "static final Predicate<Object>"}, {"name": "reverseStringComparator", "type": "final Comparator<K>"}], "methods": [{"name": "decorateMap", "signature": "SortedMap<K, V> decorateMap(SortedMap<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate)"}, {"name": "makeObject", "signature": "SortedMap<K, V> makeObject()"}, {"name": "makeTestMap", "signature": "SortedMap<K, V> makeTestMap()"}, {"name": "makeTestMapWithComparator", "signature": "SortedMap<K, V> makeTestMapWithComparator()"}], "nested_classes": [{"name": "ReverseStringComparator", "description": "Internal comparator class for reverse string comparison"}]}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["PredicatedSortedMap.entrySet()"], "external_dependencies": {"modules": ["TreeMap", "PredicatedSortedMap"], "class_members": [{"name": "truePredicate", "type": "variable"}, {"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the entry set functionality of the PredicatedSortedMap."}, {"name": "testPut", "primary_tested": ["PredicatedSortedMap.put(K,V)"], "associated_methods": ["PredicatedSortedMap.putAll(Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["TreeMap", "HashMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}, {"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the put operation functionality of the PredicatedSortedMap, including handling of illegal values and keys."}, {"name": "testReverseSortOrder", "primary_tested": ["PredicatedSortedMap.put(K,V)", "PredicatedSortedMap.lastKey()", "PredicatedSortedMap.firstKey()", "PredicatedSortedMap.tailMap(K).firstKey()", "PredicatedSortedMap.headMap(K).lastKey()", "PredicatedSortedMap.subMap(K,K).lastKey()"], "external_dependencies": {"modules": ["ConcurrentSkipListMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}, {"name": "reverseStringComparator", "type": "variable"}, {"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the reverse sorting order functionality of the PredicatedSortedMap with a custom comparator."}, {"name": "testSortOrder", "primary_tested": ["PredicatedSortedMap.put(K,V)", "PredicatedSortedMap.firstKey()", "PredicatedSortedMap.lastKey()", "PredicatedSortedMap.tailMap(K).firstKey()", "PredicatedSortedMap.headMap(K).lastKey()", "PredicatedSortedMap.subMap(K,K).lastKey()"], "external_dependencies": {"modules": ["TreeMap", "PredicatedSortedMap"], "class_members": [{"name": "testPredicate", "type": "variable"}, {"name": "decorateMap", "type": "method"}]}, "category": "unit", "description": "Tests the natural sorting order functionality of the PredicatedSortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "testclass_name": "ReferenceMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.lang.ref.WeakReference;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.function.Consumer;", "import org.apache.commons.collections4.map.AbstractHashedMap.HashEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceMapTest", "description": "Unit tests for the ReferenceMap class, focusing on various functionalities like purging, serialization, and iterator behavior.", "class_members": {"variables": [{"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "buildRefMap", "signature": "Map<K, V> buildRefMap()"}, {"name": "gc", "signature": "void gc()"}], "nested_classes": [{"name": "AccessibleEntry", "description": "Internal helper class extending ReferenceEntry to provide custom purge behavior."}]}, "fixtures": [], "test_cases": [{"name": "testCustomPurge", "primary_tested": ["ReferenceMap.createEntry(HashEntry<Integer, Integer>,int,Integer,Integer)"], "associated_methods": ["AccessibleEntry.onPurge()"], "external_dependencies": {"modules": ["ReferenceMap", "AccessibleEntry", "ArrayList", "Consumer", "Serializable"], "class_members": [{"name": "AccessibleEntry", "type": "nested_class"}]}, "category": "unit", "description": "Tests custom purge behavior by adding expired values to a list."}, {"name": "testDataSizeAfterSerialization", "primary_tested": ["ReferenceMap.put(String,String)", "ReferenceMap.size()"], "external_dependencies": {"modules": ["ReferenceMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests whether the 'data' HashEntry array size remains consistent after serialization."}, {"name": "testIteratorLastEntryCanBeRemovedAfterHasNext", "primary_tested": ["ReferenceMap.entrySet().iterator().hasNext()", "ReferenceMap.entrySet().iterator().next()", "ReferenceMap.entrySet().iterator().remove()"], "external_dependencies": {"modules": ["ReferenceMap", "Iterator", "Map.Entry"]}, "category": "unit", "description": "Tests whether the last entry can be removed after calling hasNext."}, {"name": "testNullHandling", "primary_tested": ["ReferenceMap.get(null)", "ReferenceMap.containsKey(null)", "ReferenceMap.containsValue(null)", "ReferenceMap.remove(null)", "ReferenceMap.entrySet().contains(null)", "ReferenceMap.put(null,null)", "ReferenceMap.put(Object,null)", "ReferenceMap.put(null,Object)"], "external_dependencies": {"modules": ["ReferenceMap", "NullPointerException"]}, "category": "unit", "description": "Tests null handling in the ReferenceMap."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceMap.isEmpty()"], "associated_methods": ["ReferenceMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceMap", "WeakReference"], "class_members": [{"name": "buildRefMap", "type": "method"}]}, "category": "unit", "description": "Tests whether purge values setting works by checking if references are null after garbage collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java", "testclass_name": "BooleanComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparatorTest", "description": "Unit tests for the BooleanComparator class, which compares Boolean objects.", "class_members": {"variables": [], "methods": [{"name": "allTests", "signature": "void allTests(boolean, BooleanComparator)"}, {"name": "falseFirstTests", "signature": "void falseFirstTests(BooleanComparator)"}, {"name": "getComparableObjectsOrdered", "signature": "List<Boolean> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<Boolean> makeObject()"}, {"name": "nullArgumentTests", "signature": "void nullArgumentTests(BooleanComparator)"}, {"name": "orderIndependentTests", "signature": "void orderIndependentTests(BooleanComparator)"}, {"name": "trueFirstTests", "signature": "void trueFirstTests(BooleanComparator)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": ["BooleanComparator.BooleanComparator()", "BooleanComparator.BooleanComparator(boolean)"], "associated_methods": ["BooleanComparatorTest.allTests(boolean,BooleanComparator)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": [{"name": "allTests", "type": "method"}]}, "category": "unit", "description": "Tests the constructors of BooleanComparator and their behavior."}, {"name": "testEqualsCompatibleInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "associated_methods": ["BooleanComparator.getFalseFirstComparator()", "BooleanComparator.booleanComparator(boolean)", "BooleanComparator.getTrueFirstComparator()"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": []}, "category": "unit", "description": "Tests the equality and compatibility of different instances of BooleanComparator."}, {"name": "testStaticFactoryMethods", "primary_tested": ["BooleanComparator.getFalseFirstComparator()", "BooleanComparator.booleanComparator(boolean)", "BooleanComparator.getTrueFirstComparator()"], "associated_methods": ["BooleanComparatorTest.allTests(boolean,BooleanComparator)"], "external_dependencies": {"modules": ["BooleanComparator"], "class_members": [{"name": "allTests", "type": "method"}]}, "category": "unit", "description": "Tests the static factory methods of BooleanComparator and their behavior."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "testclass_name": "ComparatorChainTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.Serializable;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorChainTest", "description": "Unit tests for the ComparatorChain class, which is used to chain multiple comparators.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ColumnComparator", "description": "A comparator for PseudoRow objects based on a specific column index."}, {"name": "PseudoRow", "description": "A mock row object used for testing, containing an array of integers representing columns."}]}, "fixtures": [], "test_cases": [{"name": "testBadListComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an UnsupportedOperationException is thrown when a ComparatorChain is created with an empty list of comparators."}, {"name": "testBadNoopComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that an UnsupportedOperationException is thrown when a ComparatorChain is created with zero comparators."}, {"name": "testComparatorChainOnMinValuedComparator", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ComparatorChain with a custom comparator that returns Integer.MIN_VALUE for negative comparisons."}, {"name": "testListComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer", "ComparableComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ComparatorChain with a list of comparators containing a single ComparableComparator."}, {"name": "testNoopComparatorChain", "primary_tested": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["ComparatorChain", "Integer", "ComparableComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ComparatorChain with a single ComparableComparator added after initialization."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java", "testclass_name": "ObjectArrayListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayListIteratorTest", "description": "Tests for the ObjectArrayListIterator class, focusing on ListIterator functionality.", "class_members": {"methods": [{"name": "makeArrayListIterator", "signature": "ObjectArrayListIterator<E> makeArrayListIterator(E[] array)"}, {"name": "makeEmptyIterator", "signature": "ObjectArrayListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectArrayListIterator<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testListIterator", "primary_tested": ["ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic ListIterator functionality by iterating backwards using previous()."}, {"name": "testListIteratorSet", "primary_tested": ["ListIterator.set(E)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "makeArrayListIterator", "type": "method"}]}, "category": "unit", "description": "Tests the ListIterator set operation and ensures IllegalStateException is thrown if set is called before next or previous."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "testclass_name": "ReferenceIdentityMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.lang.ref.WeakReference;", "import java.util.Iterator;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceIdentityMapTest", "description": "Unit tests for the ReferenceIdentityMap class, focusing on reference handling and identity-based operations.", "class_members": {"variables": [{"name": "I1A", "type": "static final Integer"}, {"name": "I1B", "type": "static final Integer"}, {"name": "I2A", "type": "static final Integer"}, {"name": "I2B", "type": "static final Integer"}, {"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "gc", "signature": "static void gc()"}, {"name": "buildRefMap", "signature": "private Map<K, V> buildRefMap()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBasics", "primary_tested": ["ReferenceIdentityMap.put(K,V)", "ReferenceIdentityMap.get(Object)", "ReferenceIdentityMap.containsKey(Object)", "ReferenceIdentityMap.containsValue(Object)"], "associated_methods": [], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap", "Integer"], "class_members": [{"name": "I1A", "type": "variable"}, {"name": "I1B", "type": "variable"}, {"name": "I2A", "type": "variable"}, {"name": "I2B", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests basic operations of ReferenceIdentityMap, including put, get, containsKey, and containsValue."}, {"name": "testHashEntry", "primary_tested": ["ReferenceIdentityMap.put(K,V)", "ReferenceIdentityMap.entrySet()"], "associated_methods": [], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap", "Integer"], "class_members": [{"name": "I1A", "type": "variable"}, {"name": "I1B", "type": "variable"}, {"name": "I2A", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of entrySet and equality of entries in ReferenceIdentityMap."}, {"name": "testNullHandling", "primary_tested": ["ReferenceIdentityMap.get(Object)", "ReferenceIdentityMap.containsKey(Object)", "ReferenceIdentityMap.containsValue(Object)", "ReferenceIdentityMap.remove(Object)", "ReferenceIdentityMap.put(K,V)"], "associated_methods": [], "external_dependencies": {"modules": ["ReferenceIdentityMap", "IterableMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of null keys and values in ReferenceIdentityMap."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceIdentityMap.isEmpty()"], "associated_methods": ["ReferenceIdentityMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceIdentityMap", "WeakReference"], "class_members": [{"name": "keyReference", "type": "variable"}, {"name": "valueReference", "type": "variable"}, {"name": "buildRefMap", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the purging of values in ReferenceIdentityMap after garbage collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java", "testclass_name": "SingletonIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIteratorTest", "description": "Unit tests for the SingletonIterator class in Apache Commons Collections.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonIterator<E> makeObject()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the basic functionality of the SingletonIterator, including hasNext, next, and exception handling."}, {"name": "testReset", "primary_tested": ["SingletonIterator.reset()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the reset functionality of the SingletonIterator, ensuring it can be reset and used multiple times."}, {"name": "testSingletonIteratorRemove", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["ResettableIterator"]}, "category": "unit", "description": "Tests the remove functionality of the SingletonIterator, ensuring it can remove the element and reset correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "testclass_name": "SequencesComparatorTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SequencesComparatorTest", "description": "Unit tests for the SequencesComparator class, which compares sequences and generates scripts for modifications.", "class_members": {"variables": [{"name": "before", "type": "List<String>"}, {"name": "after", "type": "List<String>"}, {"name": "length", "type": "int[]"}], "methods": [{"name": "sequence", "signature": "List<Character> sequence(String)"}], "nested_classes": [{"name": "ExecutionVisitor", "description": "Internal helper class implementing CommandVisitor to process sequences."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testExecution", "primary_tested": ["SequencesComparator.getScript().visit(CommandVisitor)"], "associated_methods": ["ExecutionVisitor.setList(List<Character>)", "ExecutionVisitor.getString()"], "external_dependencies": {"modules": ["SequencesComparator", "ExecutionVisitor", "List", "Character"], "class_members": [{"name": "before", "type": "variable"}, {"name": "after", "type": "variable"}, {"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the execution of the script generated by SequencesComparator to transform 'before' sequences into 'after' sequences."}, {"name": "testLength", "primary_tested": ["SequencesComparator.getScript().getModifications()"], "external_dependencies": {"modules": ["SequencesComparator", "List", "Character"], "class_members": [{"name": "before", "type": "variable"}, {"name": "after", "type": "variable"}, {"name": "length", "type": "variable"}, {"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the number of modifications returned by the script generated by SequencesComparator."}, {"name": "testMinimal", "primary_tested": ["SequencesComparator.getScript().getModifications()"], "external_dependencies": {"modules": ["SequencesComparator", "List", "String", "Random"], "class_members": [{"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the minimal number of modifications required to transform a sequence based on random insertions and deletions."}, {"name": "testShadok", "primary_tested": ["SequencesComparator.getScript().visit(CommandVisitor)"], "associated_methods": ["ExecutionVisitor.setList(List<String>)", "ExecutionVisitor.getString()"], "external_dependencies": {"modules": ["SequencesComparator", "ExecutionVisitor", "List", "String", "StringBuilder"], "class_members": [{"name": "sequence", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation of sequences using the Shadok alphabet and verifies the correctness of the generated script."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java", "testclass_name": "ArrayIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayIteratorTest", "description": "Unit tests for the ArrayIterator class in the Apache Commons Collections library.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeEmptyIterator", "signature": "ArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["Iterator.next()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the iteration functionality of the ArrayIterator, ensuring correct values and behavior when the iterator is exhausted."}, {"name": "testNullArray", "primary_tested": ["ArrayIterator.ArrayIterator(Object[])"], "external_dependencies": {"modules": ["ArrayIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the behavior of the ArrayIterator constructor when a null array is provided, expecting a NullPointerException."}, {"name": "testReset", "primary_tested": ["ArrayIterator.reset()"], "associated_methods": ["ArrayIterator.next()"], "external_dependencies": {"modules": ["ArrayIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ArrayIterator, ensuring it correctly resets the iterator to the beginning."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "testclass_name": "AllPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.apache.commons.collections4.functors.AllPredicate.allPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.Collections;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "AllPredicateTest", "description": "Unit tests for the AllPredicate class in Apache Commons Collections, which evaluates multiple predicates.", "class_members": {"variables": [], "methods": [{"name": "getPredicateInstance", "signature": "Predicate<Integer> getPredicateInstance(Collection<Predicate<Integer>> predicates)"}, {"name": "getPredicateInstance", "signature": "Predicate<Integer> getPredicateInstance(Predicate<? super Integer>... predicates)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllTrue", "primary_tested": ["AllPredicate.allPredicate(Predicate[])"], "associated_methods": ["AllPredicate.evaluate(Integer)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Tests whether multiple true predicates evaluate to true."}, {"name": "testEmptyArrayToGetInstance", "primary_tested": ["AllPredicate.allPredicate(Predicate[])"], "associated_methods": ["AllPredicate.evaluate(Integer)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Verifies that providing an empty predicate array evaluates to true."}, {"name": "testEmptyCollectionToGetInstance", "primary_tested": ["AllPredicate.allPredicate(Collection)"], "associated_methods": ["AllPredicate.evaluate(Integer)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Collections"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Verifies that providing an empty predicate collection evaluates to true."}, {"name": "testOneFalsePredicate", "primary_tested": ["AllPredicate.allPredicate(Predicate[])"], "associated_methods": ["AllPredicate.test(Integer)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "createMockPredicate", "type": "method"}]}, "category": "unit", "description": "Tests whether a single false predicate evaluates to true."}, {"name": "testOneTruePredicate", "primary_tested": ["AllPredicate.allPredicate(Predicate[])"], "associated_methods": ["AllPredicate.test(Integer)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "createMockPredicate", "type": "method"}]}, "category": "unit", "description": "Tests whether a single true predicate evaluates to true."}, {"name": "testTrueAndFalseCombined", "primary_tested": ["AllPredicate.allPredicate(Predicate[])"], "associated_methods": ["AllPredicate.evaluate(Integer)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate"], "class_members": [{"name": "getPredicateInstance", "type": "method"}]}, "category": "unit", "description": "Tests whether combining some true and one false evaluates to false. Also verifies that only the first false predicate is actually evaluated."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java", "testclass_name": "SingletonIterator2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator2Test", "description": "Tests for the SingletonIterator2 class, focusing on its iterator and reset functionalities.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonIterator<E> makeObject()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "associated_methods": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of SingletonIterator, including hasNext, next, and exception handling."}, {"name": "testReset", "primary_tested": ["SingletonIterator.reset()"], "associated_methods": ["SingletonIterator.hasNext()", "SingletonIterator.next()"], "external_dependencies": {"modules": ["ResettableIterator"], "class_members": [{"name": "testValue", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of SingletonIterator, ensuring that the iterator can be reset and used multiple times."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java", "testclass_name": "NodeListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Element;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.Text;"], "name": "NodeListIteratorTest", "description": "Unit tests for NodeListIterator class, focusing on different constructors and edge cases.", "class_members": {"variables": [{"name": "nodes", "type": "Node[]"}, {"name": "createIteratorWithStandardConstr", "type": "boolean"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<Node> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<Node> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyIteratorWithNodeConstructor", "primary_tested": [], "associated_methods": ["NodeListIteratorTest.testEmptyIterator()"], "external_dependencies": {"modules": ["NodeListIterator"], "class_members": [{"name": "createIteratorWithStandardConstr", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the convenience constructor with parameter type org.w3c.Node for an empty iterator."}, {"name": "testFullIteratorWithNodeConstructor", "primary_tested": [], "associated_methods": ["NodeListIteratorTest.testFullIterator()"], "external_dependencies": {"modules": ["NodeListIterator"], "class_members": [{"name": "createIteratorWithStandardConstr", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the convenience constructor with parameter type org.w3c.Node for a full iterator."}, {"name": "testNullConstructor", "primary_tested": ["NodeListIterator.NodeListIterator(Node)"], "external_dependencies": {"modules": ["NodeListIterator"]}, "category": "unit", "fixtures_used": [], "description": "Tests the constructor with a null Node parameter, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java", "testclass_name": "SingletonListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIteratorTest", "description": "Unit tests for the SingletonListIterator class, which is a list iterator that only contains a single element.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}], "methods": [{"name": "makeEmptyIterator", "signature": "SingletonListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "SingletonListIterator<E> makeObject()"}, {"name": "supportsAdd", "signature": "boolean supportsAdd()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testIterator", "primary_tested": ["SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()", "SingletonListIterator.next()", "SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.makeObject()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the basic functionality of the SingletonListIterator, including hasNext, hasPrevious, nextIndex, previousIndex, next, and previous methods."}, {"name": "testReset", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.makeObject()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "testValue", "type": "variable"}]}, "category": "unit", "description": "Tests the reset functionality of the SingletonListIterator, ensuring that the iterator can be reset to its initial state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java", "testclass_name": "ObjectArrayIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIteratorTest", "description": "Unit tests for the ObjectArrayIterator class, which is part of the Apache Commons Collections library.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator()"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array)"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array, int index)"}, {"name": "makeArrayIterator", "signature": "ObjectArrayIterator<E> makeArrayIterator(E[] array, int start, int end)"}, {"name": "makeEmptyIterator", "signature": "ObjectArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": [], "test_cases": [{"name": "testIterator", "primary_tested": ["Iterator.next()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the iteration functionality of the ObjectArrayIterator, ensuring it correctly iterates over the array and throws NoSuchElementException when exhausted."}, {"name": "testNullArray", "primary_tested": ["ObjectArrayIterator.ObjectArrayIterator(E[] array)"], "external_dependencies": {"modules": ["NullPointerException"], "class_members": [{"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests that creating an ObjectArrayIterator with a null array throws a NullPointerException."}, {"name": "testReset", "primary_tested": ["ObjectArrayIterator.reset()"], "associated_methods": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": [], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ObjectArrayIterator, ensuring it correctly resets the iterator to the beginning of the array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "testclass_name": "IteratorChainTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IteratorChainTest", "description": "Unit tests for the IteratorChain class in Apache Commons Collections.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "IteratorChain<String> makeEmptyIterator()"}, {"name": "makeObject", "signature": "IteratorChain<String> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyChain", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "NoSuchElementException", "IllegalStateException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty IteratorChain."}, {"name": "testFirstIteratorIsEmptyBug", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorChain", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the bug where the first iterator is empty in an IteratorChain."}, {"name": "testIterator", "primary_tested": [], "associated_methods": ["IteratorChainTest.makeObject()"], "external_dependencies": {"modules": ["IteratorChain", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the basic iteration functionality of the IteratorChain."}, {"name": "testRemove", "primary_tested": [], "associated_methods": ["IteratorChainTest.makeObject()"], "external_dependencies": {"modules": ["IteratorChain", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the IteratorChain."}, {"name": "testRemoveFromFilteredIterator", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": ["IteratorUtils", "Predicate", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality from a filtered iterator within an IteratorChain."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java", "testclass_name": "UniqueFilterIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UniqueFilterIteratorTest", "description": "Unit tests for the UniqueFilterIterator class, which filters out duplicate elements from an iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "UniqueFilterIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "UniqueFilterIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["UniqueFilterIterator.next()"], "associated_methods": ["UniqueFilterIterator.hasNext()"], "external_dependencies": {"modules": ["UniqueFilterIterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the UniqueFilterIterator, ensuring it filters out duplicate elements and handles the end of the iterator correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "testclass_name": "SetUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.SetUtils.SetView;", "import org.apache.commons.collections4.set.PredicatedSet;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SetUtilsTest", "description": "Unit tests for various SetUtils operations including difference, disjunction, intersection, union, and more.", "class_members": {"variables": [{"name": "setA", "type": "Set<Integer>"}, {"name": "setB", "type": "Set<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDifference", "primary_tested": ["SetUtils.difference(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.contains(Object)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the difference functionality of SetUtils."}, {"name": "testDisjunction", "primary_tested": ["SetUtils.disjunction(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.contains(Object)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the disjunction functionality of SetUtils."}, {"name": "testEmptyIfNull", "primary_tested": ["SetUtils.emptyIfNull(Set)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the emptyIfNull functionality of SetUtils."}, {"name": "testEquals", "primary_tested": ["SetUtils.isEqualSet(Set,Set)"], "associated_methods": ["Set.clear()"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the isEqualSet functionality of SetUtils."}, {"name": "testHashCode", "primary_tested": ["SetUtils.hashCodeForSet(Set)"], "associated_methods": ["Set.clear()"], "external_dependencies": {"modules": ["SetUtils", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the hashCodeForSet functionality of SetUtils."}, {"name": "testHashSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.hashSet(Object...)"], "associated_methods": ["Set.isEmpty()", "Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the hashSet and unmodifiableSet functionalities of SetUtils."}, {"name": "testIntersection", "primary_tested": ["SetUtils.intersection(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.contains(Object)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the intersection functionality of SetUtils."}, {"name": "testNewIdentityHashSet", "primary_tested": ["SetUtils.newIdentityHashSet()"], "associated_methods": ["Set.size()", "Set.add(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the newIdentityHashSet functionality of SetUtils."}, {"name": "testpredicatedSet", "primary_tested": ["SetUtils.predicatedSet(Set,Predicate)"], "associated_methods": ["PredicatedSet.class"], "external_dependencies": {"modules": ["SetUtils", "PredicatedSet", "Predicate", "NullPointerException"]}, "category": "unit", "description": "Tests the predicatedSet functionality of SetUtils."}, {"name": "testUnion", "primary_tested": ["SetUtils.union(Set,Set)"], "associated_methods": ["SetView.size()", "SetView.containsAll(Collection)", "SetUtils.emptySet()"], "external_dependencies": {"modules": ["SetUtils", "SetView", "NullPointerException"], "class_members": [{"name": "setA", "type": "variable"}, {"name": "setB", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the union functionality of SetUtils."}, {"name": "testUnmodifiableSet", "primary_tested": ["SetUtils.unmodifiableSet()", "SetUtils.unmodifiableSet(Object...)"], "associated_methods": ["Set.isEmpty()", "Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the unmodifiableSet functionalities of SetUtils."}, {"name": "testUnmodifiableSetWrap", "primary_tested": ["SetUtils.unmodifiableSet(Set)"], "associated_methods": ["Set.size()", "Set.contains(Object)"], "external_dependencies": {"modules": ["SetUtils"]}, "category": "unit", "description": "Tests the unmodifiableSet wrap functionality of SetUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java", "testclass_name": "ArrayIterator2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayIterator2Test", "description": "Unit tests for ArrayIterator2 functionality.", "class_members": {"variables": [{"name": "testArray", "type": "int[]"}], "methods": [{"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array)"}, {"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array, int index)"}, {"name": "makeArrayIterator", "signature": "ArrayIterator<E> makeArrayIterator(Object array, int start, int end)"}, {"name": "makeEmptyIterator", "signature": "ArrayIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": [], "test_cases": [{"name": "testIndexedArray", "primary_tested": ["ArrayIterator.hasNext()", "ArrayIterator.next()"], "associated_methods": ["ArrayIterator.makeArrayIterator(Object,int)", "ArrayIterator.makeArrayIterator(Object,int,int)"], "external_dependencies": {"modules": ["ArrayIterator", "ArrayIndexOutOfBoundsException", "IllegalArgumentException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeArrayIterator", "type": "method"}]}, "category": "unit", "description": "Tests the indexed array functionality of ArrayIterator, including boundary conditions and exceptions."}, {"name": "testIterator", "primary_tested": ["ArrayIterator.hasNext()", "ArrayIterator.next()"], "associated_methods": ["ArrayIterator.makeObject()"], "external_dependencies": {"modules": ["ArrayIterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic iterator functionality of ArrayIterator, including iteration and exception handling."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.bidimap.DualHashBidiMap;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapIteratorTest", "description": "Tests for the UnmodifiableMapIterator class, which ensures that the underlying MapIterator is not modifiable.", "class_members": {"variables": [], "methods": [{"name": "getConfirmedMap", "signature": "Map<K, V> getConfirmedMap()"}, {"name": "getMap", "signature": "IterableMap<K, V> getMap()"}, {"name": "makeEmptyIterator", "signature": "MapIterator<K, V> makeEmptyIterator()"}, {"name": "makeObject", "signature": "MapIterator<K, V> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSetValue", "signature": "boolean supportsSetValue()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator<K, V>)"], "associated_methods": ["DualHashBidiMap.mapIterator()"], "external_dependencies": {"modules": ["UnmodifiableMapIterator", "DualHashBidiMap", "MapIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "getMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable map iterator and ensures it handles null input correctly."}, {"name": "testMapIterator", "primary_tested": ["UnmodifiableMapIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableMapIterator", "Unmodifiable"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that the iterator created by makeEmptyIterator is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "testclass_name": "TransformedSplitMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.math.BigInteger;", "import java.util.HashMap;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSplitMapTest", "description": "Unit tests for TransformedSplitMap functionality.", "class_members": {"variables": [{"name": "intToString", "type": "Transformer<Integer, String>"}, {"name": "objectToClass", "type": "Transformer<Object, Class<?>>"}, {"name": "stringToInt", "type": "Transformer<String, Integer>"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyMap", "primary_tested": ["TransformedSplitMap.isEmpty()"], "associated_methods": ["TransformedSplitMap.entrySet()"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "ObjectInputStream", "FileInputStream"], "class_members": [{"name": "intToString", "type": "variable"}, {"name": "objectToClass", "type": "variable"}], "project_specific_resources": ["BulkTest.TEST_DATA_PATH"]}, "category": "unit", "description": "Tests if the TransformedSplitMap is empty after deserialization."}, {"name": "testFullMap", "primary_tested": ["TransformedSplitMap.isEmpty()"], "associated_methods": ["TransformedSplitMap.entrySet()"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "ObjectInputStream", "FileInputStream"], "class_members": [{"name": "intToString", "type": "variable"}, {"name": "objectToClass", "type": "variable"}], "project_specific_resources": ["BulkTest.TEST_DATA_PATH"]}, "category": "unit", "description": "Tests if the TransformedSplitMap is not empty after deserialization with full data."}, {"name": "testMapIterator", "primary_tested": ["TransformedSplitMap.mapIterator()"], "associated_methods": ["TransformedSplitMap.size()", "TransformedSplitMap.put(String,String)", "TransformedSplitMap.get(String)"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "MapIterator"], "class_members": [{"name": "stringToInt", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of the MapIterator in TransformedSplitMap."}, {"name": "testTransformedMap", "primary_tested": ["TransformedSplitMap.transformingMap(HashMap,Transformer,Transformer)"], "associated_methods": ["TransformedSplitMap.size()", "TransformedSplitMap.put(Integer,Object)", "TransformedSplitMap.containsKey(String)", "TransformedSplitMap.containsValue(Class<?>)", "TransformedSplitMap.get(String)", "TransformedSplitMap.remove(String)"], "external_dependencies": {"modules": ["TransformedSplitMap", "HashMap", "NOPTransformer", "StringUtils", "BigInteger"], "class_members": [{"name": "intToString", "type": "variable"}, {"name": "objectToClass", "type": "variable"}, {"name": "stringToInt", "type": "variable"}]}, "category": "unit", "description": "Tests the transformation functionality of TransformedSplitMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesFactoryTest.java", "testclass_name": "OrderedPropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.junit.jupiter.api.Test;"], "name": "OrderedPropertiesFactoryTest", "description": "Tests for the OrderedPropertiesFactory class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["OrderedPropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["OrderedPropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the instance of OrderedPropertiesFactory is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "testclass_name": "PushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PushbackIteratorTest", "description": "Unit tests for the PushbackIterator class, which allows elements to be pushed back onto the iterator.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PushbackIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "validate", "signature": "void validate(Iterator<E> iter, Object... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDelayedPushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the delayed pushback functionality of the PushbackIterator."}, {"name": "testImmediatePushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the immediate pushback functionality of the PushbackIterator."}, {"name": "testMultiplePushback", "primary_tested": ["PushbackIterator.next()"], "associated_methods": ["PushbackIterator.pushback(E)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the multiple pushback functionality of the PushbackIterator."}, {"name": "testNormalIteration", "primary_tested": ["PushbackIterator.next()"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the normal iteration functionality of the PushbackIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java", "testclass_name": "UnmodifiableIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableIteratorTest", "description": "Tests for the UnmodifiableIterator class, which decorates an iterator to ensure it cannot be modified.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableIterator.unmodifiableIterator(Iterator<E>)"], "associated_methods": ["UnmodifiableIteratorTest.makeObject()"], "external_dependencies": {"modules": ["UnmodifiableIterator", "Iterator", "NullPointerException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the factory method of UnmodifiableIterator to ensure it correctly decorates an iterator and handles null input."}, {"name": "testIterator", "primary_tested": ["UnmodifiableIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableIterator", "Unmodifiable"]}, "category": "unit", "description": "Tests that the iterator created by makeEmptyIterator is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java", "testclass_name": "ArrayListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "ArrayListIteratorTest", "description": "Tests for the ArrayListIterator class, focusing on ListIterator functionality and set operation.", "class_members": {"methods": [{"name": "makeArrayListIterator", "signature": "ArrayListIterator<E> makeArrayListIterator(Object array)"}, {"name": "makeEmptyIterator", "signature": "ArrayListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ArrayListIterator<E> makeObject()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "test_cases": [{"name": "testListIterator", "primary_tested": ["ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the basic ListIterator functionality by going backwards using previous()."}, {"name": "testListIteratorSet", "primary_tested": ["ListIterator.set(E)"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.next()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "makeArrayListIterator", "type": "method"}]}, "category": "unit", "description": "Tests the ListIterator set operation and ensures IllegalStateException is thrown if set is called before next or previous."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "testclass_name": "PatriciaTrieTest", "dependencies": ["package org.apache.commons.collections4.trie;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.ConcurrentModificationException;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import java.util.SortedMap;", "import org.apache.commons.collections4.Trie;", "import org.apache.commons.collections4.map.AbstractSortedMapTest;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "PatriciaTrieTest", "description": "Unit tests for PatriciaTrie operations, including prefix mapping and removal.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPrefixMap", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.get(String)", "PatriciaTrie.remove(String)"], "external_dependencies": {"modules": ["PatriciaTrie", "StringUtils", "SortedMap", "Iterator", "Map.Entry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the prefix mapping functionality of the PatriciaTrie, including adding, retrieving, and removing entries."}, {"name": "testPrefixMapClear", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,Integer)", "SortedMap.clear()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "Arrays", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests clearing a prefix map and verifying the state of the PatriciaTrie."}, {"name": "testPrefixMapClearNothing", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["SortedMap.clear()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests clearing an empty prefix map and verifying the state of the PatriciaTrie."}, {"name": "testPrefixMapClearUsingRemove", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,Integer)", "SortedMap.remove(String)"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "HashSet", "Arrays", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests removing entries from a prefix map and verifying the state of the PatriciaTrie."}, {"name": "testPrefixMapRemoval", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "Iterator.remove()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests removing entries from a prefix map using the iterator's remove method."}, {"name": "testPrefixMapSizes", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)", "PatriciaTrie.clear()"], "external_dependencies": {"modules": ["PatriciaTrie", "SortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the prefix map and verifies the entries."}, {"name": "testPrefixMapSizes2", "primary_tested": ["PatriciaTrie.prefixMap(String)"], "associated_methods": ["PatriciaTrie.put(String,String)"], "external_dependencies": {"modules": ["PatriciaTrie", "StringUtils", "SortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the prefix map with specific character lengths."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "testclass_name": "ListOrderedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.list.AbstractListTest;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMapTest", "description": "Unit tests for ListOrderedMap operations and functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestKeyListView", "description": "Internal helper class for testing key list view"}, {"name": "TestValueListView", "description": "Internal helper class for testing value list view"}]}, "fixtures": [], "test_cases": [{"name": "testCOLLECTIONS_474_nonNullValues", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["HashMap", "ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with non-null values."}, {"name": "testCOLLECTIONS_474_nullValues", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["HashMap", "ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with null values."}, {"name": "testGetByIndex", "primary_tested": ["ListOrderedMap.get(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the get method by index."}, {"name": "testGetValueByIndex", "primary_tested": ["ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests the getValue method by index."}, {"name": "testIndexOf", "primary_tested": ["ListOrderedMap.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the indexOf method."}, {"name": "testPut_intObjectObject", "primary_tested": ["ListOrderedMap.put(int,Object,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "Integer", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the put method with index, key, and value."}, {"name": "testPutAllWithIndex", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with index."}, {"name": "testPutAllWithIndexBug441", "primary_tested": ["ListOrderedMap.putAll(int,Map)"], "external_dependencies": {"modules": ["ListOrderedMap", "TreeMap", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the putAll method with index for bug COLLECTIONS-441."}, {"name": "testRemoveByIndex", "primary_tested": ["ListOrderedMap.remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "MapIterator", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the remove method by index."}, {"name": "testSetValueByIndex", "primary_tested": ["ListOrderedMap.setValue(int,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "StringUtils", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the setValue method by index."}, {"name": "testValueList_getByIndex", "primary_tested": ["ListOrderedMap.valueList().get(int)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the valueList get method by index."}, {"name": "testValueList_removeByIndex", "primary_tested": ["ListOrderedMap.valueList().remove(int)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "description": "Tests the valueList remove method by index."}, {"name": "testValueList_setByIndex", "primary_tested": ["ListOrderedMap.valueList().set(int,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the valueList set method by index."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java", "testclass_name": "IteratorIterableTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.BulkTest;", "import org.junit.jupiter.api.Test;"], "name": "IteratorIterableTest", "description": "Tests for the IteratorIterable class, focusing on its behavior with iterators and iterables.", "class_members": {"variables": [], "methods": [{"name": "createIterator", "signature": "Iterator<Integer> createIterator()"}, {"name": "verifyIteration", "signature": "void verifyIteration(Iterable<Number> iterable)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIterator", "primary_tested": ["IteratorIterable.<init>(Iterator<Integer>)"], "associated_methods": ["IteratorIterableTest.verifyIteration(Iterable<Number>)"], "external_dependencies": {"modules": ["Iterator", "Iterable", "IteratorIterable", "ArrayList", "List", "Integer"], "class_members": [{"name": "createIterator", "type": "method"}, {"name": "verifyIteration", "type": "method"}]}, "category": "unit", "description": "Tests the behavior of IteratorIterable when used with an iterator, ensuring it cannot be iterated twice."}, {"name": "testMultipleUserIterator", "primary_tested": ["IteratorIterable.<init>(Iterator<Integer>,boolean)"], "associated_methods": ["IteratorIterableTest.verifyIteration(Iterable<Number>)"], "external_dependencies": {"modules": ["Iterator", "Iterable", "IteratorIterable", "ArrayList", "List", "Integer"], "class_members": [{"name": "createIterator", "type": "method"}, {"name": "verifyIteration", "type": "method"}]}, "category": "unit", "description": "Tests the behavior of IteratorIterable when used with an iterator and allows multiple iterations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java", "testclass_name": "SortedPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "SortedPropertiesTest", "description": "Unit tests for the SortedProperties class, focusing on the entrySet and keys methods.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SortedProperties.entrySet()"], "associated_methods": ["SortedProperties.put(String,String)", "SortedProperties.iterator()"], "external_dependencies": {"modules": ["SortedProperties", "Map", "Iterator"]}, "category": "unit", "description": "Tests the entrySet method of SortedProperties to ensure entries are sorted correctly."}, {"name": "testKeys", "primary_tested": ["SortedProperties.keys()"], "associated_methods": ["SortedProperties.put(String,String)", "SortedProperties.nextElement()"], "external_dependencies": {"modules": ["SortedProperties", "Enumeration"]}, "category": "unit", "description": "Tests the keys method of SortedProperties to ensure keys are sorted correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "testclass_name": "CompositeMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMapTest", "description": "Unit tests for the CompositeMap class, which is part of the Apache Commons Collections library.", "class_members": {"variables": [{"name": "pass", "type": "boolean"}], "methods": [{"name": "buildOne", "signature": "Map<K, V> buildOne()"}, {"name": "buildTwo", "signature": "Map<K, V> buildTwo()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<K, V>)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of composited maps to a CompositeMap and checks for key presence."}, {"name": "testGet", "primary_tested": ["CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of values from a CompositeMap."}, {"name": "testPut", "primary_tested": ["CompositeMap.put(K, V)"], "associated_methods": ["CompositeMap.MapMutator.put(CompositeMap<K, V>, Map<K, V>[], K, V)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the insertion of a key-value pair into a CompositeMap using a custom MapMutator."}, {"name": "testPutAll", "primary_tested": ["CompositeMap.putAll(Map<? extends K, ? extends V>)"], "associated_methods": ["CompositeMap.MapMutator.putAll(CompositeMap<K, V>, Map<K, V>[], Map<? extends K, ? extends V>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the insertion of all key-value pairs from a map into a CompositeMap using a custom MapMutator."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<K, V>)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of composited maps from a CompositeMap and checks for key presence."}, {"name": "testRemoveFromComposited", "primary_tested": ["CompositeMap.remove(Object)"], "associated_methods": ["HashMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from a composited map within a CompositeMap."}, {"name": "testRemoveFromUnderlying", "primary_tested": ["HashMap.remove(Object)"], "associated_methods": ["CompositeMap.containsKey(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key-value pair from an underlying map within a CompositeMap."}, {"name": "testResolveCollision", "primary_tested": ["CompositeMap.MapMutator.resolveCollision(CompositeMap<K, V>, Map<K, V>, Map<K, V>, Collection<K>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the resolution of key collisions in a CompositeMap using a custom MapMutator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/PropertiesFactoryTest.java", "testclass_name": "PropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.Properties;", "import org.junit.jupiter.api.Test;"], "name": "PropertiesFactoryTest", "description": "Test class for PropertiesFactory, extending AbstractPropertiesFactoryTest.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["PropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["PropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the PropertiesFactory instance is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesFactoryTest.java", "testclass_name": "SortedPropertiesFactoryTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.junit.jupiter.api.Test;"], "name": "SortedPropertiesFactoryTest", "description": "Tests for the SortedPropertiesFactory instance.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testInstance", "primary_tested": ["SortedPropertiesFactory.INSTANCE"], "external_dependencies": {"modules": ["SortedPropertiesFactory"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the SortedPropertiesFactory instance is not null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "testclass_name": "FilterIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIteratorTest", "description": "Unit tests for FilterIterator functionality, including hasNext, next, and predicate handling.", "class_members": {"variables": [{"name": "array", "type": "String[]"}, {"name": "list", "type": "List<E>"}, {"name": "iterator", "type": "FilterIterator<E>"}], "methods": [{"name": "initIterator", "signature": "void initIterator()"}, {"name": "makeBlockAllFilter", "signature": "FilterIterator<E> makeBlockAllFilter(Iterator<E>)"}, {"name": "makePassThroughFilter", "signature": "FilterIterator<E> makePassThroughFilter(Iterator<E>)"}, {"name": "verifyElementsInPredicate", "signature": "void verifyElementsInPredicate(String[])"}, {"name": "verifyNoMoreElements", "signature": "void verifyNoMoreElements()"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRepeatedHasNext", "primary_tested": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests repeated calls to hasNext() method to ensure it returns true as long as there are elements."}, {"name": "testRepeatedNext", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.verifyNoMoreElements()"], "external_dependencies": {"modules": ["FilterIterator"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "verifyNoMoreElements", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests repeated calls to next() method to ensure it iterates through all elements and then throws NoSuchElementException."}, {"name": "testReturnValues", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.verifyElementsInPredicate(String[])"], "external_dependencies": {"modules": ["FilterIterator", "ArrayUtils"], "class_members": [{"name": "verifyElementsInPredicate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the return values of the next() method with different predicates."}, {"name": "testSetIterator", "primary_tested": ["FilterIterator.setIterator(Iterator<E>)"], "external_dependencies": {"modules": ["FilterIterator", "Collections"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a new iterator and checking hasNext() with the new iterator."}, {"name": "testSetPredicate", "primary_tested": ["FilterIterator.setPredicate(Predicate<E>)"], "external_dependencies": {"modules": ["FilterIterator", "Collections", "NotNullPredicate"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting a new predicate and checking hasNext() with the new predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "testclass_name": "ClosureUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionClosure;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPClosure;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "ClosureUtilsTest", "description": "Unit tests for ClosureUtils class, which provides utility methods for creating and manipulating Closure objects.", "class_members": {"variables": [{"name": "cString", "type": "static final Object"}], "methods": [], "nested_classes": [{"name": "MockClosure", "description": "Internal helper class implementing Closure interface for testing purposes."}, {"name": "MockTransformer", "description": "Internal helper class implementing Transformer interface for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testChainedClosure", "primary_tested": ["ClosureUtils.chainedClosure(Closure[],Closure[])"], "associated_methods": ["MockClosure.execute(Object)", "MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure", "Collections"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the chainedClosure functionality of ClosureUtils, ensuring that multiple closures are executed in sequence."}, {"name": "testDoWhileClosure", "primary_tested": ["ClosureUtils.doWhileClosure(Closure,Predicate)"], "associated_methods": ["MockClosure.execute(Object)", "MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "FalsePredicate", "PredicateUtils"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the doWhileClosure functionality of ClosureUtils, ensuring that the closure is executed at least once and then repeatedly based on the predicate."}, {"name": "testExceptionClosure", "primary_tested": ["ClosureUtils.exceptionClosure()"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "ExceptionClosure", "FunctorException"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the exceptionClosure functionality of ClosureUtils, ensuring that an exception is thrown when the closure is executed."}, {"name": "testForClosure", "primary_tested": ["ClosureUtils.forClosure(int,Closure)"], "associated_methods": ["MockClosure.execute(Object)"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "NOPClosure"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the forClosure functionality of ClosureUtils, ensuring that the closure is executed a specified number of times."}, {"name": "testIfClosure", "primary_tested": ["ClosureUtils.ifClosure(Predicate,Closure,Closure)"], "associated_methods": ["MockClosure.execute(Object)", "MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "TruePredicate", "FalsePredicate"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the ifClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the predicate."}, {"name": "testInvokeClosure", "primary_tested": ["ClosureUtils.invokerClosure(String,Class[],Object[])"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the invokerClosure functionality of ClosureUtils, ensuring that a method is invoked on the input object."}, {"name": "testNopClosure", "primary_tested": ["ClosureUtils.nopClosure()"], "associated_methods": [], "external_dependencies": {"modules": ["ClosureUtils", "NOPClosure"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the nopClosure functionality of ClosureUtils, ensuring that the closure does nothing."}, {"name": "testSingletonPatternInSerialization", "primary_tested": ["ExceptionClosure.readResolve()", "NOPClosure.readResolve()"], "associated_methods": [], "external_dependencies": {"modules": ["ExceptionClosure", "NOPClosure", "TestUtils"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests that all Closure singletons hold the singleton pattern in the serialization/deserialization process."}, {"name": "testSwitchClosure", "primary_tested": ["ClosureUtils.switchClosure(Predicate[],Closure[])"], "associated_methods": ["MockClosure.execute(Object)", "MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "EqualPredicate", "NOPClosure", "HashMap"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the switchClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the predicate."}, {"name": "testSwitchMapClosure", "primary_tested": ["ClosureUtils.switchMapClosure(Map)"], "associated_methods": ["MockClosure.execute(Object)", "MockClosure.reset()"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "HashMap", "NOPClosure"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the switchMapClosure functionality of ClosureUtils, ensuring that the appropriate closure is executed based on the map key."}, {"name": "testTransformerClosure", "primary_tested": ["ClosureUtils.asClosure(Transformer)"], "associated_methods": ["MockTransformer.transform(Object)"], "external_dependencies": {"modules": ["ClosureUtils", "MockTransformer", "NOPClosure"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the asClosure functionality of ClosureUtils, ensuring that a Transformer is wrapped into a Closure."}, {"name": "testWhileClosure", "primary_tested": ["ClosureUtils.whileClosure(Predicate,Closure)"], "associated_methods": ["MockClosure.execute(Object)"], "external_dependencies": {"modules": ["ClosureUtils", "MockClosure", "FalsePredicate", "PredicateUtils", "NOPClosure"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the whileClosure functionality of ClosureUtils, ensuring that the closure is executed repeatedly based on the predicate."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.ListIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableListIteratorTest", "description": "Tests for the UnmodifiableListIterator class, which ensures that the underlying ListIterator is unmodifiable.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ListIterator<E> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsAdd", "signature": "boolean supportsAdd()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "supportsSet", "signature": "boolean supportsSet()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator<E>)"], "associated_methods": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator<E>)"], "external_dependencies": {"modules": ["UnmodifiableListIterator", "ListIterator", "NullPointerException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the factory method for creating unmodifiable list iterators and ensures that it throws a NullPointerException when given a null argument."}, {"name": "testListIterator", "primary_tested": ["UnmodifiableListIterator.makeEmptyIterator()"], "external_dependencies": {"modules": ["UnmodifiableListIterator", "Unmodifiable"]}, "category": "unit", "description": "Tests that the iterator created by makeEmptyIterator is an instance of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "testclass_name": "LoopingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "LoopingIteratorTest", "description": "Unit tests for the LoopingIterator class, which tests various functionalities including constructor exceptions, looping behavior, removal, reset, and size methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConstructorEx", "primary_tested": ["LoopingIterator.<init>(List)"], "external_dependencies": {"modules": ["LoopingIterator", "NullPointerException"]}, "category": "unit", "description": "Tests the constructor exception when a null list is passed."}, {"name": "testLooping0", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "NoSuchElementException"]}, "category": "unit", "description": "Tests the behavior of an empty looping iterator."}, {"name": "testLooping1", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with a single element."}, {"name": "testLooping2", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with two elements."}, {"name": "testLooping3", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of a looping iterator with three elements."}, {"name": "testRemoving1", "primary_tested": ["LoopingIterator.hasNext()", "LoopingIterator.next()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "Arrays", "NoSuchElementException"]}, "category": "unit", "description": "Tests the remove() method on a LoopingIterator wrapped ArrayList."}, {"name": "testReset", "primary_tested": ["LoopingIterator.next()", "LoopingIterator.reset()"], "external_dependencies": {"modules": ["LoopingIterator", "Arrays"]}, "category": "unit", "description": "Tests the reset() method on a LoopingIterator wrapped ArrayList."}, {"name": "testSize", "primary_tested": ["LoopingIterator.size()", "LoopingIterator.next()", "LoopingIterator.reset()", "LoopingIterator.remove()"], "external_dependencies": {"modules": ["LoopingIterator", "ArrayList", "Arrays"]}, "category": "unit", "description": "Tests the size() method on a LoopingIterator wrapped ArrayList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java", "testclass_name": "ListIteratorWrapper2Test", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListIteratorWrapper2Test", "description": "Unit tests for the ListIteratorWrapper class, focusing on its iteration, removal, and reset functionalities.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ResettableListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ResettableListIterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["ListIterator.next()", "ListIterator.previous()"], "associated_methods": ["ListIterator.hasNext()", "ListIterator.previousIndex()", "ListIterator.nextIndex()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration functionality of the ListIteratorWrapper, including forward and backward iteration, and handling of NoSuchElementException."}, {"name": "testRemove", "primary_tested": ["ListIterator.remove()"], "associated_methods": ["ListIterator.previousIndex()", "ListIterator.nextIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal functionality of the ListIteratorWrapper, including handling of IllegalStateException and correct state management after removal."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.reset()"], "associated_methods": ["ResettableListIterator.next()", "ResettableListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator state is correctly reset and subsequent iterations behave as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "testclass_name": "TransformerUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Date;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.functors.StringValueTransformer;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "TransformerUtilsTest", "description": "Unit tests for various functionalities of TransformerUtils.", "class_members": {"variables": [{"name": "cObject", "type": "static final Object"}, {"name": "cString", "type": "static final Object"}, {"name": "cInteger", "type": "static final Object"}]}, "fixtures": [], "test_cases": [{"name": "testChainedTransformer", "primary_tested": ["TransformerUtils.chainedTransformer(Transformer[],Transformer[])"], "associated_methods": ["TransformerUtils.constantTransformer(Object)", "TransformerUtils.chainedTransformer(Collection<Transformer<Object, Object>>)", "TransformerUtils.chainedTransformer(Transformer[])"], "external_dependencies": {"modules": ["TransformerUtils", "NOPTransformer", "ArrayList", "Collections"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the chaining of transformers and their application."}, {"name": "testCloneTransformer", "primary_tested": ["TransformerUtils.cloneTransformer()"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}, {"name": "cObject", "type": "variable"}]}, "category": "unit", "description": "Tests the cloning transformer functionality."}, {"name": "testConstantTransformer", "primary_tested": ["TransformerUtils.constantTransformer(Object)"], "external_dependencies": {"modules": ["TransformerUtils", "ConstantTransformer"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the constant transformer functionality."}, {"name": "testExceptionTransformer", "primary_tested": ["TransformerUtils.exceptionTransformer()"], "external_dependencies": {"modules": ["TransformerUtils", "FunctorException"]}, "category": "unit", "description": "Tests the exception transformer functionality."}, {"name": "testExecutorTransformer", "primary_tested": ["TransformerUtils.asTransformer(Closure<Object>)"], "external_dependencies": {"modules": ["TransformerUtils", "ClosureUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the executor transformer functionality."}, {"name": "testFactoryTransformer", "primary_tested": ["TransformerUtils.asTransformer(Factory<Object>)"], "external_dependencies": {"modules": ["TransformerUtils", "FactoryUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the factory transformer functionality."}, {"name": "testIfTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate<Integer>,Transformer<Object, String>,Transformer<Object, String>)"], "associated_methods": ["TransformerUtils.constantTransformer(String)"], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "FalsePredicate", "EqualPredicate"]}, "category": "unit", "description": "Tests the if transformer functionality."}, {"name": "testInstantiateTransformerNull", "primary_tested": ["TransformerUtils.instantiateTransformer(Class[],Object[])"], "external_dependencies": {"modules": ["TransformerUtils", "StringUtils", "Date"]}, "category": "unit", "description": "Tests the instantiate transformer functionality with null values."}, {"name": "testInvokerTransformer", "primary_tested": ["TransformerUtils.invokerTransformer(String)"], "external_dependencies": {"modules": ["TransformerUtils", "ArrayList"]}, "category": "unit", "description": "Tests the invoker transformer functionality."}, {"name": "testInvokerTransformer2", "primary_tested": ["TransformerUtils.invokerTransformer(String,Class[],Object[])"], "external_dependencies": {"modules": ["TransformerUtils", "ArrayList"], "class_members": [{"name": "cString", "type": "variable"}]}, "category": "unit", "description": "Tests the invoker transformer functionality with method parameters."}, {"name": "testMapTransformer", "primary_tested": ["TransformerUtils.mapTransformer(Map<Object, Integer>)"], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "ConstantTransformer"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the map transformer functionality."}, {"name": "testNopTransformer", "primary_tested": ["TransformerUtils.nopTransformer()"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the nop transformer functionality."}, {"name": "testNullTransformer", "primary_tested": ["TransformerUtils.nullTransformer()"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the null transformer functionality."}, {"name": "testPredicateTransformer", "primary_tested": ["TransformerUtils.asTransformer(Predicate<Object>)"], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate"], "class_members": [{"name": "cObject", "type": "variable"}, {"name": "cString", "type": "variable"}, {"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the predicate transformer functionality."}, {"name": "testSingletonPatternInSerialization", "primary_tested": [], "external_dependencies": {"modules": ["ExceptionTransformer", "NOPTransformer", "StringValueTransformer", "TestUtils"]}, "category": "unit", "description": "Tests the singleton pattern in serialization for various transformers."}, {"name": "testStringValueTransformer", "primary_tested": ["TransformerUtils.stringValueTransformer()"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": [{"name": "cInteger", "type": "variable"}]}, "category": "unit", "description": "Tests the string value transformer functionality."}, {"name": "testSwitchMapTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<String, Transformer<String, String>>)"], "associated_methods": ["TransformerUtils.constantTransformer(String)"], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "ConstantTransformer"]}, "category": "unit", "description": "Tests the switch map transformer functionality."}, {"name": "testSwitchTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate[],Transformer[])"], "associated_methods": ["TransformerUtils.constantTransformer(String)"], "external_dependencies": {"modules": ["TransformerUtils", "TruePredicate", "FalsePredicate", "EqualPredicate", "ConstantTransformer"]}, "category": "unit", "description": "Tests the switch transformer functionality."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "testclass_name": "LazyIteratorChainTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LazyIteratorChainTest", "description": "Unit tests for the LazyIteratorChain class, which chains multiple iterators together lazily.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}], "methods": [{"name": "makeEmptyIterator", "signature": "LazyIteratorChain<String> makeEmptyIterator()"}, {"name": "makeObject", "signature": "LazyIteratorChain<String> makeObject()"}], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyChain", "primary_tested": ["LazyIteratorChain.hasNext()"], "associated_methods": ["LazyIteratorChain.next()", "LazyIteratorChain.remove()"], "external_dependencies": {"modules": ["LazyIteratorChain", "NoSuchElementException", "IllegalStateException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty LazyIteratorChain."}, {"name": "testFirstIteratorIsEmptyBug", "primary_tested": ["LazyIteratorChain.hasNext()", "LazyIteratorChain.next()"], "associated_methods": [], "external_dependencies": {"modules": ["LazyIteratorChain", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when the first iterator in the chain is empty."}, {"name": "testIterator", "primary_tested": ["LazyIteratorChain.next()"], "associated_methods": ["LazyIteratorChain.hasNext()"], "external_dependencies": {"modules": ["LazyIteratorChain", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "testArray", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the basic iteration functionality of the LazyIteratorChain."}, {"name": "testRemove", "primary_tested": ["LazyIteratorChain.remove()"], "associated_methods": ["LazyIteratorChain.next()"], "external_dependencies": {"modules": ["LazyIteratorChain", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "testArray", "type": "variable"}, {"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the LazyIteratorChain."}, {"name": "testRemoveFromFilteredIterator", "primary_tested": ["IteratorUtils.filteredIterator(Iterator, Predicate)", "IteratorUtils.chainedIterator(Iterator, Iterator)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Iterator.remove()"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality from a filtered iterator chained with another iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java", "testclass_name": "UnmodifiableOrderedBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Map;", "import java.util.TreeMap;", "import org.apache.commons.collections4.OrderedBidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableOrderedBidiMapTest", "description": "Tests for the UnmodifiableOrderedBidiMap class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(OrderedBidiMap)"], "associated_methods": [], "external_dependencies": {"modules": ["OrderedBidiMap", "UnmodifiableOrderedBidiMap", "NullPointerException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating an OrderedBidiMap as unmodifiable and checks for null input handling."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableOrderedBidiMap.makeObject()", "UnmodifiableOrderedBidiMap.makeFullMap()"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableOrderedBidiMap", "Unmodifiable"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the objects created by makeObject and makeFullMap are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "testclass_name": "ReverseListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.Test;"], "name": "ReverseListIteratorTest", "description": "Unit tests for the ReverseListIterator class, which reverses the order of elements in a list iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}], "methods": [{"name": "makeEmptyIterator", "signature": "ListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ReverseListIterator<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testEmptyListIteratorIsIndeedEmpty", "primary_tested": ["ListIterator.hasNext()", "ListIterator.nextIndex()", "ListIterator.hasPrevious()", "ListIterator.previousIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "description": "Tests that an empty list iterator behaves correctly, including throwing NoSuchElementException when next or previous is called."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.next()", "ResettableListIterator.reset()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator returns to the start after reset."}, {"name": "testReverse", "primary_tested": ["ListIterator.hasNext()", "ListIterator.nextIndex()", "ListIterator.hasPrevious()", "ListIterator.previousIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the reverse iteration functionality, ensuring that the iterator correctly navigates through the list in reverse order."}, {"name": "testWalkForwardAndBack", "primary_tested": ["ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests walking forward and backward through the list iterator, ensuring correct state and behavior at both ends of the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java", "testclass_name": "ListIteratorWrapperTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.ResettableListIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListIteratorWrapperTest", "description": "Unit tests for the ListIteratorWrapper class, which wraps a ListIterator and provides additional functionality.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ResettableListIterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ResettableListIterator<E> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterator", "primary_tested": ["ListIterator.next()", "ListIterator.hasNext()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "NoSuchElementException"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the basic iteration functionality of the ListIteratorWrapper, including forward and backward iteration, and handling of NoSuchElementException."}, {"name": "testRemove", "primary_tested": ["ListIterator.remove()"], "associated_methods": ["ListIterator.previousIndex()", "ListIterator.nextIndex()", "ListIterator.next()", "ListIterator.previous()"], "external_dependencies": {"modules": ["ListIterator", "IllegalStateException"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the ListIteratorWrapper, including handling of IllegalStateException and correct state management after removal."}, {"name": "testReset", "primary_tested": ["ResettableListIterator.reset()"], "associated_methods": ["ResettableListIterator.next()", "ResettableListIterator.hasPrevious()"], "external_dependencies": {"modules": ["ResettableListIterator"], "class_members": [{"name": "testArray", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality of the ResettableListIterator, ensuring that the iterator state is correctly reset and iteration can continue from the beginning."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "testclass_name": "CircularFifoQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Queue;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueueTest", "description": "Unit tests for the CircularFifoQueue class, focusing on its behavior and edge cases.", "class_members": {"variables": [], "methods": [{"name": "getCollection", "signature": "CircularFifoQueue<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "isFailFastSupported", "signature": "boolean isFailFastSupported()"}, {"name": "isNullSupported", "signature": "boolean isNullSupported()"}, {"name": "makeConfirmedCollection", "signature": "Collection<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Collection<E> makeConfirmedFullCollection()"}, {"name": "makeObject", "signature": "Queue<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddNull", "primary_tested": ["CircularFifoQueue.add(E)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NullPointerException"]}, "category": "unit", "description": "Tests that adding a null element to the CircularFifoQueue throws a NullPointerException."}, {"name": "testCircularFifoQueueCircular", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.contains(Object)", "CircularFifoQueue.peek()", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ArrayList"]}, "category": "unit", "description": "Tests the circular behavior of the CircularFifoQueue by adding elements and checking their presence and order."}, {"name": "testCircularFifoQueueRemove", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.resetFull()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"]}, "category": "unit", "description": "Tests the removal operation of the CircularFifoQueue to ensure it removes the first element correctly."}, {"name": "testConstructorException1", "primary_tested": ["CircularFifoQueue.<init>(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "IllegalArgumentException"]}, "category": "unit", "description": "Tests that the constructor throws an IllegalArgumentException when given a size of 0."}, {"name": "testConstructorException2", "primary_tested": ["CircularFifoQueue.<init>(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "IllegalArgumentException"]}, "category": "unit", "description": "Tests that the constructor throws an IllegalArgumentException when given a negative size."}, {"name": "testConstructorException3", "primary_tested": ["CircularFifoQueue.<init>(Collection<E>)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NullPointerException"]}, "category": "unit", "description": "Tests that the constructor throws a NullPointerException when given a null collection."}, {"name": "testDefaultSizeAndGetError1", "primary_tested": ["CircularFifoQueue.maxSize()", "CircularFifoQueue.add(E)", "CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"]}, "category": "unit", "description": "Tests the default size and get method of the CircularFifoQueue, ensuring it throws an exception for out-of-bounds indices."}, {"name": "testDefaultSizeAndGetError2", "primary_tested": ["CircularFifoQueue.maxSize()", "CircularFifoQueue.add(E)", "CircularFifoQueue.size()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"]}, "category": "unit", "description": "Tests the default size and get method of the CircularFifoQueue, ensuring it throws an exception for negative indices."}, {"name": "testGetIndex", "primary_tested": ["CircularFifoQueue.get(int)", "CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.resetFull()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ArrayList"]}, "category": "unit", "description": "Tests the get method of the CircularFifoQueue to ensure it retrieves elements correctly after removals."}, {"name": "testRemoveError1", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order."}, {"name": "testRemoveError2", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after overflow."}, {"name": "testRemoveError3", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after multiple removals and additions."}, {"name": "testRemoveError4", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after removing an element in the middle."}, {"name": "testRemoveError5", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after removing the last element."}, {"name": "testRemoveError6", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after removing the first element."}, {"name": "testRemoveError7", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after removing the second element."}, {"name": "testRemoveError8", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after removing an element and shifting the last element."}, {"name": "testRemoveError9", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.remove(Object)", "CircularFifoQueue.toString()"], "external_dependencies": {"modules": ["CircularFifoQueue"]}, "category": "unit", "description": "Tests the removal of elements from the CircularFifoQueue, ensuring the queue maintains the correct order after removing the last element in the queue."}, {"name": "testRepeatedSerialization", "primary_tested": ["CircularFifoQueue.add(E)", "CircularFifoQueue.contains(Object)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue", "ByteArrayInputStream", "ByteArrayOutputStream", "ObjectInputStream", "ObjectOutputStream"]}, "category": "unit", "description": "Tests the serialization and deserialization of the CircularFifoQueue, ensuring the queue maintains its state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java", "testclass_name": "MapBackedSet2Test", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Iterator;", "import java.util.Set;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;"], "name": "MapBackedSet2Test", "description": "Unit tests for MapBackedSet2 functionality, focusing on ordering and element management.", "class_members": {"methods": [{"name": "makeObject", "signature": "Set<E> makeObject()"}, {"name": "setupSet", "signature": "Set<E> setupSet()"}]}, "test_cases": [{"name": "testCanonicalEmptyCollectionExists", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "description": "Tests the existence of a canonical empty collection."}, {"name": "testCanonicalFullCollectionExists", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "description": "Tests the existence of a canonical full collection."}, {"name": "testOrdering", "primary_tested": ["Set.iterator()", "Set.remove(Object)", "Set.add(E)", "Set.size()"], "associated_methods": ["MapBackedSet2Test.setupSet()"], "external_dependencies": {"modules": ["LinkedMap", "Iterator", "Set"], "class_members": [{"name": "setupSet", "type": "method"}]}, "category": "unit", "description": "Tests the ordering and element management of the Set, including adding, removing, and iterating elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "testclass_name": "PassiveExpiringMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.map.PassiveExpiringMap.ExpirationPolicy;", "import org.junit.jupiter.api.Test;"], "name": "PassiveExpiringMapTest", "description": "Unit tests for the PassiveExpiringMap class, focusing on its expiration policies and map operations.", "class_members": {"variables": [], "methods": [{"name": "makeDecoratedTestMap", "signature": "Map<Integer, String> makeDecoratedTestMap()"}, {"name": "makeTestMap", "signature": "Map<Integer, String> makeTestMap()"}, {"name": "validateExpiration", "signature": "void validateExpiration(Map<String, String> map, long timeout)"}], "nested_classes": [{"name": "TestExpirationPolicy", "description": "Internal class implementing ExpirationPolicy for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": ["PassiveExpiringMap.PassiveExpiringMap(Map<String, String>)", "PassiveExpiringMap.PassiveExpiringMap(ExpirationPolicy<String, String>)", "PassiveExpiringMap.PassiveExpiringMap(long, TimeUnit)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ExpirationPolicy", "TimeUnit"]}, "category": "unit", "description": "Tests the constructors of PassiveExpiringMap for proper exception handling."}, {"name": "testContainsKey", "primary_tested": ["PassiveExpiringMap.containsKey(Object)"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsKey method of PassiveExpiringMap to ensure it correctly identifies keys based on expiration policy."}, {"name": "testContainsValue", "primary_tested": ["PassiveExpiringMap.containsValue(Object)"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of PassiveExpiringMap to ensure it correctly identifies values based on expiration policy."}, {"name": "testDecoratedMap", "primary_tested": ["PassiveExpiringMap.get(Object)", "PassiveExpiringMap.remove(Object)", "PassiveExpiringMap.put(Object, Object)"], "associated_methods": ["PassiveExpiringMap.makeDecoratedTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeDecoratedTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the behavior of a decorated map with PassiveExpiringMap, ensuring entries do not expire prematurely."}, {"name": "testEntrySet", "primary_tested": ["PassiveExpiringMap.entrySet()"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the entrySet method of PassiveExpiringMap to ensure it returns the correct set of entries."}, {"name": "testExpiration", "primary_tested": ["PassiveExpiringMap.PassiveExpiringMap(long)", "PassiveExpiringMap.PassiveExpiringMap(ExpirationPolicy<Object, Object>)"], "associated_methods": ["PassiveExpiringMap.validateExpiration(Map<String, String>, long)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy"], "class_members": [{"name": "validateExpiration", "type": "method"}]}, "category": "unit", "description": "Tests the expiration behavior of PassiveExpiringMap with different expiration policies and timeouts."}, {"name": "testGet", "primary_tested": ["PassiveExpiringMap.get(Object)"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of PassiveExpiringMap to ensure it returns the correct values based on expiration policy."}, {"name": "testIsEmpty", "primary_tested": ["PassiveExpiringMap.isEmpty()"], "associated_methods": ["PassiveExpiringMap.makeTestMap()", "PassiveExpiringMap.remove(Object)"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the isEmpty method of PassiveExpiringMap to ensure it correctly identifies if the map is empty based on expiration policy."}, {"name": "testKeySet", "primary_tested": ["PassiveExpiringMap.keySet()"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the keySet method of PassiveExpiringMap to ensure it returns the correct set of keys."}, {"name": "testPut", "primary_tested": ["PassiveExpiringMap.put(Object, Object)"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the put method of PassiveExpiringMap to ensure it correctly adds and updates entries based on expiration policy."}, {"name": "testSize", "primary_tested": ["PassiveExpiringMap.size()"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the size method of PassiveExpiringMap to ensure it returns the correct number of entries based on expiration policy."}, {"name": "testValues", "primary_tested": ["PassiveExpiringMap.values()"], "associated_methods": ["PassiveExpiringMap.makeTestMap()"], "external_dependencies": {"modules": ["PassiveExpiringMap"], "class_members": [{"name": "makeTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of PassiveExpiringMap to ensure it returns the correct collection of values."}, {"name": "testZeroTimeToLive", "primary_tested": ["PassiveExpiringMap.PassiveExpiringMap(long)", "PassiveExpiringMap.put(Object, Object)", "PassiveExpiringMap.get(Object)"], "external_dependencies": {"modules": ["PassiveExpiringMap"]}, "category": "unit", "description": "Tests the behavior of PassiveExpiringMap with a zero time-to-live, ensuring entries are immediately expired."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java", "testclass_name": "UnmodifiableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSetTest", "description": "Tests for the UnmodifiableSet class, focusing on its factory methods and unmodifiable behavior.", "class_members": {"methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isAddSupported", "signature": "boolean isAddSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeFullCollection", "signature": "Set<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Set<E> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<E>)"], "associated_methods": ["UnmodifiableSetTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSet", "Set", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests the factory method of UnmodifiableSet to ensure it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSet.unmodifiableSet(Set<E>)"], "associated_methods": ["UnmodifiableSetTest.makeObject()", "UnmodifiableSetTest.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableSet", "Unmodifiable", "Set"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "description": "Tests that the sets created by UnmodifiableSet are indeed unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java", "testclass_name": "TransformedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedNavigableSetTest", "description": "Tests for TransformedNavigableSet functionality.", "class_members": {"variables": [], "methods": [{"name": "makeFullCollection", "signature": "NavigableSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "NavigableSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedNavigableSet.transformingNavigableSet(NavigableSet<E>,Transformer<E,E>)"], "associated_methods": ["NavigableSet.add(E)", "NavigableSet.size()", "NavigableSet.contains(Object)", "NavigableSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedNavigableSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of TransformedNavigableSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["Set.size()", "Set.contains(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of TransformedSet by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java", "testclass_name": "UnmodifiableBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.BidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableBidiMapTest", "description": "Tests for the UnmodifiableBidiMap class, focusing on its unmodifiable behavior and factory decoration.", "class_members": {"methods": [{"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "makeConfirmedMap", "signature": "Map<K, V> makeConfirmedMap()"}, {"name": "makeFullMap", "signature": "BidiMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "BidiMap<K, V> makeObject()"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableBidiMap.unmodifiableBidiMap(BidiMap)"], "associated_methods": ["UnmodifiableBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["BidiMap", "UnmodifiableBidiMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration of UnmodifiableBidiMap, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableBidiMap.unmodifiableBidiMap(BidiMap)"], "associated_methods": ["UnmodifiableBidiMapTest.makeObject()", "UnmodifiableBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["BidiMap", "Unmodifiable", "UnmodifiableBidiMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of UnmodifiableBidiMap, ensuring it implements the Unmodifiable interface."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "testclass_name": "MultiKeyMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMapTest", "description": "Unit tests for the MultiKeyMap class, which handles maps with MultiKey keys.", "class_members": {"variables": [{"name": "I1", "type": "static final Integer"}, {"name": "I2", "type": "static final Integer"}, {"name": "I3", "type": "static final Integer"}, {"name": "I4", "type": "static final Integer"}, {"name": "I5", "type": "static final Integer"}, {"name": "I6", "type": "static final Integer"}, {"name": "I7", "type": "static final Integer"}, {"name": "I8", "type": "static final Integer"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getMap", "signature": "MultiKeyMap<K, V> getMap()"}, {"name": "getMultiKeyKeys", "signature": "@SuppressWarnings(\"unchecked\") private MultiKey<K>[] getMultiKeyKeys()"}, {"name": "getNewSampleValues", "signature": "@SuppressWarnings(\"unchecked\") public V[] getNewSampleValues()"}, {"name": "getOtherKeys", "signature": "@SuppressWarnings(\"unchecked\") public MultiKey<K>[] getOtherKeys()"}, {"name": "getSampleKeys", "signature": "public MultiKey<K>[] getSampleKeys()"}, {"name": "getSampleValues", "signature": "@SuppressWarnings(\"unchecked\") public V[] getSampleValues()"}, {"name": "isAllowNullKey", "signature": "public boolean isAllowNullKey()"}, {"name": "makeObject", "signature": "public MultiKeyMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}]}, "category": "unit", "description": "Tests the cloning functionality of the MultiKeyMap."}, {"name": "testLRUMultiKeyMap", "primary_tested": ["MultiKeyMap.multiKeyMap(LRUMap)", "MultiKeyMap.put(K, K, V)", "MultiKeyMap.containsKey(K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "LRUMap", "MultiKey"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}, {"name": "I4", "type": "variable"}, {"name": "I5", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of MultiKeyMap with an LRUMap as the underlying map."}, {"name": "testMultiKeyContainsKey", "primary_tested": ["MultiKeyMap.containsKey(K, K)", "MultiKeyMap.containsKey(K, K, K)", "MultiKeyMap.containsKey(K, K, K, K)", "MultiKeyMap.containsKey(K, K, K, K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}]}, "category": "unit", "description": "Tests the containsKey functionality of the MultiKeyMap for keys of different sizes."}, {"name": "testMultiKeyGet", "primary_tested": ["MultiKeyMap.get(K, K)", "MultiKeyMap.get(K, K, K)", "MultiKeyMap.get(K, K, K, K)", "MultiKeyMap.get(K, K, K, K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the get functionality of the MultiKeyMap for keys of different sizes."}, {"name": "testMultiKeyPut", "primary_tested": ["MultiKeyMap.put(K, K, V)", "MultiKeyMap.put(K, K, K, V)", "MultiKeyMap.put(K, K, K, K, V)", "MultiKeyMap.put(K, K, K, K, K, V)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap for keys of different sizes."}, {"name": "testMultiKeyPutWithNullKey", "primary_tested": ["MultiKeyMap.put(K, K, V)"], "external_dependencies": {"modules": ["MultiKeyMap"]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap with null keys."}, {"name": "testMultiKeyRemove", "primary_tested": ["MultiKeyMap.removeMultiKey(K, K)", "MultiKeyMap.removeMultiKey(K, K, K)", "MultiKeyMap.removeMultiKey(K, K, K, K)", "MultiKeyMap.removeMultiKey(K, K, K, K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "getMultiKeyKeys", "type": "method"}, {"name": "getSampleValues", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of the MultiKeyMap for keys of different sizes."}, {"name": "testMultiKeyRemoveAll1", "primary_tested": ["MultiKeyMap.removeAll(K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap for a single key."}, {"name": "testMultiKeyRemoveAll2", "primary_tested": ["MultiKeyMap.removeAll(K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap for two keys."}, {"name": "testMultiKeyRemoveAll3", "primary_tested": ["MultiKeyMap.removeAll(K, K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap for three keys."}, {"name": "testMultiKeyRemoveAll4", "primary_tested": ["MultiKeyMap.removeAll(K, K, K, K)"], "external_dependencies": {"modules": ["MultiKeyMap", "MapIterator"], "class_members": [{"name": "I1", "type": "variable"}, {"name": "I2", "type": "variable"}, {"name": "I3", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality of the MultiKeyMap for four keys."}, {"name": "testNullHandling", "primary_tested": ["MultiKeyMap.get(K)", "MultiKeyMap.containsKey(K)", "MultiKeyMap.containsValue(V)", "MultiKeyMap.remove(K)", "MultiKeyMap.put(K, V)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"]}, "category": "unit", "description": "Tests the handling of null values and keys in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java", "testclass_name": "TransformedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedSetTest", "description": "Tests for TransformedSortedSet functionality.", "class_members": {"variables": [], "methods": [{"name": "makeFullCollection", "signature": "SortedSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedSortedSet.transformingSortedSet(SortedSet<E>,Transformer<E,E>)"], "associated_methods": ["SortedSet.add(E)", "SortedSet.contains(Object)", "SortedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSortedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of TransformedSortedSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["Set.contains(Object)", "Set.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "Transformer", "TransformedCollectionTest", "TreeSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of TransformedSet by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java", "testclass_name": "UnmodifiableSortedBidiMapTest", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.SortedBidiMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedBidiMapTest", "description": "Tests for the UnmodifiableSortedBidiMap class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"methods": [{"name": "ignoredTests", "signature": "String[] ignoredTests()"}, {"name": "isAllowNullKey", "signature": "boolean isAllowNullKey()"}, {"name": "isAllowNullValue", "signature": "boolean isAllowNullValue()"}, {"name": "isPutAddSupported", "signature": "boolean isPutAddSupported()"}, {"name": "isPutChangeSupported", "signature": "boolean isPutChangeSupported()"}, {"name": "isRemoveSupported", "signature": "boolean isRemoveSupported()"}, {"name": "isSubMapViewsSerializable", "signature": "boolean isSubMapViewsSerializable()"}, {"name": "makeConfirmedMap", "signature": "SortedMap<K, V> makeConfirmedMap()"}, {"name": "makeFullMap", "signature": "SortedBidiMap<K, V> makeFullMap()"}, {"name": "makeObject", "signature": "SortedBidiMap<K, V> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(SortedBidiMap<K, V>)"], "associated_methods": ["UnmodifiableSortedBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableSortedBidiMap", "SortedBidiMap", "NullPointerException"], "class_members": [{"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests the factory method for creating an unmodifiable sorted bidi map and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(SortedBidiMap<K, V>)"], "associated_methods": ["UnmodifiableSortedBidiMapTest.makeObject()", "UnmodifiableSortedBidiMapTest.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableSortedBidiMap", "Unmodifiable", "SortedBidiMap"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "makeFullMap", "type": "method"}]}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "testclass_name": "SkippingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SkippingIteratorTest", "description": "Unit tests for the SkippingIterator class, which skips a specified number of elements in an iterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNegativeOffset", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if a negative offset is passed to the constructor. Expected IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if the offset passed to the constructor is greater than the decorated iterator's size. The SkippingIterator should behave as if there are no more elements to return."}, {"name": "testRemoveCalledTwice", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove() method being called twice without calling next() in between. Expected IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator. Verifies that the element is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the case if the decorated iterator does not support the remove() method and throws an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["SkippingIterator.remove()"], "external_dependencies": {"modules": ["SkippingIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove() method being called without next() being called first. Expected IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a decorated iterator bounded such that the offset is zero, in that the SkippingIterator should return all the same elements as its decorated iterator."}, {"name": "testSkipping", "primary_tested": ["SkippingIterator.<init>(Iterator<E>,int)"], "external_dependencies": {"modules": ["SkippingIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests a decorated iterator bounded such that the first element returned is at an index greater than its first element, and the last element returned is at an index less than its last element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java", "testclass_name": "UnmodifiableSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableSortedSetTest", "description": "Tests for the UnmodifiableSortedSet class, focusing on its unmodifiable nature and comparator functionality.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableSortedSet<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupSet", "signature": "void setupSet()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(Set<E> set)"}]}, "test_cases": [{"name": "testComparator", "primary_tested": ["UnmodifiableSortedSet.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["Comparator"], "class_members": [{"name": "set", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the comparator method of UnmodifiableSortedSet, expecting it to be null for natural order."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableSortedSet.unmodifiableSortedSet(SortedSet<E>)"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableSortedSet", "SortedSet", "NullPointerException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating UnmodifiableSortedSet, ensuring it returns the same instance and handles null input correctly."}, {"name": "testUnmodifiable", "primary_tested": [], "associated_methods": ["UnmodifiableSortedSet.headSet(E)", "UnmodifiableSortedSet.tailSet(E)", "UnmodifiableSortedSet.subSet(E,E)"], "external_dependencies": {"modules": ["Set", "UnsupportedOperationException"], "class_members": [{"name": "set", "type": "variable"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiable nature of UnmodifiableSortedSet and its subsets, ensuring all modification operations throw UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java", "testclass_name": "Collections701Test", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "Collections701Test", "description": "Unit tests for verifying the behavior of ArrayList, HashSet, and SetUniqueList in the context of adding self-references.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testArrayList", "primary_tested": ["ArrayList.add(Object)", "ArrayList.size()", "ArrayList.get(int)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.List"]}, "category": "unit", "description": "Tests the behavior of ArrayList when adding a self-reference and verifying the size and content."}, {"name": "testHashSet", "primary_tested": ["HashSet.add(Object)", "HashSet.size()", "HashSet.iterator()"], "external_dependencies": {"modules": ["java.util.HashSet", "java.util.Set"]}, "category": "unit", "description": "Tests the behavior of HashSet when adding a self-reference and verifying the size and content."}, {"name": "testSetUniqueList", "primary_tested": ["SetUniqueList.setUniqueList(List)", "SetUniqueList.add(Object)", "SetUniqueList.size()", "SetUniqueList.get(int)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.List", "org.apache.commons.collections4.list.SetUniqueList"]}, "category": "unit", "description": "Tests the behavior of SetUniqueList when adding a self-reference and verifying the size and content."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "testclass_name": "DualTreeBidiMap2Test", "dependencies": ["package org.apache.commons.collections4.bidimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import java.util.TreeMap;", "import org.apache.commons.collections4.SortedBidiMap;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.apache.commons.collections4.comparators.ReverseComparator;", "import org.junit.jupiter.api.Test;"], "name": "DualTreeBidiMap2Test", "description": "Unit tests for DualTreeBidiMap2, focusing on serialization, comparator checks, and sort order.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "IntegerComparator", "description": "Internal comparator class for Integer objects"}]}, "fixtures": [], "test_cases": [{"name": "testCollections364", "primary_tested": ["DualTreeBidiMap.comparator()"], "associated_methods": ["DualTreeBidiMap.valueComparator()"], "external_dependencies": {"modules": ["DualTreeBidiMap", "ByteArrayOutputStream", "ObjectOutputStream", "ObjectInputStream", "ByteArrayInputStream", "IntegerComparator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of DualTreeBidiMap with custom comparators."}, {"name": "testComparator", "primary_tested": ["SortedBidiMap.comparator()"], "external_dependencies": {"modules": ["SortedBidiMap", "ReverseComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the comparator of the SortedBidiMap, ensuring it is an instance of ReverseComparator."}, {"name": "testComparator2", "primary_tested": ["DualTreeBidiMap.firstKey()", "DualTreeBidiMap.lastKey()"], "external_dependencies": {"modules": ["DualTreeBidiMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the key order in DualTreeBidiMap with a case-insensitive comparator."}, {"name": "testSerializeDeserializeCheckComparator", "primary_tested": ["SortedBidiMap.comparator()"], "external_dependencies": {"modules": ["SortedBidiMap", "ByteArrayOutputStream", "ObjectOutputStream", "ObjectInputStream", "ByteArrayInputStream", "ReverseComparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of SortedBidiMap, ensuring the comparator is preserved."}, {"name": "testSortOrder", "primary_tested": ["SortedBidiMap.keySet()"], "associated_methods": ["Collections.sort(List,Comparator)"], "external_dependencies": {"modules": ["SortedBidiMap", "ReverseComparator", "ComparableComparator", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the sort order of keys in SortedBidiMap, ensuring they match the expected reverse order."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java", "testclass_name": "TransformedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSetTest", "description": "Unit tests for TransformedSet functionality.", "class_members": {"variables": [], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeConfirmedCollection", "signature": "Set<E> makeConfirmedCollection()"}, {"name": "makeConfirmedFullCollection", "signature": "Set<E> makeConfirmedFullCollection()"}, {"name": "makeFullCollection", "signature": "Set<E> makeFullCollection()"}, {"name": "makeObject", "signature": "Set<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSet", "primary_tested": ["TransformedSet.transformingSet(Set<E>,Transformer<E,E>)"], "associated_methods": ["TransformedSet.add(E)", "TransformedSet.contains(Object)", "TransformedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TransformedCollectionTest", "Transformer", "HashSet", "Arrays", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming functionality of TransformedSet by adding elements and checking their transformed state."}, {"name": "testTransformedSet_decorateTransform", "primary_tested": ["TransformedSet.transformedSet(Set<Object>,Transformer<Object,Object>)"], "associated_methods": ["TransformedSet.contains(Object)", "TransformedSet.remove(Object)"], "external_dependencies": {"modules": ["TransformedSet", "TransformedCollectionTest", "Transformer", "HashSet", "Collections", "Integer"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSet method by adding elements and checking their transformed state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "testclass_name": "PermutationIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PermutationIteratorTest", "description": "Unit tests for the PermutationIterator class, which generates permutations of a given list.", "class_members": {"variables": [{"name": "testArray", "type": "Character[]"}, {"name": "testList", "type": "List<Character>"}], "methods": [{"name": "makeEmptyIterator", "signature": "PermutationIterator<Character> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PermutationIterator<Character> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}, {"name": "supportsEmptyIterator", "signature": "boolean supportsEmptyIterator()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmptyCollection", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "List"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the PermutationIterator with an empty collection."}, {"name": "testPermutationException", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that an exception is thrown when trying to get a permutation after all have been returned."}, {"name": "testPermutationExhaustivity", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all permutations of a given list are generated."}, {"name": "testPermutationResultSize", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator", "List"]}, "category": "unit", "fixtures_used": [], "description": "Tests the size of the permutation results for different list sizes."}, {"name": "testPermutationUnicity", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "List", "Set"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all permutations are unique."}, {"name": "testPermutatorHasMore", "primary_tested": ["PermutationIterator.hasNext()"], "associated_methods": ["PermutationIterator.next()"], "external_dependencies": {"modules": ["PermutationIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method of the PermutationIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java", "testclass_name": "UnmodifiableNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableNavigableSetTest", "description": "Tests for the UnmodifiableNavigableSet class, focusing on its unmodifiable nature and comparator functionality.", "class_members": {"variables": [{"name": "set", "type": "UnmodifiableNavigableSet<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupSet", "signature": "void setupSet()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(Set<E>)"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["UnmodifiableNavigableSet.comparator()"], "associated_methods": [], "external_dependencies": {"modules": ["Comparator"], "class_members": [{"name": "set", "type": "variable"}, {"name": "setupSet", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the comparator of the UnmodifiableNavigableSet is null, indicating natural order."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableNavigableSet.unmodifiableNavigableSet(NavigableSet<E>)"], "associated_methods": [], "external_dependencies": {"modules": ["NavigableSet", "NullPointerException"], "class_members": [{"name": "makeFullCollection", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable navigable set and ensures it throws a NullPointerException for null input."}, {"name": "testUnmodifiable", "primary_tested": [], "associated_methods": ["UnmodifiableNavigableSet.descendingSet()", "UnmodifiableNavigableSet.headSet(E)", "UnmodifiableNavigableSet.headSet(E,boolean)", "UnmodifiableNavigableSet.tailSet(E)", "UnmodifiableNavigableSet.tailSet(E,boolean)", "UnmodifiableNavigableSet.subSet(E,E)", "UnmodifiableNavigableSet.subSet(E,boolean,E,boolean)"], "external_dependencies": {"modules": ["NavigableSet", "UnsupportedOperationException"], "class_members": [{"name": "set", "type": "variable"}, {"name": "setupSet", "type": "method"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the base set and its subsets are unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "testclass_name": "PredicatedNavigableSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.NavigableSet;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedNavigableSetTest", "description": "Tests for the PredicatedNavigableSet class, focusing on predicate validation and set operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "makeFullCollection", "signature": "NavigableSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "NavigableSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "PredicatedNavigableSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testComparator", "primary_tested": ["NavigableSet.comparator()"], "external_dependencies": {"modules": ["NavigableSet", "Comparator"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that the comparator of the NavigableSet is null, indicating natural order."}, {"name": "testGetSet", "primary_tested": ["PredicatedNavigableSet.decorated()"], "external_dependencies": {"modules": ["PredicatedNavigableSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated set returned by PredicatedNavigableSet is not null."}, {"name": "testIllegalAdd", "primary_tested": ["NavigableSet.add(E)"], "external_dependencies": {"modules": ["NavigableSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element to the NavigableSet throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["NavigableSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["NavigableSet", "IllegalArgumentException", "Set"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with illegal elements to the NavigableSet throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "testclass_name": "PredicateUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.functors.AbstractPredicateTest;", "import org.apache.commons.collections4.functors.AllPredicate;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionPredicate;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.collections4.functors.NullPredicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "testclass_name": "PeekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIteratorTest", "description": "Unit tests for the PeekingIterator class, which provides a peeking functionality for iterators.", "class_members": {"variables": [{"name": "testArray", "type": "final String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "PeekingIterator<E> makeObject()"}, {"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}, {"name": "validate", "signature": "void validate(Iterator<E> iter, E... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEmpty", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "Collections"], "class_members": [{"name": "makeEmptyIterator", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of an empty iterator."}, {"name": "testIllegalRemove", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.next()", "PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "IllegalStateException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the remove method when it is called illegally."}, {"name": "testIteratorExhausted", "primary_tested": ["PeekingIterator.hasNext()", "PeekingIterator.peek()", "PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "NoSuchElementException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the iterator when it is exhausted."}, {"name": "testMultiplePeek", "primary_tested": ["PeekingIterator.peek()", "PeekingIterator.next()", "PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peeking functionality of the iterator multiple times."}, {"name": "testSinglePeek", "primary_tested": ["PeekingIterator.peek()", "PeekingIterator.element()"], "associated_methods": ["PeekingIteratorTest.validate(Iterator<E>, E...)"], "external_dependencies": {"modules": ["PeekingIterator"], "class_members": [{"name": "makeObject", "type": "method"}, {"name": "validate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peeking functionality of the iterator a single time."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java", "testclass_name": "NodeCachingLinkedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import java.util.Arrays;", "import java.util.LinkedList;", "import org.junit.jupiter.api.Test;"], "name": "NodeCachingLinkedListTest", "description": "Test class for NodeCachingLinkedList, focusing on performance comparison and cache management.", "class_members": {"variables": [{"name": "ncll", "type": "NodeCachingLinkedList<Object>"}, {"name": "ll", "type": "LinkedList<Object>"}, {"name": "o1", "type": "Object"}, {"name": "o2", "type": "Object"}, {"name": "loopCount", "type": "int"}], "methods": [{"name": "compareSpeed", "signature": "void compareSpeed()"}, {"name": "getCollection", "signature": "NodeCachingLinkedList<E> getCollection()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "NodeCachingLinkedList<E> makeObject()"}]}, "fixtures": [], "test_cases": [{"name": "testShrinkCache", "primary_tested": ["NodeCachingLinkedList.removeAllNodes()", "NodeCachingLinkedList.setMaximumCacheSize(int)", "NodeCachingLinkedList.addAll(Collection<? extends E>)", "NodeCachingLinkedList.removeNode(Node<E>)", "NodeCachingLinkedList.getNode(int,boolean)"], "associated_methods": ["NodeCachingLinkedList.checkNodes()"], "external_dependencies": {"modules": ["NodeCachingLinkedList", "Arrays", "String"], "class_members": [{"name": "list", "type": "variable"}], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the cache shrinking functionality of NodeCachingLinkedList by adding and removing elements, then adjusting the cache size and verifying the behavior."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "testclass_name": "PredicatedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSetTest", "description": "Unit tests for PredicatedSet functionality, focusing on predicate-based validation and set operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateSet", "signature": "protected PredicatedSet<E> decorateSet(Set<E> set, Predicate<? super E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "public String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "public E[] getFullElements()"}, {"name": "getIterationBehaviour", "signature": "protected int getIterationBehaviour()"}, {"name": "makeObject", "signature": "public PredicatedSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "protected PredicatedSet<E> makeTestSet()"}]}, "fixtures": [], "test_cases": [{"name": "testGetSet", "primary_tested": ["PredicatedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that the decorated set returned by PredicatedSet is not null."}, {"name": "testIllegalAdd", "primary_tested": ["Set.add(E)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the set throws an IllegalArgumentException and the element is not contained in the set."}, {"name": "testIllegalAddAll", "primary_tested": ["Set.addAll(Collection<? extends E>)"], "associated_methods": ["Set.contains(Object)"], "external_dependencies": {"modules": ["Set", "HashSet", "Integer"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection with an illegal element (non-string) to the set throws an IllegalArgumentException and none of the elements are contained in the set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "testclass_name": "ZippingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIteratorTest", "description": "Unit tests for the ZippingIterator class, which combines multiple iterators into a single iterator.", "class_members": {"variables": [{"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ZippingIterator<Integer> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ZippingIterator<Integer> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIterateEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a single list of even numbers using ZippingIterator."}, {"name": "testIterateEvenEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over two lists of even numbers using ZippingIterator."}, {"name": "testIterateEvenOdd", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of even numbers and a list of odd numbers using ZippingIterator."}, {"name": "testIterateFibEvenOdd", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "fib", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of Fibonacci numbers, a list of even numbers, and a list of odd numbers using ZippingIterator."}, {"name": "testIterateOddEven", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "odds", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of odd numbers and a list of even numbers using ZippingIterator."}, {"name": "testRemoveFromDouble", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()", "ZippingIterator.remove()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a ZippingIterator that combines two lists."}, {"name": "testRemoveFromSingle", "primary_tested": ["ZippingIterator.hasNext()", "ZippingIterator.next()", "ZippingIterator.remove()"], "external_dependencies": {"modules": ["ZippingIterator", "ArrayList"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a ZippingIterator that combines a single list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "testclass_name": "PredicatedSortedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Set;", "import java.util.SortedSet;", "import java.util.TreeSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedSortedSetTest", "description": "Unit tests for PredicatedSortedSet functionality, focusing on predicate validation and set operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "makeFullCollection", "signature": "SortedSet<E> makeFullCollection()"}, {"name": "makeObject", "signature": "SortedSet<E> makeObject()"}, {"name": "makeTestSet", "signature": "PredicatedSortedSet<E> makeTestSet()"}]}, "test_cases": [{"name": "testComparator", "primary_tested": ["SortedSet.comparator()"], "external_dependencies": {"modules": ["SortedSet", "Comparator"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the comparator method of the SortedSet, expecting a null comparator for natural order."}, {"name": "testGetSet", "primary_tested": ["PredicatedSortedSet.decorated()"], "external_dependencies": {"modules": ["PredicatedSortedSet"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the decorated method of PredicatedSortedSet, ensuring it returns a non-null set."}, {"name": "testIllegalAdd", "primary_tested": ["SortedSet.add(E)"], "external_dependencies": {"modules": ["SortedSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the add method of SortedSet, expecting an IllegalArgumentException for an invalid element."}, {"name": "testIllegalAddAll", "primary_tested": ["SortedSet.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["SortedSet", "IllegalArgumentException"], "class_members": [{"name": "makeTestSet", "type": "method"}]}, "category": "unit", "description": "Tests the addAll method of SortedSet, expecting an IllegalArgumentException for invalid elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayTrackerTest.java", "testclass_name": "ArrayTrackerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;"], "name": "ArrayTrackerTest", "description": "Unit tests for the ArrayTracker class in the Bloom filter implementation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSeen", "primary_tested": ["IndexFilter.ArrayTracker.test(int)"], "associated_methods": [], "external_dependencies": {"modules": ["Shape", "IndexFilter", "IntPredicate", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of the ArrayTracker's seen method, ensuring it correctly tracks seen indices and throws exceptions for out-of-bounds indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapTrackerTest.java", "testclass_name": "BitMapTrackerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;"], "name": "BitMapTrackerTest", "description": "Unit tests for the BitMapTracker functionality in the Bloom filter implementation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSeen", "primary_tested": ["IndexFilter.BitMapTracker.test(int)"], "external_dependencies": {"modules": ["Shape", "IndexFilter", "IntPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the 'seen' functionality of the BitMapTracker, ensuring that it correctly tracks and reports seen indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "testclass_name": "LRUMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;"], "name": "LRUMapTest", "description": "Unit tests for the LRUMap class, focusing on its LRU (Least Recently Used) eviction policy and internal state management.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "MockLRUMapSubclass", "description": "A subclass of LRUMap that overrides the removeLRU method to capture the removed entry details."}, {"name": "MockLRUMapSubclassBlocksRemove", "description": "A subclass of LRUMap that always returns false from the removeLRU method, blocking the removal of LRU entries."}, {"name": "MockLRUMapSubclassFirstBlocksRemove", "description": "A subclass of LRUMap that blocks the removal of the first entry if its value is 'a'."}, {"name": "SingleHashCode", "description": "A helper class that always returns the same hash code, used to test hash collisions in LRUMap."}]}, "fixtures": [], "test_cases": [{"name": "testAccessOrder", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap, ensuring that the order of elements changes based on access and insertion."}, {"name": "testAccessOrder2", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K,boolean)"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the access order of the LRUMap with a boolean parameter in the get method, ensuring that the order of elements changes based on access and insertion."}, {"name": "testClone", "primary_tested": ["LRUMap.clone()"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the LRUMap, ensuring that the cloned map is a deep copy with the same elements."}, {"name": "testCtors", "primary_tested": ["LRUMap.LRUMap(int)", "LRUMap.LRUMap(int,int,float,boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "IllegalArgumentException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of the LRUMap, ensuring that they throw exceptions for invalid parameters."}, {"name": "testInternalState_Buckets", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.get(K)"], "associated_methods": ["LRUMap.hashIndex(int,int)", "LRUMap.hash(Object)"], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the internal state of the LRUMap, ensuring that the buckets and linked list are correctly managed."}, {"name": "testInternalState_getEntry_int", "primary_tested": ["LRUMap.getEntry(int)"], "associated_methods": [], "external_dependencies": {"modules": ["LRUMap", "SingleHashCode", "IndexOutOfBoundsException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getEntry method of the LRUMap, ensuring that it returns the correct entry and handles out-of-bounds indices."}, {"name": "testLRU", "primary_tested": ["LRUMap.put(K,V)", "LRUMap.isFull()", "LRUMap.maxSize()"], "associated_methods": ["LRUMap.keySet().iterator()", "LRUMap.values().iterator()"], "external_dependencies": {"modules": ["LRUMap", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the LRU eviction policy of the LRUMap, ensuring that the least recently used entries are evicted when the map is full."}, {"name": "testRemoveLRU", "primary_tested": ["MockLRUMapSubclass.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclass.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclass", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclass, ensuring that it captures the removed entry details."}, {"name": "testRemoveLRUBlocksRemove", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclassBlocksRemove, ensuring that it blocks the removal of LRU entries."}, {"name": "testRemoveLRUBlocksRemoveScan", "primary_tested": ["MockLRUMapSubclassBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassBlocksRemove.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclassBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclassBlocksRemove with scanning enabled, ensuring that it blocks the removal of LRU entries."}, {"name": "testRemoveLRUFirstBlocksRemove", "primary_tested": ["MockLRUMapSubclassFirstBlocksRemove.removeLRU(LinkEntry<K,V>)"], "associated_methods": ["MockLRUMapSubclassFirstBlocksRemove.put(K,V)"], "external_dependencies": {"modules": ["MockLRUMapSubclassFirstBlocksRemove", "LinkEntry"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the custom removeLRU method in MockLRUMapSubclassFirstBlocksRemove, ensuring that it blocks the removal of the first entry if its value is 'a'."}, {"name": "testReset", "primary_tested": ["ResettableIterator.reset()"], "associated_methods": ["OrderedMap.mapIterator()"], "external_dependencies": {"modules": ["ResettableIterator", "OrderedMap", "ArrayList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the reset functionality of the ResettableIterator, ensuring that it resets to the beginning of the iteration."}, {"name": "testSynchronizedRemoveFromEntrySet", "primary_tested": ["LRUMap.entrySet().removeIf(Predicate<Map.Entry<K,V>>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the entry set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromKeySet", "primary_tested": ["LRUMap.keySet().iterator().remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the key set in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromMapIterator", "primary_tested": ["MapIterator.remove()"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "MapIterator", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries using a map iterator in a multi-threaded environment, ensuring thread safety."}, {"name": "testSynchronizedRemoveFromValues", "primary_tested": ["LRUMap.values().removeIf(Predicate<V>)"], "associated_methods": ["LRUMap.put(K,V)"], "external_dependencies": {"modules": ["LRUMap", "Map", "Thread", "ThreadGroup", "HashMap"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the synchronized removal of entries from the values collection in a multi-threaded environment, ensuring thread safety."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorFromBitmapExtractorTest.java", "testclass_name": "IndexExtractorFromBitmapExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "IndexExtractorFromBitmapExtractorTest", "description": "Tests for the IndexExtractor created from a BitMapExtractor.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestingBitMapExtractor", "description": "Internal class implementing BitMapExtractor for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["IndexExtractor.processIndices(IntConsumer)", "TestingBitMapExtractor.processBitMaps(LongPredicate)"], "external_dependencies": {"modules": ["IndexExtractor", "BitMapExtractor", "LongPredicate", "ArrayList", "List", "Integer"], "class_members": [{"name": "TestingBitMapExtractor", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of creating an IndexExtractor from a BitMapExtractor and processing indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasherTest.java", "testclass_name": "EnhancedDoubleHasherTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.Test;"], "name": "EnhancedDoubleHasherTest", "description": "Unit tests for the EnhancedDoubleHasher class, focusing on its constructor and methods.", "class_members": {"variables": [{"name": "expected", "type": "int[]"}], "methods": [{"name": "createEmptyHasher", "signature": "Hasher createEmptyHasher()"}, {"name": "createHasher", "signature": "Hasher createHasher()"}, {"name": "getAsIndexArrayBehaviour", "signature": "int getAsIndexArrayBehaviour()"}, {"name": "getExpectedIndices", "signature": "int[] getExpectedIndices()"}, {"name": "getHasherSize", "signature": "int getHasherSize(Hasher)"}]}, "fixtures": [], "test_cases": [{"name": "testByteConstructor", "primary_tested": ["EnhancedDoubleHasher.EnhancedDoubleHasher(byte[])", "EnhancedDoubleHasher.getInitial()", "EnhancedDoubleHasher.getIncrement()"], "associated_methods": [], "external_dependencies": {"modules": ["EnhancedDoubleHasher", "IllegalArgumentException"], "class_members": [{"name": "expected", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the constructor of EnhancedDoubleHasher with various byte arrays to ensure correct parsing of initial and increment values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java", "testclass_name": "ListOrderedSet2Test", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSet2Test", "description": "Unit tests for ListOrderedSet operations like adding, removing, and maintaining order.", "class_members": {"variables": [{"name": "ZERO", "type": "static final Integer"}, {"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "THREE", "type": "static final Integer"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "ListOrderedSet<E> makeObject()"}, {"name": "setupSet", "signature": "ListOrderedSet<E> setupSet()"}]}, "test_cases": [{"name": "testListAddIndexed", "primary_tested": ["ListOrderedSet.add(int,E)", "ListOrderedSet.addAll(int,Collection<? extends E>)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "Integer"], "class_members": [{"name": "ZERO", "type": "variable"}, {"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}]}, "category": "unit", "description": "Tests the indexed add and addAll functionalities of ListOrderedSet."}, {"name": "testListAddRemove", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.remove(int)"], "associated_methods": ["ListOrderedSet.size()", "ListOrderedSet.get(int)", "ListOrderedSet.asList()", "ListOrderedSet.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedSet", "Integer"], "class_members": [{"name": "ZERO", "type": "variable"}, {"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the add and remove functionalities of ListOrderedSet."}, {"name": "testOrdering", "primary_tested": ["ListOrderedSet.iterator()", "ListOrderedSet.remove(Object)", "ListOrderedSet.add(E)"], "associated_methods": ["ListOrderedSet.size()"], "external_dependencies": {"modules": ["ListOrderedSet", "Iterator", "Integer"], "class_members": [{"name": "setupSet", "type": "method"}]}, "category": "unit", "description": "Tests the ordering and removal functionalities of ListOrderedSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilterTest.java", "testclass_name": "SimpleBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "SimpleBloomFilterTest", "description": "Unit tests for the SimpleBloomFilter class, focusing on the merge functionality with a short BitMapExtractor.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "SimpleBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testMergeShortBitMapExtractor", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)"], "associated_methods": ["SimpleBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SimpleBloomFilter", "BitMapExtractor", "Shape"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the merge functionality of the SimpleBloomFilter with a BitMapExtractor that returns too few values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromIndexExtractorTest.java", "testclass_name": "BitMapExtractorFromIndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BitMapExtractorFromIndexExtractorTest", "description": "Tests for BitMapExtractor created from an IndexExtractor.", "class_members": {"methods": [{"name": "createEmptyExtractor", "signature": "BitMapExtractor createEmptyExtractor()"}, {"name": "createExtractor", "signature": "BitMapExtractor createExtractor()"}]}, "fixtures": [], "test_cases": [{"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor,int)"], "associated_methods": ["BitMapExtractor.processBitMaps(Consumer<Long>)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "BitMaps", "ArrayList", "List", "Long"], "class_members": [{"name": "createExtractor", "type": "method"}], "project_specific_resources": ["BitMaps.contains(long[],int)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of BitMapExtractor from an IndexExtractor and verifies the resulting bitmaps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/WrappedBloomFilterTest.java", "testclass_name": "WrappedBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "WrappedBloomFilterTest", "description": "Tests for the WrappedBloomFilter class, focusing on its characteristics.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "WrappedBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testCharacteristics", "primary_tested": ["WrappedBloomFilter.characteristics()"], "associated_methods": ["DefaultBloomFilterTest.SparseDefaultBloomFilter.characteristics()"], "external_dependencies": {"modules": ["WrappedBloomFilter", "DefaultBloomFilterTest.SparseDefaultBloomFilter", "Shape", "BloomFilter"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the characteristics method of the WrappedBloomFilter class by comparing it with the characteristics of an inner BloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "testclass_name": "LoopingListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIteratorTest", "description": "Unit tests for the LoopingListIterator class, which tests various functionalities such as adding, removing, iterating, and resetting elements in a looping list iterator.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["LoopingListIterator.add(String)"], "associated_methods": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the add method of LoopingListIterator by adding elements and verifying the order after each addition."}, {"name": "testConstructorEx", "primary_tested": ["LoopingListIterator.<init>(List)"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the constructor of LoopingListIterator to ensure it throws a NullPointerException when given a null list."}, {"name": "testJoggingNotOverBoundary", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests jogging back and forth between two elements without crossing the boundary of the list."}, {"name": "testJoggingOverBoundary", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests jogging back and forth between two elements while crossing the boundary of the list."}, {"name": "testLooping0", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["ArrayList", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests whether an empty looping list iterator works by checking hasNext, hasPrevious, and ensuring NoSuchElementException is thrown."}, {"name": "testLooping1", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests whether a looping list iterator works on a list with only one element by checking hasNext, next, hasPrevious, and previous."}, {"name": "testLooping2", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.reset()", "LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests whether a looping list iterator works on a list with two elements by checking hasNext, next, reset, hasPrevious, and previous."}, {"name": "testNextAndPreviousIndex", "primary_tested": ["LoopingListIterator.nextIndex()", "LoopingListIterator.previousIndex()", "LoopingListIterator.next()", "LoopingListIterator.previous()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests nextIndex and previousIndex methods of LoopingListIterator by iterating through the list and checking the indices."}, {"name": "testRemovingElementsAndIteratingBackwards", "primary_tested": ["LoopingListIterator.hasPrevious()", "LoopingListIterator.previous()", "LoopingListIterator.remove()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests removing elements from a wrapped ArrayList and iterating backwards, ensuring NoSuchElementException is thrown when the list is empty."}, {"name": "testRemovingElementsAndIteratingForward", "primary_tested": ["LoopingListIterator.hasNext()", "LoopingListIterator.next()", "LoopingListIterator.remove()"], "external_dependencies": {"modules": ["ArrayList", "Arrays", "LoopingListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests removing elements from a wrapped ArrayList and iterating forward, ensuring NoSuchElementException is thrown when the list is empty."}, {"name": "testReset", "primary_tested": ["LoopingListIterator.next()", "LoopingListIterator.previous()", "LoopingListIterator.reset()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests the reset method of LoopingListIterator by iterating through the list, resetting, and verifying the iterator's position."}, {"name": "testSet", "primary_tested": ["LoopingListIterator.previous()", "LoopingListIterator.set(String)", "LoopingListIterator.reset()", "LoopingListIterator.next()"], "external_dependencies": {"modules": ["Arrays", "LoopingListIterator"], "class_members": []}, "category": "unit", "description": "Tests using the set method to change elements in a LoopingListIterator and verifying the changes."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "testclass_name": "FixedSizeListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "FixedSizeListTest", "description": "Unit tests for FixedSizeList functionality.", "class_members": {"variables": [], "methods": [{"name": "initFixedSizeList", "signature": "FixedSizeList<String> initFixedSizeList()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["FixedSizeList.add(int,String)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that adding an element to a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testAddAll", "primary_tested": ["FixedSizeList.addAll(int,List<String>)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException", "ArrayList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection of elements to a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testIsFull", "primary_tested": ["FixedSizeList.isFull()"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that the FixedSizeList is full."}, {"name": "testListAllowsMutationOfUnderlyingCollection", "primary_tested": ["ArrayList.add(String)"], "associated_methods": ["FixedSizeList.size()"], "external_dependencies": {"modules": ["FixedSizeList", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests that the underlying list of a FixedSizeList can be mutated."}, {"name": "testMaxSize", "primary_tested": ["FixedSizeList.maxSize()"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests the max size of the FixedSizeList."}, {"name": "testRemove", "primary_tested": ["FixedSizeList.remove(int)"], "external_dependencies": {"modules": ["FixedSizeList", "UnsupportedOperationException"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests that removing an element from a FixedSizeList throws an UnsupportedOperationException."}, {"name": "testSubList", "primary_tested": ["FixedSizeList.subList(int,int)"], "external_dependencies": {"modules": ["FixedSizeList"], "class_members": [{"name": "initFixedSizeList", "type": "method"}]}, "category": "unit", "description": "Tests the subList functionality of the FixedSizeList."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "testclass_name": "FixedOrderComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Random;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.Nested;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparatorTest", "description": "Unit tests for the FixedOrderComparator class, focusing on its comparison and behavior with different configurations.", "class_members": {"variables": [{"name": "topCities", "type": "static final String[]"}], "methods": [{"name": "assertComparatorYieldsOrder", "signature": "void assertComparatorYieldsOrder(String[], Comparator<String>)"}, {"name": "getComparableObjectsOrdered", "signature": "List<String> getComparableObjectsOrdered()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "Comparator<String> makeObject()"}], "nested_classes": [{"name": "Equals", "description": "Nested class containing tests for the equals method of FixedOrderComparator."}]}, "fixtures": [], "test_cases": [{"name": "expectFalseWhenBothComparatorsWithDifferentItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different items are not equal."}, {"name": "expectFalseWhenBothComparatorsWithDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different unknown object behaviors are not equal."}, {"name": "expectFalseWhenFixedOrderComparatorIsComparedWithNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is not equal to null."}, {"name": "expectFalseWhenFixedOrderComparatorIsComparedWithOtherObject", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is not equal to an arbitrary object."}, {"name": "expectFalseWhenOneComparatorIsLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators are not equal if one is locked."}, {"name": "expectFalseWhenOneComparatorsWithDuplicateItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators with different item counts are not equal."}, {"name": "expectTrueWhenBothComparatorsAreLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two locked FixedOrderComparators with the same items are equal."}, {"name": "expectTrueWhenBothComparatorsWithoutAnyItems", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "description": "Tests that two FixedOrderComparators without any items are equal."}, {"name": "expectTrueWhenBothObjectsAreSame", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that a FixedOrderComparator is equal to itself."}, {"name": "testAddAsEqual", "primary_tested": ["FixedOrderComparator.addAsEqual(Object,Object)"], "associated_methods": ["FixedOrderComparator.compare(Object,Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the addAsEqual method of FixedOrderComparator."}, {"name": "testArrayConstructor", "primary_tested": ["FixedOrderComparator.FixedOrderComparator(Object[])"], "associated_methods": ["FixedOrderComparator.compare(Object,Object)"], "external_dependencies": {"modules": ["FixedOrderComparator", "Arrays"], "class_members": [{"name": "topCities", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the array constructor of FixedOrderComparator."}, {"name": "testConstructorPlusAdd", "primary_tested": ["FixedOrderComparator.add(Object)"], "associated_methods": ["FixedOrderComparator.compare(Object,Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "topCities", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the constructor plus add method of FixedOrderComparator."}, {"name": "testListConstructor", "primary_tested": ["FixedOrderComparator.FixedOrderComparator(List)"], "associated_methods": ["FixedOrderComparator.compare(Object,Object)"], "external_dependencies": {"modules": ["FixedOrderComparator", "Arrays", "LinkedList"], "class_members": [{"name": "topCities", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the list constructor of FixedOrderComparator."}, {"name": "testLock", "primary_tested": ["FixedOrderComparator.isLocked()"], "associated_methods": ["FixedOrderComparator.compare(Object,Object)", "FixedOrderComparator.add(Object)", "FixedOrderComparator.addAsEqual(Object,Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests the locking behavior of FixedOrderComparator."}, {"name": "testUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)", "FixedOrderComparator.getUnknownObjectBehavior()"], "associated_methods": ["FixedOrderComparator.compare(Object,Object)"], "external_dependencies": {"modules": ["FixedOrderComparator", "Arrays", "LinkedList"], "class_members": [{"name": "topCities", "type": "variable"}, {"name": "assertComparatorYieldsOrder", "type": "method"}]}, "category": "unit", "description": "Tests the unknown object behavior of FixedOrderComparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java", "testclass_name": "UnmodifiableListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableListTest", "description": "Tests for the UnmodifiableList class, focusing on its unmodifiable nature and factory decoration.", "class_members": {"variables": [{"name": "list", "type": "UnmodifiableList<E>"}, {"name": "array", "type": "ArrayList<E>"}], "methods": [{"name": "setupList", "signature": "void setupList()"}, {"name": "verifyUnmodifiable", "signature": "void verifyUnmodifiable(List<E> list)"}]}, "test_cases": [{"name": "testDecorateFactory", "primary_tested": ["UnmodifiableList.unmodifiableList(List<E>)"], "external_dependencies": {"modules": ["UnmodifiableList", "NullPointerException"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the factory decoration method of UnmodifiableList and ensures it throws a NullPointerException when given null."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableList.subList(int,int)"], "associated_methods": ["UnmodifiableList.verifyUnmodifiable(List<E>)"], "external_dependencies": {"modules": ["UnmodifiableList"], "class_members": [{"name": "setupList", "type": "method"}, {"name": "verifyUnmodifiable", "type": "method"}]}, "category": "unit", "description": "Verifies that both the base list and its sublists are unmodifiable."}, {"name": "testUnmodifiableIterator", "primary_tested": ["UnmodifiableList.iterator()"], "external_dependencies": {"modules": ["UnmodifiableList", "UnsupportedOperationException"], "class_members": [{"name": "setupList", "type": "method"}]}, "category": "unit", "description": "Verifies that the iterator of the UnmodifiableList is unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java", "testclass_name": "SparseBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "SparseBloomFilterTest", "description": "Unit tests for the SparseBloomFilter class, focusing on edge cases for bit map extraction and Bloom filter-based merge operations.", "class_members": {"methods": [{"name": "createEmptyFilter", "signature": "SparseBloomFilter createEmptyFilter(Shape shape)"}]}, "fixtures": [], "test_cases": [{"name": "testBitMapExtractorEdgeCases", "primary_tested": ["BloomFilter.processBitMaps(BitMapProcessor)", "BloomFilter.merge(Hasher)"], "associated_methods": [], "external_dependencies": {"modules": ["BloomFilter", "IndexExtractor", "SparseBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests edge cases for bit map extraction in the BloomFilter, including early exit conditions and processing of bit maps."}, {"name": "testBloomFilterBasedMergeEdgeCases", "primary_tested": ["BloomFilter.merge(BloomFilter)", "BloomFilter.processBitMapPairs(BloomFilter, BitMapPairProcessor)"], "associated_methods": [], "external_dependencies": {"modules": ["BloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests edge cases for Bloom filter-based merge operations, ensuring correct merging and processing of bit map pairs."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java", "testclass_name": "IndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "IndexExtractorTest", "description": "Tests for the IndexExtractor class, focusing on its functionality with BitMapExtractor.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "TestingBitMapExtractor", "description": "Internal class implementing BitMapExtractor for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAsIndexArray", "primary_tested": ["IndexExtractor.asIndexArray()"], "external_dependencies": {"modules": ["IndexExtractor"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the asIndexArray method of IndexExtractor with different input sizes."}, {"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["IndexExtractor.processIndices(IntConsumer)"], "external_dependencies": {"modules": ["IndexExtractor", "TestingBitMapExtractor", "ArrayList", "Integer"], "class_members": [{"name": "TestingBitMapExtractor", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the fromBitMapExtractor method of IndexExtractor using a custom BitMapExtractor implementation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java", "testclass_name": "TransformedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.ListIterator;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedListTest", "description": "Tests for the TransformedList class, focusing on its transformation and sublist functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "associated_methods": ["List.add(E)", "List.addAll(int,Collection<? extends E>)", "List.size()"], "external_dependencies": {"modules": ["java.util.List", "java.util.ArrayList", "java.util.Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subList functionality of the TransformedList, including creating sublists with different ranges and adding elements to the list."}, {"name": "testTransformedList", "primary_tested": ["TransformedList.transformingList(List<E>,Transformer<E,E>)"], "associated_methods": ["List.size()", "List.add(E)", "List.contains(Object)", "List.remove(Object)", "List.clear()", "List.add(int,E)", "List.get(int)", "List.set(int,E)", "ListIterator.next()", "ListIterator.set(E)", "ListIterator.add(E)", "List.addAll(Collection<? extends E>)", "List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["java.util.List", "java.util.ArrayList", "java.util.ListIterator", "org.apache.commons.collections4.Transformer", "org.apache.commons.collections4.collection.TransformedCollectionTest"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of the TransformedList, including adding elements, checking transformations, and using list iterators."}, {"name": "testTransformedList_decorateTransform", "primary_tested": ["TransformedList.transformedList(List<E>,Transformer<? super E,? extends E>)"], "associated_methods": ["List.size()", "List.contains(Object)", "List.remove(Object)"], "external_dependencies": {"modules": ["java.util.List", "java.util.ArrayList", "java.util.Collections", "org.apache.commons.collections4.Transformer", "org.apache.commons.collections4.collection.TransformedCollectionTest"], "class_members": [], "project_specific_resources": ["TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER"]}, "category": "unit", "fixtures_used": [], "description": "Tests the transformation functionality of the TransformedList when decorating an existing list, including checking transformations and removing elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "testclass_name": "CompositeCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollectionTest", "description": "Unit tests for CompositeCollection operations.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<E>"}, {"name": "one", "type": "Collection<E>"}, {"name": "two", "type": "Collection<E>"}], "methods": [{"name": "setUpMutatorTest", "signature": "void setUpMutatorTest()"}, {"name": "setUpTest", "signature": "void setUpTest()"}]}, "fixtures": [], "test_cases": [{"name": "testAddAllMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the addAll functionality with a mutator in CompositeCollection."}, {"name": "testAddAllToCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>, Collection<? extends E>)"], "associated_methods": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests adding all elements from a CompositeCollection to another collection."}, {"name": "testAddMutator", "primary_tested": ["CompositeCollection.add(E)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "description": "Tests the add functionality with a mutator in CompositeCollection."}, {"name": "testAddNullList", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "cc", "type": "variable"}]}, "category": "unit", "description": "Tests adding a null list to a CompositeCollection."}, {"name": "testAddNullLists2Args", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>, Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "cc", "type": "variable"}]}, "category": "unit", "description": "Tests adding two null lists to a CompositeCollection."}, {"name": "testAddNullListsVarArgs", "primary_tested": ["CompositeCollection.addComposited(Collection<? extends E>...)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "cc", "type": "variable"}]}, "category": "unit", "description": "Tests adding multiple null lists to a CompositeCollection."}, {"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "associated_methods": ["HashSet.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests clearing a CompositeCollection."}, {"name": "testContainsAll", "primary_tested": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.containsAll(null)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the containsAll functionality in CompositeCollection."}, {"name": "testIsEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "description": "Tests the isEmpty functionality in CompositeCollection."}, {"name": "testIterator", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the iterator functionality in CompositeCollection."}, {"name": "testMultipleCollectionsSize", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "description": "Tests the size functionality with multiple collections in CompositeCollection."}, {"name": "testRemove", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the remove functionality in CompositeCollection."}, {"name": "testRemoveAll", "primary_tested": ["CompositeCollection.removeAll(Collection<?>)", "CompositeCollection.removeAll(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the removeAll functionality in CompositeCollection."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeCollection.removeComposited(Collection<? extends E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the removeComposited functionality in CompositeCollection."}, {"name": "testRemoveIf", "primary_tested": ["CompositeCollection.removeIf(Predicate<? super E>)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the removeIf functionality in CompositeCollection."}, {"name": "testRetainAll", "primary_tested": ["CompositeCollection.retainAll(Collection<?>)", "CompositeCollection.retainAll(null)"], "associated_methods": ["CompositeCollection.contains(Object)", "HashSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests the retainAll functionality in CompositeCollection."}, {"name": "testSize", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "description": "Tests the size functionality in CompositeCollection."}, {"name": "testToCollection", "primary_tested": ["CompositeCollection.toCollection()"], "associated_methods": ["CompositeCollection.containsAll(Collection<?>)", "CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "description": "Tests converting a CompositeCollection to another collection."}, {"name": "testUnsupportedRemove", "primary_tested": ["CompositeCollection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests the unsupported remove operation in CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "testclass_name": "PredicatedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedListTest", "description": "Unit tests for PredicatedList functionality, focusing on predicate validation and list operations.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<E>"}, {"name": "testPredicate", "type": "Predicate<E>"}], "methods": [{"name": "decorateList", "signature": "List<E> decorateList(List<E> list, Predicate<E> predicate)"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullElements", "signature": "E[] getFullElements()"}, {"name": "makeObject", "signature": "List<E> makeObject()"}, {"name": "makeTestList", "signature": "List<E> makeTestList()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["List.add(E)"], "external_dependencies": {"modules": ["List", "Integer", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the list throws an IllegalArgumentException."}, {"name": "testIllegalAddAll", "primary_tested": ["List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["List", "ArrayList", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection containing an illegal element (non-string) to the list throws an IllegalArgumentException."}, {"name": "testIllegalSet", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IllegalArgumentException"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that setting an illegal element (non-string) at a specific index in the list throws an IllegalArgumentException."}, {"name": "testLegalAddAll", "primary_tested": ["List.addAll(int,Collection<? extends E>)"], "external_dependencies": {"modules": ["List", "ArrayList"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests that adding a collection of legal elements (strings) to the list works correctly."}, {"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "external_dependencies": {"modules": ["List", "ArrayList"], "class_members": [{"name": "makeTestList", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating sublists from the main list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java", "testclass_name": "IndexFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.BitSet;", "import java.util.List;", "import java.util.SplittableRandom;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.function.IntPredicate;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "IndexFilterTest", "description": "Unit tests for the IndexFilter class, focusing on its filtering functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFilter", "primary_tested": ["IndexFilter.create(Shape,IntConsumer)"], "associated_methods": ["BitSet.clear()", "BitSet.get(int)", "BitSet.set(int)", "BitSet.stream()", "List.size()", "List.add(Integer)", "IntPredicate.test(int)", "SplittableRandom.nextInt(int)", "ThreadLocalRandom.current().nextLong()"], "external_dependencies": {"modules": ["Shape", "BitSet", "List", "IntPredicate", "SplittableRandom", "ThreadLocalRandom"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and functionality of the IndexFilter, ensuring it correctly filters and handles duplicate indices."}, {"name": "testFiltering", "primary_tested": ["IndexFilter.create(Shape,IntConsumer)"], "associated_methods": ["List.size()", "List.add(Integer)", "IntPredicate.test(int)"], "external_dependencies": {"modules": ["Shape", "List", "IntPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of the IndexFilter, ensuring it correctly processes indices and maintains the list size."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "testclass_name": "CartesianProductIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CartesianProductIteratorTest", "description": "Unit tests for the CartesianProductIterator class, which generates the Cartesian product of multiple lists.", "class_members": {"variables": [{"name": "letters", "type": "List<Character>"}, {"name": "numbers", "type": "List<Character>"}, {"name": "symbols", "type": "List<Character>"}, {"name": "emptyList", "type": "List<Character>"}], "methods": [{"name": "makeEmptyIterator", "signature": "CartesianProductIterator<Character> makeEmptyIterator()"}, {"name": "makeObject", "signature": "CartesianProductIterator<Character> makeObject()"}, {"name": "setUp", "signature": "void setUp()"}, {"name": "supportsRemove", "signature": "boolean supportsRemove()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveThrows", "primary_tested": ["CartesianProductIterator.remove()"], "external_dependencies": {"modules": ["CartesianProductIterator"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the remove method throws an UnsupportedOperationException."}, {"name": "testEmptyCollection", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "Collections"], "class_members": [{"name": "letters", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator returns false for hasNext and throws NoSuchElementException for next when one of the lists is empty."}, {"name": "testExhaustivity", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "associated_methods": ["CartesianProductIterator.makeObject()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are returned and the iterator is exhausted."}, {"name": "testExhaustivityWithEmptyList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Collections"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "emptyList", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when one of the lists is empty."}, {"name": "testExhaustivityWithEmptyFirstList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Collections"], "class_members": [{"name": "emptyList", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when the first list is empty."}, {"name": "testExhaustivityWithEmptyLastList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Collections"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "emptyList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when the last list is empty."}, {"name": "testExhaustivityWithAllEmptyLists", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Collections"], "class_members": [{"name": "emptyList", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that no tuples are returned when all lists are empty."}, {"name": "testExhaustivityWithSameList", "primary_tested": ["CartesianProductIterator.hasNext()", "CartesianProductIterator.next()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "letters", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are returned when the same list is passed multiple times."}, {"name": "testForEachRemaining", "primary_tested": ["CartesianProductIterator.forEachRemaining(Consumer<? super List<Character>>)"], "associated_methods": ["CartesianProductIterator.makeObject()"], "external_dependencies": {"modules": ["CartesianProductIterator", "ArrayList", "Arrays", "Iterator"], "class_members": [{"name": "letters", "type": "variable"}, {"name": "numbers", "type": "variable"}, {"name": "symbols", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that all tuples are provided to the consumer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java", "testclass_name": "DefaultIndexExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import java.util.Arrays;", "import java.util.BitSet;", "import java.util.Objects;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.stream.IntStream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "DefaultIndexExtractorTest", "description": "Tests for the DefaultIndexExtractor class, focusing on various functionalities such as generating arrays, creating BitSets, and testing index extraction methods.", "class_members": {"variables": [{"name": "values", "type": "int[]"}], "methods": [{"name": "generateIntArray", "signature": "int[] generateIntArray(int, int)"}, {"name": "unique", "signature": "int[] unique(int[])"}, {"name": "uniqueSet", "signature": "BitSet uniqueSet(int[])"}]}, "fixtures": [], "test_cases": [{"name": "testEntries", "primary_tested": ["IndexExtractor.asIndexArray()"], "associated_methods": ["IndexExtractor.test(Predicate<Integer>)"], "external_dependencies": {"modules": ["IntStream", "IndexExtractor", "Predicate"], "class_members": [{"name": "values", "type": "variable"}]}, "category": "unit", "description": "Tests the functionality of converting an index extractor to an index array."}, {"name": "testFromBitMapExtractor", "primary_tested": ["IndexExtractor.fromBitMapExtractor(BitMapExtractor)"], "associated_methods": ["BitMaps.numberOfBitMaps(int)", "BitMaps.set(long[], int)", "BitMapExtractor.fromBitMapArray(long[])", "IndexExtractor.asIndexArray()"], "external_dependencies": {"modules": ["BitMaps", "BitMapExtractor", "IndexExtractor"], "class_members": [{"name": "generateIntArray", "type": "method"}, {"name": "unique", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating an index extractor from a bitmap extractor and converting it to an index array."}, {"name": "testFromIndexArray", "primary_tested": ["IndexExtractor.fromIndexArray(int[])"], "associated_methods": ["IndexExtractor.asIndexArray()"], "external_dependencies": {"modules": ["IndexExtractor"], "class_members": [{"name": "generateIntArray", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of creating an index extractor from an index array and converting it to an index array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "testclass_name": "ListOrderedSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.IteratorUtils;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedSetTest", "description": "Unit tests for ListOrderedSet operations including decorator, duplicates, indexed addition, removal, replacement, ordering, and retention.", "class_members": {"variables": [{"name": "ZERO", "type": "static final Integer"}, {"name": "ONE", "type": "static final Integer"}, {"name": "TWO", "type": "static final Integer"}, {"name": "THREE", "type": "static final Integer"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "makeObject", "signature": "ListOrderedSet<E> makeObject()"}, {"name": "setupSet", "signature": "ListOrderedSet<E> setupSet()"}], "nested_classes": [{"name": "A", "description": "Internal class with overridden equals and hashCode methods"}, {"name": "B", "description": "Internal class with overridden equals and hashCode methods"}]}, "fixtures": [], "test_cases": [{"name": "testDecorator", "primary_tested": ["ListOrderedSet.listOrderedSet(List<E>)", "ListOrderedSet.listOrderedSet(Set<E>)", "ListOrderedSet.listOrderedSet(Set<E>, List<E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "HashSet", "ArrayList", "NullPointerException"]}, "category": "unit", "description": "Tests the decorator functionality of ListOrderedSet by checking for expected exceptions when passing null parameters."}, {"name": "testDuplicates", "primary_tested": ["ListOrderedSet.listOrderedSet(List<E>)", "ListOrderedSet.size()", "ListOrderedSet.get(int)"], "associated_methods": ["IteratorUtils.toArray(Iterator<E>)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "IteratorUtils"]}, "category": "unit", "description": "Tests the handling of duplicates in ListOrderedSet and checks if the insertion order is preserved."}, {"name": "testListAddIndexed", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.add(int, E)", "ListOrderedSet.addAll(int, Collection<? extends E>)", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"]}, "category": "unit", "description": "Tests the indexed addition functionality of ListOrderedSet and checks if the order is maintained."}, {"name": "testListAddRemove", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.remove(int)", "ListOrderedSet.asList()", "ListOrderedSet.indexOf(Object)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList"]}, "category": "unit", "description": "Tests the addition and removal functionality of ListOrderedSet and checks if the order is maintained."}, {"name": "testListAddReplacing", "primary_tested": ["ListOrderedSet.add(E)", "ListOrderedSet.decorated()", "ListOrderedSet.iterator()", "ListOrderedSet.get(int)", "ListOrderedSet.asList()"], "external_dependencies": {"modules": ["ListOrderedSet"]}, "category": "unit", "description": "Tests the replacement functionality of ListOrderedSet when adding elements that are equal but not the same instance."}, {"name": "testOrdering", "primary_tested": ["ListOrderedSet.setupSet()", "ListOrderedSet.iterator()", "ListOrderedSet.remove(Object)", "ListOrderedSet.add(E)"], "external_dependencies": {"modules": ["ListOrderedSet"]}, "category": "unit", "description": "Tests the ordering and removal functionality of ListOrderedSet and checks if the order is maintained after removals and additions."}, {"name": "testRetainAll", "primary_tested": ["ListOrderedSet.listOrderedSet(Set<E>, List<E>)", "ListOrderedSet.add(E)", "ListOrderedSet.retainAll(Collection<?>)", "ListOrderedSet.get(int)"], "external_dependencies": {"modules": ["ListOrderedSet", "ArrayList", "HashSet"]}, "category": "unit", "description": "Tests the retainAll functionality of ListOrderedSet and checks if the insertion order is preserved."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java", "testclass_name": "DefaultBitMapExtractorTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.concurrent.ThreadLocalRandom;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBitMapExtractorTest", "description": "Unit tests for the DefaultBitMapExtractor class, which processes bitmaps using a LongPredicate.", "class_members": {"variables": [{"name": "values", "type": "long[]"}], "methods": [{"name": "generateLongArray", "signature": "static long[] generateLongArray(int)"}], "nested_classes": [{"name": "DefaultBitMapExtractor", "description": "Internal class implementing BitMapExtractor interface"}]}, "fixtures": [], "test_cases": [{"name": "testAsBitMapArrayLargeArray", "primary_tested": ["BitMapExtractor.asBitMapArray()"], "external_dependencies": {"modules": ["BitMapExtractor", "ThreadLocalRandom"], "class_members": [{"name": "generateLongArray", "type": "method"}]}, "category": "unit", "description": "Tests the asBitMapArray method with a large array of long values."}, {"name": "testFromBitMapArray", "primary_tested": ["BitMapExtractor.fromBitMapArray(long[])"], "external_dependencies": {"modules": ["BitMapExtractor", "BitMaps", "ThreadLocalRandom"], "class_members": [{"name": "generateLongArray", "type": "method"}]}, "category": "unit", "description": "Tests the fromBitMapArray method by generating an array of long values and comparing the result."}, {"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "associated_methods": ["BitMaps.contains(long[], int)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "BitMaps", "DefaultIndexExtractorTest"], "class_members": [{"name": "generateLongArray", "type": "method"}], "project_specific_resources": ["DefaultIndexExtractorTest.generateIntArray(int, int)"]}, "category": "unit", "description": "Tests the fromIndexExtractor method by generating an array of indices and checking if the resulting bitmaps contain these indices."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "testclass_name": "CompositeSetTest", "dependencies": ["package org.apache.commons.collections4.set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.set.CompositeSet.SetMutator;", "import org.junit.jupiter.api.Test;"], "name": "CompositeSetTest", "description": "Unit tests for CompositeSet operations like addComposited, contains, remove, and collision resolution.", "class_members": {"variables": [], "methods": [{"name": "buildOne", "signature": "Set<E> buildOne()"}, {"name": "buildTwo", "signature": "Set<E> buildTwo()"}, {"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "makeObject", "signature": "CompositeSet<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddComposited", "primary_tested": ["CompositeSet.addComposited(Set<E>,Set<E>)"], "associated_methods": ["CompositeSet.addComposited(Set<E>)", "CompositeSet.addComposited(Set<E>[])", "CompositeSet.addComposited(Set<E>,Set<E>,Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the addComposited functionality of the CompositeSet, including handling of null values and equality checks."}, {"name": "testAddCompositedCollision", "primary_tested": ["CompositeSet.addComposited(Set<E>,Set<E>)"], "associated_methods": ["CompositeSet.addComposited(Set<E>,Set<E>,Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the addComposited functionality of the CompositeSet when collisions occur, expecting UnsupportedOperationException."}, {"name": "testContains", "primary_tested": ["CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the contains functionality of the CompositeSet."}, {"name": "testContainsAll", "primary_tested": ["CompositeSet.containsAll(Collection<?>)", "CompositeSet.containsAll(Collection<?>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the containsAll functionality of the CompositeSet, including handling of null values."}, {"name": "testFailedCollisionResolution", "primary_tested": ["CompositeSet.addComposited(Set<E>)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the collision resolution functionality of the CompositeSet, expecting IllegalArgumentException."}, {"name": "testRemoveAll", "primary_tested": ["CompositeSet.removeAll(Collection<?>)"], "external_dependencies": {"modules": ["CompositeSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the removeAll functionality of the CompositeSet, including handling of null values."}, {"name": "testRemoveComposited", "primary_tested": ["CompositeSet.remove(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of the CompositeSet, ensuring elements are removed from the underlying sets."}, {"name": "testRemoveUnderlying", "primary_tested": ["CompositeSet.contains(Object)"], "external_dependencies": {"modules": ["CompositeSet", "HashSet"], "class_members": [{"name": "buildOne", "type": "method"}, {"name": "buildTwo", "type": "method"}]}, "category": "unit", "description": "Tests the removal of elements directly from the underlying sets, ensuring they are reflected in the CompositeSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java", "testclass_name": "BitMapExtractorFromLongArrayTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "BitMapExtractorFromLongArrayTest", "description": "Tests for the BitMapExtractorFromLongArray class, focusing on its constructor and fromIndexExtractor method.", "class_members": {"methods": [{"name": "createEmptyExtractor", "signature": "BitMapExtractor createEmptyExtractor()"}, {"name": "createExtractor", "signature": "BitMapExtractor createExtractor()"}, {"name": "emptyIsZeroLength", "signature": "boolean emptyIsZeroLength()"}]}, "test_cases": [{"name": "constructorTest", "primary_tested": ["BitMapExtractor.fromBitMapArray(long[])"], "associated_methods": ["BitMapExtractor.processBitMaps(Consumer<Long>)"], "external_dependencies": {"modules": ["BitMapExtractor", "List", "ArrayList", "Long"], "class_members": [{"name": "createExtractor", "type": "method"}]}, "category": "unit", "description": "Tests the constructor of BitMapExtractor and its ability to process bitmaps."}, {"name": "testFromIndexExtractor", "primary_tested": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "associated_methods": ["BitMapExtractor.processBitMaps(Consumer<Long>)"], "external_dependencies": {"modules": ["BitMapExtractor", "IndexExtractor", "List", "ArrayList", "Long", "Integer"]}, "category": "unit", "description": "Tests the fromIndexExtractor method of BitMapExtractor and its ability to process bitmaps based on an index extractor."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "testclass_name": "BitMapsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "BitMapsTest", "description": "Unit tests for the BitMaps class, focusing on various bit manipulation methods.", "class_members": {"methods": [{"name": "assertMod", "signature": "void assertMod(long, int)"}]}, "fixtures": [], "test_cases": [{"name": "testContains", "primary_tested": ["BitMaps.contains(long[],int)"], "associated_methods": ["BitMaps.set(long[],int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the contains method of BitMaps, ensuring it correctly identifies set bits and handles boundary conditions."}, {"name": "testGetLongBit", "primary_tested": ["BitMaps.getLongBit(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the getLongBit method of BitMaps, ensuring it returns the correct bit values for given indices."}, {"name": "testGetLongIndex", "primary_tested": ["BitMaps.getLongIndex(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the getLongIndex method of BitMaps, ensuring it correctly calculates the long index for a given bit index."}, {"name": "testMod", "primary_tested": ["BitMaps.mod(long,int)"], "associated_methods": ["BitMaps.assertMod(long,int)"], "external_dependencies": {"modules": ["BitMaps"], "class_members": [{"name": "assertMod", "type": "method"}]}, "category": "unit", "description": "Tests the mod method of BitMaps, ensuring it functions as an unsigned modulus for various dividends and divisors."}, {"name": "testModEdgeCases", "primary_tested": ["BitMaps.mod(long,int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests edge cases for the mod method of BitMaps, including handling of zero divisor and negative results."}, {"name": "testNumberOfBitMaps", "primary_tested": ["BitMaps.numberOfBitMaps(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the numberOfBitMaps method of BitMaps, ensuring it correctly calculates the number of long arrays needed for a given number of bits."}, {"name": "testSet", "primary_tested": ["BitMaps.set(long[],int)"], "associated_methods": ["BitMaps.contains(long[],int)", "BitMaps.numberOfBitMaps(int)"], "external_dependencies": {"modules": ["BitMaps"]}, "category": "unit", "description": "Tests the set method of BitMaps, ensuring it correctly sets bits and verifies their state."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java", "testclass_name": "CountingPredicateTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.function.BiPredicate;", "import org.apache.commons.lang3.tuple.Pair;", "import org.junit.jupiter.api.Test;"], "name": "CountingPredicateTest", "description": "Unit tests for the CountingPredicate class, focusing on different scenarios of predicate array lengths compared to other arrays.", "class_members": {"variables": [{"name": "ary", "type": "Integer[]"}], "methods": [{"name": "makeFunc", "signature": "BiPredicate<Integer, Integer> makeFunc(BiPredicate<Integer, Integer> inner, List<Pair<Integer, Integer>> result)"}]}, "fixtures": [], "test_cases": [{"name": "testPredicateLonger", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "description": "Tests scenarios where the predicate array is longer than the other array, ensuring correct processing and results."}, {"name": "testPredicateSameLength", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "description": "Tests scenarios where the predicate array is of the same length as the other array, ensuring correct processing and results."}, {"name": "testPredicateShorter", "primary_tested": ["CountingPredicate.test(Integer)", "CountingPredicate.processRemaining()"], "associated_methods": [], "external_dependencies": {"modules": ["CountingPredicate", "Pair", "ArrayList", "List"], "class_members": [{"name": "ary", "type": "variable"}, {"name": "makeFunc", "type": "method"}]}, "category": "unit", "description": "Tests scenarios where the predicate array is shorter than the other array, ensuring correct processing and results."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "testclass_name": "CollatingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIteratorTest", "description": "Unit tests for the CollatingIterator class, which merges multiple sorted inputs into a single sorted output.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "fib", "type": "ArrayList<Integer>"}], "methods": [{"name": "makeEmptyIterator", "signature": "CollatingIterator<Integer> makeEmptyIterator()"}, {"name": "makeObject", "signature": "CollatingIterator<Integer> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetSetComparator", "primary_tested": ["CollatingIterator.getComparator()", "CollatingIterator.setComparator(Comparator)"], "external_dependencies": {"modules": ["CollatingIterator", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the getter and setter methods for the comparator in CollatingIterator."}, {"name": "testIterateEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of even numbers using CollatingIterator."}, {"name": "testIterateEvenEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over two lists of even numbers using CollatingIterator."}, {"name": "testIterateEvenOdd", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of even and odd numbers using CollatingIterator."}, {"name": "testIterateFibEvenOdd", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "fib", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of Fibonacci numbers, even numbers, and odd numbers using CollatingIterator."}, {"name": "testIterateOddEven", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of odd and even numbers using CollatingIterator."}, {"name": "testNullComparator", "primary_tested": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "ComparableComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of CollatingIterator when a null comparator is provided."}, {"name": "testRemoveFromDouble", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a CollatingIterator that merges two lists."}, {"name": "testRemoveFromSingle", "primary_tested": ["CollatingIterator.hasNext()", "CollatingIterator.next()", "CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList"], "class_members": [{"name": "comparator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of elements from a CollatingIterator that iterates over a single list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "testclass_name": "ObjectGraphIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIteratorTest", "description": "Unit tests for the ObjectGraphIterator class, which is used to iterate over a graph of objects.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}, {"name": "iteratorList", "type": "List<Iterator<String>>"}], "methods": [{"name": "makeEmptyIterator", "signature": "ObjectGraphIterator<Object> makeEmptyIterator()"}, {"name": "makeObject", "signature": "ObjectGraphIterator<Object> makeObject()"}], "nested_classes": [{"name": "Branch", "description": "Represents a branch in a tree structure with leaves."}, {"name": "Forest", "description": "Represents a collection of trees."}, {"name": "Leaf", "description": "Represents a leaf in a tree structure with a color."}, {"name": "LeafFinder", "description": "Transformer that finds leaves in a forest structure."}, {"name": "Tree", "description": "Represents a tree structure with branches."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteration_IteratorOfIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators using ObjectGraphIterator."}, {"name": "testIteration_IteratorOfIteratorsWithEmptyIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators, including empty iterators, using ObjectGraphIterator."}, {"name": "testIteration_RootNoTransformer", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Forest"]}, "category": "unit", "description": "Tests the iteration over a root object without a transformer using ObjectGraphIterator."}, {"name": "testIteration_RootNull", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the iteration over a null root object using ObjectGraphIterator."}, {"name": "testIteration_Transformed1", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Forest", "LeafFinder"]}, "category": "unit", "description": "Tests the iteration over a transformed forest structure using ObjectGraphIterator."}, {"name": "testIteration_Transformed2", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Forest", "LeafFinder"]}, "category": "unit", "description": "Tests the iteration over a transformed forest structure with multiple trees using ObjectGraphIterator."}, {"name": "testIteration_Transformed3", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Forest", "LeafFinder"]}, "category": "unit", "description": "Tests the iteration over a transformed forest structure with multiple branches using ObjectGraphIterator."}, {"name": "testIteratorConstructor_null_next", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator and calling next()."}, {"name": "testIteratorConstructor_null_remove", "primary_tested": ["ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator and calling remove()."}, {"name": "testIteratorConstructor_null1", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the behavior of ObjectGraphIterator when constructed with a null iterator."}, {"name": "testIteratorConstructorIteration_Empty", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"]}, "category": "unit", "description": "Tests the iteration over an empty list of iterators using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_Simple", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a simple list of iterators using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_SimpleNoHasNext", "primary_tested": ["ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a simple list of iterators without using hasNext() using ObjectGraphIterator."}, {"name": "testIteratorConstructorIteration_WithEmptyIterators", "primary_tested": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "IteratorUtils"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iteration over a list of iterators, including empty iterators, using ObjectGraphIterator."}, {"name": "testIteratorConstructorRemove", "primary_tested": ["ObjectGraphIterator.next()", "ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator"], "class_members": [{"name": "list1", "type": "variable"}, {"name": "list2", "type": "variable"}, {"name": "list3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove operation during iteration over a list of iterators using ObjectGraphIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java", "testclass_name": "TiedMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "TiedMapEntryTest", "description": "Tests for the TiedMapEntry class, focusing on the setValue method.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "fixtures": [], "test_cases": [{"name": "testConstructors", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "unit", "fixtures_used": [], "description": "Tests the constructors of TiedMapEntry."}, {"name": "testSetValue", "primary_tested": ["TiedMapEntry.setValue(V)"], "associated_methods": ["TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["HashMap", "Map", "TiedMapEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method of TiedMapEntry, ensuring it correctly updates the value in the underlying map and returns the old value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "testclass_name": "TreeListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.ListIterator;", "import org.junit.jupiter.api.Test;"], "name": "TreeListTest", "description": "Unit tests for TreeList operations including add, remove, indexOf, and iteration order.", "class_members": {"variables": [], "methods": [{"name": "benchmark", "signature": "void benchmark(List<? super Integer>)"}, {"name": "makeObject", "signature": "TreeList<E> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddMultiple", "primary_tested": ["TreeList.add(E)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the addition of multiple elements to a TreeList and verifies their positions."}, {"name": "testBug35258", "primary_tested": ["TreeList.remove(Object)", "TreeList.listIterator()"], "associated_methods": ["TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"]}, "category": "unit", "description": "Tests the removal of an element from a TreeList and verifies the consistency of the ListIterator."}, {"name": "testBugCollections447", "primary_tested": ["TreeList.listIterator()", "TreeList.remove(Object)"], "associated_methods": ["TreeList.listIterator().next()", "TreeList.listIterator().previous()", "TreeList.listIterator().remove()"], "external_dependencies": {"modules": ["TreeList", "ListIterator"]}, "category": "unit", "description": "Tests the removal of an element from a TreeList and verifies the correct behavior of the ListIterator after removal."}, {"name": "testIndexOf", "primary_tested": ["TreeList.indexOf(Object)", "TreeList.set(int,E)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the indexOf method of TreeList and verifies the index of elements after modifications."}, {"name": "testInsertBefore", "primary_tested": ["TreeList.add(int,E)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the insertion of an element at a specific index in a TreeList and verifies the positions of elements."}, {"name": "testIterationOrder", "primary_tested": ["TreeList.listIterator()", "TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator", "ArrayList"]}, "category": "unit", "description": "Tests the iteration order of elements in a TreeList initialized with another collection."}, {"name": "testIterationOrderAfterAddAll", "primary_tested": ["TreeList.addAll(Collection)", "TreeList.listIterator()", "TreeList.listIterator().next()", "TreeList.listIterator().previous()"], "external_dependencies": {"modules": ["TreeList", "ListIterator", "ArrayList"]}, "category": "unit", "description": "Tests the iteration order of elements in a TreeList after calling addAll."}, {"name": "testRemove", "primary_tested": ["TreeList.remove(int)", "TreeList.get(int)"], "external_dependencies": {"modules": ["TreeList"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the removal of elements from a TreeList and verifies the positions of remaining elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "testclass_name": "GrowthListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;"], "name": "GrowthListTest", "description": "Unit tests for the GrowthList class, focusing on its growth and modification functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGrowthAdd", "primary_tested": ["GrowthList.add(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the addition of an element at a specific index, causing the list to grow."}, {"name": "testGrowthAddAll", "primary_tested": ["GrowthList.addAll(int,Collection)"], "external_dependencies": {"modules": ["GrowthList", "Integer", "ArrayList", "Collection"], "class_members": []}, "category": "unit", "description": "Tests the addition of a collection of elements at a specific index, causing the list to grow."}, {"name": "testGrowthList", "primary_tested": ["GrowthList.add(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the growth of the list by adding elements at specific indices."}, {"name": "testGrowthSet1", "primary_tested": ["GrowthList.set(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests setting an element at a specific index, causing the list to grow if necessary."}, {"name": "testGrowthSet2", "primary_tested": ["GrowthList.set(int,Integer)"], "external_dependencies": {"modules": ["GrowthList", "Integer"], "class_members": []}, "category": "unit", "description": "Tests setting an element at the first index, causing the list to grow if necessary."}, {"name": "testListAddByIndexBoundsChecking", "primary_tested": ["List.add(int,E)"], "external_dependencies": {"modules": ["List", "Executable", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for adding an element at an invalid index."}, {"name": "testListAddByIndexBoundsChecking2", "primary_tested": ["List.add(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for adding an element at an invalid index in a full collection."}, {"name": "testListSetByIndexBoundsChecking", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for setting an element at an invalid index."}, {"name": "testListSetByIndexBoundsChecking2", "primary_tested": ["List.set(int,E)"], "external_dependencies": {"modules": ["List", "IndexOutOfBoundsException"], "class_members": []}, "category": "unit", "description": "Tests the bounds checking for setting an element at an invalid index in a full collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "testclass_name": "ListUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.list.PredicatedList;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java", "testclass_name": "DefaultMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.junit.jupiter.api.Test;"], "name": "DefaultMapEntryTest", "description": "Tests for the DefaultMapEntry class, focusing on constructors and self-reference handling.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry()"}, {"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["DefaultMapEntry.<init>(K,V)", "DefaultKeyValue.<init>(K,V)", "DefaultMapEntry.<init>(Map.Entry<K,V>)"], "associated_methods": ["DefaultMapEntry.getKey()", "DefaultMapEntry.getValue()", "DefaultKeyValue.getKey()", "DefaultKeyValue.getValue()", "DefaultMapEntry.setValue(V)"], "external_dependencies": {"modules": ["DefaultMapEntry", "DefaultKeyValue", "Map.Entry", "KeyValue"]}, "category": "unit", "description": "Tests the constructors of DefaultMapEntry and DefaultKeyValue, ensuring correct key and value assignment and independence of objects."}, {"name": "testSelfReferenceHandling", "primary_tested": ["DefaultMapEntry.setValue(V)"], "associated_methods": ["DefaultMapEntry.getValue()"], "external_dependencies": {"modules": ["DefaultMapEntry", "Map.Entry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the handling of self-references in DefaultMapEntry, ensuring that setting the value to the entry itself works correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "testclass_name": "IterableUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayDeque;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Deque;", "import java.util.HashSet;", "import java.util.LinkedHashSet;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Set;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "testclass_name": "FluentIterableTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "testclass_name": "IteratorUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.apache.commons.collections4.functors.TruePredicate.INSTANCE;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Dictionary;", "import java.util.Enumeration;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.LinkedHashSet;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import java.util.Vector;", "import org.apache.commons.collections4.iterators.ArrayIterator;", "import org.apache.commons.collections4.iterators.EmptyIterator;", "import org.apache.commons.collections4.iterators.EmptyListIterator;", "import org.apache.commons.collections4.iterators.EmptyMapIterator;", "import org.apache.commons.collections4.iterators.EmptyOrderedIterator;", "import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;", "import org.apache.commons.collections4.iterators.EnumerationIterator;", "import org.apache.commons.collections4.iterators.NodeListIterator;", "import org.apache.commons.collections4.iterators.ObjectArrayIterator;", "import org.apache.commons.collections4.iterators.ZippingIterator;", "import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "testclass_name": "LazyListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.time.LocalDateTime;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.apache.commons.collections4.AbstractObjectTest;", "import org.apache.commons.collections4.Factory;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;"], "name": "LazyListTest", "description": "Unit tests for the LazyList class, focusing on element creation and sublist operations.", "class_members": {"variables": [], "methods": [{"name": "testSubList", "signature": "void testSubList(List<LocalDateTime>)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateNullGapsWithFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Factory"], "class_members": []}, "category": "unit", "description": "Tests the creation of null gaps in LazyList using a Factory."}, {"name": "testCreateNullGapsWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Transformer", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the creation of null gaps in LazyList using a Transformer."}, {"name": "testElementCreationWithFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Factory"], "class_members": []}, "category": "unit", "description": "Tests the creation of elements in LazyList using a Factory."}, {"name": "testElementCreationWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Factory"], "class_members": []}, "category": "unit", "description": "Tests the creation of elements in LazyList using a Transformer."}, {"name": "testGetWithNull", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.remove(int)", "LazyList.add(int,LocalDateTime)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Transformer", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the behavior of LazyList when getting an element after setting it to null."}, {"name": "testSubListWitheFactory", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.subList(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Factory"], "class_members": [{"name": "testSubList", "type": "method"}]}, "category": "unit", "description": "Tests the sublist functionality of LazyList using a Factory."}, {"name": "testSubListWithTransformer", "primary_tested": ["LazyList.get(int)"], "associated_methods": ["LazyList.isEmpty()", "LazyList.get(int)", "LazyList.subList(int,int)"], "external_dependencies": {"modules": ["LocalDateTime", "LazyList", "ArrayList", "Transformer", "Arrays"], "class_members": [{"name": "testSubList", "type": "method"}]}, "category": "unit", "description": "Tests the sublist functionality of LazyList using a Transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "testclass_name": "CollectionUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.Comparator;", "import java.util.Enumeration;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Hashtable;", "import java.util.Iterator;", "import java.util.LinkedHashMap;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.Map;", "import java.util.Objects;", "import java.util.Queue;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import java.util.Vector;", "import org.apache.commons.collections4.bag.HashBag;", "import org.apache.commons.collections4.collection.PredicatedCollection;", "import org.apache.commons.collections4.collection.SynchronizedCollection;", "import org.apache.commons.collections4.collection.TransformedCollection;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.apache.commons.collections4.functors.DefaultEquator;", "import org.apache.commons.collections4.queue.CircularFifoQueue;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "testclass_name": "MapUtilsTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.text.DecimalFormat;", "import java.text.NumberFormat;", "import java.util.AbstractMap;", "import java.util.ArrayList;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.List;", "import java.util.ListResourceBundle;", "import java.util.Map;", "import java.util.Properties;", "import java.util.ResourceBundle;", "import java.util.Set;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.apache.commons.collections4.keyvalue.DefaultKeyValue;", "import org.apache.commons.collections4.keyvalue.DefaultMapEntry;", "import org.apache.commons.collections4.map.HashedMap;", "import org.apache.commons.collections4.map.LazyMap;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.apache.commons.collections4.map.PredicatedMap;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "testclass_name": "PredicatedMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Set;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;"], "name": "PredicatedMultiSetTest", "description": "Unit tests for the PredicatedMultiSet class, focusing on predicate validation and element management.", "class_members": {"variables": [{"name": "truePredicate", "type": "Predicate<T>"}], "methods": [{"name": "decorateMultiSet", "signature": "protected MultiSet<T> decorateMultiSet(HashMultiSet<T> multiset, Predicate<T> predicate)"}, {"name": "makeTestMultiSet", "signature": "protected MultiSet<T> makeTestMultiSet()"}, {"name": "stringPredicate", "signature": "protected Predicate<T> stringPredicate()"}]}, "fixtures": [], "test_cases": [{"name": "testIllegalAdd", "primary_tested": ["PredicatedMultiSet.add(T)"], "associated_methods": ["PredicatedMultiSet.contains(Object)"], "external_dependencies": {"modules": ["MultiSet", "Predicate", "TruePredicate", "IllegalArgumentException"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests that adding an illegal element (non-string) to the PredicatedMultiSet throws an IllegalArgumentException."}, {"name": "testIllegalDecorate", "primary_tested": ["PredicatedMultiSet.predicatedMultiSet(HashMultiSet<T>, Predicate<T>)"], "associated_methods": [], "external_dependencies": {"modules": ["HashMultiSet", "Predicate", "IllegalArgumentException", "NullPointerException"], "class_members": [{"name": "decorateMultiSet", "type": "method"}, {"name": "stringPredicate", "type": "method"}]}, "category": "unit", "description": "Tests that decorating a HashMultiSet with an illegal element or null predicate throws the appropriate exceptions."}, {"name": "testLegalAddRemove", "primary_tested": ["PredicatedMultiSet.add(T)", "PredicatedMultiSet.remove(Object)"], "associated_methods": ["PredicatedMultiSet.uniqueSet()"], "external_dependencies": {"modules": ["MultiSet", "Predicate", "TruePredicate"], "class_members": [{"name": "makeTestMultiSet", "type": "method"}]}, "category": "unit", "description": "Tests the legal addition and removal of elements in the PredicatedMultiSet, ensuring the unique set is updated correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "testclass_name": "BoundedIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.hamcrest.core.IsNull.nullValue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIteratorTest", "description": "Unit tests for the BoundedIterator class, which decorates an iterator with bounds on the start index and maximum number of elements.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "testList", "type": "List<E>"}], "methods": [{"name": "makeEmptyIterator", "signature": "Iterator<E> makeEmptyIterator()"}, {"name": "makeObject", "signature": "Iterator<E> makeObject()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBounded", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the bounded iterator functionality, ensuring elements are returned within the specified bounds."}, {"name": "testEmptyBounded", "primary_tested": ["BoundedIterator.hasNext()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator with a max of 0, ensuring it behaves as an empty iterator."}, {"name": "testMaxGreaterThanSize", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator when the max is greater than the size of the decorated iterator."}, {"name": "testNegativeMax", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a negative max is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testNegativeOffset", "primary_tested": ["BoundedIterator.BoundedIterator(Iterator<E>, int, int)"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalArgumentException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a negative offset is passed to the BoundedIterator constructor, expecting an IllegalArgumentException."}, {"name": "testOffsetGreaterThanSize", "primary_tested": ["BoundedIterator.hasNext()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator when the offset is greater than the size of the decorated iterator."}, {"name": "testRemoveCalledTwice", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when remove() is called twice without calling next() in between, expecting an IllegalStateException."}, {"name": "testRemoveFirst", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the first element and verifies it is removed from the underlying collection."}, {"name": "testRemoveLast", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing the last element and verifies it is removed from the underlying collection."}, {"name": "testRemoveMiddle", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing an element in the middle of the iterator and verifies it is removed from the underlying collection."}, {"name": "testRemoveUnsupported", "primary_tested": ["BoundedIterator.remove()"], "associated_methods": ["BoundedIterator.next()"], "external_dependencies": {"modules": ["BoundedIterator", "UnsupportedOperationException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when the decorated iterator does not support the remove() method, expecting an UnsupportedOperationException."}, {"name": "testRemoveWithoutCallingNext", "primary_tested": ["BoundedIterator.remove()"], "external_dependencies": {"modules": ["BoundedIterator", "IllegalStateException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when remove() is called without calling next() first, expecting an IllegalStateException."}, {"name": "testSameAsDecorated", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of a bounded iterator with offset 0 and max equal to the size of the decorated iterator, ensuring it returns all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "testclass_name": "UnmodifiableMultiSetTest", "dependencies": ["package org.apache.commons.collections4.multiset;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiSetTest", "description": "Tests for the UnmodifiableMultiSet class, focusing on its unmodifiable behavior and factory methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["UnmodifiableMultiSet.add(E,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that adding an element to an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMultiSet.unmodifiableMultiSet(MultiSet)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for creating an unmodifiable multiset and ensures it throws a NullPointerException when given null."}, {"name": "testEntrySet", "primary_tested": ["UnmodifiableMultiSet.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the entry set of an unmodifiable multiset matches the entry set of the original multiset."}, {"name": "testRemove", "primary_tested": ["UnmodifiableMultiSet.remove(Object,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that removing an element from an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testSetCount", "primary_tested": ["UnmodifiableMultiSet.setCount(E,int)"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that setting the count of an element in an unmodifiable multiset throws an UnsupportedOperationException."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMultiSet.makeObject()", "UnmodifiableMultiSet.makeFullCollection()"], "external_dependencies": {"modules": ["UnmodifiableMultiSet", "HashMultiSet", "Arrays", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the objects created by the factory methods are instances of Unmodifiable."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "testclass_name": "UnmodifiableMapEntryTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMapEntryTest", "description": "Tests for the UnmodifiableMapEntry class, focusing on its unmodifiable behavior and constructor functionalities.", "class_members": {"methods": [{"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry()"}, {"name": "makeMapEntry", "signature": "Map.Entry<K, V> makeMapEntry(K key, V value)"}]}, "test_cases": [{"name": "testAccessorsAndMutators", "primary_tested": ["Map.Entry.getKey()", "Map.Entry.getValue()"], "associated_methods": ["UnmodifiableMapEntryTest.makeMapEntry(K,V)"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the accessor methods (getKey and getValue) of the Map.Entry interface."}, {"name": "testConstructors", "primary_tested": ["UnmodifiableMapEntry.UnmodifiableMapEntry(K,V)", "UnmodifiableMapEntry.UnmodifiableMapEntry(KeyValue<K,V>)", "UnmodifiableMapEntry.UnmodifiableMapEntry(Map.Entry<K,V>)"], "associated_methods": ["Map.Entry.getKey()", "Map.Entry.getValue()"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry", "KeyValue", "DefaultKeyValue"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the constructors of the UnmodifiableMapEntry class."}, {"name": "testSelfReferenceHandling", "primary_tested": [], "external_dependencies": {}, "category": "unit", "description": "Tests the handling of self-references in the UnmodifiableMapEntry class."}, {"name": "testUnmodifiable", "primary_tested": ["Map.Entry.setValue(V)"], "external_dependencies": {"modules": ["Map", "UnmodifiableMapEntry"], "class_members": [{"name": "makeMapEntry", "type": "method"}]}, "category": "unit", "description": "Tests the unmodifiable behavior of the UnmodifiableMapEntry class by attempting to set a value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "testclass_name": "TransformedMultiValuedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.apache.commons.collections4.collection.TransformedCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "TransformedMultiValuedMapTest", "description": "Unit tests for TransformedMultiValuedMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFactory_Decorate", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.get(K)", "MultiValuedMap.size()"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for decorating a MultiValuedMap with transforming capabilities."}, {"name": "testFactory_decorateTransform", "primary_tested": ["TransformedMultiValuedMap.transformedMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.get(K)", "MultiValuedMap.size()"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the factory method for transforming a MultiValuedMap with transforming capabilities."}, {"name": "testKeyTransformedMap", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.size()", "MultiValuedMap.containsKey(Object)", "MultiValuedMap.containsValue(Object)", "MultiValuedMap.get(K)", "MultiValuedMap.remove(Object)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming capabilities of the MultiValuedMap with key transformations."}, {"name": "testValueTransformedMap", "primary_tested": ["TransformedMultiValuedMap.transformingMap(MultiValuedMap,Transformer,Transformer)"], "associated_methods": ["MultiValuedMap.put(K,V)", "MultiValuedMap.size()", "MultiValuedMap.containsValue(Object)", "MultiValuedMap.containsKey(Object)", "MultiValuedMap.get(K)", "MultiValuedMap.remove(Object)"], "external_dependencies": {"modules": ["MultiValuedMap", "ArrayListValuedHashMap", "TransformerUtils", "TransformedCollectionTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transforming capabilities of the MultiValuedMap with value transformations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "testclass_name": "MultiValueMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.Map;", "import org.apache.commons.collections4.AbstractObjectTest;", "import org.apache.commons.collections4.IteratorUtils;", "import org.apache.commons.collections4.MultiMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMapTest", "description": "Unit tests for the MultiValueMap class, focusing on various operations and functionalities.", "class_members": {"variables": [{"name": "DEFAULT_VALUE", "type": "static final int"}], "methods": [{"name": "createTestMap", "signature": "<C extends Collection<V>> MultiValueMap<K, V> createTestMap(Class<C> collectionClass)"}, {"name": "deserialize", "signature": "Object deserialize(byte[] data) throws IOException, ClassNotFoundException"}, {"name": "makeEmptyMap", "signature": "Map makeEmptyMap()"}, {"name": "serialize", "signature": "byte[] serialize(Object object) throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testContainsValue", "primary_tested": ["MultiValueMap.containsValue(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap to check if it correctly identifies the presence of values."}, {"name": "testContainsValue_Key", "primary_tested": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap with key-value pairs to check if it correctly identifies the presence of specific values for a given key."}, {"name": "testEmptyMapCompatibility", "primary_tested": ["MultiValueMap.makeEmptyMap()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "makeEmptyMap", "type": "method"}]}, "category": "unit", "description": "Tests the compatibility of an empty MultiValueMap by comparing it with a deserialized version."}, {"name": "testFullMapCompatibility", "primary_tested": ["MultiValueMap.makeObject()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "description": "Tests the compatibility of a full MultiValueMap by comparing it with a deserialized version."}, {"name": "testGetCollection", "primary_tested": ["MultiValueMap.get(Object)"], "associated_methods": ["MultiValueMap.getCollection(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection associated with a key."}, {"name": "testIterator", "primary_tested": ["MultiValueMap.iterator()"], "associated_methods": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "IteratorUtils"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap to ensure it correctly iterates over the map entries."}, {"name": "testIterator_Key", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly iterates over the values associated with that key."}, {"name": "testKeyContainsValue", "primary_tested": ["MultiValueMap.containsValue(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the containsValue method of MultiValueMap with key-value pairs to check if it correctly identifies the presence of specific values for a given key."}, {"name": "testKeyedIterator", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "IteratorUtils"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly iterates over the values associated with that key."}, {"name": "testMapEquals", "primary_tested": ["MultiValueMap.equals(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the equals method of MultiValueMap to ensure it correctly compares two MultiValueMap instances."}, {"name": "testMultipleValues", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection of multiple values associated with a key."}, {"name": "testNoMappingReturnsNull", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns null when no mapping exists for a given key."}, {"name": "testPutAll_KeyCollection", "primary_tested": ["MultiValueMap.putAll(Object, Collection)"], "external_dependencies": {"modules": ["MultiValueMap", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly adds multiple values to a key."}, {"name": "testPutAll_Map1", "primary_tested": ["MultiValueMap.putAll(Map)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly merges another MultiValueMap into the current one."}, {"name": "testPutAll_Map2", "primary_tested": ["MultiValueMap.putAll(Map)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the putAll method of MultiValueMap to ensure it correctly merges a standard Map into the current MultiValueMap."}, {"name": "testPutWithList", "primary_tested": ["MultiValueMap.put(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": []}, "category": "unit", "description": "Tests the put method of MultiValueMap with a list collection to ensure it correctly adds values to a key."}, {"name": "testPutWithSet", "primary_tested": ["MultiValueMap.put(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "HashSet"], "class_members": []}, "category": "unit", "description": "Tests the put method of MultiValueMap with a set collection to ensure it correctly adds values to a key."}, {"name": "testRemove_KeyItem", "primary_tested": ["MultiValueMap.removeMapping(Object, Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the removeMapping method of MultiValueMap to ensure it correctly removes a specific value from a key."}, {"name": "testRemoveAllViaEntryIterator", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap to ensure it correctly removes all entries when using the iterator's remove method."}, {"name": "testRemoveAllViaIterator", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of MultiValueMap to ensure it correctly removes all values when using the iterator's remove method."}, {"name": "testRemoveAllViaKeyedIterator", "primary_tested": ["MultiValueMap.iterator(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the iterator method of MultiValueMap with a specific key to ensure it correctly removes all values associated with that key."}, {"name": "testSize", "primary_tested": ["MultiValueMap.size()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the size method of MultiValueMap to ensure it correctly returns the number of keys in the map."}, {"name": "testSize_Key", "primary_tested": ["MultiValueMap.size(Object)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the size method of MultiValueMap with a specific key to ensure it correctly returns the number of values associated with that key."}, {"name": "testTotalSize", "primary_tested": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": []}, "category": "unit", "description": "Tests the totalSize method of MultiValueMap to ensure it correctly returns the total number of values in the map."}, {"name": "testTotalSizeA", "primary_tested": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the totalSize method of MultiValueMap to ensure it correctly returns the total number of values in a specific test map."}, {"name": "testUnsafeDeSerialization", "primary_tested": ["MultiValueMap.serialize(Object)", "MultiValueMap.deserialize(byte[])"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": [{"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "unit", "description": "Tests the serialization and deserialization methods of MultiValueMap to ensure they correctly handle unsafe deserialization."}, {"name": "testValueCollectionType", "primary_tested": ["MultiValueMap.get(Object)"], "external_dependencies": {"modules": ["MultiValueMap", "LinkedList"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the get method of MultiValueMap to ensure it returns the correct collection type (LinkedList) associated with a key."}, {"name": "testValues", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap", "HashSet"], "class_members": [{"name": "createTestMap", "type": "method"}]}, "category": "unit", "description": "Tests the values method of MultiValueMap to ensure it correctly returns all values in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "testclass_name": "OrderedPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.io.FileNotFoundException;", "import java.io.FileReader;", "import java.io.IOException;", "import java.util.Collections;", "import java.util.Enumeration;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.jupiter.api.Test;"], "name": "OrderedPropertiesTest", "description": "Unit tests for the OrderedProperties class, focusing on various operations like compute, merge, put, and remove.", "class_members": {"variables": [], "methods": [{"name": "assertAscendingOrder", "signature": "void assertAscendingOrder(OrderedProperties)"}, {"name": "assertDescendingOrder", "signature": "OrderedProperties assertDescendingOrder(OrderedProperties)"}, {"name": "loadOrderedKeysReverse", "signature": "OrderedProperties loadOrderedKeysReverse() throws FileNotFoundException, IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCompute", "primary_tested": ["OrderedProperties.compute(String,BiFunction)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the compute functionality of OrderedProperties, ensuring keys and values are computed and ordered correctly."}, {"name": "testComputeIfAbsent", "primary_tested": ["OrderedProperties.computeIfAbsent(String,Function)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the computeIfAbsent functionality of OrderedProperties, ensuring keys and values are computed if absent and ordered correctly."}, {"name": "testEntrySet", "primary_tested": ["OrderedProperties.entrySet()"], "external_dependencies": {"modules": ["OrderedProperties", "Map"]}, "category": "unit", "description": "Tests the entrySet functionality of OrderedProperties, ensuring entries are iterated and ordered correctly."}, {"name": "testForEach", "primary_tested": ["OrderedProperties.forEach(BiConsumer)"], "external_dependencies": {"modules": ["OrderedProperties", "AtomicInteger"]}, "category": "unit", "description": "Tests the forEach functionality of OrderedProperties, ensuring keys and values are iterated and ordered correctly."}, {"name": "testKeys", "primary_tested": ["OrderedProperties.keys()"], "external_dependencies": {"modules": ["OrderedProperties"]}, "category": "unit", "description": "Tests the keys functionality of OrderedProperties, ensuring keys are iterated and ordered correctly."}, {"name": "testLoadOrderedKeys", "primary_tested": ["OrderedProperties.load(Reader)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "FileReader"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the load functionality of OrderedProperties, ensuring properties are loaded from a file and ordered correctly."}, {"name": "testLoadOrderedKeysReverse", "primary_tested": ["OrderedProperties.load(Reader)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "FileReader"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the load functionality of OrderedProperties, ensuring properties are loaded from a file in reverse order and ordered correctly."}, {"name": "testMerge", "primary_tested": ["OrderedProperties.merge(String,Object,BiFunction)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the merge functionality of OrderedProperties, ensuring keys and values are merged and ordered correctly."}, {"name": "testPut", "primary_tested": ["OrderedProperties.put(String,String)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the put functionality of OrderedProperties, ensuring keys and values are added and ordered correctly."}, {"name": "testPutAll", "primary_tested": ["OrderedProperties.putAll(Map)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties", "Map"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the putAll functionality of OrderedProperties, ensuring all keys and values from a map are added and ordered correctly."}, {"name": "testPutIfAbsent", "primary_tested": ["OrderedProperties.putIfAbsent(String,String)"], "associated_methods": ["OrderedProperties.clear()"], "external_dependencies": {"modules": ["OrderedProperties"], "class_members": [{"name": "assertAscendingOrder", "type": "method"}, {"name": "assertDescendingOrder", "type": "method"}]}, "category": "unit", "description": "Tests the putIfAbsent functionality of OrderedProperties, ensuring keys and values are added if absent and ordered correctly."}, {"name": "testRemoveKey", "primary_tested": ["OrderedProperties.remove(Object)"], "associated_methods": ["OrderedProperties.contains(Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Collections"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of OrderedProperties, ensuring a key is removed and does not exist in the properties."}, {"name": "testRemoveKeyValue", "primary_tested": ["OrderedProperties.remove(Object,Object)"], "associated_methods": ["OrderedProperties.contains(Object)", "OrderedProperties.containsKey(Object)"], "external_dependencies": {"modules": ["OrderedProperties", "Collections"], "class_members": [{"name": "loadOrderedKeysReverse", "type": "method"}]}, "category": "unit", "description": "Tests the remove functionality of OrderedProperties, ensuring a key-value pair is removed and does not exist in the properties."}, {"name": "testToString", "primary_tested": ["OrderedProperties.toString()"], "external_dependencies": {"modules": ["OrderedProperties"]}, "category": "unit", "description": "Tests the toString functionality of OrderedProperties, ensuring the string representation is correct and ordered."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "testclass_name": "Flat3MapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.apache.commons.collections4.BulkTest;", "import org.apache.commons.collections4.IterableMap;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.iterators.AbstractMapIteratorTest;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "testclass_name": "DefaultBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.TreeSet;", "import java.util.function.IntPredicate;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBloomFilterTest", "description": "Unit tests for the DefaultBloomFilter class, focusing on various functionalities like merging, cardinality, and intersection estimation.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AbstractDefaultBloomFilter", "description": "Abstract class implementing BloomFilter interface with common functionalities."}, {"name": "BrokenCardinality", "description": "Subclass of NonSparseDefaultBloomFilter with a broken cardinality method."}, {"name": "NonSparseDefaultBloomFilter", "description": "Default implementation of a non-sparse Bloom filter."}, {"name": "SparseDefaultBloomFilter", "description": "Default implementation of a sparse Bloom filter."}]}, "fixtures": [], "test_cases": [{"name": "testDefaultBloomFilterSimpleSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(Hasher)"], "associated_methods": ["AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["Shape", "Hasher", "IncrementingHasher"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "description": "Tests the merge functionality of the DefaultBloomFilter with a simple specific hasher."}, {"name": "testDefaultBloomFilterSparseSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(IndexExtractor)"], "associated_methods": ["AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["Shape", "IncrementingHasher"], "class_members": [{"name": "filter", "type": "variable"}]}, "category": "unit", "description": "Tests the merge functionality of the DefaultBloomFilter with a sparse specific hasher."}, {"name": "testEstimateLargeN", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateN()"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMaps"], "class_members": [{"name": "bf1", "type": "variable"}]}, "category": "unit", "description": "Tests the estimation of large N in a BloomFilter."}, {"name": "testEstimateNWithBrokenCardinality", "primary_tested": ["BrokenCardinality.estimateN()"], "external_dependencies": {"modules": ["TestingHashers", "BrokenCardinality"], "class_members": [{"name": "filter1", "type": "variable"}]}, "category": "unit", "description": "Tests the estimation of N in a BloomFilter with broken cardinality."}, {"name": "testHasherBasedMergeWithDifferingSparseness", "primary_tested": ["NonSparseDefaultBloomFilter.merge(Hasher)", "SparseDefaultBloomFilter.merge(Hasher)"], "associated_methods": ["BitMapExtractor.fromIndexExtractor(IndexExtractor, int).processBitMapPairs(BloomFilter, LongBinaryOperator)"], "external_dependencies": {"modules": ["Hasher", "IncrementingHasher", "BitMapExtractor"], "class_members": [{"name": "bf1", "type": "variable"}]}, "category": "unit", "description": "Tests the merge functionality with hashers of differing sparseness."}, {"name": "testIntersectionLimit", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateIntersection(BloomFilter)"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMaps"], "class_members": [{"name": "bf1", "type": "variable"}]}, "category": "unit", "description": "Tests the intersection estimation in a BloomFilter."}, {"name": "testSparseNonSparseMerging", "primary_tested": ["SparseDefaultBloomFilter.merge(Hasher)", "NonSparseDefaultBloomFilter.merge(Hasher)"], "associated_methods": ["SparseDefaultBloomFilter.copy()", "NonSparseDefaultBloomFilter.copy()", "BloomFilter.cardinality()"], "external_dependencies": {"modules": ["TestingHashers"], "class_members": [{"name": "bf1", "type": "variable"}, {"name": "bf2", "type": "variable"}, {"name": "result", "type": "variable"}]}, "category": "unit", "description": "Tests the merging of sparse and non-sparse BloomFilters."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "testclass_name": "DefaultAbstractLinkedListForJava21Test", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "DefaultAbstractLinkedListForJava21Test", "description": "Unit tests for the DefaultAbstractLinkedListForJava21 class, focusing on various operations like adding, removing, and sublist manipulations.", "class_members": {"variables": [], "methods": [{"name": "checkNodes", "signature": "void checkNodes()"}], "nested_classes": [{"name": "DefaultAbstractLinkedListForJava21", "description": "Internal class extending AbstractLinkedListForJava21 with serialization methods."}]}, "fixtures": [], "test_cases": [{"name": "testAddNodeAfter", "primary_tested": ["AbstractLinkedListForJava21.addNodeAfter(Node,E)"], "associated_methods": ["AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.getFirst()", "AbstractLinkedListForJava21.getLast()", "AbstractLinkedListForJava21.removeFirst()", "AbstractLinkedListForJava21.getNode(int,boolean)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of adding a node after a specified node in the list."}, {"name": "testGetNode", "primary_tested": ["AbstractLinkedListForJava21.getNode(int,boolean)"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.removeNode(Node)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "IndexOutOfBoundsException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of retrieving nodes from the list and handling index out of bounds exceptions."}, {"name": "testRemoveFirst", "primary_tested": ["AbstractLinkedListForJava21.removeFirst()"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addLast(E)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing the first element from the list."}, {"name": "testRemoveLast", "primary_tested": ["AbstractLinkedListForJava21.removeLast()"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "UnsupportedOperationException", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing the last element from the list."}, {"name": "testRemoveNode", "primary_tested": ["AbstractLinkedListForJava21.removeNode(Node)"], "associated_methods": ["AbstractLinkedListForJava21.addAll(Collection)", "AbstractLinkedListForJava21.addFirst(E)", "AbstractLinkedListForJava21.getFirst()", "AbstractLinkedListForJava21.getLast()", "AbstractLinkedListForJava21.getNode(int,boolean)"], "external_dependencies": {"modules": ["AbstractLinkedListForJava21", "Arrays"], "class_members": [{"name": "checkNodes", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of removing a specific node from the list."}, {"name": "testSubList", "primary_tested": ["List.subList(int,int)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of creating and using sublists from the main list."}, {"name": "testSubListAddBegin", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the beginning of a sublist."}, {"name": "testSubListAddEnd", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the end of a sublist."}, {"name": "testSubListAddMiddle", "primary_tested": ["List.subList(int,int).add(E)"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of adding elements to the middle of a sublist."}, {"name": "testSubListRemove", "primary_tested": ["List.subList(int,int).remove(Object)", "List.subList(int,int).remove(int)", "List.subList(int,int).clear()"], "associated_methods": [], "external_dependencies": {"modules": ["List"], "class_members": []}, "category": "unit", "description": "Tests the functionality of removing elements from a sublist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "testclass_name": "HashSetValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.SetValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "HashSetValuedHashMapTest", "description": "Unit tests for HashSetValuedHashMap, a MultiValuedMap implementation.", "class_members": {"variables": [], "methods": [{"name": "getIterationBehaviour", "signature": "int getIterationBehaviour()"}, {"name": "isHashSetValue", "signature": "boolean isHashSetValue()"}, {"name": "makeConfirmedMap", "signature": "MultiValuedMap<K, V> makeConfirmedMap()"}, {"name": "makeObject", "signature": "SetValuedMap<K, V> makeObject()"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashSetValuedHashMap_2", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashMap", "HashSetValuedHashMap", "SetValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and size of a HashSetValuedHashMap from a HashMap."}, {"name": "testHashSetValueHashMap", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of values to a HashSetValuedHashMap and checks the size."}, {"name": "testHashSetValueHashMap_1", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["ArrayListValuedHashMap", "HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and comparison of two HashSetValuedHashMaps."}, {"name": "testSetValuedMapAdd", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of values to a SetValuedMap and checks the size and key presence."}, {"name": "testSetValuedMapEqualsHashCodeContract", "primary_tested": ["HashSetValuedHashMap.equals(Object)", "HashSetValuedHashMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the equality and hash code contract of two SetValuedMaps."}, {"name": "testSetValuedMapRemove", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of values from a SetValuedMap and checks the size and key presence."}, {"name": "testSetValuedMapRemoveViaIterator", "primary_tested": ["HashSetValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["HashSetValuedHashMap", "SetValuedMap"], "class_members": [{"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of values from a SetValuedMap via an iterator and checks the size and key presence."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "testclass_name": "DefaultKeyValueTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.Test;"], "name": "DefaultKeyValueTest", "description": "Unit tests for the DefaultKeyValue class, focusing on its constructors, accessors, mutators, and other functionalities.", "class_members": {"variables": [{"name": "key", "type": "String"}, {"name": "value", "type": "String"}], "methods": [{"name": "makeDefaultKeyValue", "signature": "DefaultKeyValue<K, V> makeDefaultKeyValue()"}, {"name": "makeDefaultKeyValue", "signature": "DefaultKeyValue<K, V> makeDefaultKeyValue(K key, V value)"}]}, "test_cases": [{"name": "testAccessorsAndMutators", "primary_tested": ["DefaultKeyValue.setKey(K)", "DefaultKeyValue.getKey()", "DefaultKeyValue.setValue(V)", "DefaultKeyValue.getValue()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the accessors and mutators of the DefaultKeyValue class."}, {"name": "testConstructors", "primary_tested": ["DefaultKeyValue.DefaultKeyValue()", "DefaultKeyValue.DefaultKeyValue(K, V)", "DefaultKeyValue.DefaultKeyValue(DefaultKeyValue<K, V>)", "DefaultKeyValue.DefaultKeyValue(Map.Entry<K, V>)"], "external_dependencies": {"modules": ["DefaultKeyValue", "Map", "HashMap"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the constructors of the DefaultKeyValue class."}, {"name": "testEqualsAndHashCode", "primary_tested": ["DefaultKeyValue.equals(Object)", "DefaultKeyValue.hashCode()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the equals and hashCode methods of the DefaultKeyValue class."}, {"name": "testSelfReferenceHandling", "primary_tested": ["DefaultKeyValue.setKey(K)", "DefaultKeyValue.setValue(V)"], "external_dependencies": {"modules": ["DefaultKeyValue"]}, "category": "unit", "description": "Tests the handling of self-reference in the DefaultKeyValue class to prevent infinite recursion."}, {"name": "testToMapEntry", "primary_tested": ["DefaultKeyValue.toMapEntry()"], "external_dependencies": {"modules": ["DefaultKeyValue", "Map", "HashMap"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of DefaultKeyValue to a Map.Entry."}, {"name": "testToString", "primary_tested": ["DefaultKeyValue.toString()"], "external_dependencies": {"modules": ["DefaultKeyValue"], "class_members": [{"name": "key", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the toString method of the DefaultKeyValue class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "testclass_name": "FilterListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Random;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.PredicateUtils;", "import org.apache.commons.collections4.list.GrowthList;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIteratorTest", "description": "Unit tests for the FilterListIterator class, which filters elements of a list based on a predicate.", "class_members": {"variables": [{"name": "list", "type": "ArrayList<Integer>"}, {"name": "odds", "type": "ArrayList<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "threes", "type": "ArrayList<Integer>"}, {"name": "fours", "type": "ArrayList<Integer>"}, {"name": "sixes", "type": "ArrayList<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "falsePred", "type": "Predicate<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}, {"name": "threePred", "type": "Predicate<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}, {"name": "random", "type": "Random"}], "methods": [{"name": "nextNextPrevious", "signature": "void nextNextPrevious(ListIterator<?>, ListIterator<?>)"}, {"name": "previousPreviousNext", "signature": "void previousPreviousNext(ListIterator<?>, ListIterator<?>)"}, {"name": "walkBackward", "signature": "void walkBackward(ListIterator<?>, ListIterator<?>)"}, {"name": "walkForward", "signature": "void walkForward(ListIterator<?>, ListIterator<?>)"}, {"name": "walkLists", "signature": "void walkLists(List<E>, ListIterator<E>)"}], "nested_classes": []}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testCollections360", "primary_tested": ["FilterListIterator.hasNext()", "FilterListIterator.hasPrevious()"], "external_dependencies": {"modules": ["GrowthList", "PredicateUtils", "FilterListIterator"], "class_members": [{"name": "truePred", "type": "variable"}], "project_specific_resources": ["PredicateUtils.anyPredicate(Collection<Predicate<Object>>)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext and hasPrevious methods of FilterListIterator for an empty list."}, {"name": "testEvens", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evens", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with an even number predicate."}, {"name": "testFailingHasNextBug", "primary_tested": ["FilterListIterator.hasNext()", "FilterListIterator.hasPrevious()", "FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext and hasPrevious methods of FilterListIterator for a list filtered by a four predicate."}, {"name": "testFalsePredicate", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "falsePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a false predicate."}, {"name": "testFours", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a four predicate."}, {"name": "testManual", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator manually with a three predicate."}, {"name": "testNestedSixes", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with a three and even predicate."}, {"name": "testNestedSixes2", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "evenPred", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with an even and three predicate."}, {"name": "testNestedSixes3", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "sixes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "evenPred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests nested FilterListIterators with a three, even, and true predicate."}, {"name": "testNextChangesPrevious", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "associated_methods": ["FilterListIteratorTest.nextNextPrevious(ListIterator<?>, ListIterator<?>)"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if calls to next() change the value returned by previous() in FilterListIterator."}, {"name": "testOdds", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with an odd number predicate."}, {"name": "testPreviousChangesNext", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "associated_methods": ["FilterListIteratorTest.previousPreviousNext(ListIterator<?>, ListIterator<?>)"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if calls to previous() change the value returned by next() in FilterListIterator."}, {"name": "testThrees", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threes", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a three predicate."}, {"name": "testTruePredicate", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the FilterListIterator with a true predicate."}, {"name": "testWalkLists", "primary_tested": ["FilterListIterator.next()", "FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the walkLists utility method with a list iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "testclass_name": "ArrayListValuedHashMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashMap;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Map;", "import org.apache.commons.collections4.ListValuedMap;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "ArrayListValuedHashMapTest", "description": "Unit tests for the ArrayListValuedHashMap class, focusing on its functionality and behavior.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testArrayListValuedHashMap", "primary_tested": ["ArrayListValuedHashMap.get(K)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation and basic functionality of ArrayListValuedHashMap."}, {"name": "testEqualsHashCodeContract", "primary_tested": ["MultiValuedMap.equals(Object)", "MultiValuedMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["MultiValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode contract for MultiValuedMap."}, {"name": "testListValuedMapAdd", "primary_tested": ["ListValuedMap.get(K)", "List.add(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a ListValuedMap."}, {"name": "testListValuedMapAddViaListIterator", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.add(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a ListValuedMap via ListIterator."}, {"name": "testListValuedMapEqualsHashCodeContract", "primary_tested": ["ListValuedMap.equals(Object)", "ListValuedMap.hashCode()"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals and hashCode contract for ListValuedMap."}, {"name": "testListValuedMapRemove", "primary_tested": ["ListValuedMap.get(K)", "List.remove(int)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of elements from a ListValuedMap."}, {"name": "testListValuedMapRemoveViaListIterator", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.remove()"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of elements from a ListValuedMap via ListIterator."}, {"name": "testTrimToSize", "primary_tested": ["ArrayListValuedHashMap.trimToSize()"], "associated_methods": [], "external_dependencies": {"modules": ["ArrayListValuedHashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the trimToSize method of ArrayListValuedHashMap."}, {"name": "testValuesListIteratorMethods", "primary_tested": ["ListValuedMap.get(K)", "ListIterator.hasNext()", "ListIterator.next()", "ListIterator.hasPrevious()", "ListIterator.previous()", "ListIterator.nextIndex()", "ListIterator.previousIndex()", "ListIterator.set(V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "ListIterator", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the methods of ListIterator on a ListValuedMap."}, {"name": "testWrappedListAdd", "primary_tested": ["ListValuedMap.get(K)", "List.add(int,V)", "List.set(int,V)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of elements to a wrapped list in ListValuedMap."}, {"name": "testWrappedListAddAll", "primary_tested": ["ListValuedMap.get(K)", "List.addAll(int,Collection)", "List.get(int)", "List.indexOf(Object)", "List.lastIndexOf(Object)", "List.subList(int,int)"], "associated_methods": [], "external_dependencies": {"modules": ["ListValuedMap", "List", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of multiple elements to a wrapped list in ListValuedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "testclass_name": "ShapeTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.CsvSource;"], "name": "ShapeTest", "description": "Unit tests for the Shape class, which is part of the Bloom filter implementation in Apache Commons Collections.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}]}, "fixtures": [], "test_cases": [{"name": "testBadNumberOfBits", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the number of bits is less than 1."}, {"name": "testBadNumberOfHashFunctions", "primary_tested": ["Shape.fromKM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromPMK(double,int,int)", "Shape.fromNM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the number of hash functions is less than 1."}, {"name": "testBadNumberOfItems", "primary_tested": ["Shape.fromNM(int,int)", "Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the number of items is less than 1."}, {"name": "testBadProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.fromNP(int,double)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Double"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the calculated probability is greater than or equal to 1."}, {"name": "testEqualsAndHashCode", "primary_tested": ["Shape.fromKM(int,int)"], "associated_methods": ["Shape.hashCode()", "Shape.equals(Object)"], "external_dependencies": {"modules": ["Arrays", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the equality and hash code of Shape instances."}, {"name": "testEstimateN", "primary_tested": ["Shape.estimateN(int)"], "external_dependencies": {"modules": ["Math"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the estimation of the number of items based on the number of bits."}, {"name": "testFromKM", "primary_tested": ["Shape.fromKM(int,int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the number of bits or hash functions is less than 1."}, {"name": "testFromNM", "primary_tested": ["Shape.fromNM(int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException"], "class_members": []}, "category": "unit", "description": "Tests that the number of items and number of bits are passed correctly and other values are calculated."}, {"name": "testFromNMK", "primary_tested": ["Shape.fromNMK(int,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Integer"], "class_members": []}, "category": "unit", "description": "Tests that when the number of items, number of bits, and number of hash functions are passed, the values are calculated correctly."}, {"name": "testFromNP", "primary_tested": ["Shape.fromNP(int,double)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability and number of items."}, {"name": "testFromPMK", "primary_tested": ["Shape.fromPMK(double,int,int)"], "associated_methods": ["Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": ["IllegalArgumentException", "Math"], "class_members": []}, "category": "unit", "description": "Tests the calculated values of calling the constructor with the probability, number of bits, and number of hash functions."}, {"name": "testGetProbability", "primary_tested": ["Shape.getProbability(int)"], "external_dependencies": {"modules": ["Math", "IllegalArgumentException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the calculation of the probability based on the number of items."}, {"name": "testIsSparse", "primary_tested": ["Shape.fromKM(int,int)", "Shape.isSparse(int)"], "external_dependencies": {"modules": ["Long", "Integer"], "class_members": []}, "category": "unit", "description": "Tests the sparsity calculation based on the number of items and bits."}, {"name": "testProbability", "primary_tested": ["Shape.fromNMK(int,int,int)", "Shape.getNumberOfBits()", "Shape.getNumberOfHashFunctions()", "Shape.getProbability(int)"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests the calculation of the probability."}, {"name": "testToString", "primary_tested": ["Shape.fromKM(int,int)", "Shape.toString()"], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "description": "Tests the string representation of the Shape instance."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "testclass_name": "UnmodifiableMultiValuedMapTest", "dependencies": ["package org.apache.commons.collections4.multimap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.Map.Entry;", "import java.util.Set;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.MultiSet;", "import org.apache.commons.collections4.MultiValuedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.AbstractCollectionTest;", "import org.junit.jupiter.api.Test;"], "name": "UnmodifiableMultiValuedMapTest", "description": "Tests for the UnmodifiableMultiValuedMap class, focusing on its unmodifiable behavior and exceptions thrown for modification attempts.", "class_members": {"variables": [], "methods": [{"name": "assertMapContainsAllValues", "signature": "void assertMapContainsAllValues(MultiValuedMap<K, V> map)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddException", "primary_tested": ["MultiValuedMap.put(K,V)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to add an element to an unmodifiable map."}, {"name": "testClearException", "primary_tested": ["MultiValuedMap.clear()"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to clear an unmodifiable map."}, {"name": "testDecorateFactory", "primary_tested": ["UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "MultiValuedMap"], "class_members": []}, "category": "unit", "description": "Tests that the decorate factory method returns the same map instance."}, {"name": "testDecoratorFactoryNullMap", "primary_tested": ["UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "NullPointerException"], "class_members": []}, "category": "unit", "description": "Tests that a NullPointerException is thrown when attempting to decorate a null map."}, {"name": "testPutAllException", "primary_tested": ["MultiValuedMap.putAll(MultiValuedMap<K, V>)", "MultiValuedMap.putAll(Map<K, V>)", "MultiValuedMap.putAll(K, Collection<V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "ArrayListValuedHashMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to use putAll methods on an unmodifiable map."}, {"name": "testRemoveException", "primary_tested": ["MultiValuedMap.remove(Object)"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to remove an element from an unmodifiable map."}, {"name": "testRemoveMappingException", "primary_tested": ["MultiValuedMap.removeMapping(Object, Object)"], "associated_methods": ["UnmodifiableMultiValuedMapTest.assertMapContainsAllValues(MultiValuedMap<K, V>)"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException"], "class_members": []}, "category": "unit", "description": "Tests that an UnsupportedOperationException is thrown when attempting to remove a mapping from an unmodifiable map."}, {"name": "testUnmodifiable", "primary_tested": ["UnmodifiableMultiValuedMap.makeObject()", "UnmodifiableMultiValuedMap.makeFullMap()"], "external_dependencies": {"modules": ["UnmodifiableMultiValuedMap", "Unmodifiable"], "class_members": []}, "category": "unit", "description": "Tests that the created maps are instances of Unmodifiable."}, {"name": "testUnmodifiableAsMap", "primary_tested": ["MultiValuedMap.asMap()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "Map"], "class_members": []}, "category": "unit", "description": "Tests that the asMap view of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableEntries", "primary_tested": ["MultiValuedMap.entries()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "Iterator", "Entry"], "class_members": []}, "category": "unit", "description": "Tests that the entries collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableKeys", "primary_tested": ["MultiValuedMap.keys()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "MultiSet", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests that the keys collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableKeySet", "primary_tested": ["MultiValuedMap.keySet()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "Set", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests that the keySet of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableMapIterator", "primary_tested": ["MultiValuedMap.mapIterator()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "MapIterator"], "class_members": []}, "category": "unit", "description": "Tests that the mapIterator of the unmodifiable map throws UnsupportedOperationException for modification attempts."}, {"name": "testUnmodifiableValues", "primary_tested": ["MultiValuedMap.values()"], "external_dependencies": {"modules": ["MultiValuedMap", "UnsupportedOperationException", "Collection", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests that the values collection of the unmodifiable map throws UnsupportedOperationException for modification attempts."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "testclass_name": "LayeredBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.time.Duration;", "import java.time.Instant;", "import java.util.ArrayList;", "import java.util.Deque;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Consumer;", "import java.util.function.Predicate;", "import java.util.function.Supplier;", "import org.apache.commons.collections4.bloomfilter.LayerManager.Cleanup;", "import org.apache.commons.collections4.bloomfilter.LayerManager.ExtendCheck;", "import org.junit.jupiter.api.Test;"], "name": "LayeredBloomFilterTest", "description": "Unit tests for the LayeredBloomFilter class, focusing on various functionalities such as cleanup, expiration, finding elements, and managing layers.", "class_members": {"variables": [{"name": "dbgInstrument", "type": "static final List<String>"}], "methods": [{"name": "createEmptyFilter", "signature": "protected LayeredBloomFilter<BloomFilter> createEmptyFilter(Shape shape)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(Hasher h)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(IndexExtractor p)"}, {"name": "makeFilter", "signature": "protected BloomFilter makeFilter(int... values)"}, {"name": "setupFindTest", "signature": "private LayeredBloomFilter<BloomFilter> setupFindTest()"}], "nested_classes": [{"name": "AdvanceOnTimeQuanta", "description": "A Predicate that advances after a quantum of time."}, {"name": "CleanByTime", "description": "A Consumer that cleans the list based on how long each filter has been in the list."}, {"name": "NumberedBloomFilter", "description": "A Bloom filter implementation that includes a value and sequence number."}, {"name": "TimestampedBloomFilter", "description": "A Bloom filter implementation that tracks the creation time."}]}, "fixtures": [], "test_cases": [{"name": "testCardinalityAndIsEmpty", "primary_tested": ["LayeredBloomFilter.testCardinalityAndIsEmpty(LayeredBloomFilter)"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "LayeredBloomFilter"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the cardinality and emptiness of the LayeredBloomFilter."}, {"name": "testCleanup", "primary_tested": ["LayeredBloomFilter.cleanup()"], "associated_methods": ["NumberedBloomFilter.value--", "LayeredBloomFilter.getDepth()", "LayeredBloomFilter.merge(Hasher)", "LayeredBloomFilter.next()", "LayeredBloomFilter.get(int)"], "external_dependencies": {"modules": ["LayerManager", "NumberedBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the cleanup functionality of the LayeredBloomFilter."}, {"name": "testEstimateUnionCrossTypes", "primary_tested": ["BloomFilter.estimateUnion(BloomFilter)"], "external_dependencies": {"modules": ["BloomFilter", "DefaultBloomFilterTest.SparseDefaultBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the estimated union calculations between different types of BloomFilters."}, {"name": "testExpiration", "primary_tested": ["LayeredBloomFilter.processBloomFilters(Predicate)"], "associated_methods": ["TimestampedBloomFilter.getTimestamp()", "LayeredBloomFilter.getDepth()", "LayeredBloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TimestampedBloomFilter", "TestingHashers"], "class_members": [{"name": "createTimedLayeredFilter", "type": "method"}]}, "category": "unit", "description": "Tests the expiration functionality of the LayeredBloomFilter."}, {"name": "testFindBitMapExtractor", "primary_tested": ["LayeredBloomFilter.find(BitMapExtractor)"], "associated_methods": ["TestingHashers.FROM1.indices(Shape)", "BitMapExtractor.fromIndexExtractor(IndexExtractor, int)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "BitMapExtractor", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality using BitMapExtractor in the LayeredBloomFilter."}, {"name": "testFindBloomFilter", "primary_tested": ["LayeredBloomFilter.find(Hasher)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality using BloomFilter in the LayeredBloomFilter."}, {"name": "testFindIndexExtractor", "primary_tested": ["LayeredBloomFilter.find(IndexExtractor)"], "associated_methods": ["TestingHashers.FROM1.indices(Shape)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "setupFindTest", "type": "method"}]}, "category": "unit", "description": "Tests the find functionality using IndexExtractor in the LayeredBloomFilter."}, {"name": "testGetLayer", "primary_tested": ["LayeredBloomFilter.get(int)"], "associated_methods": ["SimpleBloomFilter.asBitMapArray()"], "external_dependencies": {"modules": ["LayeredBloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of a specific layer in the LayeredBloomFilter."}, {"name": "testMultipleFilters", "primary_tested": ["LayeredBloomFilter.contains(BloomFilter)", "LayeredBloomFilter.copy().contains(BloomFilter)", "LayeredBloomFilter.flatten().contains(BloomFilter)"], "associated_methods": ["LayeredBloomFilter.getDepth()", "LayeredBloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}, {"name": "makeFilter", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of managing multiple filters in the LayeredBloomFilter."}, {"name": "testNext", "primary_tested": ["LayeredBloomFilter.next()"], "associated_methods": ["LayeredBloomFilter.getDepth()", "LayeredBloomFilter.merge(Hasher)", "LayeredBloomFilter.get(int).contains(Hasher)"], "external_dependencies": {"modules": ["LayeredBloomFilter", "LayerManager", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "createEmptyFilter", "type": "method"}]}, "category": "unit", "description": "Tests the next functionality of the LayeredBloomFilter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "testclass_name": "SetOperationsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.function.ToDoubleBiFunction;", "import java.util.function.ToIntBiFunction;", "import org.junit.jupiter.api.Test;"], "name": "SetOperationsTest", "description": "Unit tests for various set operations on BloomFilter objects.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(double, ToDoubleBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(int, ToIntBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, Hasher)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, IndexExtractor)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAndCardinality", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects."}, {"name": "testAndCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects with different lengths."}, {"name": "testCommutativityOnMismatchedSizes", "primary_tested": ["SetOperations.orCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.xorCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.andCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.hammingDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineSimilarity(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardSimilarity(BitMapExtractor,BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": []}, "category": "unit", "description": "Tests the commutativity of various set operations on BitMapExtractor objects with mismatched sizes."}, {"name": "testCosineDistance", "primary_tested": ["SetOperations.cosineDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine distance on BloomFilter objects."}, {"name": "testCosineSimilarity", "primary_tested": ["SetOperations.cosineSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine similarity on BloomFilter objects."}, {"name": "testHammingDistance", "primary_tested": ["SetOperations.hammingDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Hamming distance on BloomFilter objects."}, {"name": "testJaccardDistance", "primary_tested": ["SetOperations.jaccardDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard distance on BloomFilter objects."}, {"name": "testJaccardSimilarity", "primary_tested": ["SetOperations.jaccardSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard similarity on BloomFilter objects."}, {"name": "testOrCardinality", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects."}, {"name": "testOrCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects with different lengths."}, {"name": "testXorCardinality", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects."}, {"name": "testXorCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects with different lengths."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "testclass_name": "EmptyPropertiesTest", "dependencies": ["package org.apache.commons.collections4.properties;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.PrintStream;", "import java.io.PrintWriter;", "import java.io.UnsupportedEncodingException;", "import java.nio.charset.StandardCharsets;", "import java.util.HashMap;", "import java.util.Properties;", "import org.apache.commons.io.input.NullReader;", "import org.apache.commons.lang3.ArrayUtils;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "testclass_name": "MultiKeyTest", "dependencies": ["package org.apache.commons.collections4.keyvalue;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.DynamicTest.dynamicTest;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.DynamicTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.TestFactory;"], "name": "MultiKeyTest", "description": "Unit tests for the MultiKey class, focusing on constructors, equality, serialization, and key retrieval.", "class_members": {"variables": [{"name": "ONE", "type": "Integer"}, {"name": "TWO", "type": "Integer"}, {"name": "THREE", "type": "Integer"}, {"name": "FOUR", "type": "Integer"}, {"name": "FIVE", "type": "Integer"}], "nested_classes": [{"name": "DerivedMultiKey", "description": "A derived class extending MultiKey, providing additional methods to retrieve keys."}, {"name": "SystemHashCodeSimulatingKey", "description": "A class simulating a system hash code change after deserialization."}]}, "test_cases": [{"name": "testConstructors", "primary_tested": ["MultiKey.MultiKey(Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer,Integer)", "MultiKey.MultiKey(Integer,Integer,Integer,Integer,Integer)", "MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the various constructors of the MultiKey class."}, {"name": "testConstructorsByArray", "primary_tested": ["MultiKey.MultiKey(Integer[])", "MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the constructors of the MultiKey class that accept arrays of keys."}, {"name": "testConstructorsByArrayNull", "primary_tested": ["MultiKey.MultiKey(Integer[])", "MultiKey.MultiKey(Integer[],boolean)"], "external_dependencies": {"modules": ["MultiKey", "Integer"]}, "category": "unit", "description": "Tests the constructors of the MultiKey class with null arrays, expecting NullPointerException."}, {"name": "testEquals", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey", "Integer", "StringUtils"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the equality method of the MultiKey class."}, {"name": "testEqualsAfterSerialization", "primary_tested": ["MultiKey.equals(Object)"], "external_dependencies": {"modules": ["MultiKey", "Integer", "SystemHashCodeSimulatingKey", "HashMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the equality of MultiKey after serialization and deserialization."}, {"name": "testEqualsAfterSerializationOfDerivedClass", "primary_tested": ["DerivedMultiKey.equals(Object)"], "external_dependencies": {"modules": ["DerivedMultiKey", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests the equality of DerivedMultiKey after serialization and deserialization."}, {"name": "testGetIndexed", "primary_tested": ["MultiKey.getKey(int)"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKey method of the MultiKey class."}, {"name": "testGetKeysArrayConstructorCloned", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of the MultiKey class with a cloned array constructor."}, {"name": "testGetKeysArrayConstructorNonCloned", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of the MultiKey class with a non-cloned array constructor."}, {"name": "testGetKeysSimpleConstructor", "primary_tested": ["MultiKey.getKeys()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the getKeys method of the MultiKey class with a simple constructor."}, {"name": "testHashCode", "primary_tested": ["MultiKey.hashCode()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}]}, "category": "unit", "description": "Tests the hashCode method of the MultiKey class."}, {"name": "testSize", "primary_tested": ["MultiKey.size()"], "external_dependencies": {"modules": ["MultiKey", "Integer"], "class_members": [{"name": "ONE", "type": "variable"}, {"name": "TWO", "type": "variable"}, {"name": "THREE", "type": "variable"}, {"name": "FOUR", "type": "variable"}, {"name": "FIVE", "type": "variable"}]}, "category": "unit", "description": "Tests the size method of the MultiKey class."}, {"name": "testTwoArgCtor", "primary_tested": ["MultiKey.MultiKey(MultiKeyTest,MultiKeyTest)"], "external_dependencies": {"modules": ["MultiKey", "MultiKeyTest"]}, "category": "unit", "description": "Tests the two-argument constructor of the MultiKey class."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "testclass_name": "LayerManagerTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Deque;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.function.Consumer;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;"], "name": "LayerManagerTest", "description": "Unit tests for the LayerManager class, focusing on various functionalities such as advancing on count, saturation, builder configuration, clearing, copying, iteration, depth management, and cleanup strategies.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "testingBuilder", "signature": "LayerManager.Builder<BloomFilter> testingBuilder()"}]}, "fixtures": [], "test_cases": [{"name": "testAdvanceOnCount", "primary_tested": ["LayerManager.ExtendCheck.advanceOnCount(int)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "Predicate", "TestingHashers"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnCount method of LayerManager.ExtendCheck, verifying that it advances correctly based on the count of merges."}, {"name": "testAdvanceOnCountInvalidArguments", "primary_tested": ["LayerManager.ExtendCheck.advanceOnCount(int)"], "external_dependencies": {"modules": ["LayerManager", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the advanceOnCount method of LayerManager.ExtendCheck for invalid arguments, expecting IllegalArgumentException."}, {"name": "testAdvanceOnPopulated", "primary_tested": ["LayerManager.ExtendCheck.advanceOnPopulated()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "Predicate", "TestingHashers"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnPopulated method of LayerManager.ExtendCheck, verifying that it advances correctly when the BloomFilter is populated."}, {"name": "testAdvanceOnSaturation", "primary_tested": ["LayerManager.ExtendCheck.advanceOnSaturation(double)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "Shape.estimateMaxN()", "Shape.estimateN(int)", "BloomFilter.cardinality()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "Predicate", "Shape", "IncrementingHasher", "IllegalArgumentException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the advanceOnSaturation method of LayerManager.ExtendCheck, verifying that it advances correctly when the BloomFilter reaches saturation."}, {"name": "testBuilder", "primary_tested": ["LayerManager.builder()"], "associated_methods": ["LayerManager.Builder.get()", "LayerManager.Builder.setSupplier(Supplier<BloomFilter>)", "LayerManager.Builder.setCleanup(Consumer<Deque<BloomFilter>>)", "LayerManager.Builder.setExtendCheck(Predicate<LayerManager<BloomFilter>>)"], "external_dependencies": {"modules": ["LayerManager", "NullPointerException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the builder method of LayerManager, verifying that it correctly handles null checks and configuration."}, {"name": "testClear", "primary_tested": ["LayerManager.clear()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()", "BloomFilter.cardinality()"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the clear method of LayerManager, verifying that it resets the depth and clears the target BloomFilter."}, {"name": "testCopy", "primary_tested": ["LayerManager.copy()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)", "LayerManager.next()", "LayerManager.getDepth()", "LayerManager.processBloomFilterPair(LayerManager<BloomFilter>, BiPredicate<BloomFilter, BloomFilter>)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "TestingHashers", "Arrays"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the copy method of LayerManager, verifying that it creates a deep copy of the LayerManager."}, {"name": "testForEachBloomFilter", "primary_tested": ["LayerManager.processBloomFilters(Consumer<BloomFilter>)"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(BloomFilter)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "TestingHashers", "ArrayList", "Arrays"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the processBloomFilters method of LayerManager, verifying that it correctly processes each BloomFilter in the LayerManager."}, {"name": "testGet", "primary_tested": ["LayerManager.get(int)"], "associated_methods": ["LayerManager.getDepth()"], "external_dependencies": {"modules": ["LayerManager", "SimpleBloomFilter", "NoSuchElementException"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the get method of LayerManager, verifying that it correctly retrieves the BloomFilter at the specified index."}, {"name": "testNeverAdvance", "primary_tested": ["LayerManager.ExtendCheck.neverAdvance()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "Predicate", "TestingHashers"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the neverAdvance method of LayerManager.ExtendCheck, verifying that it never advances regardless of the state of the BloomFilter."}, {"name": "testNextAndGetDepth", "primary_tested": ["LayerManager.next()", "LayerManager.getDepth()"], "associated_methods": ["LayerManager.getTarget()", "BloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "TestingHashers"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the next and getDepth methods of LayerManager, verifying that it correctly increments the depth and retrieves the current depth."}, {"name": "testNoCleanup", "primary_tested": ["LayerManager.Cleanup.noCleanup()"], "associated_methods": [], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the noCleanup method of LayerManager.Cleanup, verifying that it does not perform any cleanup operations."}, {"name": "testOnMaxSize", "primary_tested": ["LayerManager.Cleanup.onMaxSize(int)"], "associated_methods": [], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "LinkedList", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the onMaxSize method of LayerManager.Cleanup, verifying that it correctly limits the size of the Deque."}, {"name": "testOnMaxSizeIllegalValues", "primary_tested": ["LayerManager.Cleanup.onMaxSize(int)"], "external_dependencies": {"modules": ["LayerManager", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the onMaxSize method of LayerManager.Cleanup for invalid arguments, expecting IllegalArgumentException."}, {"name": "testRemoveEmptyTarget", "primary_tested": ["LayerManager.Cleanup.removeEmptyTarget()"], "associated_methods": ["BloomFilter.merge(Hasher)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "LinkedList", "Consumer", "IndexExtractor"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the removeEmptyTarget method of LayerManager.Cleanup, verifying that it correctly removes empty BloomFilters from the Deque."}, {"name": "testTarget", "primary_tested": ["LayerManager.getTarget()"], "associated_methods": ["LayerManager.Builder.setSupplier(Supplier<BloomFilter>)", "LayerManager.Builder.setExtendCheck(Predicate<LayerManager<BloomFilter>>)", "LayerManager.Builder.setCleanup(Consumer<Deque<BloomFilter>>)"], "external_dependencies": {"modules": ["LayerManager", "BloomFilter", "SimpleBloomFilter", "Predicate", "Consumer"], "class_members": [{"name": "shape", "type": "variable"}]}, "category": "unit", "description": "Tests the getTarget method of LayerManager, verifying that it correctly triggers the extendCheck and cleanup operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "testclass_name": "CursorableLinkedListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertAll;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.ConcurrentModificationException;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "testclass_name": "SetUniqueListTest", "dependencies": ["package org.apache.commons.collections4.list;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.LinkedList;", "import java.util.List;", "import java.util.ListIterator;", "import java.util.Set;", "import java.util.TreeSet;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.apache.commons.lang3.StringUtils;", "import org.junit.jupiter.api.Test;"], "name": "SetUniqueListTest", "description": "Unit tests for the SetUniqueList class, which ensures that the list contains only unique elements.", "class_members": {"variables": [{"name": "extraVerify", "type": "boolean"}], "methods": [{"name": "getCompatibilityVersion", "signature": "String getCompatibilityVersion()"}, {"name": "getFullNonNullElements", "signature": "E[] getFullNonNullElements()"}, {"name": "makeObject", "signature": "List<E> makeObject()"}], "nested_classes": [{"name": "SetUniqueList307", "description": "Internal subclass of SetUniqueList for specific test cases."}]}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["SetUniqueList.add(E)"], "external_dependencies": {"modules": ["SetUniqueList", "Integer"], "class_members": [{"name": "lset", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testAddAll", "primary_tested": ["SetUniqueList.addAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["SetUniqueList", "Integer", "Arrays"], "class_members": [{"name": "lset", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollectionAddAll", "primary_tested": ["SetUniqueList.addAll(Collection<? extends E>)"], "associated_methods": ["AbstractListTest.resetEmpty()", "AbstractListTest.resetFull()", "AbstractListTest.verify()"], "external_dependencies": {"modules": ["SetUniqueList", "Arrays"], "class_members": [{"name": "getCollection", "type": "method"}, {"name": "getConfirmed", "type": "method"}, {"name": "getFullElements", "type": "method"}, {"name": "getOtherElements", "type": "method"}]}, "category": "unit", "description": "Tests the addition of a collection of elements to SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollectionIteratorRemove", "primary_tested": ["AbstractListTest.testCollectionIteratorRemove()"], "associated_methods": ["AbstractListTest.testCollectionIteratorRemove()"], "external_dependencies": {"modules": ["AbstractListTest"], "class_members": [{"name": "extraVerify", "type": "variable"}]}, "category": "unit", "description": "Tests the removal of elements using an iterator, ensuring the list remains unique."}, {"name": "testCollections304", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList", "String"], "class_members": [{"name": "decoratedList", "type": "variable"}]}, "category": "unit", "description": "Tests the addition and setting of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollections307", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.subList(int, int)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "TreeSet", "String"], "class_members": [{"name": "uniqueList", "type": "variable"}, {"name": "SetUniqueList307", "type": "nested_class"}]}, "category": "unit", "description": "Tests the addition of elements and subList functionality in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCollections701", "primary_tested": ["SetUniqueList.add(E)", "SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "LinkedList", "String"], "class_members": [{"name": "uniqueList", "type": "variable"}, {"name": "decoratedList", "type": "variable"}]}, "category": "unit", "description": "Tests the addition and setting of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testCreateSetBasedOnList", "primary_tested": ["SetUniqueList.createSetBasedOnList(Set<E>, List<E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "TreeSet", "UnmodifiableSet"], "class_members": [{"name": "setUniqueList", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a set based on a list, ensuring duplicates are not added."}, {"name": "testFactory", "primary_tested": ["SetUniqueList.setUniqueList(List<E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "Arrays"], "class_members": [{"name": "lset", "type": "variable"}]}, "category": "unit", "description": "Tests the factory method for creating a SetUniqueList, ensuring duplicates are not added."}, {"name": "testIntCollectionAddAll", "primary_tested": ["SetUniqueList.addAll(int, Collection<? extends E>)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet", "Arrays"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "description": "Tests the addition of a collection of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIterator", "primary_tested": ["SetUniqueList.listIterator()"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "lset", "type": "variable"}]}, "category": "unit", "description": "Tests the list iterator functionality in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIteratorAdd", "primary_tested": ["SetUniqueList.listIterator()"], "associated_methods": ["AbstractListTest.resetEmpty()", "AbstractListTest.resetFull()", "AbstractListTest.verify()"], "external_dependencies": {"modules": ["SetUniqueList", "AbstractListTest"], "class_members": [{"name": "getCollection", "type": "method"}, {"name": "getConfirmed", "type": "method"}, {"name": "getOtherElements", "type": "method"}]}, "category": "unit", "description": "Tests the addition of elements using a list iterator in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListIteratorSet", "primary_tested": ["SetUniqueList.listIterator()"], "external_dependencies": {"modules": ["SetUniqueList", "AbstractListTest"], "class_members": [{"name": "getCollection", "type": "method"}]}, "category": "unit", "description": "Tests the setting of elements using a list iterator in SetUniqueList, ensuring duplicates are not added."}, {"name": "testListSetByIndex", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "AbstractListTest"], "class_members": [{"name": "getCollection", "type": "method"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testRetainAll", "primary_tested": ["SetUniqueList.retainAll(Collection<?>)", "SetUniqueList.contains(Object)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "description": "Tests the retention of elements in SetUniqueList, ensuring only specified elements are retained."}, {"name": "testRetainAllWithInitialList", "primary_tested": ["SetUniqueList.retainAll(Collection<?>)", "SetUniqueList.contains(Object)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList"], "class_members": [{"name": "uniqueList", "type": "variable"}]}, "category": "unit", "description": "Tests the retention of elements in SetUniqueList with an initial list, ensuring only specified elements are retained."}, {"name": "testSet", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "lset", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetCollections444", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "lset", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetDownwardsInList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "ul", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetInBiggerList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "ul", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSetUpwardsInList", "primary_tested": ["SetUniqueList.set(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "ArrayList", "HashSet"], "class_members": [{"name": "ul", "type": "variable"}]}, "category": "unit", "description": "Tests the setting of elements at a specific index in SetUniqueList, ensuring duplicates are not added."}, {"name": "testSubListIsUnmodifiable", "primary_tested": ["SetUniqueList.subList(int, int)"], "external_dependencies": {"modules": ["SetUniqueList", "AbstractListTest"], "class_members": [{"name": "getCollection", "type": "method"}]}, "category": "unit", "description": "Tests the subList functionality in SetUniqueList, ensuring it is unmodifiable."}, {"name": "testUniqueListDoubleInsert", "primary_tested": ["SetUniqueList.set(int, E)", "SetUniqueList.add(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "l", "type": "variable"}]}, "category": "unit", "description": "Tests the insertion of elements in SetUniqueList, ensuring duplicates are not added."}, {"name": "testUniqueListReInsert", "primary_tested": ["SetUniqueList.set(int, E)", "SetUniqueList.add(int, E)"], "external_dependencies": {"modules": ["SetUniqueList", "LinkedList"], "class_members": [{"name": "l", "type": "variable"}]}, "category": "unit", "description": "Tests the re-insertion of elements in SetUniqueList, ensuring duplicates are not added."}]}]