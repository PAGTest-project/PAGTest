[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport rx.Observable;\n\npublic class RTree_nearestTest {\n\n    private RTree<Integer, Rectangle> tree;\n\n    @Before\n    public void setUp() {\n        tree = RTree.create();\n        tree = tree.add(1, Geometries.rectangle(0, 0, 1, 1));\n        tree = tree.add(2, Geometries.rectangle(2, 2, 3, 3));\n    }\n\n    @Test\n    public void testNearestWithinDistance() {\n        Rectangle searchRectangle = Geometries.rectangle(1.5, 1.5, 2.5, 2.5);\n        Observable<Entry<Integer, Rectangle>> result = tree.nearest(searchRectangle, 1.0, 1);\n        List<Entry<Integer, Rectangle>> entries = result.toList().toBlocking().single();\n        assertEquals(1, entries.size());\n        assertEquals(2, (int) entries.get(0).value());\n    }\n\n    @Test\n    public void testNearestWithNoMatches() {\n        Rectangle searchRectangle = Geometries.rectangle(4, 4, 5, 5);\n        Observable<Entry<Integer, Rectangle>> result = tree.nearest(searchRectangle, 1.0, 1);\n        List<Entry<Integer, Rectangle>> entries = result.toList().toBlocking().single();\n        assertTrue(entries.isEmpty());\n    }\n\n    @Test\n    public void testNearestWithMaxCount() {\n        Rectangle searchRectangle = Geometries.rectangle(0.5, 0.5, 2.5, 2.5);\n        Observable<Entry<Integer, Rectangle>> result = tree.nearest(searchRectangle, 2.0, 2);\n        List<Entry<Integer, Rectangle>> entries = result.toList().toBlocking().single();\n        assertEquals(2, entries.size());\n        assertEquals(1, (int) entries.get(0).value());\n        assertEquals(2, (int) entries.get(1).value());\n    }\n}\n"}]