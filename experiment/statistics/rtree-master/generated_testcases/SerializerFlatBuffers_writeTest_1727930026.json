[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport com.google.flatbuffers.FlatBufferBuilder;\n\npublic class SerializerFlatBuffers_writeTest {\n\n    private SerializerFlatBuffers<Object, Rectangle> serializer;\n    private RTree<Object, Rectangle> tree;\n    private ByteArrayOutputStream os;\n\n    @Before\n    public void setUp() {\n        serializer = new SerializerFlatBuffers<>(null, null);\n        tree = mock(RTree.class);\n        os = new ByteArrayOutputStream();\n    }\n\n    @Test\n    public void testWriteWithEmptyTree() throws IOException {\n        when(tree.root()).thenReturn(Optional.empty());\n        when(tree.size()).thenReturn(0);\n        when(tree.context()).thenReturn(new Context<>(2, 4, null, null, null));\n\n        serializer.write(tree, os);\n\n        ByteBuffer bb = ByteBuffer.wrap(os.toByteArray());\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(0, t.size());\n        assertEquals(0, t.root().childrenLength());\n    }\n\n    @Test\n    public void testWriteWithNonEmptyTree() throws IOException {\n        Rectangle mbb = Geometries.rectangle(0, 0, 10, 10);\n        Node<Object, Rectangle> rootNode = mock(Node.class);\n        when(rootNode.geometry()).thenReturn(mbb);\n        when(tree.root()).thenReturn(Optional.of(rootNode));\n        when(tree.size()).thenReturn(1);\n        when(tree.context()).thenReturn(new Context<>(2, 4, null, null, null));\n\n        serializer.write(tree, os);\n\n        ByteBuffer bb = ByteBuffer.wrap(os.toByteArray());\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(1, t.size());\n        assertEquals(mbb.x1(), t.root().mbb().x1());\n        assertEquals(mbb.y1(), t.root().mbb().y1());\n        assertEquals(mbb.x2(), t.root().mbb().x2());\n        assertEquals(mbb.y2(), t.root().mbb().y2());\n    }\n}\n"}]