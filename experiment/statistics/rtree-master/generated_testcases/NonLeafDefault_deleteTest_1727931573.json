[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport org.junit.Test;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class NonLeafDefault_deleteTest {\n\n    @Test\n    public void testDelete() {\n        // Given\n        Context<String, Rectangle> context = mock(Context.class);\n        Node<String, Rectangle> childNode = mock(Node.class);\n        List<Node<String, Rectangle>> children = Collections.singletonList(childNode);\n        NonLeafDefault<String, Rectangle> nonLeaf = new NonLeafDefault<>(children, context);\n\n        Entry<String, Rectangle> entry = mock(Entry.class);\n        NodeAndEntries<String, Rectangle> expectedResult = new NodeAndEntries<>(Optional.empty(), Collections.emptyList(), 1);\n\n        // Mock NonLeafHelper.delete to return the expected result\n        NonLeafHelper nonLeafHelper = mock(NonLeafHelper.class);\n        when(nonLeafHelper.delete(eq(entry), eq(true), eq(nonLeaf))).thenReturn(expectedResult);\n\n        // When\n        NodeAndEntries<String, Rectangle> result = nonLeaf.delete(entry, true);\n\n        // Then\n        assertEquals(expectedResult, result);\n    }\n}\n"}]