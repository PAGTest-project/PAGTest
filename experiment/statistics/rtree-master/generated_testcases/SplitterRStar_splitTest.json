[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.github.davidmoten.rtree.geometry.HasGeometry;\nimport com.github.davidmoten.rtree.geometry.ListPair;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class SplitterRStar_splitTest {\n\n    private SplitterRStar splitter;\n\n    @Mock\n    private HasGeometry mockGeometry1;\n\n    @Mock\n    private HasGeometry mockGeometry2;\n\n    @Before\n    public void setUp() {\n        splitter = new SplitterRStar();\n        when(mockGeometry1.geometry()).thenReturn(Rectangle.create(0.0, 0.0, 1.0, 1.0));\n        when(mockGeometry2.geometry()).thenReturn(Rectangle.create(1.0, 1.0, 2.0, 2.0));\n    }\n\n    @Test\n    public void testSplit() {\n        List<HasGeometry> items = new ArrayList<>();\n        items.add(mockGeometry1);\n        items.add(mockGeometry2);\n\n        ListPair<HasGeometry> expectedPair = new ListPair<>(items.subList(0, 1), items.subList(1, 2));\n\n        ListPair<HasGeometry> result = splitter.split(items, 1);\n\n        assertEquals(expectedPair.group1(), result.group1());\n        assertEquals(expectedPair.group2(), result.group2());\n    }\n}\n"}]