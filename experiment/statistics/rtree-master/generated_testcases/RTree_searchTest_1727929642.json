[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport rx.Observable;\nimport rx.functions.Func2;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\n\npublic class RTree_searchTest {\n\n    private RTree<String, Rectangle> rTree;\n    private Func2<Rectangle, Rectangle, Boolean> intersects;\n\n    @Before\n    public void setUp() {\n        rTree = RTree.star().create();\n        intersects = mock(Func2.class);\n    }\n\n    @Test\n    public void testSearchWithIntersects() {\n        Rectangle rectangle = com.github.davidmoten.rtree.geometry.Geometries.rectangle(0, 0, 1, 1);\n        when(intersects.call(any(), eq(rectangle))).thenReturn(true);\n\n        Observable<Entry<String, Rectangle>> result = rTree.search(rectangle, intersects);\n\n        assertEquals(Observable.empty(), result);\n    }\n\n    @Test\n    public void testSearchWithNonIntersectingGeometry() {\n        Rectangle rectangle = com.github.davidmoten.rtree.geometry.Geometries.rectangle(0, 0, 1, 1);\n        when(intersects.call(any(), eq(rectangle))).thenReturn(false);\n\n        Observable<Entry<String, Rectangle>> result = rTree.search(rectangle, intersects);\n\n        assertEquals(Observable.empty(), result);\n    }\n}\n"}]