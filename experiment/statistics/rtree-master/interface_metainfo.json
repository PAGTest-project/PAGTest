[{"uris": "src/main/java/com/github/davidmoten/rtree/NonLeafFactory.java.NonLeafFactory", "name": "NonLeafFactory", "file_path": "src/main/java/com/github/davidmoten/rtree/NonLeafFactory.java", "superclasses": [], "methods": ["[NonLeaf<T, S>]createNonLeaf(List<? extends Node<T, S>>,Context<T, S>)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/NonLeafFactory.java.NonLeafFactory.[NonLeaf<T, S>]createNonLeaf(List<? extends Node<T, S>>,Context<T, S>)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface NonLeafFactory<T, S extends Geometry> {\n\n    NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context);\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer", "name": "Serializer", "file_path": "src/main/java/com/github/davidmoten/rtree/Serializer.java", "superclasses": [], "methods": ["[void]write(RTree<T, S>,OutputStream)", "[RTree<T, S>]read(InputStream,long,InternalStructure)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer.[void]write(RTree<T, S>,OutputStream)", "src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer.[RTree<T, S>]read(InputStream,long,InternalStructure)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Serializer<T, S extends Geometry> {\n\n    void write(RTree<T, S> tree, OutputStream os) throws IOException;\n\n    RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)\n            throws IOException;\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Splitter.java.Splitter", "name": "Splitter", "file_path": "src/main/java/com/github/davidmoten/rtree/Splitter.java", "superclasses": [], "methods": ["[ListPair<T>]split(List<T>,int)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/Splitter.java.Splitter.[ListPair<T>]split(List<T>,int)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Splitter {\n\n    /**\n     * Splits a list of items into two lists of at least minSize.\n     * \n     * @param <T>\n     *            geometry type\n     * @param items\n     *            list of items to split\n     * @param minSize\n     *            min size of each list\n     * @return two lists\n     */\n    <T extends HasGeometry> ListPair<T> split(List<T> items, int minSize);\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/EntryFactory.java.EntryFactory", "name": "EntryFactory", "file_path": "src/main/java/com/github/davidmoten/rtree/EntryFactory.java", "superclasses": [], "methods": ["[Entry<T,S>]createEntry(T,S)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/EntryFactory.java.EntryFactory.[Entry<T,S>]createEntry(T,S)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface EntryFactory<T,S extends Geometry> {\n    Entry<T,S> createEntry(T value, S geometry);\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/LeafFactory.java.LeafFactory", "name": "LeafFactory", "file_path": "src/main/java/com/github/davidmoten/rtree/LeafFactory.java", "superclasses": [], "methods": ["[Leaf<T, S>]createLeaf(List<Entry<T, S>>,Context<T, S>)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/LeafFactory.java.LeafFactory.[Leaf<T, S>]createLeaf(List<Entry<T, S>>,Context<T, S>)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface LeafFactory<T, S extends Geometry> {\n    Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context);\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf", "name": "Leaf", "file_path": "src/main/java/com/github/davidmoten/rtree/Leaf.java", "superclasses": ["Node<T, S>"], "methods": ["[List<Entry<T, S>>]entries()", "[Entry<T, S>]entry(int)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf.[List<Entry<T, S>>]entries()", "src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf.[Entry<T, S>]entry(int)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Leaf<T, S extends Geometry> extends Node<T, S> {\n\n    List<Entry<T, S>> entries();\n\n    /**\n     * Returns the ith entry (0-based). This method should be preferred for\n     * performance reasons when only one entry is required (in comparison to\n     * {@code entries().get(i)}).\n     * \n     * @param i\n     *            0-based index\n     * @return ith entry\n     */\n    Entry<T, S> entry(int i);\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Factory.java.Factory", "name": "Factory", "file_path": "src/main/java/com/github/davidmoten/rtree/Factory.java", "superclasses": ["LeafFactory<T, S>", "NonLeafFactory<T, S>", "EntryFactory<T,S>"], "methods": [], "method_uris": [], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Factory<T, S extends Geometry>\n        extends LeafFactory<T, S>, NonLeafFactory<T, S>, EntryFactory<T,S> {\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Selector.java.Selector", "name": "Selector", "file_path": "src/main/java/com/github/davidmoten/rtree/Selector.java", "superclasses": [], "methods": ["[Node<T, S>]select(Geometry,List<? extends Node<T, S>>)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/Selector.java.Selector.[Node<T, S>]select(Geometry,List<? extends Node<T, S>>)"], "overrides": null, "attributes": null, "class_docstring": "\nThe heuristic used on insert to select which node to add an Entry to.\n\n", "original_string": "public interface Selector {\n\n    /**\n     * Returns the node from a list of nodes that an object with the given\n     * geometry would be added to.\n     * \n     * @param <T>\n     *            type of value of entry in tree\n     * @param <S>\n     *            type of geometry of entry in tree\n     * @param g\n     *            geometry\n     * @param nodes\n     *            nodes to select from\n     * @return one of the given nodes\n     */\n    <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes);\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Node.java.Node", "name": "Node", "file_path": "src/main/java/com/github/davidmoten/rtree/Node.java", "superclasses": ["HasGeometry"], "methods": ["[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "[int]count()", "[Context<T, S>]context()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/Node.java.Node.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[int]count()", "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[Context<T, S>]context()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Node<T, S extends Geometry> extends HasGeometry {\n\n    List<Node<T, S>> add(Entry<? extends T, ? extends S> entry);\n\n    NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all);\n\n    /**\n     * Run when a search requests Long.MAX_VALUE results. This is the\n     * no-backpressure fast path.\n     * \n     * @param criterion\n     *            function that returns true if the geometry is a search match\n     * @param subscriber\n     *            the subscriber to report search findings to\n     */\n    void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber);\n\n    int count();\n\n    Context<T, S> context();\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Entry.java.Entry", "name": "Entry", "file_path": "src/main/java/com/github/davidmoten/rtree/Entry.java", "superclasses": ["HasGeometry"], "methods": ["[T]value()", "[S]geometry()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/Entry.java.Entry.[T]value()", "src/main/java/com/github/davidmoten/rtree/Entry.java.Entry.[S]geometry()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Entry<T, S extends Geometry> extends HasGeometry {\n\n    T value();\n\n    @Override\n    S geometry();\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf", "name": "NonLeaf", "file_path": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java", "superclasses": ["Node<T, S>"], "methods": ["[Node<T, S>]child(int)", "[List<Node<T, S>>]children()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf.[Node<T, S>]child(int)", "src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf.[List<Node<T, S>>]children()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface NonLeaf<T, S extends Geometry> extends Node<T, S> {\n\n    Node<T, S> child(int i);\n\n    /**\n     * Returns a list of children nodes. For accessing individual children the\n     * child(int) method should be used to ensure good performance. To avoid\n     * copying an existing list though this method can be used.\n     * \n     * @return list of children nodes\n     */\n    List<Node<T, S>> children();\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry", "name": "Geometry", "file_path": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java", "superclasses": [], "methods": ["[double]distance(Rectangle)", "[Rectangle]mbr()", "[boolean]intersects(Rectangle)", "[boolean]isDoublePrecision()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[double]distance(Rectangle)", "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[Rectangle]mbr()", "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[boolean]intersects(Rectangle)", "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[boolean]isDoublePrecision()"], "overrides": null, "attributes": null, "class_docstring": "\nA geometrical region that represents an Entry spatially. It is recommended\nthat implementations of this interface implement equals() and hashCode()\nappropriately that entry equality checks work as expected.\n", "original_string": "public interface Geometry {\n\n    /**\n     * <p>\n     * Returns the distance to the given {@link Rectangle}. For a {@link Rectangle}\n     * this might be Euclidean distance but for an EPSG4326 lat-long Rectangle might\n     * be great-circle distance. The distance function should satisfy the following\n     * properties:\n     * </p>\n     * \n     * <p>\n     * <code>distance(r) &gt;= 0</code>\n     * </p>\n     * \n     * <p>\n     * <code>if r1 contains r2 then distance(r1)&lt;=distance(r2)</code>\n     * </p>\n     * \n     * \n     * @param r\n     *            rectangle to measure distance to\n     * @return distance to the rectangle r from the geometry\n     */\n    double distance(Rectangle r);\n\n    /**\n     * Returns the minimum bounding rectangle of this geometry.\n     * \n     * @return minimum bounding rectangle\n     */\n    Rectangle mbr();\n\n    boolean intersects(Rectangle r);\n\n    boolean isDoublePrecision();\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/HasGeometry.java.HasGeometry", "name": "HasGeometry", "file_path": "src/main/java/com/github/davidmoten/rtree/geometry/HasGeometry.java", "superclasses": [], "methods": ["[Geometry]geometry()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/geometry/HasGeometry.java.HasGeometry.[Geometry]geometry()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface HasGeometry {\n\n    Geometry geometry();\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point", "name": "Point", "file_path": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java", "superclasses": ["Rectangle"], "methods": ["[double]x()", "[double]y()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point.[double]x()", "src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point.[double]y()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Point extends Rectangle {\n\n    double x();\n\n    double y();\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "name": "Rectangle", "file_path": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "superclasses": ["Geometry", "HasGeometry"], "methods": ["[double]x1()", "[double]y1()", "[double]x2()", "[double]y2()", "[double]area()", "[double]intersectionArea(Rectangle)", "[double]perimeter()", "[Rectangle]add(Rectangle)", "[boolean]contains(double,double)", "[boolean]isDoublePrecision()"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]x1()", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]y1()", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]x2()", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]y2()", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]area()", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]intersectionArea(Rectangle)", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]perimeter()", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[Rectangle]add(Rectangle)", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[boolean]contains(double,double)", "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[boolean]isDoublePrecision()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Rectangle extends Geometry, HasGeometry {\n\n    double x1();\n\n    double y1();\n\n    double x2();\n\n    double y2();\n\n    double area();\n\n    double intersectionArea(Rectangle r);\n\n    double perimeter();\n\n    Rectangle add(Rectangle r);\n\n    boolean contains(double x, double y);\n    \n    boolean isDoublePrecision();\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "name": "Circle", "file_path": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "superclasses": ["Geometry"], "methods": ["[double]x()", "[double]y()", "[double]radius()", "[boolean]intersects(Circle)", "[boolean]intersects(Point)", "[boolean]intersects(Line)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[double]x()", "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[double]y()", "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[double]radius()", "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[boolean]intersects(Circle)", "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[boolean]intersects(Point)", "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[boolean]intersects(Line)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Circle extends Geometry {\n\n    double x();\n\n    double y();\n\n    double radius();\n\n    boolean intersects(Circle c);\n\n    boolean intersects(Point point);\n\n    boolean intersects(Line line);\n\n}"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "name": "Line", "file_path": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "superclasses": ["Geometry"], "methods": ["[double]x1()", "[double]y1()", "[double]x2()", "[double]y2()", "[boolean]intersects(Line)", "[boolean]intersects(Point)", "[boolean]intersects(Circle)"], "method_uris": ["src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]x1()", "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]y1()", "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]x2()", "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]y2()", "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[boolean]intersects(Line)", "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[boolean]intersects(Point)", "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[boolean]intersects(Circle)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Line extends Geometry {\n\n    double x1();\n\n    double y1();\n\n    double x2();\n\n    double y2();\n\n    boolean intersects(Line b);\n\n    boolean intersects(Point point);\n\n    boolean intersects(Circle circle);\n\n}"}]