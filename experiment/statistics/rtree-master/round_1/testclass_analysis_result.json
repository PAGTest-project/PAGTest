[{"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistTest.java", "testclass_name": "Line2D_ptSegDistTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;"], "name": "Line2D_ptSegDistTest", "description": "Unit tests for the ptSegDist method of the Line2D class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testPtSegDist", "primary_tested": ["Line2D.ptSegDist(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDist method of the Line2D class to calculate the distance from a point to a line segment."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_emptyTest.java", "testclass_name": "ImmutableStack_emptyTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "ImmutableStack_emptyTest", "description": "Unit test for checking if an empty ImmutableStack is indeed empty.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEmptyStackIsEmpty", "primary_tested": ["ImmutableStack.isEmpty()"], "external_dependencies": {"modules": ["ImmutableStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if an empty ImmutableStack is correctly identified as empty."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/NodePosition_toStringTest.java", "testclass_name": "NodePosition_toStringTest", "dependencies": ["package com.github.davidmoten.rtree;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import org.junit.Test;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;"], "name": "NodePosition_toStringTest", "description": "Unit test for the toString method of NodePosition class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToString", "primary_tested": ["NodePosition.toString()"], "external_dependencies": {"modules": ["Node", "NodePosition", "Geometry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of the NodePosition class, ensuring it returns the expected string representation."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_addTest.java", "testclass_name": "Util_addTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import org.junit.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.Assert.assertEquals;"], "name": "Util_addTest", "description": "Unit test for the add method in the Util class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdd", "primary_tested": ["Util.add(List<Integer>,Integer)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Util"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the add functionality of the Util class by adding an element to a list and verifying the result."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java", "testclass_name": "ImmutableStack_popTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "ImmutableStack_popTest", "description": "Unit tests for the pop functionality of the ImmutableStack class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testPopOnNonEmptyStack", "primary_tested": ["ImmutableStack.pop()"], "associated_methods": ["ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests the pop functionality on a non-empty stack, ensuring the correct element is removed and the new top element is correctly identified."}, {"name": "testPopOnEmptyStack", "primary_tested": ["ImmutableStack.pop()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests the pop functionality on an empty stack, expecting a RuntimeException to be thrown."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java", "testclass_name": "ImmutableStack_peekTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "ImmutableStack_peekTest", "description": "Unit tests for the peek method of the ImmutableStack class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPeekOnNonEmptyStack", "primary_tested": ["ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the peek functionality of the ImmutableStack when the stack is non-empty."}, {"name": "testPeekOnEmptyStack", "primary_tested": ["ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the peek functionality of the ImmutableStack when the stack is empty, expecting a RuntimeException."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java", "testclass_name": "Line2D_ptSegDistSqTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;"], "name": "Line2D_ptSegDistSqTest", "description": "Unit tests for the ptSegDistSq method in the Line2D class.", "fixtures": [], "test_cases": [{"name": "testPtSegDistSq_PointOnSideOfX1Y1", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point on the side of (x1, y1)."}, {"name": "testPtSegDistSq_PointOnSideOfX2Y2", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point on the side of (x2, y2)."}, {"name": "testPtSegDistSq_PointBetweenX1Y1AndX2Y2", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point between (x1, y1) and (x2, y2)."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java", "testclass_name": "ImmutableStack_iteratorTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.util.Iterator;", "import org.junit.Before;", "import org.junit.Test;"], "name": "ImmutableStack_iteratorTest", "description": "Unit tests for the iterator functionality of the ImmutableStack class.", "class_members": {"variables": [{"name": "stack", "type": "ImmutableStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorWithNonEmptyStack", "primary_tested": ["ImmutableStack.iterator()"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()"], "external_dependencies": {"modules": ["ImmutableStack", "Iterator"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality with a non-empty stack."}, {"name": "testIteratorWithEmptyStack", "primary_tested": ["ImmutableStack.iterator()"], "associated_methods": ["Iterator.hasNext()"], "external_dependencies": {"modules": ["ImmutableStack", "Iterator"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality with an empty stack."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "testclass_name": "ObjectsHelper_asClassTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.util.Optional;", "import org.junit.Test;"], "name": "ObjectsHelper_asClassTest", "description": "Unit tests for the ObjectsHelper.asClass method and private constructor coverage.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAsClassWithNullObject", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with a null object, expecting the result to be an empty Optional."}, {"name": "testAsClassWithIncorrectClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with an object of incorrect class, expecting the result to be an empty Optional."}, {"name": "testAsClassWithCorrectClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with an object of correct class, expecting the result to be a present Optional containing the object."}, {"name": "coverPrivateConstructor", "primary_tested": ["ObjectsHelper.instantiateForTestCoveragePurposesOnly()"], "external_dependencies": {"modules": ["ObjectsHelper"]}, "category": "unit", "description": "Tests the instantiation of ObjectsHelper for test coverage purposes only."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java", "testclass_name": "Util_mbrTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.HasGeometry;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import org.junit.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;"], "name": "Util_mbrTest", "description": "Unit tests for the Util.mbr method which calculates the minimum bounding rectangle (MBR) for a collection of geometries.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testMbrWithSingleItem", "primary_tested": ["Util.mbr(Collection<? extends HasGeometry>)"], "external_dependencies": {"modules": ["HasGeometry", "Rectangle", "Geometries", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the calculation of MBR with a single item in the collection."}, {"name": "testMbrWithEmptyCollection", "primary_tested": ["Util.mbr(Collection<? extends HasGeometry>)"], "external_dependencies": {"modules": ["HasGeometry", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the MBR calculation with an empty collection, expecting an IllegalArgumentException."}, {"name": "testMbrWithDoublePrecision", "primary_tested": ["Util.mbr(Collection<? extends HasGeometry>)"], "external_dependencies": {"modules": ["HasGeometry", "Rectangle", "Geometries", "Arrays"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the calculation of MBR with items having different precision levels."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "testclass_name": "Line2D_linesIntersectTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "Line2D_linesIntersectTest", "description": "Unit tests for the Line2D.linesIntersect method, which checks if two lines intersect.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testLinesIntersect_IntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests if two intersecting lines are correctly identified as intersecting."}, {"name": "testLinesIntersect_NonIntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests if two non-intersecting lines are correctly identified as non-intersecting."}, {"name": "testLinesIntersect_CollinearNonIntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests if two collinear but non-intersecting lines are correctly identified as non-intersecting."}, {"name": "testLinesIntersect_TouchingAtEndpoint", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests if two lines touching at an endpoint are correctly identified as intersecting."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java", "testclass_name": "RTree_searchTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.*;", "import org.junit.Before;", "import org.junit.Test;", "import rx.Observable;", "import rx.functions.Func2;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.Rectangle;"], "name": "RTree_searchTest", "description": "Unit tests for the search functionality of the RTree class with different intersection scenarios.", "class_members": {"variables": [{"name": "rTree", "type": "RTree<String, Rectangle>"}, {"name": "intersects", "type": "Func2<Rectangle, Rectangle, Boolean>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSearchWithIntersects", "primary_tested": ["RTree.search(Rectangle,Func2<Rectangle,Rectangle,Boolean>)"], "external_dependencies": {"modules": ["RTree", "Rectangle", "Func2", "Observable", "Entry", "Geometries"], "class_members": [{"name": "rTree", "type": "variable"}, {"name": "intersects", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality of the RTree with a mock intersection function that always returns true."}, {"name": "testSearchWithNonIntersectingGeometry", "primary_tested": ["RTree.search(Rectangle,Func2<Rectangle,Rectangle,Boolean>)"], "external_dependencies": {"modules": ["RTree", "Rectangle", "Func2", "Observable", "Entry", "Geometries"], "class_members": [{"name": "rTree", "type": "variable"}, {"name": "intersects", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality of the RTree with a mock intersection function that always returns false."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java", "testclass_name": "BoundedPriorityQueue_asOrderedListTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue.create;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.junit.Before;", "import org.junit.Test;"], "name": "BoundedPriorityQueue_asOrderedListTest", "description": "Unit tests for the asOrderedList method of BoundedPriorityQueue.", "class_members": {"variables": [{"name": "comparator", "type": "static final Comparator<Integer>"}, {"name": "queue", "type": "BoundedPriorityQueue<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAsOrderedListWithEmptyQueue", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue is empty."}, {"name": "testAsOrderedListWithSingleElement", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains a single element."}, {"name": "testAsOrderedListWithMultipleElements", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains multiple elements."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "testclass_name": "Util_removeTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import org.junit.Test;"], "name": "Util_removeTest", "description": "Unit tests for the Util.remove method which removes specified elements from a list.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRemoveElementsFromList", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "description": "Tests the removal of specific elements from a list."}, {"name": "testRemoveAllElementsFromList", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collections", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "description": "Tests the removal of all elements from a list."}, {"name": "testRemoveNoElementsFromList", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collections", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "description": "Tests the removal of no elements from a list."}, {"name": "testRemoveNonExistentElementsFromList", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "description": "Tests the removal of non-existent elements from a list."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java", "testclass_name": "RTree_nearestTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.List;", "import org.junit.Before;", "import org.junit.Test;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import rx.Observable;"], "name": "RTree_nearestTest", "description": "Unit tests for the nearest functionality of the RTree class.", "class_members": {"variables": [{"name": "tree", "type": "RTree<Integer, Rectangle>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNearestWithinDistance", "primary_tested": ["RTree.nearest(Rectangle,double,int)"], "associated_methods": ["Observable.toList()"], "external_dependencies": {"modules": ["RTree", "Geometries", "Rectangle", "Observable", "Entry"], "class_members": [{"name": "tree", "type": "variable"}], "project_specific_resources": ["Geometries.rectangle(double,double,double,double)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nearest functionality of the RTree within a specified distance."}, {"name": "testNearestWithNoMatches", "primary_tested": ["RTree.nearest(Rectangle,double,int)"], "associated_methods": ["Observable.toList()"], "external_dependencies": {"modules": ["RTree", "Geometries", "Rectangle", "Observable", "Entry"], "class_members": [{"name": "tree", "type": "variable"}], "project_specific_resources": ["Geometries.rectangle(double,double,double,double)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nearest functionality of the RTree when no matches are found within the specified distance."}, {"name": "testNearestWithMaxCount", "primary_tested": ["RTree.nearest(Rectangle,double,int)"], "associated_methods": ["Observable.toList()"], "external_dependencies": {"modules": ["RTree", "Geometries", "Rectangle", "Observable", "Entry"], "class_members": [{"name": "tree", "type": "variable"}], "project_specific_resources": ["Geometries.rectangle(double,double,double,double)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nearest functionality of the RTree with a specified maximum count of results."}]}]