{"file_path": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "testclass_name": "QuadraticSplitterTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Sets;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.HasGeometry;", "import com.github.davidmoten.rtree.geometry.ListPair;", "import com.github.davidmoten.rtree.internal.Util;", "import com.github.davidmoten.rtree.internal.util.Pair;"], "name": "QuadraticSplitterTest", "description": "Unit tests for the QuadraticSplitter class, focusing on worst combination, best candidate selection, and splitting functionality.", "class_members": {"methods": [{"name": "r", "signature": "private static Mbr r(int n)"}]}, "fixtures": [], "test_cases": [{"name": "testWorstCombinationOn3", "primary_tested": ["SplitterQuadratic.worstCombination(List<Mbr>)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Pair"]}, "category": "unit", "description": "Tests the worst combination functionality with three MBRs."}, {"name": "testWorstCombinationOnTwoEntries", "primary_tested": ["SplitterQuadratic.worstCombination(List<Mbr>)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Pair"]}, "category": "unit", "description": "Tests the worst combination functionality with two MBRs."}, {"name": "testWorstCombinationOn4", "primary_tested": ["SplitterQuadratic.worstCombination(List<Mbr>)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Pair"]}, "category": "unit", "description": "Tests the worst combination functionality with four MBRs."}, {"name": "testGetBestCandidateForGroup1", "primary_tested": ["SplitterQuadratic.getBestCandidateForGroup(List<Mbr>, List<Mbr>, Rectangle)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Util"]}, "category": "unit", "description": "Tests the best candidate selection for a group with one MBR."}, {"name": "testGetBestCandidateForGroup2", "primary_tested": ["SplitterQuadratic.getBestCandidateForGroup(List<Mbr>, List<Mbr>, Rectangle)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Util"]}, "category": "unit", "description": "Tests the best candidate selection for a group with two MBRs."}, {"name": "testGetBestCandidateForGroup3", "primary_tested": ["SplitterQuadratic.getBestCandidateForGroup(List<Mbr>, List<Mbr>, Rectangle)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Util"]}, "category": "unit", "description": "Tests the best candidate selection for a group with one MBR and a list with two MBRs."}, {"name": "testSplit", "primary_tested": ["SplitterQuadratic.split(List<Mbr>, int)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "ListPair", "Sets"]}, "category": "unit", "description": "Tests the splitting functionality with four MBRs."}, {"name": "testSplit2", "primary_tested": ["SplitterQuadratic.split(List<Mbr>, int)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "ListPair", "Sets"]}, "category": "unit", "description": "Tests the splitting functionality with five MBRs."}, {"name": "testSplit3", "primary_tested": ["SplitterQuadratic.split(List<Mbr>, int)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "ListPair", "Sets"]}, "category": "unit", "description": "Tests the splitting functionality with six MBRs."}, {"name": "testExceptionForSplitEmptyList", "primary_tested": ["SplitterQuadratic.split(List<HasGeometry>, int)"], "external_dependencies": {"modules": ["SplitterQuadratic"]}, "category": "unit", "description": "Tests the exception handling for splitting an empty list."}]}