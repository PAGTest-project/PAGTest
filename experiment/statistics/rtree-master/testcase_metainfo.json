[{"uris": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java.RTree_nearestTest.[void]testNearestWithinDistance()", "name": "testNearestWithinDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestWithinDistance()", "original_string": "    @Test\n    public void testNearestWithinDistance() {\n        Rectangle searchRectangle = Geometries.rectangle(1.5, 1.5, 2.5, 2.5);\n        Observable<Entry<Integer, Rectangle>> result = tree.nearest(searchRectangle, 1.0, 1);\n        List<Entry<Integer, Rectangle>> entries = result.toList().toBlocking().single();\n        assertEquals(1, entries.size());\n        assertEquals(2, (int) entries.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java", "class_name": "RTree_nearestTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java.RTree_nearestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java.RTree_nearestTest.[void]testNearestWithNoMatches()", "name": "testNearestWithNoMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestWithNoMatches()", "original_string": "    @Test\n    public void testNearestWithNoMatches() {\n        Rectangle searchRectangle = Geometries.rectangle(4, 4, 5, 5);\n        Observable<Entry<Integer, Rectangle>> result = tree.nearest(searchRectangle, 1.0, 1);\n        List<Entry<Integer, Rectangle>> entries = result.toList().toBlocking().single();\n        assertTrue(entries.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java", "class_name": "RTree_nearestTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java.RTree_nearestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java.RTree_nearestTest.[void]testNearestWithMaxCount()", "name": "testNearestWithMaxCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestWithMaxCount()", "original_string": "    @Test\n    public void testNearestWithMaxCount() {\n        Rectangle searchRectangle = Geometries.rectangle(0.5, 0.5, 2.5, 2.5);\n        Observable<Entry<Integer, Rectangle>> result = tree.nearest(searchRectangle, 2.0, 2);\n        List<Entry<Integer, Rectangle>> entries = result.toList().toBlocking().single();\n        assertEquals(2, entries.size());\n        assertEquals(1, (int) entries.get(0).value());\n        assertEquals(2, (int) entries.get(1).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java", "class_name": "RTree_nearestTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTree_nearestTest.java.RTree_nearestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java.RTree_searchTest.[void]testSearchWithIntersects()", "name": "testSearchWithIntersects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithIntersects()", "original_string": "    @Test\n    public void testSearchWithIntersects() {\n        Rectangle rectangle = com.github.davidmoten.rtree.geometry.Geometries.rectangle(0, 0, 1, 1);\n        when(intersects.call(any(), eq(rectangle))).thenReturn(true);\n\n        Observable<Entry<String, Rectangle>> result = rTree.search(rectangle, intersects);\n\n        assertEquals(0, result.count().toBlocking().single().intValue());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java", "class_name": "RTree_searchTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java.RTree_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java.RTree_searchTest.[void]testSearchWithNonIntersectingGeometry()", "name": "testSearchWithNonIntersectingGeometry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithNonIntersectingGeometry()", "original_string": "    @Test\n    public void testSearchWithNonIntersectingGeometry() {\n        Rectangle rectangle = com.github.davidmoten.rtree.geometry.Geometries.rectangle(0, 0, 1, 1);\n        when(intersects.call(any(), eq(rectangle))).thenReturn(false);\n\n        Observable<Entry<String, Rectangle>> result = rTree.search(rectangle, intersects);\n\n        assertEquals(0, result.count().toBlocking().single().intValue());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java", "class_name": "RTree_searchTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTree_searchTest.java.RTree_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testInstantiation()", "name": "testInstantiation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiation()", "original_string": "    @Test\n    public void testInstantiation() {\n        RTree<Object, Geometry> tree = RTree.create();\n        assertTrue(tree.entries().isEmpty().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchEmptyTree()", "name": "testSearchEmptyTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchEmptyTree()", "original_string": "    @Test\n    public void testSearchEmptyTree() {\n        RTree<Object, Geometry> tree = RTree.create();\n        assertTrue(tree.search(r(1)).isEmpty().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchOnOneItem()", "name": "testSearchOnOneItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchOnOneItem()", "original_string": "    @Test\n    public void testSearchOnOneItem() {\n        RTree<Object, Rectangle> tree = RTree.create();\n        Entry<Object, Rectangle> entry = e(1);\n        tree = tree.add(entry);\n        assertEquals(Arrays.asList(entry), tree.search(r(1)).toList().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testTreeWithOneItemIsNotEmpty()", "name": "testTreeWithOneItemIsNotEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTreeWithOneItemIsNotEmpty()", "original_string": "    @Test\n    public void testTreeWithOneItemIsNotEmpty() {\n        RTree<Object, Geometry> tree = RTree.create().add(e(1));\n        assertFalse(tree.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testVisualizerWithEmptyTree()", "name": "testVisualizerWithEmptyTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVisualizerWithEmptyTree()", "original_string": "    @Test\n    public void testVisualizerWithEmptyTree() {\n        RTree<Object, Geometry> tree = RTree.create();\n        tree.visualize(600, 600).save(\"target/tree.png\", \"PNG\");\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBulkLoadingEmpty()", "name": "testBulkLoadingEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBulkLoadingEmpty()", "original_string": "    @Test\n    public void testBulkLoadingEmpty() {\n        RTree<Object, Point> tree = RTree.create(new ArrayList<Entry<Object, Point>>());\n        assertTrue(tree.entries().isEmpty().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBulkLoadingWithOneItemIsNotEmpty()", "name": "testBulkLoadingWithOneItemIsNotEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBulkLoadingWithOneItemIsNotEmpty()", "original_string": "    @Test\n    public void testBulkLoadingWithOneItemIsNotEmpty() {\n        RTree<Object, Rectangle> tree = RTree.create(Arrays.asList(e(1)));\n        assertFalse(tree.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBulkLoadingEntryCount()", "name": "testBulkLoadingEntryCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBulkLoadingEntryCount()", "original_string": "    @Test\n    public void testBulkLoadingEntryCount() {\n        List<Entry<Integer, Geometry>> entries = new ArrayList<Entry<Integer, Geometry>>(10000);\n        for (int i = 1; i <= 10000; i++) {\n            Point point = nextPoint();\n            // System.out.println(\"point(\" + point.x() + \",\" + point.y() +\n            // \"),\");\n            entries.add(new EntryDefault<Integer, Geometry>(i, point));\n        }\n        RTree<Integer, Geometry> tree = RTree.create(entries);\n        int entrySize = tree.entries().count().toBlocking().single();\n        System.out.println(\"entry count: \" + entrySize);\n        assertEquals(entrySize, entries.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchOnOneItemOnBulkLoadingRTree()", "name": "testSearchOnOneItemOnBulkLoadingRTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchOnOneItemOnBulkLoadingRTree()", "original_string": "    @Test\n    public void testSearchOnOneItemOnBulkLoadingRTree() {\n        Entry<Object, Rectangle> entry = e(1);\n        RTree<Object, Rectangle> tree = RTree.create(Arrays.asList(entry));\n        assertEquals(Arrays.asList(entry), tree.search(r(1)).toList().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testAddObservable()", "name": "testAddObservable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddObservable()", "original_string": "    @Test\n    public void testAddObservable() {\n        Entry<Object, Rectangle> e1 = e(1);\n        Entry<Object, Rectangle> e2 = e2(1);\n\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).<Object, Rectangle>create().add(e1)\n                .add(e2).delete(e1);\n        RTree<Object, Rectangle> emptyTree = RTree.maxChildren(4).create();\n        rx.Observable<?> deletedtree = emptyTree.add(tree.entries());\n        assertEquals(2, (int) deletedtree.count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testPerformanceAndEntriesCount()", "name": "testPerformanceAndEntriesCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPerformanceAndEntriesCount()", "original_string": "    @Test\n    public void testPerformanceAndEntriesCount() {\n\n        long repeats = Long.parseLong(System.getProperty(\"r\", \"1\"));\n        long n = Long.parseLong(System.getProperty(\"n\", \"10000\"));\n        RTree<Object, Geometry> tree = null;\n        while (--repeats >= 0) {\n            long t = System.currentTimeMillis();\n            tree = createRandomRTree(n);\n            long diff = System.currentTimeMillis() - t;\n            System.out.println(\"inserts/second = \" + ((double) n / diff * 1000));\n        }\n        assertEquals(n, (int) tree.entries().count().toBlocking().single());\n\n        long t = System.currentTimeMillis();\n        Entry<Object, Geometry> entry = tree.search(rectangle(0, 0, 500, 500)).first().toBlocking()\n                .single();\n        long diff = System.currentTimeMillis() - t;\n        System.out.println(\"found \" + entry);\n        System.out.println(\"time to get nearest with \" + n + \" entries=\" + diff);\n\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchOfPoint()", "name": "testSearchOfPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchOfPoint()", "original_string": "    @Test\n    public void testSearchOfPoint() {\n        Object value = new Object();\n        RTree<Object, Geometry> tree = RTree.create().add(value, point(1, 1));\n        List<Entry<Object, Geometry>> list = tree.search(point(1, 1)).toList().toBlocking()\n                .single();\n        assertEquals(1, list.size());\n        assertEquals(value, list.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchOfPointWithinDistance()", "name": "testSearchOfPointWithinDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchOfPointWithinDistance()", "original_string": "    @Test\n    public void testSearchOfPointWithinDistance() {\n        Object value = new Object();\n        RTree<Object, Geometry> tree = RTree.create().add(value, point(1, 1));\n        List<Entry<Object, Geometry>> list = tree.search(point(1, 1), 2).toList().toBlocking()\n                .single();\n        assertEquals(1, list.size());\n        assertEquals(value, list.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteWithGeometry()", "name": "testDeleteWithGeometry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteWithGeometry()", "original_string": "    @Test\n    public void testDeleteWithGeometry() {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).create();\n        Entry<Object, Rectangle> entry = e(1);\n        Entry<Object, Rectangle> entry2 = e2(1);\n        tree = tree.add(entry).add(entry2);\n\n        tree = tree.delete(entry.value(), entry.geometry(), true);\n        List<Entry<Object, Rectangle>> entries = tree.entries().toList().toBlocking().single();\n        assertTrue(entries.contains(entry2) && !entries.contains(entry));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteIssue81()", "name": "testDeleteIssue81", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteIssue81()", "original_string": "    @Test\n    public void testDeleteIssue81() {\n        RTree<Object, Point> t = RTree.create();\n        t = t.add(1, Geometries.pointGeographic(123, 23));\n        t = t.delete(1, Geometries.pointGeographic(123, 23));\n        assertEquals(0, t.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWith0()", "name": "testDepthWith0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWith0()", "original_string": "    @Test\n    public void testDepthWith0() {\n        RTree<Object, Geometry> tree = RTree.create();\n        tree = tree.add(createRandomEntries(5));\n        List<Entry<Object, Geometry>> entries = tree.entries().toList().toBlocking().single();\n        RTree<Object, Geometry> deletedTree = tree.delete(entries, true);\n        assertTrue(deletedTree.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testContext()", "name": "testContext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContext()", "original_string": "    @Test\n    public void testContext() {\n        RTree<Object, Geometry> tree = RTree.create();\n        assertNotNull(tree.context());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testIterableDeletion()", "name": "testIterableDeletion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterableDeletion()", "original_string": "    @Test\n    public void testIterableDeletion() {\n        RTree<Object, Rectangle> tree = RTree.create();\n        Entry<Object, Rectangle> entry1 = e(1);\n        Entry<Object, Rectangle> entry2 = e(2);\n        Entry<Object, Rectangle> entry3 = e(3);\n        tree = tree.add(entry1).add(entry2).add(entry3);\n\n        List<Entry<Object, Rectangle>> list = new ArrayList<Entry<Object, Rectangle>>();\n        list.add(entry1);\n        list.add(entry3);\n        RTree<Object, Rectangle> deletedTree = tree.delete(list);\n        List<Entry<Object, Rectangle>> entries = deletedTree.entries().toList().toBlocking()\n                .single();\n        assertTrue(\n                entries.contains(entry2) && !entries.contains(entry1) && !entries.contains(entry3));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testObservableDeletion()", "name": "testObservableDeletion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObservableDeletion()", "original_string": "    @Test\n    public void testObservableDeletion() {\n        RTree<Object, Rectangle> tree = RTree.create();\n        Entry<Object, Rectangle> entry1 = e(1);\n        Entry<Object, Rectangle> entry2 = e(3);\n        Entry<Object, Rectangle> entry3 = e(5);\n        tree = tree.add(entry1).add(entry2).add(entry3);\n        rx.Observable<Entry<Object, Rectangle>> obs = tree.search(r(2), 5);\n        rx.Observable<RTree<Object, Rectangle>> deleted = tree.delete(obs, true);\n        assertTrue(deleted.elementAt(deleted.count().toBlocking().single() - 1).count().toBlocking()\n                .single() == 1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testFullDeletion()", "name": "testFullDeletion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullDeletion()", "original_string": "    @Test\n    public void testFullDeletion() {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).create();\n        Entry<Object, Rectangle> entry = e(1);\n        tree = tree.add(entry).add(entry);\n        tree = tree.delete(entry, true);\n        assertTrue(tree.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testPartialDeletion()", "name": "testPartialDeletion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPartialDeletion()", "original_string": "    @Test\n    public void testPartialDeletion() {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).create();\n        Entry<Object, Rectangle> entry = e(1);\n        tree = tree.add(entry).add(entry);\n        tree = tree.delete(entry, false);\n        List<Entry<Object, Rectangle>> entries = tree.entries().toList().toBlocking().single();\n        int countEntries = tree.entries().count().toBlocking().single();\n        assertTrue(countEntries == 1);\n        assertTrue(entries.get(0).equals(entry));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWithMaxChildren3Entries1()", "name": "testDepthWithMaxChildren3Entries1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithMaxChildren3Entries1()", "original_string": "    @Test\n    public void testDepthWithMaxChildren3Entries1() {\n        RTree<Object, Rectangle> tree = create(3, 1);\n        assertEquals(1, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWithMaxChildren3Entries2()", "name": "testDepthWithMaxChildren3Entries2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithMaxChildren3Entries2()", "original_string": "    @Test\n    public void testDepthWithMaxChildren3Entries2() {\n        RTree<Object, Rectangle> tree = create(3, 2);\n        assertEquals(1, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWithMaxChildren3Entries3()", "name": "testDepthWithMaxChildren3Entries3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithMaxChildren3Entries3()", "original_string": "    @Test\n    public void testDepthWithMaxChildren3Entries3() {\n        RTree<Object, Rectangle> tree = create(3, 3);\n        assertEquals(1, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWithMaxChildren3Entries4()", "name": "testDepthWithMaxChildren3Entries4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithMaxChildren3Entries4()", "original_string": "    @Test\n    public void testDepthWithMaxChildren3Entries4() {\n        RTree<Object, Rectangle> tree = create(3, 4);\n        assertEquals(2, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWithMaxChildren3Entries8()", "name": "testDepthWithMaxChildren3Entries8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithMaxChildren3Entries8()", "original_string": "    @Test\n    public void testDepthWithMaxChildren3Entries8() {\n        RTree<Object, Rectangle> tree = create(3, 8);\n        tree.visualize(800, 800).save(new File(\"target/treeLittle.png\"), \"PNG\");\n        assertEquals(3, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDepthWithMaxChildren3Entries10()", "name": "testDepthWithMaxChildren3Entries10", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithMaxChildren3Entries10()", "original_string": "    @Test\n    public void testDepthWithMaxChildren3Entries10() {\n        RTree<Object, Rectangle> tree = create(3, 10);\n        assertEquals(3, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSizeIsZeroIfTreeEmpty()", "name": "testSizeIsZeroIfTreeEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsZeroIfTreeEmpty()", "original_string": "    @Test\n    public void testSizeIsZeroIfTreeEmpty() {\n        assertEquals(0, create(3, 0).size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSizeIsOneIfTreeHasOneEntry()", "name": "testSizeIsOneIfTreeHasOneEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsOneIfTreeHasOneEntry()", "original_string": "    @Test\n    public void testSizeIsOneIfTreeHasOneEntry() {\n        assertEquals(1, create(3, 1).size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSizeIsFiveIfTreeHasFiveEntries()", "name": "testSizeIsFiveIfTreeHasFiveEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsFiveIfTreeHasFiveEntries()", "original_string": "    @Test\n    public void testSizeIsFiveIfTreeHasFiveEntries() {\n        assertEquals(5, create(3, 5).size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSizeAfterDelete()", "name": "testSizeAfterDelete", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterDelete()", "original_string": "    @Test\n    public void testSizeAfterDelete() {\n        Entry<Object, Rectangle> entry = e(1);\n        RTree<Object, Rectangle> tree = create(3, 0).add(entry).add(entry).add(entry).delete(entry);\n        assertEquals(2, tree.size());\n\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeletionThatRemovesAllNodesChildren()", "name": "testDeletionThatRemovesAllNodesChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeletionThatRemovesAllNodesChildren()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeletionThatRemovesAllNodesChildren() {\n        RTree<Object, Rectangle> tree = create(3, 8);\n        tree = tree.add(e(10));\n        // node children are now 1,2 and 3,4\n        assertEquals(3, tree.calculateDepth());\n        tree = tree.delete(e(10));\n        // node children are now 1,2 and 3\n        assertEquals(3, tree.calculateDepth());\n        assertEquals(Sets.newHashSet(e(1), e(2), e(3), e(4), e(5), e(6), e(7), e(8)),\n                Sets.newHashSet(tree.entries().toList().toBlocking().single()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteOfEntryThatDoesNotExistFromTreeOfOneEntry()", "name": "testDeleteOfEntryThatDoesNotExistFromTreeOfOneEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeleteOfEntryThatDoesNotExistFromTreeOfOneEntry()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeleteOfEntryThatDoesNotExistFromTreeOfOneEntry() {\n        RTree<Object, Geometry> tree = RTree.create().add(e(1));\n        tree = tree.delete(e(2));\n        assertEquals(Lists.newArrayList(e(1)), tree.entries().toList().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteFromEmptyTree()", "name": "testDeleteFromEmptyTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteFromEmptyTree()", "original_string": "    @Test\n    public void testDeleteFromEmptyTree() {\n        RTree<Object, Geometry> tree = RTree.create();\n        tree = tree.delete(e(2));\n        assertEquals(0, (int) tree.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBuilder1()", "name": "testBuilder1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder1()", "original_string": "    @Test\n    public void testBuilder1() {\n        RTree<Object, Point> tree = RTree.minChildren(1).maxChildren(4)\n                .selector(new SelectorMinimalAreaIncrease()).splitter(new SplitterQuadratic())\n                .create();\n        testBuiltTree(tree);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeletionOfEntryThatDoesNotExistFromNonLeaf()", "name": "testDeletionOfEntryThatDoesNotExistFromNonLeaf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeletionOfEntryThatDoesNotExistFromNonLeaf()", "original_string": "    @Test\n    public void testDeletionOfEntryThatDoesNotExistFromNonLeaf() {\n        RTree<Object, Rectangle> tree = create(3, 100).delete(e(1000));\n        assertEquals(100, (int) tree.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBuilder2()", "name": "testBuilder2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder2()", "original_string": "    @Test\n    public void testBuilder2() {\n        RTree<Object, Point> tree = RTree.selector(new SelectorMinimalAreaIncrease()).minChildren(1)\n                .maxChildren(4).splitter(new SplitterQuadratic()).create();\n        testBuiltTree(tree);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBuilder3()", "name": "testBuilder3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder3()", "original_string": "    @Test\n    public void testBuilder3() {\n        RTree<Object, Point> tree = RTree.maxChildren(4).selector(new SelectorMinimalAreaIncrease())\n                .minChildren(1).splitter(new SplitterQuadratic()).create();\n        testBuiltTree(tree);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBuilder4()", "name": "testBuilder4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder4()", "original_string": "    @Test\n    public void testBuilder4() {\n        RTree<Object, Point> tree = RTree.splitter(new SplitterQuadratic()).maxChildren(4)\n                .selector(new SelectorMinimalAreaIncrease()).minChildren(1).create();\n        testBuiltTree(tree);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBackpressureIterationForUpTo1000Entries()", "name": "testBackpressureIterationForUpTo1000Entries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureIterationForUpTo1000Entries()", "original_string": "    @Test\n    public void testBackpressureIterationForUpTo1000Entries() {\n        List<Entry<Object, Rectangle>> entries = Utilities.entries1000(Precision.SINGLE);\n        RTree<Object, Rectangle> tree = RTree.star().create();\n        for (int i = 1; i <= 1000; i++) {\n            tree = tree.add(entries.get(i - 1));\n            final HashSet<Entry<Object, Rectangle>> set = new HashSet<Entry<Object, Rectangle>>();\n            tree.entries().subscribe(createBackpressureSubscriber(set));\n            assertEquals(new HashSet<Entry<Object, Rectangle>>(entries.subList(0, i)), set);\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testNearestSameDirection()", "name": "testNearestSameDirection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestSameDirection()", "original_string": "    @Test\n    public void testNearestSameDirection() {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).<Object, Rectangle>create().add(e(1))\n                .add(e(2)).add(e(3)).add(e(10)).add(e(11));\n        List<Entry<Object, Rectangle>> list = tree.nearest(r(9), 10, 2).toList().toBlocking()\n                .single();\n        assertEquals(2, list.size());\n        System.out.println(list);\n        assertEquals(10, list.get(0).geometry().mbr().x1(), PRECISION);\n        assertEquals(11, list.get(1).geometry().mbr().x1(), PRECISION);\n\n        List<Entry<Object, Rectangle>> list2 = tree.nearest(r(10), 8, 3).toList().toBlocking()\n                .single();\n        assertEquals(2, list2.size());\n        assertEquals(10, list2.get(1).geometry().mbr().x1(), PRECISION);\n        assertEquals(11, list2.get(0).geometry().mbr().x1(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testNearestDifferentDirections()", "name": "testNearestDifferentDirections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestDifferentDirections()", "original_string": "    @Test\n    public void testNearestDifferentDirections() {\n        RTree<Object, Geometry> tree = RTree.maxChildren(4).create().add(e(1)).add(e(2)).add(e(3))\n                .add(e(9)).add(e(10));\n        List<Entry<Object, Geometry>> list = tree.nearest(r(6), 10, 2).toList().toBlocking()\n                .single();\n        assertEquals(2, list.size());\n        assertEquals(3, list.get(0).geometry().mbr().x1(), PRECISION);\n        assertEquals(9, list.get(1).geometry().mbr().x1(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testNearestToAPoint()", "name": "testNearestToAPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestToAPoint()", "original_string": "    @Test\n    public void testNearestToAPoint() {\n        Object value = new Object();\n        RTree<Object, Geometry> tree = RTree.create().add(value, point(1, 1));\n        List<Entry<Object, Geometry>> list = tree.nearest(point(2, 2), 3, 2).toList().toBlocking()\n                .single();\n        assertEquals(1, list.size());\n        assertEquals(value, list.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testNearestReturnsInOrder()", "name": "testNearestReturnsInOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestReturnsInOrder()", "original_string": "    @Test\n    public void testNearestReturnsInOrder() {\n        Object value = new Object();\n        RTree<Object, Geometry> tree = RTree.create().add(value, point(1, 1))\n                .add(value, point(2, 2)).add(value, point(3, 3)).add(value, point(4, 4));\n        List<Entry<Object, Geometry>> list = tree.nearest(point(0, 0), 10, 10).toList().toBlocking()\n                .single();\n        System.out.println(list);\n        assertEquals(4, list.size());\n        assertEquals(point(1, 1), list.get(0).geometry());\n        assertEquals(point(2, 2), list.get(1).geometry());\n        assertEquals(point(3, 3), list.get(2).geometry());\n        assertEquals(point(4, 4), list.get(3).geometry());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testNearestHonoursUnsubscribeJustBeforeCompletion()", "name": "testNearestHonoursUnsubscribeJustBeforeCompletion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNearestHonoursUnsubscribeJustBeforeCompletion()", "original_string": "    @Test\n    public void testNearestHonoursUnsubscribeJustBeforeCompletion() {\n        Object value = new Object();\n        RTree<Object, Geometry> tree = RTree.create().add(value, point(1, 1));\n        final AtomicBoolean completeCalled = new AtomicBoolean(false);\n        tree.nearest(point(0, 0), 10, 10).subscribe(new Subscriber<Object>() {\n\n            @Override\n            public void onCompleted() {\n                completeCalled.set(true);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Object t) {\n                unsubscribe();\n            }\n        });\n        assertFalse(completeCalled.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testVisualizer()", "name": "testVisualizer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVisualizer()", "original_string": "    @Test\n    public void testVisualizer() {\n        List<Entry<Object, Geometry>> entries = createRandomEntries(1000);\n        int maxChildren = 8;\n        RTree<Object, Geometry> tree = RTree.maxChildren(maxChildren).create().add(entries);\n        tree.visualize(600, 600).save(\"target/tree.png\");\n\n        RTree<Object, Geometry> tree2 = RTree.star().maxChildren(maxChildren).create().add(entries);\n        tree2.visualize(600, 600).save(\"target/tree2.png\");\n\n        RTree<Object, Geometry> tree3 = RTree.maxChildren(maxChildren).create(entries);\n        tree3.visualize(600, 600).save(\"target/tree3.png\");\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSplitterRStarThrowsExceptionOnEmptyList()", "name": "testSplitterRStarThrowsExceptionOnEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testSplitterRStarThrowsExceptionOnEmptyList()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testSplitterRStarThrowsExceptionOnEmptyList() {\n        SplitterRStar spl = new SplitterRStar();\n        spl.split(Collections.<HasGeometry>emptyList(), 4);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchOnGreekDataUsingFlatBuffersFactory()", "name": "testSearchOnGreekDataUsingFlatBuffersFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchOnGreekDataUsingFlatBuffersFactory()", "original_string": "    @Test\n    public void testSearchOnGreekDataUsingFlatBuffersFactory() {\n\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testVisualizerWithGreekData()", "name": "testVisualizerWithGreekData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVisualizerWithGreekData()", "original_string": "    @Test\n    public void testVisualizerWithGreekData() {\n        List<Entry<Object, Point>> entries = GreekEarthquakes.entriesList(Precision.DOUBLE);\n        int maxChildren = 8;\n        RTree<Object, Point> tree = RTree.maxChildren(maxChildren)\n                .factory(new FactoryFlatBuffers<Object, Geometry>(new Func1<Object, byte[]>() {\n                    @Override\n                    public byte[] call(Object o) {\n                        return \"boo\".getBytes();\n                    }\n                }, new Func1<byte[], Object>() {\n                    @Override\n                    public Object call(byte[] t) {\n                        return new String(t);\n                    }\n                })).<Object, Point>create().add(entries);\n        tree.visualize(2000, 2000).save(\"target/greek.png\");\n\n        // do search\n        int found = tree.search(Geometries.rectangle(40, 27.0, 40.5, 27.5)).count().toBlocking()\n                .single();\n        System.out.println(\"found=\" + found);\n        assertEquals(22, found);\n\n        RTree<Object, Point> tree2 = RTree.maxChildren(maxChildren).star().<Object, Point>create()\n                .add(entries);\n        tree2.visualize(2000, 2000).save(\"target/greek2.png\");\n\n        RTree<Object, Point> tree3 = RTree.maxChildren(maxChildren).create(entries);\n        tree3.visualize(2000, 2000).save(\"target/greek3.png\");\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteOneFromOne()", "name": "testDeleteOneFromOne", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteOneFromOne()", "original_string": "    @Test\n    public void testDeleteOneFromOne() {\n        Entry<Object, Rectangle> e1 = e(1);\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).<Object, Rectangle>create().add(e1)\n                .delete(e1);\n        assertEquals(0, (int) tree.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteOneFromTreeWithDepthGreaterThanOne()", "name": "testDeleteOneFromTreeWithDepthGreaterThanOne", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteOneFromTreeWithDepthGreaterThanOne()", "original_string": "    @Test\n    public void testDeleteOneFromTreeWithDepthGreaterThanOne() {\n        Entry<Object, Rectangle> e1 = e(1);\n        RTree<Object, Rectangle> tree = RTree.maxChildren(4).<Object, Rectangle>create().add(e1)\n                .add(e(2)).add(e(3)).add(e(4)).add(e(5)).add(e(6)).add(e(7)).add(e(8)).add(e(9))\n                .add(e(10)).delete(e1);\n        assertEquals(9, (int) tree.entries().count().toBlocking().single());\n        assertFalse(tree.entries().contains(e1).toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteOneFromLargeTreeThenDeleteAllAndEnsureEmpty()", "name": "testDeleteOneFromLargeTreeThenDeleteAllAndEnsureEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteOneFromLargeTreeThenDeleteAllAndEnsureEmpty()", "original_string": "    @Test\n    public void testDeleteOneFromLargeTreeThenDeleteAllAndEnsureEmpty() {\n        int n = 10000;\n        RTree<Object, Geometry> tree = createRandomRTree(n).add(e(1)).add(e(2)).delete(e(1));\n        assertEquals(n + 1, (int) tree.entries().count().toBlocking().single());\n        assertFalse(tree.entries().contains(e(1)).toBlocking().single());\n        assertTrue(tree.entries().contains(e(2)).toBlocking().single());\n        n++;\n        assertEquals(n, tree.size());\n\n        for (Entry<Object, Geometry> entry : tree.entries().toBlocking().toIterable()) {\n            tree = tree.delete(entry);\n            n--;\n            assertEquals(n, tree.size());\n        }\n        assertEquals(0, (int) tree.entries().count().toBlocking().single());\n        assertTrue(tree.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteOnlyDeleteOneIfThereAreMoreThanMaxChildren()", "name": "testDeleteOnlyDeleteOneIfThereAreMoreThanMaxChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteOnlyDeleteOneIfThereAreMoreThanMaxChildren()", "original_string": "    @Test\n    public void testDeleteOnlyDeleteOneIfThereAreMoreThanMaxChildren() {\n        Entry<Object, Rectangle> e1 = e(1);\n        int count = RTree.maxChildren(4).create().add(e1).add(e1).add(e1).add(e1).add(e1).delete(e1)\n                .search(e1.geometry().mbr()).count().toBlocking().single();\n        assertEquals(4, count);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteAllIfThereAreMoreThanMaxChildren()", "name": "testDeleteAllIfThereAreMoreThanMaxChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteAllIfThereAreMoreThanMaxChildren()", "original_string": "    @Test\n    public void testDeleteAllIfThereAreMoreThanMaxChildren() {\n        Entry<Object, Rectangle> e1 = e(1);\n        int count = RTree.maxChildren(4).create().add(e1).add(e1).add(e1).add(e1).add(e1)\n                .delete(e1, true).search(e1.geometry().mbr()).count().toBlocking().single();\n        assertEquals(0, count);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteItemThatIsNotPresentDoesNothing()", "name": "testDeleteItemThatIsNotPresentDoesNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteItemThatIsNotPresentDoesNothing()", "original_string": "    @Test\n    public void testDeleteItemThatIsNotPresentDoesNothing() {\n        Entry<Object, Rectangle> e1 = e(1);\n        Entry<Object, Rectangle> e2 = e(2);\n        RTree<Object, Rectangle> tree = RTree.<Object, Rectangle>create().add(e1);\n        assertTrue(tree == tree.delete(e2));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testExampleOnReadMe()", "name": "testExampleOnReadMe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExampleOnReadMe()", "original_string": "    @Test\n    public void testExampleOnReadMe() {\n        RTree<String, Geometry> tree = RTree.maxChildren(5).create();\n        tree = tree.add(entry(\"DAVE\", point(10, 20))).add(entry(\"FRED\", point(12, 25)))\n                .add(entry(\"MARY\", point(97, 125)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testUnsubscribe()", "name": "testUnsubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(timeout = 2000)\n    public void testUnsubscribe()", "original_string": "    @Test(timeout = 2000)\n    public void testUnsubscribe() {\n        RTree<Object, Geometry> tree = createRandomRTree(1000);\n        assertEquals(0, (int) tree.entries().take(0).count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test(timeout = 2000)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(timeout = 2000)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchConditionAlwaysFalse()", "name": "testSearchConditionAlwaysFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchConditionAlwaysFalse()", "original_string": "    @Test\n    public void testSearchConditionAlwaysFalse() {\n        @SuppressWarnings(\"unchecked\")\n        RTree<Object, Geometry> tree = (RTree<Object, Geometry>) (RTree<?, ?>) create(3, 3);\n        assertEquals(0, (int) tree.search(Functions.alwaysFalse()).count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testAddOverload()", "name": "testAddOverload", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOverload()", "original_string": "    @Test\n    public void testAddOverload() {\n        @SuppressWarnings(\"unchecked\")\n        RTree<Object, Geometry> tree = (RTree<Object, Geometry>) (RTree<?, ?>) create(3, 0);\n        tree = tree.add(123, Geometries.point(1, 2));\n        assertEquals(1, (int) tree.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteOverload()", "name": "testDeleteOverload", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteOverload()", "original_string": "    @Test\n    public void testDeleteOverload() {\n        @SuppressWarnings(\"unchecked\")\n        RTree<Object, Geometry> tree = (RTree<Object, Geometry>) (RTree<?, ?>) create(3, 0);\n        tree = tree.add(123, Geometries.point(1, 2)).delete(123, Geometries.point(1, 2));\n        assertEquals(0, (int) tree.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testStandardRTreeSearch()", "name": "testStandardRTreeSearch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStandardRTreeSearch()", "original_string": "    @Test\n    public void testStandardRTreeSearch() {\n        Rectangle r = rectangle(13.0, 23.0, 50.0, 80.0);\n        Point[] points = { point(59.0, 91.0), point(86.0, 14.0), point(36.0, 60.0),\n                point(57.0, 36.0), point(14.0, 37.0) };\n\n        RTree<Integer, Geometry> tree = RTree.create();\n        for (int i = 0; i < points.length; i++) {\n            Point point = points[i];\n            System.out.println(\"point(\" + point.x() + \",\" + point.y() + \"), value=\" + (i + 1));\n            tree = tree.add(i + 1, point);\n        }\n        System.out.println(tree.asString());\n        System.out.println(\"searching \" + r);\n        Set<Integer> set = new HashSet<Integer>(\n                tree.search(r).map(RTreeTest.<Integer>toValue()).toList().toBlocking().single());\n        assertEquals(new HashSet<Integer>(asList(3, 5)), set);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testStandardRTreeSearch2()", "name": "testStandardRTreeSearch2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStandardRTreeSearch2()", "original_string": "    @Test\n    public void testStandardRTreeSearch2() {\n        Rectangle r = rectangle(10.0, 10.0, 50.0, 50.0);\n        Point[] points = { point(28.0, 19.0), point(29.0, 4.0), point(10.0, 63.0),\n                point(34.0, 85.0), point(62.0, 45.0) };\n\n        RTree<Integer, Geometry> tree = RTree.create();\n        for (int i = 0; i < points.length; i++) {\n            Point point = points[i];\n            System.out.println(\"point(\" + point.x() + \",\" + point.y() + \"), value=\" + (i + 1));\n            tree = tree.add(i + 1, point);\n        }\n        System.out.println(tree.asString());\n        System.out.println(\"searching \" + r);\n        Set<Integer> set = new HashSet<Integer>(\n                tree.search(r).map(RTreeTest.<Integer>toValue()).toList().toBlocking().single());\n        assertEquals(new HashSet<Integer>(asList(1)), set);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBulkLoadingTreeAndStarTreeReturnsSameAsStandardRTree()", "name": "testBulkLoadingTreeAndStarTreeReturnsSameAsStandardRTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBulkLoadingTreeAndStarTreeReturnsSameAsStandardRTree()", "original_string": "    @Test\n    public void testBulkLoadingTreeAndStarTreeReturnsSameAsStandardRTree() {\n\n        RTree<Integer, Geometry> tree1 = RTree.create();\n        RTree<Integer, Geometry> tree2 = RTree.star().create();\n\n        Rectangle[] testRects = { rectangle(0, 0, 0, 0), rectangle(0, 0, 100, 100),\n                rectangle(0, 0, 10, 10), rectangle(0.12, 0.25, 50.356, 50.756),\n                rectangle(1, 0.252, 50, 69.23), rectangle(13.12, 23.123, 50.45, 80.9),\n                rectangle(10, 10, 50, 50) };\n\n        List<Entry<Integer, Geometry>> entries = new ArrayList<Entry<Integer, Geometry>>(10000);\n        for (int i = 1; i <= 10000; i++) {\n            Point point = nextPoint();\n            // System.out.println(\"point(\" + point.x() + \",\" + point.y() +\n            // \"),\");\n            tree1 = tree1.add(i, point);\n            tree2 = tree2.add(i, point);\n            entries.add(new EntryDefault<Integer, Geometry>(i, point));\n        }\n        RTree<Integer, Geometry> tree3 = RTree.create(entries);\n\n        // tree2.visualize(2000, 2000).save(\"target/tree22.png\");\n        // tree3.visualize(2000, 2000).save(\"target/tree33.png\");\n\n        for (Rectangle r : testRects) {\n            Set<Integer> res1 = new HashSet<Integer>(tree1.search(r)\n                    .map(RTreeTest.<Integer>toValue()).toList().toBlocking().single());\n            Set<Integer> res2 = new HashSet<Integer>(tree2.search(r)\n                    .map(RTreeTest.<Integer>toValue()).toList().toBlocking().single());\n            Set<Integer> res3 = new HashSet<Integer>(tree3.search(r)\n                    .map(RTreeTest.<Integer>toValue()).toList().toBlocking().single());\n            System.out.println(\"searchRect= rectangle(\" + r.x1() + \",\" + r.y1() + \",\" + r.x2() + \",\"\n                    + r.y2() + \")\");\n            System.out.println(\"res1.size=\" + res1.size() + \",res2.size=\" + res2.size()\n                    + \",res3.size=\" + res3.size());\n            // System.out.println(\"res1=\" + res1 + \",res2=\" + res2 + \",res3=\" + res3);\n            assertEquals(res1.size(), res2.size());\n            assertEquals(res1.size(), res3.size());\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testUnsubscribeWhileIteratingLeafNode()", "name": "testUnsubscribeWhileIteratingLeafNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsubscribeWhileIteratingLeafNode()", "original_string": "    @Test\n    public void testUnsubscribeWhileIteratingLeafNode() {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(5).<Object, Rectangle>create().add(e(1))\n                .add(e(2));\n        tree.entries().subscribe(new Subscriber<Object>() {\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Object t) {\n                unsubscribe();\n            }\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testUnsubscribeWhileIteratingNonLeafNode()", "name": "testUnsubscribeWhileIteratingNonLeafNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsubscribeWhileIteratingNonLeafNode()", "original_string": "    @Test\n    public void testUnsubscribeWhileIteratingNonLeafNode() {\n        final AtomicBoolean completed = new AtomicBoolean(false);\n        RTree<Object, Rectangle> tree = RTree.maxChildren(3).<Object, Rectangle>create().add(e(1))\n                .add(e(2)).add(e(3)).add(e(4));\n        tree.entries().subscribe(new Subscriber<Object>() {\n\n            @Override\n            public void onCompleted() {\n                completed.set(true);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Object t) {\n                unsubscribe();\n            }\n        });\n        assertFalse(completed.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithIntersectsRectangleFunction()", "name": "testSearchWithIntersectsRectangleFunction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithIntersectsRectangleFunction()", "original_string": "    @Test\n    public void testSearchWithIntersectsRectangleFunction() {\n        RTree<Integer, Rectangle> tree = RTree.create();\n        tree.search(circle(0, 0, 1), rectangleIntersectsCircle);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithIntersectsPointFunctionReturnsOne()", "name": "testSearchWithIntersectsPointFunctionReturnsOne", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithIntersectsPointFunctionReturnsOne()", "original_string": "    @Test\n    public void testSearchWithIntersectsPointFunctionReturnsOne() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(0, 0));\n        Observable<Entry<Integer, Point>> entries = tree.search(circle(0, 0, 1),\n                pointIntersectsCircle);\n        assertEquals(1, (int) entries.count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithIntersectsPointFunctionReturnsNone()", "name": "testSearchWithIntersectsPointFunctionReturnsNone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithIntersectsPointFunctionReturnsNone()", "original_string": "    @Test\n    public void testSearchWithIntersectsPointFunctionReturnsNone() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(10, 10));\n        Observable<Entry<Integer, Point>> entries = tree.search(circle(0, 0, 1),\n                pointIntersectsCircle);\n        assertEquals(0, (int) entries.count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithDistanceFunctionIntersectsMbrButNotActualGeometry()", "name": "testSearchWithDistanceFunctionIntersectsMbrButNotActualGeometry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithDistanceFunctionIntersectsMbrButNotActualGeometry()", "original_string": "    @Test\n    public void testSearchWithDistanceFunctionIntersectsMbrButNotActualGeometry() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(0, 0)).add(2,\n                point(1, 1));\n\n        Observable<Entry<Integer, Point>> entries = tree.search(circle(0, 0, 1), 0.1,\n                distanceCircleToPoint);\n        assertEquals(1, (int) entries.count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithDistanceFunctionIntersectsMbrAndActualGeometry()", "name": "testSearchWithDistanceFunctionIntersectsMbrAndActualGeometry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithDistanceFunctionIntersectsMbrAndActualGeometry()", "original_string": "    @Test\n    public void testSearchWithDistanceFunctionIntersectsMbrAndActualGeometry() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(0, 0)).add(2,\n                point(1, 1));\n\n        Observable<Entry<Integer, Point>> entries = tree.search(circle(0, 0, 1), 0.5,\n                distanceCircleToPoint);\n        assertEquals(2, (int) entries.count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithDistanceFunctionIntersectsNothing()", "name": "testSearchWithDistanceFunctionIntersectsNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithDistanceFunctionIntersectsNothing()", "original_string": "    @Test\n    public void testSearchWithDistanceFunctionIntersectsNothing() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(0, 0)).add(2,\n                point(1, 1));\n\n        Observable<Entry<Integer, Point>> entries = tree.search(circle(10, 10, 1), 0.5,\n                distanceCircleToPoint);\n        assertEquals(0, (int) entries.count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]calculateDepthOfEmptyTree()", "name": "calculateDepthOfEmptyTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void calculateDepthOfEmptyTree()", "original_string": "    @Test\n    public void calculateDepthOfEmptyTree() {\n        RTree<Object, Geometry> tree = RTree.create();\n        assertEquals(0, tree.calculateDepth());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]calculateAsStringOfEmptyTree()", "name": "calculateAsStringOfEmptyTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void calculateAsStringOfEmptyTree()", "original_string": "    @Test\n    public void calculateAsStringOfEmptyTree() {\n        RTree<Object, Geometry> tree = RTree.create();\n        assertEquals(\"\", tree.asString());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testForMeiZhao()", "name": "testForMeiZhao", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForMeiZhao()", "original_string": "    @Test\n    public void testForMeiZhao() {\n        for (int minChildren = 1; minChildren <= 2; minChildren++) {\n            RTree<Integer, Point> tree = RTree.maxChildren(3).minChildren(minChildren)\n                    .<Integer, Point>create().add(1, point(1, 9)).add(2, point(2, 10))\n                    .add(3, point(4, 8)).add(4, point(6, 7)).add(5, point(9, 10))\n                    .add(6, point(7, 5)).add(7, point(5, 6)).add(8, point(4, 3)).add(9, point(3, 2))\n                    .add(10, point(9, 1)).add(11, point(10, 4)).add(12, point(6, 2))\n                    .add(13, point(8, 3));\n            System.out.println(tree.asString());\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithCircleFindsCentreOnly()", "name": "testSearchWithCircleFindsCentreOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithCircleFindsCentreOnly()", "original_string": "    @Test\n    public void testSearchWithCircleFindsCentreOnly() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(1, 1))\n                .add(2, point(2, 2)).add(3, point(3, 3));\n        List<Entry<Integer, Point>> list = tree.search(Geometries.circle(2, 2, 1)).toList()\n                .toBlocking().single();\n        assertEquals(1, list.size());\n        assertEquals(2, (int) list.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithCircleFindsAll()", "name": "testSearchWithCircleFindsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithCircleFindsAll()", "original_string": "    @Test\n    public void testSearchWithCircleFindsAll() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(1, 1))\n                .add(2, point(2, 2)).add(3, point(3, 3));\n        List<Entry<Integer, Point>> list = tree.search(Geometries.circle(2, 2, 1.5)).toList()\n                .toBlocking().single();\n        assertEquals(3, list.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithLineFindsAll()", "name": "testSearchWithLineFindsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithLineFindsAll()", "original_string": "    @Test\n    public void testSearchWithLineFindsAll() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(1, 1))\n                .add(2, point(2, 2)).add(3, point(3, 3));\n        List<Entry<Integer, Point>> list = tree.search(Geometries.line(0, 0, 4, 4)).toList()\n                .toBlocking().single();\n        assertEquals(3, list.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithLineFindsOne()", "name": "testSearchWithLineFindsOne", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithLineFindsOne()", "original_string": "    @Test\n    public void testSearchWithLineFindsOne() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(1, 1))\n                .add(2, point(2, 2)).add(3, point(3, 3));\n        List<Entry<Integer, Point>> list = tree.search(Geometries.line(1.5, 1.5, 2.5, 2.5)).toList()\n                .toBlocking().single();\n        assertEquals(1, list.size());\n        assertEquals(2, (int) list.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchWithLineFindsNone()", "name": "testSearchWithLineFindsNone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchWithLineFindsNone()", "original_string": "    @Test\n    public void testSearchWithLineFindsNone() {\n        RTree<Integer, Point> tree = RTree.<Integer, Point>create().add(1, point(1, 1))\n                .add(2, point(2, 2)).add(3, point(3, 3));\n        List<Entry<Integer, Point>> list = tree.search(Geometries.line(1.5, 1.5, 2.6, 2.5)).toList()\n                .toBlocking().single();\n        System.out.println(list);\n        assertEquals(0, list.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testRTreeRootMbrWhenRTreeEmpty()", "name": "testRTreeRootMbrWhenRTreeEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRTreeRootMbrWhenRTreeEmpty()", "original_string": "    @Test\n    public void testRTreeRootMbrWhenRTreeEmpty() {\n        assertFalse(RTree.create().mbr().isPresent());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testRTreeRootMbrWhenRTreeNonEmpty()", "name": "testRTreeRootMbrWhenRTreeNonEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRTreeRootMbrWhenRTreeNonEmpty()", "original_string": "    @Test\n    public void testRTreeRootMbrWhenRTreeNonEmpty() {\n        Optional<Rectangle> r = RTree.<Integer, Point>create().add(1, point(1, 1))\n                .add(2, point(2, 2)).mbr();\n        assertEquals(Geometries.rectangle(1, 1, 2, 2), r.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testIntersectsPointLine()", "name": "testIntersectsPointLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsPointLine()", "original_string": "    @Test\n    public void testIntersectsPointLine() {\n        assertTrue(Intersects.lineIntersectsPoint.call(line(1, 1, 2, 2), point(1, 1)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testGroupByIssue40()", "name": "testGroupByIssue40", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(timeout = 30000000)\n    public void testGroupByIssue40()", "original_string": "    @Test(timeout = 30000000)\n    public void testGroupByIssue40() {\n        RTree<Integer, Geometry> tree = RTree.star().create();\n\n        tree = tree.add(1, Geometries.point(13.0, 52.0));\n        tree = tree.add(2, Geometries.point(13.0, 52.0));\n        tree = tree.add(3, Geometries.point(13.0, 52.0));\n        tree = tree.add(4, Geometries.point(13.0, 52.0));\n        tree = tree.add(5, Geometries.point(13.0, 52.0));\n        tree = tree.add(6, Geometries.point(13.0, 52.0));\n\n        Rectangle rectangle = Geometries.rectangle(12.9, 51.9, 13.1, 52.1);\n        assertEquals(Integer.valueOf(2), tree.search(rectangle).doOnRequest(new Action1<Long>() {\n            @Override\n            public void call(Long n) {\n                System.out.println(\"requestFromGroupBy=\" + n);\n            }\n        }).groupBy(new Func1<Entry<Integer, Geometry>, Boolean>() {\n            @Override\n            public Boolean call(Entry<Integer, Geometry> entry) {\n                System.out.println(entry);\n                return entry.value() % 2 == 0;\n            }\n        }).doOnRequest(new Action1<Long>() {\n            @Override\n            public void call(Long n) {\n                System.out.println(\"requestFromFlatMap=\" + n);\n            }\n        }).flatMap(\n                new Func1<GroupedObservable<Boolean, Entry<Integer, Geometry>>, Observable<Integer>>() {\n                    @Override\n                    public Observable<Integer> call(\n                            GroupedObservable<Boolean, Entry<Integer, Geometry>> group) {\n                        return group.count();\n                    }\n                }).count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test(timeout = 30000000)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(timeout = 30000000)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBackpressureForOverflow()", "name": "testBackpressureForOverflow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureForOverflow()", "original_string": "    @Test\n    public void testBackpressureForOverflow() {\n        RTree<Integer, Geometry> tree = RTree.star().create();\n\n        tree = tree.add(1, Geometries.point(13.0, 52.0));\n        tree = tree.add(2, Geometries.point(13.0, 52.0));\n        tree = tree.add(3, Geometries.point(13.0, 52.0));\n        tree = tree.add(4, Geometries.point(13.0, 52.0));\n        tree = tree.add(5, Geometries.point(13.0, 52.0));\n        tree = tree.add(6, Geometries.point(13.0, 52.0));\n        final AtomicInteger count = new AtomicInteger();\n        Rectangle rectangle = Geometries.rectangle(12.9, 51.9, 13.1, 52.1);\n        tree.search(rectangle).subscribe(new Subscriber<Object>() {\n\n            @Override\n            public void onStart() {\n                request(4);\n            }\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Object t) {\n                request(Long.MAX_VALUE);\n                count.incrementAndGet();\n            }\n        });\n        assertEquals(6, count.get());\n        assertEquals(6, (int) tree.search(rectangle).count().toBlocking().single());\n\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteIssue81d()", "name": "testDeleteIssue81d", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteIssue81d()", "original_string": "    @Test\n    public void testDeleteIssue81d() {\n         RTree<Object, Point> t = RTree.create();\n         t = t.add(1, Geometries.pointGeographic(123.4d, 23.3d));\n         t = t.delete(1, Geometries.pointGeographic(123.4d, 23.3d));\n         assertEquals(0, t.size());\n     }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testDeleteIssue81f()", "name": "testDeleteIssue81f", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n     public void testDeleteIssue81f()", "original_string": "     @Test\n     public void testDeleteIssue81f() {\n         RTree<Object, Point> t = RTree.create();\n         t = t.add(1, Geometries.pointGeographic(123.4f, 23.3f));\n         t = t.delete(1, Geometries.pointGeographic(123.4f, 23.3f));\n         assertEquals(0, t.size());\n     }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n     public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSearchGreekEarthquakesDouble()", "name": "testSearchGreekEarthquakesDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchGreekEarthquakesDouble()", "original_string": "    @Test\n    public void testSearchGreekEarthquakesDouble() {\n        Observable<Entry<Object, Point>> entriesDouble = GreekEarthquakes.entries(Precision.DOUBLE);\n        RTree<Object, Point> t = RTree.maxChildren(4).<Object, Point>create().add(entriesDouble)\n                .last().toBlocking().single(); //\n        t.search(Geometries.rectangle(40, 27.0, 40.5, 27.5)) //\n                .test() //\n                .assertValueCount(22) //\n                .assertCompleted();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ComparatorsTest.java.ComparatorsTest.[void]testConstructorIsPrivate()", "name": "testConstructorIsPrivate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorIsPrivate()", "original_string": "    @Test\n    public void testConstructorIsPrivate() {\n        Asserts.assertIsUtilityClass(Comparators.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ComparatorsTest.java", "class_name": "ComparatorsTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ComparatorsTest.java.ComparatorsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/UtilTest.java.UtilTest.[void]coverPrivateConstructor()", "name": "coverPrivateConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void coverPrivateConstructor()", "original_string": "    @Test\n    public void coverPrivateConstructor() {\n        Asserts.assertIsUtilityClass(Util.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/UtilTest.java", "class_name": "UtilTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/UtilTest.java.UtilTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/UtilTest.java.UtilTest.[void]testMbrWithNegativeValues()", "name": "testMbrWithNegativeValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMbrWithNegativeValues()", "original_string": "    @Test\n    public void testMbrWithNegativeValues() {\n        Rectangle r = Geometries.rectangle(-2D, -2, -1, -1);\n        Rectangle mbr = Util.mbr(Collections.singleton(r));\n        assertEquals(r, mbr);\n        System.out.println(r);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/UtilTest.java", "class_name": "UtilTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/UtilTest.java.UtilTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testWorstCombinationOn3()", "name": "testWorstCombinationOn3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWorstCombinationOn3()", "original_string": "    @Test\n    public void testWorstCombinationOn3() {\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(100);\n        final Mbr r3 = r(3);\n        final Pair<Mbr> pair = SplitterQuadratic.worstCombination(Arrays.asList(r1, r2, r3));\n        assertEquals(r1, pair.value1());\n        assertEquals(r2, pair.value2());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testWorstCombinationOnTwoEntries()", "name": "testWorstCombinationOnTwoEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWorstCombinationOnTwoEntries()", "original_string": "    @Test\n    public void testWorstCombinationOnTwoEntries() {\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final Pair<Mbr> pair = SplitterQuadratic.worstCombination(Arrays.asList(r1, r2));\n        assertEquals(r1, pair.value1());\n        assertEquals(r2, pair.value2());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testWorstCombinationOn4()", "name": "testWorstCombinationOn4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWorstCombinationOn4()", "original_string": "    @Test\n    public void testWorstCombinationOn4() {\n        final Mbr r1 = r(2);\n        final Mbr r2 = r(1);\n        final Mbr r3 = r(3);\n        final Mbr r4 = r(4);\n        final Pair<Mbr> pair = SplitterQuadratic.worstCombination(Arrays.asList(r1, r2, r3, r4));\n        assertEquals(r2, pair.value1());\n        assertEquals(r4, pair.value2());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testGetBestCandidateForGroup1()", "name": "testGetBestCandidateForGroup1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetBestCandidateForGroup1()", "original_string": "    @Test\n    public void testGetBestCandidateForGroup1() {\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final List<Mbr> list = Collections.singletonList(r1);\n        final List<Mbr> group = Collections.singletonList(r2);\n        final Mbr r = SplitterQuadratic.getBestCandidateForGroup(list, group, Util.mbr(group));\n        assertEquals(r1, r);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testGetBestCandidateForGroup2()", "name": "testGetBestCandidateForGroup2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetBestCandidateForGroup2()", "original_string": "    @Test\n    public void testGetBestCandidateForGroup2() {\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final Mbr r3 = r(10);\n        final List<Mbr> list = Collections.singletonList(r1);\n        final List<Mbr> group = Arrays.asList(r2, r3);\n        final Mbr r = SplitterQuadratic.getBestCandidateForGroup(list, group, Util.mbr(group));\n        assertEquals(r1, r);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testGetBestCandidateForGroup3()", "name": "testGetBestCandidateForGroup3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetBestCandidateForGroup3()", "original_string": "    @Test\n    public void testGetBestCandidateForGroup3() {\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final Mbr r3 = r(10);\n        final List<Mbr> list = Arrays.asList(r1, r2);\n        final List<Mbr> group = Arrays.asList(r3);\n        final Mbr r = SplitterQuadratic.getBestCandidateForGroup(list, group, Util.mbr(group));\n        assertEquals(r2, r);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testSplit()", "name": "testSplit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSplit()", "original_string": "    @Test\n    public void testSplit() {\n        final SplitterQuadratic q = new SplitterQuadratic();\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final Mbr r3 = r(100);\n        final Mbr r4 = r(101);\n        final ListPair<Mbr> pair = q.split(Arrays.asList(r1, r2, r3, r4), 2);\n        assertEquals(Sets.newHashSet(r1, r2), Sets.newHashSet(pair.group1().list()));\n        assertEquals(Sets.newHashSet(r3, r4), Sets.newHashSet(pair.group2().list()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testSplit2()", "name": "testSplit2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSplit2()", "original_string": "    @Test\n    public void testSplit2() {\n        final SplitterQuadratic q = new SplitterQuadratic();\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final Mbr r3 = r(100);\n        final Mbr r4 = r(101);\n        final Mbr r5 = r(103);\n        final ListPair<Mbr> pair = q.split(Arrays.asList(r1, r2, r3, r4, r5), 2);\n        assertEquals(Sets.newHashSet(r1, r2), Sets.newHashSet(pair.group1().list()));\n        assertEquals(Sets.newHashSet(r3, r4, r5), Sets.newHashSet(pair.group2().list()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testSplit3()", "name": "testSplit3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSplit3()", "original_string": "    @Test\n    public void testSplit3() {\n        final SplitterQuadratic q = new SplitterQuadratic();\n        final Mbr r1 = r(1);\n        final Mbr r2 = r(2);\n        final Mbr r3 = r(100);\n        final Mbr r4 = r(101);\n        final Mbr r5 = r(103);\n        final Mbr r6 = r(104);\n        final ListPair<Mbr> pair = q.split(Arrays.asList(r1, r2, r3, r4, r5, r6), 3);\n        assertEquals(Sets.newHashSet(r1, r2, r3), Sets.newHashSet(pair.group1().list()));\n        assertEquals(Sets.newHashSet(r4, r5, r6), Sets.newHashSet(pair.group2().list()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[void]testExceptionForSplitEmptyList()", "name": "testExceptionForSplitEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testExceptionForSplitEmptyList()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testExceptionForSplitEmptyList() {\n        final SplitterQuadratic q = new SplitterQuadratic();\n        q.split(Collections.<HasGeometry> emptyList(), 3);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest.[void]testLatLongExample()", "name": "testLatLongExample", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLatLongExample()", "original_string": "    @Test\n    public void testLatLongExample() {\n\n        // This is to demonstrate how to use rtree to to do distance searches\n        // with Lat Long points\n\n        // Let's find all cities within 300km of Canberra\n\n        RTree<String, Point> tree = RTree.star().create();\n        tree = tree.add(\"Sydney\", sydney);\n        tree = tree.add(\"Brisbane\", brisbane);\n\n        // Now search for all locations within 300km of Canberra\n        final double distanceKm = 300;\n        List<Entry<String, Point>> list = search(tree, canberra, distanceKm)\n                // get the result\n                .toList().toBlocking().single();\n\n        // should have returned Sydney only\n        assertEquals(1, list.size());\n        assertEquals(\"Sydney\", list.get(0).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "class_name": "LatLongExampleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest.[void]testSearchLatLongCircles()", "name": "testSearchLatLongCircles", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchLatLongCircles()", "original_string": "    @Test\n    public void testSearchLatLongCircles() {\n        RTree<GeoCircleValue<String>, Rectangle> tree = RTree.star().create();\n        // create circles around these major towns\n        GeoCircleValue<String> sydneyCircle = createGeoCircleValue(sydney, 100, \"Sydney\");\n        GeoCircleValue<String> canberraCircle = createGeoCircleValue(canberra, 50, \"Canberra\");\n        GeoCircleValue<String> brisbaneCircle = createGeoCircleValue(brisbane, 200, \"Brisbane\");\n\n        // add the circles to the RTree using the bounding box of the circle as\n        // the geometry\n        tree = add(tree, sydneyCircle);\n        tree = add(tree, canberraCircle);\n        tree = add(tree, brisbaneCircle);\n\n        // now find the circles that contain bungendore (which is 30km from\n        // Canberra)\n        final Point location = bungendore;\n        String result = tree.search(location)\n                // filter on the exact distance from the centre of the GeoCircle\n                .filter(new Func1<Entry<GeoCircleValue<String>, Rectangle>, Boolean>() {\n                    Position from = Position.create(location.y(), location.x());\n\n                    @Override\n                    public Boolean call(Entry<GeoCircleValue<String>, Rectangle> entry) {\n                        Position centre = Position.create(entry.value().lat, entry.value().lon);\n                        return from.getDistanceToKm(centre) < entry.value().radiusKm;\n                    }\n                })\n                // do the search (only expect one value)\n                .toBlocking().single()\n                // get the name of the GoeCircleValue returned\n                .value().value;\n        assertEquals(\"Canberra\", result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "class_name": "LatLongExampleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testJavaIoSerialization()", "name": "testJavaIoSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJavaIoSerialization()", "original_string": "    @Test\n    public void testJavaIoSerialization() throws IOException {\n        Serializer<String, Point> serializer = Serializers.flatBuffers().javaIo();\n        checkRoundTripPoint(serializer);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringPointSerialization()", "name": "testStringPointSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringPointSerialization()", "original_string": "    @Test\n    public void testStringPointSerialization() throws IOException {\n        Serializer<String, Point> serializer = Serializers.flatBuffers().utf8();\n        checkRoundTripPoint(serializer);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringRectangleFloatSerialization()", "name": "testStringRectangleFloatSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringRectangleFloatSerialization()", "original_string": "    @Test\n    public void testStringRectangleFloatSerialization() throws IOException {\n        Serializer<String, Rectangle> serializer = Serializers.flatBuffers().utf8();\n        Entry<String, Rectangle> a = Entries.entry(\"hello\", Geometries.rectangle(1, 2, 3, 4));\n        Entry<String, Rectangle> b = Entries.entry(\"there\", Geometries.rectangle(3, 4, 5, 6));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringRectangleDoubleSerialization()", "name": "testStringRectangleDoubleSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringRectangleDoubleSerialization()", "original_string": "    @Test\n    public void testStringRectangleDoubleSerialization() throws IOException {\n        Serializer<String, Rectangle> serializer = Serializers.flatBuffers().utf8();\n        Entry<String, Rectangle> a = Entries.entry(\"hello\",\n                Geometries.rectangle(1.0000000001, 2, 3, 4));\n        Entry<String, Rectangle> b = Entries.entry(\"there\",\n                Geometries.rectangle(3.0000000001, 4, 5, 6));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringCircleFloatSerialization()", "name": "testStringCircleFloatSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringCircleFloatSerialization()", "original_string": "    @Test\n    public void testStringCircleFloatSerialization() throws IOException {\n        Serializer<String, Circle> serializer = Serializers.flatBuffers().utf8();\n        Entry<String, Circle> a = Entries.entry(\"hello\", Geometries.circle(1, 2, 3));\n        Entry<String, Circle> b = Entries.entry(\"there\", Geometries.circle(3, 4, 5));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringCircleDoubleSerialization()", "name": "testStringCircleDoubleSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringCircleDoubleSerialization()", "original_string": "    @Test\n    public void testStringCircleDoubleSerialization() throws IOException {\n        Serializer<String, Circle> serializer = Serializers.flatBuffers().utf8();\n        Entry<String, Circle> a = Entries.entry(\"hello\", Geometries.circle(1.0000000001, 2, 3));\n        Entry<String, Circle> b = Entries.entry(\"there\", Geometries.circle(3.0000000001, 4, 5));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringLineFloatSerialization()", "name": "testStringLineFloatSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringLineFloatSerialization()", "original_string": "    @Test\n    public void testStringLineFloatSerialization() throws IOException {\n        Serializer<String, Line> serializer = Serializers.flatBuffers().utf8();\n        Entry<String, Line> a = Entries.entry(\"hello\", Geometries.line(1, 2, 3, 4));\n        Entry<String, Line> b = Entries.entry(\"there\", Geometries.line(3, 4, 5, 6));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testStringLineDoubleSerialization()", "name": "testStringLineDoubleSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringLineDoubleSerialization()", "original_string": "    @Test\n    public void testStringLineDoubleSerialization() throws IOException {\n        Serializer<String, Line> serializer = Serializers.flatBuffers().utf8();\n        Entry<String, Line> a = Entries.entry(\"hello\", Geometries.line(1.0000000001, 2, 3, 4));\n        Entry<String, Line> b = Entries.entry(\"there\", Geometries.line(3.0000000001, 4, 5, 6));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testAddToFlatBuffers()", "name": "testAddToFlatBuffers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testAddToFlatBuffers()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testAddToFlatBuffers() throws IOException {\n        Entry<String, Point> a = Entries.entry(\"hello\", Geometries.point(1, 2));\n        Entry<String, Point> b = Entries.entry(\"there\", Geometries.point(3, 4));\n        Entry<String, Point> c = Entries.entry(\"you\", Geometries.point(5, 6));\n        RTree<String, Point> tree = RTree.create();\n        tree = tree.add(a).add(b);\n        Serializer<String, Point> serializer = Serializers.flatBuffers().utf8();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        serializer.write(tree, bytes);\n        bytes.close();\n        byte[] array = bytes.toByteArray();\n        RTree<String, Point> tree2 = serializer.read(new ByteArrayInputStream(array), array.length,\n                InternalStructure.SINGLE_ARRAY);\n        tree2 = tree2.add(c);\n        assertEquals(Sets.newHashSet(a, b, c),\n                Sets.newHashSet(tree2.entries().toList().toBlocking().single()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testDeleteFromFlatBuffers()", "name": "testDeleteFromFlatBuffers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeleteFromFlatBuffers()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeleteFromFlatBuffers() throws IOException {\n        Entry<String, Point> a = Entries.entry(\"hello\", Geometries.point(1, 2));\n        Entry<String, Point> b = Entries.entry(\"there\", Geometries.point(3, 4));\n        RTree<String, Point> tree = RTree.create();\n        tree = tree.add(a).add(b);\n        Serializer<String, Point> serializer = Serializers.flatBuffers().utf8();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        serializer.write(tree, bytes);\n        bytes.close();\n        byte[] array = bytes.toByteArray();\n        RTree<String, Point> tree2 = serializer.read(new ByteArrayInputStream(array), array.length,\n                InternalStructure.SINGLE_ARRAY);\n        tree2 = tree2.delete(a);\n        assertEquals(Sets.newHashSet(b),\n                Sets.newHashSet(tree2.entries().toList().toBlocking().single()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testAddToFlatBuffersWhenRootNodeIsNonLeaf()", "name": "testAddToFlatBuffersWhenRootNodeIsNonLeaf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testAddToFlatBuffersWhenRootNodeIsNonLeaf()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testAddToFlatBuffersWhenRootNodeIsNonLeaf() throws IOException {\n        Entry<String, Point> a = Entries.entry(\"hello\", Geometries.point(1, 2));\n        Entry<String, Point> b = Entries.entry(\"there\", Geometries.point(3, 4));\n        Entry<String, Point> c = Entries.entry(\"you\", Geometries.point(5, 6));\n        Entry<String, Point> d = Entries.entry(\"smart\", Geometries.point(7, 8));\n        Entry<String, Point> e = Entries.entry(\"person\", Geometries.point(9, 10));\n        RTree<String, Point> tree = RTree.create();\n        tree = tree.add(a).add(b).add(c).add(d).add(e);\n        Serializer<String, Point> serializer = Serializers.flatBuffers().utf8();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        serializer.write(tree, bytes);\n        bytes.close();\n        byte[] array = bytes.toByteArray();\n        RTree<String, Point> tree2 = serializer.read(new ByteArrayInputStream(array), array.length,\n                InternalStructure.SINGLE_ARRAY);\n        tree2 = tree2.add(c);\n        assertEquals(Sets.newHashSet(a, b, c, d, e),\n                Sets.newHashSet(tree2.entries().toList().toBlocking().single()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]testDeleteFromFlatBuffersWhenRootNodeIsNonLeaf()", "name": "testDeleteFromFlatBuffersWhenRootNodeIsNonLeaf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeleteFromFlatBuffersWhenRootNodeIsNonLeaf()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testDeleteFromFlatBuffersWhenRootNodeIsNonLeaf() throws IOException {\n        Entry<String, Point> a = Entries.entry(\"hello\", Geometries.point(1, 2));\n        Entry<String, Point> b = Entries.entry(\"there\", Geometries.point(3, 4));\n        Entry<String, Point> c = Entries.entry(\"you\", Geometries.point(5, 6));\n        Entry<String, Point> d = Entries.entry(\"smart\", Geometries.point(7, 8));\n        Entry<String, Point> e = Entries.entry(\"person\", Geometries.point(9, 10));\n        RTree<String, Point> tree = RTree.create();\n        tree = tree.add(a).add(b).add(c).add(d).add(e);\n        Serializer<String, Point> serializer = Serializers.flatBuffers().utf8();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        serializer.write(tree, bytes);\n        bytes.close();\n        byte[] array = bytes.toByteArray();\n        RTree<String, Point> tree2 = serializer.read(new ByteArrayInputStream(array), array.length,\n                InternalStructure.SINGLE_ARRAY);\n        tree2 = tree2.delete(b);\n        assertEquals(Sets.newHashSet(a, c, d, e),\n                Sets.newHashSet(tree2.entries().toList().toBlocking().single()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]canRoundTripEmptyTree()", "name": "canRoundTripEmptyTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void canRoundTripEmptyTree()", "original_string": "    @Test\n    public void canRoundTripEmptyTree() throws IOException {\n        RTree<String, Point> tree = RTree.create();\n        Serializer<String, Point> serializer = Serializers.flatBuffers().utf8();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        serializer.write(tree, bytes);\n        bytes.close();\n        byte[] array = bytes.toByteArray();\n        RTree<String, Point> tree2 = serializer.read(new ByteArrayInputStream(array), array.length,\n                InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree2.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(Serializers.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java.KryoSerializationTest.[void]testRTree()", "name": "testRTree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Ignore\n    public void testRTree()", "original_string": "    @Test\n    @Ignore\n    public void testRTree() {\n        Kryo kryo = new Kryo();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        Output output = new Output(bytes);\n        RTree<String, Point> tree = RTree.<String, Point> create()\n                .add(Entries.entry(\"thing\", Geometries.point(10, 20)))\n                .add(Entries.entry(\"monster\", Geometries.point(23, 45)));\n        kryo.writeObject(output, tree);\n        output.close();\n        Input input = new Input(new ByteArrayInputStream(bytes.toByteArray()));\n        @SuppressWarnings(\"unchecked\")\n        RTree<String, Point> tree2 = kryo.readObject(input, RTree.class);\n        assertEquals(2, (int) tree2.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java", "class_name": "KryoSerializationTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java.KryoSerializationTest", "attributes": {"modifiers": "@Test\n    @Ignore\n    public", "marker_annotations": ["@Test", "@Ignore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java.KryoSerializationTest.[void]testKryo()", "name": "testKryo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKryo()", "original_string": "    @Test\n    public void testKryo() {\n        Kryo kryo = new Kryo();\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        Output output = new Output(bytes);\n        Boo b = new Boo(\"hello\");\n        kryo.register(Boo.class);\n        kryo.writeObject(output, b);\n        output.close();\n        Input input = new Input(new ByteArrayInputStream(bytes.toByteArray()));\n        Boo b2 = kryo.readObject(input, Boo.class);\n        assertEquals(\"hello\", b2.name);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java", "class_name": "KryoSerializationTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java.KryoSerializationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextIllegalMinChildren()", "name": "testContextIllegalMinChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testContextIllegalMinChildren()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testContextIllegalMinChildren() {\n        new Context<Object, Geometry>(0, 4, new SelectorMinimalAreaIncrease(),\n                new SplitterQuadratic(), Factories.defaultFactory());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextIllegalMaxChildren()", "name": "testContextIllegalMaxChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testContextIllegalMaxChildren()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testContextIllegalMaxChildren() {\n        new Context<Object, Geometry>(1, 2, new SelectorMinimalAreaIncrease(),\n                new SplitterQuadratic(), Factories.defaultFactory());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextIllegalMinMaxChildren()", "name": "testContextIllegalMinMaxChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testContextIllegalMinMaxChildren()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testContextIllegalMinMaxChildren() {\n        new Context<Object, Geometry>(4, 3, new SelectorMinimalAreaIncrease(),\n                new SplitterQuadratic(), Factories.defaultFactory());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextLegalChildren()", "name": "testContextLegalChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContextLegalChildren()", "original_string": "    @Test\n    public void testContextLegalChildren() {\n        new Context<Object, Geometry>(2, 4, new SelectorMinimalAreaIncrease(),\n                new SplitterQuadratic(), Factories.defaultFactory());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextSelectorNullThrowsNPE()", "name": "testContextSelectorNullThrowsNPE", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = NullPointerException.class)\n    public void testContextSelectorNullThrowsNPE()", "original_string": "    @Test(expected = NullPointerException.class)\n    public void testContextSelectorNullThrowsNPE() {\n        new Context<Object, Geometry>(2, 4, null, new SplitterQuadratic(),\n                Factories.defaultFactory());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test(expected = NullPointerException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = NullPointerException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextSplitterNullThrowsNPE()", "name": "testContextSplitterNullThrowsNPE", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = NullPointerException.class)\n    public void testContextSplitterNullThrowsNPE()", "original_string": "    @Test(expected = NullPointerException.class)\n    public void testContextSplitterNullThrowsNPE() {\n        new Context<Object, Geometry>(2, 4, new SelectorMinimalAreaIncrease(), null,\n                Factories.defaultFactory());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test(expected = NullPointerException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = NullPointerException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest.[void]testContextNodeFactoryNullThrowsNPE()", "name": "testContextNodeFactoryNullThrowsNPE", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = NullPointerException.class)\n    public void testContextNodeFactoryNullThrowsNPE()", "original_string": "    @Test(expected = NullPointerException.class)\n    public void testContextNodeFactoryNullThrowsNPE() {\n        new Context<Object, Geometry>(2, 4, new SelectorMinimalAreaIncrease(),\n                new SplitterQuadratic(), null);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "class_name": "ContextTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ContextTest.java.ContextTest", "attributes": {"modifiers": "@Test(expected = NullPointerException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = NullPointerException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest.[void]testSaveImageToNonExistentDirectoryThrowsRuntimeException()", "name": "testSaveImageToNonExistentDirectoryThrowsRuntimeException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSaveImageToNonExistentDirectoryThrowsRuntimeException()", "original_string": "    @Test\n    public void testSaveImageToNonExistentDirectoryThrowsRuntimeException() {\n        Visualizer v = RTree.create().visualize(100, 100);\n        v.save(\"target/saved-image\");\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java", "class_name": "ImageSaverTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest.[void]testRunThatThrows()", "name": "testRunThatThrows", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testRunThatThrows()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testRunThatThrows() {\n        ImageSaver.run(new Callable<Void>() {\n\n            @Override\n            public Void call() throws Exception {\n                throw new IOException();\n            }\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java", "class_name": "ImageSaverTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest.[void]testRunThatDoesNotThrow()", "name": "testRunThatDoesNotThrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRunThatDoesNotThrow()", "original_string": "    @Test\n    public void testRunThatDoesNotThrow() {\n        final AtomicBoolean b = new AtomicBoolean();\n        ImageSaver.run(new Callable<Void>() {\n\n            @Override\n            public Void call() throws Exception {\n                b.set(true);\n                return null;\n            }\n        });\n        assertTrue(b.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java", "class_name": "ImageSaverTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest.[void]testIsUtilClass()", "name": "testIsUtilClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsUtilClass()", "original_string": "    @Test\n    public void testIsUtilClass() {\n        Asserts.assertIsUtilityClass(ImageSaver.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java", "class_name": "ImageSaverTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java.ImageSaverTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/FactoriesTest.java.FactoriesTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(Factories.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/FactoriesTest.java", "class_name": "FactoriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/FactoriesTest.java.FactoriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SplitterRStarTest.java.SplitterRStarTest.[void]testGetPairs()", "name": "testGetPairs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetPairs()", "original_string": "    @Test\n    public void testGetPairs() {\n\n        int minSize = 2;\n        List<HasGeometry> list = Lists.newArrayList();\n        list.add(Geometries.point(1, 1).mbr());\n        list.add(Geometries.point(2, 2).mbr());\n        list.add(Geometries.point(3, 3).mbr());\n        list.add(Geometries.point(4, 4).mbr());\n        list.add(Geometries.point(5, 5).mbr());\n        List<ListPair<HasGeometry>> pairs = SplitterRStar.getPairs(minSize, list);\n        assertEquals(2, pairs.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SplitterRStarTest.java", "class_name": "SplitterRStarTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SplitterRStarTest.java.SplitterRStarTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java.HighPrecisionTest.[void]testForIssue72()", "name": "testForIssue72", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForIssue72()", "original_string": "    @Test\n    public void testForIssue72() {\n        long x = 123456789L;\n        System.out.println(new BigDecimal(x).floatValue());\n        BigDecimal b = new BigDecimal(x);\n        System.out.println(b.round(FLOOR).floatValue());\n        System.out.println(b.round(CEILING).floatValue());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java", "class_name": "HighPrecisionTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java.HighPrecisionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java.HighPrecisionTest.[void]testHighPrecision()", "name": "testHighPrecision", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHighPrecision()", "original_string": "    @Test\n    public void testHighPrecision() {\n        RTree<Integer, Rectangle> tree = RTree.create();\n        tree = tree.add(1, Geometries.rectangle(0, 0, 1, 1));\n        double x1 = 2.0000000001;\n        System.out.println((float) x1);\n        tree = tree.add(2, Geometries.rectangle(x1, 2, 3, 3));\n        tree.search(Geometries.rectangle((float) x1, 2.0, (float) x1, 2.0)) //\n                .test() //\n                .assertNoValues() //\n                .assertCompleted();\n        tree.search(Geometries.rectangle(x1, 2.0, x1, 2.0)) //\n                .test() //\n                .assertValueCount(1) //\n                .assertCompleted();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java", "class_name": "HighPrecisionTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java.HighPrecisionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testConstructorIsPrivate()", "name": "testConstructorIsPrivate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorIsPrivate()", "original_string": "    @Test\n    public void testConstructorIsPrivate() {\n        Asserts.assertIsUtilityClass(Backpressure.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureSearch()", "name": "testBackpressureSearch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testBackpressureSearch()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testBackpressureSearch() {\n        Subscriber<Object> sub = Mockito.mock(Subscriber.class);\n        ImmutableStack<NodePosition<Object, Geometry>> stack = ImmutableStack.empty();\n        Func1<Geometry, Boolean> condition = Mockito.mock(Func1.class);\n        Backpressure.search(condition, sub, stack, 1);\n        Mockito.verify(sub, Mockito.never()).onNext(Mockito.any());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureSearchNodeWithConditionThatAlwaysReturnsFalse()", "name": "testBackpressureSearchNodeWithConditionThatAlwaysReturnsFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureSearchNodeWithConditionThatAlwaysReturnsFalse()", "original_string": "    @Test\n    public void testBackpressureSearchNodeWithConditionThatAlwaysReturnsFalse() {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(3).<Object, Rectangle> create()\n                .add(e(1)).add(e(3)).add(e(5)).add(e(7));\n\n        Set<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.search(e(1).geometry()).subscribe(backpressureSubscriber(found));\n        assertEquals(1, found.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testRequestZero()", "name": "testRequestZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRequestZero()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRequestZero() {\n        Subscriber<Object> sub = new Subscriber<Object>() {\n\n            @Override\n            public void onCompleted() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Object t) {\n\n            }\n        };\n        sub.add(new Subscription() {\n            volatile boolean subscribed = true;\n\n            @Override\n            public void unsubscribe() {\n                subscribed = false;\n            }\n\n            @Override\n            public boolean isUnsubscribed() {\n                return !subscribed;\n            }\n        });\n        Node<Object, Geometry> node = Mockito.mock(Node.class);\n        NodePosition<Object, Geometry> np = new NodePosition<Object, Geometry>(node, 1);\n        ImmutableStack<NodePosition<Object, Geometry>> stack = ImmutableStack\n                .<NodePosition<Object, Geometry>> empty().push(np);\n        Func1<Geometry, Boolean> condition = Mockito.mock(Func1.class);\n        ImmutableStack<NodePosition<Object, Geometry>> stack2 = Backpressure.search(condition, sub,\n                stack, 0);\n        assertTrue(stack2 == stack);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testRequestZeroWhenUnsubscribed()", "name": "testRequestZeroWhenUnsubscribed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRequestZeroWhenUnsubscribed()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testRequestZeroWhenUnsubscribed() {\n        Subscriber<Object> sub = new Subscriber<Object>() {\n\n            @Override\n            public void onCompleted() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Object t) {\n\n            }\n        };\n        sub.add(new Subscription() {\n\n            volatile boolean subscribed = true;\n\n            @Override\n            public void unsubscribe() {\n                subscribed = false;\n            }\n\n            @Override\n            public boolean isUnsubscribed() {\n                return !subscribed;\n            }\n        });\n        sub.unsubscribe();\n        Node<Object, Geometry> node = Mockito.mock(Node.class);\n        NodePosition<Object, Geometry> np = new NodePosition<Object, Geometry>(node, 1);\n        ImmutableStack<NodePosition<Object, Geometry>> stack = ImmutableStack\n                .<NodePosition<Object, Geometry>> empty().push(np);\n        Func1<Geometry, Boolean> condition = Mockito.mock(Func1.class);\n        ImmutableStack<NodePosition<Object, Geometry>> stack2 = Backpressure.search(condition, sub,\n                stack, 1);\n        assertTrue(stack2.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureIterateWhenNodeHasMaxChildrenAndIsRoot()", "name": "testBackpressureIterateWhenNodeHasMaxChildrenAndIsRoot", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureIterateWhenNodeHasMaxChildrenAndIsRoot()", "original_string": "    @Test\n    public void testBackpressureIterateWhenNodeHasMaxChildrenAndIsRoot() {\n        Entry<Object, Rectangle> e1 = RTreeTest.e(1);\n        List<Entry<Object, Rectangle>> list = Arrays.asList(e1, e1, e1, e1);\n        RTree<Object, Rectangle> tree = RTree.star().maxChildren(4).<Object, Rectangle> create()\n                .add(list);\n        HashSet<Entry<Object, Rectangle>> expected = new HashSet<Entry<Object, Rectangle>>(list);\n        final HashSet<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.entries().subscribe(backpressureSubscriber(found));\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureRequestZero()", "name": "testBackpressureRequestZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureRequestZero()", "original_string": "    @Test\n    public void testBackpressureRequestZero() {\n        Entry<Object, Rectangle> e1 = RTreeTest.e(1);\n        List<Entry<Object, Rectangle>> list = Arrays.asList(e1, e1, e1, e1);\n        RTree<Object, Rectangle> tree = RTree.star().maxChildren(4).<Object, Rectangle> create()\n                .add(list);\n        HashSet<Entry<Object, Rectangle>> expected = new HashSet<Entry<Object, Rectangle>>(list);\n        final HashSet<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.entries().subscribe(new Subscriber<Entry<Object, Rectangle>>() {\n\n            @Override\n            public void onStart() {\n                request(1);\n            }\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Entry<Object, Rectangle> t) {\n                found.add(t);\n                request(0);\n            }\n        });\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureIterateWhenNodeHasMaxChildrenAndIsNotRoot()", "name": "testBackpressureIterateWhenNodeHasMaxChildrenAndIsNotRoot", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureIterateWhenNodeHasMaxChildrenAndIsNotRoot()", "original_string": "    @Test\n    public void testBackpressureIterateWhenNodeHasMaxChildrenAndIsNotRoot() {\n        Entry<Object, Rectangle> e1 = RTreeTest.e(1);\n        List<Entry<Object, Rectangle>> list = new ArrayList<Entry<Object, Rectangle>>();\n        for (int i = 1; i <= 17; i++)\n            list.add(e1);\n        RTree<Object, Rectangle> tree = RTree.star().maxChildren(4).<Object, Rectangle> create()\n                .add(list);\n        HashSet<Entry<Object, Rectangle>> expected = new HashSet<Entry<Object, Rectangle>>(list);\n        final HashSet<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.entries().subscribe(backpressureSubscriber(found));\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureIterateWhenConditionFailsAgainstNonLeafNode()", "name": "testBackpressureIterateWhenConditionFailsAgainstNonLeafNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureIterateWhenConditionFailsAgainstNonLeafNode()", "original_string": "    @Test\n    public void testBackpressureIterateWhenConditionFailsAgainstNonLeafNode() {\n        Entry<Object, Rectangle> e1 = e(1);\n        List<Entry<Object, Rectangle>> list = new ArrayList<Entry<Object, Rectangle>>();\n        for (int i = 1; i <= 17; i++)\n            list.add(e1);\n        list.add(e(2));\n        RTree<Object, Rectangle> tree = RTree.star().maxChildren(4).<Object, Rectangle> create()\n                .add(list);\n        HashSet<Entry<Object, Rectangle>> expected = new HashSet<Entry<Object, Rectangle>>(list);\n        final HashSet<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.entries().subscribe(backpressureSubscriber(found));\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureIterateWhenConditionFailsAgainstLeafNode()", "name": "testBackpressureIterateWhenConditionFailsAgainstLeafNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureIterateWhenConditionFailsAgainstLeafNode()", "original_string": "    @Test\n    public void testBackpressureIterateWhenConditionFailsAgainstLeafNode() {\n        Entry<Object, Rectangle> e3 = e(3);\n        RTree<Object, Rectangle> tree = RTree.star().maxChildren(4).<Object, Rectangle> create()\n                .add(e(1)).add(e3);\n        Set<Entry<Object, Rectangle>> expected = Collections.singleton(e3);\n        final Set<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.search(e3.geometry()).subscribe(backpressureSubscriber(found));\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[void]testBackpressureFastPathNotInitiatedTwice()", "name": "testBackpressureFastPathNotInitiatedTwice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBackpressureFastPathNotInitiatedTwice()", "original_string": "    @Test\n    public void testBackpressureFastPathNotInitiatedTwice() {\n        Entry<Object, Rectangle> e3 = e(3);\n        RTree<Object, Rectangle> tree = RTree.star().maxChildren(4).<Object, Rectangle> create()\n                .add(e(1)).add(e3);\n        Set<Entry<Object, Rectangle>> expected = Collections.singleton(e3);\n        final Set<Entry<Object, Rectangle>> found = new HashSet<Entry<Object, Rectangle>>();\n        tree.search(e3.geometry()).subscribe(new Subscriber<Entry<Object, Rectangle>>() {\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Entry<Object, Rectangle> t) {\n                found.add(t);\n                request(Long.MAX_VALUE);\n            }\n        });\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java.OnSubscribeSearchTest.[void]testSearchProducerThrowsExceptionFromRequestAll()", "name": "testSearchProducerThrowsExceptionFromRequestAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchProducerThrowsExceptionFromRequestAll()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchProducerThrowsExceptionFromRequestAll() {\n        Node<Integer, Geometry> node = Mockito.mock(Node.class);\n        Func1<Geometry, Boolean> condition = Mockito.mock(Func1.class);\n        Subscriber<Entry<Integer, Geometry>> subscriber = Mockito.mock(Subscriber.class);\n        RuntimeException error = new RuntimeException();\n        Mockito.doThrow(error).when(node).searchWithoutBackpressure(condition, subscriber);\n        SearchProducer<Integer, Geometry> p = new OnSubscribeSearch.SearchProducer<Integer, Geometry>(\n                node, condition, subscriber);\n        p.request(Long.MAX_VALUE);\n        Mockito.verify(subscriber).onError(error);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java", "class_name": "OnSubscribeSearchTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java.OnSubscribeSearchTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java.OnSubscribeSearchTest.[void]testSearchProducerThrowsExceptionFromRequestSome()", "name": "testSearchProducerThrowsExceptionFromRequestSome", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchProducerThrowsExceptionFromRequestSome()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchProducerThrowsExceptionFromRequestSome() {\n        Node<Integer, Point> node = new LeafDefault<Integer, Point>(Collections.singletonList(Entries.entry(\n                1, Geometries.point(1, 1))), null);\n\n        Func1<Geometry, Boolean> condition = Mockito.mock(Func1.class);\n        Subscriber<Entry<Integer, Point>> subscriber = new Subscriber<Entry<Integer, Point>>() {\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Entry<Integer, Point> t) {\n\n            }\n        };\n        SearchProducer<Integer, Point> p = new OnSubscribeSearch.SearchProducer<Integer, Point>(\n                node, condition, subscriber);\n        p.request(1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java", "class_name": "OnSubscribeSearchTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java.OnSubscribeSearchTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/NodePositionTest.java.NodePositionTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        @SuppressWarnings(\"unchecked\")\n        Node<Object, Rectangle> node = Mockito.mock(Node.class);\n        assertTrue(new NodePosition<Object, Rectangle>(node, 1).toString()\n                .startsWith(\"NodePosition [\"));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/NodePositionTest.java", "class_name": "NodePositionTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/NodePositionTest.java.NodePositionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LeafTest.java.LeafTest.[void]testCannotHaveZeroChildren()", "name": "testCannotHaveZeroChildren", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = IllegalArgumentException.class)\n    public void testCannotHaveZeroChildren()", "original_string": "    @Test(expected = IllegalArgumentException.class)\n    public void testCannotHaveZeroChildren() {\n        new LeafDefault<Object, Rectangle>(new ArrayList<Entry<Object, Rectangle>>(), context);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LeafTest.java", "class_name": "LeafTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LeafTest.java.LeafTest", "attributes": {"modifiers": "@Test(expected = IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LeafTest.java.LeafTest.[void]testMbr()", "name": "testMbr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMbr()", "original_string": "    @Test\n    public void testMbr() {\n        Rectangle r1 = Geometries.rectangle(0d, 1, 3, 5);\n        Rectangle r2 = Geometries.rectangle(1d, 2, 4, 6);\n        Rectangle r = new LeafDefault<Object, Rectangle>(\n                Arrays.asList(Entries.entry(new Object(), r1), Entries.entry(new Object(), r2)),\n                context).geometry().mbr();\n        assertEquals(r1.add(r2), r);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LeafTest.java", "class_name": "LeafTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LeafTest.java.LeafTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/NonLeafTest.java.NonLeafTest.[void]testNonLeafPrecondition()", "name": "testNonLeafPrecondition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected=IllegalArgumentException.class)\n    public void testNonLeafPrecondition()", "original_string": "    @Test(expected=IllegalArgumentException.class)\n    public void testNonLeafPrecondition() {\n        new NonLeafDefault<Object,Geometry>(Collections.<Node<Object,Geometry>>emptyList(), null);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/NonLeafTest.java", "class_name": "NonLeafTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/NonLeafTest.java.NonLeafTest", "attributes": {"modifiers": "@Test(expected=IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected=IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest.[void]testValue()", "name": "testValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValue()", "original_string": "    @Test\n    public void testValue() {\n        assertEquals(1, (int) Entries.entry(1, Geometries.point(0, 0)).value());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "class_name": "EntriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest.[void]testEquality()", "name": "testEquality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquality()", "original_string": "    @Test\n    public void testEquality() {\n        assertEquals(Entries.entry(1, Geometries.point(0, 0)), Entries.entry(1, Geometries.point(0, 0)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "class_name": "EntriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest.[void]testEqualityWithGeometry()", "name": "testEqualityWithGeometry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualityWithGeometry()", "original_string": "    @Test\n    public void testEqualityWithGeometry() {\n        assertNotEquals(Entries.entry(1, Geometries.point(0, 0)),\n                Entries.entry(1, Geometries.point(0, 1)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "class_name": "EntriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest.[void]testInequality()", "name": "testInequality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequality()", "original_string": "    @Test\n    public void testInequality() {\n        assertNotEquals(Entries.entry(1, Geometries.point(0, 0)),\n                Entries.entry(2, Geometries.point(0, 0)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "class_name": "EntriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest.[void]testInequalityWithNull()", "name": "testInequalityWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequalityWithNull()", "original_string": "    @Test\n    public void testInequalityWithNull() {\n        assertFalse(Entries.entry(1, Geometries.point(0, 0)).equals(null));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "class_name": "EntriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest.[void]testIsUtilityClass()", "name": "testIsUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsUtilityClass()", "original_string": "    @Test\n    public void testIsUtilityClass() {\n        Asserts.assertIsUtilityClass(Entries.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "class_name": "EntriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java.EntriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/NodePosition_toStringTest.java.NodePosition_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        Node<String, Geometry> mockNode = mock(Node.class);\n        when(mockNode.toString()).thenReturn(\"MockNode\");\n\n        NodePosition<String, Geometry> nodePosition = new NodePosition<>(mockNode, 42);\n        String expected = \"NodePosition [node=MockNode, position=42]\";\n        assertEquals(expected, nodePosition.toString());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/NodePosition_toStringTest.java", "class_name": "NodePosition_toStringTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/NodePosition_toStringTest.java.NodePosition_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializerHelperTest.java.SerializerHelperTest.[void]assertIsUtilityClass()", "name": "assertIsUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void assertIsUtilityClass()", "original_string": "    @Test\n    public void assertIsUtilityClass() {\n        Asserts.assertIsUtilityClass(SerializerHelper.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializerHelperTest.java", "class_name": "SerializerHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializerHelperTest.java.SerializerHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]testSerializeRoundTripToFlatBuffersSingleArray()", "name": "testSerializeRoundTripToFlatBuffersSingleArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerializeRoundTripToFlatBuffersSingleArray()", "original_string": "    @Test\n    public void testSerializeRoundTripToFlatBuffersSingleArray() throws Exception {\n        roundTrip(InternalStructure.SINGLE_ARRAY, false);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]testSerializeRoundTripToDefaultStructure()", "name": "testSerializeRoundTripToDefaultStructure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerializeRoundTripToDefaultStructure()", "original_string": "    @Test\n    public void testSerializeRoundTripToDefaultStructure() throws Exception {\n        roundTrip(InternalStructure.DEFAULT, false);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]testSerializeRoundTripToFlatBuffersSingleArrayBackpressure()", "name": "testSerializeRoundTripToFlatBuffersSingleArrayBackpressure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerializeRoundTripToFlatBuffersSingleArrayBackpressure()", "original_string": "    @Test\n    public void testSerializeRoundTripToFlatBuffersSingleArrayBackpressure() throws Exception {\n        roundTrip(InternalStructure.SINGLE_ARRAY, true);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]testSerializeRoundTripToDefaultStructureBackpressure()", "name": "testSerializeRoundTripToDefaultStructureBackpressure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerializeRoundTripToDefaultStructureBackpressure()", "original_string": "    @Test\n    public void testSerializeRoundTripToDefaultStructureBackpressure() throws Exception {\n        roundTrip(InternalStructure.DEFAULT, true);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]testInputStreamNotAsLongAsExpected()", "name": "testInputStreamNotAsLongAsExpected", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testInputStreamNotAsLongAsExpected()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testInputStreamNotAsLongAsExpected() throws IOException {\n        SerializerFlatBuffers.readFully(new ByteArrayInputStream(new byte[10]), 12);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]testInputStreamReturnsArrayInSmallChunks()", "name": "testInputStreamReturnsArrayInSmallChunks", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInputStreamReturnsArrayInSmallChunks()", "original_string": "    @Test\n    public void testInputStreamReturnsArrayInSmallChunks() throws IOException {\n        InputStream is = new InputStream() {\n\n            int i = 0;\n\n            @Override\n            public int read() throws IOException {\n                i += 1;\n                if (i == 1) {\n                    return 1;\n                } else if (i == 2) {\n                    throw new IOException();\n                } else {\n                    return 1;\n                }\n            }\n\n        };\n        byte[] b = SerializerFlatBuffers.readFully(is, 2);\n        assertEquals(2, b.length);\n        assertEquals(1, b[0]);\n        assertEquals(1, b[0]);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelperTest.java.FlatBuffersHelperTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(FlatBuffersHelper.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelperTest.java", "class_name": "FlatBuffersHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelperTest.java.FlatBuffersHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java.IntersectsTest.[void]testConstructorIsPrivate()", "name": "testConstructorIsPrivate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorIsPrivate()", "original_string": "    @Test\n    public void testConstructorIsPrivate() {\n        Asserts.assertIsUtilityClass(Intersects.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java", "class_name": "IntersectsTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java.IntersectsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java.IntersectsTest.[void]testRectangleIntersectsCircle()", "name": "testRectangleIntersectsCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRectangleIntersectsCircle()", "original_string": "    @Test\n    public void testRectangleIntersectsCircle() {\n        assertTrue(\n                Intersects.rectangleIntersectsCircle.call(rectangle(0, 0, 0, 0), circle(0, 0, 1)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java", "class_name": "IntersectsTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java.IntersectsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java.IntersectsTest.[void]testRectangleDoesNotIntersectCircle()", "name": "testRectangleDoesNotIntersectCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRectangleDoesNotIntersectCircle()", "original_string": "    @Test\n    public void testRectangleDoesNotIntersectCircle() {\n        assertFalse(Intersects.rectangleIntersectsCircle.call(rectangle(0, 0, 0, 0),\n                circle(100, 100, 1)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java", "class_name": "IntersectsTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java.IntersectsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testPrivateConstructorForCoverageOnly()", "name": "testPrivateConstructorForCoverageOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrivateConstructorForCoverageOnly()", "original_string": "    @Test\n    public void testPrivateConstructorForCoverageOnly() {\n        Asserts.assertIsUtilityClass(Geometries.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude()", "name": "testNormalizeLongitude", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude()", "original_string": "    @Test\n    public void testNormalizeLongitude() {\n        assertEquals(0, Geometries.normalizeLongitude(0), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude2()", "name": "testNormalizeLongitude2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude2()", "original_string": "    @Test\n    public void testNormalizeLongitude2() {\n        assertEquals(89, Geometries.normalizeLongitude(89), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude3()", "name": "testNormalizeLongitude3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude3()", "original_string": "    @Test\n    public void testNormalizeLongitude3() {\n        assertEquals(179, Geometries.normalizeLongitude(179), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude3_1()", "name": "testNormalizeLongitude3_1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude3_1()", "original_string": "    @Test\n    public void testNormalizeLongitude3_1() {\n        assertEquals(-180, Geometries.normalizeLongitude(180), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude3_2()", "name": "testNormalizeLongitude3_2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude3_2()", "original_string": "    @Test\n    public void testNormalizeLongitude3_2() {\n        assertEquals(-180, Geometries.normalizeLongitude(-180), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude3_3()", "name": "testNormalizeLongitude3_3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude3_3()", "original_string": "    @Test\n    public void testNormalizeLongitude3_3() {\n        assertEquals(-179, Geometries.normalizeLongitude(-179), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude3_4()", "name": "testNormalizeLongitude3_4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude3_4()", "original_string": "    @Test\n    public void testNormalizeLongitude3_4() {\n        assertEquals(179, Geometries.normalizeLongitude(-181), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude4()", "name": "testNormalizeLongitude4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude4()", "original_string": "    @Test\n    public void testNormalizeLongitude4() {\n        assertEquals(-179, Geometries.normalizeLongitude(181), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude5()", "name": "testNormalizeLongitude5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude5()", "original_string": "    @Test\n    public void testNormalizeLongitude5() {\n        assertEquals(-179, Geometries.normalizeLongitude(541), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude2Neg()", "name": "testNormalizeLongitude2Neg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude2Neg()", "original_string": "    @Test\n    public void testNormalizeLongitude2Neg() {\n        assertEquals(-89, Geometries.normalizeLongitude(-89), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude3Neg()", "name": "testNormalizeLongitude3Neg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude3Neg()", "original_string": "    @Test\n    public void testNormalizeLongitude3Neg() {\n        assertEquals(-179, Geometries.normalizeLongitude(-179), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude4Neg()", "name": "testNormalizeLongitude4Neg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude4Neg()", "original_string": "    @Test\n    public void testNormalizeLongitude4Neg() {\n        assertEquals(179, Geometries.normalizeLongitude(-181), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testNormalizeLongitude5Neg()", "name": "testNormalizeLongitude5Neg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalizeLongitude5Neg()", "original_string": "    @Test\n    public void testNormalizeLongitude5Neg() {\n        assertEquals(179, Geometries.normalizeLongitude(-541), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testRectangleLatLong()", "name": "testRectangleLatLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRectangleLatLong()", "original_string": "    @Test\n    public void testRectangleLatLong() {\n        Rectangle r = Geometries.rectangleGeographic(10, -10, 5, 10);\n        assertEquals(10, r.x1(), PRECISION);\n        assertEquals(365, r.x2(), PRECISION);\n        assertEquals(-10, r.y1(), PRECISION);\n        assertEquals(10, r.y2(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testRectangleLatLong2()", "name": "testRectangleLatLong2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRectangleLatLong2()", "original_string": "    @Test\n    public void testRectangleLatLong2() {\n        Rectangle r = Geometries.rectangleGeographic(5, -10, 10, 10);\n        assertEquals(5, r.x1(), PRECISION);\n        assertEquals(10, r.x2(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest.[void]testPointLatLong()", "name": "testPointLatLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPointLatLong()", "original_string": "    @Test\n    public void testPointLatLong() {\n        Point point = Geometries.pointGeographic(181, 25);\n        assertEquals(-179, point.x(), PRECISION);\n        assertEquals(25, point.y(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "class_name": "GeometriesTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java.GeometriesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testDistanceToSelfIsZero()", "name": "testDistanceToSelfIsZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistanceToSelfIsZero()", "original_string": "    @Test\n    public void testDistanceToSelfIsZero() {\n        Rectangle r = rectangle(0, 0, 1, 1);\n        assertEquals(0, r.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testXParametersWrongOrderThrowsException()", "name": "testXParametersWrongOrderThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = IllegalArgumentException.class)\n    public void testXParametersWrongOrderThrowsException()", "original_string": "    @Test(expected = IllegalArgumentException.class)\n    public void testXParametersWrongOrderThrowsException() {\n        rectangle(2, 0, 1, 1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test(expected = IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testYParametersWrongOrderThrowsException()", "name": "testYParametersWrongOrderThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = IllegalArgumentException.class)\n    public void testYParametersWrongOrderThrowsException()", "original_string": "    @Test(expected = IllegalArgumentException.class)\n    public void testYParametersWrongOrderThrowsException() {\n        rectangle(0, 2, 1, 1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test(expected = IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testDistanceToOverlapIsZero()", "name": "testDistanceToOverlapIsZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistanceToOverlapIsZero()", "original_string": "    @Test\n    public void testDistanceToOverlapIsZero() {\n        Rectangle r = rectangle(0, 0, 2, 2);\n        Rectangle r2 = rectangle(1, 1, 3, 3);\n\n        assertEquals(0, r.distance(r2), PRECISION);\n        assertEquals(0, r2.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testDistanceWhenSeparatedByXOnly()", "name": "testDistanceWhenSeparatedByXOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistanceWhenSeparatedByXOnly()", "original_string": "    @Test\n    public void testDistanceWhenSeparatedByXOnly() {\n        Rectangle r = rectangle(0, 0, 2, 2);\n        Rectangle r2 = rectangle(3, 0, 4, 2);\n\n        assertEquals(1, r.distance(r2), PRECISION);\n        assertEquals(1, r2.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testDistanceWhenSeparatedByXOnlyAndOverlapOnY()", "name": "testDistanceWhenSeparatedByXOnlyAndOverlapOnY", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistanceWhenSeparatedByXOnlyAndOverlapOnY()", "original_string": "    @Test\n    public void testDistanceWhenSeparatedByXOnlyAndOverlapOnY() {\n        Rectangle r = rectangle(0, 0, 2, 2);\n        Rectangle r2 = rectangle(3, 1.5f, 4, 3.5f);\n\n        assertEquals(1, r.distance(r2), PRECISION);\n        assertEquals(1, r2.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testDistanceWhenSeparatedByDiagonally()", "name": "testDistanceWhenSeparatedByDiagonally", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistanceWhenSeparatedByDiagonally()", "original_string": "    @Test\n    public void testDistanceWhenSeparatedByDiagonally() {\n        Rectangle r = rectangle(0, 0, 2, 1);\n        Rectangle r2 = rectangle(3, 6, 10, 8);\n\n        assertEquals(Math.sqrt(26), r.distance(r2), PRECISION);\n        assertEquals(Math.sqrt(26), r2.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testInequalityWithNull()", "name": "testInequalityWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequalityWithNull()", "original_string": "    @Test\n    public void testInequalityWithNull() {\n        assertFalse(rectangle(0, 0, 1, 1).equals(null));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testSimpleEquality()", "name": "testSimpleEquality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleEquality()", "original_string": "    @Test\n    public void testSimpleEquality() {\n        Rectangle r = rectangle(0, 0, 2, 1);\n        Rectangle r2 = rectangle(0, 0, 2, 1);\n\n        assertTrue(r.equals(r2));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testSimpleInEquality1()", "name": "testSimpleInEquality1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleInEquality1()", "original_string": "    @Test\n    public void testSimpleInEquality1() {\n        Rectangle r = rectangle(0, 0, 2, 1);\n        Rectangle r2 = rectangle(0, 0, 2, 2);\n\n        assertFalse(r.equals(r2));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testSimpleInEquality2()", "name": "testSimpleInEquality2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleInEquality2()", "original_string": "    @Test\n    public void testSimpleInEquality2() {\n        Rectangle r = rectangle(0, 0, 2, 1);\n        Rectangle r2 = rectangle(1, 0, 2, 1);\n\n        assertFalse(r.equals(r2));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testSimpleInEquality3()", "name": "testSimpleInEquality3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleInEquality3()", "original_string": "    @Test\n    public void testSimpleInEquality3() {\n        Rectangle r = rectangle(0, 0, 2, 1);\n        Rectangle r2 = rectangle(0, 1, 2, 1);\n\n        assertFalse(r.equals(r2));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testSimpleInEquality4()", "name": "testSimpleInEquality4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleInEquality4()", "original_string": "    @Test\n    public void testSimpleInEquality4() {\n        Rectangle r = rectangle(0, 0, 2, 2);\n        Rectangle r2 = rectangle(0, 0, 1, 2);\n\n        assertFalse(r.equals(r2));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testGeometry()", "name": "testGeometry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGeometry()", "original_string": "    @Test\n    public void testGeometry() {\n        Rectangle r = rectangle(0, 0, 2, 1);\n        assertTrue(r.equals(r.geometry()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersects()", "name": "testIntersects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersects()", "original_string": "    @Test\n    public void testIntersects() {\n        Rectangle a = rectangle(14, 14, 86, 37);\n        Rectangle b = rectangle(13, 23, 50, 80);\n        assertTrue(a.intersects(b));\n        assertTrue(b.intersects(a));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectsNoRectangleContainsCornerOfAnother()", "name": "testIntersectsNoRectangleContainsCornerOfAnother", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsNoRectangleContainsCornerOfAnother()", "original_string": "    @Test\n    public void testIntersectsNoRectangleContainsCornerOfAnother() {\n        Rectangle a = rectangle(10, 10, 50, 50);\n        Rectangle b = rectangle(28.0, 4.0, 34.0, 85.0);\n        assertTrue(a.intersects(b));\n        assertTrue(b.intersects(a));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectsOneRectangleContainsTheOther()", "name": "testIntersectsOneRectangleContainsTheOther", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsOneRectangleContainsTheOther()", "original_string": "    @Test\n    public void testIntersectsOneRectangleContainsTheOther() {\n        Rectangle a = rectangle(10, 10, 50, 50);\n        Rectangle b = rectangle(20, 20, 40, 40);\n        assertTrue(a.intersects(b));\n        assertTrue(b.intersects(a));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectsOneRectangleReturnsTrueDespiteZeroArea()", "name": "testIntersectsOneRectangleReturnsTrueDespiteZeroArea", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsOneRectangleReturnsTrueDespiteZeroArea()", "original_string": "    @Test\n    public void testIntersectsOneRectangleReturnsTrueDespiteZeroArea() {\n        Rectangle a = rectangle(10, 50, 50, 50);\n        Rectangle b = rectangle(20, 20, 60, 60);\n        assertTrue(a.intersects(b));\n        assertTrue(b.intersects(a));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContains()", "original_string": "    @Test\n    public void testContains() {\n        Rectangle r = rectangle(10, 20, 30, 40);\n        assertTrue(r.contains(20, 30));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testContainsReturnsFalseWhenLessThanMinY()", "name": "testContainsReturnsFalseWhenLessThanMinY", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsFalseWhenLessThanMinY()", "original_string": "    @Test\n    public void testContainsReturnsFalseWhenLessThanMinY() {\n        Rectangle r = rectangle(10, 20, 30, 40);\n        assertFalse(r.contains(20, 19));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testContainsReturnsFalseWhenGreaterThanMaxY()", "name": "testContainsReturnsFalseWhenGreaterThanMaxY", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsFalseWhenGreaterThanMaxY()", "original_string": "    @Test\n    public void testContainsReturnsFalseWhenGreaterThanMaxY() {\n        Rectangle r = rectangle(10, 20, 30, 40);\n        assertFalse(r.contains(20, 41));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testContainsReturnsFalseWhenGreaterThanMaxX()", "name": "testContainsReturnsFalseWhenGreaterThanMaxX", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsFalseWhenGreaterThanMaxX()", "original_string": "    @Test\n    public void testContainsReturnsFalseWhenGreaterThanMaxX() {\n        Rectangle r = rectangle(10, 20, 30, 40);\n        assertFalse(r.contains(31, 30));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testContainsReturnsFalseWhenLessThanMinX()", "name": "testContainsReturnsFalseWhenLessThanMinX", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsFalseWhenLessThanMinX()", "original_string": "    @Test\n    public void testContainsReturnsFalseWhenLessThanMinX() {\n        Rectangle r = rectangle(10, 20, 30, 40);\n        assertFalse(r.contains(9, 30));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectionAreWhenEqual()", "name": "testIntersectionAreWhenEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionAreWhenEqual()", "original_string": "    @Test\n    public void testIntersectionAreWhenEqual() {\n        Rectangle a = rectangle(10, 10, 30, 20);\n        Rectangle b = rectangle(10, 10, 30, 20);\n        assertEquals(200f, a.intersectionArea(b), 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectionAreaWhenDontIntersect()", "name": "testIntersectionAreaWhenDontIntersect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionAreaWhenDontIntersect()", "original_string": "    @Test\n    public void testIntersectionAreaWhenDontIntersect() {\n        Rectangle a = rectangle(10, 10, 30, 20);\n        Rectangle b = rectangle(50, 50, 60, 60);\n        assertEquals(0f, a.intersectionArea(b), 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectionAreaCornerIntersect()", "name": "testIntersectionAreaCornerIntersect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionAreaCornerIntersect()", "original_string": "    @Test\n    public void testIntersectionAreaCornerIntersect() {\n        Rectangle a = rectangle(10, 10, 30, 20);\n        Rectangle b = rectangle(28, 17, 40, 40);\n        assertEquals(6f, a.intersectionArea(b), 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest.[void]testIntersectionAreaTopIntersect()", "name": "testIntersectionAreaTopIntersect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionAreaTopIntersect()", "original_string": "    @Test\n    public void testIntersectionAreaTopIntersect() {\n        Rectangle a = rectangle(10, 10, 30, 20);\n        Rectangle b = rectangle(8, 17, 40, 40);\n        assertEquals(60f, a.intersectionArea(b), 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "class_name": "RectangleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java.RectangleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testCoordinates()", "name": "testCoordinates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCoordinates()", "original_string": "    @Test\n    public void testCoordinates() {\n        Circle circle = circle(1, 2, 3);\n        assertEquals(1, circle.x(), PRECISION);\n        assertEquals(2, circle.y(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testDistance()", "name": "testDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistance()", "original_string": "    @Test\n    public void testDistance() {\n        Circle circle = circle(0, 0, 1);\n        Rectangle r = Geometries.rectangle(1, 1, 2, 2);\n        assertEquals(Math.sqrt(2) - 1, circle.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testMbr()", "name": "testMbr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMbr()", "original_string": "    @Test\n    public void testMbr() {\n        Circle circle = circle(1, 2, 3);\n        Rectangle r = Geometries.rectangle(-2, -1, 4, 5);\n        assertEquals(r, circle.mbr());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testEquality()", "name": "testEquality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquality()", "original_string": "    @Test\n    public void testEquality() {\n        Circle circle1 = circle(1, 2, 3);\n        Circle circle2 = circle(1, 2, 3);\n        assertEquals(circle1, circle2);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testInequalityRadius()", "name": "testInequalityRadius", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequalityRadius()", "original_string": "    @Test\n    public void testInequalityRadius() {\n        Circle circle1 = circle(1, 2, 3);\n        Circle circle2 = circle(1, 2, 4);\n        assertNotEquals(circle1, circle2);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testInequalityX()", "name": "testInequalityX", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequalityX()", "original_string": "    @Test\n    public void testInequalityX() {\n        Circle circle1 = circle(1, 2, 3);\n        Circle circle2 = circle(2, 2, 3);\n        assertNotEquals(circle1, circle2);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testInequalityY()", "name": "testInequalityY", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequalityY()", "original_string": "    @Test\n    public void testInequalityY() {\n        Circle circle1 = circle(1, 2, 3);\n        Circle circle2 = circle(1, 3, 3);\n        assertNotEquals(circle1, circle2);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testInequalityWithNull()", "name": "testInequalityWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInequalityWithNull()", "original_string": "    @Test\n    public void testInequalityWithNull() {\n        Circle circle = circle(1, 2, 3);\n        assertFalse(circle.equals(null));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        Circle circle = circle(1, 2, 3);\n        assertEquals(1606448223, circle.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testDistanceIsZeroWhenIntersects()", "name": "testDistanceIsZeroWhenIntersects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDistanceIsZeroWhenIntersects()", "original_string": "    @Test\n    public void testDistanceIsZeroWhenIntersects() {\n        Circle circle = circle(0, 0, 1);\n        assertTrue(circle.distance(Geometries.rectangle(0, 1, 0, 1)) == 0);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testIntersects2()", "name": "testIntersects2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersects2()", "original_string": "    @Test\n    public void testIntersects2() {\n        Circle circle = circle(0, 0, 1);\n        assertTrue(circle.distance(Geometries.rectangle(0, 1.1, 0, 1.1)) != 0);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testIntersects3()", "name": "testIntersects3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersects3()", "original_string": "    @Test\n    public void testIntersects3() {\n        Circle circle = circle(0, 0, 1);\n        assertTrue(circle.distance(Geometries.rectangle(1, 1, 1, 1)) != 0);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testIntersectsReturnsTrue()", "name": "testIntersectsReturnsTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsReturnsTrue()", "original_string": "    @Test\n    public void testIntersectsReturnsTrue() {\n        assertTrue(circle(0, 0, 1).intersects(Geometries.rectangle(0, 0, 1, 1)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testIntersectsReturnsFalse()", "name": "testIntersectsReturnsFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsReturnsFalse()", "original_string": "    @Test\n    public void testIntersectsReturnsFalse() {\n        assertFalse(circle(0, 0, 1).intersects(Geometries.rectangle(10, 10, 11, 11)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testIntersects()", "name": "testIntersects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersects()", "original_string": "    @Test\n    public void testIntersects() {\n        Circle a = circle(0, 0, 1);\n        Circle b = circle(0.1, 0.1, 1);\n        assertTrue(Intersects.circleIntersectsCircle.call(a, b));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testDoNotIntersect()", "name": "testDoNotIntersect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoNotIntersect()", "original_string": "    @Test\n    public void testDoNotIntersect() {\n        Circle a = circle(0, 0, 1);\n        Circle b = circle(100, 100, 1);\n        assertFalse(Intersects.circleIntersectsCircle.call(a, b));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testIntersectsPoint()", "name": "testIntersectsPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectsPoint()", "original_string": "    @Test\n    public void testIntersectsPoint() {\n        assertTrue(circle(0, 0, 1).intersects(Geometries.point(0, 0)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest.[void]testDoesNotIntersectPoint()", "name": "testDoesNotIntersectPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoesNotIntersectPoint()", "original_string": "    @Test\n    public void testDoesNotIntersectPoint() {\n        assertFalse(circle(0, 0, 1).intersects(Geometries.point(100, 100)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "class_name": "CircleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java.CircleTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testCoordinates()", "name": "testCoordinates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testCoordinates()", "original_string": " @Test\n\tpublic void testCoordinates() {\n\t\tPoint point = Geometries.point(1, 2);\n\t\tassertEquals(1, point.x(), PRECISION);\n\t\tassertEquals(2, point.y(), PRECISION);\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testDistanceToRectangle()", "name": "testDistanceToRectangle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testDistanceToRectangle()", "original_string": " @Test\n\tpublic void testDistanceToRectangle() {\n\t\tPoint p1 = Geometries.point(1, 2);\n\t\tRectangle r = Geometries.rectangle(4, 6, 4, 6);\n\t\tassertEquals(5, p1.distance(r), PRECISION);\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testDistanceToPoint()", "name": "testDistanceToPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testDistanceToPoint()", "original_string": " @Test\n\tpublic void testDistanceToPoint() {\n\t\tPoint p1 = Geometries.point(1, 2);\n\t\tPoint p2 = Geometries.point(4, 6);\n\t\tassertEquals(5, p1.distance(p2), PRECISION);\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testMbr()", "name": "testMbr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testMbr()", "original_string": " @Test\n\tpublic void testMbr() {\n\t\tPoint p = Geometries.point(1, 2);\n\t\tPoint p2 = Geometries.point(1, 2);\n\t\tassertEquals(p, p2);\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testPointIntersectsItself()", "name": "testPointIntersectsItself", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testPointIntersectsItself()", "original_string": " @Test\n\tpublic void testPointIntersectsItself() {\n\t\tPoint p = Geometries.point(1, 2);\n\t\tassertTrue(p.distance(p.mbr()) == 0);\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testIntersectIsFalseWhenPointsDiffer()", "name": "testIntersectIsFalseWhenPointsDiffer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testIntersectIsFalseWhenPointsDiffer()", "original_string": " @Test\n\tpublic void testIntersectIsFalseWhenPointsDiffer() {\n\t\tPoint p1 = Geometries.point(1, 2);\n\t\tPoint p2 = Geometries.point(1, 2.000001);\n\t\tassertFalse(p1.distance(p2.mbr()) == 0);\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testEquality()", "name": "testEquality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testEquality()", "original_string": " @Test\n\tpublic void testEquality() {\n\t\tPoint p1 = Geometries.point(1, 2);\n\t\tPoint p2 = Geometries.point(1, 2);\n\t\tassertTrue(p1.equals(p2));\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testInequality()", "name": "testInequality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testInequality()", "original_string": " @Test\n\tpublic void testInequality() {\n\t\tPoint p1 = Geometries.point(1, 2);\n\t\tPoint p2 = Geometries.point(1, 3);\n\t\tassertFalse(p1.equals(p2));\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testInequalityToNull()", "name": "testInequalityToNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testInequalityToNull()", "original_string": " @Test\n\tpublic void testInequalityToNull() {\n\t\tPoint p1 = Geometries.point(1, 2);\n\t\tassertFalse(p1.equals(null));\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testHashCode()", "original_string": " @Test\n\tpublic void testHashCode() {\n\t\tPoint p = Geometries.point(1, 2);\n\t\tassertEquals(-260045887, p.hashCode());\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testDoesNotContain()", "name": "testDoesNotContain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testDoesNotContain()", "original_string": " @Test\n\tpublic void testDoesNotContain() {\n\t\tPoint p = Geometries.point(1, 2);\n\t\tassertFalse(p.contains(1, 3));\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n\tpublic void testContains()", "original_string": " @Test\n\tpublic void testContains() {\n\t\tPoint p = Geometries.point(1, 2);\n\t\tassertTrue(p.contains(1, 2));\n\t}", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "class_name": "PointTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java.PointTest", "attributes": {"modifiers": "@Test\n\tpublic", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testDoesIntersectOtherLine()", "name": "testDoesIntersectOtherLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoesIntersectOtherLine()", "original_string": "    @Test\n    public void testDoesIntersectOtherLine() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Line b = Geometries.line(0, -1, 0, 1);\n        assertTrue(Intersects.lineIntersectsLine.call(a, b));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testDoesNotIntersectLine()", "name": "testDoesNotIntersectLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoesNotIntersectLine()", "original_string": "    @Test\n    public void testDoesNotIntersectLine() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Line b = Geometries.line(1.1, -1, 1.1, 1);\n        assertFalse(Intersects.lineIntersectsLine.call(a, b));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testDoesIntersectRectangle()", "name": "testDoesIntersectRectangle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoesIntersectRectangle()", "original_string": "    @Test\n    public void testDoesIntersectRectangle() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Rectangle b = Geometries.rectangle(0.2, -0.5, 0.8, 0.5);\n        assertTrue(Intersects.lineIntersectsRectangle.call(a, b));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testDoesNotIntersectRectangle()", "name": "testDoesNotIntersectRectangle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoesNotIntersectRectangle()", "original_string": "    @Test\n    public void testDoesNotIntersectRectangle() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Rectangle b = Geometries.rectangle(1.2, -0.5, 1.8, 0.5);\n        assertFalse(Intersects.lineIntersectsRectangle.call(a, b));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineIntersectsCircle()", "name": "testLineIntersectsCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineIntersectsCircle()", "original_string": "    @Test\n    public void testLineIntersectsCircle() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(0, 0.5, 1);\n        assertTrue(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesNotIntersectCircle()", "name": "testLineDoesNotIntersectCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesNotIntersectCircle()", "original_string": "    @Test\n    public void testLineDoesNotIntersectCircle() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(0, 0.5, 0.4);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesNotIntersectCircleEast()", "name": "testLineDoesNotIntersectCircleEast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesNotIntersectCircleEast()", "original_string": "    @Test\n    public void testLineDoesNotIntersectCircleEast() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(1.5, 0, 0.4);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesIntersectCircleEast()", "name": "testLineDoesIntersectCircleEast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesIntersectCircleEast()", "original_string": "    @Test\n    public void testLineDoesIntersectCircleEast() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(1.5, 0, 0.6);\n        assertTrue(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesNotIntersectCircleWest()", "name": "testLineDoesNotIntersectCircleWest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesNotIntersectCircleWest()", "original_string": "    @Test\n    public void testLineDoesNotIntersectCircleWest() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(-1.5, 0, 0.4);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesIntersectCircleWest()", "name": "testLineDoesIntersectCircleWest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesIntersectCircleWest()", "original_string": "    @Test\n    public void testLineDoesIntersectCircleWest() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(-1.5, 0, 0.6);\n        assertTrue(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesNotIntersectCircleNorth()", "name": "testLineDoesNotIntersectCircleNorth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesNotIntersectCircleNorth()", "original_string": "    @Test\n    public void testLineDoesNotIntersectCircleNorth() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(0, 1.5, 0.4);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesNotIntersectCircleSouth()", "name": "testLineDoesNotIntersectCircleSouth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesNotIntersectCircleSouth()", "original_string": "    @Test\n    public void testLineDoesNotIntersectCircleSouth() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(0, 1.5, 0.4);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesIntersectCircleSouth()", "name": "testLineDoesIntersectCircleSouth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesIntersectCircleSouth()", "original_string": "    @Test\n    public void testLineDoesIntersectCircleSouth() {\n        Line a = Geometries.line(-1, 0, 1, 0);\n        Circle c = Geometries.circle(0, 1.5, 0.6);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineMbr()", "name": "testLineMbr", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineMbr()", "original_string": "    @Test\n    public void testLineMbr() {\n        Line a = Geometries.line(-2, 3, 1, -1);\n        Rectangle mbr = a.mbr();\n        assertEquals(-2, mbr.x1(), PRECISION);\n        assertEquals(-1, mbr.y1(), PRECISION);\n        assertEquals(1, mbr.x2(), PRECISION);\n        assertEquals(3, mbr.y2(), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineSameXWithinCircle()", "name": "testLineSameXWithinCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineSameXWithinCircle()", "original_string": "    @Test\n    public void testLineSameXWithinCircle() {\n        Line a = Geometries.line(1, 2, 1, 4);\n        Circle c = Geometries.circle(1, 3, 2);\n        assertTrue(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineIsPointWithinCircle()", "name": "testLineIsPointWithinCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineIsPointWithinCircle()", "original_string": "    @Test\n    public void testLineIsPointWithinCircle() {\n        Line a = Geometries.line(1, 2, 1, 2);\n        Circle c = Geometries.circle(1, 3, 2);\n        assertTrue(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineIsPointOutsideCircle()", "name": "testLineIsPointOutsideCircle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineIsPointOutsideCircle()", "original_string": "    @Test\n    public void testLineIsPointOutsideCircle() {\n        Line a = Geometries.line(1, 10, 1, 10);\n        Circle c = Geometries.circle(1, 3, 2);\n        assertFalse(Intersects.lineIntersectsCircle.call(a, c));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangle()", "name": "testLineDistanceToRectangle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangle()", "original_string": "    @Test\n    public void testLineDistanceToRectangle() {\n        Line a = Geometries.line(1, 2, 1, 2);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(Math.sqrt(5), a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangleIsZeroWhenOneEndIsInside()", "name": "testLineDistanceToRectangleIsZeroWhenOneEndIsInside", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangleIsZeroWhenOneEndIsInside()", "original_string": "    @Test\n    public void testLineDistanceToRectangleIsZeroWhenOneEndIsInside() {\n        Line a = Geometries.line(1, 2, 4, 4);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(0, a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangleIsZeroWhenOtherEndIsInside()", "name": "testLineDistanceToRectangleIsZeroWhenOtherEndIsInside", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangleIsZeroWhenOtherEndIsInside()", "original_string": "    @Test\n    public void testLineDistanceToRectangleIsZeroWhenOtherEndIsInside() {\n        Line a = Geometries.line(4, 4, 1, 2);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(0, a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangleIsZeroWhenContainsWestEdge()", "name": "testLineDistanceToRectangleIsZeroWhenContainsWestEdge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsWestEdge()", "original_string": "    @Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsWestEdge() {\n        Line a = Geometries.line(3, 1, 3, 10);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(0, a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangleIsZeroWhenContainsNorthEdge()", "name": "testLineDistanceToRectangleIsZeroWhenContainsNorthEdge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsNorthEdge()", "original_string": "    @Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsNorthEdge() {\n        Line a = Geometries.line(2, 7, 10, 7);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(0, a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangleIsZeroWhenContainsSouthEdge()", "name": "testLineDistanceToRectangleIsZeroWhenContainsSouthEdge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsSouthEdge()", "original_string": "    @Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsSouthEdge() {\n        Line a = Geometries.line(2, 3, 10, 3);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(0, a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDistanceToRectangleIsZeroWhenContainsEastEdge()", "name": "testLineDistanceToRectangleIsZeroWhenContainsEastEdge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsEastEdge()", "original_string": "    @Test\n    public void testLineDistanceToRectangleIsZeroWhenContainsEastEdge() {\n        Line a = Geometries.line(7, 1, 7, 10);\n        Rectangle r = Geometries.rectangle(3, 3, 7, 7);\n        assertEquals(0, a.distance(r), PRECISION);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesNotIntersectsPoint()", "name": "testLineDoesNotIntersectsPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesNotIntersectsPoint()", "original_string": "    @Test\n    public void testLineDoesNotIntersectsPoint() {\n        assertFalse(Geometries.line(1.5, 1.5, 2.6, 2.5).intersects(point(2, 2)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoesIntersectPoint()", "name": "testLineDoesIntersectPoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoesIntersectPoint()", "original_string": "    @Test\n    public void testLineDoesIntersectPoint() {\n        assertTrue(Geometries.line(1.5, 1.5, 2.5, 2.5).intersects(point(2, 2)));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineDoubleIntersectsWithHorizontalLine()", "name": "testLineDoubleIntersectsWithHorizontalLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineDoubleIntersectsWithHorizontalLine()", "original_string": "    @Test\n    public void testLineDoubleIntersectsWithHorizontalLine() {\n        {  // test expectation on Line2D.Double.intersectsLine which we depend on \n            Line2D.Double line = new Line2D.Double(35.0d, -25.0d, 45.0d, -25.0d);\n            assertTrue(line.intersectsLine(40.0d, -20.0d, 45.0d, -40.0d));\n        }\n        {\n            Line line = Geometries.line(40.0d, -20.0d, 45.0d, -40.0d);\n            Line horizontalLine = Geometries.line(35.0d, -25.0d, 45.0d, -25.0d);\n            \n            assertTrue(line.intersects(horizontalLine.mbr()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest.[void]testLineFloatIntersectsWithHorizontalLine()", "name": "testLineFloatIntersectsWithHorizontalLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLineFloatIntersectsWithHorizontalLine()", "original_string": "    @Test\n    public void testLineFloatIntersectsWithHorizontalLine() {\n        {  // test expectation on Line2D.Double.intersectsLine which we depend on \n            Line2D.Float line = new Line2D.Float(35.0f, -25.0f, 45.0f, -25.0f);\n            assertTrue(line.intersectsLine(40.0f, -20.0f, 45.0f, -40.0f));\n        }\n        {\n            Line line = Geometries.line(40.0f, -20.0f, 45.0f, -40.0f);\n            Line horizontalLine = Geometries.line(35.0f, -25.0f, 45.0f, -25.0f);\n            \n            assertTrue(line.intersects(horizontalLine.mbr()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "class_name": "LineTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java.LineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtilTest.java.GeometryUtilTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(GeometryUtil.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtilTest.java", "class_name": "GeometryUtilTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtilTest.java.GeometryUtilTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest.[void]testLinesIntersect_IntersectingLines()", "name": "testLinesIntersect_IntersectingLines", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinesIntersect_IntersectingLines()", "original_string": "    @Test\n    public void testLinesIntersect_IntersectingLines() {\n        assertTrue(Line2D.linesIntersect(0, 0, 2, 2, 0, 2, 2, 0));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "class_name": "Line2D_linesIntersectTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest.[void]testLinesIntersect_NonIntersectingLines()", "name": "testLinesIntersect_NonIntersectingLines", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinesIntersect_NonIntersectingLines()", "original_string": "    @Test\n    public void testLinesIntersect_NonIntersectingLines() {\n        assertFalse(Line2D.linesIntersect(0, 0, 2, 2, 3, 3, 4, 4));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "class_name": "Line2D_linesIntersectTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest.[void]testLinesIntersect_CollinearNonIntersectingLines()", "name": "testLinesIntersect_CollinearNonIntersectingLines", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinesIntersect_CollinearNonIntersectingLines()", "original_string": "    @Test\n    public void testLinesIntersect_CollinearNonIntersectingLines() {\n        assertFalse(Line2D.linesIntersect(0, 0, 2, 2, 3, 3, 5, 5));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "class_name": "Line2D_linesIntersectTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest.[void]testLinesIntersect_TouchingAtEndpoint()", "name": "testLinesIntersect_TouchingAtEndpoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinesIntersect_TouchingAtEndpoint()", "original_string": "    @Test\n    public void testLinesIntersect_TouchingAtEndpoint() {\n        assertTrue(Line2D.linesIntersect(0, 0, 2, 2, 2, 2, 4, 4));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "class_name": "Line2D_linesIntersectTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java.Line2D_linesIntersectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java.Line2D_ptSegDistSqTest.[void]testPtSegDistSq_PointOnSideOfX1Y1()", "name": "testPtSegDistSq_PointOnSideOfX1Y1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPtSegDistSq_PointOnSideOfX1Y1()", "original_string": "    @Test\n    public void testPtSegDistSq_PointOnSideOfX1Y1() {\n        double result = Line2D.ptSegDistSq(0, 0, 2, 2, -1, -1);\n        assertEquals(2.0, result, 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java", "class_name": "Line2D_ptSegDistSqTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java.Line2D_ptSegDistSqTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java.Line2D_ptSegDistSqTest.[void]testPtSegDistSq_PointOnSideOfX2Y2()", "name": "testPtSegDistSq_PointOnSideOfX2Y2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPtSegDistSq_PointOnSideOfX2Y2()", "original_string": "    @Test\n    public void testPtSegDistSq_PointOnSideOfX2Y2() {\n        double result = Line2D.ptSegDistSq(0, 0, 2, 2, 3, 3);\n        assertEquals(2.0, result, 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java", "class_name": "Line2D_ptSegDistSqTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java.Line2D_ptSegDistSqTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java.Line2D_ptSegDistSqTest.[void]testPtSegDistSq_PointBetweenX1Y1AndX2Y2()", "name": "testPtSegDistSq_PointBetweenX1Y1AndX2Y2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPtSegDistSq_PointBetweenX1Y1AndX2Y2()", "original_string": "    @Test\n    public void testPtSegDistSq_PointBetweenX1Y1AndX2Y2() {\n        double result = Line2D.ptSegDistSq(0, 0, 2, 2, 1, 1);\n        assertEquals(0.0, result, 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java", "class_name": "Line2D_ptSegDistSqTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java.Line2D_ptSegDistSqTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/RectangleUtilTest.java.RectangleUtilTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(RectangleUtil.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/RectangleUtilTest.java", "class_name": "RectangleUtilTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/RectangleUtilTest.java.RectangleUtilTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_addTest.java.Util_addTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdd()", "original_string": "    @Test\n    public void testAdd() {\n        List<Integer> list = Arrays.asList(1, 2, 3);\n        Integer element = 4;\n        List<Integer> result = Util.add(list, element);\n        assertEquals(Arrays.asList(1, 2, 3, 4), result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_addTest.java", "class_name": "Util_addTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_addTest.java.Util_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/NonLeafHelperTest.java.NonLeafHelperTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(NonLeafHelper.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/NonLeafHelperTest.java", "class_name": "NonLeafHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/NonLeafHelperTest.java.NonLeafHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java.Util_mbrTest.[void]testMbrWithSingleItem()", "name": "testMbrWithSingleItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMbrWithSingleItem()", "original_string": "    @Test\n    public void testMbrWithSingleItem() {\n        HasGeometry item = mock(HasGeometry.class);\n        Rectangle rect = mock(Rectangle.class);\n        when(item.geometry()).thenReturn(rect);\n        when(rect.mbr()).thenReturn(rect);\n        when(rect.x1()).thenReturn(1.0);\n        when(rect.y1()).thenReturn(2.0);\n        when(rect.x2()).thenReturn(3.0);\n        when(rect.y2()).thenReturn(4.0);\n        when(rect.isDoublePrecision()).thenReturn(false);\n\n        Collection<? extends HasGeometry> items = Arrays.asList(item);\n        Rectangle result = Util.mbr(items);\n\n        assertEquals(Geometries.rectangle(1.0f, 2.0f, 3.0f, 4.0f), result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java", "class_name": "Util_mbrTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java.Util_mbrTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java.Util_mbrTest.[void]testMbrWithEmptyCollection()", "name": "testMbrWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = IllegalArgumentException.class)\n    public void testMbrWithEmptyCollection()", "original_string": "    @Test(expected = IllegalArgumentException.class)\n    public void testMbrWithEmptyCollection() {\n        Collection<? extends HasGeometry> items = Arrays.asList();\n        Util.mbr(items);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java", "class_name": "Util_mbrTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java.Util_mbrTest", "attributes": {"modifiers": "@Test(expected = IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java.Util_mbrTest.[void]testMbrWithDoublePrecision()", "name": "testMbrWithDoublePrecision", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMbrWithDoublePrecision()", "original_string": "    @Test\n    public void testMbrWithDoublePrecision() {\n        HasGeometry item1 = mock(HasGeometry.class);\n        Rectangle rect1 = mock(Rectangle.class);\n        when(item1.geometry()).thenReturn(rect1);\n        when(rect1.mbr()).thenReturn(rect1);\n        when(rect1.x1()).thenReturn(1.0);\n        when(rect1.y1()).thenReturn(2.0);\n        when(rect1.x2()).thenReturn(3.0);\n        when(rect1.y2()).thenReturn(4.0);\n        when(rect1.isDoublePrecision()).thenReturn(false);\n\n        HasGeometry item2 = mock(HasGeometry.class);\n        Rectangle rect2 = mock(Rectangle.class);\n        when(item2.geometry()).thenReturn(rect2);\n        when(rect2.mbr()).thenReturn(rect2);\n        when(rect2.x1()).thenReturn(0.0);\n        when(rect2.y1()).thenReturn(1.0);\n        when(rect2.x2()).thenReturn(2.0);\n        when(rect2.y2()).thenReturn(3.0);\n        when(rect2.isDoublePrecision()).thenReturn(true);\n\n        Collection<? extends HasGeometry> items = Arrays.asList(item1, item2);\n        Rectangle result = Util.mbr(items);\n\n        assertEquals(Geometries.rectangle(0.0, 1.0, 3.0, 4.0), result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java", "class_name": "Util_mbrTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_mbrTest.java.Util_mbrTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/LeafHelperTest.java.LeafHelperTest.[void]isUtilityClass()", "name": "isUtilityClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void isUtilityClass()", "original_string": "    @Test\n    public void isUtilityClass() {\n        Asserts.assertIsUtilityClass(LeafHelper.class);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/LeafHelperTest.java", "class_name": "LeafHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/LeafHelperTest.java.LeafHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest.[void]testRemoveElementsFromList()", "name": "testRemoveElementsFromList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveElementsFromList()", "original_string": "    @Test\n    public void testRemoveElementsFromList() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> elementsToRemove = Arrays.asList(2, 4);\n        List<Integer> expected = Arrays.asList(1, 3, 5);\n\n        List<Integer> result = Util.remove(list, elementsToRemove);\n\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "class_name": "Util_removeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest.[void]testRemoveAllElementsFromList()", "name": "testRemoveAllElementsFromList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllElementsFromList()", "original_string": "    @Test\n    public void testRemoveAllElementsFromList() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> elementsToRemove = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> expected = Collections.emptyList();\n\n        List<Integer> result = Util.remove(list, elementsToRemove);\n\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "class_name": "Util_removeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest.[void]testRemoveNoElementsFromList()", "name": "testRemoveNoElementsFromList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNoElementsFromList()", "original_string": "    @Test\n    public void testRemoveNoElementsFromList() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> elementsToRemove = Collections.emptyList();\n        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5);\n\n        List<Integer> result = Util.remove(list, elementsToRemove);\n\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "class_name": "Util_removeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest.[void]testRemoveNonExistentElementsFromList()", "name": "testRemoveNonExistentElementsFromList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNonExistentElementsFromList()", "original_string": "    @Test\n    public void testRemoveNonExistentElementsFromList() {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> elementsToRemove = Arrays.asList(6, 7);\n        List<Integer> expected = Arrays.asList(1, 2, 3, 4, 5);\n\n        List<Integer> result = Util.remove(list, elementsToRemove);\n\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "class_name": "Util_removeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java.Util_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistTest.java.Line2D_ptSegDistTest.[void]testPtSegDist()", "name": "testPtSegDist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPtSegDist()", "original_string": "    @Test\n    public void testPtSegDist() {\n        double result = Line2D.ptSegDist(0, 0, 1, 1, 0, 1);\n        assertEquals(Math.sqrt(2) / 2, result, 0.0001);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistTest.java", "class_name": "Line2D_ptSegDistTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistTest.java.Line2D_ptSegDistTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]emptyQueueAsListIsEmpty()", "name": "emptyQueueAsListIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void emptyQueueAsListIsEmpty()", "original_string": "    @Test\n    public void emptyQueueAsListIsEmpty() {\n        BoundedPriorityQueue<Integer> q = create(2, comparator);\n        assertTrue(q.asList().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]singleItemReturnsSingleItem()", "name": "singleItemReturnsSingleItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void singleItemReturnsSingleItem()", "original_string": "    @Test\n    public void singleItemReturnsSingleItem() {\n        BoundedPriorityQueue<Integer> q = create(2, comparator);\n        q.add(1);\n        assertEquals(Sets.newHashSet(1), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]twoItemsReturnsSingleItemWhenMaxIsOne()", "name": "twoItemsReturnsSingleItemWhenMaxIsOne", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void twoItemsReturnsSingleItemWhenMaxIsOne()", "original_string": "    @Test\n    public void twoItemsReturnsSingleItemWhenMaxIsOne() {\n        BoundedPriorityQueue<Integer> q = create(1, comparator);\n        q.add(1);\n        q.add(2);\n        assertEquals(Sets.newHashSet(1), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped()", "name": "twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped()", "original_string": "    @Test\n    public void twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped() {\n        BoundedPriorityQueue<Integer> q = create(1, comparator);\n        q.add(2);\n        q.add(1);\n        assertEquals(Sets.newHashSet(1), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped()", "name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped()", "original_string": "    @Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped() {\n        BoundedPriorityQueue<Integer> q = create(2, comparator);\n        q.add(3);\n        q.add(2);\n        q.add(1);\n        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing()", "name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing()", "original_string": "    @Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing() {\n        BoundedPriorityQueue<Integer> q = create(2, comparator);\n        q.add(1);\n        q.add(2);\n        q.add(3);\n        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed()", "name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed()", "original_string": "    @Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed() {\n        BoundedPriorityQueue<Integer> q = create(2, comparator);\n        q.add(3);\n        q.add(1);\n        q.add(2);\n        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2()", "name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2()", "original_string": "    @Test\n    public void threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2() {\n        BoundedPriorityQueue<Integer> q = create(2, comparator);\n        q.add(1);\n        q.add(3);\n        q.add(2);\n        assertEquals(Sets.newHashSet(1, 2), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped()", "name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped()", "original_string": "    @Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped() {\n        BoundedPriorityQueue<Integer> q = create(10, comparator);\n        q.add(3);\n        q.add(2);\n        q.add(1);\n        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing()", "name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing()", "original_string": "    @Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing() {\n        BoundedPriorityQueue<Integer> q = create(10, comparator);\n        q.add(1);\n        q.add(2);\n        q.add(3);\n        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed()", "name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed()", "original_string": "    @Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed() {\n        BoundedPriorityQueue<Integer> q = create(10, comparator);\n        q.add(3);\n        q.add(1);\n        q.add(2);\n        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2()", "name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2()", "original_string": "    @Test\n    public void threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2() {\n        BoundedPriorityQueue<Integer> q = create(10, comparator);\n        q.add(1);\n        q.add(3);\n        q.add(2);\n        assertEquals(Sets.newHashSet(1, 2, 3), Sets.newHashSet(q.asList()));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]testInstantiateWithNegativeSizeThrowsIAE()", "name": "testInstantiateWithNegativeSizeThrowsIAE", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected=IllegalArgumentException.class)\n    public void testInstantiateWithNegativeSizeThrowsIAE()", "original_string": "    @Test(expected=IllegalArgumentException.class)\n    public void testInstantiateWithNegativeSizeThrowsIAE() {\n        create(-1, comparator);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test(expected=IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected=IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]testInstantiateWithZeroSizeThrowsIAE()", "name": "testInstantiateWithZeroSizeThrowsIAE", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected=IllegalArgumentException.class)\n    public void testInstantiateWithZeroSizeThrowsIAE()", "original_string": "    @Test(expected=IllegalArgumentException.class)\n    public void testInstantiateWithZeroSizeThrowsIAE() {\n        create(0, comparator);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test(expected=IllegalArgumentException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected=IllegalArgumentException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest.[void]testAddNullThrowsNPE()", "name": "testAddNullThrowsNPE", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected=NullPointerException.class)\n    public void testAddNullThrowsNPE()", "original_string": "    @Test(expected=NullPointerException.class)\n    public void testAddNullThrowsNPE() {\n        BoundedPriorityQueue<Integer> q = create(10, comparator);\n        q.add(null);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "class_name": "BoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java.BoundedPriorityQueueTest", "attributes": {"modifiers": "@Test(expected=NullPointerException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected=NullPointerException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java.ImmutableStack_popTest.[void]testPopOnNonEmptyStack()", "name": "testPopOnNonEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopOnNonEmptyStack()", "original_string": "    @Test\n    public void testPopOnNonEmptyStack() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1).push(2);\n        ImmutableStack<Integer> poppedStack = stack.pop();\n        assertEquals(Integer.valueOf(1), poppedStack.peek());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java", "class_name": "ImmutableStack_popTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java.ImmutableStack_popTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java.ImmutableStack_popTest.[void]testPopOnEmptyStack()", "name": "testPopOnEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testPopOnEmptyStack()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testPopOnEmptyStack() {\n        ImmutableStack<Integer> emptyStack = ImmutableStack.empty();\n        emptyStack.pop();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java", "class_name": "ImmutableStack_popTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java.ImmutableStack_popTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest.[void]testAsClassIsAbsentIfNull()", "name": "testAsClassIsAbsentIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsClassIsAbsentIfNull()", "original_string": "    @Test\n    public void testAsClassIsAbsentIfNull() {\n        assertFalse(ObjectsHelper.asClass(null, Integer.class).isPresent());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java", "class_name": "ObjectsHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest.[void]testAsClassIsAbsentIfDifferentClass()", "name": "testAsClassIsAbsentIfDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsClassIsAbsentIfDifferentClass()", "original_string": "    @Test\n    public void testAsClassIsAbsentIfDifferentClass() {\n        assertFalse(ObjectsHelper.asClass(1, String.class).isPresent());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java", "class_name": "ObjectsHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest.[void]testAsClassIsPresentIfSameTypeAndNotNull()", "name": "testAsClassIsPresentIfSameTypeAndNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsClassIsPresentIfSameTypeAndNotNull()", "original_string": "    @Test\n    public void testAsClassIsPresentIfSameTypeAndNotNull() {\n        assertTrue(ObjectsHelper.asClass(1, Integer.class).isPresent());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java", "class_name": "ObjectsHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest.[void]coverPrivateConstructor()", "name": "coverPrivateConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void coverPrivateConstructor()", "original_string": "    @Test\n    public void coverPrivateConstructor() {\n        ObjectsHelper.instantiateForTestCoveragePurposesOnly();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java", "class_name": "ObjectsHelperTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java.ObjectsHelperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest.[void]testAsClassWithNullObject()", "name": "testAsClassWithNullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsClassWithNullObject()", "original_string": "    @Test\n    public void testAsClassWithNullObject() {\n        Optional<String> result = ObjectsHelper.asClass(null, String.class);\n        assertFalse(result.isPresent());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "class_name": "ObjectsHelper_asClassTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest.[void]testAsClassWithIncorrectClass()", "name": "testAsClassWithIncorrectClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsClassWithIncorrectClass()", "original_string": "    @Test\n    public void testAsClassWithIncorrectClass() {\n        Optional<String> result = ObjectsHelper.asClass(123, String.class);\n        assertFalse(result.isPresent());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "class_name": "ObjectsHelper_asClassTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest.[void]testAsClassWithCorrectClass()", "name": "testAsClassWithCorrectClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsClassWithCorrectClass()", "original_string": "    @Test\n    public void testAsClassWithCorrectClass() {\n        Optional<String> result = ObjectsHelper.asClass(\"test\", String.class);\n        assertTrue(result.isPresent());\n        assertEquals(\"test\", result.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "class_name": "ObjectsHelper_asClassTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest.[void]coverPrivateConstructor()", "name": "coverPrivateConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void coverPrivateConstructor()", "original_string": "    @Test\n    public void coverPrivateConstructor() {\n        ObjectsHelper.instantiateForTestCoveragePurposesOnly();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "class_name": "ObjectsHelper_asClassTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java.ObjectsHelper_asClassTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testNewStackIsEmpty()", "name": "testNewStackIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewStackIsEmpty()", "original_string": "    @Test\n    public void testNewStackIsEmpty() {\n        ImmutableStack<Object> s = ImmutableStack.empty();\n        assertTrue(s.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testPopOnEmptyStackThrowsException()", "name": "testPopOnEmptyStackThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testPopOnEmptyStackThrowsException()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testPopOnEmptyStackThrowsException() {\n        ImmutableStack.empty().pop();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testPeekOnEmptyStackThrowsException()", "name": "testPeekOnEmptyStackThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testPeekOnEmptyStackThrowsException()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testPeekOnEmptyStackThrowsException() {\n        ImmutableStack.empty().peek();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testRemoveThrowsException()", "name": "testRemoveThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testRemoveThrowsException()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testRemoveThrowsException() {\n        ImmutableStack.empty().push(a).iterator().remove();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testStackIsEmptyAfterPushThenPop()", "name": "testStackIsEmptyAfterPushThenPop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStackIsEmptyAfterPushThenPop()", "original_string": "    @Test\n    public void testStackIsEmptyAfterPushThenPop() {\n        assertTrue(ImmutableStack.empty().push(new Object()).pop().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testPeekGivesLastPushed()", "name": "testPeekGivesLastPushed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekGivesLastPushed()", "original_string": "    @Test\n    public void testPeekGivesLastPushed() {\n        assertEquals(b, ImmutableStack.empty().push(a).push(b).peek());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testPopPeekGivesSecondLastPushed()", "name": "testPopPeekGivesSecondLastPushed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopPeekGivesSecondLastPushed()", "original_string": "    @Test\n    public void testPopPeekGivesSecondLastPushed() {\n        assertEquals(a, ImmutableStack.empty().push(a).push(b).pop().peek());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testIteratorWhenEmpty()", "name": "testIteratorWhenEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWhenEmpty()", "original_string": "    @Test\n    public void testIteratorWhenEmpty() {\n        assertFalse(ImmutableStack.empty().iterator().hasNext());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testIteratorWhenHasOneItem()", "name": "testIteratorWhenHasOneItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWhenHasOneItem()", "original_string": "    @Test\n    public void testIteratorWhenHasOneItem() {\n        assertTrue(ImmutableStack.empty().push(a).iterator().hasNext());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testIteratorReturnsOneItem()", "name": "testIteratorReturnsOneItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorReturnsOneItem()", "original_string": "    @Test\n    public void testIteratorReturnsOneItem() {\n        assertEquals(a, ImmutableStack.empty().push(a).iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testIteratorReturnsLastPushedFirst()", "name": "testIteratorReturnsLastPushedFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorReturnsLastPushedFirst()", "original_string": "    @Test\n    public void testIteratorReturnsLastPushedFirst() {\n        assertEquals(b, ImmutableStack.empty().push(a).push(b).iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest.[void]testIteratorReturnsTwoItemsInOrderOfPop()", "name": "testIteratorReturnsTwoItemsInOrderOfPop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorReturnsTwoItemsInOrderOfPop()", "original_string": "    @Test\n    public void testIteratorReturnsTwoItemsInOrderOfPop() {\n        Iterator<Object> it = ImmutableStack.empty().push(a).push(b).iterator();\n        assertEquals(b, it.next());\n        assertEquals(a, it.next());\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "class_name": "ImmutableStackTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java.ImmutableStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java.ImmutableStack_iteratorTest.[void]testIteratorWithNonEmptyStack()", "name": "testIteratorWithNonEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithNonEmptyStack()", "original_string": "    @Test\n    public void testIteratorWithNonEmptyStack() {\n        stack = stack.push(\"a\").push(\"b\").push(\"c\");\n        Iterator<String> iterator = stack.iterator();\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java", "class_name": "ImmutableStack_iteratorTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java.ImmutableStack_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java.ImmutableStack_iteratorTest.[void]testIteratorWithEmptyStack()", "name": "testIteratorWithEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithEmptyStack()", "original_string": "    @Test\n    public void testIteratorWithEmptyStack() {\n        Iterator<String> iterator = stack.iterator();\n\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java", "class_name": "ImmutableStack_iteratorTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_iteratorTest.java.ImmutableStack_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java.BoundedPriorityQueue_asOrderedListTest.[void]testAsOrderedListWithEmptyQueue()", "name": "testAsOrderedListWithEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsOrderedListWithEmptyQueue()", "original_string": "    @Test\n    public void testAsOrderedListWithEmptyQueue() {\n        List<Integer> result = queue.asOrderedList();\n        assertTrue(result.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java", "class_name": "BoundedPriorityQueue_asOrderedListTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java.BoundedPriorityQueue_asOrderedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java.BoundedPriorityQueue_asOrderedListTest.[void]testAsOrderedListWithSingleElement()", "name": "testAsOrderedListWithSingleElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsOrderedListWithSingleElement()", "original_string": "    @Test\n    public void testAsOrderedListWithSingleElement() {\n        queue.add(5);\n        List<Integer> result = queue.asOrderedList();\n        assertEquals(Arrays.asList(5), result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java", "class_name": "BoundedPriorityQueue_asOrderedListTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java.BoundedPriorityQueue_asOrderedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java.BoundedPriorityQueue_asOrderedListTest.[void]testAsOrderedListWithMultipleElements()", "name": "testAsOrderedListWithMultipleElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsOrderedListWithMultipleElements()", "original_string": "    @Test\n    public void testAsOrderedListWithMultipleElements() {\n        queue.add(5);\n        queue.add(3);\n        queue.add(7);\n        List<Integer> result = queue.asOrderedList();\n        assertEquals(Arrays.asList(3, 5, 7), result);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java", "class_name": "BoundedPriorityQueue_asOrderedListTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java.BoundedPriorityQueue_asOrderedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_emptyTest.java.ImmutableStack_emptyTest.[void]testEmptyStackIsEmpty()", "name": "testEmptyStackIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyStackIsEmpty()", "original_string": "    @Test\n    public void testEmptyStackIsEmpty() {\n        ImmutableStack<Object> emptyStack = ImmutableStack.empty();\n        assertTrue(emptyStack.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_emptyTest.java", "class_name": "ImmutableStack_emptyTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_emptyTest.java.ImmutableStack_emptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java.ImmutableStack_peekTest.[void]testPeekOnNonEmptyStack()", "name": "testPeekOnNonEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekOnNonEmptyStack()", "original_string": "    @Test\n    public void testPeekOnNonEmptyStack() {\n        ImmutableStack<String> stack = ImmutableStack.<String>empty().push(\"element\");\n        assertEquals(\"element\", stack.peek());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java", "class_name": "ImmutableStack_peekTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java.ImmutableStack_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java.ImmutableStack_peekTest.[void]testPeekOnEmptyStack()", "name": "testPeekOnEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testPeekOnEmptyStack()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testPeekOnEmptyStack() {\n        ImmutableStack<String> stack = ImmutableStack.<String>empty();\n        stack.peek(); // This should throw a RuntimeException\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java", "class_name": "ImmutableStack_peekTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java.ImmutableStack_peekTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testPriority()", "name": "testPriority", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPriority()", "original_string": "    @Test\n    public void testPriority() {\n        List<Integer> list = Observable.range(1, 5)\n                .lift(new OperatorBoundedPriorityQueue<Integer>(2, integerComparator)).toSortedList()\n                .toBlocking().single();\n        assertEquals(Arrays.asList(1, 2), list);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testUnsubscribeAfterFirst()", "name": "testUnsubscribeAfterFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsubscribeAfterFirst()", "original_string": "    @Test\n    public void testUnsubscribeAfterFirst() {\n        final AtomicBoolean completed = new AtomicBoolean(false);\n        Observable.range(1, 5)\n                // go through priority queue\n                .lift(new OperatorBoundedPriorityQueue<Integer>(2, integerComparator))\n                // subscribe\n                .subscribe(new Subscriber<Integer>() {\n\n                    @Override\n                    public void onCompleted() {\n                        completed.set(true);\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Integer t) {\n                        unsubscribe();\n                    }\n                });\n        assertFalse(completed.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testUnsubscribeAfterLastButBeforeCompletedCalled()", "name": "testUnsubscribeAfterLastButBeforeCompletedCalled", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsubscribeAfterLastButBeforeCompletedCalled()", "original_string": "    @Test\n    public void testUnsubscribeAfterLastButBeforeCompletedCalled() {\n        final AtomicBoolean completed = new AtomicBoolean(false);\n        Observable.range(1, 5)\n                // go through priority queue\n                .lift(new OperatorBoundedPriorityQueue<Integer>(2, integerComparator))\n                // subscribe\n                .subscribe(new Subscriber<Integer>() {\n\n                    int i = 0;\n\n                    @Override\n                    public void onCompleted() {\n                        completed.set(true);\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Integer t) {\n                        i++;\n                        if (i == 2)\n                            unsubscribe();\n                    }\n                });\n        assertFalse(completed.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testError()", "name": "testError", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testError()", "original_string": "    @Test\n    public void testError() {\n        final AtomicBoolean completed = new AtomicBoolean(false);\n        final AtomicBoolean error = new AtomicBoolean(false);\n        Observable.<Integer> error(new RuntimeException())\n                // go through priority queue\n                .lift(new OperatorBoundedPriorityQueue<Integer>(2, integerComparator))\n                // subscribe\n                .subscribe(new Subscriber<Integer>() {\n\n                    @Override\n                    public void onCompleted() {\n                        completed.set(true);\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        error.set(true);\n                    }\n\n                    @Override\n                    public void onNext(Integer t) {\n\n                    }\n                });\n        assertFalse(completed.get());\n        assertTrue(error.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testErrorCalledJustAfterUnsubscribe()", "name": "testErrorCalledJustAfterUnsubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testErrorCalledJustAfterUnsubscribe()", "original_string": "    @Test\n    public void testErrorCalledJustAfterUnsubscribe() {\n        final AtomicBoolean error = new AtomicBoolean(false);\n        final Subscriber<Integer> subscriber = new Subscriber<Integer>() {\n\n            @Override\n            public void onCompleted() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                error.set(true);\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n        };\n        Observable.create(new OnSubscribe<Integer>() {\n\n            @Override\n            public void call(Subscriber<? super Integer> sub) {\n                sub.onNext(1);\n                subscriber.unsubscribe();\n                sub.onError(new RuntimeException());\n            }\n        })\n                // go through priority queue\n                .lift(new OperatorBoundedPriorityQueue<Integer>(1, integerComparator))\n                // subscribe\n                .subscribe(subscriber);\n        assertFalse(error.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testUnsubscribeCalledAfterFirst()", "name": "testUnsubscribeCalledAfterFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsubscribeCalledAfterFirst()", "original_string": "    @Test\n    public void testUnsubscribeCalledAfterFirst() {\n        final AtomicBoolean completed = new AtomicBoolean(false);\n        final AtomicBoolean next = new AtomicBoolean(false);\n        final Subscriber<Integer> subscriber = new Subscriber<Integer>() {\n\n            @Override\n            public void onCompleted() {\n                completed.set(true);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Integer t) {\n                next.set(true);\n            }\n        };\n        Observable.create(new OnSubscribe<Integer>() {\n\n            @Override\n            public void call(Subscriber<? super Integer> sub) {\n                sub.onNext(1);\n                subscriber.unsubscribe();\n                sub.onNext(2);\n                sub.onCompleted();\n            }\n        })\n                // go through priority queue\n                .lift(new OperatorBoundedPriorityQueue<Integer>(1, integerComparator))\n                // subscribe\n                .subscribe(subscriber);\n        assertFalse(completed.get());\n        assertFalse(next.get());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest.[void]testOperatorShouldRequestMaxFromUpstream()", "name": "testOperatorShouldRequestMaxFromUpstream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(timeout = 3000)\n    public void testOperatorShouldRequestMaxFromUpstream()", "original_string": "    @Test(timeout = 3000)\n    public void testOperatorShouldRequestMaxFromUpstream() {\n        RTree<String, Line> tree = RTree.star().create();\n        for (int i = 0; i < 5; ++i) {\n            tree = tree.add(String.format(\"Hello %d\", i), Geometries.line(-i, -i, 5 + i, i));\n        }\n        tree.nearest(Geometries.point(2, 0.4), Double.MAX_VALUE, 1).toBlocking().single();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "class_name": "OperatorBoundedPriorityQueueTest", "class_uri": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java.OperatorBoundedPriorityQueueTest", "attributes": {"modifiers": "@Test(timeout = 3000)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(timeout = 3000)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]