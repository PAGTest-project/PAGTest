[{"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest", "name": "ParameterChecker_checkOnlyOneOfParametersTest", "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "superclasses": "", "methods": ["[void]testCheckOnlyOneOfParameters_SingleParameterPresent()", "[void]testCheckOnlyOneOfParameters_MultipleParametersPresent()", "[void]testCheckOnlyOneOfParameters_NoParametersPresent()", "[void]testCheckOnlyOneOfParameters_NullParams()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterChecker_checkOnlyOneOfParametersTest {\n\n    @Test\n    public void testCheckOnlyOneOfParameters_SingleParameterPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param1\", \"value1\");\n        ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\");\n        // No exception should be thrown\n    }\n\n    @Test\n    public void testCheckOnlyOneOfParameters_MultipleParametersPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param1\", \"value1\");\n        params.put(\"param2\", \"value2\");\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\"));\n    }\n\n    @Test\n    public void testCheckOnlyOneOfParameters_NoParametersPresent() {\n        JSONObject params = new JSONObject();\n        ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\");\n        // No exception should be thrown\n    }\n\n    @Test\n    public void testCheckOnlyOneOfParameters_NullParams() {\n        JSONObject params = null;\n        ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\");\n        // No exception should be thrown\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildTimestampTest.java.UrlBuilder_buildTimestampTest", "name": "UrlBuilder_buildTimestampTest", "file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildTimestampTest.java", "superclasses": "", "methods": ["[void]testBuildTimestamp()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UrlBuilder_buildTimestampTest {\n\n    @Test\n    public void testBuildTimestamp() {\n        String timestamp = UrlBuilder.buildTimestamp();\n        assertTrue(timestamp.matches(\"\\\\d+\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest", "name": "JSONParser_addKeyValueTest", "file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "superclasses": "", "methods": ["[void]testAddKeyValue_NullParameters()", "[void]testAddKeyValue_NonNullParameters()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JSONParser_addKeyValueTest {\n\n    @Test\n    public void testAddKeyValue_NullParameters() {\n        JSONObject result = JSONParser.addKeyValue(null, \"key\", \"value\");\n        assertEquals(\"value\", result.get(\"key\"));\n    }\n\n    @Test\n    public void testAddKeyValue_NonNullParameters() {\n        JSONObject parameters = new JSONObject();\n        JSONObject result = JSONParser.addKeyValue(parameters, \"key\", \"value\");\n        assertEquals(\"value\", result.get(\"key\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest", "name": "ParameterChecker_checkParameterTypeTest", "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "superclasses": "", "methods": ["[void]testCheckParameterTypeValid()", "[void]testCheckParameterTypeInvalidType()", "[void]testCheckParameterTypeEmptyString()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterChecker_checkParameterTypeTest {\n\n    @Test\n    public void testCheckParameterTypeValid() {\n        ParameterChecker.checkParameterType(\"validString\", String.class, \"testParameter\");\n    }\n\n    @Test\n    public void testCheckParameterTypeInvalidType() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(123, String.class, \"testParameter\"));\n    }\n\n    @Test\n    public void testCheckParameterTypeEmptyString() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(\"\", String.class, \"testParameter\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest", "name": "UrlBuilder_joinQueryParametersTest", "file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "superclasses": "", "methods": ["[void]testJoinQueryParametersWithEmptyMap()", "[void]testJoinQueryParametersWithNonEmptyMap()", "[void]testJoinQueryParametersWithNullMap()"], "method_uris": ["src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UrlBuilder_joinQueryParametersTest {\n    private StringBuilder sb;\n\n    @Before\n    public void setUp() {\n        sb = new StringBuilder();\n    }\n\n    @Test\n    public void testJoinQueryParametersWithEmptyMap() {\n        Map<String, Object> params = new HashMap<>();\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(sb.toString(), result.toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithNonEmptyMap() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"key1\", \"value1\");\n        params.put(\"key2\", 123.45);\n\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        String expected = \"key1=value1&key2=123.45\";\n        assertEquals(expected, result.toString());\n    }\n\n    @Test\n    public void testJoinQueryParametersWithNullMap() {\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, null);\n        assertEquals(sb.toString(), result.toString());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private StringBuilder sb;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "StringBuilder", "name": "sb", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONStringValueTest.java.JSONParser_getJSONStringValueTest", "name": "JSONParser_getJSONStringValueTest", "file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONStringValueTest.java", "superclasses": "", "methods": ["[void]testGetJSONStringValue_Success()", "[void]testGetJSONStringValue_Failure()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JSONParser_getJSONStringValueTest {\n\n    @Test\n    public void testGetJSONStringValue_Success() {\n        String json = \"{\\\"key\\\":\\\"value\\\"}\";\n        String key = \"key\";\n        String expected = \"value\";\n        String actual = JSONParser.getJSONStringValue(json, key);\n        assertEquals(expected, actual);\n    }\n\n    @Test(expected = JSONException.class)\n    public void testGetJSONStringValue_Failure() {\n        String json = \"{\\\"key\\\":\\\"value\\\"}\";\n        String key = \"invalidKey\";\n        JSONParser.getJSONStringValue(json, key);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTest.java.ParameterChecker_checkParameterTest", "name": "ParameterChecker_checkParameterTest", "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTest.java", "superclasses": "", "methods": ["[void]testCheckParameter_ValidParameter()", "[void]testCheckParameter_MissingParameter()", "[void]testCheckParameter_WrongType()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterChecker_checkParameterTest {\n\n    @Test\n    public void testCheckParameter_ValidParameter() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"param1\", \"value1\");\n        ParameterChecker.checkParameter(parameters, \"param1\", String.class);\n    }\n\n    @Test\n    public void testCheckParameter_MissingParameter() {\n        Map<String, Object> parameters = new HashMap<>();\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameter(parameters, \"missingParam\", String.class));\n    }\n\n    @Test\n    public void testCheckParameter_WrongType() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"param1\", 123);\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameter(parameters, \"param1\", String.class));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest", "name": "JSONParser_getJSONIntValueTest", "file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "superclasses": "", "methods": ["[void]testGetJSONIntValue_Success()", "[void]testGetJSONIntValue_Failure()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JSONParser_getJSONIntValueTest {\n\n    @Test\n    public void testGetJSONIntValue_Success() {\n        String json = \"{\\\"key\\\": 42}\";\n        int result = JSONParser.getJSONIntValue(json, \"key\");\n        assertEquals(42, result);\n    }\n\n    @Test(expected = JSONException.class)\n    public void testGetJSONIntValue_Failure() {\n        String json = \"{\\\"key\\\": \\\"notAnInt\\\"}\";\n        JSONParser.getJSONIntValue(json, \"key\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest", "name": "UrlBuilder_buildStreamUrlTest", "file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "superclasses": "", "methods": ["[void]testBuildStreamUrlWithStreams()", "[void]testBuildStreamUrlWithoutStreams()", "[void]testBuildStreamUrlWithNullStreams()"], "method_uris": ["src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UrlBuilder_buildStreamUrlTest {\n    private String baseUrl;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n    }\n\n    @Test\n    public void testBuildStreamUrlWithStreams() {\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"stream1\");\n        streams.add(\"stream2\");\n\n        String expectedUrl = \"https://api.binance.com/stream?streams=stream1/stream2\";\n        assertEquals(expectedUrl, UrlBuilder.buildStreamUrl(baseUrl, streams));\n    }\n\n    @Test\n    public void testBuildStreamUrlWithoutStreams() {\n        ArrayList<String> streams = new ArrayList<>();\n\n        String expectedUrl = \"https://api.binance.com/stream\";\n        assertEquals(expectedUrl, UrlBuilder.buildStreamUrl(baseUrl, streams));\n    }\n\n    @Test\n    public void testBuildStreamUrlWithNullStreams() {\n        ArrayList<String> streams = null;\n\n        String expectedUrl = \"https://api.binance.com/stream\";\n        assertEquals(expectedUrl, UrlBuilder.buildStreamUrl(baseUrl, streams));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest", "name": "ParameterChecker_checkOneOfParametersRequiredTest", "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "superclasses": "", "methods": ["[void]testCheckOneOfParametersRequired_AllParametersMissing()", "[void]testCheckOneOfParametersRequired_OneParameterPresent()", "[void]testCheckOneOfParametersRequired_NullParams()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterChecker_checkOneOfParametersRequiredTest {\n\n    @Test\n    public void testCheckOneOfParametersRequired_AllParametersMissing() {\n        JSONObject params = new JSONObject();\n        String[] parameters = {\"param1\", \"param2\"};\n        String expectedMessage = \"One of the following parameters is required: \" + Arrays.toString(parameters);\n\n        BinanceConnectorException exception = assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkOneOfParametersRequired(params, parameters);\n        });\n\n        assertEquals(expectedMessage, exception.getMessage());\n    }\n\n    @Test\n    public void testCheckOneOfParametersRequired_OneParameterPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param1\", \"value1\");\n        String[] parameters = {\"param1\", \"param2\"};\n\n        // No exception should be thrown\n        ParameterChecker.checkOneOfParametersRequired(params, parameters);\n    }\n\n    @Test\n    public void testCheckOneOfParametersRequired_NullParams() {\n        String[] parameters = {\"param1\", \"param2\"};\n        String expectedMessage = \"One of the following parameters is required: \" + Arrays.toString(parameters);\n\n        BinanceConnectorException exception = assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkOneOfParametersRequired(null, parameters);\n        });\n\n        assertEquals(expectedMessage, exception.getMessage());\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest", "name": "ParameterChecker_processIdTest", "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "superclasses": "", "methods": ["[void]testProcessId_ValidInteger()", "[void]testProcessId_ValidString()", "[void]testProcessId_NullId()", "[void]testProcessId_EmptyString()", "[void]testProcessId_InvalidType()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterChecker_processIdTest {\n\n    @Test\n    public void testProcessId_ValidInteger() {\n        Object result = ParameterChecker.processId(123, \"testId\");\n        assertEquals(123, result);\n    }\n\n    @Test\n    public void testProcessId_ValidString() {\n        Object result = ParameterChecker.processId(\"abc\", \"testId\");\n        assertEquals(\"abc\", result);\n    }\n\n    @Test\n    public void testProcessId_NullId() {\n        Object result = ParameterChecker.processId(null, \"testId\");\n        assertNotNull(result);\n        assertTrue(result instanceof String);\n    }\n\n    @Test\n    public void testProcessId_EmptyString() {\n        Object result = ParameterChecker.processId(\"\", \"testId\");\n        assertNotNull(result);\n        assertTrue(result instanceof String);\n    }\n\n    @Test(expected = BinanceConnectorException.class)\n    public void testProcessId_InvalidType() {\n        ParameterChecker.processId(new Object(), \"testId\");\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest", "name": "UrlBuilder_joinStreamUrlsTest", "file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "superclasses": "", "methods": ["[void]testJoinStreamUrlsWithValidStreams()", "[void]testJoinStreamUrlsWithEmptyStreams()", "[void]testJoinStreamUrlsWithNullStreams()"], "method_uris": ["src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UrlBuilder_joinStreamUrlsTest {\n    private StringBuilder sb;\n\n    @Before\n    public void setUp() {\n        sb = new StringBuilder();\n    }\n\n    @Test\n    public void testJoinStreamUrlsWithValidStreams() {\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"stream1\");\n        streams.add(\"stream2\");\n        streams.add(\"stream3\");\n\n        StringBuilder result = UrlBuilder.joinStreamUrls(sb, streams);\n        assertEquals(\"stream1/stream2/stream3\", result.toString());\n    }\n\n    @Test\n    public void testJoinStreamUrlsWithEmptyStreams() {\n        ArrayList<String> streams = new ArrayList<>();\n\n        StringBuilder result = UrlBuilder.joinStreamUrls(sb, streams);\n        assertEquals(\"\", result.toString());\n    }\n\n    @Test\n    public void testJoinStreamUrlsWithNullStreams() {\n        StringBuilder result = UrlBuilder.joinStreamUrls(sb, null);\n        assertEquals(\"\", result.toString());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private StringBuilder sb;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "StringBuilder", "name": "sb", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest", "name": "JSONParser_pullValueTest", "file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "superclasses": "", "methods": ["[void]testPullValue_WithExistingKey()", "[void]testPullValue_WithNonExistingKey()", "[void]testPullValue_WithNullParameters()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JSONParser_pullValueTest {\n\n    @Test\n    public void testPullValue_WithExistingKey() {\n        JSONObject parameters = new JSONObject();\n        parameters.put(\"key1\", \"value1\");\n\n        Object result = JSONParser.pullValue(parameters, \"key1\");\n\n        assertEquals(\"value1\", result);\n        assertFalse(parameters.has(\"key1\"));\n    }\n\n    @Test\n    public void testPullValue_WithNonExistingKey() {\n        JSONObject parameters = new JSONObject();\n\n        Object result = JSONParser.pullValue(parameters, \"key1\");\n\n        assertNull(result);\n        assertFalse(parameters.has(\"key1\"));\n    }\n\n    @Test\n    public void testPullValue_WithNullParameters() {\n        Object result = JSONParser.pullValue(null, \"key1\");\n\n        assertNull(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java.JSONParser_sortJSONObjectTest", "name": "JSONParser_sortJSONObjectTest", "file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java", "superclasses": "", "methods": ["[void]testSortJSONObject()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class JSONParser_sortJSONObjectTest {\n\n    @Test\n    public void testSortJSONObject() {\n        // Given\n        JSONObject parameters = new JSONObject();\n        parameters.put(\"b\", 2);\n        parameters.put(\"a\", 1);\n        parameters.put(\"c\", 3);\n\n        // When\n        Map<String, Object> sortedParams = JSONParser.sortJSONObject(parameters);\n\n        // Then\n        Map<String, Object> expectedSortedParams = new LinkedHashMap<>();\n        expectedSortedParams.put(\"a\", 1);\n        expectedSortedParams.put(\"b\", 2);\n        expectedSortedParams.put(\"c\", 3);\n\n        assertEquals(expectedSortedParams, sortedParams);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java.ParameterChecker_checkRequiredParameterTest", "name": "ParameterChecker_checkRequiredParameterTest", "file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java", "superclasses": "", "methods": ["[void]testCheckRequiredParameter_ParameterPresent()", "[void]testCheckRequiredParameter_ParameterMissing()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class ParameterChecker_checkRequiredParameterTest {\n\n    @Test\n    public void testCheckRequiredParameter_ParameterPresent() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"requiredParam\", \"value\");\n        ParameterChecker.checkRequiredParameter(parameters, \"requiredParam\");\n    }\n\n    @Test\n    public void testCheckRequiredParameter_ParameterMissing() {\n        Map<String, Object> parameters = new HashMap<>();\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkRequiredParameter(parameters, \"missingParam\"));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "name": "RequestBuilder_buildPublicRequestTest", "file_path": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "superclasses": "", "methods": ["[void]testBuildPublicRequest_GET()", "[void]testBuildPublicRequest_InvalidMethod()", "[void]testBuildPublicRequest_InvalidUrl()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RequestBuilder_buildPublicRequestTest {\n\n    @Test\n    public void testBuildPublicRequest_GET() {\n        String fullUrl = \"https://api.binance.com/api/v3/ticker/price\";\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.GET);\n        assertEquals(fullUrl, request.url().toString());\n        assertEquals(\"GET\", request.method());\n    }\n\n    @Test\n    public void testBuildPublicRequest_InvalidMethod() {\n        String fullUrl = \"https://api.binance.com/api/v3/ticker/price\";\n        assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.INVALID));\n    }\n\n    @Test\n    public void testBuildPublicRequest_InvalidUrl() {\n        String fullUrl = \"invalid-url\";\n        assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.GET));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest", "name": "UrlBuilder_buildFullUrlTest", "file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java", "superclasses": "", "methods": ["[void]testBuildFullUrlWithoutParameters()", "[void]testBuildFullUrlWithParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UrlBuilder_buildFullUrlTest {\n    private String baseUrl;\n    private String urlPath;\n    private Map<String, Object> parameters;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        urlPath = \"/sapi/v1/sub-account/status\";\n        parameters = new HashMap<>();\n    }\n\n    @Test\n    public void testBuildFullUrlWithoutParameters() {\n        String expected = baseUrl + urlPath;\n        String result = UrlBuilder.buildFullUrl(baseUrl, urlPath, null);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testBuildFullUrlWithParameters() {\n        parameters.put(\"email\", \"alice@test.com\");\n        String expected = baseUrl + urlPath + \"?email=alice%40test.com\";\n        String result = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        assertEquals(expected, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String urlPath;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "urlPath", "syntax_pass": true}, {"attribute_expression": "private Map<String, Object> parameters;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Map<String, Object>", "name": "parameters", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createStakingTest.java.SpotClientImpl_createStakingTest", "name": "SpotClientImpl_createStakingTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createStakingTest.java", "superclasses": "", "methods": ["[void]testCreateStaking()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createStakingTest.java.SpotClientImpl_createStakingTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createStakingTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateStaking() {\n        Staking staking = spotClient.createStaking();\n        assertNotNull(staking);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createRebateTest.java.SpotClientImpl_createRebateTest", "name": "SpotClientImpl_createRebateTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createRebateTest.java", "superclasses": "", "methods": ["[void]testCreateRebate()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createRebateTest.java.SpotClientImpl_createRebateTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createRebateTest {\n\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n        spotClient.setShowLimitUsage(showLimitUsage);\n        spotClient.setProxy(proxy);\n    }\n\n    @Test\n    public void testCreateRebate() {\n        Rebate rebate = spotClient.createRebate();\n        assertNotNull(rebate);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createC2CTest.java.SpotClientImpl_createC2CTest", "name": "SpotClientImpl_createC2CTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createC2CTest.java", "superclasses": "", "methods": ["[void]testCreateC2C()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createC2CTest.java.SpotClientImpl_createC2CTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createC2CTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateC2C() {\n        C2C c2c = spotClient.createC2C();\n        assertNotNull(c2c);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPayTest.java.SpotClientImpl_createPayTest", "name": "SpotClientImpl_createPayTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPayTest.java", "superclasses": "", "methods": ["[void]testCreatePay()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPayTest.java.SpotClientImpl_createPayTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createPayTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreatePay() {\n        Pay pay = spotClient.createPay();\n        assertNotNull(pay);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createTradeTest.java.SpotClientImpl_createTradeTest", "name": "SpotClientImpl_createTradeTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createTradeTest.java", "superclasses": "", "methods": ["[void]testCreateTrade()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createTradeTest.java.SpotClientImpl_createTradeTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createTradeTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = DefaultUrls.PROD_URL;\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateTrade() {\n        Trade trade = spotClient.createTrade();\n        assertNotNull(trade);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createNFTTest.java.SpotClientImpl_createNFTTest", "name": "SpotClientImpl_createNFTTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createNFTTest.java", "superclasses": "", "methods": ["[void]testCreateNFT()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createNFTTest.java.SpotClientImpl_createNFTTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createNFTTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = DefaultUrls.PROD_URL;\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateNFT() {\n        NFT nft = spotClient.createNFT();\n        assertNotNull(nft);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSpotAlgoTest.java.SpotClientImpl_createSpotAlgoTest", "name": "SpotClientImpl_createSpotAlgoTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSpotAlgoTest.java", "superclasses": "", "methods": ["[void]testCreateSpotAlgo()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSpotAlgoTest.java.SpotClientImpl_createSpotAlgoTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createSpotAlgoTest {\n\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateSpotAlgo() {\n        SpotAlgo spotAlgo = spotClient.createSpotAlgo();\n        assertNotNull(spotAlgo);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFuturesTest.java.SpotClientImpl_createFuturesTest", "name": "SpotClientImpl_createFuturesTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFuturesTest.java", "superclasses": "", "methods": ["[void]testCreateFutures()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFuturesTest.java.SpotClientImpl_createFuturesTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createFuturesTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateFutures() {\n        Futures futures = spotClient.createFutures();\n        assertNotNull(futures);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createWalletTest.java.SpotClientImpl_createWalletTest", "name": "SpotClientImpl_createWalletTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createWalletTest.java", "superclasses": "", "methods": ["[void]testCreateWallet()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createWalletTest.java.SpotClientImpl_createWalletTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createWalletTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateWallet() {\n        Wallet wallet = spotClient.createWallet();\n        assertNotNull(wallet);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMiningTest.java.SpotClientImpl_createMiningTest", "name": "SpotClientImpl_createMiningTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMiningTest.java", "superclasses": "", "methods": ["[void]testCreateMining()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMiningTest.java.SpotClientImpl_createMiningTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createMiningTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateMining() {\n        Mining mining = spotClient.createMining();\n        assertNotNull(mining);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createCryptoLoansTest.java.SpotClientImpl_createCryptoLoansTest", "name": "SpotClientImpl_createCryptoLoansTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createCryptoLoansTest.java", "superclasses": "", "methods": ["[void]testCreateCryptoLoans()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createCryptoLoansTest.java.SpotClientImpl_createCryptoLoansTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createCryptoLoansTest {\n\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateCryptoLoans() {\n        CryptoLoans cryptoLoans = spotClient.createCryptoLoans();\n        assertNotNull(cryptoLoans);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createVIPLoansTest.java.SpotClientImpl_createVIPLoansTest", "name": "SpotClientImpl_createVIPLoansTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createVIPLoansTest.java", "superclasses": "", "methods": ["[void]testCreateVIPLoans()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createVIPLoansTest.java.SpotClientImpl_createVIPLoansTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createVIPLoansTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateVIPLoans() {\n        VIPLoans vipLoans = spotClient.createVIPLoans();\n        assertNotNull(vipLoans);\n        // Remove the assertions for methods that do not exist in VIPLoans class\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSimpleEarnTest.java.SpotClientImpl_createSimpleEarnTest", "name": "SpotClientImpl_createSimpleEarnTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSimpleEarnTest.java", "superclasses": "", "methods": ["[void]testCreateSimpleEarn()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createSimpleEarnTest.java.SpotClientImpl_createSimpleEarnTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createSimpleEarnTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateSimpleEarn() {\n        SimpleEarn simpleEarn = spotClient.createSimpleEarn();\n        assertNotNull(simpleEarn);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createGiftCardTest.java.SpotClientImpl_createGiftCardTest", "name": "SpotClientImpl_createGiftCardTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createGiftCardTest.java", "superclasses": "", "methods": ["[void]testCreateGiftCard()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createGiftCardTest.java.SpotClientImpl_createGiftCardTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createGiftCardTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateGiftCard() {\n        GiftCard giftCard = spotClient.createGiftCard();\n        assertNotNull(giftCard);\n        // Remove the assertions for methods that do not exist in GiftCard class\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPortfolioMarginTest.java.SpotClientImpl_createPortfolioMarginTest", "name": "SpotClientImpl_createPortfolioMarginTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPortfolioMarginTest.java", "superclasses": "", "methods": ["[void]testCreatePortfolioMargin()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createPortfolioMarginTest.java.SpotClientImpl_createPortfolioMarginTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createPortfolioMarginTest {\n\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n        spotClient.setShowLimitUsage(showLimitUsage);\n        spotClient.setProxy(proxy);\n    }\n\n    @Test\n    public void testCreatePortfolioMargin() {\n        PortfolioMargin portfolioMargin = spotClient.createPortfolioMargin();\n        assertNotNull(portfolioMargin);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createConvertTest.java.SpotClientImpl_createConvertTest", "name": "SpotClientImpl_createConvertTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createConvertTest.java", "superclasses": "", "methods": ["[void]testCreateConvert()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createConvertTest.java.SpotClientImpl_createConvertTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createConvertTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateConvert() {\n        Convert convert = spotClient.createConvert();\n        assertNotNull(convert);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFiatTest.java.SpotClientImpl_createFiatTest", "name": "SpotClientImpl_createFiatTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFiatTest.java", "superclasses": "", "methods": ["[void]testCreateFiat()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createFiatTest.java.SpotClientImpl_createFiatTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createFiatTest {\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateFiat() {\n        Fiat fiat = spotClient.createFiat();\n        assertNotNull(fiat);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMarginTest.java.SpotClientImpl_createMarginTest", "name": "SpotClientImpl_createMarginTest", "file_path": "src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMarginTest.java", "superclasses": "", "methods": ["[void]testCreateMargin()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/SpotClientImpl_createMarginTest.java.SpotClientImpl_createMarginTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl_createMarginTest {\n\n    private SpotClientImpl spotClient;\n    private String baseUrl;\n    private String apiKey;\n    private SignatureGenerator signatureGenerator;\n    private boolean showLimitUsage;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        apiKey = \"testApiKey\";\n        signatureGenerator = new HmacSignatureGenerator(\"testSecretKey\");\n        showLimitUsage = true;\n        proxy = null;\n        spotClient = new SpotClientImpl(apiKey, signatureGenerator, baseUrl);\n    }\n\n    @Test\n    public void testCreateMargin() {\n        Margin margin = spotClient.createMargin();\n        assertNotNull(margin);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SpotClientImpl spotClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClientImpl", "name": "spotClient", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private String apiKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java.Mining_earningListTest", "name": "Mining_earningListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java", "superclasses": "", "methods": ["[void]testEarningListWithoutParameters()", "[void]testEarningListWithParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_earningListTest.java.Mining_earningListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_earningListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEarningListWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().earningList(parameters));\n    }\n\n    @Test\n    public void testEarningListWithParameters() {\n        String path = \"/sapi/v1/mining/payment/list?algo=sha256&userName=testUser\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"testUser\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().earningList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableFuturesTest.java.SubAccount_enableFuturesTest", "name": "SubAccount_enableFuturesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableFuturesTest.java", "superclasses": "", "methods": ["[void]testEnableFuturesWithoutEmail()", "[void]testEnableFuturesWithValidEmail()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableFuturesTest.java.SubAccount_enableFuturesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_enableFuturesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testEnableFuturesWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/futures/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.enableFutures(parameters));\n    }\n\n    @Test\n    public void testEnableFuturesWithValidEmail() {\n        String path = \"/sapi/v1/sub-account/futures/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String response = subAccount.enableFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, response);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_indexPlanRebalanceInfoTest.java.AutoInvest_indexPlanRebalanceInfoTest", "name": "AutoInvest_indexPlanRebalanceInfoTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_indexPlanRebalanceInfoTest.java", "superclasses": "", "methods": ["[void]testIndexPlanRebalanceInfo()", "[void]testIndexPlanRebalanceInfoWithParameters()", "[void]testIndexPlanRebalanceInfoWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/AutoInvest_indexPlanRebalanceInfoTest.java.AutoInvest_indexPlanRebalanceInfoTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AutoInvest_indexPlanRebalanceInfoTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testIndexPlanRebalanceInfo() {\n        String path = \"/sapi/v1/lending/auto-invest/rebalance/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testIndexPlanRebalanceInfoWithParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/rebalance/history?startTime=1620000000000&endTime=1620100000000&current=1&size=10&recvWindow=5000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 1620000000000L);\n        parameters.put(\"endTime\", 1620100000000L);\n        parameters.put(\"current\", 1L);\n        parameters.put(\"size\", 10L);\n        parameters.put(\"recvWindow\", 5000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testIndexPlanRebalanceInfoWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/rebalance/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java.Wallet_delegationHistoryTest", "name": "Wallet_delegationHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java", "superclasses": "", "methods": ["[void]testDelegationHistory()", "[void]testDelegationHistoryMissingParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_delegationHistoryTest.java.Wallet_delegationHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_delegationHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDelegationHistory() {\n        String path = \"/sapi/v1/asset/custody/transfer-history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n        parameters.put(\"startTime\", 1609459200000L);\n        parameters.put(\"endTime\", 1609545600000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().delegationHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testDelegationHistoryMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n        parameters.put(\"startTime\", 1609459200000L);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().delegationHistory(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Blvt_userLimitTest.java.Blvt_userLimitTest", "name": "Blvt_userLimitTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_userLimitTest.java", "superclasses": "", "methods": ["[void]testUserLimit()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Blvt_userLimitTest.java.Blvt_userLimitTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Blvt_userLimitTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Blvt blvt;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.blvt = new Blvt(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testUserLimit() {\n        String path = \"/sapi/v1/blvt/userLimit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = blvt.userLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Blvt blvt;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Blvt", "name": "blvt", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Convert_acceptQuoteTest.java.Convert_acceptQuoteTest", "name": "Convert_acceptQuoteTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Convert_acceptQuoteTest.java", "superclasses": "", "methods": ["[void]testAcceptQuoteWithoutParameters()", "[void]testAcceptQuoteWithParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Convert_acceptQuoteTest.java.Convert_acceptQuoteTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Convert_acceptQuoteTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Convert convert;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.convert = new Convert(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testAcceptQuoteWithoutParameters() {\n        String path = \"/sapi/v1/convert/acceptQuote\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> convert.acceptQuote(parameters));\n    }\n\n    @Test\n    public void testAcceptQuoteWithParameters() {\n        String path = \"/sapi/v1/convert/acceptQuote\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"quoteId\", \"123456\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = convert.acceptQuote(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Convert convert;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Convert", "name": "convert", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java.UserData_closeIsolatedMarginListenKeyTest", "name": "UserData_closeIsolatedMarginListenKeyTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java", "superclasses": "", "methods": ["[void]testCloseIsolatedMarginListenKeyWithoutParameters()", "[void]testCloseIsolatedMarginListenKey()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/UserData_closeIsolatedMarginListenKeyTest.java.UserData_closeIsolatedMarginListenKeyTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UserData_closeIsolatedMarginListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloseIsolatedMarginListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeIsolatedMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testCloseIsolatedMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BTCUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAssetTest.java.VIPLoans_collateralAssetTest", "name": "VIPLoans_collateralAssetTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAssetTest.java", "superclasses": "", "methods": ["[void]testCollateralAsset()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAssetTest.java.VIPLoans_collateralAssetTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_collateralAssetTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testCollateralAsset() {\n        String path = \"/sapi/v1/loan/vip/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.collateralAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Blvt_blvtInfoTest.java.Blvt_blvtInfoTest", "name": "Blvt_blvtInfoTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_blvtInfoTest.java", "superclasses": "", "methods": ["[void]testBlvtInfoSuccess()", "[void]testBlvtInfoWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Blvt_blvtInfoTest.java.Blvt_blvtInfoTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Blvt_blvtInfoTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Blvt blvt;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.blvt = new Blvt(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testBlvtInfoSuccess() {\n        String path = \"/sapi/v1/blvt/tokenInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCUP\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = blvt.blvtInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testBlvtInfoWithoutParameters() {\n        String path = \"/sapi/v1/blvt/tokenInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = blvt.blvtInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Blvt blvt;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Blvt", "name": "blvt", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralAssetsDataTest.java.CryptoLoans_collateralAssetsDataTest", "name": "CryptoLoans_collateralAssetsDataTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralAssetsDataTest.java", "superclasses": "", "methods": ["[void]testCollateralAssetsData()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralAssetsDataTest.java.CryptoLoans_collateralAssetsDataTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_collateralAssetsDataTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testCollateralAssetsData() {\n        String path = \"/sapi/v1/loan/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.collateralAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_dustLogTest.java.Wallet_dustLogTest", "name": "Wallet_dustLogTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_dustLogTest.java", "superclasses": "", "methods": ["[void]testDustLog()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_dustLogTest.java.Wallet_dustLogTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_dustLogTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDustLog() {\n        String path = \"/sapi/v1/asset/dribblet\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().dustLog(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanIncomeTest.java.CryptoLoans_loanIncomeTest", "name": "CryptoLoans_loanIncomeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanIncomeTest.java", "superclasses": "", "methods": ["[void]testLoanIncomeWithValidParameters()", "[void]testLoanIncomeWithoutAssetParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanIncomeTest.java.CryptoLoans_loanIncomeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanIncomeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testLoanIncomeWithValidParameters() {\n        String path = \"/sapi/v1/loan/income?asset=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanIncome(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLoanIncomeWithoutAssetParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.loanIncome(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionRecordTest.java.SimpleEarn_lockedSubscriptionRecordTest", "name": "SimpleEarn_lockedSubscriptionRecordTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionRecordTest.java", "superclasses": "", "methods": ["[void]testLockedSubscriptionRecord()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionRecordTest.java.SimpleEarn_lockedSubscriptionRecordTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_lockedSubscriptionRecordTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLockedSubscriptionRecord() {\n        String path = \"/sapi/v1/simple-earn/locked/history/subscriptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedSubscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendListenKeyTest.java.UserData_extendListenKeyTest", "name": "UserData_extendListenKeyTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendListenKeyTest.java", "superclasses": "", "methods": ["[void]testExtendListenKeyWithoutParameters()", "[void]testExtendListenKeyWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/UserData_extendListenKeyTest.java.UserData_extendListenKeyTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UserData_extendListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private UserData userData;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.userData = new UserData(baseUrl, MockData.API_KEY, false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testExtendListenKeyWithoutParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> userData.extendListenKey(parameters));\n    }\n\n    @Test\n    public void testExtendListenKeyWithValidParameters() {\n        String path = \"/api/v3/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"validListenKey\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = userData.extendListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private UserData userData;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "UserData", "name": "userData", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethUnwrapHistoryTest.java.Staking_ethStakingWbethUnwrapHistoryTest", "name": "Staking_ethStakingWbethUnwrapHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethUnwrapHistoryTest.java", "superclasses": "", "methods": ["[void]testEthStakingWbethUnwrapHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethUnwrapHistoryTest.java.Staking_ethStakingWbethUnwrapHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingWbethUnwrapHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingWbethUnwrapHistory() {\n        String path = \"/sapi/v1/eth-staking/wbeth/history/unwrapHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethUnwrapHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_tradeFeeTest.java.Wallet_tradeFeeTest", "name": "Wallet_tradeFeeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_tradeFeeTest.java", "superclasses": "", "methods": ["[void]testTradeFee()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_tradeFeeTest.java.Wallet_tradeFeeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_tradeFeeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradeFee() {\n        String path = \"/sapi/v1/asset/tradeFee?symbol=BNBBTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBBTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().tradeFee(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_assetsTest.java.SubAccount_assetsTest", "name": "SubAccount_assetsTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_assetsTest.java", "superclasses": "", "methods": ["[void]testAssetsWithoutParameters()", "[void]testAssetsWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_assetsTest.java.SubAccount_assetsTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_assetsTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAssetsWithoutParameters() {\n        String path = \"/sapi/v3/sub-account/assets\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().assets(parameters));\n    }\n\n    @Test\n    public void testAssetsWithValidParameters() {\n        String path = String.format(\"/sapi/v3/sub-account/assets?email=%s\", UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().assets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java.Mining_bonusListTest", "name": "Mining_bonusListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java", "superclasses": "", "methods": ["[void]testBonusListWithoutParameters()", "[void]testBonusListWithParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_bonusListTest.java.Mining_bonusListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_bonusListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBonusListWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/other\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().bonusList(parameters));\n    }\n\n    @Test\n    public void testBonusListWithParameters() {\n        String path = \"/sapi/v1/mining/payment/other?algo=sha256&userName=testUser\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"testUser\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().bonusList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java.Trade_testNewOrderTest", "name": "Trade_testNewOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java", "superclasses": "", "methods": ["[void]testTestNewOrderSuccess()", "[void]testTestNewOrderMissingParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java.Trade_testNewOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_testNewOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testTestNewOrderSuccess() {\n        String path = \"/api/v3/order/test?symbol=BNBUSDT&side=BUY&type=MARKET\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.testNewOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTestNewOrderMissingParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        assertThrows(BinanceConnectorException.class, () -> trade.testNewOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscribeTest.java.Blvt_subscribeTest", "name": "Blvt_subscribeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscribeTest.java", "superclasses": "", "methods": ["[void]testSubscribeSuccess()", "[void]testSubscribeMissingTokenName()", "[void]testSubscribeMissingCost()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Blvt_subscribeTest.java.Blvt_subscribeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Blvt_subscribeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Blvt blvt;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.blvt = new Blvt(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testSubscribeSuccess() {\n        String path = \"/sapi/v1/blvt/subscribe?tokenName=BTCUP&cost=100\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCUP\");\n        parameters.put(\"cost\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = blvt.subscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testSubscribeMissingTokenName() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"cost\", 100.0);\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            blvt.subscribe(parameters);\n        });\n    }\n\n    @Test\n    public void testSubscribeMissingCost() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCUP\");\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            blvt.subscribe(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Blvt blvt;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Blvt", "name": "blvt", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java.Market_ticker24HTest", "name": "Market_ticker24HTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java", "superclasses": "", "methods": ["[void]testTicker24HWithSymbol()", "[void]testTicker24HWithSymbols()", "[void]testTicker24HWithDoubleParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_ticker24HTest.java.Market_ticker24HTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_ticker24HTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTicker24HWithSymbol() {\n        String path = \"/api/v3/ticker/24hr?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithSymbols() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithDoubleParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker24H(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_queryUniversalTransferTest.java.SubAccount_queryUniversalTransferTest", "name": "SubAccount_queryUniversalTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_queryUniversalTransferTest.java", "superclasses": "", "methods": ["[void]testQueryUniversalTransfer()", "[void]testQueryUniversalTransferWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_queryUniversalTransferTest.java.SubAccount_queryUniversalTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_queryUniversalTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testQueryUniversalTransfer() {\n        String path = \"/sapi/v1/sub-account/universalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = subAccount.queryUniversalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testQueryUniversalTransferWithoutParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.queryUniversalTransfer(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java.Mining_statsticsListTest", "name": "Mining_statsticsListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java", "superclasses": "", "methods": ["[void]testStatsticsListWithoutParameters()", "[void]testStatsticsListWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java.Mining_statsticsListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_statsticsListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testStatsticsListWithoutParameters() {\n        String path = \"/sapi/v1/mining/statistics/user/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Mining mining = new Mining(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n        assertThrows(BinanceConnectorException.class, () -> mining.statsticsList(parameters));\n    }\n\n    @Test\n    public void testStatsticsListWithValidParameters() {\n        String path = \"/sapi/v1/mining/statistics/user/status?algo=sha256&userName=testUser\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"testUser\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Mining mining = new Mining(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n        String result = mining.statsticsList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingSubHistoryTest.java.Staking_ethStakingSubHistoryTest", "name": "Staking_ethStakingSubHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingSubHistoryTest.java", "superclasses": "", "methods": ["[void]testEthStakingSubHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingSubHistoryTest.java.Staking_ethStakingSubHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingSubHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Staking staking;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.staking = new Staking(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testEthStakingSubHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/stakingHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = staking.ethStakingSubHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Staking staking;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Staking", "name": "staking", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest", "name": "SubAccount_universalTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java", "superclasses": "", "methods": ["[void]testUniversalTransferSuccess()", "[void]testUniversalTransferMissingRequiredParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_universalTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n    private RequestHandler requestHandler;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testUniversalTransferSuccess() {\n        String path = \"/sapi/v1/sub-account/universalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"MARGIN\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = subAccount.universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testUniversalTransferMissingRequiredParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"MARGIN\");\n        parameters.put(\"asset\", \"BTC\");\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.universalTransfer(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}, {"attribute_expression": "private RequestHandler requestHandler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_renewTest.java.VIPLoans_renewTest", "name": "VIPLoans_renewTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_renewTest.java", "superclasses": "", "methods": ["[void]testRenewSuccess()", "[void]testRenewMissingOrderId()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_renewTest.java.VIPLoans_renewTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_renewTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testRenewSuccess() {\n        String path = \"/sapi/v1/loan/vip/renew\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.renew(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testRenewMissingOrderId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            vipLoans.renew(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_assetLeverageTest.java.PortfolioMargin_assetLeverageTest", "name": "PortfolioMargin_assetLeverageTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_assetLeverageTest.java", "superclasses": "", "methods": ["[void]testAssetLeverage()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_assetLeverageTest.java.PortfolioMargin_assetLeverageTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PortfolioMargin_assetLeverageTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private PortfolioMargin portfolioMargin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.portfolioMargin = new PortfolioMargin(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testAssetLeverage() {\n        String path = \"/sapi/v1/portfolio/margin-asset-leverage\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = portfolioMargin.assetLeverage();\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private PortfolioMargin portfolioMargin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PortfolioMargin", "name": "portfolioMargin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_enableFastWithdrawTest.java.Wallet_enableFastWithdrawTest", "name": "Wallet_enableFastWithdrawTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_enableFastWithdrawTest.java", "superclasses": "", "methods": ["[void]testEnableFastWithdraw()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_enableFastWithdrawTest.java.Wallet_enableFastWithdrawTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_enableFastWithdrawTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableFastWithdraw() {\n        String path = \"/sapi/v1/account/enableFastWithdrawSwitch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().enableFastWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_algorithmTest.java.Mining_algorithmTest", "name": "Mining_algorithmTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_algorithmTest.java", "superclasses": "", "methods": ["[void]testAlgorithm()", "[void]testAlgorithmWithParameters()", "[void]testAlgorithmWithInvalidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_algorithmTest.java.Mining_algorithmTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_algorithmTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Mining mining;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.mining = new Mining(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testAlgorithm() {\n        String path = \"/sapi/v1/mining/pub/algoList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.algorithm(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAlgorithmWithParameters() {\n        String path = \"/sapi/v1/mining/pub/algoList?recvWindow=5000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", 5000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.algorithm(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAlgorithmWithInvalidParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"invalidParam\", \"invalidValue\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.algorithm(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Mining mining;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Mining", "name": "mining", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleRedemptionRecordTest.java.SimpleEarn_flexibleRedemptionRecordTest", "name": "SimpleEarn_flexibleRedemptionRecordTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleRedemptionRecordTest.java", "superclasses": "", "methods": ["[void]testFlexibleRedemptionRecord()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleRedemptionRecordTest.java.SimpleEarn_flexibleRedemptionRecordTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_flexibleRedemptionRecordTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleRedemptionRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/redemptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleRedemptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVHistoryTest.java.CryptoLoans_loanAdjustLTVHistoryTest", "name": "CryptoLoans_loanAdjustLTVHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVHistoryTest.java", "superclasses": "", "methods": ["[void]testLoanAdjustLTVHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVHistoryTest.java.CryptoLoans_loanAdjustLTVHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanAdjustLTVHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLoanAdjustLTVHistory() {\n        String path = \"/sapi/v1/loan/ltv/adjustment/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 100000001L);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanAdjustLTVHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest", "name": "SubAccount_managedSubWithdrawTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "superclasses": "", "methods": ["[void]testManagedSubWithdrawWithoutParameters()", "[void]testManagedSubWithdrawWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_managedSubWithdrawTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testManagedSubWithdrawWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubWithdraw(parameters));\n    }\n\n    @Test\n    public void testManagedSubWithdrawWithValidParameters() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/withdraw?fromEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", 0.1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowHistoryTest.java.CryptoLoans_loanBorrowHistoryTest", "name": "CryptoLoans_loanBorrowHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowHistoryTest.java", "superclasses": "", "methods": ["[void]testLoanBorrowHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowHistoryTest.java.CryptoLoans_loanBorrowHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanBorrowHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLoanBorrowHistory() {\n        String path = \"/sapi/v1/loan/borrow/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 100000001L);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_dustTransferTest.java.Wallet_dustTransferTest", "name": "Wallet_dustTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_dustTransferTest.java", "superclasses": "", "methods": ["[void]testDustTransferSuccess()", "[void]testDustTransferInvalidParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_dustTransferTest.java.Wallet_dustTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_dustTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Wallet wallet;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.wallet = new Wallet(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testDustTransferSuccess() {\n        String path = \"/sapi/v1/asset/dust\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", new ArrayList<String>() {{ add(\"BTC\"); add(\"ETH\"); }});\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.dustTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testDustTransferInvalidParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\"); // Incorrect type, should be ArrayList\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            wallet.dustTransfer(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Wallet wallet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Wallet", "name": "wallet", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_bnbConvertableAssetsTest.java.Wallet_bnbConvertableAssetsTest", "name": "Wallet_bnbConvertableAssetsTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_bnbConvertableAssetsTest.java", "superclasses": "", "methods": ["[void]testBnbConvertableAssets()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_bnbConvertableAssetsTest.java.Wallet_bnbConvertableAssetsTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_bnbConvertableAssetsTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBnbConvertableAssets() {\n        String path = \"/sapi/v1/asset/dust-btc\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().bnbConvertableAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_transferHistoryTest.java.Margin_transferHistoryTest", "name": "Margin_transferHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_transferHistoryTest.java", "superclasses": "", "methods": ["[void]testTransferHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_transferHistoryTest.java.Margin_transferHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_transferHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testTransferHistory() {\n        String path = \"/sapi/v1/margin/transfer?asset=BNB&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"startTime\", 12345678);\n        parameters.put(\"endTime\", 12345679);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.transferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_cancelOrderTest.java.SpotAlgo_cancelOrderTest", "name": "SpotAlgo_cancelOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_cancelOrderTest.java", "superclasses": "", "methods": ["[void]testCancelOrderSuccess()", "[void]testCancelOrderMissingAlgoId()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_cancelOrderTest.java.SpotAlgo_cancelOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotAlgo_cancelOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SpotAlgo spotAlgo;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.spotAlgo = new SpotAlgo(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testCancelOrderSuccess() {\n        String path = \"/sapi/v1/algo/spot/order?algoId=12345\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", 12345L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = spotAlgo.cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCancelOrderMissingAlgoId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> spotAlgo.cancelOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SpotAlgo spotAlgo;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotAlgo", "name": "spotAlgo", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOCOOrdersTest.java.Trade_getOpenOCOOrdersTest", "name": "Trade_getOpenOCOOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOCOOrdersTest.java", "superclasses": "", "methods": ["[void]testGetOpenOCOOrders()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOCOOrdersTest.java.Trade_getOpenOCOOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_getOpenOCOOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), new ProxyAuth(null, null));\n        this.trade = new Trade(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testGetOpenOCOOrders() {\n        String path = \"/api/v3/openOrderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.getOpenOCOOrders(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest", "name": "Market_klinesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "superclasses": "", "methods": ["[void]testKlinesWithoutSymbol()", "[void]testKlinesWithoutInterval()", "[void]testKlines()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_klinesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testKlinesWithoutSymbol() {\n        String path = \"/api/v3/klines?interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }\n\n    @Test\n    public void testKlinesWithoutInterval() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }\n\n    @Test\n    public void testKlines() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT&interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().klines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_plansListTest.java.AutoInvest_plansListTest", "name": "AutoInvest_plansListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_plansListTest.java", "superclasses": "", "methods": ["[void]testPlansListSuccess()", "[void]testPlansListMissingPlanType()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/AutoInvest_plansListTest.java.AutoInvest_plansListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AutoInvest_plansListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private AutoInvest autoInvest;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.autoInvest = new AutoInvest(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testPlansListSuccess() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/list?planType=RECURRING\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planType\", \"RECURRING\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = autoInvest.plansList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testPlansListMissingPlanType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> autoInvest.plansList(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private AutoInvest autoInvest;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "AutoInvest", "name": "autoInvest", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductPositionTest.java.SimpleEarn_flexibleProductPositionTest", "name": "SimpleEarn_flexibleProductPositionTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductPositionTest.java", "superclasses": "", "methods": ["[void]testFlexibleProductPosition()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductPositionTest.java.SimpleEarn_flexibleProductPositionTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_flexibleProductPositionTest {\n    private SimpleEarn simpleEarn;\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void setUp() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testFlexibleProductPosition() {\n        String path = \"/sapi/v1/simple-earn/flexible/position\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.flexibleProductPosition(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}, {"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest", "name": "Wallet_universalTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java", "superclasses": "", "methods": ["[void]testUniversalTransferSuccess()", "[void]testUniversalTransferMissingRequiredParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_universalTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Wallet wallet;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.wallet = new Wallet(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testUniversalTransferSuccess() {\n        String path = \"/sapi/v1/asset/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_C2C\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testUniversalTransferMissingRequiredParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_C2C\");\n        parameters.put(\"asset\", \"BTC\");\n\n        assertThrows(BinanceConnectorException.class, () -> wallet.universalTransfer(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Wallet wallet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Wallet", "name": "wallet", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest", "name": "SubAccount_subAccountToSubAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java", "superclasses": "", "methods": ["[void]testSubAccountToSubAccountWithoutParameters()", "[void]testSubAccountToSubAccountWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_subAccountToSubAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testSubAccountToSubAccountWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/transfer/subToSub\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.subAccountToSubAccount(parameters));\n    }\n\n    @Test\n    public void testSubAccountToSubAccountWithValidParameters() {\n        String path = \"/sapi/v1/sub-account/transfer/subToSub\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"test@example.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String response = subAccount.subAccountToSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, response);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repaymentHistoryTest.java.VIPLoans_repaymentHistoryTest", "name": "VIPLoans_repaymentHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repaymentHistoryTest.java", "superclasses": "", "methods": ["[void]testRepaymentHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repaymentHistoryTest.java.VIPLoans_repaymentHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_repaymentHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testRepaymentHistory() {\n        String path = \"/sapi/v1/loan/vip/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"startTime\", 1609459200000L);\n        parameters.put(\"endTime\", 1609545600000L);\n        parameters.put(\"current\", 1L);\n        parameters.put(\"limit\", 10L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.repaymentHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethRewardHistoryTest.java.Staking_ethStakingWbethRewardHistoryTest", "name": "Staking_ethStakingWbethRewardHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethRewardHistoryTest.java", "superclasses": "", "methods": ["[void]testEthStakingWbethRewardHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethRewardHistoryTest.java.Staking_ethStakingWbethRewardHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingWbethRewardHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingWbethRewardHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/wbethRewardsHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethRewardHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_createVirtualSubAccountTest.java.SubAccount_createVirtualSubAccountTest", "name": "SubAccount_createVirtualSubAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_createVirtualSubAccountTest.java", "superclasses": "", "methods": ["[void]testCreateVirtualSubAccountSuccess()", "[void]testCreateVirtualSubAccountMissingParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_createVirtualSubAccountTest.java.SubAccount_createVirtualSubAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_createVirtualSubAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testCreateVirtualSubAccountSuccess() {\n        String path = \"/sapi/v1/sub-account/virtualSubAccount?subAccountString=testSubAccount\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"subAccountString\", \"testSubAccount\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = subAccount.createVirtualSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCreateVirtualSubAccountMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.createVirtualSubAccount(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingQuotaTest.java.Staking_ethStakingQuotaTest", "name": "Staking_ethStakingQuotaTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingQuotaTest.java", "superclasses": "", "methods": ["[void]testEthStakingQuota()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingQuotaTest.java.Staking_ethStakingQuotaTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingQuotaTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingQuota() {\n        String path = \"/sapi/v1/eth-staking/eth/quota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanCollateralAssetsTest.java.CryptoLoans_flexibleLoanCollateralAssetsTest", "name": "CryptoLoans_flexibleLoanCollateralAssetsTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanCollateralAssetsTest.java", "superclasses": "", "methods": ["[void]testFlexibleLoanCollateralAssets()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanCollateralAssetsTest.java.CryptoLoans_flexibleLoanCollateralAssetsTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_flexibleLoanCollateralAssetsTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanCollateralAssets() {\n        String path = \"/sapi/v1/loan/flexible/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanCollateralAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest", "name": "CryptoLoans_flexibleLoanRepayTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "superclasses": "", "methods": ["[void]testFlexibleLoanRepayWithoutParameters()", "[void]testFlexibleLoanRepayWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_flexibleLoanRepayTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testFlexibleLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.flexibleLoanRepay(parameters));\n    }\n\n    @Test\n    public void testFlexibleLoanRepayWithValidParameters() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"repayAmount\", 1.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.flexibleLoanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java.VIPLoans_borrowTest", "name": "VIPLoans_borrowTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java", "superclasses": "", "methods": ["[void]testBorrowSuccess()", "[void]testBorrowMissingRequiredParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java.VIPLoans_borrowTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_borrowTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testBorrowSuccess() {\n        String path = \"/sapi/v1/loan/vip/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanAccountId\", 123456L);\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"loanAmount\", 1.0);\n        parameters.put(\"collateralAccountId\", \"789012\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"isFlexibleRate\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.borrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testBorrowMissingRequiredParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanAccountId\", 123456L);\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralAccountId\", \"789012\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"isFlexibleRate\", true);\n\n        assertThrows(BinanceConnectorException.class, () -> vipLoans.borrow(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_forceLiquidationRecTest.java.Margin_forceLiquidationRecTest", "name": "Margin_forceLiquidationRecTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_forceLiquidationRecTest.java", "superclasses": "", "methods": ["[void]testForceLiquidationRec()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_forceLiquidationRecTest.java.Margin_forceLiquidationRecTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_forceLiquidationRecTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testForceLiquidationRec() {\n        String path = \"/sapi/v1/margin/forceLiquidationRec?startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 12345678);\n        parameters.put(\"endTime\", 12345679);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.forceLiquidationRec(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java.SubAccount_getIpRestrictionTest", "name": "SubAccount_getIpRestrictionTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java", "superclasses": "", "methods": ["[void]testGetIpRestriction()", "[void]testGetIpRestrictionWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java.SubAccount_getIpRestrictionTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_getIpRestrictionTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetIpRestriction() {\n        String path = String.format(\"/sapi/v1/sub-account/subAccountApi/ipRestriction?email=%s&subAccountApiKey=abc\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().getIpRestriction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetIpRestrictionWithoutParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getIpRestriction(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountTest.java.SubAccount_futuresAccountTest", "name": "SubAccount_futuresAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountTest.java", "superclasses": "", "methods": ["[void]testFuturesAccountWithoutEmail()", "[void]testFuturesAccountWithEmail()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountTest.java.SubAccount_futuresAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_futuresAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesAccountWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccount(parameters));\n    }\n\n    @Test\n    public void testFuturesAccountWithEmail() {\n        String path = \"/sapi/v1/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java.Trade_newOrderTest", "name": "Trade_newOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java", "superclasses": "", "methods": ["[void]testNewOrderSuccess()", "[void]testNewOrderMissingParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_newOrderTest.java.Trade_newOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_newOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testNewOrderSuccess() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", 0.01);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.newOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testNewOrderMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", 0.01);\n\n        assertThrows(BinanceConnectorException.class, () -> trade.newOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_repayFuturesTest.java.PortfolioMargin_repayFuturesTest", "name": "PortfolioMargin_repayFuturesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_repayFuturesTest.java", "superclasses": "", "methods": ["[void]testRepayFutures()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_repayFuturesTest.java.PortfolioMargin_repayFuturesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PortfolioMargin_repayFuturesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private PortfolioMargin portfolioMargin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.portfolioMargin = new PortfolioMargin(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testRepayFutures() {\n        String path = \"/sapi/v1/portfolio/repay-futures-negative-balance\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = portfolioMargin.repayFutures(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private PortfolioMargin portfolioMargin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PortfolioMargin", "name": "portfolioMargin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_redeemLockedProductTest.java.SimpleEarn_redeemLockedProductTest", "name": "SimpleEarn_redeemLockedProductTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_redeemLockedProductTest.java", "superclasses": "", "methods": ["[void]testRedeemLockedProductSuccess()", "[void]testRedeemLockedProductWithoutPositionId()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_redeemLockedProductTest.java.SimpleEarn_redeemLockedProductTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_redeemLockedProductTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testRedeemLockedProductSuccess() {\n        String path = \"/sapi/v1/simple-earn/locked/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"1234\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.redeemLockedProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testRedeemLockedProductWithoutPositionId() {\n        String path = \"/sapi/v1/simple-earn/locked/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.redeemLockedProduct(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest", "name": "SimpleEarn_flexibleSubscriptionPreviewTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "superclasses": "", "methods": ["[void]testFlexibleSubscriptionPreview()", "[void]testFlexibleSubscriptionPreviewMissingProductId()", "[void]testFlexibleSubscriptionPreviewMissingAmount()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_flexibleSubscriptionPreviewTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testFlexibleSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscriptionPreview?productId=USDT001&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"USDT001\");\n        parameters.put(\"amount\", 1.1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.flexibleSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testFlexibleSubscriptionPreviewMissingProductId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 1.1);\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.flexibleSubscriptionPreview(parameters));\n    }\n\n    @Test\n    public void testFlexibleSubscriptionPreviewMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"USDT001\");\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.flexibleSubscriptionPreview(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOpenOrdersTest.java.Trade_cancelOpenOrdersTest", "name": "Trade_cancelOpenOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOpenOrdersTest.java", "superclasses": "", "methods": ["[void]testCancelOpenOrdersSuccess()", "[void]testCancelOpenOrdersWithoutSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOpenOrdersTest.java.Trade_cancelOpenOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_cancelOpenOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testCancelOpenOrdersSuccess() {\n        String path = \"/api/v3/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.cancelOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCancelOpenOrdersWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> trade.cancelOpenOrders(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Fiat_paymentsTest.java.Fiat_paymentsTest", "name": "Fiat_paymentsTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Fiat_paymentsTest.java", "superclasses": "", "methods": ["[void]testPayments()", "[void]testPaymentsMissingTransactionType()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Fiat_paymentsTest.java.Fiat_paymentsTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Fiat_paymentsTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Fiat fiatClient;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.fiatClient = new Fiat(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testPayments() {\n        String path = \"/sapi/v1/fiat/payments?transactionType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = fiatClient.payments(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testPaymentsMissingTransactionType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            fiatClient.payments(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Fiat fiatClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Fiat", "name": "fiatClient", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOCOTest.java.Trade_cancelOCOTest", "name": "Trade_cancelOCOTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOCOTest.java", "superclasses": "", "methods": ["[void]testCancelOCOWithoutParameters()", "[void]testCancelOCOSuccess()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOCOTest.java.Trade_cancelOCOTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_cancelOCOTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testCancelOCOWithoutParameters() {\n        String path = \"/api/v3/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> trade.cancelOCO(parameters));\n    }\n\n    @Test\n    public void testCancelOCOSuccess() {\n        String path = \"/api/v3/orderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.cancelOCO(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_maxBorrowTest.java.Margin_maxBorrowTest", "name": "Margin_maxBorrowTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_maxBorrowTest.java", "superclasses": "", "methods": ["[void]testMaxBorrow()", "[void]testMaxBorrowMissingAsset()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_maxBorrowTest.java.Margin_maxBorrowTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_maxBorrowTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testMaxBorrow() {\n        String path = \"/sapi/v1/margin/maxBorrowable?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.maxBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testMaxBorrowMissingAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            margin.maxBorrow(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest", "name": "SimpleEarn_setLockedAutoSubscribeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "superclasses": "", "methods": ["[void]testSetLockedAutoSubscribe()", "[void]testSetLockedAutoSubscribeMissingPositionId()", "[void]testSetLockedAutoSubscribeMissingAutoSubscribe()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_setLockedAutoSubscribeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSetLockedAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe?positionId=1234&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"1234\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testSetLockedAutoSubscribeMissingPositionId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoSubscribe\", true);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setLockedAutoSubscribe(parameters));\n    }\n\n    @Test\n    public void testSetLockedAutoSubscribeMissingAutoSubscribe() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"1234\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setLockedAutoSubscribe(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_delistScheduleTest.java.Margin_delistScheduleTest", "name": "Margin_delistScheduleTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_delistScheduleTest.java", "superclasses": "", "methods": ["[void]testDelistSchedule()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_delistScheduleTest.java.Margin_delistScheduleTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_delistScheduleTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testDelistSchedule() {\n        String path = \"/sapi/v1/margin/delist-schedule?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.delistSchedule(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_simpleAccountTest.java.SimpleEarn_simpleAccountTest", "name": "SimpleEarn_simpleAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_simpleAccountTest.java", "superclasses": "", "methods": ["[void]testSimpleAccount()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_simpleAccountTest.java.SimpleEarn_simpleAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_simpleAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSimpleAccount() {\n        String path = \"/sapi/v1/simple-earn/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().simpleAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_tradesTest.java.Market_tradesTest", "name": "Market_tradesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_tradesTest.java", "superclasses": "", "methods": ["[void]testTradesWithoutSymbol()", "[void]testTradesWithSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_tradesTest.java.Market_tradesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_tradesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradesWithoutSymbol() {\n        String path = \"/api/v3/trades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().trades(parameters));\n    }\n\n    @Test\n    public void testTradesWithSymbol() {\n        String path = \"/api/v3/trades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().trades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOrderTest.java.Trade_getOrderTest", "name": "Trade_getOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOrderTest.java", "superclasses": "", "methods": ["[void]testGetOrderSuccess()", "[void]testGetOrderMissingSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_getOrderTest.java.Trade_getOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_getOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testGetOrderSuccess() {\n        String path = \"/api/v3/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.getOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetOrderMissingSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        assertThrows(BinanceConnectorException.class, () -> trade.getOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOrderTest.java.Trade_cancelOrderTest", "name": "Trade_cancelOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOrderTest.java", "superclasses": "", "methods": ["[void]testCancelOrderSuccess()", "[void]testCancelOrderWithoutSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_cancelOrderTest.java.Trade_cancelOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_cancelOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testCancelOrderSuccess() {\n        String path = \"/api/v3/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCancelOrderWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> trade.cancelOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_withdrawHistoryTest.java.Wallet_withdrawHistoryTest", "name": "Wallet_withdrawHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_withdrawHistoryTest.java", "superclasses": "", "methods": ["[void]testWithdrawHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_withdrawHistoryTest.java.Wallet_withdrawHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_withdrawHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Wallet wallet;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.wallet = new Wallet(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testWithdrawHistory() {\n        String path = \"/sapi/v1/capital/withdraw/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.withdrawHistory(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Wallet wallet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Wallet", "name": "wallet", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest", "name": "Futures_futuresTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "superclasses": "", "methods": ["[void]testFuturesTransferSuccess()", "[void]testFuturesTransferMissingRequiredParameter()", "[void]testFuturesTransferInvalidParameterType()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Futures_futuresTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Futures futures;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.futures = new Futures(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testFuturesTransferSuccess() {\n        String path = \"/sapi/v1/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", 100.0);\n        parameters.put(\"type\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = futures.futuresTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testFuturesTransferMissingRequiredParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"type\", 1);\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            futures.futuresTransfer(parameters);\n        });\n    }\n\n    @Test\n    public void testFuturesTransferInvalidParameterType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", 100.0);\n        parameters.put(\"type\", \"invalidType\");\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            futures.futuresTransfer(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Futures futures;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Futures", "name": "futures", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorAllocationsTest.java.Trade_sorAllocationsTest", "name": "Trade_sorAllocationsTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_sorAllocationsTest.java", "superclasses": "", "methods": ["[void]testSorAllocations()", "[void]testSorAllocationsMissingSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_sorAllocationsTest.java.Trade_sorAllocationsTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_sorAllocationsTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSorAllocations() {\n        String path = \"/api/v3/myAllocations?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().sorAllocations(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testSorAllocationsMissingSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().sorAllocations(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_tokensLimitTest.java.GiftCard_tokensLimitTest", "name": "GiftCard_tokensLimitTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_tokensLimitTest.java", "superclasses": "", "methods": ["[void]testTokensLimitSuccess()", "[void]testTokensLimitWithoutBaseToken()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/GiftCard_tokensLimitTest.java.GiftCard_tokensLimitTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class GiftCard_tokensLimitTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private GiftCard giftCard;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.giftCard = new GiftCard(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testTokensLimitSuccess() {\n        String path = \"/sapi/v1/giftcard/buyCode/token-limit?baseToken=BUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = giftCard.tokensLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTokensLimitWithoutBaseToken() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> giftCard.tokensLimit(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private GiftCard giftCard;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "GiftCard", "name": "giftCard", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionRecordTest.java.SimpleEarn_flexibleSubscriptionRecordTest", "name": "SimpleEarn_flexibleSubscriptionRecordTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionRecordTest.java", "superclasses": "", "methods": ["[void]testFlexibleSubscriptionRecord()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionRecordTest.java.SimpleEarn_flexibleSubscriptionRecordTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_flexibleSubscriptionRecordTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testFlexibleSubscriptionRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/subscriptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.flexibleSubscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleListTest.java.Mining_hashrateResaleListTest", "name": "Mining_hashrateResaleListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleListTest.java", "superclasses": "", "methods": ["[void]testHashrateResaleListSuccess()", "[void]testHashrateResaleListWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleListTest.java.Mining_hashrateResaleListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_hashrateResaleListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Mining mining;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.mining = new Mining(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testHashrateResaleListSuccess() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/details/list?pageIndex=1&pageSize=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"pageIndex\", 1);\n        parameters.put(\"pageSize\", 10);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.hashrateResaleList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testHashrateResaleListWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/details/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.hashrateResaleList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Mining mining;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Mining", "name": "mining", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayHistoryTest.java.CryptoLoans_loanRepayHistoryTest", "name": "CryptoLoans_loanRepayHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayHistoryTest.java", "superclasses": "", "methods": ["[void]testLoanRepayHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayHistoryTest.java.CryptoLoans_loanRepayHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanRepayHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLoanRepayHistory() {\n        String path = \"/sapi/v1/loan/repay/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 100000001L);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_coinNameTest.java.Mining_coinNameTest", "name": "Mining_coinNameTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_coinNameTest.java", "superclasses": "", "methods": ["[void]testCoinName()", "[void]testCoinNameWithParameters()", "[void]testCoinNameException()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_coinNameTest.java.Mining_coinNameTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_coinNameTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Mining mining;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.mining = new Mining(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testCoinName() {\n        String path = \"/sapi/v1/mining/pub/coinList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.coinName(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCoinNameWithParameters() {\n        String path = \"/sapi/v1/mining/pub/coinList?recvWindow=5000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", 5000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.coinName(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCoinNameException() {\n        String path = \"/sapi/v1/mining/pub/coinList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, 500);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceServerException.class, () -> mining.coinName(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Mining mining;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Mining", "name": "mining", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_createIsolatedMarginListenKeyTest.java.UserData_createIsolatedMarginListenKeyTest", "name": "UserData_createIsolatedMarginListenKeyTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_createIsolatedMarginListenKeyTest.java", "superclasses": "", "methods": ["[void]testCreateIsolatedMarginListenKeyWithoutSymbol()", "[void]testCreateIsolatedMarginListenKeyWithSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/UserData_createIsolatedMarginListenKeyTest.java.UserData_createIsolatedMarginListenKeyTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UserData_createIsolatedMarginListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private UserData userData;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.userData = new UserData(baseUrl, MockData.API_KEY, false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testCreateIsolatedMarginListenKeyWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> userData.createIsolatedMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testCreateIsolatedMarginListenKeyWithSymbol() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = userData.createIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private UserData userData;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "UserData", "name": "userData", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanLtvAdjustHistoryTest.java.CryptoLoans_flexibleLoanLtvAdjustHistoryTest", "name": "CryptoLoans_flexibleLoanLtvAdjustHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanLtvAdjustHistoryTest.java", "superclasses": "", "methods": ["[void]testFlexibleLoanLtvAdjustHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanLtvAdjustHistoryTest.java.CryptoLoans_flexibleLoanLtvAdjustHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_flexibleLoanLtvAdjustHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanLtvAdjustHistory() {\n        String path = \"/sapi/v1/loan/flexible/ltv/adjustment/history?loanCoin=BUSD&collateralCoin=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanLtvAdjustHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethWrapHistoryTest.java.Staking_ethStakingWbethWrapHistoryTest", "name": "Staking_ethStakingWbethWrapHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethWrapHistoryTest.java", "superclasses": "", "methods": ["[void]testEthStakingWbethWrapHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingWbethWrapHistoryTest.java.Staking_ethStakingWbethWrapHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingWbethWrapHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingWbethWrapHistory() {\n        String path = \"/sapi/v1/eth-staking/wbeth/history/wrapHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethWrapHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanOngoingOrdersTest.java.CryptoLoans_loanOngoingOrdersTest", "name": "CryptoLoans_loanOngoingOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanOngoingOrdersTest.java", "superclasses": "", "methods": ["[void]testLoanOngoingOrders()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanOngoingOrdersTest.java.CryptoLoans_loanOngoingOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanOngoingOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLoanOngoingOrders() {\n        String path = \"/sapi/v1/loan/ongoing/orders?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 100000001L);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedMarginDataTest.java.Margin_isolatedMarginDataTest", "name": "Margin_isolatedMarginDataTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedMarginDataTest.java", "superclasses": "", "methods": ["[void]testIsolatedMarginData()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedMarginDataTest.java.Margin_isolatedMarginDataTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_isolatedMarginDataTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testIsolatedMarginData() {\n        String path = \"/sapi/v1/margin/isolatedMarginData\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedMarginData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest", "name": "SimpleEarn_lockedSubscriptionPreviewTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "superclasses": "", "methods": ["[void]testLockedSubscriptionPreview()", "[void]testLockedSubscriptionPreviewWithoutRequiredParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_lockedSubscriptionPreviewTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLockedSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview?projectId=USDT001&amount=100\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n        parameters.put(\"amount\", 100);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.lockedSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLockedSubscriptionPreviewWithoutRequiredParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.lockedSubscriptionPreview(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedRewardsHistoryTest.java.SimpleEarn_lockedRewardsHistoryTest", "name": "SimpleEarn_lockedRewardsHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedRewardsHistoryTest.java", "superclasses": "", "methods": ["[void]testLockedRewardsHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedRewardsHistoryTest.java.SimpleEarn_lockedRewardsHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_lockedRewardsHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLockedRewardsHistory() {\n        String path = \"/sapi/v1/simple-earn/locked/history/rewardsRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.lockedRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test", "name": "SubAccount_futuresAccountV2Test", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "superclasses": "", "methods": ["[void]testFuturesAccountV2()", "[void]testFuturesAccountV2MissingEmail()", "[void]testFuturesAccountV2MissingFuturesType()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_futuresAccountV2Test {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesAccountV2() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/account?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testFuturesAccountV2MissingEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"futuresType\", 1);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountV2(parameters));\n    }\n\n    @Test\n    public void testFuturesAccountV2MissingFuturesType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountV2(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest", "name": "SubAccount_enableLeverageTokenTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "superclasses": "", "methods": ["[void]testEnableLeverageToken()", "[void]testEnableLeverageTokenMissingEmail()", "[void]testEnableLeverageTokenMissingEnableBlvt()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_enableLeverageTokenTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableLeverageToken() {\n        String path = String.format(\"/sapi/v1/sub-account/blvt/enable?email=%s&enableBlvt=true\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"enableBlvt\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableLeverageToken(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testEnableLeverageTokenMissingEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"enableBlvt\", true);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableLeverageToken(parameters));\n    }\n\n    @Test\n    public void testEnableLeverageTokenMissingEnableBlvt() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableLeverageToken(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_queryUniversalTransferTest.java.Wallet_queryUniversalTransferTest", "name": "Wallet_queryUniversalTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_queryUniversalTransferTest.java", "superclasses": "", "methods": ["[void]testQueryUniversalTransferSuccess()", "[void]testQueryUniversalTransferMissingType()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_queryUniversalTransferTest.java.Wallet_queryUniversalTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_queryUniversalTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Wallet wallet;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.wallet = new Wallet(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testQueryUniversalTransferSuccess() {\n        String path = \"/sapi/v1/asset/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_C2C\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.queryUniversalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testQueryUniversalTransferMissingType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            wallet.queryUniversalTransfer(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Wallet wallet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Wallet", "name": "wallet", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getSubOrdersTest.java.SpotAlgo_getSubOrdersTest", "name": "SpotAlgo_getSubOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getSubOrdersTest.java", "superclasses": "", "methods": ["[void]testGetSubOrders()", "[void]testGetSubOrdersWithoutAlgoId()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getSubOrdersTest.java.SpotAlgo_getSubOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotAlgo_getSubOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SpotClient client;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n    }\n\n    @Test\n    public void testGetSubOrders() {\n        String path = \"/sapi/v1/algo/spot/subOrders?algoId=123456\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", 123456L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = client.createSpotAlgo().getSubOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetSubOrdersWithoutAlgoId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().getSubOrders(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SpotClient client;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotClient", "name": "client", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_fundingWalletTest.java.Wallet_fundingWalletTest", "name": "Wallet_fundingWalletTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_fundingWalletTest.java", "superclasses": "", "methods": ["[void]testFundingWallet()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_fundingWalletTest.java.Wallet_fundingWalletTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_fundingWalletTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Wallet wallet;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.wallet = new Wallet(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testFundingWallet() {\n        String path = \"/sapi/v1/asset/get-funding-asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.fundingWallet(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Wallet wallet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Wallet", "name": "wallet", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_leverageBracketTest.java.Margin_leverageBracketTest", "name": "Margin_leverageBracketTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_leverageBracketTest.java", "superclasses": "", "methods": ["[void]testLeverageBracket()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_leverageBracketTest.java.Margin_leverageBracketTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_leverageBracketTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, null, null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testLeverageBracket() {\n        String path = \"/sapi/v1/margin/leverageBracket\";\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.leverageBracket();\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_capitalFlowTest.java.Margin_capitalFlowTest", "name": "Margin_capitalFlowTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_capitalFlowTest.java", "superclasses": "", "methods": ["[void]testCapitalFlow()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_capitalFlowTest.java.Margin_capitalFlowTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_capitalFlowTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testCapitalFlow() {\n        String path = \"/sapi/v1/margin/capital-flow?startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 12345678);\n        parameters.put(\"endTime\", 12345679);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.capitalFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_coinInfoTest.java.Wallet_coinInfoTest", "name": "Wallet_coinInfoTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_coinInfoTest.java", "superclasses": "", "methods": ["[void]testCoinInfo()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_coinInfoTest.java.Wallet_coinInfoTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_coinInfoTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCoinInfo() {\n        String path = \"/sapi/v1/capital/config/getall\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().coinInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_interestRateHistoryTest.java.Margin_interestRateHistoryTest", "name": "Margin_interestRateHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_interestRateHistoryTest.java", "superclasses": "", "methods": ["[void]testInterestRateHistory()", "[void]testInterestRateHistoryMissingAsset()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_interestRateHistoryTest.java.Margin_interestRateHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_interestRateHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testInterestRateHistory() {\n        String path = \"/sapi/v1/margin/interestRateHistory?asset=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().interestRateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testInterestRateHistoryMissingAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        // Missing \"asset\" parameter\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createMargin().interestRateHistory(parameters);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeLockedProductTest.java.SimpleEarn_subscribeLockedProductTest", "name": "SimpleEarn_subscribeLockedProductTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeLockedProductTest.java", "superclasses": "", "methods": ["[void]testSubscribeLockedProductSuccess()", "[void]testSubscribeLockedProductMissingProjectId()", "[void]testSubscribeLockedProductMissingAmount()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeLockedProductTest.java.SimpleEarn_subscribeLockedProductTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_subscribeLockedProductTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testSubscribeLockedProductSuccess() {\n        String path = \"/sapi/v1/simple-earn/locked/subscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"project123\");\n        parameters.put(\"amount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.subscribeLockedProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testSubscribeLockedProductMissingProjectId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 100.0);\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.subscribeLockedProduct(parameters));\n    }\n\n    @Test\n    public void testSubscribeLockedProductMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"project123\");\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.subscribeLockedProduct(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscriptionRecordTest.java.Blvt_subscriptionRecordTest", "name": "Blvt_subscriptionRecordTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Blvt_subscriptionRecordTest.java", "superclasses": "", "methods": ["[void]testSubscriptionRecordSuccess()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Blvt_subscriptionRecordTest.java.Blvt_subscriptionRecordTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Blvt_subscriptionRecordTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Blvt blvt;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.blvt = new Blvt(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testSubscriptionRecordSuccess() {\n        String path = \"/sapi/v1/blvt/subscribe/record?tokenName=BTCUP\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCUP\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = blvt.subscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Blvt blvt;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Blvt", "name": "blvt", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_apiPermissionTest.java.Wallet_apiPermissionTest", "name": "Wallet_apiPermissionTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_apiPermissionTest.java", "superclasses": "", "methods": ["[void]testApiPermission()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_apiPermissionTest.java.Wallet_apiPermissionTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_apiPermissionTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testApiPermission() {\n        String path = \"/sapi/v1/account/apiRestrictions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().apiPermission(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresOrderBookHistoryTest.java.Futures_futuresOrderBookHistoryTest", "name": "Futures_futuresOrderBookHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresOrderBookHistoryTest.java", "superclasses": "", "methods": ["[void]testFuturesOrderBookHistory()", "[void]testFuturesOrderBookHistoryMissingParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Futures_futuresOrderBookHistoryTest.java.Futures_futuresOrderBookHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Futures_futuresOrderBookHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Futures futures;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.futures = new Futures(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testFuturesOrderBookHistory() {\n        String path = \"/sapi/v1/futures/histDataLink?symbol=BTCUSDT&dataType=T_DEPTH&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"dataType\", \"T_DEPTH\");\n        parameters.put(\"startTime\", 12345678L);\n        parameters.put(\"endTime\", 12345679L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = futures.futuresOrderBookHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testFuturesOrderBookHistoryMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"dataType\", \"T_DEPTH\");\n        parameters.put(\"startTime\", 12345678L);\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            futures.futuresOrderBookHistory(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Futures futures;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Futures", "name": "futures", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductPositionTest.java.SimpleEarn_lockedProductPositionTest", "name": "SimpleEarn_lockedProductPositionTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductPositionTest.java", "superclasses": "", "methods": ["[void]testLockedProductPosition()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductPositionTest.java.SimpleEarn_lockedProductPositionTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_lockedProductPositionTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testLockedProductPosition() {\n        String path = \"/sapi/v1/simple-earn/locked/position\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.lockedProductPosition(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOrdersTest.java.Trade_getOrdersTest", "name": "Trade_getOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOrdersTest.java", "superclasses": "", "methods": ["[void]testGetOrdersSuccess()", "[void]testGetOrdersWithoutSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_getOrdersTest.java.Trade_getOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_getOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testGetOrdersSuccess() {\n        String path = \"/api/v3/allOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.getOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetOrdersWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> trade.getOrders(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductListTest.java.SimpleEarn_lockedProductListTest", "name": "SimpleEarn_lockedProductListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductListTest.java", "superclasses": "", "methods": ["[void]testLockedProductList()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedProductListTest.java.SimpleEarn_lockedProductListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_lockedProductListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testLockedProductList() {\n        String path = \"/sapi/v1/simple-earn/locked/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.lockedProductList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest", "name": "CryptoLoans_loanAdjustLTVTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java", "superclasses": "", "methods": ["[void]testLoanAdjustLTVWithoutParameters()", "[void]testLoanAdjustLTVWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanAdjustLTVTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLoanAdjustLTVWithoutParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.loanAdjustLTV(parameters));\n    }\n\n    @Test\n    public void testLoanAdjustLTVWithValidParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n        parameters.put(\"amount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanAdjustLTV(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_depthTest.java.Market_depthTest", "name": "Market_depthTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_depthTest.java", "superclasses": "", "methods": ["[void]testDepthWithoutSymbol()", "[void]testDepthWithSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_depthTest.java.Market_depthTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_depthTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDepthWithoutSymbol() {\n        String path = \"/api/v3/depth\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().depth(parameters));\n    }\n\n    @Test\n    public void testDepthWithSymbol() {\n        String path = \"/api/v3/depth?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().depth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/NFT_withdrawHistoryTest.java.NFT_withdrawHistoryTest", "name": "NFT_withdrawHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/NFT_withdrawHistoryTest.java", "superclasses": "", "methods": ["[void]testWithdrawHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/NFT_withdrawHistoryTest.java.NFT_withdrawHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class NFT_withdrawHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private NFT nft;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.nft = new NFT(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testWithdrawHistory() {\n        String path = \"/sapi/v1/nft/history/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = nft.withdrawHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private NFT nft;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "NFT", "name": "nft", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedAccountTest.java.Margin_isolatedAccountTest", "name": "Margin_isolatedAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedAccountTest.java", "superclasses": "", "methods": ["[void]testIsolatedAccount()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_isolatedAccountTest.java.Margin_isolatedAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_isolatedAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testIsolatedAccount() {\n        String path = \"/sapi/v1/margin/isolated/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.isolatedAccount(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getHistoricalOrdersTest.java.SpotAlgo_getHistoricalOrdersTest", "name": "SpotAlgo_getHistoricalOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getHistoricalOrdersTest.java", "superclasses": "", "methods": ["[void]testGetHistoricalOrders()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getHistoricalOrdersTest.java.SpotAlgo_getHistoricalOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotAlgo_getHistoricalOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetHistoricalOrders() {\n        String path = \"/sapi/v1/algo/spot/historicalOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getHistoricalOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDetailsTest.java.SubAccount_managedSubDetailsTest", "name": "SubAccount_managedSubDetailsTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDetailsTest.java", "superclasses": "", "methods": ["[void]testManagedSubDetailsWithoutParameters()", "[void]testManagedSubDetailsWithParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDetailsTest.java.SubAccount_managedSubDetailsTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_managedSubDetailsTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testManagedSubDetailsWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubDetails(parameters));\n    }\n\n    @Test\n    public void testManagedSubDetailsWithParameters() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/asset?email=%s\", UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubDetails(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeMarginListenKeyTest.java.UserData_closeMarginListenKeyTest", "name": "UserData_closeMarginListenKeyTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_closeMarginListenKeyTest.java", "superclasses": "", "methods": ["[void]testCloseMarginListenKeyWithoutParameters()", "[void]testCloseMarginListenKeyWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/UserData_closeMarginListenKeyTest.java.UserData_closeMarginListenKeyTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UserData_closeMarginListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloseMarginListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testCloseMarginListenKeyWithValidParameters() {\n        String path = \"/sapi/v1/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"validListenKey\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_redeemCodeTest.java.GiftCard_redeemCodeTest", "name": "GiftCard_redeemCodeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_redeemCodeTest.java", "superclasses": "", "methods": ["[void]testRedeemCodeSuccess()", "[void]testRedeemCodeWithoutCode()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/GiftCard_redeemCodeTest.java.GiftCard_redeemCodeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class GiftCard_redeemCodeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private GiftCard giftCard;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.giftCard = new GiftCard(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testRedeemCodeSuccess() {\n        String path = \"/sapi/v1/giftcard/redeemCode?code=123456\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"code\", \"123456\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = giftCard.redeemCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testRedeemCodeWithoutCode() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> giftCard.redeemCode(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private GiftCard giftCard;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "GiftCard", "name": "giftCard", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_preventedMatchesTest.java.Trade_preventedMatchesTest", "name": "Trade_preventedMatchesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_preventedMatchesTest.java", "superclasses": "", "methods": ["[void]testPreventedMatchesWithoutSymbol()", "[void]testPreventedMatchesWithSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_preventedMatchesTest.java.Trade_preventedMatchesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_preventedMatchesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.trade = new Trade(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testPreventedMatchesWithoutSymbol() {\n        String path = \"/api/v3/myPreventedMatches\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> trade.preventedMatches(parameters));\n    }\n\n    @Test\n    public void testPreventedMatchesWithSymbol() {\n        String path = \"/api/v3/myPreventedMatches\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.preventedMatches(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_collateralRecordTest.java.SimpleEarn_collateralRecordTest", "name": "SimpleEarn_collateralRecordTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_collateralRecordTest.java", "superclasses": "", "methods": ["[void]testCollateralRecord()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_collateralRecordTest.java.SimpleEarn_collateralRecordTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_collateralRecordTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), new ProxyAuth(null, null));\n        this.simpleEarn = new SimpleEarn(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testCollateralRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/collateralRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.collateralRecord(parameters);\n        String expectedResponse = \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_adjustCrossMarginMaxLeverageTest.java.Margin_adjustCrossMarginMaxLeverageTest", "name": "Margin_adjustCrossMarginMaxLeverageTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_adjustCrossMarginMaxLeverageTest.java", "superclasses": "", "methods": ["[void]testAdjustCrossMarginMaxLeverageSuccess()", "[void]testAdjustCrossMarginMaxLeverageMissingParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_adjustCrossMarginMaxLeverageTest.java.Margin_adjustCrossMarginMaxLeverageTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_adjustCrossMarginMaxLeverageTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testAdjustCrossMarginMaxLeverageSuccess() {\n        String path = \"/sapi/v1/margin/max-leverage?maxLeverage=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"maxLeverage\", 10);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.adjustCrossMarginMaxLeverage(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAdjustCrossMarginMaxLeverageMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            margin.adjustCrossMarginMaxLeverage(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginAccountTest.java.SubAccount_marginAccountTest", "name": "SubAccount_marginAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginAccountTest.java", "superclasses": "", "methods": ["[void]testMarginAccountWithoutEmail()", "[void]testMarginAccountWithValidEmail()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginAccountTest.java.SubAccount_marginAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_marginAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testMarginAccountWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/margin/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.marginAccount(parameters));\n    }\n\n    @Test\n    public void testMarginAccountWithValidEmail() {\n        String path = \"/sapi/v1/sub-account/margin/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String response = subAccount.marginAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, response);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest", "name": "CryptoLoans_flexibleLoanBorrowTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "superclasses": "", "methods": ["[void]testFlexibleLoanBorrowWithoutParameters()", "[void]testFlexibleLoanBorrowWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_flexibleLoanBorrowTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testFlexibleLoanBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.flexibleLoanBorrow(parameters));\n    }\n\n    @Test\n    public void testFlexibleLoanBorrowWithValidParameters() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String response = cryptoLoans.flexibleLoanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, response);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedPersonalLeftQuotaTest.java.SimpleEarn_lockedPersonalLeftQuotaTest", "name": "SimpleEarn_lockedPersonalLeftQuotaTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedPersonalLeftQuotaTest.java", "superclasses": "", "methods": ["[void]testLockedPersonalLeftQuotaSuccess()", "[void]testLockedPersonalLeftQuotaWithoutProjectId()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedPersonalLeftQuotaTest.java.SimpleEarn_lockedPersonalLeftQuotaTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_lockedPersonalLeftQuotaTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testLockedPersonalLeftQuotaSuccess() {\n        String path = \"/sapi/v1/simple-earn/locked/personalLeftQuota?projectId=project123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"project123\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.lockedPersonalLeftQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLockedPersonalLeftQuotaWithoutProjectId() {\n        String path = \"/sapi/v1/simple-earn/locked/personalLeftQuota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> simpleEarn.lockedPersonalLeftQuota(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendMarginListenKeyTest.java.UserData_extendMarginListenKeyTest", "name": "UserData_extendMarginListenKeyTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendMarginListenKeyTest.java", "superclasses": "", "methods": ["[void]testExtendMarginListenKey()", "[void]testExtendMarginListenKeyWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/UserData_extendMarginListenKeyTest.java.UserData_extendMarginListenKeyTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UserData_extendMarginListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private UserData userData;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.userData = new UserData(baseUrl, MockData.API_KEY, false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testExtendMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = userData.extendMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExtendMarginListenKeyWithoutParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> userData.extendMarginListenKey(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private UserData userData;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "UserData", "name": "userData", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_getOcoOpenOrdersTest.java.Margin_getOcoOpenOrdersTest", "name": "Margin_getOcoOpenOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_getOcoOpenOrdersTest.java", "superclasses": "", "methods": ["[void]testGetOcoOpenOrders()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_getOcoOpenOrdersTest.java.Margin_getOcoOpenOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_getOcoOpenOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testGetOcoOpenOrders() {\n        String path = \"/sapi/v1/margin/openOrderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.getOcoOpenOrders(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetListTest.java.AutoInvest_targetAssetListTest", "name": "AutoInvest_targetAssetListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetListTest.java", "superclasses": "", "methods": ["[void]testTargetAssetList()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetListTest.java.AutoInvest_targetAssetListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AutoInvest_targetAssetListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTargetAssetList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayTest.java.CryptoLoans_loanRepayTest", "name": "CryptoLoans_loanRepayTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayTest.java", "superclasses": "", "methods": ["[void]testLoanRepayWithoutParameters()", "[void]testLoanRepayWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayTest.java.CryptoLoans_loanRepayTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_loanRepayTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.loanRepay(parameters));\n    }\n\n    @Test\n    public void testLoanRepayWithValidParameters() {\n        String path = \"/sapi/v1/loan/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456789L);\n        parameters.put(\"amount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.loanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest", "name": "Wallet_cloudMiningHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "superclasses": "", "methods": ["[void]testCloudMiningHistory()", "[void]testCloudMiningHistoryMissingStartTime()", "[void]testCloudMiningHistoryMissingEndTime()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_cloudMiningHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloudMiningHistory() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 1607639000000L);\n        parameters.put(\"endTime\", 1607643000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().cloudMiningHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCloudMiningHistoryMissingStartTime() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"endTime\", 1607643000000L);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().cloudMiningHistory(parameters));\n    }\n\n    @Test\n    public void testCloudMiningHistoryMissingEndTime() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 1607639000000L);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().cloudMiningHistory(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_ongoingOrdersTest.java.VIPLoans_ongoingOrdersTest", "name": "VIPLoans_ongoingOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_ongoingOrdersTest.java", "superclasses": "", "methods": ["[void]testOngoingOrders()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_ongoingOrdersTest.java.VIPLoans_ongoingOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_ongoingOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testOngoingOrders() {\n        String path = \"/sapi/v1/loan/vip/ongoing/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n        parameters.put(\"collateralAccountId\", 789012L);\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"current\", 1L);\n        parameters.put(\"limit\", 10L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.ongoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRedeemHistoryTest.java.Staking_ethStakingRedeemHistoryTest", "name": "Staking_ethStakingRedeemHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRedeemHistoryTest.java", "superclasses": "", "methods": ["[void]testEthStakingRedeemHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRedeemHistoryTest.java.Staking_ethStakingRedeemHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingRedeemHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingRedeemHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/redemptionHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRedeemHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_interestHistoryTest.java.PortfolioMargin_interestHistoryTest", "name": "PortfolioMargin_interestHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_interestHistoryTest.java", "superclasses": "", "methods": ["[void]testInterestHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/PortfolioMargin_interestHistoryTest.java.PortfolioMargin_interestHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class PortfolioMargin_interestHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private PortfolioMargin portfolioMargin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.portfolioMargin = new PortfolioMargin(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testInterestHistory() {\n        String path = \"/sapi/v1/portfolio/interest-history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = portfolioMargin.interestHistory(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private PortfolioMargin portfolioMargin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "PortfolioMargin", "name": "portfolioMargin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferHistoryTest.java.Futures_futuresTransferHistoryTest", "name": "Futures_futuresTransferHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferHistoryTest.java", "superclasses": "", "methods": ["[void]testFuturesTransferHistory()", "[void]testFuturesTransferHistoryMissingAsset()", "[void]testFuturesTransferHistoryMissingStartTime()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferHistoryTest.java.Futures_futuresTransferHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Futures_futuresTransferHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Futures futures;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.futures = new Futures(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testFuturesTransferHistory() {\n        String path = String.format(\"/sapi/v1/futures/transfer?asset=%s&startTime=%s\", \"USDT\", 1620000000000L);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"startTime\", 1620000000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = futures.futuresTransferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testFuturesTransferHistoryMissingAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 1620000000000L);\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            futures.futuresTransferHistory(parameters);\n        });\n    }\n\n    @Test\n    public void testFuturesTransferHistoryMissingStartTime() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            futures.futuresTransferHistory(parameters);\n        });\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Futures futures;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Futures", "name": "futures", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_testSorOrderTest.java.Trade_testSorOrderTest", "name": "Trade_testSorOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testSorOrderTest.java", "superclasses": "", "methods": ["[void]testSorOrder()", "[void]testSorOrderWithoutParameters()", "[void]testTestSorOrder()", "[void]testTestSorOrderWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_testSorOrderTest.java.Trade_testSorOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_testSorOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSorOrder() {\n        String path = \"/api/v3/sor/order?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", 0.01);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().sorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testSorOrderWithoutParameters() {\n        String path = \"/api/v3/sor/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().sorOrder(parameters));\n    }\n\n    @Test\n    public void testTestSorOrder() {\n        String path = \"/api/v3/sor/order/test?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", 0.01);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().testSorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTestSorOrderWithoutParameters() {\n        String path = \"/api/v3/sor/order/test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().testSorOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java.GiftCard_createDualTokensCodeTest", "name": "GiftCard_createDualTokensCodeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java", "superclasses": "", "methods": ["[void]testCreateDualTokensCodeSuccess()", "[void]testCreateDualTokensCodeMissingBaseToken()", "[void]testCreateDualTokensCodeMissingFaceToken()", "[void]testCreateDualTokensCodeMissingBaseTokenAmount()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java.GiftCard_createDualTokensCodeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class GiftCard_createDualTokensCodeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private GiftCard giftCard;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.giftCard = new GiftCard(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testCreateDualTokensCodeSuccess() {\n        String path = \"/sapi/v1/giftcard/buyCode?baseToken=BUSD&faceToken=BNB&baseTokenAmount=1.002\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"faceToken\", \"BNB\");\n        parameters.put(\"baseTokenAmount\", 1.002);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = giftCard.createDualTokensCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCreateDualTokensCodeMissingBaseToken() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"faceToken\", \"BNB\");\n        parameters.put(\"baseTokenAmount\", 1.002);\n\n        assertThrows(BinanceConnectorException.class, () -> giftCard.createDualTokensCode(parameters));\n    }\n\n    @Test\n    public void testCreateDualTokensCodeMissingFaceToken() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"baseTokenAmount\", 1.002);\n\n        assertThrows(BinanceConnectorException.class, () -> giftCard.createDualTokensCode(parameters));\n    }\n\n    @Test\n    public void testCreateDualTokensCodeMissingBaseTokenAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"faceToken\", \"BNB\");\n\n        assertThrows(BinanceConnectorException.class, () -> giftCard.createDualTokensCode(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private GiftCard giftCard;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "GiftCard", "name": "giftCard", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_getOrderTest.java.Margin_getOrderTest", "name": "Margin_getOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_getOrderTest.java", "superclasses": "", "methods": ["[void]testGetOrderWithoutSymbol()", "[void]testGetOrderWithSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_getOrderTest.java.Margin_getOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_getOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetOrderWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/sapi/v1/margin/order\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().getOrder(parameters));\n    }\n\n    @Test\n    public void testGetOrderWithSymbol() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_accountStatusTest.java.Wallet_accountStatusTest", "name": "Wallet_accountStatusTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_accountStatusTest.java", "superclasses": "", "methods": ["[void]testAccountStatus()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_accountStatusTest.java.Wallet_accountStatusTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_accountStatusTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccountStatus() {\n        String path = \"/sapi/v1/account/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().accountStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowInterestRateTest.java.VIPLoans_borrowInterestRateTest", "name": "VIPLoans_borrowInterestRateTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowInterestRateTest.java", "superclasses": "", "methods": ["[void]testBorrowInterestRate()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowInterestRateTest.java.VIPLoans_borrowInterestRateTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_borrowInterestRateTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testBorrowInterestRate() {\n        String path = \"/sapi/v1/loan/vip/request/interestRate?loanCoin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.borrowInterestRate(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_customizeMarginCallTest.java.CryptoLoans_customizeMarginCallTest", "name": "CryptoLoans_customizeMarginCallTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_customizeMarginCallTest.java", "superclasses": "", "methods": ["[void]testCustomizeMarginCallWithValidParameters()", "[void]testCustomizeMarginCallWithoutRequiredParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_customizeMarginCallTest.java.CryptoLoans_customizeMarginCallTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_customizeMarginCallTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private CryptoLoans cryptoLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.cryptoLoans = new CryptoLoans(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testCustomizeMarginCallWithValidParameters() {\n        String path = \"/sapi/v1/loan/customize/margin_call\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"marginCall\", 1.5);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = cryptoLoans.customizeMarginCall(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCustomizeMarginCallWithoutRequiredParameter() {\n        String path = \"/sapi/v1/loan/customize/margin_call\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> cryptoLoans.customizeMarginCall(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private CryptoLoans cryptoLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "CryptoLoans", "name": "cryptoLoans", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountSummaryTest.java.SubAccount_futuresAccountSummaryTest", "name": "SubAccount_futuresAccountSummaryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountSummaryTest.java", "superclasses": "", "methods": ["[void]testFuturesAccountSummary()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountSummaryTest.java.SubAccount_futuresAccountSummaryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_futuresAccountSummaryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesAccountSummary() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/accountSummary?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendIsolatedMarginListenKeyTest.java.UserData_extendIsolatedMarginListenKeyTest", "name": "UserData_extendIsolatedMarginListenKeyTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/UserData_extendIsolatedMarginListenKeyTest.java", "superclasses": "", "methods": ["[void]testExtendIsolatedMarginListenKey()", "[void]testExtendIsolatedMarginListenKeyWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/UserData_extendIsolatedMarginListenKeyTest.java.UserData_extendIsolatedMarginListenKeyTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class UserData_extendIsolatedMarginListenKeyTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private UserData userData;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.userData = new UserData(baseUrl, MockData.API_KEY, false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testExtendIsolatedMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = userData.extendIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExtendIsolatedMarginListenKeyWithoutParameters() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> userData.extendIsolatedMarginListenKey(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private UserData userData;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "UserData", "name": "userData", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_tradeCoeffTest.java.Margin_tradeCoeffTest", "name": "Margin_tradeCoeffTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_tradeCoeffTest.java", "superclasses": "", "methods": ["[void]testTradeCoeff()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_tradeCoeffTest.java.Margin_tradeCoeffTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_tradeCoeffTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Margin margin;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, null, null);\n        this.margin = new Margin(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testTradeCoeff() {\n        String path = \"/sapi/v1/margin/tradeCoeff\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.tradeCoeff(parameters);\n        assertEquals(\"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\", result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Margin margin;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Margin", "name": "margin", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest", "name": "Mining_hashrateResaleRequestTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java", "superclasses": "", "methods": ["[void]testHashrateResaleRequestSuccess()", "[void]testHashrateResaleRequestMissingParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_hashrateResaleRequestTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Mining mining;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.mining = new Mining(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testHashrateResaleRequestSuccess() {\n        String path = \"/sapi/v1/mining/hash-transfer/config?userName=test&algo=sha256&endDate=1672531200000&startDate=1672444800000&toPoolUser=test2&hashRate=500000000000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"test\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", 1672531200000L);\n        parameters.put(\"startDate\", 1672444800000L);\n        parameters.put(\"toPoolUser\", \"test2\");\n        parameters.put(\"hashRate\", 500000000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.hashrateResaleRequest(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testHashrateResaleRequestMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"test\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", 1672531200000L);\n        parameters.put(\"startDate\", 1672444800000L);\n        parameters.put(\"toPoolUser\", \"test2\");\n        // Missing hashRate parameter\n\n        assertThrows(BinanceConnectorException.class, () -> mining.hashrateResaleRequest(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Mining mining;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Mining", "name": "mining", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_applyOneClickArrivalDepositTest.java.Wallet_applyOneClickArrivalDepositTest", "name": "Wallet_applyOneClickArrivalDepositTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_applyOneClickArrivalDepositTest.java", "superclasses": "", "methods": ["[void]testApplyOneClickArrivalDeposit()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_applyOneClickArrivalDepositTest.java.Wallet_applyOneClickArrivalDepositTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_applyOneClickArrivalDepositTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testApplyOneClickArrivalDeposit() {\n        String path = \"/sapi/v1/capital/deposit/credit-apply\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().applyOneClickArrivalDeposit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_detailMinerListTest.java.Mining_detailMinerListTest", "name": "Mining_detailMinerListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_detailMinerListTest.java", "superclasses": "", "methods": ["[void]testDetailMinerListSuccess()", "[void]testDetailMinerListMissingAlgo()", "[void]testDetailMinerListMissingUserName()", "[void]testDetailMinerListMissingWorkerName()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_detailMinerListTest.java.Mining_detailMinerListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_detailMinerListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Mining mining;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.mining = new Mining(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testDetailMinerListSuccess() {\n        String path = \"/sapi/v1/mining/worker/detail\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"testUser\");\n        parameters.put(\"workerName\", \"testWorker\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.detailMinerList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testDetailMinerListMissingAlgo() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"testUser\");\n        parameters.put(\"workerName\", \"testWorker\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.detailMinerList(parameters));\n    }\n\n    @Test\n    public void testDetailMinerListMissingUserName() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"workerName\", \"testWorker\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.detailMinerList(parameters));\n    }\n\n    @Test\n    public void testDetailMinerListMissingWorkerName() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"testUser\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.detailMinerList(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Mining mining;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Mining", "name": "mining", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_timeTest.java.Market_timeTest", "name": "Market_timeTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_timeTest.java", "superclasses": "", "methods": ["[void]testTime()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_timeTest.java.Market_timeTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_timeTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Market market;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.market = new Market(baseUrl, \"apiKey\", true, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testTime() {\n        String path = \"/api/v3/time\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = market.time();\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Market market;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Market", "name": "market", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOrdersTest.java.Trade_getOpenOrdersTest", "name": "Trade_getOpenOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOrdersTest.java", "superclasses": "", "methods": ["[void]testGetOpenOrders()", "[void]testGetOpenOrdersWithoutParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_getOpenOrdersTest.java.Trade_getOpenOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_getOpenOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testGetOpenOrders() {\n        String path = \"/api/v3/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetOpenOrdersWithoutParameters() {\n        String path = \"/api/v3/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_accountEarningTest.java.Mining_accountEarningTest", "name": "Mining_accountEarningTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_accountEarningTest.java", "superclasses": "", "methods": ["[void]testAccountEarningWithValidParameters()", "[void]testAccountEarningWithoutAlgoParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Mining_accountEarningTest.java.Mining_accountEarningTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Mining_accountEarningTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccountEarningWithValidParameters() {\n        String path = \"/sapi/v1/mining/payment/uid?algo=sha256\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Mining mining = new Mining(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n        String result = mining.accountEarning(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAccountEarningWithoutAlgoParameter() {\n        String path = \"/sapi/v1/mining/payment/uid\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Mining mining = new Mining(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n        assertThrows(BinanceConnectorException.class, () -> mining.accountEarning(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_oneTimeTransactionStatusTest.java.AutoInvest_oneTimeTransactionStatusTest", "name": "AutoInvest_oneTimeTransactionStatusTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_oneTimeTransactionStatusTest.java", "superclasses": "", "methods": ["[void]testOneTimeTransactionStatus()", "[void]testOneTimeTransactionStatusWithoutTransactionId()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/AutoInvest_oneTimeTransactionStatusTest.java.AutoInvest_oneTimeTransactionStatusTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AutoInvest_oneTimeTransactionStatusTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOneTimeTransactionStatus() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionId\", 123456L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().oneTimeTransactionStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testOneTimeTransactionStatusWithoutTransactionId() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().oneTimeTransactionStatus(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_availableInventoryTest.java.Margin_availableInventoryTest", "name": "Margin_availableInventoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_availableInventoryTest.java", "superclasses": "", "methods": ["[void]testAvailableInventory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_availableInventoryTest.java.Margin_availableInventoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_availableInventoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAvailableInventory() {\n        String path = \"/sapi/v1/margin/available-inventory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"asset\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().availableInventory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductListTest.java.SimpleEarn_flexibleProductListTest", "name": "SimpleEarn_flexibleProductListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductListTest.java", "superclasses": "", "methods": ["[void]testFlexibleProductList()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleProductListTest.java.SimpleEarn_flexibleProductListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SimpleEarn_flexibleProductListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SimpleEarn simpleEarn;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.simpleEarn = new SimpleEarn(baseUrl, \"apiKey\", \"secretKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testFlexibleProductList() {\n        String path = \"/sapi/v1/simple-earn/flexible/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = simpleEarn.flexibleProductList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SimpleEarn simpleEarn;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SimpleEarn", "name": "simpleEarn", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java.SubAccount_marginTransferTest", "name": "SubAccount_marginTransferTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java", "superclasses": "", "methods": ["[void]testMarginTransferWithoutParameters()", "[void]testMarginTransferWithValidParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java.SubAccount_marginTransferTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_marginTransferTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SubAccount subAccount;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.subAccount = new SubAccount(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testMarginTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/margin/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> subAccount.marginTransfer(parameters));\n    }\n\n    @Test\n    public void testMarginTransferWithValidParameters() {\n        String path = \"/sapi/v1/sub-account/margin/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n        parameters.put(\"type\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String response = subAccount.marginTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, response);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SubAccount subAccount;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SubAccount", "name": "subAccount", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_crossMarginDataTest.java.Margin_crossMarginDataTest", "name": "Margin_crossMarginDataTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_crossMarginDataTest.java", "superclasses": "", "methods": ["[void]testCrossMarginData()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Margin_crossMarginDataTest.java.Margin_crossMarginDataTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Margin_crossMarginDataTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCrossMarginData() {\n        String path = \"/sapi/v1/margin/crossMarginData\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().crossMarginData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getOpenOrdersTest.java.SpotAlgo_getOpenOrdersTest", "name": "SpotAlgo_getOpenOrdersTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getOpenOrdersTest.java", "superclasses": "", "methods": ["[void]testGetOpenOrders()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SpotAlgo_getOpenOrdersTest.java.SpotAlgo_getOpenOrdersTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotAlgo_getOpenOrdersTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private SpotAlgo spotAlgo;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.spotAlgo = new SpotAlgo(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testGetOpenOrders() {\n        String path = \"/sapi/v1/algo/spot/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = spotAlgo.getOpenOrders(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private SpotAlgo spotAlgo;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "SpotAlgo", "name": "spotAlgo", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayHistoryTest.java.CryptoLoans_flexibleLoanRepayHistoryTest", "name": "CryptoLoans_flexibleLoanRepayHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayHistoryTest.java", "superclasses": "", "methods": ["[void]testFlexibleLoanRepayHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayHistoryTest.java.CryptoLoans_flexibleLoanRepayHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class CryptoLoans_flexibleLoanRepayHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanRepayHistory() {\n        String path = \"/sapi/v1/loan/flexible/repay/history?loanCoin=BUSD&collateralCoin=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_averagePriceTest.java.Market_averagePriceTest", "name": "Market_averagePriceTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_averagePriceTest.java", "superclasses": "", "methods": ["[void]testAveragePriceWithValidSymbol()", "[void]testAveragePriceWithoutSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_averagePriceTest.java.Market_averagePriceTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_averagePriceTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAveragePriceWithValidSymbol() {\n        String path = \"/api/v3/avgPrice?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().averagePrice(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAveragePriceWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/avgPrice\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().averagePrice(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_myTradesTest.java.Trade_myTradesTest", "name": "Trade_myTradesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_myTradesTest.java", "superclasses": "", "methods": ["[void]testMyTradesSuccess()", "[void]testMyTradesWithoutSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_myTradesTest.java.Trade_myTradesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_myTradesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n    }\n\n    @Test\n    public void testMyTradesSuccess() {\n        String path = \"/api/v3/myTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.myTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testMyTradesWithoutSymbol() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        assertThrows(BinanceConnectorException.class, () -> trade.myTrades(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java.Trade_ocoOrderTest", "name": "Trade_ocoOrderTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java", "superclasses": "", "methods": ["[void]testOcoOrderSuccess()", "[void]testOcoOrderMissingRequiredParameter()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Trade_ocoOrderTest.java.Trade_ocoOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Trade_ocoOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Trade trade;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.trade = new Trade(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testOcoOrderSuccess() {\n        String path = \"/api/v3/order/oco?symbol=BNBUSDT&side=BUY&quantity=1&price=500&stopPrice=450\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", 1);\n        parameters.put(\"price\", 500);\n        parameters.put(\"stopPrice\", 450);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.ocoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testOcoOrderMissingRequiredParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", 1);\n        parameters.put(\"price\", 500);\n\n        assertThrows(BinanceConnectorException.class, () -> trade.ocoOrder(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private Trade trade;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Trade", "name": "trade", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/NFT_depositHistoryTest.java.NFT_depositHistoryTest", "name": "NFT_depositHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/NFT_depositHistoryTest.java", "superclasses": "", "methods": ["[void]testDepositHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/NFT_depositHistoryTest.java.NFT_depositHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class NFT_depositHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private NFT nftClient;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.nftClient = new NFT(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), false, null);\n    }\n\n    @Test\n    public void testDepositHistory() {\n        String path = \"/sapi/v1/nft/history/deposit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = nftClient.depositHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private NFT nftClient;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "NFT", "name": "nftClient", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableMarginTest.java.SubAccount_enableMarginTest", "name": "SubAccount_enableMarginTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableMarginTest.java", "superclasses": "", "methods": ["[void]testEnableMarginWithoutEmail()", "[void]testEnableMarginWithEmail()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableMarginTest.java.SubAccount_enableMarginTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SubAccount_enableMarginTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableMarginWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/margin/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableMargin(parameters));\n    }\n\n    @Test\n    public void testEnableMarginWithEmail() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/enable?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableMargin(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest", "name": "AutoInvest_targetAssetRoiListTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java", "superclasses": "", "methods": ["[void]testTargetAssetRoiList()", "[void]testTargetAssetRoiListMissingParameters()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class AutoInvest_targetAssetRoiListTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTargetAssetRoiList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetRoiList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTargetAssetRoiListMissingParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().targetAssetRoiList(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_apiTradingStatusTest.java.Wallet_apiTradingStatusTest", "name": "Wallet_apiTradingStatusTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_apiTradingStatusTest.java", "superclasses": "", "methods": ["[void]testApiTradingStatus()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Wallet_apiTradingStatusTest.java.Wallet_apiTradingStatusTest.[void]setUp()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Wallet_apiTradingStatusTest {\n    private Wallet wallet;\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void setUp() {\n        mockWebServer = new MockWebServer();\n        baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        wallet = new Wallet(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, null);\n    }\n\n    @Test\n    public void testApiTradingStatus() {\n        String path = \"/sapi/v1/account/apiTradingStatus\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = wallet.apiTradingStatus(parameters);\n        String expectedResponse = \"{\\\"data\\\":\\\"{\\\\\\\"key_1\\\\\\\": \\\\\\\"value_1\\\\\\\", \\\\\\\"key_2\\\\\\\": \\\\\\\"value_2\\\\\\\"}\\\"}\";\n        assertEquals(expectedResponse, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private Wallet wallet;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Wallet", "name": "wallet", "syntax_pass": true}, {"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_aggTradesTest.java.Market_aggTradesTest", "name": "Market_aggTradesTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Market_aggTradesTest.java", "superclasses": "", "methods": ["[void]testAggTradesWithValidParameters()", "[void]testAggTradesWithoutSymbol()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Market_aggTradesTest.java.Market_aggTradesTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Market_aggTradesTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAggTradesWithValidParameters() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAggTradesWithoutSymbol() {\n        String path = \"/api/v3/aggTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().aggTrades(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRateHistoryTest.java.Staking_ethStakingRateHistoryTest", "name": "Staking_ethStakingRateHistoryTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRateHistoryTest.java", "superclasses": "", "methods": ["[void]testEthStakingRateHistory()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/Staking_ethStakingRateHistoryTest.java.Staking_ethStakingRateHistoryTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class Staking_ethStakingRateHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingRateHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/rateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAccountTest.java.VIPLoans_collateralAccountTest", "name": "VIPLoans_collateralAccountTest", "file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAccountTest.java", "superclasses": "", "methods": ["[void]testCollateralAccount()"], "method_uris": ["src/test/java/com/binance/connector/client/impl/spot/VIPLoans_collateralAccountTest.java.VIPLoans_collateralAccountTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class VIPLoans_collateralAccountTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private VIPLoans vipLoans;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        RequestHandler requestHandler = new RequestHandler(MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), null);\n        this.vipLoans = new VIPLoans(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, false, null);\n    }\n\n    @Test\n    public void testCollateralAccount() {\n        String path = \"/sapi/v1/loan/vip/collateral/account?orderId=123456\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.collateralAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private VIPLoans vipLoans;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "VIPLoans", "name": "vipLoans", "syntax_pass": true}]}, {"uris": "src/test/java/unit/TestJSONParser.java.TestJSONParser", "name": "TestJSONParser", "file_path": "src/test/java/unit/TestJSONParser.java", "superclasses": "", "methods": ["[void]testGetJSONStringValue()", "[void]testGetJSONIntValue()", "[void]testGetJSONStringValueThrowException()", "[void]testGetJSONIntValueThrowException()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestJSONParser {\n    private final String mockJson = \"{\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":2}\";\n    private final int value2 = 2;\n\n    @Test\n    public void testGetJSONStringValue() {\n        assertEquals(\"value1\", JSONParser.getJSONStringValue(mockJson, \"key1\"));\n    }\n\n    @Test\n    public void testGetJSONIntValue() {\n        assertEquals(value2, JSONParser.getJSONIntValue(mockJson, \"key2\"));\n    }\n\n    @Test\n    public void testGetJSONStringValueThrowException() {\n        assertThrows(JSONException.class, () -> JSONParser.getJSONStringValue(mockJson, \"InvalidKey\"));\n    }\n\n    @Test\n    public void testGetJSONIntValueThrowException() {\n        assertThrows(JSONException.class, () -> JSONParser.getJSONIntValue(mockJson, \"InvalidKey\"));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String mockJson = \"{\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":2}\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "mockJson = \"{\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":2}\"", "syntax_pass": true}, {"attribute_expression": "private final int value2 = 2;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "value2 = 2", "syntax_pass": true}]}, {"uris": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler", "name": "TestResponseHandler", "file_path": "src/test/java/unit/TestResponseHandler.java", "superclasses": "", "methods": ["[void]testHandleResponse()", "[void]testWith400JSONErrorMsg()", "[void]testWith400ErrorMsg()", "[void]testWith500ErrorMsg()"], "method_uris": ["src/test/java/unit/TestResponseHandler.java.TestResponseHandler.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestResponseHandler {\n    private MockWebServer mockWebServer;\n    private Request request;\n    private final String VALID_RESPONSE = \"VALID\";\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.request = new Request.Builder()\n                .url(mockWebServer.url(\"/\").toString())\n                .addHeader(\"Accept\", \"application/json\")\n                .build();\n    }\n\n    @Test\n    public void testHandleResponse() {\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_OK)\n                .setBody(VALID_RESPONSE));\n\n        String result = ResponseHandler.handleResponse(request, false, null);\n        assertEquals(VALID_RESPONSE, result);\n    }\n\n    @Test\n    public void testWith400JSONErrorMsg() {\n        String mockErrorMsg = \"{\\\"code\\\":-1000, \\\"msg\\\":\\\"error\\\"}\";\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_CLIENT_ERROR)\n                .setBody(mockErrorMsg));\n\n        BinanceClientException thrown = assertThrows(BinanceClientException.class, () -> ResponseHandler.handleResponse(request, false, null));\n        assertTrue(thrown.getMessage().contains(mockErrorMsg));\n    }\n\n    @Test\n    public void testWith400ErrorMsg() {\n        String mockErrorMsg = \"Error Message\";\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_CLIENT_ERROR)\n                .setBody(mockErrorMsg));\n\n        BinanceClientException thrown = assertThrows(BinanceClientException.class, () -> ResponseHandler.handleResponse(request, false, null));\n        assertTrue(thrown.getMessage().contains(mockErrorMsg));\n    }\n\n    @Test\n    public void testWith500ErrorMsg() {\n        String mockErrorMsg = \"Error Message\";\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_SERVER_ERROR)\n                .setBody(mockErrorMsg));\n\n        BinanceServerException thrown = assertThrows(BinanceServerException.class, () -> ResponseHandler.handleResponse(request, false, null));\n        assertTrue(thrown.getMessage().contains(mockErrorMsg));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private Request request;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Request", "name": "request", "syntax_pass": true}, {"attribute_expression": "private final String VALID_RESPONSE = \"VALID\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "VALID_RESPONSE = \"VALID\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "name": "TestUrlBuilder", "file_path": "src/test/java/unit/TestUrlBuilder.java", "superclasses": "", "methods": ["[void]testBuildFullUrl()", "[void]testBuildFullUrlWithoutParams()", "[void]testJoinQueryParameters()", "[void]testJoinLargeQueryParameters()", "[void]testJoinQueryParametersWithoutParams()", "[void]testJoinQueryParametersWithEmptyParams()", "[void]testJoinQueryParametersWithLocaleIT()", "[void]testBuildStreamUrl()", "[void]testBuildStreamUrlWitoutParams()", "[void]testBuildStreamUrlWithEmptyParams()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUrlBuilder {\n    private final String baseUrl = \"www.test.com\";\n    private final String urlPath = \"/url/path\";\n    private final double doubleValue = 0.0006;\n    private final double extensiveDecimalsDouble = 1.123456789101112;  \n    private final double highDouble = 10000.1;\n    private final int intValue = 2;\n    private final Map<String, Object> mockParameters = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", \"value1\");\n            put(\"key2\", intValue);\n            put(\"key3\", doubleValue);\n        }};\n    private final Map<String, Object> mockDoubleParameters = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", extensiveDecimalsDouble);\n            put(\"key2\", highDouble);\n\n        }};\n    private final ArrayList<String> mockStreams = new ArrayList<String>() {{\n            add(\"stream1\");\n            add(\"stream2\");\n            add(\"stream3\");\n        }};\n\n    @Test\n    public void testBuildFullUrl() {\n        String fullUrl = \"www.test.com/url/path?key1=value1&key2=2&key3=0.0006\";\n        assertEquals(fullUrl, UrlBuilder.buildFullUrl(baseUrl, urlPath, mockParameters));\n    }\n\n    @Test\n    public void testBuildFullUrlWithoutParams() {\n        assertEquals(baseUrl + urlPath, UrlBuilder.buildFullUrl(baseUrl, urlPath, null));\n    }\n\n    @Test\n    public void testJoinQueryParameters() {\n        String joinedQuery = \"key1=value1&key2=2&key3=0.0006\";\n        assertEquals(joinedQuery, UrlBuilder.joinQueryParameters(mockParameters));\n    }\n\n    @Test\n    public void testJoinLargeQueryParameters() {\n        mockParameters.put(\"key4\", extensiveDecimalsDouble);\n        mockParameters.put(\"key5\", highDouble);\n        String joinedQuery = \"key1=value1&key2=2&key3=0.0006&key4=1.123456789101112&key5=10000.1\";\n        assertEquals(joinedQuery, UrlBuilder.joinQueryParameters(mockParameters));\n    }\n\n    @Test\n    public void testJoinQueryParametersWithoutParams() {\n        assertEquals(\"\", UrlBuilder.joinQueryParameters(null));\n    }\n\n    @Test\n    public void testJoinQueryParametersWithEmptyParams() {\n        String joinedQuery = \"\"; \n        assertEquals(joinedQuery, UrlBuilder.joinQueryParameters(new LinkedHashMap<String, Object>()));\n    }\n\n    /**\n     * Tests joinQueryParameters method's behaviour when it's Locale.IT by checking if the Double value is not changed to \".\" to \",\".\n     * Also tests if there's no drop of 0s, addition of group separator \",\" and limitation on decimals number.\n     */\n    @Test\n    public void testJoinQueryParametersWithLocaleIT() {\n\n        Locale.setDefault(new Locale(\"it\", \"IT\"));\n\n        String joinedQuery = String.format(\"key1=%s&key2=%s\", extensiveDecimalsDouble, highDouble);\n        String buildQuery = UrlBuilder.joinQueryParameters(mockDoubleParameters);\n        assertEquals(joinedQuery, buildQuery);\n    }\n\n    @Test\n    public void testBuildStreamUrl() {\n        String streamUrl = \"www.test.com/stream?streams=stream1/stream2/stream3\";\n        assertEquals(streamUrl, UrlBuilder.buildStreamUrl(baseUrl, mockStreams));\n    }\n\n    @Test\n    public void testBuildStreamUrlWitoutParams() {\n        String streamUrl = \"www.test.com/stream\";\n        assertEquals(streamUrl, UrlBuilder.buildStreamUrl(baseUrl, null));\n    }\n\n    @Test\n    public void testBuildStreamUrlWithEmptyParams() {\n        String streamUrl = \"www.test.com/stream\";\n        assertEquals(streamUrl, UrlBuilder.buildStreamUrl(baseUrl, new ArrayList<String>()));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl = \"www.test.com\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl = \"www.test.com\"", "syntax_pass": true}, {"attribute_expression": "private final String urlPath = \"/url/path\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "urlPath = \"/url/path\"", "syntax_pass": true}, {"attribute_expression": "private final double doubleValue = 0.0006;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "doubleValue = 0.0006", "syntax_pass": true}, {"attribute_expression": "private final double extensiveDecimalsDouble = 1.123456789101112;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "extensiveDecimalsDouble = 1.123456789101112", "syntax_pass": true}, {"attribute_expression": "private final double highDouble = 10000.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "highDouble = 10000.1", "syntax_pass": true}, {"attribute_expression": "private final int intValue = 2;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "intValue = 2", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Object> mockParameters = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", \"value1\");\n            put(\"key2\", intValue);\n            put(\"key3\", doubleValue);\n        }};", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Object>", "name": "mockParameters = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", \"value1\");\n            put(\"key2\", intValue);\n            put(\"key3\", doubleValue);\n        }}", "syntax_pass": true}, {"attribute_expression": "private final Map<String, Object> mockDoubleParameters = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", extensiveDecimalsDouble);\n            put(\"key2\", highDouble);\n\n        }};", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<String, Object>", "name": "mockDoubleParameters = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", extensiveDecimalsDouble);\n            put(\"key2\", highDouble);\n\n        }}", "syntax_pass": true}, {"attribute_expression": "private final ArrayList<String> mockStreams = new ArrayList<String>() {{\n            add(\"stream1\");\n            add(\"stream2\");\n            add(\"stream3\");\n        }};", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ArrayList<String>", "name": "mockStreams = new ArrayList<String>() {{\n            add(\"stream1\");\n            add(\"stream2\");\n            add(\"stream3\");\n        }}", "syntax_pass": true}]}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "name": "TestParameterChecker", "file_path": "src/test/java/unit/TestParameterChecker.java", "superclasses": "", "methods": ["[void]testcheckParameter()", "[void]testcheckParameterNoKey()", "[void]testcheckParameterWrongType()", "[void]testcheckEmptyString()", "[void]testcheckNull()", "[void]testMoreThanOneAllowedParam()", "[void]testNoOneOfTheRequiredPrams()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestParameterChecker {\n\n    private final String mockObject = \"mockObject\";\n    private final String emptyString = \"\";\n\n    @Test\n    public void testcheckParameter() {\n        ParameterChecker.checkParameter(MockData.MOCK_PARAMETERS, \"key1\", String.class);\n        ParameterChecker.checkParameter(MockData.MOCK_PARAMETERS, \"key2\", Integer.class);\n    }\n\n    @Test\n    public void testcheckParameterNoKey() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkRequiredParameter(MockData.MOCK_PARAMETERS, \"InvalidKey\"));\n    }\n\n    @Test\n    public void testcheckParameterWrongType() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(mockObject, Integer.class, \"mockObject\"));\n    }\n\n    @Test\n    public void testcheckEmptyString() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(emptyString, String.class, \"mockObject\"));\n    }\n\n    @Test\n    public void testcheckNull() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(null, String.class, \"mockObject\"));\n    }\n\n    @Test\n    public void testMoreThanOneAllowedParam() {\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n        String[] permissions =  new String[]{\"SPOT\", \"MARGIN\"};\n\n        JSONObject params = new JSONObject();\n        params.put(\"symbols\", symbols);\n        params.put(\"permissions\", permissions);\n\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOnlyOneOfParameters(params, \"symbols\", \"permissions\"));\n    }\n\n    @Test\n    public void testNoOneOfTheRequiredPrams() {\n\n        // params without either one of required params (orderId or origClientOrderId)\n        JSONObject params = new JSONObject();\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOneOfParametersRequired(params, \"orderId\", \"origClientOrderId\"));\n        // no params\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOneOfParametersRequired(null, \"orderId\", \"origClientOrderId\"));\n\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String mockObject = \"mockObject\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "mockObject = \"mockObject\"", "syntax_pass": true}, {"attribute_expression": "private final String emptyString = \"\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "emptyString = \"\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "name": "TestRequestBuilder", "file_path": "src/test/java/unit/TestRequestBuilder.java", "superclasses": "", "methods": ["[void]testPublicPostMethod()", "[void]testPublicGetMethod()", "[void]testPublicPutMethod()", "[void]testPublicDeleteMethod()", "[void]testPublicInvalidMethod()", "[void]testPublicInvalidUrl()", "[void]testApiKeyPostMethod()", "[void]testApiKeyGetMethod()", "[void]testApiKeyPutMethod()", "[void]testApiKeyDeleteMethod()", "[void]testApiKeyInvalidMethod()", "[void]testApiKeyInvalidUrl()", "[void]testWebSocketUrl()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRequestBuilder {\n    private final String fullUrl = \"http://www.test.com/url/path?key1=value1&key2=value2&key3=value3\";\n\n    @Test\n    public void testPublicPostMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.POST);\n        assertEquals(request.method(), HttpMethod.POST.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testPublicGetMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.GET);\n        assertEquals(request.method(), HttpMethod.GET.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testPublicPutMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.PUT);\n        assertEquals(request.method(), HttpMethod.PUT.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testPublicDeleteMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.DELETE);\n        assertEquals(request.method(), HttpMethod.DELETE.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testPublicInvalidMethod() {\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.INVALID));\n        assertTrue(thrown.getMessage().contains(\"Invalid HTTP method: \"));\n    }\n\n    @Test\n    public void testPublicInvalidUrl() {\n        String invalidUrl = \"invalid\";\n\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildPublicRequest(invalidUrl, HttpMethod.POST));\n        assertTrue(thrown.getMessage().contains(\"Invalid URL: \"));\n    }\n\n    @Test\n    public void testApiKeyPostMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.POST, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.POST.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testApiKeyGetMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.GET, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.GET.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testApiKeyPutMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.PUT, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.PUT.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testApiKeyDeleteMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.DELETE, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.DELETE.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }\n\n    @Test\n    public void testApiKeyInvalidMethod() {\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.INVALID, MockData.API_KEY));\n        assertTrue(thrown.getMessage().contains(\"Invalid HTTP method: \"));\n    }\n\n    @Test\n    public void testApiKeyInvalidUrl() {\n        String invalidUrl = \"invalid\";\n\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildApiKeyRequest(invalidUrl, HttpMethod.POST, MockData.API_KEY));\n        assertTrue(thrown.getMessage().contains(\"Invalid URL: \"));\n    }\n\n    @Test\n    public void testWebSocketUrl() {\n        Request request = RequestBuilder.buildWebSocketRequest(fullUrl);\n        assertEquals(request.url().toString(), fullUrl);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String fullUrl = \"http://www.test.com/url/path?key1=value1&key2=value2&key3=value3\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "fullUrl = \"http://www.test.com/url/path?key1=value1&key2=value2&key3=value3\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests", "name": "TestSignedRequests", "file_path": "src/test/java/unit/websocketapi/TestSignedRequests.java", "superclasses": "", "methods": ["[void]testHmacSignatureGeneratorWithoutSecretKey()", "[void]testRsaSignatureGeneratorWithoutPrivateKey()", "[void]testSignedRequestWithoutConnectingFirst()", "[void]testSignedRequestWithoutSignatureGenerator()", "[void]testSignedRequestWithoutApiKey()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSignedRequests {\n\n    @Test\n    public void testHmacSignatureGeneratorWithoutSecretKey() {\n        assertThrows(BinanceConnectorException.class, () ->  new HmacSignatureGenerator(\"\"));\n        assertThrows(BinanceConnectorException.class, () ->  new HmacSignatureGenerator(null));\n    }\n\n\n    @Test\n    public void testRsaSignatureGeneratorWithoutPrivateKey() {\n        assertThrows(BinanceConnectorException.class, () ->  new RsaSignatureGenerator(\"\"));\n        assertThrows(BinanceConnectorException.class, () ->  new RsaSignatureGenerator(null));\n    }\n\n    @Test\n    public void testSignedRequestWithoutConnectingFirst() {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(MockData.SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(MockData.API_KEY, signatureGenerator, MockData.WS_BASE_URL);\n        assertThrows(BinanceConnectorException.class, () -> client.general().ping(null));\n    }\n    \n    @Test\n    public void testSignedRequestWithoutSignatureGenerator() {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        assertThrows(BinanceConnectorException.class, () -> client.account().accountStatus(null));\n    }\n\n    @Test\n    public void testSignedRequestWithoutApiKey() {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(MockData.SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(\"\", signatureGenerator, MockData.WS_BASE_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        assertThrows(BinanceConnectorException.class, () -> client.account().accountStatus(null));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "name": "TestWebSocketApiRequestHandler", "file_path": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "superclasses": "", "methods": ["[void]testRequestWithoutWebSocketConnection()", "[void]testPublicRequestWithoutMandatoryParams()", "[void]testApiRequestWithoutMandatoryParams()", "[void]testSignedRequestWithoutMandatoryParams()", "[void]testRequestWithInvalidRequestId()"], "method_uris": ["src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestWebSocketApiRequestHandler {\n\n    private JSONObject params;\n    private static final double invalidReqId = 1.2;\n    @Before\n    public void init() {\n        this.params = new JSONObject();\n    }\n\n    @Test\n    public void testRequestWithoutWebSocketConnection() {\n        assertThrows(BinanceConnectorException.class, () -> new WebSocketApiRequestHandler(null, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR));\n    }\n\n    @Test\n    public void testPublicRequestWithoutMandatoryParams() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handler.publicRequest(\"\", params));\n    }\n\n    @Test\n    public void testApiRequestWithoutMandatoryParams() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handler.apiRequest(\"\", params));\n\n        WebSocketApiRequestHandler handlerWithoutApiKey = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, null, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handlerWithoutApiKey.apiRequest(\"trades.historical\", params));\n    }\n\n    @Test\n    public void testSignedRequestWithoutMandatoryParams() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handler.signedRequest(\"\", params));\n\n        WebSocketApiRequestHandler handlerWithoutApiKey = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, null, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handlerWithoutApiKey.signedRequest(\"order.test\", params));\n\n        WebSocketApiRequestHandler handlerWithoutsignGenerator = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, null);\n        assertThrows(BinanceConnectorException.class, () -> handlerWithoutsignGenerator.signedRequest(\"order.test\", params));\n    }\n\n    @Test\n    public void testRequestWithInvalidRequestId() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        params.put(\"requestId\", invalidReqId);\n        assertThrows(BinanceConnectorException.class, () -> handler.publicRequest(\"ping\", params));\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private JSONObject params;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "JSONObject", "name": "params", "syntax_pass": true}, {"attribute_expression": "private static final double invalidReqId = 1.2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "invalidReqId = 1.2", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk", "name": "TestFuturesPositionRisk", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java", "superclasses": "", "methods": ["[void]testFuturesPositionRiskWithoutParameters()", "[void]testFuturesPositionRisk()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesPositionRisk {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesPositionRiskWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/positionRisk\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresPositionRisk(parameters));\n    }\n\n    @Test\n    public void testFuturesPositionRisk() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/positionRisk?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresPositionRisk(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2", "name": "TestFuturesPositionRiskV2", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java", "superclasses": "", "methods": ["[void]testFuturesPositionRiskWithoutParameters()", "[void]testFuturesPositionRisk()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesPositionRiskV2 {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int futuresType = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesPositionRiskWithoutParameters() {\n        String path = \"/sapi/v2/sub-account/futures/positionRisk\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresPositionRiskV2(parameters));\n    }\n\n    @Test\n    public void testFuturesPositionRisk() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/positionRisk?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresPositionRiskV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int futuresType = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2", "name": "TestFuturesAccountV2", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java", "superclasses": "", "methods": ["[void]testFuturesAccountWithoutParameters()", "[void]testFuturesAccount()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesAccountV2 {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int futuresType = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesAccountWithoutParameters() {\n        String path = \"/sapi/v2/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountV2(parameters));\n    }\n\n    @Test\n    public void testFuturesAccount() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/account?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int futuresType = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount", "name": "TestFuturesAccount", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java", "superclasses": "", "methods": ["[void]testFuturesAccountWithoutParameters()", "[void]testFuturesAccount()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesAccountWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccount(parameters));\n    }\n\n    @Test\n    public void testFuturesAccount() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/account?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2", "name": "TestFuturesAccountSummaryV2", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java", "superclasses": "", "methods": ["[void]testFuturesSummaryWithoutType()", "[void]testFuturesSummary()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesAccountSummaryV2 {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int futuresType = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesSummaryWithoutType() {\n        String path = \"/sapi/v2/sub-account/futures/accountSummary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountSummaryV2(parameters));\n    }\n\n    @Test\n    public void testFuturesSummary() {\n        String path = \"/sapi/v2/sub-account/futures/accountSummary?futuresType=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountSummaryV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int futuresType = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory", "name": "TestDepositHistory", "file_path": "src/test/java/unit/spot/subaccount/TestDepositHistory.java", "superclasses": "", "methods": ["[void]testDepositHistWithoutParameters()", "[void]testDepositHist()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDepositHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDepositHistWithoutParameters() {\n        String path = \"/sapi/v1/capital/deposit/subHisrec\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().depositHistory(parameters));\n    }\n\n    @Test\n    public void testDepositHist() {\n        String path = String.format(\"/sapi/v1/capital/deposit/subHisrec?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().depositHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer", "name": "TestFuturesInternalTransfer", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java", "superclasses": "", "methods": ["[void]testFuturesInternalTransWithoutParameters()", "[void]testFuturesInternalTrans()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesInternalTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int futuresType = 1;\n    private final double amount = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesInternalTransWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/internalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresInternalTransfer(parameters));\n    }\n\n    @Test\n    public void testFuturesInternalTrans() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/internalTransfer?fromEmail=%s&toEmail=%s&futuresType=1&asset=BNB&amount=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresInternalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int futuresType = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}, {"attribute_expression": "private final double amount = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestTransferHistory.java.TestTransferHistory", "name": "TestTransferHistory", "file_path": "src/test/java/unit/spot/subaccount/TestTransferHistory.java", "superclasses": "", "methods": ["[void]testTransferHist()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestTransferHistory.java.TestTransferHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTransferHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 100001;\n    private final int endTime = 100002;\n    private final int type = 1;\n    private final int limit = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTransferHist() {\n        String path = \"/sapi/v1/sub-account/transfer/subUserHistory?asset=BNB&type=1&startTime=100001&endTime=100002&limit=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"type\", type);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().transferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 100001;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 100001", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 100002;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 100002", "syntax_pass": true}, {"attribute_expression": "private final int type = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "type = 1", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction", "name": "TestGetIpRestriction", "file_path": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java", "superclasses": "", "methods": ["[void]testGetIpRestrictionWithoutParameters()", "[void]testGetIpRestriction()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetIpRestriction {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetIpRestrictionWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/subAccountApi/ipRestriction\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getIpRestriction(parameters));\n    }\n\n    @Test\n    public void testGetIpRestriction() {\n        String path = String.format(\"/sapi/v1/sub-account/subAccountApi/ipRestriction?email=%s&subAccountApiKey=abc\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().getIpRestriction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken", "name": "TestEnableLeverageToken", "file_path": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java", "superclasses": "", "methods": ["[void]testEnableTokenWithoutParameters()", "[void]testEnableToken()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEnableLeverageToken {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableTokenWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/blvt/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableLeverageToken(parameters));\n    }\n\n    @Test\n    public void testEnableToken() {\n        String path = String.format(\"/sapi/v1/sub-account/blvt/enable?email=%s&enableBlvt=true\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"enableBlvt\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableLeverageToken(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures", "name": "TestEnableFutures", "file_path": "src/test/java/unit/spot/subaccount/TestEnableFutures.java", "superclasses": "", "methods": ["[void]testEnableFuturesWithoutEmail()", "[void]testEnableFutures()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEnableFutures {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableFuturesWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/futures/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableFutures(parameters));\n    }\n\n    @Test\n    public void testEnableFutures() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/enable?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit", "name": "TestManagedSubDeposit", "file_path": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java", "superclasses": "", "methods": ["[void]testManagedSubDepositWithoutParameters()", "[void]testManagedSubWithdraw()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestManagedSubDeposit {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testManagedSubDepositWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/deposit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubDeposit(parameters));\n    }\n\n    @Test\n    public void testManagedSubWithdraw() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/deposit?toEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubDeposit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin", "name": "TestEnableMargin", "file_path": "src/test/java/unit/spot/subaccount/TestEnableMargin.java", "superclasses": "", "methods": ["[void]testEnableMarginWithoutEmail()", "[void]testEnableMargin()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEnableMargin {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableMarginWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/margin/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableMargin(parameters));\n    }\n\n    @Test\n    public void testEnableMargin() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/enable?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableMargin(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java.TestFuturesSummary", "name": "TestFuturesSummary", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java", "superclasses": "", "methods": ["[void]testFuturesSummary()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesSummary.java.TestFuturesSummary.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesSummary {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesSummary() {\n        String path = \"/sapi/v1/sub-account/futures/accountSummary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails", "name": "TestManagedSubDetails", "file_path": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java", "superclasses": "", "methods": ["[void]testManagedSubDetailsWithoutParameters()", "[void]testManagedSubDetails()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestManagedSubDetails {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testManagedSubDetailsWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubDetails(parameters));\n    }\n\n    @Test\n    public void testManagedSubDetails() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/asset?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubDetails(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress", "name": "TestDepositAddress", "file_path": "src/test/java/unit/spot/subaccount/TestDepositAddress.java", "superclasses": "", "methods": ["[void]testDepositAddressWithoutParameters()", "[void]testDepositAddress()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDepositAddress {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDepositAddressWithoutParameters() {\n        String path = \"/sapi/v1/capital/deposit/subAddress\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().depositAddress(parameters));\n    }\n\n    @Test\n    public void testDepositAddress() {\n        String path = String.format(\"/sapi/v1/capital/deposit/subAddress?email=%s&coin=BNB\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"coin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().depositAddress(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster", "name": "TestSubAccountToMaster", "file_path": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java", "superclasses": "", "methods": ["[void]testSubToMasterWithoutParameters()", "[void]testSubToMaster()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubAccountToMaster {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubToMasterWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/transfer/subToMaster\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToMaster(parameters));\n    }\n\n    @Test\n    public void testSubToMaster() {\n        String path = \"/sapi/v1/sub-account/transfer/subToMaster?asset=BNB&amount=0.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountToMaster(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountList.java.TestSubAccountList", "name": "TestSubAccountList", "file_path": "src/test/java/unit/spot/subaccount/TestSubAccountList.java", "superclasses": "", "methods": ["[void]testSubAccountList()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestSubAccountList.java.TestSubAccountList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubAccountList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int page = 1;\n    private final int limit = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubAccountList() {\n        String path = String.format(\"/sapi/v1/sub-account/list?email=%s&isFreeze=true&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"isFreeze\", true);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int page = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "page = 1", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction", "name": "TestUpdateIpRestriction", "file_path": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java", "superclasses": "", "methods": ["[void]testUpdateIpRestrictionWithoutParameters()", "[void]testUpdateIpRestriction()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUpdateIpRestriction {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testUpdateIpRestrictionWithoutParameters() {\n        String path = \"/sapi/v2/sub-account/subAccountApi/ipRestriction\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().updateIpRestriction(parameters));\n    }\n\n    @Test\n    public void testUpdateIpRestriction() {\n        String path = String.format(\"/sapi/v2/sub-account/subAccountApi/ipRestriction?email=%s&subAccountApiKey=abc&status=2&ipAddress=1.2.3.4\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n        parameters.put(\"status\", \"2\");\n        parameters.put(\"ipAddress\", \"1.2.3.4\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().updateIpRestriction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets", "name": "TestAssets", "file_path": "src/test/java/unit/spot/subaccount/TestAssets.java", "superclasses": "", "methods": ["[void]testAssetsWithoutParameters()", "[void]testAssets()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAssetsWithoutParameters() {\n        String path = \"/sapi/v3/sub-account/assets\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().assets(parameters));\n    }\n    \n    @Test\n    public void testAssets() {\n        String path = String.format(\"/sapi/v3/sub-account/assets?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().assets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer", "name": "TestFuturesTransfer", "file_path": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java", "superclasses": "", "methods": ["[void]testFuturesTransWithoutParameters()", "[void]testFuturesTrans()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.1;\n    private final int type = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesTransWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresTransfer(parameters));\n    }\n\n    @Test\n    public void testFuturesTrans() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/transfer?email=%s&asset=BNB&amount=0.1&type=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}, {"attribute_expression": "private final int type = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "type = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList", "name": "TestDeleteIpList", "file_path": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java", "superclasses": "", "methods": ["[void]testDeleteIpListWithoutParameters()", "[void]testDeleteIpList()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDeleteIpList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDeleteIpListWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().deleteIpList(parameters));\n    }\n\n    @Test\n    public void  testDeleteIpList() {\n        String path = String.format(\"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList?email=%s&subAccountApiKey=abc\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().deleteIpList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount", "name": "TestMarginAccount", "file_path": "src/test/java/unit/spot/subaccount/TestMarginAccount.java", "superclasses": "", "methods": ["[void]testMarginWithoutParameters()", "[void]testMargin()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMarginAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMarginWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/margin/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().marginAccount(parameters));\n    }\n\n    @Test\n    public void testMargin() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/account?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().marginAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java.TestMarginAccountSummary", "name": "TestMarginAccountSummary", "file_path": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java", "superclasses": "", "methods": ["[void]testMarginSummary()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java.TestMarginAccountSummary.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMarginAccountSummary {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMarginSummary() {\n        String path = \"/sapi/v1/sub-account/margin/accountSummary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().marginAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer", "name": "TestGetFuturesInternalTransfer", "file_path": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java", "superclasses": "", "methods": ["[void]testGetFuturesInternalTransferWithoutParameters()", "[void]testGetFuturesInternalTransfer()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetFuturesInternalTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 100001;\n    private final int endTime = 100002;\n    private final int page = 1;\n    private final int limit = 1;\n    private final int futuresType = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetFuturesInternalTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/internalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getFuturesInternalTransfer(parameters));\n    }\n\n    @Test\n    public void testGetFuturesInternalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/internalTransfer?email=%s&futuresType=1&startTime=100001&endTime=100002&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().getFuturesInternalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 100001;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 100001", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 100002;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 100002", "syntax_pass": true}, {"attribute_expression": "private final int page = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "page = 1", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1", "syntax_pass": true}, {"attribute_expression": "private final int futuresType = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer", "name": "TestUniversalTransfer", "file_path": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java", "superclasses": "", "methods": ["[void]testUniversalTransferWithoutParameters()", "[void]testUniversalTransfer()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUniversalTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testUniversalTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/universalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().universalTransfer(parameters));\n    }\n\n    @Test\n    public void testUniversalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/universalTransfer?fromEmail=%s&toEmail=%s&fromAccountType=SPOT&toAccountType=USDT_FUTURE&asset=BNB&amount=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"USDT_FUTURE\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestAccountStatus.java.TestAccountStatus", "name": "TestAccountStatus", "file_path": "src/test/java/unit/spot/subaccount/TestAccountStatus.java", "superclasses": "", "methods": ["[void]testAccountStatus()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestAccountStatus.java.TestAccountStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAccountStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccountStatus() {\n        String path = String.format(\"/sapi/v1/sub-account/status?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().accountStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer", "name": "TestMarginTransfer", "file_path": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java", "superclasses": "", "methods": ["[void]testMarginTransferWithoutParameters()", "[void]testMarginTransfer()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMarginTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.1;\n    private final int type = 1;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMarginTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/margin/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().marginTransfer(parameters));\n    }\n\n    @Test\n    public void testMarginTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/transfer?email=%s&asset=BNB&amount=0.1&type=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().marginTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}, {"attribute_expression": "private final int type = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "type = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java.TestSpotAccountSummary", "name": "TestSpotAccountSummary", "file_path": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java", "superclasses": "", "methods": ["[void]testSpotAccountSummary()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java.TestSpotAccountSummary.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSpotAccountSummary {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int page = 1;\n    private final int size = 1;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSpotAccountSummary() {\n        String path = String.format(\"/sapi/v1/sub-account/spotSummary?email=%s&page=1&size=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"page\", page);\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().spotAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int page = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "page = 1", "syntax_pass": true}, {"attribute_expression": "private final int size = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "size = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount", "name": "TestSubAccountToSubAccount", "file_path": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java", "superclasses": "", "methods": ["[void]testSubToSubWithoutParameters()", "[void]testSubToSub()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubAccountToSubAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubToSubWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/transfer/subToSub\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToSubAccount(parameters));\n    }\n\n    @Test\n    public void testSubToSub() {\n        String path = String.format(\"/sapi/v1/sub-account/transfer/subToSub?toEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountToSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer", "name": "TestQueryUniversalTransfer", "file_path": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java", "superclasses": "", "methods": ["[void]testUniversalTransfer()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestQueryUniversalTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 100001;\n    private final int endTime = 100002;\n    private final int page = 1;\n    private final int limit = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testUniversalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/universalTransfer?fromEmail=%s&toEmail=%s&startTime=100001&endTime=100002&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().queryUniversalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 100001;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 100001", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 100002;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 100002", "syntax_pass": true}, {"attribute_expression": "private final int page = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "page = 1", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot", "name": "TestManagedSubAccountSnapshot", "file_path": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java", "superclasses": "", "methods": ["[void]testManagedSubAccountSnapshotWithoutParameters()", "[void]testManagedSubAccountSnapshot()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestManagedSubAccountSnapshot {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testManagedSubAccountSnapshotWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/accountSnapshot\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubAccountSnapshot(parameters));\n    }\n\n    @Test\n    public void testManagedSubAccountSnapshot() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/accountSnapshot?email=%s&type=SPOT\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"type\", \"SPOT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubAccountSnapshot(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java.TestSpotTransferHistory", "name": "TestSpotTransferHistory", "file_path": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java", "superclasses": "", "methods": ["[void]testSpotTransferHistory()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java.TestSpotTransferHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSpotTransferHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 100001;\n    private final int endTime = 100002;\n    private final int page = 1;\n    private final int limit = 1;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSpotTransferHistory() {\n        String path = String.format(\"/sapi/v1/sub-account/sub/transfer/history?fromEmail=%s&toEmail=%s&startTime=100001&endTime=100002&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().spotTransferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 100001;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 100001", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 100002;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 100002", "syntax_pass": true}, {"attribute_expression": "private final int page = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "page = 1", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw", "name": "TestManagedSubWithdraw", "file_path": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java", "superclasses": "", "methods": ["[void]testManagedSubWithdrawWithoutParameters()", "[void]testManagedSubWithdraw()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestManagedSubWithdraw {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private final double amount = 0.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testManagedSubWithdrawWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubWithdraw(parameters));\n    }\n\n    @Test\n    public void testManagedSubWithdraw() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/withdraw?fromEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount", "name": "TestCreateVirtualSubAccount", "file_path": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java", "superclasses": "", "methods": ["[void]testCreateVirtualSubAccountWithoutString()", "[void]testCreateVirtualSubAccount()"], "method_uris": ["src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCreateVirtualSubAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCreateVirtualSubAccountWithoutString() {\n        String path = \"/sapi/v1/sub-account/virtualSubAccount\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().createVirtualSubAccount(parameters));\n    }\n\n    @Test\n    public void testCreateVirtualSubAccount() {\n        String path = \"/sapi/v1/sub-account/virtualSubAccount?subAccountString=sub.account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"subAccountString\", \"sub.account\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().createVirtualSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier", "name": "TestIsolatedMarginTier", "file_path": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java", "superclasses": "", "methods": ["[void]testIsolatedMarginTierWithoutParameters()", "[void]testIsolatedMarginTier()"], "method_uris": ["src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIsolatedMarginTier {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testIsolatedMarginTierWithoutParameters() {\n        String path = \"/sapi/v1/margin/isolatedMarginTier\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().isolatedMarginTier(parameters));\n    }\n\n    @Test\n    public void testIsolatedMarginTier() {\n        String path = \"/sapi/v1/margin/isolatedMarginTier?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedMarginTier(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetOcoOrder.java.TestGetOcoOrder", "name": "TestGetOcoOrder", "file_path": "src/test/java/unit/spot/margin/TestGetOcoOrder.java", "superclasses": "", "methods": ["[void]testGetOcoOrder()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetOcoOrder.java.TestGetOcoOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOcoOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int orderListId = 12345679;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testGetOcoOrder() {\n        String path = \"/sapi/v1/margin/orderList?symbol=BNBUSDT&orderListId=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderListId\", orderListId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOcoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int orderListId = 12345679;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "orderListId = 12345679", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java.TestAllIsolatedSymbols", "name": "TestAllIsolatedSymbols", "file_path": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java", "superclasses": "", "methods": ["[void]testAllIsolatedSymbols()"], "method_uris": ["src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java.TestAllIsolatedSymbols.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAllIsolatedSymbols {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAllIsolatedSymbols() {\n        String path = \"/sapi/v1/margin/isolated/allPairs\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getAllIsolatedSymbols(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java.TestGetMarginOpenOrders", "name": "TestGetMarginOpenOrders", "file_path": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java", "superclasses": "", "methods": ["[void]testGetMarginOpenOrders()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java.TestGetMarginOpenOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetMarginOpenOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testGetMarginOpenOrders() {\n        String path = \"/sapi/v1/margin/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders", "name": "TestGetAllMarginOrders", "file_path": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java", "superclasses": "", "methods": ["[void]testGetAllMarginOrdersWithoutParameters()", "[void]testGetAllMarginOrders()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetAllMarginOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetAllMarginOrdersWithoutParameters() {\n        String path = \"/sapi/v1/margin/allOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().getAllOrders(parameters));\n    }\n\n    @Test\n    public void testGetAllMarginOrders() {\n        String path = \"/sapi/v1/margin/allOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getAllOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestOrderRateLimit.java.TestOrderRateLimit", "name": "TestOrderRateLimit", "file_path": "src/test/java/unit/spot/margin/TestOrderRateLimit.java", "superclasses": "", "methods": ["[void]testOrderRateLimit()"], "method_uris": ["src/test/java/unit/spot/margin/TestOrderRateLimit.java.TestOrderRateLimit.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestOrderRateLimit {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOrderRateLimit() {\n        String path = \"/sapi/v1/margin/rateLimit/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().orderRateLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow", "name": "TestMaxBorrow", "file_path": "src/test/java/unit/spot/margin/TestMaxBorrow.java", "superclasses": "", "methods": ["[void]testMaxBorrowWithoutParameters()", "[void]testMaxBorrow()"], "method_uris": ["src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMaxBorrow {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMaxBorrowWithoutParameters() {\n        String path = \"/sapi/v1/margin/maxBorrowable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().maxBorrow(parameters));\n    }\n\n    @Test\n    public void testMaxBorrow() {\n        String path = \"/sapi/v1/margin/maxBorrowable?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().maxBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedAccount.java.TestIsolatedAccount", "name": "TestIsolatedAccount", "file_path": "src/test/java/unit/spot/margin/TestIsolatedAccount.java", "superclasses": "", "methods": ["[void]testIsolatedAccount()"], "method_uris": ["src/test/java/unit/spot/margin/TestIsolatedAccount.java.TestIsolatedAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIsolatedAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private final int endTime = 12345679;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testIsolatedAccount() {\n        String path = String.format(\"/sapi/v1/margin/isolated/account?symbols=%s\",\n                UrlBuilder.urlEncode(\"BNBUSDT,BTCUSDT\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", \"BNBUSDT,BTCUSDT\");\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 12345679;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 12345679", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable", "name": "TestMaxTransferable", "file_path": "src/test/java/unit/spot/margin/TestMaxTransferable.java", "superclasses": "", "methods": ["[void]testMaxTransferableWithoutParameters()", "[void]testMaxTransferable()"], "method_uris": ["src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMaxTransferable {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMaxTransferableWithoutParameters() {\n        String path = \"/sapi/v1/margin/maxTransferable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().maxTransferable(parameters));\n    }\n\n    @Test\n    public void testMaxTransferable() {\n        String path = \"/sapi/v1/margin/maxTransferable?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().maxTransferable(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestLeverageBracket.java.TestLeverageBracket", "name": "TestLeverageBracket", "file_path": "src/test/java/unit/spot/margin/TestLeverageBracket.java", "superclasses": "", "methods": ["[void]testLeverageBracket()"], "method_uris": ["src/test/java/unit/spot/margin/TestLeverageBracket.java.TestLeverageBracket.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLeverageBracket {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLeverageBracket() {\n        String path = \"/sapi/v1/margin/leverageBracket\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().leverageBracket();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java.TestSmallLiabilityAssets", "name": "TestSmallLiabilityAssets", "file_path": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java", "superclasses": "", "methods": ["[void]testSmallLiabilityAssets()"], "method_uris": ["src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java.TestSmallLiabilityAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSmallLiabilityAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testSmallLiabilityAssets() {\n        String path = \"/sapi/v1/margin/exchange-small-liability\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().smallLiabilityAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder", "name": "TestCancelMarginOcoOrder", "file_path": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java", "superclasses": "", "methods": ["[void]testCancelAllMarginOcoOrderWithoutParameters()", "[void]testCancelAllMarginOcoOrder()"], "method_uris": ["src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelMarginOcoOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelAllMarginOcoOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().cancelOcoOrder(parameters));\n    }\n\n    @Test\n    public void testCancelAllMarginOcoOrder() {\n        String path = \"/sapi/v1/margin/orderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().cancelOcoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder", "name": "TestGetMarginOrder", "file_path": "src/test/java/unit/spot/margin/TestGetMarginOrder.java", "superclasses": "", "methods": ["[void]testMarginOrderWithoutParameters()", "[void]testMarginOrder()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetMarginOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMarginOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().getOrder(parameters));\n    }\n\n    @Test\n    public void testMarginOrder() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate", "name": "TestNextHourlyInterestRate", "file_path": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java", "superclasses": "", "methods": ["[void]testGetAFutureHourlyInterestRateWithoutParameters()", "[void]testGetAFutureHourlyInterestRate()"], "method_uris": ["src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestNextHourlyInterestRate {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetAFutureHourlyInterestRateWithoutParameters() {\n        String path = \"/sapi/v1/margin/next-hourly-interest-rate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().nextHourlyInterestRate(parameters));\n    }\n    \n    @Test\n    public void testGetAFutureHourlyInterestRate() {\n        String path = \"/sapi/v1/margin/next-hourly-interest-rate?assets=BTC&isIsolated=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assets\", \"BTC\");\n        parameters.put(\"isIsolated\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().nextHourlyInterestRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java.TestIsolatedMarginData", "name": "TestIsolatedMarginData", "file_path": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java", "superclasses": "", "methods": ["[void]testIsolatedMarginData()"], "method_uris": ["src/test/java/unit/spot/margin/TestIsolatedMarginData.java.TestIsolatedMarginData.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIsolatedMarginData {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testIsolatedMarginData() {\n        String path = \"/sapi/v1/margin/isolatedMarginData?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedMarginData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders", "name": "TestCancelAllMarginOrders", "file_path": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java", "superclasses": "", "methods": ["[void]testCancelAllMarginOrdersWithoutParameters()", "[void]testCancelAllMarginOrders()"], "method_uris": ["src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelAllMarginOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelAllMarginOrdersWithoutParameters() {\n        String path = \"/sapi/v1/margin/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().cancelOpenOrders(parameters));\n    }\n\n    @Test\n    public void testCancelAllMarginOrders() {\n        String path = \"/sapi/v1/margin/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().cancelOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestAllAssets.java.TestAllAssets", "name": "TestAllAssets", "file_path": "src/test/java/unit/spot/margin/TestAllAssets.java", "superclasses": "", "methods": ["[void]testAllAssets()"], "method_uris": ["src/test/java/unit/spot/margin/TestAllAssets.java.TestAllAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAllAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAllAssets() {\n        String path = \"/sapi/v1/margin/allAssets\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().allAssets();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades", "name": "TestTrades", "file_path": "src/test/java/unit/spot/margin/TestTrades.java", "superclasses": "", "methods": ["[void]testTradesWithoutParameters()", "[void]testTrades()"], "method_uris": ["src/test/java/unit/spot/margin/TestTrades.java.TestTrades.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTrades {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradesWithoutParameters() {\n        String path = \"/sapi/v1/margin/myTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().trades(parameters));\n    }\n\n    @Test\n    public void testTrades() {\n        String path = \"/sapi/v1/margin/myTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().trades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java.TestForceLiquidationRec", "name": "TestForceLiquidationRec", "file_path": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java", "superclasses": "", "methods": ["[void]testForceLiquidationRec()"], "method_uris": ["src/test/java/unit/spot/margin/TestForceLiquidationRec.java.TestForceLiquidationRec.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestForceLiquidationRec {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 12345678;\n    private final int endTime = 12345679;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testForceLiquidationRec() {\n        String path = \"/sapi/v1/margin/forceLiquidationRec?startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().forceLiquidationRec(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 12345678;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 12345678", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 12345679;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 12345679", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestInterestHistory.java.TestInterestHistory", "name": "TestInterestHistory", "file_path": "src/test/java/unit/spot/margin/TestInterestHistory.java", "superclasses": "", "methods": ["[void]testInterestHistory()"], "method_uris": ["src/test/java/unit/spot/margin/TestInterestHistory.java.TestInterestHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestInterestHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 12345678;\n    private final int endTime = 12345679;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testInterestHistory() {\n        String path = \"/sapi/v1/margin/interestHistory?asset=BNB&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().interestHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 12345678;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 12345678", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 12345679;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 12345679", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex", "name": "TestPriceIndex", "file_path": "src/test/java/unit/spot/margin/TestPriceIndex.java", "superclasses": "", "methods": ["[void]testPriceIndexWithoutParameters()", "[void]testPriceIndex()"], "method_uris": ["src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestPriceIndex {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testPriceIndexWithoutParameters() {\n        String path = \"/sapi/v1/margin/priceIndex\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().priceIndex(parameters));\n    }\n\n    @Test\n    public void testPriceIndex() {\n        String path = \"/sapi/v1/margin/priceIndex?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().priceIndex(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow", "name": "TestCapitalFlow", "file_path": "src/test/java/unit/spot/margin/TestCapitalFlow.java", "superclasses": "", "methods": ["[void]testCapitalFlowWithoutParameters()", "[void]testCapitalFlow()"], "method_uris": ["src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCapitalFlow {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCapitalFlowWithoutParameters() {\n        String path = \"/sapi/v1/margin/capital-flow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().capitalFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n    \n    @Test\n    public void testCapitalFlow() {\n        String path = \"/sapi/v1/margin/capital-flow?asset=USDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().capitalFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory", "name": "TestSmallLiabilityExchangeHistory", "file_path": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java", "superclasses": "", "methods": ["[void]testSmallLiabilityExchangeHistoryWithoutParameters()", "[void]testSmallLiabilityExchangeHistory()"], "method_uris": ["src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSmallLiabilityExchangeHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int current = 1;\n    private final int size = 10;\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSmallLiabilityExchangeHistoryWithoutParameters() {\n        String path = \"/sapi/v1/margin/exchange-small-liability-history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().smallLiabilityExchangeHistory(parameters));\n    }\n    \n    @Test\n    public void testSmallLiabilityExchangeHistory() {\n        String path = \"/sapi/v1/margin/exchange-small-liability-history?current=1&size=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"current\", current);\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().smallLiabilityExchangeHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int current = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "current = 1", "syntax_pass": true}, {"attribute_expression": "private final int size = 10;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "size = 10", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder", "name": "TestNewMarginOrder", "file_path": "src/test/java/unit/spot/margin/TestNewMarginOrder.java", "superclasses": "", "methods": ["[void]testNewMarginOrderWithoutParameters()", "[void]testNewMarginOrder()"], "method_uris": ["src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestNewMarginOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testNewMarginOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().newOrder(parameters));\n    }\n\n    @Test\n    public void testNewMarginOrder() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT&side=BUY&type=MARKET\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().newOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java.TestCrossMarginCollateralRatio", "name": "TestCrossMarginCollateralRatio", "file_path": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java", "superclasses": "", "methods": ["[void]testCrossMarginCollateralRatio()"], "method_uris": ["src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java.TestCrossMarginCollateralRatio.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCrossMarginCollateralRatio {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testCrossMarginCollateralRatio() {\n        String path = \"/sapi/v1/margin/crossMarginCollateralRatio\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().crossMarginCollateralRatio();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java.TestIsolatedAccountLimit", "name": "TestIsolatedAccountLimit", "file_path": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java", "superclasses": "", "methods": ["[void]testIsolatedAccountLimit()"], "method_uris": ["src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java.TestIsolatedAccountLimit.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIsolatedAccountLimit {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testIsolatedAccountLimit() {\n        String path = \"/sapi/v1/margin/isolated/accountLimit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getIsolatedAccountLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetBnbBurn.java.TestGetBnbBurn", "name": "TestGetBnbBurn", "file_path": "src/test/java/unit/spot/margin/TestGetBnbBurn.java", "superclasses": "", "methods": ["[void]testGetBnbBurn()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetBnbBurn.java.TestGetBnbBurn.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetBnbBurn {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testGetBnbBurn() {\n        String path = \"/sapi/v1/bnbBurn\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getBnbBurn(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount", "name": "TestEnableIsolatedAccount", "file_path": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java", "superclasses": "", "methods": ["[void]testEnableIsolatedAccountWithoutParameters()", "[void]testEnableIsolatedAccount()"], "method_uris": ["src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEnableIsolatedAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableIsolatedAccountWithoutParameters() {\n        String path = \"/sapi/v1/margin/isolated/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().enableIsolatedAccount(parameters));\n    }\n\n    @Test\n    public void testEnableIsolatedAccount() {\n        String path = \"/sapi/v1/margin/isolated/account?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().enableIsolatedAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java.TestGetAllMarginOcoOrders", "name": "TestGetAllMarginOcoOrders", "file_path": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java", "superclasses": "", "methods": ["[void]testGetAllMarginOcoOrders()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java.TestGetAllMarginOcoOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetAllMarginOcoOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int startTime = 12345678;\n    private final int endTime = 12345679;\n    private final int fromId = 1;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testGetAllMarginOcoOrders() {\n        String path = \"/sapi/v1/margin/allOrderList?symbol=BNBUSDT&fromId=1&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"fromId\", fromId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getAllOcoOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int startTime = 12345678;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "startTime = 12345678", "syntax_pass": true}, {"attribute_expression": "private final int endTime = 12345679;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "endTime = 12345679", "syntax_pass": true}, {"attribute_expression": "private final int fromId = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "fromId = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestBnbBurn.java.TestBnbBurn", "name": "TestBnbBurn", "file_path": "src/test/java/unit/spot/margin/TestBnbBurn.java", "superclasses": "", "methods": ["[void]testBnbBurn()"], "method_uris": ["src/test/java/unit/spot/margin/TestBnbBurn.java.TestBnbBurn.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBnbBurn {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBnbBurn() {\n        String path = \"/sapi/v1/bnbBurn?spotBNBBurn=true&interestBNBBurn=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"spotBNBBurn\", \"true\");\n        parameters.put(\"interestBNBBurn\", \"true\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().bnbBurn(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder", "name": "TestNewMarginOcoOrder", "file_path": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java", "superclasses": "", "methods": ["[void]testNewMarginOcoOrderWithoutParameters()", "[void]testNewMarginOcoOrder()"], "method_uris": ["src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestNewMarginOcoOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double quantity = 0.1;\n    private final int price = 350;\n    private final int stopPrice = 400;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testNewMarginOcoOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order/oco\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().ocoOrder(parameters));\n    }\n\n    @Test\n    public void testNewMarginOcoOrder() {\n        String path = \"/sapi/v1/margin/order/oco?symbol=BNBUSDT&side=BUY&quantity=0.1&price=350&stopPrice=400\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n        parameters.put(\"stopPrice\", stopPrice);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().ocoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 0.1", "syntax_pass": true}, {"attribute_expression": "private final int price = 350;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "price = 350", "syntax_pass": true}, {"attribute_expression": "private final int stopPrice = 400;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "stopPrice = 400", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java.TestExchangeSmallLiability", "name": "TestExchangeSmallLiability", "file_path": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java", "superclasses": "", "methods": ["[void]testExchangeSmallLiability()"], "method_uris": ["src/test/java/unit/spot/margin/TestExchangeSmallLiability.java.TestExchangeSmallLiability.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestExchangeSmallLiability {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testExchangeSmallLiability() {\n        String path = \"/sapi/v1/margin/exchange-small-liability?assetNames=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assetNames\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().exchangeSmallLiability(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory", "name": "TestAvailableInventory", "file_path": "src/test/java/unit/spot/margin/TestAvailableInventory.java", "superclasses": "", "methods": ["[void]testAvailableInventoryWithoutParameters()", "[void]testAvailableInventory()"], "method_uris": ["src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAvailableInventory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAvailableInventoryWithoutParameters() {\n        String path = \"/sapi/v1/margin/available-inventory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().availableInventory(parameters));\n    }\n    \n    @Test\n    public void testAvailableInventory() {\n        String path = \"/sapi/v1/margin/available-inventory?type=MARGIN\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MARGIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().availableInventory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestDelistSchedule.java.TestDelistSchedule", "name": "TestDelistSchedule", "file_path": "src/test/java/unit/spot/margin/TestDelistSchedule.java", "superclasses": "", "methods": ["[void]testDelistSchedule()"], "method_uris": ["src/test/java/unit/spot/margin/TestDelistSchedule.java.TestDelistSchedule.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDelistSchedule {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testDelistSchedule() {\n        String path = \"/sapi/v1/margin/delist-schedule\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().delistSchedule(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestCrossMarginData.java.TestCrossMarginData", "name": "TestCrossMarginData", "file_path": "src/test/java/unit/spot/margin/TestCrossMarginData.java", "superclasses": "", "methods": ["[void]testCrossMarginData()"], "method_uris": ["src/test/java/unit/spot/margin/TestCrossMarginData.java.TestCrossMarginData.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCrossMarginData {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testCrossMarginData() {\n        String path = \"/sapi/v1/margin/crossMarginData?coin=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().crossMarginData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory", "name": "TestInterestRateHistory", "file_path": "src/test/java/unit/spot/margin/TestInterestRateHistory.java", "superclasses": "", "methods": ["[void]testInterestRateHistoryWithoutParameters()", "[void]testInterestRateHistory()"], "method_uris": ["src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestInterestRateHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testInterestRateHistoryWithoutParameters() {\n        String path = \"/sapi/v1/margin/interestRateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().interestRateHistory(parameters));\n    }\n\n    @Test\n    public void testInterestRateHistory() {\n        String path = \"/sapi/v1/margin/interestRateHistory?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().interestRateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage", "name": "TestAdjustCrossMarginMaxLeverage", "file_path": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java", "superclasses": "", "methods": ["[void]testAdjustCrossMarginMaxLeverageWithoutParameters()", "[void]testAdjustCrossMarginMaxLeverage()"], "method_uris": ["src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAdjustCrossMarginMaxLeverage {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final Integer leverage = 3;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAdjustCrossMarginMaxLeverageWithoutParameters() {\n        String path = \"/sapi/v1/margin/max-leverage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().adjustCrossMarginMaxLeverage(parameters));\n    }\n    \n    @Test\n    public void testAdjustCrossMarginMaxLeverage() {\n        String path = \"/sapi/v1/margin/max-leverage?maxLeverage=3\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"maxLeverage\", leverage);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().adjustCrossMarginMaxLeverage(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final Integer leverage = 3;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Integer", "name": "leverage = 3", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java.TestGetMarginOcoOpenOrders", "name": "TestGetMarginOcoOpenOrders", "file_path": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java", "superclasses": "", "methods": ["[void]testGetMarginOcoOpenOrders()"], "method_uris": ["src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java.TestGetMarginOcoOpenOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetMarginOcoOpenOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testGetMarginOcoOpenOrders() {\n        String path = \"/sapi/v1/margin/openOrderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOcoOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestTradeCoeff.java.TestTradeCoeff", "name": "TestTradeCoeff", "file_path": "src/test/java/unit/spot/margin/TestTradeCoeff.java", "superclasses": "", "methods": ["[void]testTradeCoeff()"], "method_uris": ["src/test/java/unit/spot/margin/TestTradeCoeff.java.TestTradeCoeff.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTradeCoeff {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradeCoeff() {\n        String path = \"/sapi/v1/margin/tradeCoeff\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().tradeCoeff(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder", "name": "TestCancelMarginOrder", "file_path": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java", "superclasses": "", "methods": ["[void]testCancelMarginOrderWithoutParameters()", "[void]testCancelMarginOcoOrder()"], "method_uris": ["src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelMarginOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelMarginOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().cancelOrder(parameters));\n    }\n\n    @Test\n    public void testCancelMarginOcoOrder() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestAllPairs.java.TestAllPairs", "name": "TestAllPairs", "file_path": "src/test/java/unit/spot/margin/TestAllPairs.java", "superclasses": "", "methods": ["[void]testAllPairs()"], "method_uris": ["src/test/java/unit/spot/margin/TestAllPairs.java.TestAllPairs.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAllPairs {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAllPairs() {\n        String path = \"/sapi/v1/margin/allPairs\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().allPairs();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount", "name": "TestDisableIsolatedAccount", "file_path": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java", "superclasses": "", "methods": ["[void]testDisableIsolatedAccountWithoutParameters()", "[void]testDisableIsolatedAccount()"], "method_uris": ["src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDisableIsolatedAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDisableIsolatedAccountWithoutParameters() {\n        String path = \"/sapi/v1/margin/isolated/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().disableIsolatedAccount(parameters));\n    }\n\n    @Test\n    public void testDisableIsolatedAccount() {\n        String path = \"/sapi/v1/margin/isolated/account?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().disableIsolatedAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java.TestAutoRepayFuturesStatus", "name": "TestAutoRepayFuturesStatus", "file_path": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java", "superclasses": "", "methods": ["[void]testAutoRepayFuturesStatus()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java.TestAutoRepayFuturesStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAutoRepayFuturesStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAutoRepayFuturesStatus() {\n        String path = \"/sapi/v1/portfolio/repay-futures-switch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().autoRepayFuturesStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java.TestAssetIndexPrice", "name": "TestAssetIndexPrice", "file_path": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java", "superclasses": "", "methods": ["[void]testQueryPortfolioMarginAssetIndexPrice()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java.TestAssetIndexPrice.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssetIndexPrice {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testQueryPortfolioMarginAssetIndexPrice() {\n        String path = \"/sapi/v1/portfolio/asset-index-price\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().assetIndexPrice(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer", "name": "TestBnbTransfer", "file_path": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java", "superclasses": "", "methods": ["[void]testBnbTransferWithoutParameters()", "[void]testBnbTransfer()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBnbTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double amount = 1.01;\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBnbTransferWithoutParameters() {\n        String path = \"/sapi/v1/portfolio/bnb-transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createPortfolioMargin().bnbTransfer(parameters));\n    }\n    \n    @Test\n    public void testBnbTransfer() {\n        String path = \"/sapi/v1/portfolio/bnb-transfer?transferSide=TO_UM&amount=1.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transferSide\", \"TO_UM\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().bnbTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 1.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 1.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java.TestGetAccount", "name": "TestGetAccount", "file_path": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java", "superclasses": "", "methods": ["[void]testGetAccount()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestGetAccount.java.TestGetAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetAccount() {\n        String path = \"/sapi/v1/portfolio/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().getAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java.TestCollateralRate", "name": "TestCollateralRate", "file_path": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java", "superclasses": "", "methods": ["[void]testCollateralRate()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java.TestCollateralRate.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCollateralRate {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCollateralRate() {\n        String path = \"/sapi/v1/portfolio/collateralRate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().collateralRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java.TestBankruptcyLoanRecord", "name": "TestBankruptcyLoanRecord", "file_path": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java", "superclasses": "", "methods": ["[void]testBankruptcyLoanRecord()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java.TestBankruptcyLoanRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBankruptcyLoanRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBankruptcyLoanRecord() {\n        String path = \"/sapi/v1/portfolio/pmLoan\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().bankruptcyLoanRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java.TestRepayFutures", "name": "TestRepayFutures", "file_path": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java", "superclasses": "", "methods": ["[void]testRepayFutures()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java.TestRepayFutures.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRepayFutures {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRepayFutures() {\n        String path = \"/sapi/v1/portfolio/repay-futures-negative-balance\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().repayFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection", "name": "TestAssetCollection", "file_path": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java", "superclasses": "", "methods": ["[void]testAssetCollectionWithoutParameters()", "[void]testAssetCollection()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssetCollection {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAssetCollectionWithoutParameters() {\n        String path = \"/sapi/v1/portfolio/asset-collection\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createPortfolioMargin().assetCollection(parameters));\n    }\n    \n    @Test\n    public void testAssetCollection() {\n        String path = \"/sapi/v1/portfolio/asset-collection?asset=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().assetCollection(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java.TestAssetLeverage", "name": "TestAssetLeverage", "file_path": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java", "superclasses": "", "methods": ["[void]testAssetLeverage()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java.TestAssetLeverage.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssetLeverage {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testAssetLeverage() {\n        String path = \"/sapi/v1/portfolio/margin-asset-leverage\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().assetLeverage();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures", "name": "TestSwitchAutoRepayFutures", "file_path": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java", "superclasses": "", "methods": ["[void]testSwitchAutoRepayFuturesWithoutParameters()", "[void]testSwitchAutoRepayFutures()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSwitchAutoRepayFutures {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSwitchAutoRepayFuturesWithoutParameters() {\n        String path = \"/sapi/v1/portfolio/repay-futures-switch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createPortfolioMargin().switchAutoRepayFutures(parameters));\n    }\n    \n    @Test\n    public void testSwitchAutoRepayFutures() {\n        String path = \"/sapi/v1/portfolio/repay-futures-switch?autoRepay=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoRepay\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().switchAutoRepayFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestRepay.java.TestRepay", "name": "TestRepay", "file_path": "src/test/java/unit/spot/portfoliomargin/TestRepay.java", "superclasses": "", "methods": ["[void]testRepay()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestRepay.java.TestRepay.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRepay {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRepay() {\n        String path = \"/sapi/v1/portfolio/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().repay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java.TestAutoCollection", "name": "TestAutoCollection", "file_path": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java", "superclasses": "", "methods": ["[void]testFundAutocollection()"], "method_uris": ["src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java.TestAutoCollection.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAutoCollection {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFundAutocollection() {\n        String path = \"/sapi/v1/portfolio/auto-collection\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().autoCollection(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder", "name": "TestCancelOrder", "file_path": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java", "superclasses": "", "methods": ["[void]testCancelOrderWithoutParameters()", "[void]testCancelOrder()"], "method_uris": ["src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long algoId = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelOrderWithoutParameters() {\n        String path = \"/sapi/v1/algo/spot/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().cancelOrder(parameters));\n    }\n    \n    @Test\n    public void testCancelOrder() {\n        String path = \"/sapi/v1/algo/spot/order?algoId=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long algoId = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "algoId = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java.TestGetHistoricalOrders", "name": "TestGetHistoricalOrders", "file_path": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java", "superclasses": "", "methods": ["[void]testGetHistoricalOrders()"], "method_uris": ["src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java.TestGetHistoricalOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetHistoricalOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testGetHistoricalOrders() {\n        String path = \"/sapi/v1/algo/spot/historicalOrders?symbol=BNBUSDT&side=SELL\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getHistoricalOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders", "name": "TestGetSubOrders", "file_path": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java", "superclasses": "", "methods": ["[void]testQuerySubOrdersWithoutParameters()", "[void]testQuerySubOrders()"], "method_uris": ["src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetSubOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long algoId = 14511;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testQuerySubOrdersWithoutParameters() {\n        String path = \"/sapi/v1/algo/spot/subOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().getSubOrders(parameters));\n    }\n    \n    @Test\n    public void testQuerySubOrders() {\n        String path = \"/sapi/v1/algo/spot/subOrders?algoId=14511\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getSubOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long algoId = 14511;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "algoId = 14511", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java.TestGetOpenTwapOrders", "name": "TestGetOpenTwapOrders", "file_path": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java", "superclasses": "", "methods": ["[void]testGetOpenOrders()"], "method_uris": ["src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java.TestGetOpenTwapOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOpenTwapOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testGetOpenOrders() {\n        String path = \"/sapi/v1/algo/spot/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder", "name": "TestTwapOrder", "file_path": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java", "superclasses": "", "methods": ["[void]testTwapOrderWithoutParameters()", "[void]testTwapOrder()"], "method_uris": ["src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTwapOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final double quantity = 1;\n    private static final long duration = 300;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTwapOrderWithoutParameters() {\n        String path = \"/sapi/v1/algo/spot/newOrderTwap\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().twapOrder(parameters));\n    }\n    \n    @Test\n    public void testTwapOrder() {\n        String path = \"/sapi/v1/algo/spot/newOrderTwap?symbol=BNBUSDT&side=SELL&quantity=1&duration=300\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"duration\", duration);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().twapOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double quantity = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 1", "syntax_pass": true}, {"attribute_expression": "private static final long duration = 300;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "duration = 300", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/pay/TestTransactions.java.TestTransactions", "name": "TestTransactions", "file_path": "src/test/java/unit/spot/pay/TestTransactions.java", "superclasses": "", "methods": ["[void]testTransactions()"], "method_uris": ["src/test/java/unit/spot/pay/TestTransactions.java.TestTransactions.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTransactions {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTransactions() {\n        String path = \"/sapi/v1/pay/transactions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPay().transactions(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleList.java.TestHashrateResaleList", "name": "TestHashrateResaleList", "file_path": "src/test/java/unit/spot/mining/TestHashrateResaleList.java", "superclasses": "", "methods": ["[void]testHashrateResaleList()"], "method_uris": ["src/test/java/unit/spot/mining/TestHashrateResaleList.java.TestHashrateResaleList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestHashrateResaleList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int pageIndex = 1;\n    private final int pageSize = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testHashrateResaleList() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/details/list?pageIndex=1&pageSize=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"pageIndex\", pageIndex);\n        parameters.put(\"pageSize\", pageSize);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().hashrateResaleList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int pageIndex = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "pageIndex = 1", "syntax_pass": true}, {"attribute_expression": "private final int pageSize = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "pageSize = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest", "name": "TestHashrateResaleRequest", "file_path": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java", "superclasses": "", "methods": ["[void]testHashrateResaleRequestWithoutParameters()", "[void]testHashrateResaleRequest()"], "method_uris": ["src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestHashrateResaleRequest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long endDate = 1234567L;\n    private final long startDate = 1234566L;\n    private final long hashRate = 1111L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testHashrateResaleRequestWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/config\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().hashrateResaleRequest(parameters));\n    }\n\n    @Test\n    public void testHashrateResaleRequest() {\n        String path = \"/sapi/v1/mining/hash-transfer/config?userName=test&algo=sha256&endDate=1234567&startDate=1234566&toPoolUser=test&hashRate=1111\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"test\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", endDate);\n        parameters.put(\"startDate\", startDate);\n        parameters.put(\"toPoolUser\", \"test\");\n        parameters.put(\"hashRate\", hashRate);\n\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().hashrateResaleRequest(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long endDate = 1234567L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endDate = 1234567L", "syntax_pass": true}, {"attribute_expression": "private final long startDate = 1234566L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startDate = 1234566L", "syntax_pass": true}, {"attribute_expression": "private final long hashRate = 1111L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "hashRate = 1111L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList", "name": "TestAccountList", "file_path": "src/test/java/unit/spot/mining/TestAccountList.java", "superclasses": "", "methods": ["[void]testAccountListWithoutParameters()", "[void]testAccountList()"], "method_uris": ["src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAccountList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccountListWithoutParameters() {\n        String path = \"/sapi/v1/mining/statistics/user/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().accountList(parameters));\n    }\n\n    @Test\n    public void testAccountList() {\n        String path = \"/sapi/v1/mining/statistics/user/list?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().accountList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList", "name": "TestDetailMinerList", "file_path": "src/test/java/unit/spot/mining/TestDetailMinerList.java", "superclasses": "", "methods": ["[void]testDetailMinerListWithoutParameters()", "[void]testDetailMinerList()"], "method_uris": ["src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDetailMinerList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDetailMinerListWithoutParameters() {\n        String path = \"/sapi/v1/mining/worker/detail\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().detailMinerList(parameters));\n    }\n\n    @Test\n    public void testDetailMinerList() {\n        String path = \"/sapi/v1/mining/worker/detail?algo=sha256&userName=test1&workerName=test2\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test1\");\n        parameters.put(\"workerName\", \"test2\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().detailMinerList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList", "name": "TestMinerList", "file_path": "src/test/java/unit/spot/mining/TestMinerList.java", "superclasses": "", "methods": ["[void]testMinerListWithoutParameters()", "[void]testMinerList()"], "method_uris": ["src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMinerList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMinerListWithoutParameters() {\n        String path = \"/sapi/v1/mining/worker/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().minerList(parameters));\n    }\n\n    @Test\n    public void testMinerList() {\n        String path = \"/sapi/v1/mining/worker/list?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().minerList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList", "name": "TestBonusList", "file_path": "src/test/java/unit/spot/mining/TestBonusList.java", "superclasses": "", "methods": ["[void]testBonusListWithoutParameters()", "[void]testBonusList()"], "method_uris": ["src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBonusList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBonusListWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/other\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().bonusList(parameters));\n    }\n\n    @Test\n    public void testBonusList() {\n        String path = \"sapi/v1/mining/payment/other?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().bonusList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig", "name": "TestCancelHashrateResaleConfig", "file_path": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java", "superclasses": "", "methods": ["[void]testCancelHashrateResaleConfigWithoutParameters()", "[void]testCancelHashrateResaleConfig()"], "method_uris": ["src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelHashrateResaleConfig {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private final int configId = 123;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelHashrateResaleConfigWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/cancel\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().cancelHashrateResaleConfig(parameters));\n    }\n\n    @Test\n    public void testCancelHashrateResaleConfig() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/cancel?configId=123&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().cancelHashrateResaleConfig(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int configId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "configId = 123", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning", "name": "TestAccountEarning", "file_path": "src/test/java/unit/spot/mining/TestAccountEarning.java", "superclasses": "", "methods": ["[void]testAccountEarningWithoutParameters()", "[void]testAccountEarning()"], "method_uris": ["src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAccountEarning {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccountEarningWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/uid\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().accountEarning(parameters));\n    }\n\n    @Test\n    public void testAccountEarning() {\n        String path = \"/sapi/v1/mining/payment/uid?algo=sha256\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().accountEarning(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList", "name": "TestStatisticsList", "file_path": "src/test/java/unit/spot/mining/TestStatisticsList.java", "superclasses": "", "methods": ["[void]testStatisticsListWithoutParameters()", "[void]testStatisticsList()"], "method_uris": ["src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestStatisticsList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testStatisticsListWithoutParameters() {\n        String path = \"/sapi/v1/mining/statistics/user/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().statsticsList(parameters));\n    }\n\n    @Test\n    public void testStatisticsList() {\n        String path = \"/sapi/v1/mining/statistics/user/status?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().statsticsList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestAlogrithm.java.TestAlogrithm", "name": "TestAlogrithm", "file_path": "src/test/java/unit/spot/mining/TestAlogrithm.java", "superclasses": "", "methods": ["[void]testAlogrithm()"], "method_uris": ["src/test/java/unit/spot/mining/TestAlogrithm.java.TestAlogrithm.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAlogrithm {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAlogrithm() {\n        String path = \"/sapi/v1/mining/pub/algoList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().algorithm(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestCoinName.java.TestCoinName", "name": "TestCoinName", "file_path": "src/test/java/unit/spot/mining/TestCoinName.java", "superclasses": "", "methods": ["[void]testCoinName()"], "method_uris": ["src/test/java/unit/spot/mining/TestCoinName.java.TestCoinName.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCoinName {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCoinName() {\n        String path = \"/sapi/v1/mining/pub/coinList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().coinName(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList", "name": "TestEarningList", "file_path": "src/test/java/unit/spot/mining/TestEarningList.java", "superclasses": "", "methods": ["[void]testEarningListWithoutParameters()", "[void]testEarningList()"], "method_uris": ["src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEarningList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEarningListWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().earningList(parameters));\n    }\n\n    @Test\n    public void testEarningList() {\n        String path = \"/sapi/v1/mining/payment/list?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().earningList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail", "name": "TestHashrateResaleDetail", "file_path": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java", "superclasses": "", "methods": ["[void]testHashrateResaleDetailWithoutParameters()", "[void]testHashrateResaleDetail()"], "method_uris": ["src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestHashrateResaleDetail {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int configId = 123;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testHashrateResaleDetailWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/profit/details\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().hashrateResaleDetail(parameters));\n    }\n\n    @Test\n    public void testHashrateResaleDetail() {\n        String path = \"/sapi/v1/mining/hash-transfer/profit/details?configId=123&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().hashrateResaleDetail(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int configId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "configId = 123", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments", "name": "TestPayments", "file_path": "src/test/java/unit/spot/fiat/TestPayments.java", "superclasses": "", "methods": ["[void]testPaymentsWithoutParameters()", "[void]testPayments()"], "method_uris": ["src/test/java/unit/spot/fiat/TestPayments.java.TestPayments.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestPayments {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testPaymentsWithoutParameters() {\n        String path = \"/sapi/v1/fiat/payments\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFiat().payments(parameters));\n    }\n\n    @Test\n    public void testPayments() {\n        String path = \"/sapi/v1/fiat/payments?transactionType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFiat().payments(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders", "name": "TestOrders", "file_path": "src/test/java/unit/spot/fiat/TestOrders.java", "superclasses": "", "methods": ["[void]testOrdersWithoutParameters()", "[void]testOrders()"], "method_uris": ["src/test/java/unit/spot/fiat/TestOrders.java.TestOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOrdersWithoutParameters() {\n        String path = \"/sapi/v1/fiat/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFiat().orders(parameters));\n    }\n\n    @Test\n    public void testOrders() {\n        String path = \"/sapi/v1/fiat/orders?transactionType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFiat().orders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking", "name": "TestSubEthStaking", "file_path": "src/test/java/unit/spot/staking/TestSubEthStaking.java", "superclasses": "", "methods": ["[void]testSubEthStakingWithoutParameters()", "[void]testSubEthStaking()"], "method_uris": ["src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubEthStaking {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double amount = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubEthStakingWithoutParameters() {\n        String path = \"/sapi/v2/eth-staking/eth/stake\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createStaking().subEthStaking(parameters));\n    }\n\n    @Test\n    public void testSubEthStaking() {\n        String path = \"/sapi/v2/eth-staking/eth/stake?amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().subEthStaking(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java.TestEthStakingWbethWrapHistory", "name": "TestEthStakingWbethWrapHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java", "superclasses": "", "methods": ["[void]testEthStakingWbethWrapHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java.TestEthStakingWbethWrapHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingWbethWrapHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingWbethWrapHistory() {\n        String path = \"/sapi/v1/eth-staking/wbeth/history/wrapHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethWrapHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth", "name": "TestWrapEthStakingWbeth", "file_path": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java", "superclasses": "", "methods": ["[void]testWrapEthStakingWbethWithoutParameters()", "[void]testWrapEthStakingWbeth()"], "method_uris": ["src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestWrapEthStakingWbeth {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double amount = 0.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testWrapEthStakingWbethWithoutParameters() {\n        String path = \"/sapi/v1/eth-staking/wbeth/wrap\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createStaking().wrapEthStakingWbeth(parameters));\n    }\n\n    @Test\n    public void testWrapEthStakingWbeth() {\n        String path = \"/sapi/v1/eth-staking/wbeth/wrap?amount=0.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().wrapEthStakingWbeth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking", "name": "TestRedeemEthStaking", "file_path": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java", "superclasses": "", "methods": ["[void]testRedeemEthStakingWithoutParameters()", "[void]testRedeemEthStaking()"], "method_uris": ["src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeemEthStaking {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double amount = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemEthStakingWithoutParameters() {\n        String path = \"/sapi/v1/eth-staking/eth/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createStaking().redeemEthStaking(parameters));\n    }\n\n    @Test\n    public void testRedeemEthStaking() {\n        String path = \"/sapi/v1/eth-staking/eth/redeem?amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().redeemEthStaking(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java.TestEthStakingSubHistory", "name": "TestEthStakingSubHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java", "superclasses": "", "methods": ["[void]testEthStakingSubHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingSubHistory.java.TestEthStakingSubHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingSubHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingSubHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/stakingHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingSubHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java.TestEthStakingRateHistory", "name": "TestEthStakingRateHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java", "superclasses": "", "methods": ["[void]testEthStakingRateHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingRateHistory.java.TestEthStakingRateHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingRateHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingRateHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/rateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java.TestEthStakingRewardsHistory", "name": "TestEthStakingRewardsHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java", "superclasses": "", "methods": ["[void]testEthStakingRewardsHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java.TestEthStakingRewardsHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingRewardsHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingRewardsHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/rewardsHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java.TestEthStakingRedeemHistory", "name": "TestEthStakingRedeemHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java", "superclasses": "", "methods": ["[void]testEthStakingRedeemHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java.TestEthStakingRedeemHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingRedeemHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingRedeemHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/redemptionHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRedeemHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java.TestEthStakingWbethRewardHistory", "name": "TestEthStakingWbethRewardHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java", "superclasses": "", "methods": ["[void]testEthStakingWbethRewardHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java.TestEthStakingWbethRewardHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingWbethRewardHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingWbethRewardHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/wbethRewardsHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethRewardHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingAccount.java.TestEthStakingAccount", "name": "TestEthStakingAccount", "file_path": "src/test/java/unit/spot/staking/TestEthStakingAccount.java", "superclasses": "", "methods": ["[void]testEthStakingQuota()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingAccount.java.TestEthStakingAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingQuota() {\n        String path = \"/sapi/v2/eth-staking/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java.TestEthStakingWbethUnwrapHistory", "name": "TestEthStakingWbethUnwrapHistory", "file_path": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java", "superclasses": "", "methods": ["[void]testEthStakingWbethUnwrapHistory()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java.TestEthStakingWbethUnwrapHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingWbethUnwrapHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingWbethUnwrapHistory() {\n        String path = \"/sapi/v1/eth-staking/wbeth/history/unwrapHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethUnwrapHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingQuota.java.TestEthStakingQuota", "name": "TestEthStakingQuota", "file_path": "src/test/java/unit/spot/staking/TestEthStakingQuota.java", "superclasses": "", "methods": ["[void]testEthStakingQuota()"], "method_uris": ["src/test/java/unit/spot/staking/TestEthStakingQuota.java.TestEthStakingQuota.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEthStakingQuota {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEthStakingQuota() {\n        String path = \"/sapi/v1/eth-staking/eth/quota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey", "name": "TestExtendIsolatedMarginListenKey", "file_path": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java", "superclasses": "", "methods": ["[void]testExtendIsolatedListenKeyWithoutParameters()", "[void]testExtendIsolatedListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestExtendIsolatedMarginListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testExtendIsolatedListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().extendIsolatedMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testExtendIsolatedListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().extendIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey", "name": "TestExtendMarginListenKey", "file_path": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java", "superclasses": "", "methods": ["[void]testExtendMarginListenKeyWithoutParameters()", "[void]testExtendMarginListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestExtendMarginListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testExtendMarginListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().extendMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testExtendMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().extendMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey", "name": "TestCloseMarginListenKey", "file_path": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java", "superclasses": "", "methods": ["[void]testCloseMarginListenKeyWithoutParameters()", "[void]testCloseMarginListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCloseMarginListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloseMarginListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testCloseMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey", "name": "TestCloseIsolatedMarginListenKey", "file_path": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java", "superclasses": "", "methods": ["[void]testCloseIsolatedListenKeyWithoutParameters()", "[void]testCloseIsolatedListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCloseIsolatedMarginListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloseIsolatedListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeIsolatedMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testCloseIsolatedListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestCreateListenKey.java.TestCreateListenKey", "name": "TestCreateListenKey", "file_path": "src/test/java/unit/spot/userdata/TestCreateListenKey.java", "superclasses": "", "methods": ["[void]testCreateListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestCreateListenKey.java.TestCreateListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCreateListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private final String MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCreateListenKey() {\n        String path = \"/api/v3/userDataStream\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().createListenKey();\n        assertEquals(MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final String MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey", "name": "TestCloseListenKey", "file_path": "src/test/java/unit/spot/userdata/TestCloseListenKey.java", "superclasses": "", "methods": ["[void]testCloseListenKeyWithoutParameters()", "[void]testCloseListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCloseListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloseListenKeyWithoutParameters() {\n        String path = \"/api/v3/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeListenKey(parameters));\n    }\n\n    @Test\n    public void testCloseListenKey() {\n        String path = \"/api/v3/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey", "name": "TestExtendListenKey", "file_path": "src/test/java/unit/spot/userdata/TestExtendListenKey.java", "superclasses": "", "methods": ["[void]testExtendListenKeyWithoutParameters()", "[void]testExtendListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestExtendListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testExtendListenKeyWithoutParameters() {\n        String path = \"/api/v3/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().extendListenKey(parameters));\n    }\n\n    @Test\n    public void testExtendListenKey() {\n        String path = \"/api/v3/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().extendListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey", "name": "TestCreateIsolatedMarginListenKey", "file_path": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java", "superclasses": "", "methods": ["[void]testCreateIsolatedListenKeyWithoutParameters()", "[void]testCreateIsolatedListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCreateIsolatedMarginListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private final String MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCreateIsolatedListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().createIsolatedMarginListenKey(parameters));\n    }\n\n    @Test\n    public void testCreateIsolatedListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().createIsolatedMarginListenKey(parameters);\n        assertEquals(MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final String MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java.TestCreateMarginListenKey", "name": "TestCreateMarginListenKey", "file_path": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java", "superclasses": "", "methods": ["[void]testCreateListenKey()"], "method_uris": ["src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java.TestCreateMarginListenKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCreateMarginListenKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private final String MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCreateListenKey() {\n        String path = \"/sapi/v1/userDataStream\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().createMarginListenKey();\n        assertEquals(MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final String MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MOCK_RESPONSE = \"{\\\"listenKey\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java.TestTargetAssetList", "name": "TestTargetAssetList", "file_path": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java", "superclasses": "", "methods": ["[void]testTargetAssetList()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestTargetAssetList.java.TestTargetAssetList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTargetAssetList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testTargetAssetList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java.TestIndexPlanRebalanceInfo", "name": "TestIndexPlanRebalanceInfo", "file_path": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java", "superclasses": "", "methods": ["[void]testIndexPlanRebalanceInfo()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java.TestIndexPlanRebalanceInfo.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIndexPlanRebalanceInfo {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testIndexPlanRebalanceInfo() {\n        String path = \"/sapi/v1/lending/auto-invest/rebalance/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory", "name": "TestIndexPlanRedeemHistory", "file_path": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java", "superclasses": "", "methods": ["[void]testOnetimeTransactionStatusWithoutParameters()", "[void]testIndexPlanRedeemHistory()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIndexPlanRedeemHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final long requestId = 12345;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOnetimeTransactionStatusWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().indexPlanRedeemHistory(parameters));\n    }\n    \n    @Test\n    public void testIndexPlanRedeemHistory() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem/history?requestId=12345\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"requestId\", requestId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRedeemHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long requestId = 12345;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "requestId = 12345", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList", "name": "TestSourceAssetList", "file_path": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java", "superclasses": "", "methods": ["[void]testSourceAssetListWithoutParameters()", "[void]testSourceAssetList()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSourceAssetList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSourceAssetListWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/source-asset/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().sourceAssetList(parameters));\n    }\n    \n    @Test\n    public void testSourceAssetList() {\n        String path = \"/sapi/v1/lending/auto-invest/source-asset/list?usageType=RECURRING\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"usageType\", \"RECURRING\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().sourceAssetList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java.TestAllSourceAndTargetAssets", "name": "TestAllSourceAndTargetAssets", "file_path": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java", "superclasses": "", "methods": ["[void]testAllSourceAndTargetAssets()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java.TestAllSourceAndTargetAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAllSourceAndTargetAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testAllSourceAndTargetAssets() {\n        String path = \"/sapi/v1/lending/auto-invest/all/asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().allSourceAndTargetAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan", "name": "TestRedeemIndexPlan", "file_path": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java", "superclasses": "", "methods": ["[void]testRedeemIndexPlanWithoutParameters()", "[void]testRedeemIndexPlan()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeemIndexPlan {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long indexId = 123456;\n    private static final Integer redemptionPercentage = 10;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemIndexPlanWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().redeemIndexPlan(parameters));\n    }\n    \n    @Test\n    public void testRedeemIndexPlan() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem?indexId=123456&redemptionPercentage=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n        parameters.put(\"redemptionPercentage\", redemptionPercentage);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().redeemIndexPlan(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long indexId = 123456;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "indexId = 123456", "syntax_pass": true}, {"attribute_expression": "private static final Integer redemptionPercentage = 10;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Integer", "name": "redemptionPercentage = 10", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo", "name": "TestIndexInfo", "file_path": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java", "superclasses": "", "methods": ["[void]testIndexInfoWithoutParameters()", "[void]testIndexInfo()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestIndexInfo {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long indexId = 1234;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testIndexInfoWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/index/info\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().indexInfo(parameters));\n    }\n    \n    @Test\n    public void testIndexInfo() {\n        String path = \"/sapi/v1/lending/auto-invest/index/info?indexId=1234\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long indexId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "indexId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus", "name": "TestChangePlanStatus", "file_path": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java", "superclasses": "", "methods": ["[void]testChangePlanStatusWithoutParameters()", "[void]testChangePlanStatus()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestChangePlanStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long planId = 1234;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testChangePlanStatusWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/edit-status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().changePlanStatus(parameters));\n    }\n    \n    @Test\n    public void testChangePlanStatus() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/edit-status?planId=1234&status=PAUSED\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planId\", planId);\n        parameters.put(\"status\", \"PAUSED\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().changePlanStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long planId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "planId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java.TestPlanSubsHistory", "name": "TestPlanSubsHistory", "file_path": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java", "superclasses": "", "methods": ["[void]testPlanSubsHistory()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java.TestPlanSubsHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestPlanSubsHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testPlanSubsHistory() {\n        String path = \"/sapi/v1/lending/auto-invest/history/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().planSubsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList", "name": "TestTargetAssetRoiList", "file_path": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java", "superclasses": "", "methods": ["[void]testTargetAssetRoiListWithoutParameters()", "[void]testTargetAssetRoiList()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTargetAssetRoiList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTargetAssetRoiListWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().targetAssetRoiList(parameters));\n    }\n    \n    @Test\n    public void testTargetAssetRoiList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list?targetAsset=BTC&hisRoiType=FIVE_YEAR\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetRoiList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus", "name": "TestOnetimeTransactionStatus", "file_path": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java", "superclasses": "", "methods": ["[void]testOnetimeTransactionStatusWithoutParameters()", "[void]testOnetimeTransactionStatus()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestOnetimeTransactionStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long transactionId = 12345;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOnetimeTransactionStatusWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().oneTimeTransactionStatus(parameters));\n    }\n    \n    @Test\n    public void testOnetimeTransactionStatus() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off/status?transactionId=12345\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionId\", transactionId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().oneTimeTransactionStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long transactionId = 12345;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "transactionId = 12345", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans", "name": "TestUserIndexPlans", "file_path": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java", "superclasses": "", "methods": ["[void]testUserIndexPlansWithoutParameters()", "[void]testUserIndexPlans()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUserIndexPlans {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n    private static final long indexId = 1234;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testUserIndexPlansWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/index/user-summary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().userIndexPlans(parameters));\n    }\n    \n    @Test\n    public void testUserIndexPlans() {\n        String path = \"/sapi/v1/lending/auto-invest/index/user-summary?indexId=1234\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().userIndexPlans(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long indexId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "indexId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction", "name": "TestSubmitOneTimeTransaction", "file_path": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java", "superclasses": "", "methods": ["[void]testSubmitOneTimeTransactionWithoutParameters()", "[void]testSubmitOneTimeTransaction()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubmitOneTimeTransaction {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final double subscriptionAmount = 10.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubmitOneTimeTransactionWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().submitOneTimeTransaction(parameters));\n    }\n    \n    @Test\n    public void testSubmitOneTimeTransaction() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off?sourceType=MAIN_SITE&subscriptionAmount=10.1&sourceAsset=USDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", \"MAIN_SITE\");\n        parameters.put(\"subscriptionAmount\", subscriptionAmount);\n        parameters.put(\"sourceAsset\", \"USDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().submitOneTimeTransaction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double subscriptionAmount = 10.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "subscriptionAmount = 10.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList", "name": "TestPlansList", "file_path": "src/test/java/unit/spot/autoinvest/TestPlansList.java", "superclasses": "", "methods": ["[void]testPlansListWithoutParameters()", "[void]testPlansList()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestPlansList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testPlansListWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().plansList(parameters));\n    }\n    \n    @Test\n    public void testPlansList() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/list?planType=SINGLE\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planType\", \"SINGLE\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().plansList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java.TestHoldingPlan", "name": "TestHoldingPlan", "file_path": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java", "superclasses": "", "methods": ["[void]testHoldingPlan()"], "method_uris": ["src/test/java/unit/spot/autoinvest/TestHoldingPlan.java.TestHoldingPlan.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestHoldingPlan {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testHoldingPlan() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/id\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().holdingPlan(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestDustLog.java.TestDustLog", "name": "TestDustLog", "file_path": "src/test/java/unit/spot/wallet/TestDustLog.java", "superclasses": "", "methods": ["[void]testDustLog()"], "method_uris": ["src/test/java/unit/spot/wallet/TestDustLog.java.TestDustLog.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDustLog {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDustLog() {\n        String path = \"/sapi/v1/asset/dribblet\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().dustLog(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestCoinInfo.java.TestCoinInfo", "name": "TestCoinInfo", "file_path": "src/test/java/unit/spot/wallet/TestCoinInfo.java", "superclasses": "", "methods": ["[void]testCoinInfo()"], "method_uris": ["src/test/java/unit/spot/wallet/TestCoinInfo.java.TestCoinInfo.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCoinInfo {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCoinInfo() {\n        String path = \"/sapi/v1/capital/config/getall\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().coinInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestWalletBalance.java.TestWalletBalance", "name": "TestWalletBalance", "file_path": "src/test/java/unit/spot/wallet/TestWalletBalance.java", "superclasses": "", "methods": ["[void]testWalletBalance()"], "method_uris": ["src/test/java/unit/spot/wallet/TestWalletBalance.java.TestWalletBalance.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestWalletBalance {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testWalletBalance() {\n        String path = \"/sapi/v1/asset/wallet/balance\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().walletBalance(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestGetUserAsset.java.TestGetUserAsset", "name": "TestGetUserAsset", "file_path": "src/test/java/unit/spot/wallet/TestGetUserAsset.java", "superclasses": "", "methods": ["[void]testGetUserAsset()"], "method_uris": ["src/test/java/unit/spot/wallet/TestGetUserAsset.java.TestGetUserAsset.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetUserAsset {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetUserAsset() {\n        String path = \"/sapi/v3/asset/getUserAsset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().getUserAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses", "name": "TestDepositAddresses", "file_path": "src/test/java/unit/spot/wallet/TestDepositAddresses.java", "superclasses": "", "methods": ["[void]testDepositAddressesWithoutParameters()", "[void]testDepositAddresses()"], "method_uris": ["src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDepositAddresses {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDepositAddressesWithoutParameters() {\n        String path = \"/sapi/v1/capital/deposit/address/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().depositAddresses(parameters));\n    }\n    \n    @Test\n    public void testDepositAddresses() {\n        String path = \"/sapi/v1/capital/deposit/address/list?coin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().depositAddresses(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw", "name": "TestWithdraw", "file_path": "src/test/java/unit/spot/wallet/TestWithdraw.java", "superclasses": "", "methods": ["[void]testWithdrawWithoutCoin()", "[void]testWithdrawWithoutAmount()", "[void]testWithdrawWithoutAddress()", "[void]testWithdraw()"], "method_uris": ["src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestWithdraw {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testWithdrawWithoutCoin() {\n        String path = \"/sapi/v1/capital/withdraw/apply?amount=0.01&address=add\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        parameters.put(\"address\", \"add\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().withdraw(parameters));\n    }\n\n    @Test\n    public void testWithdrawWithoutAmount() {\n        String path = \"/sapi/v1/capital/withdraw/apply?coin=BNB&address=add\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n        parameters.put(\"address\", \"add\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().withdraw(parameters));\n    }\n\n    @Test\n    public void testWithdrawWithoutAddress() {\n        String path = \"/sapi/v1/capital/withdraw/apply?coin=BNB&amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().withdraw(parameters));\n    }\n\n    @Test\n    public void testWithdraw() {\n        String path = \"/sapi/v1/capital/withdraw/apply?coin=BNB&amount=0.01&address=add\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"address\", \"add\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().withdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestAssetDividend.java.TestAssetDividend", "name": "TestAssetDividend", "file_path": "src/test/java/unit/spot/wallet/TestAssetDividend.java", "superclasses": "", "methods": ["[void]testAssetDividend()"], "method_uris": ["src/test/java/unit/spot/wallet/TestAssetDividend.java.TestAssetDividend.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssetDividend {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAssetDividend() {\n        String path = \"/sapi/v1/asset/assetDividend?asset=BNB&startTime=1591063000087&endTime=1591063000087&limit=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"startTime\", \"1591063000087\");\n        parameters.put(\"endTime\", \"1591063000087\");\n        parameters.put(\"limit\", \"10\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().assetDividend(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java.TestDisableFastWithdraw", "name": "TestDisableFastWithdraw", "file_path": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java", "superclasses": "", "methods": ["[void]testDisableFastWithdraw()"], "method_uris": ["src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java.TestDisableFastWithdraw.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDisableFastWithdraw {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDisableFastWithdraw() {\n        String path = \"/sapi/v1/account/disableFastWithdrawSwitch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().disableFastWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java.TestEnableFastWithdraw", "name": "TestEnableFastWithdraw", "file_path": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java", "superclasses": "", "methods": ["[void]testEnableFastWithdraw()"], "method_uris": ["src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java.TestEnableFastWithdraw.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEnableFastWithdraw {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testEnableFastWithdraw() {\n        String path = \"/sapi/v1/account/enableFastWithdrawSwitch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().enableFastWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestAssetDetail.java.TestAssetDetail", "name": "TestAssetDetail", "file_path": "src/test/java/unit/spot/wallet/TestAssetDetail.java", "superclasses": "", "methods": ["[void]testAssetDetail()"], "method_uris": ["src/test/java/unit/spot/wallet/TestAssetDetail.java.TestAssetDetail.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssetDetail {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAssetDetail() {\n        String path = \"/sapi/v1/asset/assetDetail\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().assetDetail(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory", "name": "TestBusdConvertHistory", "file_path": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java", "superclasses": "", "methods": ["[void]testBusdConvertWithWrongParamType()", "[void]testBusdConvertWithoutMandatoryParam()", "[void]testBusdConvertHistory()"], "method_uris": ["src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBusdConvertHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final Integer size = 20;\n    private final Long startTime = 118263400000L;\n    private final Long endTime = 118263407119L;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBusdConvertWithWrongParamType() {\n        String path = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", \"118263400000L\");\n        parameters.put(\"endTime\", \"118263407119L\");\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().busdConvertHistory(parameters));\n    }\n\n    @Test\n    public void testBusdConvertWithoutMandatoryParam() {\n        String path = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().busdConvertHistory(parameters));\n    }\n\n    @Test\n    public void testBusdConvertHistory() {\n        String path = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().busdConvertHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final Integer size = 20;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Integer", "name": "size = 20", "syntax_pass": true}, {"attribute_expression": "private final Long startTime = 118263400000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Long", "name": "startTime = 118263400000L", "syntax_pass": true}, {"attribute_expression": "private final Long endTime = 118263407119L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Long", "name": "endTime = 118263407119L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestApiPermission.java.TestApiPermission", "name": "TestApiPermission", "file_path": "src/test/java/unit/spot/wallet/TestApiPermission.java", "superclasses": "", "methods": ["[void]testApiPermission()"], "method_uris": ["src/test/java/unit/spot/wallet/TestApiPermission.java.TestApiPermission.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestApiPermission {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testApiPermission() {\n        String path = \"/sapi/v1/account/apiRestrictions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().apiPermission(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestSystemStatus.java.TestSystemStatus", "name": "TestSystemStatus", "file_path": "src/test/java/unit/spot/wallet/TestSystemStatus.java", "superclasses": "", "methods": ["[void]testSystemStatus()"], "method_uris": ["src/test/java/unit/spot/wallet/TestSystemStatus.java.TestSystemStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSystemStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSystemStatus() {\n        String path = \"/sapi/v1/system/status\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().systemStatus();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory", "name": "TestCloudMiningHistory", "file_path": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java", "superclasses": "", "methods": ["[void]testCloudMiningHistoryWithWrongParamType()", "[void]testCloudMiningHistoryWithoutMandatoryParam()", "[void]testCloudMiningHistory()"], "method_uris": ["src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCloudMiningHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final Integer size = 20;\n    private final Long startTime = 118263400000L;\n    private final Long endTime = 118263407119L;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCloudMiningHistoryWithWrongParamType() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", \"118263400000L\");\n        parameters.put(\"endTime\", \"118263407119L\");\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().cloudMiningHistory(parameters));\n    }\n\n    @Test\n    public void testCloudMiningHistoryWithoutMandatoryParam() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().cloudMiningHistory(parameters));\n    }\n\n    @Test\n    public void testCloudMiningHistory() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().cloudMiningHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final Integer size = 20;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Integer", "name": "size = 20", "syntax_pass": true}, {"attribute_expression": "private final Long startTime = 118263400000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Long", "name": "startTime = 118263400000L", "syntax_pass": true}, {"attribute_expression": "private final Long endTime = 118263407119L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Long", "name": "endTime = 118263407119L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java.TestBnbConvertibleAssets", "name": "TestBnbConvertibleAssets", "file_path": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java", "superclasses": "", "methods": ["[void]testBnbConvertibleAssets()"], "method_uris": ["src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java.TestBnbConvertibleAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBnbConvertibleAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBnbConvertibleAssets() {\n        String path = \"/sapi/v1/asset/dust-btc\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().bnbConvertableAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java.TestWithdrawHistory", "name": "TestWithdrawHistory", "file_path": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java", "superclasses": "", "methods": ["[void]testWithdrawHistory()"], "method_uris": ["src/test/java/unit/spot/wallet/TestWithdrawHistory.java.TestWithdrawHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestWithdrawHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testWithdrawHistory() {\n        String path = \"/sapi/v1/capital/withdraw/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().withdrawHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java.TestApplyOneClickArrivalDeposit", "name": "TestApplyOneClickArrivalDeposit", "file_path": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java", "superclasses": "", "methods": ["[void]testApplyOneClickArrivalDeposit()"], "method_uris": ["src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java.TestApplyOneClickArrivalDeposit.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestApplyOneClickArrivalDeposit {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testApplyOneClickArrivalDeposit() {\n        String path = \"/sapi/v1/capital/deposit/credit-apply?txId=123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"txId\", \"123\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().applyOneClickArrivalDeposit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion", "name": "TestSwitchBusdAutoConversion", "file_path": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java", "superclasses": "", "methods": ["[void]testSwitchBusdAutoConversionWithoutParameters()", "[void]testSwitchBusdAutoConversion()"], "method_uris": ["src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSwitchBusdAutoConversion {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSwitchBusdAutoConversionWithoutParameters() {\n        String path = \"/sapi/v1/capital/contract/convertible-coins\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().switchBusdAutoConversion(parameters));\n    }\n    \n    @Test\n    public void testSwitchBusdAutoConversion() {\n        String path = \"/sapi/v1/capital/contract/convertible-coins?coin=USDC&enable=false\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"USDC\");\n        parameters.put(\"enable\", false);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().switchBusdAutoConversion(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java.TestGetBusdAutoConvertions", "name": "TestGetBusdAutoConvertions", "file_path": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java", "superclasses": "", "methods": ["[void]testGetBusdAutoConvertions()"], "method_uris": ["src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java.TestGetBusdAutoConvertions.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetBusdAutoConvertions {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testGetBusdAutoConvertions() {\n        String path = \"/sapi/v1/capital/contract/convertible-coins\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().getBusdAutoConvertions();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestTradeFee.java.TestTradeFee", "name": "TestTradeFee", "file_path": "src/test/java/unit/spot/wallet/TestTradeFee.java", "superclasses": "", "methods": ["[void]testTradeFee()"], "method_uris": ["src/test/java/unit/spot/wallet/TestTradeFee.java.TestTradeFee.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTradeFee {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradeFee() {\n        String path = \"/sapi/v1/asset/tradeFee\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().tradeFee(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java.TestApiTradingStatus", "name": "TestApiTradingStatus", "file_path": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java", "superclasses": "", "methods": ["[void]testApiTradingStatus()"], "method_uris": ["src/test/java/unit/spot/wallet/TestApiTradingStatus.java.TestApiTradingStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestApiTradingStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testApiTradingStatus() {\n        String path = \"/sapi/v1/account/apiTradingStatus\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().apiTradingStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot", "name": "TestAccountSnapshot", "file_path": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java", "superclasses": "", "methods": ["[void]testAccountSnapshotWithoutType()", "[void]testAccountSnapshot()"], "method_uris": ["src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAccountSnapshot {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccountSnapshotWithoutType() {\n        String path = \"/sapi/v1/accountSnapshot\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().accountSnapshot(parameters));\n    }\n\n    @Test\n    public void testAccountSnapshot() {\n        String path = \"/sapi/v1/accountSnapshot?type=SPOT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"SPOT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().accountSnapshot(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestFundingWallet.java.TestFundingWallet", "name": "TestFundingWallet", "file_path": "src/test/java/unit/spot/wallet/TestFundingWallet.java", "superclasses": "", "methods": ["[void]testFundingWallet()"], "method_uris": ["src/test/java/unit/spot/wallet/TestFundingWallet.java.TestFundingWallet.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFundingWallet {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFundingWallet() {\n        String path = \"/sapi/v1/asset/get-funding-asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().fundingWallet(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert", "name": "TestBusdConvert", "file_path": "src/test/java/unit/spot/wallet/TestBusdConvert.java", "superclasses": "", "methods": ["[void]testBusdConverWithoutMandatoryParam()", "[void]testBusdConvert()"], "method_uris": ["src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBusdConvert {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final BigDecimal amount = new BigDecimal(1);\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBusdConverWithoutMandatoryParam() {\n        String path = \"/sapi/v1/asset/convert-transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"clientTranId\", \"118263407119\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"targetAsset\", \"USDC\");\n        parameters.put(\"accountType\", \"MAIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().busdConvert(parameters));\n    }\n\n    @Test\n    public void testBusdConvert() {\n        String path = \"/sapi/v1/asset/convert-transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"clientTranId\", \"118263407119\");\n        parameters.put(\"asset\", \"BUSD\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"targetAsset\", \"USDC\");\n        parameters.put(\"accountType\", \"MAIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().busdConvert(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final BigDecimal amount = new BigDecimal(1);", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "BigDecimal", "name": "amount = new BigDecimal(1)", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory", "name": "TestDelegationHistory", "file_path": "src/test/java/unit/spot/wallet/TestDelegationHistory.java", "superclasses": "", "methods": ["[void]testDelegationHistoryWithoutParameters()", "[void]testDelegationHistory()"], "method_uris": ["src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDelegationHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = 1695205406000L;\n    private final long endTime = 1695205396000L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDelegationHistoryWithoutParameters() {\n        String path = \"/sapi/v1/asset/custody/transfer-history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().delegationHistory(parameters));\n    }\n    \n    @Test\n    public void testDelegationHistory() {\n        String path = String.format(\"/sapi/v1/asset/custody/transfer-history?email=%s&startTime=%s&endTime=%s\",\n                                    UrlBuilder.urlEncode(\"alice@test.com\"), startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().delegationHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = 1695205406000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = 1695205406000L", "syntax_pass": true}, {"attribute_expression": "private final long endTime = 1695205396000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = 1695205396000L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer", "name": "TestDustTransfer", "file_path": "src/test/java/unit/spot/wallet/TestDustTransfer.java", "superclasses": "", "methods": ["[void]testDustTransferWithoutCoin()", "[void]testDustTransfer()"], "method_uris": ["src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDustTransfer {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDustTransferWithoutCoin() {\n        String path = \"/sapi/v1/asset/dust\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().dustTransfer(parameters));\n    }\n\n    @Test\n    public void testDustTransfer() {\n        String path = String.format(\"/sapi/v1/asset/dust?asset=%s\", UrlBuilder.urlEncode(\"[CHR, CTSI]\"));\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> assets = new ArrayList<>();\n        assets.add(\"CHR\");\n        assets.add(\"CTSI\");\n        parameters.put(\"asset\", assets);\n        \n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().dustTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory", "name": "TestTransactionsHistory", "file_path": "src/test/java/unit/spot/nft/TestTransactionsHistory.java", "superclasses": "", "methods": ["[void]testTransactionsHistoryWithoutParameters()", "[void]testTransactionsHistory()"], "method_uris": ["src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTransactionsHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int orderType = 0;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTransactionsHistoryWithoutParameters() {\n        String path = \"/sapi/v1/nft/history/transactions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createNFT().transactionsHistory(parameters));\n    }\n\n    @Test\n    public void testTransactionsHistory() {\n        String path = \"/sapi/v1/nft/history/transactions?orderType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderType\", orderType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createNFT().transactionsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int orderType = 0;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "orderType = 0", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/nft/TestGetAsset.java.TestGetAsset", "name": "TestGetAsset", "file_path": "src/test/java/unit/spot/nft/TestGetAsset.java", "superclasses": "", "methods": ["[void]testGetAsset()"], "method_uris": ["src/test/java/unit/spot/nft/TestGetAsset.java.TestGetAsset.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetAsset {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testGetAsset() {\n        String path = \"/sapi/v1/nft/user/getAsset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createNFT().getAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder", "name": "TestRateLimitOrder", "file_path": "src/test/java/unit/spot/trade/TestRateLimitOrder.java", "superclasses": "", "methods": ["[void]testRateLimitOrder()", "[void]testRateLimitOrderWithRecvWindow()"], "method_uris": ["src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRateLimitOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int recvWindow = 6000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRateLimitOrder() {\n        String path = \"/api/v3/rateLimit/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().rateLimitOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testRateLimitOrderWithRecvWindow() {\n        String path = \"/api/v3/rateLimit/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().rateLimitOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int recvWindow = 6000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "recvWindow = 6000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace", "name": "TestCancelReplace", "file_path": "src/test/java/unit/spot/trade/TestCancelReplace.java", "superclasses": "", "methods": ["[void]testCancelReplaceWithoutParameters()", "[void]testCancelReplace()"], "method_uris": ["src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelReplace {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double quantity = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelReplaceWithoutParameters() {\n        String path = \"/api/v3/order/cancelReplace\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelReplace(parameters));\n    }\n\n    @Test\n    public void testCancelReplace() {\n        String path = \"/api/v3/order/cancelReplace?symbol=BNBUSDT&side=BUY&type=MARKET&cancelReplaceMode=STOP_ON_FAILURE&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"cancelReplaceMode\", \"STOP_ON_FAILURE\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelReplace(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades", "name": "TestMyTrades", "file_path": "src/test/java/unit/spot/trade/TestMyTrades.java", "superclasses": "", "methods": ["[void]testMyTradesWithoutSymbol()", "[void]testMyTrades()"], "method_uris": ["src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestMyTrades {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n    private final int orderId = 123;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testMyTradesWithoutSymbol() {\n        String path = \"/api/v3/myTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().myTrades(parameters));\n    }\n\n    @Test\n    public void testMyTrades() {\n        String path = String.format(\"/api/v3/myTrades?symbol=BNBUSDT&orderId=123&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().myTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int orderId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "orderId = 123", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder", "name": "TestTestSorOrder", "file_path": "src/test/java/unit/spot/trade/TestTestSorOrder.java", "superclasses": "", "methods": ["[void]testTestSorOrderWithoutParameters()", "[void]testTestSorOrder()"], "method_uris": ["src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTestSorOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double quantity = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTestSorOrderWithoutParameters() {\n        String path = \"/api/v3/sor/order/test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().testSorOrder(parameters));\n    }\n    \n    @Test\n    public void testTestSorOrder() {\n        String path = \"/api/v3/sor/order/test?symbol=BNBUSDT&side=SELL&type=LIMIT&quantity=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().testSorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders", "name": "TestGetOrders", "file_path": "src/test/java/unit/spot/trade/TestGetOrders.java", "superclasses": "", "methods": ["[void]testGetOrdersWithoutSymbol()", "[void]testGetOrders()"], "method_uris": ["src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n    private final int orderId = 123;\n    private final int origClientOrderId = 456;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetOrdersWithoutSymbol() {\n        String path = \"/api/v3/allOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().getOrders(parameters));\n    }\n\n    @Test\n    public void testGetOrders() {\n        String path = String.format(\"/api/v3/allOrders?symbol=BNBUSDT&orderId=123&origClientOrderId=456&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"origClientOrderId\", origClientOrderId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int orderId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "orderId = 123", "syntax_pass": true}, {"attribute_expression": "private final int origClientOrderId = 456;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "origClientOrderId = 456", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders", "name": "TestGetOpenOrders", "file_path": "src/test/java/unit/spot/trade/TestGetOpenOrders.java", "superclasses": "", "methods": ["[void]testGetOpenOrdersWithoutParams()", "[void]testGetOpenOrdersWithParams()"], "method_uris": ["src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOpenOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int recvWindow = 1000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetOpenOrdersWithoutParams() {\n        String path = \"/api/v3/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetOpenOrdersWithParams() {\n        String path = \"/api/v3/openOrders?symbol=BNBUSDT&recvWindow=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int recvWindow = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "recvWindow = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder", "name": "TestGetOrder", "file_path": "src/test/java/unit/spot/trade/TestGetOrder.java", "superclasses": "", "methods": ["[void]testGetOrderWithoutSymbol()", "[void]testGetOrderWithoutOrderId()", "[void]testGetOrder()"], "method_uris": ["src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int orderId = 123;\n    private final int origClientOrderId = 456;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetOrderWithoutSymbol() {\n        String path = \"/api/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().getOrder(parameters));\n    }\n\n    @Test\n    public void testGetOrderWithoutOrderId() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&orderId=\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_CLIENT_ERROR);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceClientException.class, () -> client.createTrade().getOrder(parameters));\n    }\n\n    @Test\n    public void testGetOrder() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&orderId=123&origClientOrderId=456\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"origClientOrderId\", origClientOrderId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int orderId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "orderId = 123", "syntax_pass": true}, {"attribute_expression": "private final int origClientOrderId = 456;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "origClientOrderId = 456", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder", "name": "TestOcoOrder", "file_path": "src/test/java/unit/spot/trade/TestOcoOrder.java", "superclasses": "", "methods": ["[void]testOcoOrderWithoutParameters()", "[void]testOcoOrder()"], "method_uris": ["src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestOcoOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int price = 9500;\n    private final double quantity = 0.01;\n    private final int stopPrice = 7500;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testOcoOrderWithoutParameters() {\n        String path = \"/api/v3/order/oco\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().ocoOrder(parameters));\n    }\n\n    @Test\n    public void testOcoOrder() {\n        String path = \"/api/v3/order/oco?symbol=BNBUSDT&side=SELL&price=9500&quantity=0.01&stopPrice=7500\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"price\", price);\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"stopPrice\", stopPrice);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().ocoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int price = 9500;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "price = 9500", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private final int stopPrice = 7500;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "stopPrice = 7500", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount", "name": "TestAccount", "file_path": "src/test/java/unit/spot/trade/TestAccount.java", "superclasses": "", "methods": ["[void]testAccount()", "[void]testAccountWithRecvWindow()"], "method_uris": ["src/test/java/unit/spot/trade/TestAccount.java.TestAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int recvWindow = 6000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAccount() {\n        String path = \"/api/v3/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().account(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAccountWithRecvWindow() {\n        String path = \"/api/v3/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().account(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int recvWindow = 6000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "recvWindow = 6000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest", "name": "TestNewOrderTest", "file_path": "src/test/java/unit/spot/trade/TestNewOrderTest.java", "superclasses": "", "methods": ["[void]testNewOrderWithoutParameters()", "[void]testNewOrderTest()"], "method_uris": ["src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestNewOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double quantity = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testNewOrderWithoutParameters() {\n        String path = \"/api/v3/order/test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().testNewOrder(parameters));\n    }\n\n    @Test\n    public void testNewOrderTest() {\n        String path = \"/api/v3/order/test?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().testNewOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations", "name": "TestSorAllocations", "file_path": "src/test/java/unit/spot/trade/TestSorAllocations.java", "superclasses": "", "methods": ["[void]testSorAllocationsWithoutParameters()", "[void]testSorAllocations()"], "method_uris": ["src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSorAllocations {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSorAllocationsWithoutParameters() {\n        String path = \"/api/v3/myAllocations\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().sorAllocations(parameters));\n    }\n    \n    @Test\n    public void testSorAllocations() {\n        String path = \"/api/v3/myAllocations?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().sorAllocations(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders", "name": "TestGetOcoOrders", "file_path": "src/test/java/unit/spot/trade/TestGetOcoOrders.java", "superclasses": "", "methods": ["[void]testGetOcoOrdersWithoutParams()", "[void]testGetOcoOrdersWithParams()"], "method_uris": ["src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOcoOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n\n    private final int fromId = 123;\n    private final int limit = 10;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetOcoOrdersWithoutParams() {\n        String path = \"/api/v3/allOrderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOCOOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testGetOcoOrdersWithParams() {\n        String path = String.format(\"/api/v3/allOrderList?fromId=123&startTime=%s&endTime=%s&limit=10\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromId\", fromId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOCOOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int fromId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "fromId = 123", "syntax_pass": true}, {"attribute_expression": "private final int limit = 10;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 10", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder", "name": "TestCancelOcoOrder", "file_path": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java", "superclasses": "", "methods": ["[void]testCancelOCOWithoutSymbol()", "[void]testCancelOCO()"], "method_uris": ["src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelOcoOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int orderListId = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelOCOWithoutSymbol() {\n        String path = \"/api/v3/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelOCO(parameters));\n    }\n\n    @Test\n    public void testCancelOCO() {\n        String path = \"/api/v3/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderListId\", orderListId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelOCO(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int orderListId = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "orderListId = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches", "name": "TestPreventedMatches", "file_path": "src/test/java/unit/spot/trade/TestPreventedMatches.java", "superclasses": "", "methods": ["[void]testPreventedMatchesWithoutParameters()", "[void]testPreventedMatches()"], "method_uris": ["src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestPreventedMatches {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testPreventedMatchesWithoutParameters() {\n        String path = \"/api/v3/myPreventedMatches\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().preventedMatches(parameters));\n    }\n    \n    @Test\n    public void testPreventedMatches() {\n        String path = \"/api/v3/myPreventedMatches?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().preventedMatches(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder", "name": "TestSorOrder", "file_path": "src/test/java/unit/spot/trade/TestSorOrder.java", "superclasses": "", "methods": ["[void]testSorOrderWithoutParameters()", "[void]testSorOrder()"], "method_uris": ["src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSorOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double quantity = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSorOrderWithoutParameters() {\n        String path = \"/api/v3/sor/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().sorOrder(parameters));\n    }\n    \n    @Test\n    public void testSorOrder() {\n        String path = \"/api/v3/sor/order?symbol=BNBUSDT&side=SELL&type=LIMIT&quantity=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().sorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java.TestGetOpenOcoOrders", "name": "TestGetOpenOcoOrders", "file_path": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java", "superclasses": "", "methods": ["[void]testGetOpenOcoOrdersWithParams()"], "method_uris": ["src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java.TestGetOpenOcoOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestGetOpenOcoOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n    \n    private final int recvWindow = 1000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testGetOpenOcoOrdersWithParams() {\n        String path = String.format(\"/api/v3/openOrderList?recvWindow=1000\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOpenOCOOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int recvWindow = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "recvWindow = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders", "name": "TestCancelOpenOrders", "file_path": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java", "superclasses": "", "methods": ["[void]testCancelOpenOrdersWithoutSymbol()", "[void]testCancelOpenOrdersWhenNoOpenOrders()", "[void]testCancelOpenOrders()"], "method_uris": ["src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCancelOpenOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCancelOpenOrdersWithoutSymbol() {\n        String path = \"/api/v3/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelOpenOrders(parameters));\n    }\n\n    @Test\n    public void testCancelOpenOrdersWhenNoOpenOrders() {\n        String path = \"/api/v3/openOrders?symbol=ETHBTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"ETHBTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_CLIENT_ERROR);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceClientException.class, () -> client.createTrade().cancelOpenOrders(parameters));\n    }\n\n    @Test\n    public void testCancelOpenOrders() {\n        String path = \"/api/v3/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission", "name": "TestCommission", "file_path": "src/test/java/unit/spot/trade/TestCommission.java", "superclasses": "", "methods": ["[void]testCommissionWithoutParameters()", "[void]testCommission()"], "method_uris": ["src/test/java/unit/spot/trade/TestCommission.java.TestCommission.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCommission {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCommissionWithoutParameters() {\n        String path = \"/api/v3/account/commission\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().commission(parameters));\n    }\n    \n    @Test\n    public void testCommission() {\n        String path = \"/api/v3/account/commission?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().commission(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder", "name": "TestNewOrder", "file_path": "src/test/java/unit/spot/trade/TestNewOrder.java", "superclasses": "", "methods": ["[void]testNewOrderWithoutParameters()", "[void]testNewOrder()"], "method_uris": ["src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestNewOrder {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double quantity = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testNewOrderWithoutParameters() {\n        String path = \"/api/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().newOrder(parameters));\n    }\n\n    @Test\n    public void testNewOrder() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().newOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double quantity = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome", "name": "TestLoanIncome", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java", "superclasses": "", "methods": ["[void]testLoanIncomeWithoutParameters()", "[void]testLoanIncome()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanIncome {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanIncomeWithoutParameters() {\n        String path = \"/sapi/v1/loan/income\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanIncome(parameters));\n    }\n\n    @Test\n    public void testLoanIncome() {\n        String path = \"/sapi/v1/loan/income?asset=BNB&type=collateralSpent\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"type\", \"collateralSpent\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanIncome(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java.TestFlexibleLoanRepayHistory", "name": "TestFlexibleLoanRepayHistory", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java", "superclasses": "", "methods": ["[void]testRepayGetFlexibleLoanRepaymentHistory()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java.TestFlexibleLoanRepayHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanRepayHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRepayGetFlexibleLoanRepaymentHistory() {\n        String path = \"/sapi/v1/loan/flexible/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java.TestFlexibleLoanAssets", "name": "TestFlexibleLoanAssets", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java", "superclasses": "", "methods": ["[void]testFlexibleLoanAssets()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java.TestFlexibleLoanAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testFlexibleLoanAssets() {\n        String path = \"/sapi/v1/loan/flexible/loanable/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory", "name": "TestLoanBorrowHistory", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java", "superclasses": "", "methods": ["[void]testLoanBorrowHistoryWithoutParameters()", "[void]testLoanBorrowHistory()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanBorrowHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanBorrowHistoryWithoutParameters() {\n        String path = \"/sapi/v1/loan/borrow/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLoanBorrowHistory() {\n        String path = \"/sapi/v1/loan/borrow/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData", "name": "TestLoanAssetsData", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java", "superclasses": "", "methods": ["[void]testLoanAssetsDataWithoutParameters()", "[void]testLoanAssetsData()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanAssetsData {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanAssetsDataWithoutParameters() {\n        String path = \"/sapi/v1/loan/loanable/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLoanAssetsData() {\n        String path = \"/sapi/v1/loan/loanable/data\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV", "name": "TestLoanAdjustLTV", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java", "superclasses": "", "methods": ["[void]testLoanAdjustLTVWithoutParameters()", "[void]testLoanAdjustLTV()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanAdjustLTV {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n    private static final double amount = 10.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanAdjustLTVWithoutParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanAdjustLTV(parameters));\n    }\n\n    @Test\n    public void testLoanAdjustLTV() {\n        String path = \"/sapi/v1/loan/adjust/ltv?orderId=100000001&amount=10.1\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTV(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 10.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 10.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate", "name": "TestCollateralRepayRate", "file_path": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java", "superclasses": "", "methods": ["[void]testCollateralRepayRateWithoutParameters()", "[void]testCollateralRepayRate()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCollateralRepayRate {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long repayAmount = 1000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCollateralRepayRateWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay/collateral/rate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }\n\n    @Test\n    public void testCollateralRepayRate() {\n        String path = \"/sapi/v1/loan/repay/collateral/rate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", repayAmount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralRepayRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long repayAmount = 1000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "repayAmount = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory", "name": "TestLoanAdjustLTVHistory", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java", "superclasses": "", "methods": ["[void]testLoanAdjustLTVHistoryWithoutParameters()", "[void]testLoanAdjustLTVHistory()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanAdjustLTVHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanAdjustLTVHistoryWithoutParameters() {\n        String path = \"/sapi/v1/loan/ltv/adjustment/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTVHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLoanAdjustLTVHistory() {\n        String path = \"/sapi/v1/loan/ltv/adjustment/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTVHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay", "name": "TestFlexibleLoanRepay", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java", "superclasses": "", "methods": ["[void]testFlexibleLoanRepayWithoutParameters()", "[void]testFlexibleLoanRepay()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanRepay {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final double repayAmount = 0.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanRepay(parameters));\n    }\n    \n    @Test\n    public void testFlexibleLoanRepay() {\n        String path = \"/sapi/v1/loan/flexible/repay?loanCoin=USDT&collateralCoin=BTC&repayAmount=\" + repayAmount;\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n        parameters.put(\"collateralCoin\", \"BTC\");\n        parameters.put(\"repayAmount\", repayAmount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double repayAmount = 0.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "repayAmount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java.TestFlexibleLoanLtvAdjustHistory", "name": "TestFlexibleLoanLtvAdjustHistory", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java", "superclasses": "", "methods": ["[void]testFlexibleLoanLtvAdjustHistory()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java.TestFlexibleLoanLtvAdjustHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanLtvAdjustHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testFlexibleLoanLtvAdjustHistory() {\n        String path = \"/sapi/v1/loan/flexible/ltv/adjustment/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanLtvAdjustHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow", "name": "TestFlexibleLoanBorrow", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java", "superclasses": "", "methods": ["[void]testFlexibleLoanBorrowWithoutParameters()", "[void]testFlexibleLoanBorrow()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanBorrow {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanBorrow(parameters));\n    }\n    \n    @Test\n    public void testFlexibleLoanBorrow() {\n        String path = \"/sapi/v1/loan/flexible/borrow?loanCoin=USDT&collateralCoin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n        parameters.put(\"collateralCoin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory", "name": "TestLoanRepayHistory", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java", "superclasses": "", "methods": ["[void]testLoanRepayHistoryWithoutParameters()", "[void]testLoanRepayHistory()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanRepayHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanRepayHistoryWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLoanRepayHistory() {\n        String path = \"/sapi/v1/loan/repay/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv", "name": "TestFlexibleLoanAdjustLtv", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java", "superclasses": "", "methods": ["[void]testFlexibleLoanAdjustLtvWithoutParameters()", "[void]testFlexibleLoanAdjustLtv()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanAdjustLtv {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double adjustmentAmount = 5.235;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleLoanAdjustLtvWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanAdjustLtv(parameters));\n    }\n    \n    @Test\n    public void testFlexibleLoanAdjustLtv() {\n        String path = \"/sapi/v1/loan/flexible/adjust/ltv?loanCoin=BUSD&collateralCoin=BNB&adjustmentAmount=5.235&direction=ADDITIONAL\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"adjustmentAmount\", adjustmentAmount);\n        parameters.put(\"direction\", \"ADDITIONAL\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanAdjustLtv(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double adjustmentAmount = 5.235;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "adjustmentAmount = 5.235", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java.TestFlexibleLoanCollateralAssets", "name": "TestFlexibleLoanCollateralAssets", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java", "superclasses": "", "methods": ["[void]testGetFlexibleLoanCollateralAssetsData()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java.TestFlexibleLoanCollateralAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanCollateralAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testGetFlexibleLoanCollateralAssetsData() {\n        String path = \"/sapi/v1/loan/flexible/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanCollateralAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay", "name": "TestLoanRepay", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java", "superclasses": "", "methods": ["[void]testLoanRepayWithoutParameters()", "[void]testLoanRepay()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanRepay {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n    private static final double amount = 10.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanRepay(parameters));\n    }\n\n    @Test\n    public void testLoanRepay() {\n        String path = \"/sapi/v1/loan/repay?orderId=100000001&amount=10.1\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 10.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 10.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall", "name": "TestCustomizeMarginCall", "file_path": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java", "superclasses": "", "methods": ["[void]testCustomizeMarginCallWithoutParameters()", "[void]testCustomizeMarginCall()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCustomizeMarginCall {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n    private static final double marginCall = 0.7;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCustomizeMarginCallWithoutParameters() {\n        String path = \"/sapi/v1/loan/customize/margin_call\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }\n\n    @Test\n    public void testCustomizeMarginCall() {\n        String path = \"/sapi/v1/loan/customize/margin_call\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"marginCall\", marginCall);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().customizeMarginCall(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}, {"attribute_expression": "private static final double marginCall = 0.7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "marginCall = 0.7", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData", "name": "TestCollateralAssetsData", "file_path": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java", "superclasses": "", "methods": ["[void]testCollateralAssetsDataWithoutParameters()", "[void]testCollateralAssetsData()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCollateralAssetsData {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCollateralAssetsDataWithoutParameters() {\n        String path = \"/sapi/v1/loan/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testCollateralAssetsData() {\n        String path = \"/sapi/v1/loan/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java.TestFlexibleLoanOngoingOrders", "name": "TestFlexibleLoanOngoingOrders", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java", "superclasses": "", "methods": ["[void]testFlexibleLoanOngoingOrders()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java.TestFlexibleLoanOngoingOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanOngoingOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testFlexibleLoanOngoingOrders() {\n        String path = \"/sapi/v1/loan/flexible/ongoing/orders?loanCoin=BUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java.TestFlexibleLoanBorrowHistory", "name": "TestFlexibleLoanBorrowHistory", "file_path": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java", "superclasses": "", "methods": ["[void]testFlexibleLoanBorrowHistory()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java.TestFlexibleLoanBorrowHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleLoanBorrowHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testFlexibleLoanBorrowHistory() {\n        String path = \"/sapi/v1/loan/flexible/borrow/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders", "name": "TestLoanOngoingOrders", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java", "superclasses": "", "methods": ["[void]testLoanOngoingOrdersWithoutParameters()", "[void]testLoanOngoingOrders()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanOngoingOrders {\n\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 100000001;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanOngoingOrdersWithoutParameters() {\n        String path = \"/sapi/v1/loan/ongoing/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testLoanOngoingOrders() {\n        String path = \"/sapi/v1/loan/ongoing/orders?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n    \n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow", "name": "TestLoanBorrow", "file_path": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java", "superclasses": "", "methods": ["[void]testLoanBorrowWithoutParameters()", "[void]testLoanBorrow()"], "method_uris": ["src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanBorrow {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final double loanAmount = 100.5;\n    private static final int loanTerm = 7;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanBorrow(parameters));\n    }\n\n    @Test\n    public void testLoanBorrow() {\n        String path = \"/sapi/v1/loan/borrow?loanCoin=BUSD&collateralCoin=BNB&loanAmount=100.5&loanTerm=7&\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanTerm\", loanTerm);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double loanAmount = 100.5;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "loanAmount = 100.5", "syntax_pass": true}, {"attribute_expression": "private static final int loanTerm = 7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "loanTerm = 7", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate", "name": "TestBorrowInterestRate", "file_path": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java", "superclasses": "", "methods": ["[void]testBorrowInterestRateWithoutParameters()", "[void]testBorrowInterestRate()"], "method_uris": ["src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBorrowInterestRate {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBorrowInterestRateWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/request/interestRate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().borrowInterestRate(parameters));\n    }\n    \n    @Test\n    public void testBorrowInterestRate() {\n        String path = \"/sapi/v1/loan/vip/request/interestRate?loanCoin=BTC\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        String result = client.createVIPLoans().borrowInterestRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestCollateralAccount.java.TestCollateralAccount", "name": "TestCollateralAccount", "file_path": "src/test/java/unit/spot/viploans/TestCollateralAccount.java", "superclasses": "", "methods": ["[void]testCollateralAccount()"], "method_uris": ["src/test/java/unit/spot/viploans/TestCollateralAccount.java.TestCollateralAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCollateralAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testCollateralAccount() {\n        String path = \"/sapi/v1/loan/vip/collateral/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().collateralAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestOrderStatus.java.TestOrderStatus", "name": "TestOrderStatus", "file_path": "src/test/java/unit/spot/viploans/TestOrderStatus.java", "superclasses": "", "methods": ["[void]testOrderStatus()"], "method_uris": ["src/test/java/unit/spot/viploans/TestOrderStatus.java.TestOrderStatus.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestOrderStatus {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testOrderStatus() {\n        String path = \"/sapi/v1/loan/vip/request/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().orderStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow", "name": "TestBorrow", "file_path": "src/test/java/unit/spot/viploans/TestBorrow.java", "superclasses": "", "methods": ["[void]testBorrowWithoutParameters()", "[void]testBorrow()"], "method_uris": ["src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBorrow {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long loanAccountId = 12345678;\n    private static final double loanAmount = 100.55;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().borrow(parameters));\n    }\n    \n    @Test\n    public void testBorrow() {\n        String path = String.format(\"/sapi/v1/loan/vip/borrow?loanAccountId=%s&loanAmount=%s&loanCoin=%s&collateralAccountId=%s&collateralCoin=%s&isFlexibleRate=true\", loanAccountId, loanAmount, \"BTC\", \"87654321\", \"BUSD\");\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanAccountId\", loanAccountId);\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralAccountId\", \"87654321\");\n        parameters.put(\"collateralCoin\", \"BUSD\");\n        parameters.put(\"isFlexibleRate\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().borrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long loanAccountId = 12345678;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "loanAccountId = 12345678", "syntax_pass": true}, {"attribute_expression": "private static final double loanAmount = 100.55;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "loanAmount = 100.55", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestLoanableAssets.java.TestLoanableAssets", "name": "TestLoanableAssets", "file_path": "src/test/java/unit/spot/viploans/TestLoanableAssets.java", "superclasses": "", "methods": ["[void]testLoanableAssets()"], "method_uris": ["src/test/java/unit/spot/viploans/TestLoanableAssets.java.TestLoanableAssets.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLoanableAssets {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testLoanableAssets() {\n        String path = \"/sapi/v1/loan/vip/loanable/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().loanableAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestCollateralAsset.java.TestCollateralAsset", "name": "TestCollateralAsset", "file_path": "src/test/java/unit/spot/viploans/TestCollateralAsset.java", "superclasses": "", "methods": ["[void]testCollateralAsset()"], "method_uris": ["src/test/java/unit/spot/viploans/TestCollateralAsset.java.TestCollateralAsset.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCollateralAsset {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCollateralAsset() {\n        String path = \"/sapi/v1/loan/vip/collateral/data?collateralCoin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().collateralAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew", "name": "TestRenew", "file_path": "src/test/java/unit/spot/viploans/TestRenew.java", "superclasses": "", "methods": ["[void]testRenewWithoutParameters()", "[void]testRenew()"], "method_uris": ["src/test/java/unit/spot/viploans/TestRenew.java.TestRenew.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRenew {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private static final long orderId = 123;\n    private static final int loanTerm = 30;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRenewWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/renew\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().renew(parameters));\n    }\n    \n    @Test\n    public void testRenew() {\n        String path = String.format(\"/sapi/v1/loan/vip/renew?orderId=%d\", orderId, loanTerm);\n        System.out.println(path);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().renew(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final long orderId = 123;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 123", "syntax_pass": true}, {"attribute_expression": "private static final int loanTerm = 30;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "loanTerm = 30", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java.TestRepaymentHistory", "name": "TestRepaymentHistory", "file_path": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java", "superclasses": "", "methods": ["[void]testRepaymentHistory()"], "method_uris": ["src/test/java/unit/spot/viploans/TestRepaymentHistory.java.TestRepaymentHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRepaymentHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testRepaymentHistory() {\n        String path = \"/sapi/v1/loan/vip/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().repaymentHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/viploans/TestOngoingOrders.java.TestOngoingOrders", "name": "TestOngoingOrders", "file_path": "src/test/java/unit/spot/viploans/TestOngoingOrders.java", "superclasses": "", "methods": ["[void]testOngoingOrders()"], "method_uris": ["src/test/java/unit/spot/viploans/TestOngoingOrders.java.TestOngoingOrders.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestOngoingOrders {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testOngoingOrders() {\n        String path = \"/sapi/v1/loan/vip/ongoing/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().ongoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/rebate/TestTaxQuery.java.TestTaxQuery", "name": "TestTaxQuery", "file_path": "src/test/java/unit/spot/rebate/TestTaxQuery.java", "superclasses": "", "methods": ["[void]testTaxQuery()"], "method_uris": ["src/test/java/unit/spot/rebate/TestTaxQuery.java.TestTaxQuery.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTaxQuery {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTaxQuery() {\n        String path = \"/sapi/v1/rebate/taxQuery\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createRebate().taxQuery(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "name": "TestHttpProxy", "file_path": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "superclasses": "", "methods": ["[void]testHttpProxyWithRefusedConnection()", "[void]testHttpProxyWithUnknownHost()", "[void]testNullProxyToWithProxy()", "[void]testNullProxyToNoProxy()", "[void]testWithProxyToNullProxy()", "[void]testWithProxyToNoProxy()", "[void]testNoProxyToNullProxy()", "[void]testNoProxyToWithProxy()"], "method_uris": ["src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestHttpProxy {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final Integer proxyPort = 1234;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testHttpProxyWithRefusedConnection() {\n        SpotClient client = new SpotClientImpl(baseUrl);\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }\n\n    @Test\n    public void testHttpProxyWithUnknownHost() {\n        SpotClient client = new SpotClientImpl(baseUrl);\n        Proxy proxyConn =  new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"address\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }\n\n    @Test\n    public void testNullProxyToWithProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        // Request without Proxy\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().time();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }\n\n    @Test\n    public void testNullProxyToNoProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        // Request without Proxy\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().time();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n    }\n\n    @Test\n    public void testWithProxyToNullProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n\n        // Request without Proxy\n        client.unsetProxy();\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n    }\n\n    @Test\n    public void testWithProxyToNoProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n    }\n\n    @Test\n    public void testNoProxyToNullProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n\n        // Request without Proxy\n        client.unsetProxy();\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n        \n    }\n    \n    @Test\n    public void testNoProxyToWithProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final Integer proxyPort = 1234;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Integer", "name": "proxyPort = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "name": "TestTickerPrice", "file_path": "src/test/java/unit/spot/market/TestTickerPrice.java", "superclasses": "", "methods": ["[void]testTickerPriceWithoutSymbol()", "[void]testTickerPriceWithSymbol()", "[void]testTickerPriceWithMultipleSymbol()", "[void]testTicker24HWithInvalidType()", "[void]testTicker24HWithDoubleParameter()"], "method_uris": ["src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTickerPrice {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testTickerPriceWithoutSymbol() {\n        String path = \"/api/v3/ticker/price\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tickerSymbol(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTickerPriceWithSymbol() {\n        String path = \"/api/v3/ticker/price?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tickerSymbol(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTickerPriceWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/price?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tickerSymbol(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/price?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tickerSymbol(parameters));\n    }\n\n    @Test\n    public void testTicker24HWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/price?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tickerSymbol(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestPing.java.TestPing", "name": "TestPing", "file_path": "src/test/java/unit/spot/market/TestPing.java", "superclasses": "", "methods": ["[void]testPing()"], "method_uris": ["src/test/java/unit/spot/market/TestPing.java.TestPing.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestPing {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testPing() {\n        String path = \"/api/v3/ping\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ping();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "name": "TestTicker", "file_path": "src/test/java/unit/spot/market/TestTicker.java", "superclasses": "", "methods": ["[void]testTicker()", "[void]testTickerWithMultipleSymbol()", "[void]testTickerWithoutParameters()", "[void]testTickerWithInvalidType()", "[void]testTickerWithDoubleParameter()"], "method_uris": ["src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTicker {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTicker() {\n        String path = \"/api/v3/ticker?symbol=BNBUSDT&type=MINI\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTickerWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTickerWithoutParameters() {\n        String path = \"/api/v3/ticker\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker(parameters));\n    }\n\n    @Test\n    public void testTickerWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker(parameters));\n    }\n\n    @Test\n    public void testTickerWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice", "name": "TestAvgPrice", "file_path": "src/test/java/unit/spot/market/TestAvgPrice.java", "superclasses": "", "methods": ["[void]testAvgPriceWithoutSymbol()", "[void]testAvgPrice()"], "method_uris": ["src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAvgPrice {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAvgPriceWithoutSymbol() {\n        String path = \"/api/v3/avgPrice\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().averagePrice(parameters));\n    }\n\n    @Test\n    public void testAvgPrice() {\n        String path = \"/api/v3/avgPrice?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().averagePrice(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "name": "TestTicker24H", "file_path": "src/test/java/unit/spot/market/TestTicker24H.java", "superclasses": "", "methods": ["[void]testTicker24HWithoutSymbol()", "[void]testTicker24HWithSymbol()", "[void]testTicker24HWithMultipleSymbol()", "[void]testTicker24HWithInvalidType()", "[void]testTicker24HWithDoubleParameter()"], "method_uris": ["src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTicker24H {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testTicker24HWithoutSymbol() {\n        String path = \"/api/v3/ticker/24hr\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithSymbol() {\n        String path = \"/api/v3/ticker/24hr?symbol=BNBUSDT&type=MINI\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker24H(parameters));\n    }\n\n    @Test\n    public void testTicker24HWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker24H(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestDepth.java.TestDepth", "name": "TestDepth", "file_path": "src/test/java/unit/spot/market/TestDepth.java", "superclasses": "", "methods": ["[void]testDepthWithoutSymbol()", "[void]testDepth()", "[void]testDepthWithFixedLimit()"], "method_uris": ["src/test/java/unit/spot/market/TestDepth.java.TestDepth.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestDepth {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int limit = 10;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testDepthWithoutSymbol() {\n        String path = \"/api/v3/depth\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().depth(parameters));\n    }\n\n    @Test\n    public void testDepth() {\n        String path = \"/api/v3/depth?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().depth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testDepthWithFixedLimit() {\n        String path = \"/api/v3/depth?symbol=BNBUSDT&limit=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().depth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int limit = 10;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 10", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "name": "TestBookTicker", "file_path": "src/test/java/unit/spot/market/TestBookTicker.java", "superclasses": "", "methods": ["[void]testBookTickerWithoutSymbol()", "[void]testBookTickerWithSymbol()", "[void]testBookTickerWithMultipleSymbol()", "[void]testTicker24HWithInvalidType()", "[void]testTicker24HWithDoubleParameter()"], "method_uris": ["src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBookTicker {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testBookTickerWithoutSymbol() {\n        String path = \"/api/v3/ticker/bookTicker\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().bookTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testBookTickerWithSymbol() {\n        String path = \"/api/v3/ticker/bookTicker?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().bookTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testBookTickerWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/bookTicker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().bookTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTicker24HWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/bookTicker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().bookTicker(parameters));\n    }\n\n    @Test\n    public void testTicker24HWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/bookTicker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().bookTicker(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "name": "TestExchangeInfo", "file_path": "src/test/java/unit/spot/market/TestExchangeInfo.java", "superclasses": "", "methods": ["[void]testExchangeInfo()", "[void]testExchangeInfoWithOneSymbol()", "[void]testExchangeInfoWithMultipleSymbol()", "[void]testExchangeInfoWithOnePermission()", "[void]testExchangeInfoWithMultiplePermissions()", "[void]testExchangeInfoWithInvalidType()", "[void]testExchangeInfoPermissionsWithInvalidType()", "[void]testExchangeInfoWithDoubleParameter()", "[void]testExchangeInfoWithSymbolAndPermissionsParameters()"], "method_uris": ["src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestExchangeInfo {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testExchangeInfo() {\n        String path = \"/api/v3/exchangeInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithOneSymbol() {\n        String path = \"/api/v3/exchangeInfo?symbol=BNBUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithOnePermission() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"MARGIN\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"MARGIN\");\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testExchangeInfoWithMultiplePermissions() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"MARGIN\\\",\\\"SPOT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"MARGIN\");\n        permissions.add(\"SPOT\");\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n\n    @Test\n    public void testExchangeInfoWithInvalidType() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }\n\n    @Test\n    public void testExchangeInfoPermissionsWithInvalidType() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"MARGIN\\\",\\\"SPOT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] permissions = {\"MARGIN\", \"SPOT\"};\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }\n\n    @Test\n    public void testExchangeInfoWithDoubleParameter() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                    UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }\n\n    @Test\n    public void testExchangeInfoWithSymbolAndPermissionsParameters() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbol=%s\",\n                UrlBuilder.urlEncode(\"[\\\"ETHUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        \n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"MARGIN\");\n        permissions.add(\"SPOT\");\n\n        parameters.put(\"permissions\", permissions);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines", "name": "TestUIKlines", "file_path": "src/test/java/unit/spot/market/TestUIKlines.java", "superclasses": "", "methods": ["[void]testUIKlinesWithoutSymbol()", "[void]testUIKlinesWithoutInterval()", "[void]testUIKlines()", "[void]testUIKlinesWithParameters()"], "method_uris": ["src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUIKlines {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n\n    private final int limit = 1000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testUIKlinesWithoutSymbol() {\n        String path = \"/api/v3/uiKlines?interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().uiKlines(parameters));\n    }\n\n    @Test\n    public void testUIKlinesWithoutInterval() {\n        String path = \"/api/v3/uiKlines?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().uiKlines(parameters));\n    }\n\n    @Test\n    public void testUIKlines() {\n        String path = \"/api/v3/uiKlines?symbol=BNBUSDT&interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().uiKlines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testUIKlinesWithParameters() {\n        String path = String.format(\"/api/v3/uiKlines?symbol=BNBUSDT&interval=1m&limit=1000&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n        parameters.put(\"limit\", limit);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().uiKlines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestKlines.java.TestKlines", "name": "TestKlines", "file_path": "src/test/java/unit/spot/market/TestKlines.java", "superclasses": "", "methods": ["[void]testKlinesWithoutSymbol()", "[void]testKlinesWithoutInterval()", "[void]testKlines()", "[void]testKlinesWithParameters()"], "method_uris": ["src/test/java/unit/spot/market/TestKlines.java.TestKlines.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestKlines {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n\n    private final int limit = 1000;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testKlinesWithoutSymbol() {\n        String path = \"/api/v3/klines?interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }\n\n    @Test\n    public void testKlinesWithoutInterval() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }\n\n    @Test\n    public void testKlines() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT&interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().klines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testKlinesWithParameters() {\n        String path = String.format(\"/api/v3/klines?symbol=BNBUSDT&interval=1m&limit=1000&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n        parameters.put(\"limit\", limit);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().klines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestTime.java.TestTime", "name": "TestTime", "file_path": "src/test/java/unit/spot/market/TestTime.java", "superclasses": "", "methods": ["[void]testTime()"], "method_uris": ["src/test/java/unit/spot/market/TestTime.java.TestTime.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTime {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n\n    @Test\n    public void testTime() {\n        String path = \"/api/v3/time\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().time();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "name": "TestAggTrades", "file_path": "src/test/java/unit/spot/market/TestAggTrades.java", "superclasses": "", "methods": ["[void]testAggTradesWithoutSymbol()", "[void]testAggTrades()", "[void]testTradesWithLimit()", "[void]testTradesWithFromId()", "[void]testTradesWithTimestamp()"], "method_uris": ["src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAggTrades {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final long startTime = System.currentTimeMillis();\n    private final long endTime = startTime + 1000;\n\n    private final int limit = 1000;\n    private final int fromId = 1000;\n\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAggTradesWithoutSymbol() {\n        String path = \"/api/v3/aggTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().aggTrades(parameters));\n    }\n\n    @Test\n    public void testAggTrades() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTradesWithLimit() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT&limit=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTradesWithFromId() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT&fromId=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"fromId\", fromId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTradesWithTimestamp() {\n        String path = String.format(\"/api/v3/aggTrades?symbol=BNBUSDT&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = System.currentTimeMillis();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = System.currentTimeMillis()", "syntax_pass": true}, {"attribute_expression": "private final long endTime = startTime + 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = startTime + 1000", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1000", "syntax_pass": true}, {"attribute_expression": "private final int fromId = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "fromId = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "name": "TestTradingDayTicker", "file_path": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "superclasses": "", "methods": ["[void]testTradingDayTicker()", "[void]testTradingDayTickerWithMultipleSymbol()", "[void]testTradingDayTickerWithoutParameters()", "[void]testTradingDayTickerWithInvalidType()", "[void]testTradingDayTickerWithDoubleParameter()"], "method_uris": ["src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTradingDayTicker {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradingDayTicker() {\n        String path = \"/api/v3/ticker/tradingDay?symbol=BNBUSDT&type=MINI\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tradingDayTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTradingDayTickerWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/tradingDay?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tradingDayTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTradingDayTickerWithoutParameters() {\n        String path = \"/api/v3/ticker/tradingDay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tradingDayTicker(parameters));\n    }\n\n    @Test\n    public void testTradingDayTickerWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/tradingDay?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tradingDayTicker(parameters));\n    }\n\n    @Test\n    public void testTradingDayTickerWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/tradingDay?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tradingDayTicker(parameters));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades", "name": "TestHistoricalTrades", "file_path": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "superclasses": "", "methods": ["[void]testTradesWithoutSymbol()", "[void]testHistoricalTradesWithoutMockData()", "[void]testHistoricalTrades()", "[void]testTradesWithParameters()"], "method_uris": ["src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestHistoricalTrades {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final int limit = 1000;\n    private final int fromId = 123;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradesWithoutSymbol() {\n        String path = \"/api/v3/historicalTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().historicalTrades(parameters));\n    }\n\n    @Test\n    public void testHistoricalTradesWithoutMockData() {\n        String path = \"/api/v3/historicalTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().historicalTrades(parameters));\n    }\n\n    @Test\n    public void testHistoricalTrades() {\n        String path = \"/api/v3/historicalTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMarket().historicalTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testTradesWithParameters() {\n        String path = \"/api/v3/historicalTrades?symbol=BNBUSDT&limit=1000&fromId=123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n        parameters.put(\"fromId\", fromId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMarket().historicalTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final int limit = 1000;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "limit = 1000", "syntax_pass": true}, {"attribute_expression": "private final int fromId = 123;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "fromId = 123", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry", "name": "TestQuoteInquiry", "file_path": "src/test/java/unit/spot/convert/TestQuoteInquiry.java", "superclasses": "", "methods": ["[void]testQuoteInquiryWithoutParameters()", "[void]testQuoteInquiryWithParametes()"], "method_uris": ["src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestQuoteInquiry {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.001;\n    private final long recvWindow = 5000L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testQuoteInquiryWithoutParameters() {\n        String path = \"/sapi/v1/convert/getQuote\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().quoteInquiry(parameters));\n    }\n\n    @Test\n    public void testQuoteInquiryWithParametes() {\n        String path = \"/sapi/v1/convert/getQuote\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n        parameters.put(\"fromAmount\", amount);\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().quoteInquiry(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.001;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.001", "syntax_pass": true}, {"attribute_expression": "private final long recvWindow = 5000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "recvWindow = 5000L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow", "name": "TestTradeFlow", "file_path": "src/test/java/unit/spot/convert/TestTradeFlow.java", "superclasses": "", "methods": ["[void]testTradeFlowWithoutParameters()", "[void]testTradeFlow()"], "method_uris": ["src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTradeFlow {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = 1234567L;\n    private final long endTime = 1234568L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTradeFlowWithoutParameters() {\n        String path = \"/sapi/v1/convert/tradeFlow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().tradeFlow(parameters));\n    }\n\n    @Test\n    public void testTradeFlow() {\n        String path = \"/sapi/v1/convert/tradeFlow?startTime=1234567&endTime=1234568\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().tradeFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = 1234567L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = 1234567L", "syntax_pass": true}, {"attribute_expression": "private final long endTime = 1234568L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "endTime = 1234568L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision", "name": "TestAssetQuantityPrecision", "file_path": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java", "superclasses": "", "methods": ["[void]testAssetQuantityPrecisionWithoutParameters()", "[void]testAssetQuantityPrecisionWithParameter()"], "method_uris": ["src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAssetQuantityPrecision {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long recvWindow = 5000L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAssetQuantityPrecisionWithoutParameters() {\n        String path = \"/sapi/v1/convert/assetInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().assetQuantityPrecision(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testAssetQuantityPrecisionWithParameter() {\n        String path = \"/sapi/v1/convert/assetInfo?recvWindow=5000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().assetQuantityPrecision(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long recvWindow = 5000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "recvWindow = 5000L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote", "name": "TestAcceptQuote", "file_path": "src/test/java/unit/spot/convert/TestAcceptQuote.java", "superclasses": "", "methods": ["[void]testAcceptQuoteWithoutParameters()", "[void]testAcceptQuoteWithParametes()"], "method_uris": ["src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestAcceptQuote {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testAcceptQuoteWithoutParameters() {\n        String path = \"/sapi/v1/convert/acceptQuote\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().acceptQuote(parameters));\n    }\n\n    @Test\n    public void testAcceptQuoteWithParametes() {\n        String path = \"/sapi/v1/convert/acceptQuote\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().acceptQuote(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory", "name": "TestFuturesTransferHistory", "file_path": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java", "superclasses": "", "methods": ["[void]testFuturesTransferHistoryWithoutParameters()", "[void]testFuturesTransferHistory()"], "method_uris": ["src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesTransferHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final long startTime = 12345678L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesTransferHistoryWithoutParameters() {\n        String path = \"/sapi/v1/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFutures().futuresTransferHistory(parameters));\n    }\n\n    @Test\n    public void testFuturesTransferHistory() {\n        String path = \"/sapi/v1/futures/transfer?asset=USDT&startTime=12345678\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"startTime\", startTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFutures().futuresTransferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final long startTime = 12345678L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "long", "name": "startTime = 12345678L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory", "name": "TestFuturesOrderBookHistory", "file_path": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java", "superclasses": "", "methods": ["[void]testTestFuturesOrderBookHistoryWithoutParameters()", "[void]testTestFuturesOrderBookHistory()"], "method_uris": ["src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFuturesOrderBookHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final Long startTime = 17024585109000L;\n    private final Long endTime = 1702458517000L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTestFuturesOrderBookHistoryWithoutParameters() {\n        String path = \"/sapi/v1/futures/histDataLink\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFutures().futuresOrderBookHistory(parameters));\n    }\n\n    @Test\n    public void testTestFuturesOrderBookHistory() {\n        String path = String.format(\"/sapi/v1/futures/histDataLink?symbol=%s&dataType=%s&startTime=%s&endTime=%s\", \"BTCUSDT\", \"T_DEPTH\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"dataType\", \"T_DEPTH\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFutures().futuresOrderBookHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final Long startTime = 17024585109000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Long", "name": "startTime = 17024585109000L", "syntax_pass": true}, {"attribute_expression": "private final Long endTime = 1702458517000L;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Long", "name": "endTime = 1702458517000L", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode", "name": "TestCreateDualTokensCode", "file_path": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java", "superclasses": "", "methods": ["[void]testCreateDualTokensCodeWithoutParameters()", "[void]testCreateDualTokensCode()"], "method_uris": ["src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCreateDualTokensCode {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private final double baseTokenAmount = 1.002;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCreateDualTokensCodeWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/buyCode\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().createDualTokensCode(parameters));\n    }\n    \n    @Test\n    public void testCreateDualTokensCode() {\n        String path = \"/sapi/v1/giftcard/buyCode?baseToken=BUSD&faceToken=BNB&baseTokenAmount=1.002\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"faceToken\", \"BNB\");\n        parameters.put(\"baseTokenAmount\", baseTokenAmount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().createDualTokensCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double baseTokenAmount = 1.002;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "baseTokenAmount = 1.002", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode", "name": "TestRedeemCode", "file_path": "src/test/java/unit/spot/giftcard/TestRedeemCode.java", "superclasses": "", "methods": ["[void]testRedeemCodeWithoutParameters()", "[void]testRedeemCode()"], "method_uris": ["src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeemCode {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemCodeWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/redeemCode\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().redeemCode(parameters));\n    }\n\n    @Test\n    public void testRedeemCode() {\n        String path = \"/sapi/v1/giftcard/redeemCode?code=abc\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"code\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().redeemCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode", "name": "TestCreateCode", "file_path": "src/test/java/unit/spot/giftcard/TestCreateCode.java", "superclasses": "", "methods": ["[void]testCreateCodeWithoutParameters()", "[void]testCreateCode()"], "method_uris": ["src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCreateCode {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 0.01;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testCreateCodeWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/createCode\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().createCode(parameters));\n    }\n\n    @Test\n    public void testCreateCode() {\n        String path = \"/sapi/v1/giftcard/createCode?token=abc&amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"token\", \"abc\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().createCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 0.01;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit", "name": "TestTokensLimit", "file_path": "src/test/java/unit/spot/giftcard/TestTokensLimit.java", "superclasses": "", "methods": ["[void]testTokensLimitWithoutParameters()", "[void]testTokensLimit()"], "method_uris": ["src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestTokensLimit {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testTokensLimitWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/buyCode/token-limit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().tokensLimit(parameters));\n    }\n    \n    @Test\n    public void testTokensLimit() {\n        String path = \"/sapi/v1/giftcard/buyCode/token-limit?baseToken=BUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().tokensLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java.TestRsaPublicKey", "name": "TestRsaPublicKey", "file_path": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java", "superclasses": "", "methods": ["[void]testVerify()"], "method_uris": ["src/test/java/unit/spot/giftcard/TestRsaPublicKey.java.TestRsaPublicKey.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRsaPublicKey {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testVerify() {\n        String path = \"/sapi/v1/giftcard/cryptography/rsa-public-key\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().rsaPublicKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify", "name": "TestVerify", "file_path": "src/test/java/unit/spot/giftcard/TestVerify.java", "superclasses": "", "methods": ["[void]testVerifyWithoutParameters()", "[void]testVerify()"], "method_uris": ["src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestVerify {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testVerifyWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/verify\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().verify(parameters));\n    }\n\n    @Test\n    public void testVerify() {\n        String path = \"/sapi/v1/giftcard/verify?referenceNo=123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"referenceNo\", \"123\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().verify(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java.TestSimpleAccount", "name": "TestSimpleAccount", "file_path": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java", "superclasses": "", "methods": ["[void]testSimpleAccount()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestSimpleAccount.java.TestSimpleAccount.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSimpleAccount {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testSimpleAccount() {\n        String path = \"/sapi/v1/simple-earn/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().simpleAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct", "name": "TestSubscribeLockedProduct", "file_path": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java", "superclasses": "", "methods": ["[void]testSubscribeLockedProductWithoutParameters()", "[void]testSubscribeLockedProduct()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubscribeLockedProduct {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final double amount = 1.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubscribeLockedProductWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/subscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().subscribeLockedProduct(parameters));\n    }\n    \n    @Test\n    public void testSubscribeLockedProduct() {\n        String path = \"/sapi/v1/simple-earn/locked/subscribe?projectId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().subscribeLockedProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe", "name": "TestSetFlexibleAutoSubscribe", "file_path": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java", "superclasses": "", "methods": ["[void]testSetFlexibleAutoSubscribeWithoutParameters()", "[void]testSetFlexibleAutoSubscribe()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSetFlexibleAutoSubscribe {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSetFlexibleAutoSubscribeWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setFlexibleAutoSubscribe(parameters));\n    }\n    \n    @Test\n    public void testSetFlexibleAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe?productId=40607&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setFlexibleAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java.TestLockedProductList", "name": "TestLockedProductList", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java", "superclasses": "", "methods": ["[void]testSimpleEarnLockedProductList()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedProductList.java.TestLockedProductList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedProductList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testSimpleEarnLockedProductList() {\n        String path = \"/sapi/v1/simple-earn/locked/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedProductList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java.TestFlexibleProductPosition", "name": "TestFlexibleProductPosition", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java", "superclasses": "", "methods": ["[void]testFlexibleProductPosition()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java.TestFlexibleProductPosition.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleProductPosition {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testFlexibleProductPosition() {\n        String path = \"/sapi/v1/simple-earn/flexible/position\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleProductPosition(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java.TestCollateralRecord", "name": "TestCollateralRecord", "file_path": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java", "superclasses": "", "methods": ["[void]testCollateralRecord()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestCollateralRecord.java.TestCollateralRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestCollateralRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testCollateralRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/collateralRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().collateralRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java.TestFlexibleRedemptionRecord", "name": "TestFlexibleRedemptionRecord", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java", "superclasses": "", "methods": ["[void]testFlexibleRedemptionRecord()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java.TestFlexibleRedemptionRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleRedemptionRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testFlexibleRedemptionRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/redemptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleRedemptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java.TestSubscribeFlexibleProduct", "name": "TestSubscribeFlexibleProduct", "file_path": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java", "superclasses": "", "methods": ["[void]testSubscribeFlexibleProduct()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java.TestSubscribeFlexibleProduct.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubscribeFlexibleProduct {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final double amount = 1.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testSubscribeFlexibleProduct() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscribe?productId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().subscribeFlexibleProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory", "name": "TestFlexibleRewardsHistory", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java", "superclasses": "", "methods": ["[void]testFlexibleRewardsHistoryWithoutParameters()", "[void]testFlexibleRewardsHistory()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleRewardsHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleRewardsHistoryWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().flexibleRewardsHistory(parameters));\n    }\n    \n    @Test\n    public void testFlexibleRewardsHistory() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord?type=BONUS\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"BONUS\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct", "name": "TestRedeemLockedProduct", "file_path": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java", "superclasses": "", "methods": ["[void]testRedeemLockedProductWithoutParameters()", "[void]testRedeemLockedProduct()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeemLockedProduct {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemLockedProductWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().redeemLockedProduct(parameters));\n    }\n    \n    @Test\n    public void testRedeemLockedProduct() {\n        String path = \"/sapi/v1/simple-earn/locked/redeem?positionId=BUSD001\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"BUSD001\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().redeemLockedProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java.TestFlexibleSubscriptionRecord", "name": "TestFlexibleSubscriptionRecord", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java", "superclasses": "", "methods": ["[void]testFlexibleSubscriptionRecord()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java.TestFlexibleSubscriptionRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleSubscriptionRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleSubscriptionRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/subscriptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleSubscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota", "name": "TestFlexiblePersonalLeftQuota", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java", "superclasses": "", "methods": ["[void]testFlexiblePersonalLeftQuotaWithoutParameters()", "[void]testFlexiblePersonalLeftQuota()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexiblePersonalLeftQuota {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexiblePersonalLeftQuotaWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/personalLeftQuota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().flexiblePersonalLeftQuota(parameters));\n    }\n    \n    @Test\n    public void testFlexiblePersonalLeftQuota() {\n        String path = \"/sapi/v1/simple-earn/flexible/personalLeftQuota?productId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexiblePersonalLeftQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota", "name": "TestLockedPersonalLeftQuota", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java", "superclasses": "", "methods": ["[void]testLockedPersonalLeftQuotaWithoutParameters()", "[void]testLockedPersonalLeftQuota()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedPersonalLeftQuota {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLockedPersonalLeftQuotaWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/personalLeftQuota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().lockedPersonalLeftQuota(parameters));\n    }\n    \n    @Test\n    public void testLockedPersonalLeftQuota() {\n        String path = \"/sapi/v1/simple-earn/locked/personalLeftQuota?projectId=USDT001\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedPersonalLeftQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview", "name": "TestFlexibleSubscriptionPreview", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java", "superclasses": "", "methods": ["[void]testFlexibleSubscriptionPreviewWithoutParameters()", "[void]testFlexibleSubscriptionPreview()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleSubscriptionPreview {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final double amount = 1.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFlexibleSubscriptionPreviewWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscriptionPreview\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().flexibleSubscriptionPreview(parameters));\n    }\n    \n    @Test\n    public void testFlexibleSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscriptionPreview?productId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java.TestLockedRewardsHistory", "name": "TestLockedRewardsHistory", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java", "superclasses": "", "methods": ["[void]testLockedRewardsHistory()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java.TestLockedRewardsHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedRewardsHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testLockedRewardsHistory() {\n        String path = \"/sapi/v1/simple-earn/locked/history/rewardsRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview", "name": "TestLockedSubscriptionPreview", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java", "superclasses": "", "methods": ["[void]testLockedSubscriptionPreviewWithoutParameters()", "[void]testLockedSubscriptionPreview()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedSubscriptionPreview {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final double amount = 1.1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLockedSubscriptionPreviewWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().lockedSubscriptionPreview(parameters));\n    }\n    \n    @Test\n    public void testLockedSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview?projectId=USDT001&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java.TestLockedSubscriptionRecord", "name": "TestLockedSubscriptionRecord", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java", "superclasses": "", "methods": ["[void]testLockedSubscriptionRecord()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java.TestLockedSubscriptionRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedSubscriptionRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLockedSubscriptionRecord() {\n        String path = \"/sapi/v1/simple-earn/locked/history/subscriptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedSubscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct", "name": "TestRedeemFlexibleProduct", "file_path": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java", "superclasses": "", "methods": ["[void]testRedeemFlexibleProductWithoutParameters()", "[void]testRedeemFlexibleProduct()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeemFlexibleProduct {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemFlexibleProductWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().redeemFlexibleProduct(parameters));\n    }\n    \n    @Test\n    public void testRedeemFlexibleProduct() {\n        String path = \"/sapi/v1/simple-earn/flexible/redeem?productId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().redeemFlexibleProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java.TestLockedRedemptionRecord", "name": "TestLockedRedemptionRecord", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java", "superclasses": "", "methods": ["[void]testLockedRedemptionRecord()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java.TestLockedRedemptionRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedRedemptionRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    \n    @Test\n    public void testLockedRedemptionRecord() {\n        String path = \"/sapi/v1/simple-earn/locked/history/redemptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedRedemptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java.TestFlexibleProductList", "name": "TestFlexibleProductList", "file_path": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java", "superclasses": "", "methods": ["[void]testFlexibleProductList()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java.TestFlexibleProductList.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestFlexibleProductList {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testFlexibleProductList() {\n        String path = \"/sapi/v1/simple-earn/flexible/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleProductList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory", "name": "TestRateHistory", "file_path": "src/test/java/unit/spot/simpleearn/TestRateHistory.java", "superclasses": "", "methods": ["[void]testRateHistoryWithoutParameters()", "[void]testRateHistory()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRateHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRateHistoryWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().rateHistory(parameters));\n    }\n    \n    @Test\n    public void testRateHistory() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rateHistory?productId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().rateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe", "name": "TestSetLockedAutoSubscribe", "file_path": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java", "superclasses": "", "methods": ["[void]testSetLockedAutoSubscribeWithoutParameters()", "[void]testSetLockedAutoSubscribe()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSetLockedAutoSubscribe {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSetLockedAutoSubscribeWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setLockedAutoSubscribe(parameters));\n    }\n    \n    @Test\n    public void testSetLockedAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe?positionId=BUSD001&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"BUSD001\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java.TestLockedProductPosition", "name": "TestLockedProductPosition", "file_path": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java", "superclasses": "", "methods": ["[void]testLockedProductPosition()"], "method_uris": ["src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java.TestLockedProductPosition.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestLockedProductPosition {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    \n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    \n    @Test\n    public void testLockedProductPosition() {\n        String path = \"/sapi/v1/simple-earn/locked/position\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedProductPosition(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory", "name": "TestListUserOrderHistory", "file_path": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java", "superclasses": "", "methods": ["[void]testListUserOrderHistoryWithoutParameters()", "[void]testListUserOrderHistory()"], "method_uris": ["src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestListUserOrderHistory {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testListUserOrderHistoryWithoutParameters() {\n        String path = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createC2C().listUserOrderHistory(parameters));\n    }\n\n    @Test\n    public void testListUserOrderHistory() {\n        String path = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory?tradeType=BUY\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tradeType\", \"BUY\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createC2C().listUserOrderHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/blvt/TestBlvtInfo.java.TestBlvtInfo", "name": "TestBlvtInfo", "file_path": "src/test/java/unit/spot/blvt/TestBlvtInfo.java", "superclasses": "", "methods": ["[void]testBlvtInfo()"], "method_uris": ["src/test/java/unit/spot/blvt/TestBlvtInfo.java.TestBlvtInfo.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestBlvtInfo {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testBlvtInfo() {\n        String path = \"/sapi/v1/blvt/tokenInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().blvtInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem", "name": "TestRedeem", "file_path": "src/test/java/unit/spot/blvt/TestRedeem.java", "superclasses": "", "methods": ["[void]testRedeemWithoutParameters()", "[void]testRedeem()"], "method_uris": ["src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeem {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double amount = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemWithoutParameters() {\n        String path = \"/sapi/v1/blvt/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createBlvt().redeem(parameters));\n    }\n\n    @Test\n    public void testRedeem() {\n        String path = \"/sapi/v1/blvt/redeem?tokenName=USDT&amount=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().redeem(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double amount = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "amount = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe", "name": "TestSubscribe", "file_path": "src/test/java/unit/spot/blvt/TestSubscribe.java", "superclasses": "", "methods": ["[void]testSubscribeWithoutParameters()", "[void]testSubscribe()"], "method_uris": ["src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubscribe {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    private final double cost = 1;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n    @Test\n    public void testSubscribeWithoutParameters() {\n        String path = \"/sapi/v1/blvt/subscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createBlvt().subscribe(parameters));\n    }\n\n    @Test\n    public void testSubscribe() {\n        String path = \"/sapi/v1/blvt/subscribe?tokenName=USDT&cost=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"USDT\");\n        parameters.put(\"cost\", cost);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().subscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final double cost = 1;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "double", "name": "cost = 1", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java.TestSubscriptionRecord", "name": "TestSubscriptionRecord", "file_path": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java", "superclasses": "", "methods": ["[void]testSubscriptionRecord()"], "method_uris": ["src/test/java/unit/spot/blvt/TestSubscriptionRecord.java.TestSubscriptionRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestSubscriptionRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testSubscriptionRecord() {\n        String path = \"/sapi/v1/blvt/subscribe/record\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().subscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/blvt/TestUserLimit.java.TestUserLimit", "name": "TestUserLimit", "file_path": "src/test/java/unit/spot/blvt/TestUserLimit.java", "superclasses": "", "methods": ["[void]testUserLimit()"], "method_uris": ["src/test/java/unit/spot/blvt/TestUserLimit.java.TestUserLimit.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestUserLimit {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testUserLimit() {\n        String path = \"/sapi/v1/blvt/userLimit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().userLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/spot/blvt/TestRedeemRecord.java.TestRedeemRecord", "name": "TestRedeemRecord", "file_path": "src/test/java/unit/spot/blvt/TestRedeemRecord.java", "superclasses": "", "methods": ["[void]testRedeemRecord()"], "method_uris": ["src/test/java/unit/spot/blvt/TestRedeemRecord.java.TestRedeemRecord.[void]init()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRedeemRecord {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testRedeemRecord() {\n        String path = \"/sapi/v1/blvt/redeem/record\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().redeemRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private MockWebServer mockWebServer;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "MockWebServer", "name": "mockWebServer", "syntax_pass": true}, {"attribute_expression": "private String baseUrl;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}]}, {"uris": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java.TestEd25519SignatureGenerator", "name": "TestEd25519SignatureGenerator", "file_path": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java", "superclasses": "", "methods": ["[void]testUnprotectedSigning()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestEd25519SignatureGenerator {\n    \n    @Test\n    public void testUnprotectedSigning() throws FileNotFoundException, IOException {\n        String pemPathString = \"src/test/java/unit/signature/Ed25519PrivateKeyExample.pem\";\n\n        String payload = \"timeInForce=GTC&quantity=0.2&price=30000&symbol=BTCUSDT&side=SELL&type=LIMIT&timestamp=1683189275000\";\n        String expectedSignature = \"kJs8urXFQ/GkR/hQ+ukZMFwH9H8oe7Ec/sap6pFIB/7HHHoh5mKVQT1zLVaRl7QdJLjNB2QB4PGZPflubUCHBA==\";\n\n        Ed25519SignatureGenerator ed25519SignatureGenerator = new Ed25519SignatureGenerator(pemPathString);\n        String actualSignature = ed25519SignatureGenerator.getSignature(payload);\n        assertEquals(expectedSignature, actualSignature);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/unit/signature/TestRsaSignatureGenerator.java.TestRsaSignatureGenerator", "name": "TestRsaSignatureGenerator", "file_path": "src/test/java/unit/signature/TestRsaSignatureGenerator.java", "superclasses": "", "methods": ["[void]testUnprotectedSigning()", "[void]testProtectedSigning()"], "method_uris": [], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class TestRsaSignatureGenerator {\n    @Test\n    public void testUnprotectedSigning() {\n        String pem = \"-----BEGIN PRIVATE KEY-----\"\n            + \"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPrfWMr2yqxJgJ\"\n            + \"cIyA5TDFpZBlB9E3RMbbEcPZijmPDiciZjuRiD1Q6oQzi1MFGTZ523HwSXe9XG3R\"\n            + \"NQaLCjxi+VkLsvCoxzgurkWXoQr0VHJyEDxnyRaCzTyvvHQgt0LKCWfqalYNz0ue\"\n            + \"doxnYnde3DH/tFFXX0/rTkJyK6LpOyKOAqE0G7OhuQWkLvlUO8mqwtGNqdrtOgzv\"\n            + \"kTN5rhb5VeWB4JGWDcAYFb9CQI9wD7/JJU1XQGIOJEY3L/PjGLcjDEiROt57/RS3\"\n            + \"i6OVTiAgDcgA405tNLgS326hfbEchI5tKeOxqrFYVfvOK8+4o+rrUBnMhrBg0tJv\"\n            + \"1feQKeAnAgMBAAECggEAUdB8PZIWQyfzpTRbhaPElPhmbAaqWxWTKVZUS2zyw/KV\"\n            + \"ZC3WJb0AOtJIhm3KpOWL2nGi70BiFY1GDfbPvxKnO25zr/IscLEa5vjsnZFp2Vsz\"\n            + \"QtA2m8RSQ/FKiQi6zvCjNSiDcYu2nvYdGi4lnczirdIdOFj2+m6n81D/SC78nNhj\"\n            + \"P/JLbSPFw+XOfVqOVelXHw7XGtMH9dgFjWDdB317HcJjZyPDahpQQ7s6PcecDwuv\"\n            + \"Qucs+Hi4sAWiHOiwKusx3sT/NL5Og/jAvC5aMy1QswWFnPr90T3qFE4MN1GZszzX\"\n            + \"DmDkWaGaRwuwdpi/ocIZF3R9XX3m+WOVdEZRfzzcEQKBgQDt11achN666/j1kgQM\"\n            + \"xPdzo06eUUZb/JUtEXz8hU+AzRsN/eso/47pjaPq7nrXFYE4aEx7Je2I9S52Y+b/\"\n            + \"SLrctuza25VOxvqIpDynlvM/Iatg9WuTEIuOk7gkBFanDNjDjZDKFuDYSEfN+sX+\"\n            + \"UakFT7cm+xu12PWR8HlZmFZL5QKBgQDfiRrC8zADSIE74uFBJ5K88t6cwrktqdPH\"\n            + \"9QT69j+VpRXssyUoCfR4/zchKbEyTwSASvL1saJR14Opmvn6Le+0DKq+EV7Z1UM6\"\n            + \"svVIzd9pWWMhRh9G83CC5Krx9Ie+34QHNRxBf+rya5if/aBCDtBFedRGbR6Le8MB\"\n            + \"yvrpT5hzGwKBgQCU2+QPjnHA2BQ3zq3OODEQJTP9jqzUwd+0F2/8tIsv+C9osHXQ\"\n            + \"cTLHJqljTuN/XqxD27OSmAh1Yc80tg5L1P9vSOYxjKGEbrE7eF+mHKod5zrWMoSj\"\n            + \"xQUztWzYzgZWA4pfymjGs08Czypx1vS42e9JrbzaHuwXArWgI7wvwVKxqQKBgQCS\"\n            + \"ByIZav7Zljr+oUdf5fdBQjPVGowYXZJBVTpMrCN7od4BxEIotuAjTy53lqHwaJhb\"\n            + \"KxsvED0m0/BqExjsq6ek6oV8JyLckSobJZ+BUSR60O8mZIW4Nv4wNCvMZl9rfN7m\"\n            + \"SnbL/0G/3jRViD1yCfVa/ayD2XMT0eThvfVOBzZjMwKBgB5jasP9TcDAyaEKta+g\"\n            + \"6glTM0MKUWfhZzYRbvDXdnatjjMEdixWm9aXwc0Nw+aN0KkdLBwvnDiVMtX+Xl2n\"\n            + \"BU2Gxxe3H8qrvkoi8zmzh3VWpqzfB+L3sXAq+6VNNYLEFLBR6D2u4DD86FvY+DsU\"\n            + \"miJlY6JEKpSxvkrS04XrbvHk\"\n            + \"-----END PRIVATE KEY-----\";\n        String payload = \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\";\n        String expectedSignature = \"uz2xmNkOf1EEsnZoWGraxR13F4jF9JYdC68uvWqYyjFyjwDgcoiMRm23UqsxWkmA208smu7TuGVxm1cWoZa/5fLQ2T/RcfLW9sokNWDzf1vM/xEpSmQEsSyIzd/c0pMWGsUkXsYpIarp3e/KSFzgwI73qZfbalBRkkK7u3dLWRVRk4kmEVf6dQUWMyXC44X8LB0M1XFrhkqcFYdcP9NcaCZCvb8nzG/nyUPtCJdBxVn8MMgXaVCM8DIbSrUBT0ZUxFQ3gTSd929LR1Tp6P2y4pHiWSElW5nJZYRRn2zUFt4xH7wvVKvuuEi8HH0Dusf6KBcWq8/3viAcRUh1Cj4fsQ==\";\n\n        RsaSignatureGenerator rsaSignatureGenerator = new RsaSignatureGenerator(pem);\n        String actualSignature = rsaSignatureGenerator.getSignature(payload);\n        assertEquals(expectedSignature, actualSignature);\n    }\n\n    @Test\n    public void testProtectedSigning() {\n        String pem = \"-----BEGIN ENCRYPTED PRIVATE KEY-----\"\n            + \"MIIE6TAbBgkqhkiG9w0BBQMwDgQIeaAJMt/f5woCAggABIIEyI2jIbFTPo/YBmwH\"\n            + \"N1QqzFgnMK5LJ0pKY5O71Z8EZIBVrXtEdcFzswbwRZajMpMyxFBjhrd2Y4kQvt9K\"\n            + \"aQfwyJFQxs8L2hC1GRYf5ba6aNZHkWendNFvOET02UQwgDNdGdWCfcaoMCap0ZQ2\"\n            + \"7VOyqbwtuRkM2LNlrtbu282FbwXe4wKljSNUIXTU3UaCmjOq5KIwBoRKJYlwn0qt\"\n            + \"IzlyJKVurHX4cl/1mw55Qs+hRL1CdK/iYF5yqclbK96zq16SKZsaZZhHMf1oub4U\"\n            + \"v5QjJiiQZc+WONFpBi2TybQ1qXF/6+70lDofY3+moUVcPgFHVsKEVQJtYuRZoGoc\"\n            + \"QlXyyCRTyCIQSO41jhkRcJtjCpVCfvCwlob0cM59Hlfll9DdjKyAtaUsuA+cDMqd\"\n            + \"ZE8HSjBGXuSwWthHSfblZ84LReHufmiIYGO3+n0dyjdLKcakYJ5V4QwxN2y4CwE7\"\n            + \"TxszcZo7QYDRaWlz7Lx2gtXlS6UNhs5Ylt7lm/omkdg57zf9DO9P8Vhn0thXs5Ql\"\n            + \"7QIUzhhg0kgnagwmy682AkV+O6F1wWw8qV0uUxABvo9VNuUF8aYBFr9iJn1fUg8Y\"\n            + \"kjCXKns/S9l6Zhz3rSgjFzNdWmm+1TigjyqaVgK9Jdte/v9IG46R3q/rQDMSqIFn\"\n            + \"zO25DfwOr8GvSgxN4Ervy/IwqoC94ptFCLfTJdL2n7IRWX9B+ai2RVSnBEXti4BR\"\n            + \"nigKUkVR7+ynwA8KN5sf6Zc0apHIuylXnu4xeO0rehxhh920v05IjAPm9YIOP33/\"\n            + \"UkHZWtXe2MooV4jmSiWMfAAgL8J26vML2xeGjhFZNQPM1/C3TB+UBxvKbD47EO6k\"\n            + \"FgoVmpFZGTXbF1Rq9hyUpABOSDhPyVuQxW+Tmyjm8O0Oc7KABUP09DKneiNFFtO9\"\n            + \"/B2u7FZ2ArfUzHesEJLWU+CtYVPdpbvtmd054tMV53j3cga2SQmg/yYWOQ7LyMjo\"\n            + \"7FR04aBTq+BXGgU/fZryyHUb1fULy7YTCiMyvi2m+JrZ+TE7DSvbDiJVcZ52x++J\"\n            + \"UpmID04q3wSRrOjci3yXUBvSa1yqxH8F5j3tv/nVM8x2s8ZLEgOHARS0CHZ6KRGD\"\n            + \"TP3KqsOPoKognk712zbqJPWhx9HdAm9+B/5qWtUEOoeFXlzyzj0suVICg9rPNJm1\"\n            + \"zx+STX5zTQ9oPNj6MFgZPSzIoW5Wb6vEdu7ANoANuStMp3E2sQf7q0gY5UkfnYyj\"\n            + \"beTf+1t3k9ybAVZiT6yZ7T5KGeh040zSN2vpVKEEWzkGrL4wGs+aMpvtBEnVJYLl\"\n            + \"medTIY6Z2PM/GFd8Ky8I+uTazXfvZUdilYCyZeIoO6Hyomy7TrnCzc/vjkhWtQrW\"\n            + \"+Pu5GjcGziUXNpzHNS+7uIOOa4f6VpGB8m5QsGUT7nPvVQqvta5fgJ8+W9J5Ifp5\"\n            + \"JqlyEAC7b7PFP9Rz65Do9AsbUbDStKMHl5CR/+CeOnzgfgeHCA8EroQ6WxMHFXec\"\n            + \"GSsZ7VWSSlgOyIEcNMhiM9PKAbx65TbUcvb+KWAI5aUwmdjrKFqOKDloX+2fn9y8\"\n            + \"qoOMy1yIoV7uYL+c4zugjzpgy58iBAiR1IVectxQY9lx1+d9tfjwK2Ne96hdzlLO\"\n            + \"/zJyaPr5pCU/IAr6Rg==\"\n            + \"-----END ENCRYPTED PRIVATE KEY-----\";\n\n        String password = \"password\";\n        String payload = \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\";\n        String expectedSignature = \"uz2xmNkOf1EEsnZoWGraxR13F4jF9JYdC68uvWqYyjFyjwDgcoiMRm23UqsxWkmA208smu7TuGVxm1cWoZa/5fLQ2T/RcfLW9sokNWDzf1vM/xEpSmQEsSyIzd/c0pMWGsUkXsYpIarp3e/KSFzgwI73qZfbalBRkkK7u3dLWRVRk4kmEVf6dQUWMyXC44X8LB0M1XFrhkqcFYdcP9NcaCZCvb8nzG/nyUPtCJdBxVn8MMgXaVCM8DIbSrUBT0ZUxFQ3gTSd929LR1Tp6P2y4pHiWSElW5nJZYRRn2zUFt4xH7wvVKvuuEi8HH0Dusf6KBcWq8/3viAcRUh1Cj4fsQ==\";\n\n        RsaSignatureGenerator rsaSignatureGenerator = new RsaSignatureGenerator(pem, password);\n        String actualSignature = rsaSignatureGenerator.getSignature(payload);\n        assertEquals(expectedSignature, actualSignature);\n    }\n}", "super_interfaces": [], "fields": []}]