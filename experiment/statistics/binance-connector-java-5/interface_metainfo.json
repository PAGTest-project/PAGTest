[{"uris": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient", "name": "WebSocketStreamClient", "file_path": "src/main/java/com/binance/connector/client/WebSocketStreamClient.java", "superclasses": [], "methods": ["[int]aggTradeStream(String,WebSocketMessageCallback)", "[int]aggTradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]tradeStream(String,WebSocketMessageCallback)", "[int]tradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]klineStream(String,String,WebSocketMessageCallback)", "[int]klineStream(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]miniTickerStream(String,WebSocketMessageCallback)", "[int]miniTickerStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]allMiniTickerStream(WebSocketMessageCallback)", "[int]allMiniTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]symbolTicker(String,WebSocketMessageCallback)", "[int]symbolTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]allTickerStream(WebSocketMessageCallback)", "[int]allTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]rollingWindowTicker(String,String,WebSocketMessageCallback)", "[int]rollingWindowTicker(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]allRollingWindowTicker(String,WebSocketMessageCallback)", "[int]allRollingWindowTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]bookTicker(String,WebSocketMessageCallback)", "[int]bookTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]partialDepthStream(String,int,int,WebSocketMessageCallback)", "[int]partialDepthStream(String,int,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]diffDepthStream(String,int,WebSocketMessageCallback)", "[int]diffDepthStream(String,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]listenUserStream(String,WebSocketMessageCallback)", "[int]listenUserStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]combineStreams(ArrayList<String>,WebSocketMessageCallback)", "[int]combineStreams(ArrayList<String>,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[void]closeConnection(int)", "[void]closeAllConnections()"], "method_uris": ["src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]aggTradeStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]aggTradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]tradeStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]tradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]klineStream(String,String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]klineStream(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]miniTickerStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]miniTickerStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allMiniTickerStream(WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allMiniTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]symbolTicker(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]symbolTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allTickerStream(WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]rollingWindowTicker(String,String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]rollingWindowTicker(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allRollingWindowTicker(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]allRollingWindowTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]bookTicker(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]bookTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]partialDepthStream(String,int,int,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]partialDepthStream(String,int,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]diffDepthStream(String,int,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]diffDepthStream(String,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]listenUserStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]listenUserStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]combineStreams(ArrayList<String>,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[int]combineStreams(ArrayList<String>,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[void]closeConnection(int)", "src/main/java/com/binance/connector/client/WebSocketStreamClient.java.WebSocketStreamClient.[void]closeAllConnections()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface WebSocketStreamClient {\n    int aggTradeStream(String symbol, WebSocketMessageCallback callback);\n    int aggTradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int tradeStream(String symbol, WebSocketMessageCallback callback);\n    int tradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int klineStream(String symbol, String interval, WebSocketMessageCallback callback);\n    int klineStream(String symbol, String interval, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int miniTickerStream(String symbol, WebSocketMessageCallback callback);\n    int miniTickerStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int allMiniTickerStream(WebSocketMessageCallback callback);\n    int allMiniTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int symbolTicker(String symbol, WebSocketMessageCallback callback);\n    int symbolTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int allTickerStream(WebSocketMessageCallback callback);\n    int allTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int rollingWindowTicker(String symbol, String windowSize, WebSocketMessageCallback callback);\n    int rollingWindowTicker(String symbol, String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int allRollingWindowTicker(String windowSize, WebSocketMessageCallback callback);\n    int allRollingWindowTicker(String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int bookTicker(String symbol, WebSocketMessageCallback callback);\n    int bookTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int partialDepthStream(String symbol, int levels, int speed, WebSocketMessageCallback callback);\n    int partialDepthStream(String symbol, int levels, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int diffDepthStream(String symbol, int speed, WebSocketMessageCallback callback);\n    int diffDepthStream(String symbol, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int listenUserStream(String listenKey, WebSocketMessageCallback callback);\n    int listenUserStream(String listenKey, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    int combineStreams(ArrayList<String> streams, WebSocketMessageCallback callback);\n    int combineStreams(ArrayList<String> streams, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    void closeConnection(int streamId);\n    void closeAllConnections();\n}"}, {"uris": "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient", "name": "SpotClient", "file_path": "src/main/java/com/binance/connector/client/SpotClient.java", "superclasses": [], "methods": ["[void]setShowLimitUsage(boolean)", "[void]setProxy(ProxyAuth)", "[void]unsetProxy()", "[AutoInvest]createAutoInvest()", "[Blvt]createBlvt()", "[C2C]createC2C()", "[Convert]createConvert()", "[CryptoLoans]createCryptoLoans()", "[Fiat]createFiat()", "[Futures]createFutures()", "[GiftCard]createGiftCard()", "[Market]createMarket()", "[Margin]createMargin()", "[Mining]createMining()", "[NFT]createNFT()", "[Pay]createPay()", "[PortfolioMargin]createPortfolioMargin()", "[Rebate]createRebate()", "[SimpleEarn]createSimpleEarn()", "[SpotAlgo]createSpotAlgo()", "[Staking]createStaking()", "[SubAccount]createSubAccount()", "[Trade]createTrade()", "[UserData]createUserData()", "[VIPLoans]createVIPLoans()", "[Wallet]createWallet()"], "method_uris": ["src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[void]setShowLimitUsage(boolean)", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[void]setProxy(ProxyAuth)", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[void]unsetProxy()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[AutoInvest]createAutoInvest()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Blvt]createBlvt()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[C2C]createC2C()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Convert]createConvert()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[CryptoLoans]createCryptoLoans()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Fiat]createFiat()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Futures]createFutures()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[GiftCard]createGiftCard()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Market]createMarket()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Margin]createMargin()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Mining]createMining()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[NFT]createNFT()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Pay]createPay()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[PortfolioMargin]createPortfolioMargin()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Rebate]createRebate()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[SimpleEarn]createSimpleEarn()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[SpotAlgo]createSpotAlgo()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Staking]createStaking()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[SubAccount]createSubAccount()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Trade]createTrade()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[UserData]createUserData()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[VIPLoans]createVIPLoans()", "src/main/java/com/binance/connector/client/SpotClient.java.SpotClient.[Wallet]createWallet()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface SpotClient {\n    void setShowLimitUsage(boolean showLimitUsage);\n    void setProxy(ProxyAuth proxy);\n    void unsetProxy();\n    AutoInvest createAutoInvest();\n    Blvt createBlvt();\n    C2C createC2C();\n    Convert createConvert();\n    CryptoLoans createCryptoLoans();\n    Fiat createFiat();\n    Futures createFutures();\n    GiftCard createGiftCard();\n    Market createMarket();\n    Margin createMargin();\n    Mining createMining();\n    NFT createNFT();\n    Pay createPay();\n    PortfolioMargin createPortfolioMargin();\n    Rebate createRebate();\n    SimpleEarn createSimpleEarn();\n    SpotAlgo createSpotAlgo();\n    Staking createStaking();\n    SubAccount createSubAccount();\n    Trade createTrade();\n    UserData createUserData();\n    VIPLoans createVIPLoans();\n    Wallet createWallet();\n}"}, {"uris": "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient", "name": "WebSocketApiClient", "file_path": "src/main/java/com/binance/connector/client/WebSocketApiClient.java", "superclasses": [], "methods": ["[void]connect(WebSocketMessageCallback)", "[void]connect(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[void]close()", "[WebSocketApiAccount]account()", "[WebSocketApiAuth]auth()", "[WebSocketApiGeneral]general()", "[WebSocketApiMarket]market()", "[WebSocketApiTrade]trade()", "[WebSocketApiUserDataStream]userDataStream()"], "method_uris": ["src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[void]connect(WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[void]connect(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[void]close()", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiAccount]account()", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiAuth]auth()", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiGeneral]general()", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiMarket]market()", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiTrade]trade()", "src/main/java/com/binance/connector/client/WebSocketApiClient.java.WebSocketApiClient.[WebSocketApiUserDataStream]userDataStream()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface WebSocketApiClient {\n    void connect(WebSocketMessageCallback onMessageCallback);\n    void connect(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback);\n    void close();\n    WebSocketApiAccount account();\n    WebSocketApiAuth auth();\n    WebSocketApiGeneral general();\n    WebSocketApiMarket market();\n    WebSocketApiTrade trade();\n    WebSocketApiUserDataStream userDataStream();\n}"}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/SignatureGenerator.java.SignatureGenerator", "name": "SignatureGenerator", "file_path": "src/main/java/com/binance/connector/client/utils/signaturegenerator/SignatureGenerator.java", "superclasses": [], "methods": ["[String]getSignature(String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/signaturegenerator/SignatureGenerator.java.SignatureGenerator.[String]getSignature(String)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface SignatureGenerator {\n    String getSignature(String payload);\n}"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosedCallback.java.WebSocketClosedCallback", "name": "WebSocketClosedCallback", "file_path": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosedCallback.java", "superclasses": [], "methods": ["[void]onClosed(int,String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosedCallback.java.WebSocketClosedCallback.[void]onClosed(int,String)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@FunctionalInterface\npublic interface WebSocketClosedCallback {\n    /**\n     * onclosed will be called when websocket connection has been successfully released. No further calls to this listener will be made.\n     *\n     * @param code The code send by server.\n     * @param reason The reason send by server.\n     */\n\n    void onClosed(int code, String reason);\n}"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketMessageCallback.java.WebSocketMessageCallback", "name": "WebSocketMessageCallback", "file_path": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketMessageCallback.java", "superclasses": [], "methods": ["[void]onMessage(String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketMessageCallback.java.WebSocketMessageCallback.[void]onMessage(String)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@FunctionalInterface\npublic interface WebSocketMessageCallback {\n    /**\n     * onMessage will be called when data is received from server.\n     *\n     * @param data The data send by server.\n     */\n    void onMessage(String data);\n}"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketFailureCallback.java.WebSocketFailureCallback", "name": "WebSocketFailureCallback", "file_path": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketFailureCallback.java", "superclasses": [], "methods": ["[void]onFailure(Throwable,Response)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketFailureCallback.java.WebSocketFailureCallback.[void]onFailure(Throwable,Response)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@FunctionalInterface\npublic interface WebSocketFailureCallback {\n    /**\n     * onFailure will be called when the websocket has been closed and an error has occurred.\n     *\n     * @param t The exception thrown by server.\n     * @param response The associated response.\n     */\n    void onFailure(Throwable t, Response response);\n}"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketOpenCallback.java.WebSocketOpenCallback", "name": "WebSocketOpenCallback", "file_path": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketOpenCallback.java", "superclasses": [], "methods": ["[void]onOpen(Response)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketOpenCallback.java.WebSocketOpenCallback.[void]onOpen(Response)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@FunctionalInterface\npublic interface WebSocketOpenCallback {\n    /**\n     * onOpen will be called when the websocket has been accepted by server and may begin transmitting messages.\n     *\n     * @param response The response send by server.\n     */\n    void onOpen(Response response);\n}"}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosingCallback.java.WebSocketClosingCallback", "name": "WebSocketClosingCallback", "file_path": "src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosingCallback.java", "superclasses": [], "methods": ["[void]onClosing(int,String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/websocketcallback/WebSocketClosingCallback.java.WebSocketClosingCallback.[void]onClosing(int,String)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@FunctionalInterface\npublic interface WebSocketClosingCallback {\n    /**\n     * onClosing will be called when websocket is informed that no more incoming messages will be transmitted.\n     *\n     * @param code The code send by server.\n     * @param reason The reason send by server.\n     */\n    void onClosing(int code, String reason);\n}"}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiModule.java.WebSocketApiModule", "name": "WebSocketApiModule", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiModule.java", "superclasses": [], "methods": [], "method_uris": [], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface WebSocketApiModule {\n\n}"}]